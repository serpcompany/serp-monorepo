[
  {
    "owner": "shopify",
    "repo": "polaris",
    "content": "TITLE: Adding a Banner at the Top of an Annotated Layout with Shopify Polaris in TypeScript/React\nDESCRIPTION: This snippet places a banner component above the annotated sections in a settings page to highlight important status or calls to action. The layout uses Layout, a presumed Banner component, and one or more annotated sections as children. Requirements: @shopify/polaris, a Banner component (custom or from Polaris), and TypeScript React.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Continue from the earlier snippets\nimport {Banner} from '@shopify/polaris';\nexport function AnnotatedWithBannerTopLayout() {\n  return (\n    <Layout>\n      <Banner title=\"Attention\" status=\"info\">\n        Important update message.\n      </Banner>\n      <AnnotatedSection title=\"Settings\" description=\"Section details\">\n        <Card title=\"Setting\">Content</Card>\n      </AnnotatedSection>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connected Text Fields in React\nDESCRIPTION: This example shows how to create connected text fields using the TextField component and the Connected component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Connected} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <Connected>\n      <TextField\n        label=\"Length\"\n        type=\"number\"\n        value=\"20\"\n        onChange={() => {}}\n        autoComplete=\"off\"\n      />\n      <TextField\n        label=\"Unit\"\n        value=\"cm\"\n        onChange={() => {}}\n        autoComplete=\"off\"\n      />\n    </Connected>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Form with Custom onSubmit Handler - React TSX\nDESCRIPTION: Example demonstrating how to implement a form with a custom onSubmit callback handler in Polaris. Utilized when custom form submission behavior is needed.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/form.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nform-custom-on-submit.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing an Annotated Layout with Sections in Shopify Polaris Using TypeScript/React\nDESCRIPTION: This snippet extends the standard annotated layout by grouping inputs or settings into separated thematic sections. Each AnnotatedSection contains a title, description, and its snap-in children. The approach requires @shopify/polaris and a React component pattern for annotated sections. Intended use is on settings or configuration pages to aid usability.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Continue from the previous AnnotatedSection example\nexport function AnnotatedWithSectionsLayout() {\n  return (\n    <Layout>\n      <AnnotatedSection title=\"Profile Info\" description=\"Edit your profile details\">\n        <Card title=\"Name\">Name field</Card>\n      </AnnotatedSection>\n      <AnnotatedSection title=\"Account\" description=\"Manage account preferences\">\n        <Card title=\"Email\">Email settings</Card>\n      </AnnotatedSection>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Details Layout with Shopify Polaris in JavaScript\nDESCRIPTION: This code snippet demonstrates the implementation of a 'Resource Details Layout' using Shopify's Polaris components, such as Card, BlockStack, InlineGrid, and Page. It organizes resources and actions into a two-column layout with cards for structured content display. Dependencies include components from the Polaris library, and the main parameters involve layout configurations for columns and actions. Expected output is a dynamically structured page for managing resource details with a responsive design.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-details-layout/variants/default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ResourceDetailsLayout() {\n  const SkeletonLabel = (props) => {\n    return (\n      <Box\n        background=\"bg-fill-tertiary\"\n        minHeight=\"1rem\"\n        maxWidth=\"5rem\"\n        borderRadius=\"base\"\n        {...props}\n      />\n    );\n  };\n  return (\n    <Page\n      backAction={{content: 'Products', url: '/products'}}\n      title=\"Product\"\n      secondaryActions=[\n        {\n          content: 'Duplicate',\n          icon: DuplicateIcon,\n          accessibilityLabel: 'Secondary action label',\n          onAction: () => alert('Duplicate action'),\n        },\n        {\n          content: 'Archive',\n          icon: ArchiveIcon,\n          accessibilityLabel: 'Secondary action label',\n          onAction: () => alert('Archive action'),\n        },\n        {\n          content: 'Delete',\n          icon: DeleteIcon,\n          destructive: true,\n          accessibilityLabel: 'Secondary action label',\n          onAction: () => alert('Delete action'),\n        },\n      ]\n      pagination={{\n        hasPrevious: true,\n        hasNext: true,\n      }}\n    >\n      <InlineGrid columns={{xs: 1, md: '2fr 1fr'}} gap=\"400\">\n        <BlockStack gap=\"400\">\n          <Card roundedAbove=\"sm\">\n            <BlockStack gap=\"400\">\n              <SkeletonLabel />\n              <Box border=\"divider\" borderRadius=\"base\" minHeight=\"2rem\" />\n              <SkeletonLabel maxWidth=\"8rem\" />\n              <Box border=\"divider\" borderRadius=\"base\" minHeight=\"20rem\" />\n            </BlockStack>\n          </Card>\n          <Card roundedAbove=\"sm\">\n            <BlockStack gap=\"400\">\n              <SkeletonDisplayText size=\"small\" />\n              <InlineGrid columns={{xs: 1, md: 2}}>\n                <Box border=\"divider\" borderRadius=\"base\" minHeight=\"10rem\" />\n                <Box border=\"divider\" borderRadius=\"base\" minHeight=\"10rem\" />\n              </InlineGrid>\n            </BlockStack>\n          </Card>\n        </BlockStack>\n        <BlockStack gap={{xs: '400', md: '200'}}>\n          <Card roundedAbove=\"sm\">\n            <BlockStack gap=\"400\">\n              <SkeletonDisplayText size=\"small\" />\n              <Box border=\"divider\" borderRadius=\"base\" minHeight=\"2rem\" />\n              <Box>\n                <Bleed marginInline={{xs: 400, sm: 500}}>\n                  <Divider />\n                </Bleed>\n              </Box>\n              <SkeletonLabel />\n              <Divider />\n              <SkeletonBodyText />\n            </BlockStack>\n          </Card>\n          <Card roundedAbove=\"sm\">\n            <BlockStack gap=\"400\">\n              <SkeletonLabel />\n              <Box border=\"divider\" borderRadius=\"base\" minHeight=\"2rem\" />\n              <SkeletonLabel maxWidth=\"4rem\" />\n              <Box border=\"divider\" borderRadius=\"base\" minHeight=\"2rem\" />\n              <SkeletonLabel />\n              <SkeletonBodyText />\n            </BlockStack>\n          </Card>\n        </BlockStack>\n      </InlineGrid>\n    </Page>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Annotated Layout for Settings Pages with Shopify Polaris in TypeScript/React\nDESCRIPTION: This snippet demonstrates usage of the annotated layout pattern, grouping themed settings with visible section titles and descriptions for context clarity. Commonly used for settings or preference pages, it leverages Polaris's Layout and custom annotation components. Dependencies: @shopify/polaris, implementation of an annotated section pattern, and TypeScript React.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Pseudocode for an annotated layout; substitute with your actual AnnotatedSection implementation\nimport {Layout, Card} from '@shopify/polaris';\n\nfunction AnnotatedSection({title, description, children}: {title: string, description: string, children: React.ReactNode}) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      <p>{description}</p>\n      {children}\n    </section>\n  );\n}\n\nexport function AnnotatedLayout() {\n  return (\n    <Layout>\n      <AnnotatedSection title=\"Settings\" description=\"Section description here\">\n        <Card title=\"Setting 1\">Control</Card>\n      </AnnotatedSection>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Input Field in React\nDESCRIPTION: This snippet demonstrates how to create a text field for email input using the TextField component with the 'email' type.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Email\"\n      type=\"email\"\n      value=\"\"\n      onChange={() => {}}\n      autoComplete=\"email\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable to Child Component in React\nDESCRIPTION: This example demonstrates how to programmatically scroll a child component into view within the Scrollable container. It's useful when you need to control the scroll position of specific elements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/scrollable.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useCallback, useRef} from 'react';\nimport {Scrollable, Button} from '@shopify/polaris';\n\nexport function ScrollableToChildComponentExample() {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'start',\n      });\n    }\n  }, []);\n\n  return (\n    <div style={{height: '200px'}}>\n      <Button onClick={handleClick}>Scroll to content</Button>\n      <Scrollable>\n        <div style={{height: '250px'}}>\n          <p>Some content</p>\n          <p>Some content</p>\n          <p>Some content</p>\n          <p>Some content</p>\n          <p ref={scrollRef}>Scrolled to content</p>\n        </div>\n      </Scrollable>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running the react-rename-component Migration\nDESCRIPTION: Command to execute the react-rename-component migration script with options for component name and props interface renaming.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_71\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"MyComponent\" --renameTo=\"MyRenamedComponent\" --renamePropsFrom=\"MyComponentPropType\" --renamePropsTo=\"MyRenamedComponentPropType\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Drop Zone in React\nDESCRIPTION: This code snippet demonstrates the basic implementation of a Drop Zone component. It allows merchants to upload files by dragging and dropping or clicking to select files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/drop-zone.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DropZone} from '@shopify/polaris';\n\nexport function DropZoneExample() {\n  return (\n    <DropZone\n      onDrop={handleDropZoneDrop}\n    >\n      <DropZone.FileUpload />\n    </DropZone>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping Action Autocomplete\nDESCRIPTION: Example of Autocomplete with wrapping text lines in action items.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-wrapping-action.tsx\n```\n\n----------------------------------------\n\nTITLE: Composing Date Range Picker UI using Polaris Components in JavaScript/JSX\nDESCRIPTION: This snippet illustrates how to assemble a date range picker interface leveraging various Polaris components in a React application. It demonstrates the use of controlled inputs for start and end dates, custom icons, validation on blur, and a DatePicker for visual selection. The implementation supports prop-driven configuration (such as disabling autocomplete and showing multiple months), and relies on callback functions (e.g., handleMonthChange, handleCalendarChange) for managing calendar state. Dependencies include @shopify/polaris, @shopify/icons, and React; it assumes supporting state and handler functions (e.g., inputValues, handleInputBlur) are defined in the surrounding context.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/variants/date-range.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nprefix={<Icon source={CalendarIcon} />}\nvalue={inputValues.until}\nonChange={handleEndInputValueChange}\nonBlur={handleInputBlur}\nautoComplete=\"off\"\n/>\n</div>\n</InlineStack>\n<div>\n  <DatePicker\n    month={month}\n    year={year}\n    selected={{\n      start: activeDateRange.period.since,\n      end: activeDateRange.period.until,\n    }}\n    onMonthChange={handleMonthChange}\n    onChange={handleCalendarChange}\n    multiMonth={shouldShowMultiMonth}\n    allowRange\n  />\n</div>\n</BlockStack>\n</Box>\n</InlineGrid>\n</Popover.Pane>\n<Popover.Pane fixed>\n  <Popover.Section>\n    <InlineStack align=\"end\">\n      <Button onClick={cancel}>Cancel</Button>\n      <Button primary onClick={apply}>\n        Apply\n      </Button>\n    </InlineStack>\n  </Popover.Section>\n</Popover.Pane>\n</Popover>\n);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Size Text Field in React\nDESCRIPTION: This snippet demonstrates how to create a text field that automatically resizes to fit its content using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  const [value, setValue] = React.useState('');\n\n  const handleChange = React.useCallback(\n    (newValue) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Product name\"\n      value={value}\n      onChange={handleChange}\n      autoSize\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Index with Filters and Views in JavaScript/React\nDESCRIPTION: This React functional component demonstrates a complete resource index layout using Shopify Polaris. It utilizes `Page` for overall structure, `Card` for content grouping, `IndexFilters` for filtering, sorting, and view management (tabs), and `IndexTable` to display a list of products. State management hooks (`useState`, `useCallback`) handle filter values, sort selection, selected tabs, and view data. Helper functions manage view operations (create, delete, duplicate, rename) and filter label formatting. Dependencies include React and various Polaris components (`Card`, `Badge`, `ChoiceList`, `IndexFilter`, `IndexTable`, `Page`, `useSetIndexFiltersMode`, `useIndexResourceState`).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-index-layout/variants/default.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction IndexFiltersDefault() {\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'type':\n        return value.map((val) => `type: ${val}`).join(', ');\n      case 'tone':\n        return value.map((val) => `tone: ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n  const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n  const [itemStrings, setItemStrings] = useState([\n    'All',\n    'Active',\n    'Draft',\n    'Archived',\n  ]);\n  const deleteView = (index) => {\n    const newItemStrings = [...itemStrings];\n    newItemStrings.splice(index, 1);\n    setItemStrings(newItemStrings);\n    setSelected(0);\n  };\n  const duplicateView = async (name) => {\n    setItemStrings([...itemStrings, name]);\n    setSelected(itemStrings.length);\n    await sleep(1);\n    return true;\n  };\n  const tabs = itemStrings.map((item, index) => ({\n    content: item,\n    index,\n    onAction: () => {},\n    id: `${item}-${index}`,\n    isLocked: index === 0,\n    actions:\n      index === 0\n        ? []\n        : [\n            {\n              type: 'rename',\n              onAction: () => {},\n              onPrimaryAction: async (value) => {\n                const newItemsStrings = tabs.map((item, idx) => {\n                  if (idx === index) {\n                    return value;\n                  }\n                  return item.content;\n                });\n                await sleep(1);\n                setItemStrings(newItemsStrings);\n                return true;\n              },\n            },\n            {\n              type: 'duplicate',\n              onPrimaryAction: async (name) => {\n                await sleep(1);\n                duplicateView(name);\n                return true;\n              },\n            },\n            {\n              type: 'edit',\n            },\n            {\n              type: 'delete',\n              onPrimaryAction: async () => {\n                await sleep(1);\n                deleteView(index);\n                return true;\n              },\n            },\n          ],\n  }));\n  const [selected, setSelected] = useState(0);\n  const onCreateNewView = async (value) => {\n    await sleep(500);\n    setItemStrings([...itemStrings, value]);\n    setSelected(itemStrings.length);\n    return true;\n  };\n  const sortOptions = [\n    {label: 'Product', value: 'product asc', directionLabel: 'Ascending'},\n    {label: 'Product', value: 'product desc', directionLabel: 'Descending'},\n    {label: 'Status', value: 'tone asc', directionLabel: 'A-Z'},\n    {label: 'Status', value: 'tone desc', directionLabel: 'Z-A'},\n    {label: 'Type', value: 'type asc', directionLabel: 'A-Z'},\n    {label: 'Type', value: 'type desc', directionLabel: 'Z-A'},\n    {label: 'Vendor', value: 'vendor asc', directionLabel: 'Ascending'},\n    {label: 'Vendor', value: 'vendor desc', directionLabel: 'Descending'},\n  ];\n  const [sortSelected, setSortSelected] = useState(['product asc']);\n  const {mode, setMode} = useSetIndexFiltersMode();\n  const onHandleCancel = () => {};\n  const onHandleSave = async () => {\n    await sleep(1);\n    return true;\n  };\n  const primaryAction =\n    selected === 0\n      ? {\n          type: 'save-as',\n          onAction: onCreateNewView,\n          disabled: false,\n          loading: false,\n        }\n      : {\n          type: 'save',\n          onAction: onHandleSave,\n          disabled: false,\n          loading: false,\n        };\n  const [tone, setStatus] = useState(undefined);\n  const [type, setType] = useState(undefined);\n  const [queryValue, setQueryValue] = useState('');\n  const handleStatusChange = useCallback((value) => setStatus(value), []);\n  const handleTypeChange = useCallback((value) => setType(value), []);\n  const handleFiltersQueryChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleStatusRemove = useCallback(() => setStatus(undefined), []);\n  const handleTypeRemove = useCallback(() => setType(undefined), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(''), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleStatusRemove();\n    handleTypeRemove();\n    handleQueryValueRemove();\n  }, [handleStatusRemove, handleQueryValueRemove, handleTypeRemove]);\n  const filters = [\n    {\n      key: 'tone',\n      label: 'Status',\n      filter: (\n        <ChoiceList\n          title=\"tone\"\n          titleHidden\n          choices={[\n            {label: 'Active', value: 'active'},\n            {label: 'Draft', value: 'draft'},\n            {label: 'Archived', value: 'archived'},\n          ]}\n          selected={tone || []}\n          onChange={handleStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'type',\n      label: 'Type',\n      filter: (\n        <ChoiceList\n          title=\"Type\"\n          titleHidden\n          choices={[\n            {label: 'Brew Gear', value: 'brew-gear'},\n            {label: 'Brew Merch', value: 'brew-merch'},\n          ]}\n          selected={type || []}\n          onChange={handleTypeChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n  const appliedFilters = [];\n  if (tone && !isEmpty(tone)) {\n    const key = 'tone';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, tone),\n      onRemove: handleStatusRemove,\n    });\n  }\n  if (type && !isEmpty(type)) {\n    const key = 'type';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, type),\n      onRemove: handleTypeRemove,\n    });\n  }\n  const products = [\n    {\n      id: '1020',\n      price: '$200',\n      product: '1ZPRESSO | J-MAX Manual Coffee Grinder',\n      tone: <Badge tone=\"success\">Active</Badge>,\n      inventory: '20 in stock',\n      type: 'Brew Gear',\n      vendor: 'Espresso Shot Coffee',\n    },\n    {\n      id: '1018',\n      price: '$200',\n      product: 'Acaia Pearl Set',\n      tone: <Badge tone=\"success\">Active</Badge>,\n      inventory: '2 in stock for 50 variants',\n      type: 'Brew Gear',\n      vendor: 'Espresso Shot Coffee',\n    },\n    {\n      id: '1016',\n      price: '$200',\n      product: 'AeroPress Go Brewer',\n      tone: <Badge tone=\"info\">Draft</Badge>,\n      inventory: '3 in stock for 50 variants',\n      type: 'Brew Gear',\n      vendor: 'Espresso Shot Coffee',\n    },\n    {\n      id: '1015',\n      price: '$200',\n      product: 'Canadiano Brewer',\n      tone: <Badge tone=\"success\">Active</Badge>,\n      inventory: '890 in stock for 50 variants',\n      type: 'Brew Merch',\n      vendor: 'Espresso Shot Coffee',\n    },\n    {\n      id: '1014',\n      price: '$200',\n      product: 'Canadiano Brewer White Ash',\n      tone: <Badge tone=\"success\">Active</Badge>,\n      inventory: '890 in stock for 50 variants',\n      type: 'Brew Gear',\n      vendor: 'Espresso Shot Coffee',\n    },\n  ];\n  const resourceName = {\n    singular: 'product',\n    plural: 'products',\n  };\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(products);\n  const rowMarkup = products.map(\n    ({id, thumbnail, product, price, tone, inventory, type, vendor}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <img\n            src={'https://picsum.photos/50?random=' + String(index)}\n            alt={'product thumbnail' + product}\n          />\n        </IndexTable.Cell>\n        <IndexTable.Cell>{product}</IndexTable.Cell>\n        <IndexTable.Cell>{price}</IndexTable.Cell>\n        <IndexTable.Cell>{tone}</IndexTable.Cell>\n        <IndexTable.Cell>{inventory}</IndexTable.Cell>\n        <IndexTable.Cell>{type}</IndexTable.Cell>\n        <IndexTable.Cell>{vendor}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n  return (\n    <Page\n      title={'Products'}\n      primaryAction={{content: 'Add product'}}\n      secondaryActions={[\n        {\n          content: 'Export',\n          accessibilityLabel: 'Export product list',\n          onAction: () => alert('Export action'),\n        },\n        {\n          content: 'Import',\n          accessibilityLabel: 'Import product list',\n          onAction: () => alert('Import action'),\n        },\n      ]}\n    >\n      <Card padding=\"0\">\n        <IndexFilters\n          sortOptions={sortOptions}\n          sortSelected={sortSelected}\n          queryValue={queryValue}\n          queryPlaceholder=\"Searching in all\"\n          onQueryChange={handleFiltersQueryChange}\n          onQueryClear={() => {}}\n          onSort={setSortSelected}\n          primaryAction={primaryAction}\n          cancelAction={{\n            onAction: onHandleCancel,\n            disabled: false,\n            loading: false,\n          }}\n          tabs={tabs}\n          selected={selected}\n          onSelect={setSelected}\n          canCreateNewView\n          onCreateNewView={onCreateNewView}\n          filters={filters}\n          appliedFilters={appliedFilters}\n          onClearAll={handleFiltersClearAll}\n          mode={mode}\n          setMode={setMode}\n        />\n        <IndexTable\n          resourceName={resourceName}\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Picker with Shopify Polaris Components\nDESCRIPTION: This code snippet defines a DateRangePicker component using Shopify Polaris components. It handles date selection, input validation, and responsive layout for different screen sizes. The component uses hooks for state management and includes utility functions for date formatting and validation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/variants/date-range.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DateRangePicker() {\n  const {mdDown, lgUp} = useBreakpoints();\n  const shouldShowMultiMonth = lgUp;\n  const today = new Date(new Date().setHours(0, 0, 0, 0));\n  const yesterday = new Date(\n    new Date(new Date().setDate(today.getDate() - 1)).setHours(0, 0, 0, 0),\n  );\n  const ranges = [\n    {\n      title: 'Today',\n      alias: 'today',\n      period: {\n        since: today,\n        until: today,\n      },\n    },\n    {\n      title: 'Yesterday',\n      alias: 'yesterday',\n      period: {\n        since: yesterday,\n        until: yesterday,\n      },\n    },\n    {\n      title: 'Last 7 days',\n      alias: 'last7days',\n      period: {\n        since: new Date(\n          new Date(new Date().setDate(today.getDate() - 7)).setHours(\n            0,\n            0,\n            0,\n            0,\n          ),\n        ),\n        until: yesterday,\n      },\n    },\n  ];\n  const [popoverActive, setPopoverActive] = useState(false);\n  const [activeDateRange, setActiveDateRange] = useState(ranges[0]);\n  const [inputValues, setInputValues] = useState({});\n  const [{month, year}, setDate] = useState({\n    month: activeDateRange.period.since.getMonth(),\n    year: activeDateRange.period.since.getFullYear(),\n  });\n  const datePickerRef = useRef(null);\n  const VALID_YYYY_MM_DD_DATE_REGEX = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\n  function isDate(date) {\n    return !isNaN(new Date(date).getDate());\n  }\n  function isValidYearMonthDayDateString(date) {\n    return VALID_YYYY_MM_DD_DATE_REGEX.test(date) && isDate(date);\n  }\n  function isValidDate(date) {\n    return date.length === 10 && isValidYearMonthDayDateString(date);\n  }\n  function parseYearMonthDayDateString(input) {\n    // Date-only strings (e.g. \"1970-01-01\") are treated as UTC, not local time\n    // when using new Date()\n    // We need to split year, month, day to pass into new Date() separately\n    // to get a localized Date\n    const [year, month, day] = input.split('-');\n    return new Date(Number(year), Number(month) - 1, Number(day));\n  }\n  function formatDateToYearMonthDayDateString(date) {\n    const year = String(date.getFullYear());\n    let month = String(date.getMonth() + 1);\n    let day = String(date.getDate());\n    if (month.length < 2) {\n      month = String(month).padStart(2, '0');\n    }\n    if (day.length < 2) {\n      day = String(day).padStart(2, '0');\n    }\n    return [year, month, day].join('-');\n  }\n  function formatDate(date) {\n    return formatDateToYearMonthDayDateString(date);\n  }\n  function nodeContainsDescendant(rootNode, descendant) {\n    if (rootNode === descendant) {\n      return true;\n    }\n    let parent = descendant.parentNode;\n    while (parent != null) {\n      if (parent === rootNode) {\n        return true;\n      }\n      parent = parent.parentNode;\n    }\n    return false;\n  }\n  function isNodeWithinPopover(node) {\n    return datePickerRef?.current\n      ? nodeContainsDescendant(datePickerRef.current, node)\n      : false;\n  }\n  function handleStartInputValueChange(value) {\n    setInputValues((prevState) => {\n      return {...prevState, since: value};\n    });\n    console.log('handleStartInputValueChange, validDate', value);\n    if (isValidDate(value)) {\n      const newSince = parseYearMonthDayDateString(value);\n      setActiveDateRange((prevState) => {\n        const newPeriod =\n          prevState.period && newSince <= prevState.period.until\n            ? {since: newSince, until: prevState.period.until}\n            : {since: newSince, until: newSince};\n        return {\n          ...prevState,\n          period: newPeriod,\n        };\n      });\n    }\n  }\n  function handleEndInputValueChange(value) {\n    setInputValues((prevState) => ({...prevState, until: value}));\n    if (isValidDate(value)) {\n      const newUntil = parseYearMonthDayDateString(value);\n      setActiveDateRange((prevState) => {\n        const newPeriod =\n          prevState.period && newUntil >= prevState.period.since\n            ? {since: prevState.period.since, until: newUntil}\n            : {since: newUntil, until: newUntil};\n        return {\n          ...prevState,\n          period: newPeriod,\n        };\n      });\n    }\n  }\n  function handleInputBlur({relatedTarget}) {\n    const isRelatedTargetWithinPopover =\n      relatedTarget != null && isNodeWithinPopover(relatedTarget);\n    // If focus moves from the TextField to the Popover\n    // we don't want to close the popover\n    if (isRelatedTargetWithinPopover) {\n      return;\n    }\n    setPopoverActive(false);\n  }\n  function handleMonthChange(month, year) {\n    setDate({month, year});\n  }\n  function handleCalendarChange({start, end}) {\n    const newDateRange = ranges.find((range) => {\n      return (\n        range.period.since.valueOf() === start.valueOf() &&\n        range.period.until.valueOf() === end.valueOf()\n      );\n    }) || {\n      alias: 'custom',\n      title: 'Custom',\n      period: {\n        since: start,\n        until: end,\n      },\n    };\n    setActiveDateRange(newDateRange);\n  }\n  function apply() {\n    setPopoverActive(false);\n  }\n  function cancel() {\n    setPopoverActive(false);\n  }\n  useEffect(() => {\n    if (activeDateRange) {\n      setInputValues({\n        since: formatDate(activeDateRange.period.since),\n        until: formatDate(activeDateRange.period.until),\n      });\n      function monthDiff(referenceDate, newDate) {\n        return (\n          newDate.month -\n          referenceDate.month +\n          12 * (referenceDate.year - newDate.year)\n        );\n      }\n      const monthDifference = monthDiff(\n        {year, month},\n        {\n          year: activeDateRange.period.until.getFullYear(),\n          month: activeDateRange.period.until.getMonth(),\n        },\n      );\n      if (monthDifference > 1 || monthDifference < 0) {\n        setDate({\n          month: activeDateRange.period.until.getMonth(),\n          year: activeDateRange.period.until.getFullYear(),\n        });\n      }\n    }\n  }, [activeDateRange]);\n  const buttonValue =\n    activeDateRange.title === 'Custom'\n      ? activeDateRange.period.since.toDateString() +\n        ' - ' +\n        activeDateRange.period.until.toDateString()\n      : activeDateRange.title;\n  return (\n    <Popover\n      active={popoverActive}\n      autofocusTarget=\"none\"\n      preferredAlignment=\"left\"\n      preferredPosition=\"below\"\n      fluidContent\n      sectioned={false}\n      fullHeight\n      activator={\n        <Button\n          size=\"slim\"\n          icon={CalendarIcon}\n          onClick={() => setPopoverActive(!popoverActive)}\n        >\n          {buttonValue}\n        </Button>\n      }\n      onClose={() => setPopoverActive(false)}\n    >\n      <Popover.Pane fixed>\n        <InlineGrid\n          columns={{\n            xs: '1fr',\n            mdDown: '1fr',\n            md: 'max-content max-content',\n          }}\n          gap={0}\n          ref={datePickerRef}\n        >\n          <Box\n            maxWidth={mdDown ? '516px' : '212px'}\n            width={mdDown ? '100%' : '212px'}\n            padding={{xs: 500, md: 0}}\n            paddingBlockEnd={{xs: 100, md: 0}}\n          >\n            {mdDown ? (\n              <Select\n                label=\"dateRangeLabel\"\n                labelHidden\n                onChange={(value) => {\n                  const result = ranges.find(\n                    ({title, alias}) => title === value || alias === value,\n                  );\n                  setActiveDateRange(result);\n                }}\n                value={activeDateRange?.title || activeDateRange?.alias || ''}\n                options={ranges.map(({alias, title}) => title || alias)}\n              />\n            ) : (\n              <Scrollable style={{height: '334px'}}>\n                <OptionList\n                  options={ranges.map((range) => ({\n                    value: range.alias,\n                    label: range.title,\n                  }))}\n                  selected={activeDateRange.alias}\n                  onChange={(value) => {\n                    setActiveDateRange(\n                      ranges.find((range) => range.alias === value[0]),\n                    );\n                  }}\n                />\n              </Scrollable>\n            )}\n          </Box>\n          <Box padding={{xs: 500}} maxWidth={mdDown ? '320px' : '516px'}>\n            <BlockStack gap=\"400\">\n              <InlineStack gap=\"200\">\n                <div style={{flexGrow: 1}}>\n                  <TextField\n                    role=\"combobox\"\n                    label={'Since'}\n                    labelHidden\n                    prefix={<Icon source={CalendarIcon} />}\n                    value={inputValues.since}\n                    onChange={handleStartInputValueChange}\n                    onBlur={handleInputBlur}\n                    autoComplete=\"off\"\n                  />\n                </div>\n                <Icon source={ArrowRightIcon} />\n                <div style={{flexGrow: 1}}>\n                  <TextField\n                    role=\"combobox\"\n                    label={'Until'}\n                    labelHidden\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Field with Label Action in React\nDESCRIPTION: This example shows how to add a secondary action associated with a text field label using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Tariff code\"\n      value=\"\"\n      onChange={() => {}}\n      labelAction={{content: 'Look up codes'}}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Font Values with Polaris Font Tokens\nDESCRIPTION: This snippet demonstrates how to replace old static font values with corresponding Polaris font tokens for font-size, font-weight, and line-height.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_46\n\nLANGUAGE: diff\nCODE:\n```\n- font-size: 16px;\n+ font-size: var(--p-font-size-200);\n\n- font-weight: 400;\n+ font-weight: var(--p-font-weight-regular);\n\n- line-height: 20px;\n+ font-family: var(--p-font-line-height-2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Listbox in React\nDESCRIPTION: Basic implementation of a control element used to let merchants select options.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/listbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Reference: listbox-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Color Picker in React\nDESCRIPTION: This example demonstrates the default implementation of the Color Picker component. It's used when merchants need to select a color visually rather than entering a technical value.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/color-picker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {ColorPicker} from '@shopify/polaris';\n\nexport function ColorPickerExample() {\n  return <ColorPicker onChange={() => {}} color=\"hsl(0, 100%, 50%)\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Building an Interactive App Settings Layout Example using Polaris in JavaScript\nDESCRIPTION: This snippet defines a full React functional component demonstrating an app settings page layout built with Polaris UI components, including Page, BlockStack, InlineGrid, Box, Card, Text, TextField, and Divider. Required dependencies are React and the Shopify Polaris library with respective components. The component expects a responsive context (useBreakpoints), and renders two sections with headings, descriptions, and grouped settings using text fields. Primary and secondary actions, divider appearance based on breakpoint, and concise hierarchical layouts are shown. Inputs are implicitly provided by the Polaris context and props, and the output is a complete UI section as used in admin settings pages.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/app-settings-layout/variants/default.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript {\"type\":\"livePreview\",\"id\":\"example\",\"title\":\"App settings layout\"}\\nfunction AppSettingsLayoutExample() {\\n  const {smUp} = useBreakpoints();\\n  return (\\n    <Page\\n      divider\\n      primaryAction={{content: 'View on your store', disabled: true}}\\n      secondaryActions={[\\n        {\\n          content: 'Duplicate',\\n          accessibilityLabel: 'Secondary action label',\\n          onAction: () => alert('Duplicate action'),\\n        },\\n      ]}\\n    >\\n      <BlockStack gap={{xs: '800', sm: '400'}}>\\n        <InlineGrid columns={{xs: '1fr', md: '2fr 5fr'}} gap=\"400\">\\n          <Box\\n            as=\"section\"\\n            paddingInlineStart={{xs: 400, sm: 0}}\\n            paddingInlineEnd={{xs: 400, sm: 0}}\\n          >\\n            <BlockStack gap=\"400\">\\n              <Text as=\"h3\" variant=\"headingMd\">\\n                InterJambs\\n              </Text>\\n              <Text as=\"p\" variant=\"bodyMd\">\\n                Interjambs are the rounded protruding bits of your puzzlie piece\\n              </Text>\\n            </BlockStack>\\n          </Box>\\n          <Card roundedAbove=\"sm\">\\n            <BlockStack gap=\"400\">\\n              <TextField label=\"Interjamb style\" />\\n              <TextField label=\"Interjamb ratio\" />\\n            </BlockStack>\\n          </Card>\\n        </InlineGrid>\\n        {smUp ? <Divider /> : null}\\n        <InlineGrid columns={{xs: '1fr', md: '2fr 5fr'}} gap=\"400\">\\n          <Box\\n            as=\"section\"\\n            paddingInlineStart={{xs: 400, sm: 0}}\\n            paddingInlineEnd={{xs: 400, sm: 0}}\\n          >\\n            <BlockStack gap=\"400\">\\n              <Text as=\"h3\" variant=\"headingMd\">\\n                Dimensions\\n              </Text>\\n              <Text as=\"p\" variant=\"bodyMd\">\\n                Interjambs are the rounded protruding bits of your puzzlie piece\\n              </Text>\\n            </BlockStack>\\n          </Box>\\n          <Card roundedAbove=\"sm\">\\n            <BlockStack gap=\"400\">\\n              <TextField label=\"Horizontal\" />\\n              <TextField label=\"Interjamb ratio\" />\\n            </BlockStack>\\n          </Card>\\n        </InlineGrid>\\n      </BlockStack>\\n    </Page>\\n  );\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Number Input Field in React\nDESCRIPTION: This example shows how to implement a text field specifically for numeric input using the TextField component with the 'number' type.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Inventory quantity\"\n      type=\"number\"\n      value=\"15\"\n      onChange={() => {}}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Two-Column Layout With Primary and Secondary Widths Using Shopify Polaris in TypeScript/React\nDESCRIPTION: This example demonstrates creating a two-column layout with a 2/3 primary section and 1/3 secondary section, a common pattern for detail or order pages. It uses the Layout.Section component's 'secondary' prop and relies on Polaris for responsive stacking. Requires installation of @shopify/polaris and a TypeScript React environment.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout, Card} from '@shopify/polaris';\n\nexport function TwoColumnsPrimarySecondaryLayout() {\n  return (\n    <Layout>\n      <Layout.Section>\n        <Card title=\"Primary section\">Main content</Card>\n      </Layout.Section>\n      <Layout.Section secondary>\n        <Card title=\"Secondary section\">Additional details</Card>\n      </Layout.Section>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Text Field in React\nDESCRIPTION: This example shows how to implement a multiline text field that automatically grows to accommodate additional text using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Description\"\n      value=\"\"\n      onChange={() => {}}\n      multiline={4}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Field with Help Text in React\nDESCRIPTION: This snippet demonstrates how to add help text below a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Account email\"\n      type=\"email\"\n      value=\"\"\n      onChange={() => {}}\n      helpText=\"We'll use this address if we need to contact you about your account.\"\n      autoComplete=\"email\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for Tabs\nDESCRIPTION: This shell command facilitates the migration of the Tabs component to LegacyTabs using the @shopify/polaris-migrator tool. It entails specifying the project path and renaming both component and prop names.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"Tabs\" --renameTo=\"LegacyTabs\" --renamePropsFrom=\"TabsProps\" --renamePropsTo=\"LegacyTabsProps\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Font Size Function with Polaris Font Tokens\nDESCRIPTION: This snippet shows how to replace the old SCSS font-size() function with corresponding Polaris font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n- font-size: font-size(input, base);\n+ font-size: var(--p-font-size-200);;\n```\n\n----------------------------------------\n\nTITLE: Replacing Subheading Component with Text Component in React\nDESCRIPTION: Shows the replacement of the Subheading component with the Text component using the headingSm variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <Subheading>Accounts</Subheading>\n+ <Text variant=\"headingSm\" as=\"h3\">Accounts</Text>\n```\n\n----------------------------------------\n\nTITLE: Default Autocomplete Implementation in React TSX\nDESCRIPTION: Basic implementation of the Autocomplete component to help merchants complete text input quickly from a list of options.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Range Slider in React\nDESCRIPTION: This example shows how to render a default Range Slider component for selecting a single value between 0 and 100.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/range-slider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nrange-slider-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Width Color Picker with Transparent Value in React\nDESCRIPTION: This example demonstrates a full-width Color Picker with transparent value support. It's used in visual builders for objects that may require transparent backgrounds.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/color-picker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {ColorPicker} from '@shopify/polaris';\n\nexport function ColorPickerExample() {\n  return <ColorPicker fullWidth allowAlpha onChange={() => {}} color=\"hsla(0, 100%, 50%, 0.5)\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Clear Button in React\nDESCRIPTION: This snippet demonstrates how to add a clear button to a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  const [value, setValue] = React.useState('Jaded Pixel');\n\n  const handleChange = React.useCallback(\n    (newValue) => setValue(newValue),\n    [],\n  );\n\n  const handleClearButtonClick = React.useCallback(() => setValue(''), []);\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={value}\n      onChange={handleChange}\n      clearButton\n      onClearButtonClick={handleClearButtonClick}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Drop Zone with Custom File Upload Text\nDESCRIPTION: This example shows how to customize the text displayed in the Drop Zone's file upload area. It allows for more flexibility in the component's appearance and messaging.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/drop-zone.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {DropZone} from '@shopify/polaris';\n\nexport function DropZoneExample() {\n  return (\n    <DropZone\n      onDrop={handleDropZoneDrop}\n    >\n      <DropZone.FileUpload\n        actionTitle=\"Add files\"\n        actionHint=\"or drop files to upload\"\n      />\n    </DropZone>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Checkbox Implementation in React TSX\nDESCRIPTION: Basic implementation of a checkbox component used in forms to toggle states on or off. Can be configured as selected, unselected, or disabled.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/checkbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ncheckbox-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Action-enabled Autocomplete\nDESCRIPTION: Implementation of Autocomplete with action functionality for quick task completion.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-action.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating External Link Button in React JSX\nDESCRIPTION: Demonstrates the correct way to create an external link button using the Button component from Shopify Polaris. It includes the necessary props for accessibility and visual indication of an external link.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/actions/button.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  accessibilityLabel=\"Terms and conditions (opens a new window)\"\n  icon={ExternalIcon}\n  url=\"http://example.com\"\n  external\n>\n  Terms and conditions\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Replacing TextStyle Negative with Text Component in React\nDESCRIPTION: Illustrates the replacement of negative TextStyle with the Text component using the critical tone.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"negative\">No supplier listed</TextStyle>\n+ <Text as=\"span\" tone=\"critical\">No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Spacing Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy spacing() function with space tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-spacing <path>\n```\n\n----------------------------------------\n\nTITLE: Creating Text Field with Prefix or Suffix in React\nDESCRIPTION: This example shows how to add a prefix or suffix to a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Price\"\n      type=\"number\"\n      value=\"2.00\"\n      onChange={() => {}}\n      prefix=\"$\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resource List with Empty State in TypeScript/React\nDESCRIPTION: Implementation showing how to handle empty states in a resource list for a smooth transition between loading and zero items.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nresource-list-with-empty-state.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Listbox with Search Functionality\nDESCRIPTION: Implementation that helps merchants browse, filter, and choose from a list of options using search capability.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/listbox.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Reference: listbox-with-search.tsx\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for Inline\nDESCRIPTION: This shell command automates renaming the Inline component to HorizontalStack using the @shopify/polaris-migrator, necessitating the specification of the project path and providing renaming options for component and props.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"Inline\" --renameTo=\"HorizontalStack\" --renamePropsFrom=\"InlineProps\" --renamePropsTo=\"HorizontalStackProps\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Border Function with Polaris Shape Tokens\nDESCRIPTION: This snippet demonstrates how to replace the old SCSS border() function with corresponding Polaris shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- border: border();\n+ border: var(--p-border-base);\n\n- border: border(divider);\n+ border: var(--p-border-divider);\n```\n\n----------------------------------------\n\nTITLE: Action-Enabled Tabs Implementation\nDESCRIPTION: Implementation demonstrating tabs with associated actions that can be performed on each tab.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/tabs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntabs-with-actions.tsx\n```\n\n----------------------------------------\n\nTITLE: Accessible Button Implementation - JSX\nDESCRIPTION: Examples of correct and incorrect accessibility labeling implementations for buttons in React components. Shows proper usage of accessibilityLabel prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/actions/button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>Edit shipping address</Button>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading>Shipping address</Heading>\n<Button accessibilityLabel=\"Edit shipping address\">Edit</Button>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button accessibilityLabel=\"Change your shipping address\">Edit</Button>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button accessibilityLabel=\"Edit\">Edit</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker with Transparent Value in React\nDESCRIPTION: This example shows how to implement a Color Picker with a transparent value option. It's useful in visual builders where objects may need transparent backgrounds.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/color-picker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {ColorPicker} from '@shopify/polaris';\n\nexport function ColorPickerExample() {\n  return <ColorPicker allowAlpha onChange={() => {}} color=\"hsla(0, 100%, 50%, 0.5)\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Polaris Components with React\nDESCRIPTION: Demonstrates how to render Polaris components within a React application. The example shows the proper component hierarchy with AppProvider, Page, Card, and Button components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nReactDOM.render(\n  <AppProvider i18n={enTranslations}>\n    <Page title=\"Example app\">\n      <LegacyCard sectioned>\n        <Button onClick={() => alert('Button clicked!')}>Example button</Button>\n      </LegacyCard>\n    </Page>\n  </AppProvider>,\n  document.querySelector('#app'),\n);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Z-Index Token Usage in CSS\nDESCRIPTION: Demonstrates the correct and incorrect usage of z-index values in CSS. Shows how to use Polaris z-index tokens (var(--p-z-index-1)) instead of raw numeric values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/z-index-declaration-property-value-allowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ z-index: var(--p-z-index-1);\n// Don't\n- z-index: 1;\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in JSX\nDESCRIPTION: Demonstrates how to use Polaris icon components to visualize product core parts and actions. Ensures accessibility by pairing icons with text and using the `accessibilityLabel` prop when necessary.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/icon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon source={OrderIcon} />\n<p>No orders yet</p>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button icon={PlusCircleIcon}>Add a product</Button>\n```\n\n----------------------------------------\n\nTITLE: Updating v12 Avatar Component Size Prop (Diff/Shell)\nDESCRIPTION: Shows the code changes and command for the `v12-react-avatar-component` migration. This replaces deprecated `size` prop values (e.g., 'extraSmall', 'medium', 'xl-experimental') in the React `Avatar` component with their corresponding v12 values (e.g., 'xs', 'md', 'xl').\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <Avatar size=\"extraSmall\" />\n- <Avatar size=\"small\" />\n- <Avatar size=\"medium\" />\n- <Avatar size=\"large\" />\n- <Avatar size=\"xl-experimental\" />\n- <Avatar size=\"2xl-experimental\" />\n+ <Avatar size=\"xs\" />\n+ <Avatar size=\"sm\" />\n+ <Avatar size=\"md\" />\n+ <Avatar size=\"lg\" />\n+ <Avatar size=\"xl\" />\n+ <Avatar size=\"xl\" />\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-react-avatar-component <path>\n```\n\n----------------------------------------\n\nTITLE: Running the v9-replace-border-declarations Migration\nDESCRIPTION: Command to execute the v9-replace-border-declarations migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_51\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-replace-border-declarations <path>\n```\n\n----------------------------------------\n\nTITLE: Default Radio Button Implementation in TypeScript/React\nDESCRIPTION: Basic implementation of a radio button component where merchants must make a single selection.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/radio-button.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nradio-button-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Renaming AlphaCard to Card using React\nDESCRIPTION: This important migration snippet illustrates renaming the AlphaCard to Card component, provided all existing Card instances are first migrated to LegacyCard, due to incompatibility issues.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n- <AlphaCard prop />\n+ <Card prop />\n- export interface AlphaCardProps {}\n+ export interface CardProps {}\n```\n\n----------------------------------------\n\nTITLE: Updating v12 Button Component Props (Diff/Shell)\nDESCRIPTION: Illustrates the code changes and command for the `v12-react-update-button-component` migration. This consolidates deprecated boolean props (`plain`, `primary`, `destructive`, `outline`, etc.) on the React `Button` component into the new `variant` and `tone` props introduced in v12.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- <Button plain />\n+ <Button variant=\"plain\" />\n- <Button primary />\n+ <Button variant=\"primary\" />\n- <Button primary plain />\n+ <Button variant=\"tertiary\" />\n- <Button monochrome plain />\n+ <Button variant=\"monochromePlain\" />\n- <Button destructive />\n+ <Button variant=\"primary\" tone=\"critical\" />\n- <Button primarySuccess />\n+ <Button variant=\"primary\" tone=\"success\" />\n- <Button destructive plain />\n+ <Button variant=\"plain\" tone=\"critical\" />\n- <Button destructive />\n+ <Button variant=\"primary\" tone=\"critical\" />\n- <Button primarySuccess />\n+ <Button variant=\"primary\" tone=\"success\" />\n- <Button destructive outline />\n+ <Button tone=\"critical\" />\n- <Button destructive plain />\n+ <Button variant=\"plain\" tone=\"critical\" />\n- <Button monochrome />\n+ <Button />\n- <Button outline />\n+ <Button />\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-react-update-button-component <path>\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Slider with Custom Min and Max in React\nDESCRIPTION: This snippet demonstrates how to create a Range Slider with specific minimum and maximum values for selecting a single value within a custom range.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/range-slider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nrange-slider-with-min-and-max.tsx\n```\n\n----------------------------------------\n\nTITLE: Setting autocomplete attribute in HTML form fields\nDESCRIPTION: Code examples showing how to turn off autocomplete/autofill in HTML form fields. Different approaches are needed for Chrome vs other browsers due to inconsistent browser support.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\nautocomplete=\"off\"\n```\n\nLANGUAGE: html\nCODE:\n```\nautocomplete=\"nope\"\n```\n\n----------------------------------------\n\nTITLE: Using Color Variables in CSS Properties\nDESCRIPTION: Demonstrates the correct usage of Polaris color design tokens through CSS custom properties instead of named colors. Shows examples for both text color and SVG fill properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/color-color-named.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ color: var(--p-color-text);\n+ fill: var(--p-color-icon)\n// Don't\n- color: black;\n- fill: dimgray;\n```\n\n----------------------------------------\n\nTITLE: Updating TextField Prop to Variant in Bash\nDESCRIPTION: Updates prop 'borderless' to 'variant=\"borderless\"' for TextField components. Use 'npx @shopify/polaris-migrator'. Targets source files with .ts or .tsx extensions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName TextField --fromPropType boolean --fromProp borderless --toProp variant --toValue borderless \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Spacing Function with Polaris Space Tokens\nDESCRIPTION: This snippet shows how to replace the old SCSS spacing() function with corresponding Polaris space tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n- padding: spacing();\n- margin: spacing(loose) spacing(tight);\n+ padding: var(--p-space-4);\n+ margin: var(--p-space-5) var(--p-space-2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Listbox with Custom Elements\nDESCRIPTION: Implementation demonstrating custom rendering of options within the listbox.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/listbox.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Reference: listbox-with-custom-element.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Text Field with Value Selected on Focus in React\nDESCRIPTION: This snippet demonstrates how to select all text inside a text field on focus using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Store name\"\n      value=\"Jaded Pixel\"\n      onChange={() => {}}\n      selectTextOnFocus\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Range Slider with Prefix and Suffix in React\nDESCRIPTION: This snippet shows how to add prefix and suffix content to a Range Slider, providing additional context at the start and end of the input range.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/range-slider.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nrange-slider-with-prefix-and-suffix.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing a Single Date Picker with Polaris Components in React\nDESCRIPTION: This React functional component, `DatePickerExample`, demonstrates how to create a single date picker using Polaris components. It integrates a `TextField` (with a calendar icon) that, upon focus, activates a `Popover` containing a `DatePicker`. State management with `useState` and `useEffect` hooks handles the selected date, calendar navigation (month/year), and popover visibility. Helper functions manage interactions like closing the popover and handling date selection.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/variants/single-date.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DatePickerExample() {\n  function nodeContainsDescendant(rootNode, descendant) {\n    if (rootNode === descendant) {\n      return true;\n    }\n    let parent = descendant.parentNode;\n    while (parent != null) {\n      if (parent === rootNode) {\n        return true;\n      }\n      parent = parent.parentNode;\n    }\n    return false;\n  }\n  const [visible, setVisible] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [{month, year}, setDate] = useState({\n    month: selectedDate.getMonth(),\n    year: selectedDate.getFullYear(),\n  });\n  const formattedValue = selectedDate.toISOString().slice(0, 10);\n  const datePickerRef = useRef(null);\n  function isNodeWithinPopover(node) {\n    return datePickerRef?.current\n      ? nodeContainsDescendant(datePickerRef.current, node)\n      : false;\n  }\n  function handleInputValueChange() {\n    console.log('handleInputValueChange');\n  }\n  function handleOnClose({relatedTarget}) {\n    setVisible(false);\n  }\n  function handleMonthChange(month, year) {\n    setDate({month, year});\n  }\n  function handleDateSelection({end: newSelectedDate}) {\n    setSelectedDate(newSelectedDate);\n    setVisible(false);\n  }\n  useEffect(() => {\n    if (selectedDate) {\n      setDate({\n        month: selectedDate.getMonth(),\n        year: selectedDate.getFullYear(),\n      });\n    }\n  }, [selectedDate]);\n  return (\n    <BlockStack inlineAlign=\"center\" gap=\"400\">\n      <Box minWidth=\"276px\" padding={{xs: 200}}>\n        <Popover\n          active={visible}\n          autofocusTarget=\"none\"\n          preferredAlignment=\"left\"\n          fullWidth\n          preferInputActivator={false}\n          preferredPosition=\"below\"\n          preventCloseOnChildOverlayClick\n          onClose={handleOnClose}\n          activator={\n            <TextField\n              role=\"combobox\"\n              label={'Start date'}\n              prefix={<Icon source={CalendarIcon} />}\n              value={formattedValue}\n              onFocus={() => setVisible(true)}\n              onChange={handleInputValueChange}\n              autoComplete=\"off\"\n            />\n          }\n        >\n          <Card ref={datePickerRef}>\n            <DatePicker\n              month={month}\n              year={year}\n              selected={selectedDate}\n              onMonthChange={handleMonthChange}\n              onChange={handleDateSelection}\n            />\n          </Card>\n        </Popover>\n      </Box>\n    </BlockStack>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AppProvider props in React\nDESCRIPTION: Shows how to update the AppProvider component by removing the theme prop and replacing it with the colorScheme prop for setting light or dark mode.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport {AppProvider} from '@shopify/polaris-react';\n\nconst App = (props) => (\n-  <AppProvider theme={{colorScheme: 'dark'}}>\n-    {props.children}\n-  </AppProvider>\n+  <AppProvider colorScheme=\"dark\">\n+    {props.children}\n+  </AppProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating v8 Icon Names (Diff/Shell)\nDESCRIPTION: Illustrates the code changes and command for the `icons-v8-update-names` migration. This replaces legacy Polaris icon component names (e.g., `AbandonedCartMajor`, `AccessibilityMinor`) with their new names in v8 (e.g., `CartAbandonedIcon`, `EyeCheckMarkIcon`).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon source={AbandonedCartMajor} />\n- <Icon source={AbandonedCartMinor} />\n- <Icon source={AbandonedCartFilledMajor} />\n- <Icon source={AbandonedCartFilledMinor} />\n- <Icon source={AccessibilityMajor} />\n- <Icon source={AccessibilityMinor} />\n- <Icon source={ActivitiesMajor} />\n- <Icon source={ActivitiesMinor} />\n+ <Icon source={CartAbandonedIcon} />\n+ <Icon source={CartAbandonedIcon} />\n+ <Icon source={CartAbandonedFilledIcon} />\n+ <Icon source={CartAbandonedFilledIcon} />\n+ <Icon source={EyeCheckMarkIcon} />\n+ <Icon source={EyeCheckMarkIcon} />\n+ <Icon source={SportsIcon} />\n+ <Icon source={SportsIcon} />\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator icons-v8-update-names <path>\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Font Weight Values in CSS and React\nDESCRIPTION: Demonstrates the preferred approach of using semantic font weight variables instead of hard-coded numeric values. Shows correct usage with React Text component properties and CSS variables, alongside incorrect usage with numeric values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/typography-declaration-property-value-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ <Text fontWeight='bold' />\n// Do\n+ font-weight: var(--p-font-weight-bold);\n// Don't\n- font-weight: 700;\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnail with Component Source - Shopify Polaris - TypeScript/React\nDESCRIPTION: Demonstrates passing a React component (such as an icon) instead of an image URL to the source prop of the Thumbnail component, customizing its content. This approach depends on both @shopify/polaris and the icon component library in use. Useful for representing objects visually beyond static images.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/thumbnail.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Thumbnail} from '@shopify/polaris';\nimport {CirclePlusMajor} from '@shopify/polaris-icons';\n\n<Thumbnail\n  source={CirclePlusMajor}\n  alt=\"Add icon thumbnail\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating v14 Font Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code changes and command for the `v14-styles-replace-custom-property-font` migration. This replaces deprecated font-related CSS custom properties (like `--p-font-size-750`, `--p-font-letter-spacing-denser`, `--p-font-line-height-1000`) with their updated v14 equivalents.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- font-size: var(--p-font-size-750);\n+ font-size: var(--p-font-size-600);\n```\n\nLANGUAGE: diff\nCODE:\n```\n- letter-spacing: var(--p-font-letter-spacing-denser);\n+ letter-spacing: var(--p-font-letter-spacing-dense);\n```\n\nLANGUAGE: diff\nCODE:\n```\n- line-height: var(--p-font-line-height-1000);\n+ line-height: var(--p-font-line-height-800);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v14-styles-replace-custom-property-font <path>\n```\n\n----------------------------------------\n\nTITLE: Resource List with Bulk Actions in TypeScript/React\nDESCRIPTION: Implementation demonstrating how to enable bulk actions on selected items in a resource list.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-list.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nresource-list-with-bulk-actions.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Text Field in React\nDESCRIPTION: This snippet demonstrates how to create a basic text field component for short text input. It uses the TextField component from the Polaris library.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField label=\"Store name\" onChange={() => {}}\n    autoComplete=\"off\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Listbox with Loading State\nDESCRIPTION: Implementation showing a loading indicator to inform merchants that additional options are being loaded.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/listbox.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Reference: listbox-with-loading.tsx\n```\n\n----------------------------------------\n\nTITLE: Setting inputMode for specialized virtual keyboards\nDESCRIPTION: HTML attribute example showing how to set the inputMode property to select an appropriate virtual keyboard for the type of data expected to be entered by the user.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\ninputMode=\"numeric\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with React-i18n in Shopify Polaris\nDESCRIPTION: This code snippet demonstrates how to use the Shopify/react-i18n library to format currency in a React component. It shows how to set the locale and format currency in both short and explicit forms.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/foundations/formatting-localized-currency.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useI18n} from '@shopify/react-i18n';\n\nconst [i18n] = useI18n();\n\ni18n.locale = 'de-AT';\n\nconst eurDeAt = i18n.formatCurrency(price, {\n  currency: 'EUR',\n  form: 'short',\n});\n\nconst eurDeAtExp = i18n.formatCurrency(price, {\n  currency: 'EUR',\n  form: 'explicit',\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating VisuallyHidden Component to Text Component in JSX\nDESCRIPTION: Diff showing how to replace the deprecated VisuallyHidden component with the new Text component, including setting the appropriate HTML element, variant, and visuallyHidden prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n- <VisuallyHidden>\n-   <Heading>Title and description</Heading>\n- </VisuallyHidden>\n+ <Text as=\"h2\" variant=\"headingMd\" visuallyHidden>Title and description</Text>\n```\n\n----------------------------------------\n\nTITLE: Resource Item with Vertical Alignment in React TSX\nDESCRIPTION: Implementation demonstrating how to adjust the vertical alignment of content within a resource item.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-item.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nresource-item-with-vertical-alignment.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual Thumb Range Slider in React\nDESCRIPTION: This example demonstrates how to create a Range Slider with two thumbs for selecting two values from a range of numbers.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/range-slider.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nrange-slider-with-dual-thumb.tsx\n```\n\n----------------------------------------\n\nTITLE: Constructing a Two-Column Layout With Equal Widths Using Shopify Polaris in TypeScript/React\nDESCRIPTION: This snippet showcases a symmetric 1/2 + 1/2 column layout for displaying content of equal importance. The Layout.Section 'oneHalf' prop ensures equal-width columns and automatic stacking on small screens for responsiveness. Dependencies include @shopify/polaris and support for JSX/TypeScript.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout, Card} from '@shopify/polaris';\n\nexport function TwoColumnsEqualWidthLayout() {\n  return (\n    <Layout>\n      <Layout.Section oneHalf>\n        <Card title=\"Left section\">Left-side content</Card>\n      </Layout.Section>\n      <Layout.Section oneHalf>\n        <Card title=\"Right section\">Right-side content</Card>\n      </Layout.Section>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resource List with Selection in TypeScript/React\nDESCRIPTION: Example showing resource list with item selection functionality but without bulk actions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-list.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nresource-list-with-selection-and-no-bulk-actions.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText Small with Text Component in React\nDESCRIPTION: Shows how to replace the small size DisplayText component with the equivalent Text component using the headingLg variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"small\">Sales this year</DisplayText>\n+ <Text variant=\"headingLg\" as=\"p\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: Running the Shadow Property Migration Command (Shell)\nDESCRIPTION: Provides a CLI command for migrating deprecated shadow (depth) CSS custom properties to new ones using the Polaris migrator tool. Requires the '@shopify/polaris-migrator' npm package and a valid file or directory path. Automates the replacement of old shadow tokens throughout project stylesheets.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_83\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-depth <path>\\n```\n```\n\n----------------------------------------\n\nTITLE: Data Table Implementation Examples\nDESCRIPTION: Collection of example implementations showing different variants of the data table component, including sortable tables, footers, custom totals, fixed columns, and pagination.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/tables/data-table.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndata-table-default.tsx\ndata-table-sortable.tsx\ndata-table-with-footer.tsx\ndata-table-with-custom-totals-heading.tsx\ndata-table-with-totals-in-footer.tsx\ndata-table-with-row-heading-links.tsx\ndata-table-with-all-of-its-elements.tsx\ndata-table-with-fixed-first-columns.tsx\ndata-table-with-increased-density-and-zebra-striping.tsx\ndata-table-with-sticky-header-enabled.tsx\ndata-table-with-pagination.tsx\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Button Component Update\nDESCRIPTION: This command runs the Polaris migrator to update the Button component, consolidating boolean props to 'variant' and 'tone'.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-react-update-button-component \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Autocomplete\nDESCRIPTION: Implementation of Autocomplete with lazy loading functionality for improved performance.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-lazy-loading.tsx\n```\n\n----------------------------------------\n\nTITLE: Default Inline Error Component in React (TypeScript)\nDESCRIPTION: Example of the default Inline Error component usage. Used when merchants enter invalid information into multiple form fields or when errors need to be displayed in non-standard positions in the form layout.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/inline-error.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninline-error-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Constructing a Three-Column Equal-Width Layout with Shopify Polaris in TypeScript/React\nDESCRIPTION: This snippet builds a three-column layout where each section has equal width, suitable for content areas of identical priority. The Layout component with three child Layout.Section elements ensures visually even columns and responsiveness. Requires the @shopify/polaris dependency and TypeScript React support.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout, Card} from '@shopify/polaris';\n\nexport function ThreeColumnsEqualWidthLayout() {\n  return (\n    <Layout>\n      <Layout.Section>\n        <Card title=\"Section 1\">First third content</Card>\n      </Layout.Section>\n      <Layout.Section>\n        <Card title=\"Section 2\">Second third content</Card>\n      </Layout.Section>\n      <Layout.Section>\n        <Card title=\"Section 3\">Last third content</Card>\n      </Layout.Section>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Size Text Field with Dynamic Suffix in React\nDESCRIPTION: This example shows how to implement an auto-size text field with a dynamic suffix that only appears when the field has a value.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  const [value, setValue] = React.useState('');\n\n  const handleChange = React.useCallback(\n    (newValue) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Weight\"\n      value={value}\n      onChange={handleChange}\n      autoSize\n      suffix={value && 'kg'}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Form Without Native Validation - React TSX\nDESCRIPTION: Implementation showing how to disable native form validation in a Polaris form component. Useful when implementing custom validation logic.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/form.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nform-without-native-validation.tsx\n```\n\n----------------------------------------\n\nTITLE: Displaying Motion Tokens with JSX\nDESCRIPTION: This snippet maps and displays motion tokens using a TokenList component in JSX. It sorts the tokens based on their names, giving priority to those containing 'ease' or 'linear'. Each token is rendered as a TokenList.Item component utilizing its category and key properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/motion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{tokens.motion\n  .sort((token) =>\n    token.name.includes('ease') || token.name.includes('linear')\n      ? -1\n      : 1,\n  )\n  .map((token) => (\n    <TokenList.Item\n      key={token.name}\n      category=\"motion\"\n      token={token}\n    />\n  ))}\n```\n\n----------------------------------------\n\nTITLE: Migrating Caption Component to Text Component in JSX\nDESCRIPTION: Diff showing how to replace the deprecated Caption component with the new Text component, including setting the appropriate HTML element and variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n- <Caption>Received April 21, 2017</Caption>\n+ <Text as=\"p\" variant=\"bodySm\">Received April 21, 2017</Text>\n```\n\n----------------------------------------\n\nTITLE: Select Component - Inline Label\nDESCRIPTION: Implementation of Select component with an inline label, specifically designed for cases where the select must fit on a single line, such as in a toolbar.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/select.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nselect-with-inline-label.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Text Field with Validation Error in React\nDESCRIPTION: This snippet demonstrates how to display a validation error for a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Store name\"\n      value=\"\"\n      onChange={() => {}}\n      error=\"Store name is required\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Select Component - Default Implementation\nDESCRIPTION: Basic implementation of the Select component that presents a classic dropdown menu or equivalent picker as determined by merchants' browsers.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nselect-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Default Resource List Implementation in TypeScript/React\nDESCRIPTION: A basic resource list implementation showing simple items without bulk actions, sorting, or filtering.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nresource-list-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Table-Specific Pagination Implementation\nDESCRIPTION: Specialized pagination implementation designed for use at the bottom of tables or lists.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/pagination.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\npagination-with-table-type.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText Extra Large with Text Component in React\nDESCRIPTION: Illustrates the replacement of extra large DisplayText with Text component using the heading3xl variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"extraLarge\">Sales this year</DisplayText>\n+ <Text variant=\"heading3xl\" as=\"p\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Text Emphasis Mixins with Polaris Tokens\nDESCRIPTION: This snippet demonstrates how to replace old text emphasis mixins with corresponding Polaris tokens and declarations.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n- @include text-emphasis-normal;\n+ color: var(--p-text);\n+ font-weight: var(--p-font-weight-regular);\n```\n\n----------------------------------------\n\nTITLE: Migrating List spacing prop to gap with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating List component's spacing prop to gap across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName List --fromProp spacing --toProp gap \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Composing Skeleton Page with Static Content using Polaris in TypeScript\nDESCRIPTION: Shows how to use the Skeleton Page with a known, unchanging title and static header in a TypeScript React component, leveraging Shopify Polaris. This is appropriate for situations where the page's title and header never change; the skeleton only represents data that is actually loading. Requires @shopify/polaris, statically sets props like title, and outputs a UI with a static skeleton representation for the header and possible children.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/skeleton-page.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* skeleton-page-with-static-content.tsx */\n<SkeletonPage title=\"Products\">\n  {/* Use content that reflects the static UI layout */}\n</SkeletonPage>\n\n```\n\n----------------------------------------\n\nTITLE: Updating Stack Spacing in React Components\nDESCRIPTION: These diffs demonstrate how to update spacing in LegacyStack and InlineStack components to match the new design language in Polaris v11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_140\n\nLANGUAGE: diff\nCODE:\n```\n- spacing='loose'\n+ spacing={undefined}\n```\n\nLANGUAGE: diff\nCODE:\n```\n- gap='5'\n+ gap='4'\n```\n\n----------------------------------------\n\nTITLE: Grouping Multiple Fields in a Row with Polaris Field Group in TypeScript/React\nDESCRIPTION: This snippet illustrates the use of a field group within FormLayout to arrange multiple fields horizontally, ideal for commonly associated fields like city, state, and ZIP code. It relies on React and @shopify/polaris for functionality, with FormLayout.Group as the grouping component. Input fields are passed in as children and will wrap automatically for smaller screens, enhancing responsiveness. The limitation is that grouping unrelated fields may harm usability and accessibility.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/form-layout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* File: form-layout-field-group.tsx */\n<FormLayout>\n  <FormLayout.Group>\n    <TextField label=\"City\" autoComplete=\"address-level2\" />\n    <TextField label=\"State\" autoComplete=\"address-level1\" />\n    <TextField label=\"ZIP code\" autoComplete=\"postal-code\" />\n  </FormLayout.Group>\n</FormLayout>\n```\n\n----------------------------------------\n\nTITLE: Select Component - Separate Validation Error\nDESCRIPTION: Implementation showing separate validation error handling for the Select component within a group of dependent form inputs.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/select.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nselect-with-separate-validation-error.tsx\n```\n\n----------------------------------------\n\nTITLE: Default Tabs Implementation in React TSX\nDESCRIPTION: Basic implementation of tabs for general use cases, particularly suitable when there are more than three tabs.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/tabs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntabs-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component Integration with AppProvider and React Router\nDESCRIPTION: This snippet demonstrates how to use a custom link component with AppProvider to integrate with React Router for client-side navigation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/app-provider.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {BrowserRouter, Link as ReactRouterLink} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <AppProvider linkComponent={Link}>\n        {/* App content including your <Route> components */}\n      </AppProvider>\n    </BrowserRouter>\n  );\n}\n\nconst IS_EXTERNAL_LINK_REGEX = /^(?:[a-z][a-z\\d+.-]*:|\\/\\/)/;\n\nfunction Link({children, url = '', external, ref, ...rest}) {\n  // react-router only supports links to pages it can handle itself. It does not\n  // support arbirary links, so anything that is not a path-based link should\n  // use a reglar old `a` tag\n  if (external || IS_EXTERNAL_LINK_REGEX.test(url)) {\n    rest.target = '_blank';\n    rest.rel = 'noopener noreferrer';\n    return (\n      <a href={url} {...rest}>\n        {children}\n      </a>\n    );\n  }\n\n  return (\n    <ReactRouterLink to={url} {...rest}>\n      {children}\n    </ReactRouterLink>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Polaris Components in React\nDESCRIPTION: Imports translations and Polaris React components for use in a React application. This demonstrates how to access the necessary resources for building a Polaris-powered interface.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport {AppProvider, Page, LegacyCard, Button} from '@shopify/polaris';\n```\n\n----------------------------------------\n\nTITLE: Stacking Form Fields Vertically with Polaris FormLayout in TypeScript/React\nDESCRIPTION: This example demonstrates using the FormLayout component to arrange form fields in a vertical stack for better readability and ease of completion. FormLayout automatically applies standard spacing, making fields easy to scan. Dependencies include @shopify/polaris library and React, and it requires the necessary form field components as children. Inputs are the nested children fields, and outputs are a visually structured, vertically stacked layout. The limitation is that only vertical stacking is shown; no horizontal alignment is illustrated in this snippet.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/form-layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* File: form-layout-default.tsx */\n<FormLayout>\n  {/* Add form fields here */}\n  <TextField label=\"Email address\" autoComplete=\"email\" />\n  <TextField label=\"Phone number\" autoComplete=\"tel\" />\n</FormLayout>\n```\n\n----------------------------------------\n\nTITLE: Migrating Card to LegacyCard using React\nDESCRIPTION: This diff snippet demonstrates how to replace the Card component with LegacyCard in a React project. It includes the necessary changes in props interfaces from CardProps to LegacyCardProps, ensuring consistency across the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n- <Card prop />\n+ <LegacyCard prop />\n- export interface CardProps {}\n+ export interface LegacyCardProps {}\n```\n\n----------------------------------------\n\nTITLE: Updating AppProvider with i18n Translations in React\nDESCRIPTION: This snippet demonstrates how to update the AppProvider component to support multiple languages by adding the required i18n prop with translations.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<AppProvider />\n\n// new\nimport translations from '@shopify/polaris/locales/en.json';\n<AppProvider i18n={translations}>\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Line Height Function with Polaris Font Tokens\nDESCRIPTION: This snippet demonstrates how to replace the old SCSS line-height() function with corresponding Polaris font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n- line-height: line-height(caption, base);\n+ font-family: var(--p-font-line-height-2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Fullscreen Bar in TypeScript React\nDESCRIPTION: Example demonstrating the default implementation of a Fullscreen bar component showing only the Back button for minimal fullscreen navigation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/fullscreen-bar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfullscreen-bar-no-children.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Inline Suggestion in React\nDESCRIPTION: This example shows how to provide an autocomplete suggestion inline with the input value using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  const [value, setValue] = React.useState('');\n\n  const handleChange = React.useCallback(\n    (newValue) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Tag\"\n      value={value}\n      onChange={handleChange}\n      suggestion=\"winter coat\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Card-Integrated Tabs Implementation\nDESCRIPTION: Implementation showing how to display tabs within a Card component in the Polaris design system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/tabs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntabs-inside-of-a-card.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Text Field with Character Count in React\nDESCRIPTION: This example shows how to display a character count for a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Product title\"\n      value=\"Artisanal Wooden Spoon\"\n      onChange={() => {}}\n      maxLength={42}\n      showCharacterCount\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Component with React Component Source in React\nDESCRIPTION: This snippet demonstrates how to update the Icon component by replacing the string source prop with a React component from @shopify/polaris-icons.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Icon source=\"add\" />;\n\n// new\nimport {PlusMinor} from '@shopify/polaris-icons';\n\n<Icon source={PlusMinor} />;\n```\n\n----------------------------------------\n\nTITLE: Multiple Tags Autocomplete Implementation\nDESCRIPTION: Implementation of Autocomplete component supporting multiple tag selection from a curated list based on text input.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-multiple-tags.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText Medium with Text Component in React\nDESCRIPTION: Demonstrates the replacement of medium size DisplayText with Text component using the headingXl variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"medium\">Sales this year</DisplayText>\n+ <Text variant=\"headingXl\" as=\"p\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: Updating LinkLikeComponent Type in TypeScript\nDESCRIPTION: This snippet shows how to replace the removed LinkLikeComponent type with AppProviderProps['linkComponent'] for describing the argument passed to AppProvider's link prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// old\nimport {LinkLikeComponent} from '@shopify/polaris-react';\n\ntype Link = LinkLikeComponent;\n\n// new\nimport {AppProviderProps} from '@shopify/polaris-react';\n\ntype Link = AppProviderProps['linkComponent'];\n```\n\n----------------------------------------\n\nTITLE: Mapping Deprecated Polaris v10 Text Color Tokens to v11 CSS Variables\nDESCRIPTION: Provides a mapping for deprecated Polaris v10 CSS text color tokens to their v11 replacements. Developers should replace occurrences of the deprecated variables (left side) with the corresponding new variables (right side) when migrating to Polaris v11 to ensure correct text color application.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Deprecated Token                    -> Replacement Value */\n--p-text-warning                   -> --p-color-text-caution\n--p-text-success                   -> --p-color-text-success\n--p-text-subdued-on-dark           -> --p-color-text-inverse-subdued\n--p-text-subdued                   -> --p-color-text-subdued\n--p-text-primary-pressed           -> --p-color-text-primary\n--p-text-primary-hovered           -> --p-color-text-primary-hover\n--p-text-primary                   -> --p-color-text-primary\n--p-text-on-primary                -> --p-color-text-on-color\n--p-text-on-interactive            -> --p-color-text-on-color\n--p-text-on-dark                   -> --p-color-text-inverse\n--p-text-on-critical               -> --p-color-text-on-color\n--p-text-highlight                 -> --p-color-text-info\n--p-text-disabled                  -> --p-color-text-disabled\n--p-text-critical                  -> --p-color-text-critical\n--p-text                           -> --p-color-text\n```\n\n----------------------------------------\n\nTITLE: Dynamic Multi-locale Translation Loading with AppProvider\nDESCRIPTION: This example shows how to dynamically load translations for multiple locales using @shopify/react-i18n with the AppProvider component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/app-provider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AppProvider} from '@shopify/polaris';\n// en.json is English. Replace with fr.json for French, etc\nimport translations from '@shopify/polaris/locales/en.json';\nimport {useI18n} from '@shopify/react-i18n';\n\nfunction App() {\n  const [i18n] = useI18n({\n    id: 'Polaris',\n    fallback: translations,\n    translations(locale) {\n      return import(\n        /* webpackChunkName: \"Polaris-i18n\", webpackMode: \"lazy-once\" */ `@shopify/polaris/locales/${locale}.json`\n      ).then((dictionary) => dictionary && dictionary.default);\n    },\n  });\n\n  // i18n.translations is an array of translation dictionaries, where the first\n  // dictionary is the desired language, and the second is the fallback.\n  return (\n    <AppProvider i18n={i18n.translations}>{/* App content */}</AppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Column Layout with Shopify Polaris in TypeScript/React\nDESCRIPTION: This snippet implements a single-section layout in a full-width container using the Layout component. It is ideal for simple apps, banner containers, or displaying content where full-width presentation is preferred. The Layout component provides responsive design, requiring Polaris and a React setup with TypeScript support; the section content can be any valid Polaris component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Layout, Card} from '@shopify/polaris';\n\nexport function OneColumnLayout() {\n  return (\n    <Layout>\n      <Layout.Section>\n        <Card title=\"Single section\">Full-width content goes here</Card>\n      </Layout.Section>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating consistent Links across a project\nDESCRIPTION: Shows how to maintain consistency in Link usage throughout a project by using the same text for links to the same content.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/link.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n/* Somewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n\n/* Elsewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n```\n\n----------------------------------------\n\nTITLE: Using Modern Color Properties vs Legacy Mixins in CSS\nDESCRIPTION: Demonstrates the preferred approach of using CSS custom properties for colors instead of deprecated recolor-icon mixin. Shows how to properly style SVG fill colors using the new color token system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/color-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\nsvg {\n  fill: var(--p-color-icon-secondary);\n}\n\n// Don't\n@include recolor-icon(--p-text-secondary);\n```\n\n----------------------------------------\n\nTITLE: Informational Tone Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the informational Badge to call out an object or action as having an important attribute, useful for highlighting recommended options or published status.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-informational.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Pagination in React\nDESCRIPTION: Basic implementation of the pagination component for resource navigation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/pagination.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\npagination-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating Autocomplete Subcomponents in React\nDESCRIPTION: This snippet shows how to replace the removed Autocomplete.ComboBox.TextField and Autocomplete.ComboBox.OptionList subcomponents with Autocomplete.TextField and OptionList.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Autocomplete.ComboBox.TextField label=\"Example\" />\n<Autocomplete.ComboBox.OptionList onChange={() => {}} selected={[]} />\n\n// new\n<Autocomplete.TextField label=\"Example\" />\n<OptionList onChange={() => {}} selected={[]} />\n```\n\n----------------------------------------\n\nTITLE: Example of Layout.Section oneThird to variant migration\nDESCRIPTION: Diff showing the changes required for migrating from oneThird to variant=\"oneThird\" in the Layout.Section component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n- <Layout.Section oneThird>\n+ <Layout.Section variant=\"oneThird\">\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Text Components with New Text Component in React\nDESCRIPTION: This snippet demonstrates how to replace old text components like DisplayText and Heading with the new Text component in Polaris v10.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"medium\">Display text</DisplayText>\n- <Heading>Heading</Heading>\n+ <Text variant=\"headingXl\" as=\"p\">Display text</Text>\n+ <Text variant=\"headingMd\" as=\"h2\">Heading</Text>\n```\n\n----------------------------------------\n\nTITLE: Complete Progress Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the complete progress Badge to indicate when a given task has been fully completed, such as when an order has been fulfilled.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-complete.tsx\n```\n\n----------------------------------------\n\nTITLE: Select Component - Validation Error\nDESCRIPTION: Example demonstrating validation error state for the Select component, typically used when no selection has been made from a placeholder option.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/select.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nselect-with-validation-error.tsx\n```\n\n----------------------------------------\n\nTITLE: Composing Skeleton Page with Dynamic Content using Polaris in TypeScript\nDESCRIPTION: Demonstrates how to implement a Skeleton Page with dynamic page title and header in a TypeScript React component using Shopify Polaris. This snippet is meant to be used when the loaded content, such as the title, may change and thus should be represented as skeleton until loading completes. Requires @shopify/polaris as a dependency, expects properties related to header and children, and outputs a skeleton UI matching the eventual page layout. No props are given directly; customization is typically via children.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/skeleton-page.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* skeleton-page-with-dynamic-content.tsx */\n<SkeletonPage>\n  {/* Replace with loading versions of dynamic content */}\n</SkeletonPage>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Placeholder Text in React\nDESCRIPTION: This example shows how to add placeholder text to a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Shipping zone name\"\n      value=\"\"\n      onChange={() => {}}\n      placeholder=\"Example: North America, Europe\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping and Filtering Component Groups with React in JavaScript\nDESCRIPTION: This React JSX snippet iterates over a 'posts' array, filtering subgroups to exclude those with all children hidden (hideFromNav=true). For each group with visible items, it renders a Box containing the group title and a RichCardGrid of its children. The code expects a 'posts' variable (array of group objects with 'children', 'title', and 'hideFromNav' fields) and uses custom layout components ('Stack', 'Box', 'RichCardGrid'). Inputs are dynamic data structures; output is a nested UI reflecting only groups with at least one non-hidden child. Requires React and Polaris primitives in scope.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{posts.map(group =>\n\ngroup.children.filter(a => !a.hideFromNav).length !== 0 ? (<Box>\n\n  <h2>{group.title}</h2>\n  <RichCardGrid cards={group.children} />\n</Box>) : null\n\n)}\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText (extraLarge) with Text in React\nDESCRIPTION: Provides a specific example of replacing the extraLarge variant of the deprecated `DisplayText` component with the equivalent `Text` component, using `variant=\"heading4xl\"` and the appropriate semantic element via the `as` prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"extraLarge\">Sales this year</DisplayText>\n+ <Text as=\"p\" variant=\"heading4xl\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: HorizontalStack Rename Migration Example\nDESCRIPTION: This diff example shows how to rename the HorizontalStack component to InlineStack.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n- <HorizontalStack />\n+ <InlineStack />\n```\n\n----------------------------------------\n\nTITLE: Sectioned Autocomplete Implementation\nDESCRIPTION: Implementation showing how to organize Autocomplete options into multiple sections for better organization.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-multiple-sections.tsx\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Polaris Icons\nDESCRIPTION: CSS styles for custom implementation of Polaris icons without using Polaris React components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.Custom-Polaris-Icon {\n  display: block;\n  height: 2rem; /* or value equivalent to 20px */\n  width: 2rem; /* or value equivalent to 20px */\n  max-height: 100%;\n  max-width: 100%;\n  margin: auto;\n}\n\n.Custom-Polaris-Icon__Svg {\n  position: relative;\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n\n  /* Icon color */\n  fill: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Layout.Section oneHalf to variant migration\nDESCRIPTION: Diff showing the changes required for migrating from oneHalf to variant=\"oneHalf\" in the Layout.Section component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n- <Layout.Section oneHalf>\n+ <Layout.Section variant=\"oneHalf\">\n```\n\n----------------------------------------\n\nTITLE: Loading State Autocomplete\nDESCRIPTION: Example showing loading state implementation in Autocomplete while option data is being processed.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-loading.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Scrollable Component in React\nDESCRIPTION: This example demonstrates the default usage of the Scrollable component. It's used to make a region within the page independently scrollable, often in modals and panes to indicate content exists below or above the fold.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/scrollable.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Scrollable} from '@shopify/polaris';\n\nexport function ScrollableExample() {\n  return (\n    <Scrollable style={{height: '100px'}}>\n      <p>Some content</p>\n      <p>Some content</p>\n      <p>Some content</p>\n      <p>Some content</p>\n      <p>Some content</p>\n    </Scrollable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding console warnings for deprecated prop values in React components\nDESCRIPTION: Shows how to implement runtime warnings for deprecated prop values in development mode. The example maps deprecated variants to their recommended replacements and logs a warning when a deprecated value is used.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Deprecation guidelines.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst deprecatedVariants: {[V in Variant]?: Variant} = {\n  heading2xl: 'headingXl',\n  heading3xl: 'headingXl',\n};\n\nif (\n  process.env.NODE_ENV === 'development' &&\n  variant &&\n  Object.prototype.hasOwnProperty.call(deprecatedVariants, variant)\n) {\n  console.warn(\n    `Deprecation: <Text variant=\"${variant}\" />. The value \"${variant}\" will be removed in a future major version of Polaris. Use \"${deprecatedVariants[variant]}\" instead.`,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Z-Index CSS Variables vs Legacy Functions\nDESCRIPTION: Demonstrates the correct usage of z-index CSS custom properties (--p-z-index-1) while showing deprecated Sass z-index() function usage that should be avoided.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/z-index-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\nz-index: var(--p-z-index-1);\n// Don't\nz-index: z-index(content);\n```\n\n----------------------------------------\n\nTITLE: Success Tone Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the success Badge to indicate a successful, completed, or desirable state, providing positive reinforcement to merchants, like confirming recovered funds after a chargeback dispute.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-success.tsx\n```\n\n----------------------------------------\n\nTITLE: Fitted Tabs Implementation\nDESCRIPTION: Specialized implementation for narrow columns with 2-3 tab items, where tabs are fitted to the container width.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/tabs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntabs-fitted.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing custom theme properties with CustomProperties\nDESCRIPTION: Shows how to migrate from custom theme overrides to using CustomProperties with a generated styles file to maintain custom styling.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import {AppProvider} from '@shopify/polaris';\n+ import {AppProvider, CustomProperties} from '@shopify/polaris';\n\n// Generate this file using the migration script.\nimport styles from './CustomPropertyOverrides.scss';\n\nconst App = (props) => (\n-  <AppProvider theme={{ colors: { surface: 'rgb(0,0,0)' }}>\n-    {props.children}\n-  </AppProvider>\n+  <AppProvider>\n+    <CustomProperties className={styles.CustomPropertyOverrides}>\n+      {props.children}\n+    </CustomProperties>\n+  </AppProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating Stack to LegacyStack using React\nDESCRIPTION: This snippet demonstrates how to replace the Stack component with LegacyStack in a React project. It includes an interface update for props from StackProps to LegacyStackProps. Ensure that the component and props are correctly replaced throughout the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n- <Stack prop />\n+ <LegacyStack prop />\n- export interface StackProps {}\n+ export interface LegacyStackProps {}\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Breakpoint Mixins with Media Query Variables\nDESCRIPTION: This snippet shows how to replace old breakpoint mixins with new Polaris media query variables.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- @include page-content-when-layout-not-stacked {}\n+ @media #{$p-breakpoints-md-up} {}\n```\n\n----------------------------------------\n\nTITLE: Structuring Address Forms in Shopify Admin\nDESCRIPTION: Demonstrates the recommended layout for address forms in the Shopify admin interface. Includes fields for name, address, optional apartment/suite, city, country, province, and postal code.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFirst name             Last name\nAddress\nApartment, suite, etc. (optional)\nCity\nCountry            Province           Postal code\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Hidden Label in React\nDESCRIPTION: This snippet demonstrates how to create a text field with a visually hidden label while keeping it accessible for screen readers.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Store name\"\n      value=\"\"\n      onChange={() => {}}\n      labelHidden\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Default Footer Help Implementation - TSX\nDESCRIPTION: Example showing the default implementation of the Footer Help component to direct merchants to product or feature information.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/footer-help.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfooter-help-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Range Slider with Step Increments in React\nDESCRIPTION: This example illustrates how to implement a Range Slider with step increments, allowing selection of specific value increments within a range.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/range-slider.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nrange-slider-with-steps.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating Breadcrumbs component prop in React\nDESCRIPTION: Illustrates the change needed to replace the deprecated `breadcrumbs` prop (which accepted an array) with the new `backAction` prop in the `Breadcrumbs` component. The `backAction` prop now accepts a `LinkAction` object.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Breadcrumbs breadcrumbs={[{url: '/testing', content: 'Home'}]}>\n+ <Breadcrumbs backAction={{url: '/testing', content: 'Home'}}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Separate Validation Error in React\nDESCRIPTION: This example shows how to display a separate validation error for a text field using the TextField component and the InlineError component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, InlineError} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  const [value, setValue] = React.useState('');\n\n  const handleChange = React.useCallback(\n    (newValue) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <>\n      <TextField\n        label=\"Store name\"\n        value={value}\n        onChange={handleChange}\n        autoComplete=\"off\"\n      />\n      {value === '' && (\n        <InlineError message=\"Store name cannot be empty\" fieldID=\"myFieldID\" />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Polaris Components Instead of Custom CSS Properties\nDESCRIPTION: This example demonstrates the recommended approach of using Polaris components (like LegacyStack) for layout instead of directly setting positioning or dimension CSS properties with values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/layout-declaration-property-value-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ <LegacyStack />\n// Don't\n- width: 100%;\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Item Icon in React\nDESCRIPTION: This snippet demonstrates how to update the Navigation.Item subcomponent by replacing the removed iconBody prop with the icon prop that accepts a string or React Component.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Navigation.Section\n  items={[\n    {\n      url: '/path/to/place',\n      label: 'Item',\n      iconBody:\n        \"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\",\n    },\n  ]}\n/>;\n\n// new\n<Navigation.Section\n  items={[\n    {\n      url: '/path/to/place',\n      label: 'Item',\n      icon: \"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\",\n    },\n  ]}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Polaris\nDESCRIPTION: This snippet configures TypeScript projects to support default imports required by Polaris by enabling the esModuleInterop flag. Ensure your tsconfig.json has esModuleInterop set to true to properly import Polaris components using default imports.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"esModuleInterop\": true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Item with Media Content in React TSX\nDESCRIPTION: Implementation showing how to include media elements like avatars or thumbnails within a resource item.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-item.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nresource-item-with-media.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Polaris Design Tokens for Spacing Properties (CSS)\nDESCRIPTION: Demonstrates how to properly use Polaris design token variables for spacing properties like gap and margin instead of hard-coded pixel values. The rule enforces using var(--p-space-XXX) tokens rather than px, em, or rem units directly.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/space-declaration-property-unit-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ gap: var(--p-space-050);\n+ margin: var(--p-space-300) 0;\n// Don't\n- gap: 2px;\n- margin: 12px  0;\n```\n\n----------------------------------------\n\nTITLE: Avoiding Icon Misuse in JSX\nDESCRIPTION: Illustrates common mistakes in using icons, such as including 'icon' in text alternatives or duplicating information. Use `accessibilityLabel` for unique descriptions, not for replicating visible text.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/icon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon source={PlusCircleIcon} accessibilityLabel=\"Circle plus icon\" />\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Sections with LayoutSection in JSX\nDESCRIPTION: Uses the <LayoutSection> component, typically with the `card` prop, to visually group related content within cards. This component organizes the page into logical sections.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/layout/density.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LayoutSection card>\n  <Text>\n    ## High density\n\n    Information-rich interfaces, like index pages or data tables, require high-density layouts for efficiency. By presenting information in a denser format, merchants can quickly access and compare data, enhancing the effectiveness of the Shopify admin.\n\n  </Text>\n  <Large variant=\"do\">\n    ![An index table with each row divided by a line](/images/design/layout/layout-density-01-high-density-do@2x.png)\n\n    Use divider lines and surface colors to create clear delineation between sections in a high density component.\n\n  </Large>\n\n<Text>\n  Another way to create visual zones in high density layouts is to [use\n  different surface colors](/design/colors/using-color#surface). Secondary\n  colors can be used to create visual hierarchy within a high density component,\n  and to guide merchants to the data that matters most.\n</Text>\n\n  <Large variant=\"do\">\n    ![A card with inset surfaces of different colors](/images/design/layout/layout-density-02-high-density-inset-do@2x.png)\n\n    Use different surface colors to style inset surfaces and create visual divisions without using lines.\n\n  </Large>\n</LayoutSection>\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with a URL\nDESCRIPTION: Demonstrates how to create a Link component with a specified URL, which is important for accessibility and functionality.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/link.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Thumbnail - Shopify Polaris - TypeScript/React\nDESCRIPTION: Demonstrates rendering the Thumbnail component with its default (medium) size using Shopify Polaris in a React application. Requires @shopify/polaris and React as dependencies. The default size is 60×60 px and is suitable for general use; accepts properties such as source (image/url) and alt text for accessibility.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/thumbnail.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Thumbnail} from '@shopify/polaris';\n\n<Thumbnail\n  source=\"/images/product.png\"\n  alt=\"Photo of black t-shirt with cartoon tiger\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating v11 Color Custom Properties (Diff/Shell)\nDESCRIPTION: Illustrates the code change and command for the `v11-styles-replace-custom-property-color` migration. This replaces the deprecated `--p-text` CSS custom property with its v11 equivalent, `--p-color-text`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- color: var(--p-text);;\n+ color: var(--p-color-text);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-color <path>\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-replace-custom-property-font Migration\nDESCRIPTION: Command to execute the v9-styles-replace-custom-property-font migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_59\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-replace-custom-property-font <path>\n```\n\n----------------------------------------\n\nTITLE: Using Polaris Icon in React Component\nDESCRIPTION: TypeScript JSX code demonstrating how to use the imported Icon component with a Polaris icon.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<Icon source={PlusIcon} />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Negative Example for Disabled States (JSX)\nDESCRIPTION: This snippet uses the Polaris 'Medium' component with the 'dont' variant to illustrate an incorrect way to show disabled states (e.g., using opacity), accompanied by a Markdown image link.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Medium variant=\"dont\">\n      ![Semi-transparent elements in a form that blend in](/images/design/colors/color-using-color-disabled-dont@2x.png)\n\n      Use opacity or any other means to communicate disabled states.\n\n  </Medium>\n```\n\n----------------------------------------\n\nTITLE: Select Component - Disabled State\nDESCRIPTION: Example showing disabled state of Select component, used for selections that aren't currently available.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/select.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nselect-disabled.tsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Fullscreen Bar with Children in TypeScript React\nDESCRIPTION: Example showing how to implement a Fullscreen bar component with additional child elements for structuring the top of an application in fullscreen mode.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/fullscreen-bar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfullscreen-bar-with-children.tsx\n```\n\n----------------------------------------\n\nTITLE: Select Component - With Prefix\nDESCRIPTION: Implementation showing how to render React elements to the left of individual select options, without showing in the dropdown.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/select.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nselect-with-prefix.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Polaris Shadow Tokens Instead of Drop-shadow Filter\nDESCRIPTION: Example showing how to correctly use Polaris shadow design tokens (var(--p-shadow-300)) instead of the deprecated filter: drop-shadow() function for consistent shadow styling.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/shadow-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ box-shadow: var(--p-shadow-300);\n// Don't\n- filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Icon Button with Screen Reader Support in HTML\nDESCRIPTION: Example of how to create an icon-only button with proper accessibility support using a visually hidden span element to provide screen reader context. This pattern ensures icon buttons are meaningful to all users.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Accessibility.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button class=\"icon icon-close\" type=\"button\">\n  <span class=\"visuallyhidden\">Close Menu</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Updating Select Component Groups in React\nDESCRIPTION: This snippet shows how to update the Select component by replacing the removed groups prop with the options prop that now accepts an array of groups or options.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Select\n  groups={[\n    {\n      title: 'Group',\n      options: [\n        {label: 'Today', value: 'today'},\n        {label: 'Yesterday', value: 'yesterday'},\n        {label: 'Last 7 days', value: 'lastWeek'},\n      ],\n    },\n  ]}\n/>;\n\n// new\n<Select\n  options={[\n    {\n      title: 'Group',\n      options: [\n        {label: 'Today', value: 'today'},\n        {label: 'Yesterday', value: 'yesterday'},\n        {label: 'Last 7 days', value: 'lastWeek'},\n      ],\n    },\n  ]}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Drop Zone with Custom File Dialog Trigger\nDESCRIPTION: This code snippet demonstrates how to create a Drop Zone with a custom file dialog trigger. It allows triggering the file selection dialog from an action elsewhere on the page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/drop-zone.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useCallback, useState} from 'react';\nimport {DropZone, Button, Stack, Caption, Text, Thumbnail, List} from '@shopify/polaris';\n\nexport function DropZoneExample() {\n  const [files, setFiles] = useState([]);\n  const [openFileDialog, setOpenFileDialog] = useState(false);\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, _rejectedFiles) =>\n      setFiles((files) => [...files, ...acceptedFiles]),\n    [],\n  );\n\n  const toggleOpenFileDialog = useCallback(\n    () => setOpenFileDialog((openFileDialog) => !openFileDialog),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && <DropZone.FileUpload />\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  return (\n    <Stack vertical>\n      <Button onClick={toggleOpenFileDialog}>Open file dialog</Button>\n      <DropZone\n        openFileDialog={openFileDialog}\n        onDrop={handleDropZoneDrop}\n        onFileDialogClose={toggleOpenFileDialog}\n      >\n        {uploadedFiles}\n        {fileUpload}\n      </DropZone>\n    </Stack>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup Spacing Prop Migration Example\nDESCRIPTION: This diff example shows how to update the ButtonGroup spacing prop to the new gap prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- <ButtonGroup spacing=\"tight\" />\n+ <ButtonGroup gap=\"tight\" />\n```\n\n----------------------------------------\n\nTITLE: Using Color Variables in CSS\nDESCRIPTION: Demonstrates the correct and incorrect ways to specify colors in Polaris. Shows how to use CSS custom properties (--p-*) instead of direct RGB values or legacy color functions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/color-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ color: var(--p-color-text-disabled);\n+ background: var(--p-color-bg-fill-inverse-hover);\n// Don't\n- color: rgb(140, 145, 150);\n- background: color('hover');\n```\n\n----------------------------------------\n\nTITLE: Updating Context Usage in React Components\nDESCRIPTION: This snippet demonstrates how to replace the removed WithContext component with modern context usage using hooks or Class.contextType.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// old\nfunction Test({context}) {\n  console.log(context);\n  return null;\n}\n\nconst TestWithContext = withContext(Consumer)(Test);\n\n// new with hooks\nconst TestContext1 = React.createContext('Polaris');\n\nfunction Test() {\n  const testContext = React.useContext(TestContext1);\n  return <h1>{testContext}</h1>;\n}\n\n// new with contextType\nconst TestContext2 = React.createContext('Polaris');\n\nclass Test extends React.Component {\n  static contextType = TestContext2;\n\n  render() {\n    return <h1>{this.context}</h1>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Custom Label\nDESCRIPTION: Implementation of pagination with an additional label between navigation buttons to provide context about the content being viewed.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/pagination.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\npagination-with-label.tsx\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Loading State in React\nDESCRIPTION: This snippet demonstrates how to display a loading state for a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Store name\"\n      value=\"\"\n      onChange={() => {}}\n      loading\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Right-Aligned Text Field in React\nDESCRIPTION: This snippet demonstrates how to implement a text field with right-aligned text using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Shipping zone name\"\n      value=\"\"\n      onChange={() => {}}\n      align=\"right\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating v12 Border Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code changes and command for the `v12-styles-replace-custom-property-border` migration. This replaces deprecated border-related CSS custom properties (like `--p-border-radius-1`, `--p-border-width-1`) with their corresponding v12 equivalents (`--p-border-radius-100`, `--p-border-width-025`).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- border-radius: var(--p-border-radius-1);\n+ border-radius: var(--p-border-radius-100);\n```\n\nLANGUAGE: diff\nCODE:\n```\n- border-width: var(--p-border-width-1);\n+ border-width: var(--p-border-width-025);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-border <path>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables Instead of Hex Colors in Polaris\nDESCRIPTION: This example demonstrates the preferred approach of using Polaris design system CSS variables for colors instead of hard-coded hex values. It shows the correct way to specify text and icon colors through variables.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/color-color-no-hex.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ color: var(--p-color-text);\n+ fill: var(--p-color-icon)\n// Don't\n- color: #202223;\n- fill: #5c5f62;\n```\n\n----------------------------------------\n\nTITLE: Replacing Caption Component with Text Component in React\nDESCRIPTION: Illustrates how to replace the Caption component with the Text component using the bodySm variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Caption>Received April 21, 2017</Caption>\n+ <Text variant=\"bodySm\" as=\"p\">Received April 21, 2017</Text>\n```\n\n----------------------------------------\n\nTITLE: Example of Layout.Section fullWidth to variant migration\nDESCRIPTION: Diff showing the changes required for migrating from fullWidth to variant=\"fullWidth\" in the Layout.Section component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n- <Layout.Section fullWidth>\n+ <Layout.Section variant=\"fullWidth\">\n```\n\n----------------------------------------\n\nTITLE: Replacing Heading Component with Text Component in React\nDESCRIPTION: Demonstrates how to replace the Heading component with the Text component using the headingMd variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- <Heading>Online store dashboard</Heading>\n+ <Text variant=\"headingMd\" as=\"h2\">Online store dashboard</Text>\n```\n\n----------------------------------------\n\nTITLE: Using Modern Media Queries with CSS Custom Properties in Polaris\nDESCRIPTION: This example demonstrates the recommended approach for creating responsive designs in Polaris using standard CSS media queries with CSS custom properties for breakpoints, and shows the deprecated Sass mixin syntax that should be avoided.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/media-queries-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ @media (max-width: var(--p-breakpoints-md)) {}\n// Don't\n- @include breakpoint-before(layout-width(page-with-nav)) {}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Responsive Layout Tip Banner - React JSX\nDESCRIPTION: This JSX snippet inserts a TipBanner component with content advising about responsive values for layout primitives. It illustrates how to provide informational messaging using custom components in documentation. The TipBanner displays a static message; there are no input props or interactivity. Ensure the TipBanner component is imported and available.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TipBanner>\n  Layout primitives allow you to specify values for different screen sizes.\n  Check out the layout primitives for information on how responsive props apply\n  to each component.\n</TipBanner>\n```\n\n----------------------------------------\n\nTITLE: Warning Tone Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the warning Badge for warnings and time-sensitive issues that require merchants’ attention and potential action, often for reversible events. Use sparingly as it can cause stress.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-warning.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Button with Icon in JSX\nDESCRIPTION: Example of an accessible button implementation with an icon, using the accessibilityLabel prop for the button and icon.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/alternative-text.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Button accessibilityLabel=\"search\" onClick={() => search()}>\n  <Icon source={SearchIcon} accessibilityLabel=\"\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Condensing Field Groups for Short Inputs with Polaris FormLayout in TypeScript/React\nDESCRIPTION: This example shows how to use a condensed field group layout in Polaris FormLayout for short input fields, reducing their width to fit more fields in a single row. Dependencies include React and @shopify/polaris, and the design suits scenarios with brief user input like single character fields. Inputs are passed as children, and the resulting output is a compact row of input boxes. A limitation is that reduced width may not be suitable for longer text values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/form-layout.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/* File: form-layout-condensed-field-group.tsx */\n<FormLayout>\n  <FormLayout.Group condensed>\n    <TextField label=\"Code 1\" />\n    <TextField label=\"Code 2\" />\n    <TextField label=\"Code 3\" />\n  </FormLayout.Group>\n</FormLayout>\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Star Rating Component in JSX\nDESCRIPTION: Example of implementing an accessible star rating component using ARIA attributes and Icon components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/alternative-text.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<div role=\"img\" aria-labelledby=\"star_id\">\n  <LegacyStack>\n    <Icon source={StarFilledIcon} alt=\"\">\n    <Icon source={StarFilledIcon} alt=\"\">\n    <Icon source={StarFilledIcon} alt=\"\">\n    <Icon source={StarIcon} alt=\"\">\n    <Icon source={StarIcon} alt=\"\">\n  </LegacyStack>\n</div>\n<div id=\"star_id\">3 of 5 stars</div>\n```\n\n----------------------------------------\n\nTITLE: Default Account Connection Implementation in React\nDESCRIPTION: Example implementation of the Account Connection component for connecting a store to third-party accounts like Facebook.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/actions/account-connection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\naccount-connection-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating React Imports in Polaris Icons v4\nDESCRIPTION: Updates imports from @shopify/polaris-icons by removing the Monotone, Twotone, and Filled suffixes from icon names as required by Polaris Icons v4.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-icons-from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  DuplicateMinor,\n  ViewMinor,\n-  HomeMajorMonotone,\n-  CircleInformationMajorFilled,\n-  CircleInformationMajorTwotone,\n+  HomeMajor,\n+  CircleInformationMajor,\n} from '@shopify/polaris-icons';\n```\n\n----------------------------------------\n\nTITLE: Using Box Shadow Design Tokens in CSS\nDESCRIPTION: Demonstrates the correct and incorrect ways to declare box-shadow properties. The rule enforces the use of design token variables (var(--p-shadow-*)) instead of hard-coded length units like px, rem, or em.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/shadow-declaration-property-unit-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ box-shadow: var(--p-shadow-300);\n// Don't\n- box-shadow: 0px 2px 4px rgba(31, 33, 36, 0.1), 0px 1px 6px rgba(31, 33, 36, 0.05);\n```\n\n----------------------------------------\n\nTITLE: Migrating Space Custom Property Example\nDESCRIPTION: Example showing how to update deprecated space custom property values to new format\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_133\n\nLANGUAGE: diff\nCODE:\n```\n- padding: var(--p-space-1);\n+ padding: var(--p-space-100);\n```\n\n----------------------------------------\n\nTITLE: Configuring component union type deprecations in TypeScript\nDESCRIPTION: Shows how to configure a mapping object for component union type deprecations. This example defines deprecated values for the Text component's Variant type to be used by the documentation system.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Deprecation guidelines.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst componentUnionTypeDeprecations: {\n  [componentName: string]: {\n    [typeName: string]: string[];\n  };\n} = {\n  Text: {\n    Variant: ['heading2xl', 'heading3xl'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Navigation to Pagination\nDESCRIPTION: Implementation of pagination with keyboard shortcuts for enhanced accessibility and user interaction.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/pagination.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\npagination-with-keyboard-navigation.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Duration Function with Polaris Motion Tokens\nDESCRIPTION: This snippet demonstrates how to replace the old SCSS duration() function with corresponding Polaris motion tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n- transition-duration: legacy-polaris-v8.duration('slow');\n+ transition-duration: var(--p-duration-300);\n\n- transition: opacity legacy-polaris-v8.duration('slow') linear;\n+ transition: opacity var(--p-duration-300) linear;\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Field with Vertical Content in React\nDESCRIPTION: This snippet demonstrates how to add custom vertical content above the input value in a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField, Tag} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Tags\"\n      value=\"\"\n      onChange={() => {}}\n      autoComplete=\"off\"\n      verticalContent={\n        <Tag onRemove={() => {}} removable>\n          Wholesale\n        </Tag>\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering IndexTable with Product Data in React\nDESCRIPTION: This code snippet demonstrates how to render an IndexTable component from Shopify Polaris to display product data. It includes configuration for item count, selection handling, sortable columns, and custom headings. The table is wrapped in a Card component within a Page layout.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-index-layout/variants/default.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n        <IndexTable\n          itemCount={products.length}\n          selectedItemsCount={\n            allResourcesSelected ? 'All' : selectedResources.length\n          }\n          onSelectionChange={handleSelectionChange}\n          sortable={[false, true, true, true, true, true, true]}\n          headings={[\n            {title: ''},\n            {title: 'Product'},\n            {title: 'Price', alignment: 'end'},\n            {title: 'Status'},\n            {title: 'Inventory'},\n            {title: 'Type'},\n            {title: 'Vendor'},\n          ]}\n        >\n          {rowMarkup}\n        </IndexTable>\n      </Card>\n    </Page>\n  );\n```\n\n----------------------------------------\n\nTITLE: Replacing TextStyle Positive with Text Component in React\nDESCRIPTION: Shows how to replace the positive TextStyle with the Text component using the success tone.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"positive\">No supplier listed</TextStyle>\n+ <Text as=\"span\" tone=\"success\">No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: Loading Inter Web Font for Polaris\nDESCRIPTION: HTML markup for loading the Inter web font required by Polaris. Includes a preconnect resource hint to improve loading performance.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preconnect\" href=\"https://cdn.shopify.com/\" />\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.shopify.com/static/fonts/inter/v4/styles.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating React Component Icon Usage in Polaris Icons v4\nDESCRIPTION: Updates React component code to reference the simplified icon names without style suffixes as required in Polaris Icons v4.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-icons-from-v3-to-v4.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon source={MobileCancelMajorMonotone} />\n+ <Icon source={MobileCancelMajor} />\n```\n\n----------------------------------------\n\nTITLE: Empty State Autocomplete\nDESCRIPTION: Example showing how to handle and display empty state when no search results are found.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-empty-state.tsx\n```\n\n----------------------------------------\n\nTITLE: Converting Legacy Print Hidden Mixin to Media Query\nDESCRIPTION: Shows how to properly hide elements for print layout using standard CSS media queries instead of deprecated Sass mixins. The example demonstrates replacing @include print-hidden with a proper @media print rule.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/layout-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ @media print {\n+   display: none;\n+ }\n// Don't\n- @include print-hidden;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Keyboard Key Without Context (JSX)\nDESCRIPTION: Illustrates an incorrect usage pattern where the `KeyboardKey` component is used without surrounding explanatory text. This lacks context and can be confusing, particularly for accessibility, as screen readers might announce the key name without its purpose. This example is highlighted as a 'Don't' in the accessibility guidelines.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/keyboard-key.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nUse <KeyboardKey>Ctrl</KeyboardKey>\n```\n\n----------------------------------------\n\nTITLE: Partially Complete Progress Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the partially complete progress Badge to indicate when a given task has been partially completed, such as when an order has been partially fulfilled.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-partially-complete.tsx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect Usage of Transition Duration in CSS\nDESCRIPTION: This snippet shows the correct way to use a variable for transition duration, and the incorrect way using a hard-coded millisecond value. It enforces the use of predefined motion duration variables for consistency and maintainability.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/motion-declaration-property-unit-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\n+ transition-duration: var(--p-motion-duration-200);\n// Don't\n- transition-duration: 200ms;\n```\n\n----------------------------------------\n\nTITLE: Using InlineGrid Component Instead of CSS Grid in Polaris\nDESCRIPTION: This example demonstrates the preferred approach of using Polaris components for layout instead of direct CSS layout properties. The rule encourages using InlineGrid component rather than declaring CSS grid display property.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/layout-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ <InlineGrid />\n// Don't\n- display: grid;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect Typography Usage in Shopify Polaris\nDESCRIPTION: This snippet illustrates the preferred way of applying text styles using Polaris Typography components, contrasted with the discouraged method of directly declaring CSS text properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/typography-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Do\n<Text variant=\"headingXs\" as=\"p\" />\n// Don't\nfont-size: var(--p-font-size-300);\nfont-weight: var(--p-font-weight-semibold);\nline-height: var(--p-font-line-height-400);\nletter-spacing: var(--p-font-letter-spacing-normal);\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Key Inline with Context (JSX)\nDESCRIPTION: Demonstrates the recommended way to use the `KeyboardKey` component inline within descriptive text. This provides necessary context for users, especially those using screen readers, ensuring they understand the action associated with the key. This example is part of the accessibility best practices.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/keyboard-key.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nPress the <KeyboardKey>Ctrl</KeyboardKey> key.\n```\n\n----------------------------------------\n\nTITLE: Shadow Migration Example\nDESCRIPTION: Example showing the replacement of deprecated shadow custom properties with their new values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_129\n\nLANGUAGE: diff\nCODE:\n```\n- box-shadow: var(--p-shadow-xs);\n+ box-shadow: var(--p-shadow-100);\n```\n\n----------------------------------------\n\nTITLE: Custom Disclosure Tabs Implementation\nDESCRIPTION: Implementation featuring tabs with custom disclosure functionality for popover content.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/tabs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntabs-with-custom-disclosure.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating Rails Icon Helper Calls in Polaris Icons v4\nDESCRIPTION: Updates Rails UI helper calls by removing style suffixes (Monotone, Twotone, Filled) and converting icon names to PascalCase to align with Polaris Icons v4 naming conventions.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-icons-from-v3-to-v4.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- <%= ui_icon('external:card-reader-tap_major_monotone') %>\n+ <%= ui_icon('external:CardReaderTapMajor') %>\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Motion Variables vs @keyframes in CSS\nDESCRIPTION: Demonstrates the correct usage of predefined motion variables for animations and shows prohibited @keyframes declarations. The example shows how to implement a spinning animation using CSS variables instead of custom keyframes.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/motion-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ animation: var(--p-motion-keyframes-spin) var(--p-motion-duration-500) linear infinite;\n// Don't\n- @keyframes spin {\n-  from {\n-    transform: rotate(0deg);\n-  }\n\n-  to {\n-    transform: rotate(360deg);\n-  }\n-}\n```\n\n----------------------------------------\n\nTITLE: Media Query Usage Examples in Polaris SCSS\nDESCRIPTION: Demonstrates the correct and incorrect usage of media queries in Polaris. Shows that using Polaris breakpoint variables ($p-breakpoints-sm-up) is allowed, while custom variables are not permitted.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/media-queries-media-queries-allowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ @include @media #{$p-breakpoints-sm-up} {}\n// Don't\n- @include @media #{$my-var} {}\n```\n\n----------------------------------------\n\nTITLE: Overriding Badge Accessibility Labels in Polaris (React/TypeScript)\nDESCRIPTION: Use the `toneAndProgressLabelOverride` prop when the default tone and progress accessibility labels generated by the Badge component are not appropriate for a specific context, allowing for custom screen reader text.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-with-tone-and-progress-label-override.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Font Family Function with Polaris Font Tokens\nDESCRIPTION: This snippet demonstrates how to replace the old SCSS font-family() function with corresponding Polaris font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n- font-family: font-family(monospace);\n+ font-family: var(--p-font-family-mono);\n```\n\n----------------------------------------\n\nTITLE: Implementing Listbox with Action\nDESCRIPTION: Implementation that enables merchants to take actions through the listbox interface.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/listbox.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Reference: listbox-with-action.tsx\n```\n\n----------------------------------------\n\nTITLE: Replacing TextStyle Code with Text and InlineCode Components in React\nDESCRIPTION: Shows the replacement of code TextStyle with a combination of Text and InlineCode components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"code\">No supplier listed</TextStyle>\n+ <Text as=\"span\"><InlineCode>No supplier listed</InlineCode></Text>\n```\n\n----------------------------------------\n\nTITLE: Importing an Icon from Polaris Icons\nDESCRIPTION: TypeScript code to import a specific icon (PlusIcon) from the @shopify/polaris-icons package.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlusIcon} from '@shopify/polaris-icons';\n```\n\n----------------------------------------\n\nTITLE: Using Polaris CSS-only Button Component\nDESCRIPTION: HTML markup for a Polaris button using the CSS-only approach. This demonstrates how to apply Polaris styling without using React components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"Polaris-Button\">Example button</button>\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Border Width Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy border-width() function with shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-border-width <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Filters to LegacyFilters using React\nDESCRIPTION: This diff snippet shows how to replace the Filters component with LegacyFilters in a React project, including changing props interfaces from FiltersProps to LegacyFiltersProps, maintaining consistency in the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n- <Filters prop />\n+ <LegacyFilters prop />\n- export interface FiltersProps {}\n+ export interface LegacyFiltersProps {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Polaris Token Values and Metadata (JavaScript)\nDESCRIPTION: Demonstrates how to import and access Polaris design tokens within a JavaScript application. It shows two methods: importing `tokens` for direct value access (e.g., color hex codes) and importing `metadata` to access token values along with their descriptions and other metadata.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Token values only\nimport {tokens} from '@shopify/polaris-tokens';\n\nconsole.log(tokens.color['color-bg']); // 'rgba(...)'\n\n// Tokens with metadata\nimport {metadata} from '@shopify/polaris-tokens';\n\nconsole.log(metadata.color['color-bg'].value); // 'rgba(...)'\nconsole.log(metadata.color['color-bg'].description); // 'For use as a background color, in components such as Page and Frame backgrounds.'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect Usage of Layout Properties in Sass\nDESCRIPTION: This code snippet illustrates the proper way to define width using a default value, contrasting it with the deprecated method of using a predefined variable.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/layout-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// Do\n+ width: 240px !default;\n// Don't\n- width: $navigation-width;\n```\n\n----------------------------------------\n\nTITLE: Default Resource Item Implementation in React TSX\nDESCRIPTION: A basic implementation of a resource item component where details are filled in at the point of use.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-item.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nresource-item-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Examples of Motion Tokens in CSS\nDESCRIPTION: Examples of motion tokens for duration and easing functions with different values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n--p-motion-duration-100\n--p-motion-ease\n--p-motion-ease-in\n```\n\n----------------------------------------\n\nTITLE: Using Border Radius Variables in CSS\nDESCRIPTION: Demonstrates the correct and incorrect ways to specify border radius values in Polaris. Shows transition from legacy Sass border functions to CSS custom properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/border-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ border-radius: var(--p-border-radius-100);\n// Don't\n- border-radius: border-radius();\n```\n\n----------------------------------------\n\nTITLE: Using Motion Variables in CSS Transitions\nDESCRIPTION: Demonstrates the correct usage of Polaris motion custom properties for transitions, showing both approved and deprecated approaches. The rule enforces using CSS variables like --p-motion-duration-500 instead of legacy Sass variables.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/motion-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\ntransition: var(--p-motion-duration-500) var(--p-motion-ease);\n// Don't\nduration: $skeleton-shimmer-duration var(--p-motion-ease);\n```\n\n----------------------------------------\n\nTITLE: Critical Tone Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the critical Badge for critical and irreversible issues that require merchants’ attention and potential action. Use sparingly due to the stress it can cause.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-critical.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating Token Group Names in JavaScript\nDESCRIPTION: This snippet demonstrates the changes in token group names when importing from '@shopify/polaris-tokens'. It shows how to update the import statement and object structure to match the new naming conventions in v6.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-tokens-from-v5-to-v6.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport {tokens} from '@shopify/polaris-tokens';\n\nconst tokens = {\n  breakpoints,\n- colorSchemes,\n+ colors\n  depth,\n- legacyTokens,\n+ legacy\n  motion,\n  shape,\n  spacing,\n- typography,\n+ font,\n  typography,\n  zIndex,\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing CSS Outline Usage Over Sass Mixins\nDESCRIPTION: This diff snippet illustrates the preferred use of standard CSS properties using style tokens over legacy Sass mixins for border outlines. The specified replacements promote the use of variable-based styling with CSS properties. The snippet requires knowledge of CSS custom properties and their use in the Polaris framework.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/border-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ outline: var(--p-border-width-025) solid transparent;\n// Don't\n- @include high-contrast-outline()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect Color Custom Property Usage in CSS\nDESCRIPTION: This code snippet shows the correct way to use updated color custom properties and the incorrect usage of legacy color custom properties. It emphasizes the transition from older naming conventions to newer, more descriptive ones.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/color-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\ncolor: var(--p-color-text-caution);\n// Don't\ncolor: var(--p-text-warning);\n```\n\n----------------------------------------\n\nTITLE: Breakpoints Token Structure in CSS\nDESCRIPTION: Structure for breakpoint tokens that define responsive design breakpoints using aliases.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--p-breakpoints-[alias]\n```\n\n----------------------------------------\n\nTITLE: Updating Testing Setup with PolarisTestProvider in React\nDESCRIPTION: This snippet shows how to update the testing setup from using createPolarisContext and polarisContextTypes to using PolarisTestProvider, which provides all required contexts for testing Polaris components.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// old\nimport {mount} from 'enzyme';\nimport {createPolarisContext, polarisContextTypes} from '@shopify/polaris';\n\nexport function mountWithAppProvider(node) {\n  return mount(node, {\n    context: createPolarisContext(),\n    childContextTypes: polarisContextTypes,\n  });\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// new\nimport {mount} from 'enzyme';\nimport {PolarisTestProvider} from '@shopify/polaris';\nimport translations from '../../locales/en.json';\n\nexport function mountWithPolaris(node, context = {}) {\n  return mount(node, {\n    wrappingComponent: PolarisTestProvider,\n    wrappingComponentProps: {i18n: translations, ...context},\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Easing Function with Polaris Motion Tokens\nDESCRIPTION: This snippet shows how to replace the old SCSS easing() function with corresponding Polaris motion tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n- transition-timing-function: legacy-polaris-v8.easing('in');\n+ transition-timing-function: var(--p-ease-in);\n\n- transition: opacity 300ms legacy-polaris-v8.easing('in');\n+ transition: opacity 300ms var(--p-ease-in);\n```\n\n----------------------------------------\n\nTITLE: Replacing TextStyle Subdued with Text Component in React\nDESCRIPTION: Shows how to replace the subdued TextStyle with the Text component using the tone prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"subdued\">No supplier listed</TextStyle>\n+ <Text as=\"span\" tone=\"subdued\">No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Link with Custom Label in JSX\nDESCRIPTION: Example of creating an accessible link with a custom accessibility label to provide more context for screen readers.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/alternative-text.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Link\n  url=\"https://www.shopify.com/protect\"\n  accessibilityLabel=\"Learn more about Fraud Protect\"\n>\n  Learn more\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Header with Polaris Components in JSX/MDX\nDESCRIPTION: Uses a `div` to group the page header elements. It renders a level 1 heading using Markdown syntax (`#`) with the title sourced from frontmatter (`{frontmatter.title}`). A Polaris `Lede` component displays the description (also from frontmatter), and a `StatusBanner` component provides contextual information about the documentation's status, including a link for discussion.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n\n  # {frontmatter.title}\n\n  <Lede>{frontmatter.description}</Lede>\n\n  <StatusBanner status={frontmatter.status}>\n    The pattern documentation is evolving. [Join the\n    discussion](https://github.com/Shopify/polaris/discussions/categories/pattern-documentation)\n    to make it better.\n  </StatusBanner>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris React with npm\nDESCRIPTION: Command to install the Polaris React component library using npm package manager.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/polaris --save\n```\n\n----------------------------------------\n\nTITLE: Adding Stylelint Disable Comments with styles-insert-stylelint-disable\nDESCRIPTION: This migration inserts stylelint disable comments for stylelint-polaris >= v5 so that existing failures do not block a codebase from initializing the linter.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n+ // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY\npadding: 1rem;\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText Large with Text Component in React\nDESCRIPTION: Shows how to replace the large size DisplayText with Text component using the heading2xl variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"large\">Sales this year</DisplayText>\n+ <Text variant=\"heading2xl\" as=\"p\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: Destructive Action Autocomplete\nDESCRIPTION: Implementation showing Autocomplete with destructive action options.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/autocomplete.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nautocomplete-with-destructive-action.tsx\n```\n\n----------------------------------------\n\nTITLE: Valid Polaris Token Usage\nDESCRIPTION: Shows the correct usage of Polaris tokens in property values, ensuring valid token names are used with the --p- prefix.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/conventions-custom-property-allowed-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ font-size: var(--p-font-size-400);\n// Don't\n- font-size: var(--p-fontsize-200);\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component in React TSX\nDESCRIPTION: This code snippet demonstrates how to import and use the Collapsible component in a React TypeScript file. It includes a default example for a basic 'show more' interaction.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/collapsible.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Collapsible, Button} from '@shopify/polaris';\n\nexport function CollapsibleExample() {\n  const [open, setOpen] = useState(true);\n\n  const handleToggle = useCallback(() => setOpen((open) => !open), []);\n\n  return (\n    <div>\n      <Button onClick={handleToggle} ariaExpanded={open} ariaControls=\"basic-collapsible\">\n        Toggle collapsible\n      </Button>\n      <Collapsible\n        open={open}\n        id=\"basic-collapsible\"\n        transition={{\n          duration: '500ms',\n          timingFunction: 'ease-in-out',\n        }}\n        expandOnPrint\n      >\n        <p>Your content goes here</p>\n      </Collapsible>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of High-Level Polaris Tokens in CSS\nDESCRIPTION: Examples showing the basic structure of Polaris tokens for spacing, colors, and border radius.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n--p-space-100\n--p-color-border\n--p-border-radius-100\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessible Image Components in JSX\nDESCRIPTION: Examples of correctly implementing alt text for various image components in JSX, including VideoThumbnail, Thumbnail, and Icon.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/alternative-text.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<VideoThumbnail accessibilityLabel=\"Watch how-to video on Shopify reports.\" />\n\n<Thumbnail alt=\"Black choker necklace\" />\n\n<Icon accessibilityLabel=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Legacy Layout Property Usage Example in Diff Format\nDESCRIPTION: Demonstrates the correct and incorrect usage of layout custom properties, showing that direct usage of legacy variables like --p-choice-size should be replaced with proper component usage.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/layout-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ <Checkbox />\n// Don't\n- height: var(--p-choice-size);\n```\n\n----------------------------------------\n\nTITLE: Importing Polaris CSS in JavaScript\nDESCRIPTION: Imports the Polaris CSS styles directly into a JavaScript project. This approach is used when the asset packager supports CSS imports.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport '@shopify/polaris/build/esm/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Defining Polaris Design System CSS Variables\nDESCRIPTION: CSS custom properties defining color values for decorative elements, borders, and backgrounds. Variables follow a naming convention with prefixes like --p-decorative, --p-border, and --p-background to organize different types of color values.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_78\n\nLANGUAGE: css\nCODE:\n```\n--p-decorative-three-surface: rgba(146, 230, 181, 1);\n--p-decorative-three-icon: rgba(0, 109, 65, 1);\n--p-decorative-one-text: rgba(61, 40, 0, 1);\n--p-decorative-one-surface: rgba(255, 201, 107, 1);\n--p-decorative-one-icon: rgba(126, 87, 0, 1);\n--p-decorative-four-text: rgba(0, 45, 45, 1);\n--p-decorative-four-surface: rgba(145, 224, 214, 1);\n--p-decorative-four-icon: rgba(0, 106, 104, 1);\n--p-decorative-five-text: rgba(79, 14, 31, 1);\n--p-decorative-five-surface: rgba(253, 201, 208, 1);\n--p-decorative-five-icon: rgba(174, 43, 76, 1);\n--p-border-warning-subdued: --p-color-border-caution-subdued;\n--p-border-warning: --p-color-border-caution;\n--p-border-success-subdued: --p-color-border-success-subdued;\n--p-border-success: --p-color-border-success;\n--p-border-subdued: --p-color-border-subdued;\n--p-border-shadow-subdued: --p-color-border-input;\n--p-border-shadow: --p-color-border-input;\n--p-border-on-dark: --p-color-border-inverse;\n--p-border-neutral-subdued: --p-color-border-strong;\n--p-border-hovered: --p-color-border-hover;\n--p-border-highlight-subdued: --p-color-border-info-subdued;\n--p-border-highlight: --p-color-border-info;\n--p-border-disabled: --p-color-border-disabled;\n--p-border-depressed: --p-color-border-inverse;\n--p-border-critical-subdued: --p-color-border-critical-subdued;\n--p-border-critical-disabled: --p-color-border-disabled;\n--p-border-critical: --p-color-border-critical;\n--p-border: --p-color-border;\n--p-background-selected: --p-color-bg-app-selected;\n--p-background-pressed: --p-color-bg-app-active;\n```\n\n----------------------------------------\n\nTITLE: Using Translations with AppProvider in JSX\nDESCRIPTION: This snippet demonstrates how to import and use translations with the AppProvider component for a single locale in a React application.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/app-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AppProvider} from '@shopify/polaris';\n// en.json is English. Replace with fr.json for French, etc\nimport translations from '@shopify/polaris/locales/en.json';\n\nfunction App() {\n  return <AppProvider i18n={translations}>{/* App content */}</AppProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Replacement Maps File for Custom Property Migration\nDESCRIPTION: Example replacement-maps.js file for use with the styles-replace-custom-property migration. This file defines mappings for multiple custom properties to be replaced.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_67\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  color: {\n    '--p-text': '--p-color-text',\n  },\n  '/^animation/': {\n    '--p-fast': '100ms',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator via NPX (Shell)\nDESCRIPTION: Demonstrates the basic command structure for running a specific Polaris migration using `npx`. Requires the migration name and the target file path or directory. Optional flags like `--dry` (dry run) and `--print` (print changes) can be appended.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator <migration> <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Z-index Custom Properties with CSS Diff Example (diff)\nDESCRIPTION: Shows the necessary CSS change to migrate from deprecated z-index custom properties to new standardized custom properties in Shopify Polaris v11. The diff visualizes substituting '--p-z-1' with '--p-z-index-1' for clarity. Serves as a template for similar z-index property migrations.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_86\n\nLANGUAGE: diff\nCODE:\n```\n```diff\\n- z-index: var(--p-z-1);\\n+ z-index: var(--p-z-index-1);\\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText (small) with Text in React\nDESCRIPTION: Provides a specific example of replacing the small variant of the deprecated `DisplayText` component with the equivalent `Text` component, using `variant=\"headingLg\"` and the appropriate semantic element via the `as` prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"small\">Sales this year</DisplayText>\n+ <Text as=\"p\" variant=\"headingLg\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: High-Level Polaris Token Structure in CSS\nDESCRIPTION: The basic structure for all Polaris tokens following the pattern --p-[token-group-name]-[token-name], where --p- is the prefix and - is the delimiter between conceptual boundaries.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--p-[token-group-name]-[token-name]\n```\n\n----------------------------------------\n\nTITLE: Renaming AlphaStack to VerticalStack using React\nDESCRIPTION: This diff snippet showcases renaming AlphaStack to VerticalStack in a React project, including changing props interface from AlphaStackProps to VerticalStackProps for consistency.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_47\n\nLANGUAGE: diff\nCODE:\n```\n- <AlphaStack prop />\n+ <VerticalStack prop />\n- export interface AlphaStackProps {}\n+ export interface VerticalStackProps {}\n```\n\n----------------------------------------\n\nTITLE: Executing a Snapshot Release of Polaris Migrator (shell)\nDESCRIPTION: This shell command demonstrates how to run a snapshot release of the '@shopify/polaris-migrator' npm package, executing the 'v9-scss-replace-function' migration on all SCSS files in a given application path. It requires temporary access to a snapshot release and appropriate permissions. The primary parameter is the glob pattern specifying which SCSS files to migrate; output is the migration of matched files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\n# example snapshot release\nnpx @shopify/polaris-migrator@0.0.0-snapshot-release-20220919213536 v9-scss-replace-function \"./app/**/*.scss\"\n```\n\n----------------------------------------\n\nTITLE: Updating DatePicker Component Props\nDESCRIPTION: Shows migration from enum-based props to number-based props in the DatePicker component.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v4-to-v5.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import {Weekdays} from '@shopify/javascript-utilities';\n- import {DatePicker, Months, Year} from '@shopify/polaris';\n+ import {DatePicker} from '@shopify/polaris';\n\nfunction MyComponent() {\n-   function handleOnMonthChange(month: Month, year: Year) {\n+   function handleOnMonthChange(month: number, year: number) {\n    console.log(month, year);\n  }\n\n  return (\n    <DatePicker\n      year={2019}\n-      month={Months.February}\n+      month={1}\n-      weekStartsOn={Weekdays.Monday}\n+      weekStartsOn={1}\n      onMonthChange={handleOnMonthChange}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTML for Polaris Icons\nDESCRIPTION: HTML markup for custom implementation of Polaris icons without using Polaris React components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"Custom-Polaris-Icon\">\n  <svg\n    viewBox=\"0 0 20 20\"\n    class=\"Custom-Polaris-Icon__Svg\"\n    focusable=\"false\"\n    aria-hidden=\"true\"\n  >\n    <path fill=\"currentColor\" d=\"M7 13h6v6H7z\" />\n    <path\n      d=\"M19.664 8.252l-9-8a1 1 0 0 0-1.328 0L8 1.44V1a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v5.773L.336 8.252a1.001 1.001 0 0 0 1.328 1.496L2 9.449V19a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9.449l.336.299a.997.997 0 0 0 1.411-.083 1.001 1.001 0 0 0-.083-1.413zM16 18h-2v-5a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v5H4V7.671l6-5.333 6 5.333V18zm-8 0v-4h4v4H8zM4 2h2v1.218L4 4.996V2z\"\n      fill-rule=\"evenodd\"\n    />\n  </svg>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Running the styles-replace-custom-property Migration (Option 2)\nDESCRIPTION: Command to execute the styles-replace-custom-property migration script with a mapping file for multiple property replacements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_66\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator styles-replace-custom-property \\\n  --maps=\"<replacement-maps>\" <path>\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Link component in JSX\nDESCRIPTION: Demonstrates how to create a simple Link component with appropriate accessibility attributes.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/link.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  Learn more about <Link>Fraud Protect</Link>.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Badge-Enhanced Tabs Implementation\nDESCRIPTION: Implementation showing how to add badge content to tabs for displaying additional information.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/tabs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntabs-with-badge-content.tsx\n```\n\n----------------------------------------\n\nTITLE: Using Polaris space tokens instead of legacy Sass functions\nDESCRIPTION: This example shows how to replace the deprecated rem() Sass function with the Polaris design token system using CSS custom properties. The new approach uses var(--p-space-100) instead of rem(4px).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/space-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ padding: var(--p-space-100);\n// Don't\n- padding: rem(4px);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Polaris Tokens as CSS Variables (CSS)\nDESCRIPTION: Illustrates how to import the Polaris tokens as CSS custom properties and apply them in stylesheets. The `styles.css` file provided by the package defines CSS variables (prefixed with `--p-`) corresponding to the design tokens. These variables can then be used with the `var()` function.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport '@shopify/polaris-tokens/css/styles.css';\n```\n\nLANGUAGE: css\nCODE:\n```\ndiv {\n  background: var(--p-color-bg-surface);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Full Border Radius CSS Token\nDESCRIPTION: Creates a new CSS token `--p-border-radius-full`. This token is intended to replace the existing `--p-border-radius-half` token, likely providing a value for creating fully circular or pill-shaped borders.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n--p-border-radius-full\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO-Friendly Alt Text for Product Thumbnail in JSX\nDESCRIPTION: Example of using SEO-friendly alt text for a product thumbnail, including relevant details without keyword stuffing.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/alternative-text.mdx#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<Thumbnail alt=\"1460 Boot Limited Edition Oxblood Women's\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping Font Tokens to List Items in React (JSX)\nDESCRIPTION: This React JSX snippet iterates over the `tokens.font` array using the `.map()` method. For each `token` object in the array, it renders a `TokenList.Item` component. Key props like `key`, `category`, and `token` are passed to each item for proper rendering and identification within the list. This pattern dynamically generates list items based on the font token data.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/font.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TokenList>\n  {tokens.font\n    .map((token) => (\n      <TokenList.Item\n        key={token.name}\n        category=\"font\"\n        token={token}\n      />\n    ))}\n</TokenList>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date List Picker with Polaris Popover and OptionList (React/JavaScript)\nDESCRIPTION: This React functional component demonstrates the Date List pattern. It uses `useState` to manage the selected date range and the popover's visibility. A `Button` (with a `CalendarIcon`) acts as the activator for a `Popover`. Inside the `Popover`, an `OptionList` displays predefined date ranges (`ranges` array). Selecting an option updates the state and closes the popover. It depends on Polaris components: `Button`, `OptionList`, `Popover`, and `CalendarIcon`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/variants/date-list.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript {\"type\":\"livePreview\",\"id\":\"example\",\"title\":\"Date picking > Date list\"}\nfunction DateListPicker() {\n  const ranges = [\n    {\n      title: 'No Date',\n      alias: 'no-date',\n      period: null,\n    },\n    {\n      title: 'Today',\n      alias: 'today',\n      period: {\n        since: 'today',\n        until: 'today',\n      },\n    },\n    {\n      title: 'Yesterday',\n      alias: 'yesterday',\n      period: {\n        since: 'yesterday',\n        until: 'yesterday',\n      },\n    },\n    {\n      title: 'Last 7 days',\n      alias: 'last7days',\n      period: {\n        since: '-7d',\n        until: '-1d',\n      },\n    },\n  ];\n  const [selected, setSelected] = useState(ranges[0]);\n  const [popoverActive, setPopoverActive] = useState(false);\n  return (\n    <Popover\n      autofocusTarget=\"none\"\n      preferredAlignment=\"left\"\n      preferInputActivator={false}\n      preferredPosition=\"below\"\n      activator={\n        <Button\n          onClick={() => setPopoverActive(!popoverActive)}\n          icon={CalendarIcon}\n        >\n          {selected.title}\n        </Button>\n      }\n      active={popoverActive}\n    >\n      <OptionList\n        options={ranges.map((range) => ({\n          value: range.alias,\n          label: range.title,\n        }))}\n        selected={selected.alias}\n        onChange={(value) => {\n          setSelected(ranges.find((range) => range.alias === value[0]));\n          setPopoverActive(false);\n        }}\n      />\n    </Popover>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator Codemod for Color Migration Step 1\nDESCRIPTION: This command executes the Polaris Migrator codemod to replace custom property colors in CSS and SCSS files for step 1 of the migration process.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_108\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-color \"**/*.{css,scss}\" --step=1\n```\n\n----------------------------------------\n\nTITLE: Renaming Inline to HorizontalStack using React\nDESCRIPTION: This diff snippet illustrates renaming the Inline component to HorizontalStack in a React project, including the change of props interface from InlineProps to HorizontalStackProps.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n- <Inline prop />\n+ <HorizontalStack prop />\n- export interface InlineProps {}\n+ export interface HorizontalStackProps {}\n```\n\n----------------------------------------\n\nTITLE: Migrating Shadow Custom Properties with CSS Diff Example (diff)\nDESCRIPTION: Demonstrates the code change required to update from deprecated depth-related custom properties to explicit box-shadow values during Shopify Polaris v11 migration. Shows a before and after diff highlighting the removal of '--p-shadow-transparent' in favor of a static transparent shadow. Requires CSS knowledge and awareness of Polaris v11 changes.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_82\n\nLANGUAGE: diff\nCODE:\n```\n```diff\\n- box-shadow: var(--p-shadow-transparent);\\n+ box-shadow: 0 0 0 0 transparent;\\n```\n```\n\n----------------------------------------\n\nTITLE: Running Stylelint with npm Scripts\nDESCRIPTION: Shows various npm script commands to run Stylelint on different file sets.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-allowed-list/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stylelint <file-glob>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stylelint **/*.scss\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stylelint src/components/typography/textContainer/TextContainer.scss\n```\n\n----------------------------------------\n\nTITLE: Accessing Updated Color Tokens from `@shopify/polaris-tokens`\nDESCRIPTION: Shows the required code change for accessing color tokens from the `@shopify/polaris-tokens` package after updates. The previously used `tokens.colorSchemes.light` property path is now simplified to `tokens.colors` to reflect the consolidation of color palettes.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v9-to-v10.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nimport {tokens} from '@shopify/polaris-tokens';\n\n- const colors = tokens.colorSchemes.light\n+ const colors = tokens.colors\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic CSS Keyframe Generation\nDESCRIPTION: Generates CSS keyframes from motion tokens using JSX. It filters tokens that include 'keyframes' in their name and constructs corresponding CSS keyframe rules dynamically using the given values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/motion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n{tokens.motion\n  .filter(({name}) => name.includes('keyframes'))\n  .map(({name, value}) => `@keyframes ${name} ${value}`)\n  .join('\\n')}\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText (large) with Text in React\nDESCRIPTION: Provides a specific example of replacing the large variant of the deprecated `DisplayText` component with the equivalent `Text` component, using `variant=\"heading2xl\"` and the appropriate semantic element via the `as` prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"large\">Sales this year</DisplayText>\n+ <Text as=\"p\" variant=\"heading2xl\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: Staging Files Needing Manual Migration Checks (git/shell)\nDESCRIPTION: This sequence of git and shell commands stashes files containing a specific migration marker comment, stages remaining files for commit, returns the stashed changes, and helps the user separate complete migrations from those needing manual review. It assumes use of a Unix-like shell and git. Input is the working directory with both auto-migrated and manually-annotated files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\n# Stash files with \"polaris-migrator:\" comments\ngit stash push $(grep -r -l \"polaris-migrator:\" $(git ls-files -m))\n\n# Stage all files without \"polaris-migrator:\" comments\ngit add .\n\n# Bring back the change with \"polaris-migrator:\" comments\ngit stash pop\n\n# (optional) if there a files that have both \"polaris-migrator:\" comments\n# _and_ complete fixes, add the complete fixes now\ngit add -p\n\n# Commit all the complete fixes:\ngit commit\n\n# Now you're left with changes that have \"polaris-migrator:\" comments only\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Component Color Props\nDESCRIPTION: Migration of Icon component color prop values from legacy colors to new semantic color names.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v5-to-v6.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon color=\"indigo\" source={CirclePlusMinor} />\n+ <Icon color=\"primary\" source={CirclePlusMinor} />\n```\n\n----------------------------------------\n\nTITLE: Importing Polaris Media Queries SCSS File for Breakpoints\nDESCRIPTION: This snippet shows how to import the `media-queries.scss` file from the `@shopify/polaris-tokens` package to expose all defined breakpoint variables for use in Sass files. The only required dependency is the `@shopify/polaris-tokens` module available in the specified directory. This statement ensures that the full set of responsive breakpoint variables are available to the project.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/breakpoints.mdx#2025-04-22_snippet_1\n\nLANGUAGE: SCSS\nCODE:\n```\n@import 'path/to/node_modules/@shopify/polaris-tokens/dist/scss/media-queries';\n```\n\n----------------------------------------\n\nTITLE: Replace Text Warning Color with Caution Tone in Bash\nDESCRIPTION: Updates the 'color' prop from 'warning' to 'tone' with value 'caution' for Text components. Uses 'npx @shopify/polaris-migrator'. Targets .ts and .tsx files for migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp color --toProp tone --fromValue warning --toValue caution \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Migrating TextStyle Component (Subdued) to Text Component in JSX\nDESCRIPTION: Diff showing how to replace the deprecated TextStyle component with subdued variation to the new Text component, including setting the appropriate color.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"subdued\">No supplier listed</TextStyle>\n+ <Text as=\"span\" color=\"subdued\">No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: CSS Focus Style Standardization Over Sass At-Rules\nDESCRIPTION: This diff snippet demonstrates the transition from deprecated Sass `focus-ring` mixins to modern CSS properties for applying focus styles with custom properties. Dependencies include understanding of CSS custom properties, Polaris design tokens, and familiarity with replacing Sass mixins within CSS. This approach ensures better alignment with current development standards while waiting for a complete Polaris solution.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/border-at-rule-disallowed-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ &:focus {\n  + outline: var(--p-border-width-050) solid var(--p-color-border-focus);\n  + outline-offset: var(--p-space-050);\n+ }\n// Don't\n- @include focus-ring\n```\n\n----------------------------------------\n\nTITLE: Disallowed Shadow API Usage in Sass\nDESCRIPTION: Example showing the deprecated usage of legacy shadow Sass map variables that should be avoided.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/shadow-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Don't\n- @type map $depth-data: $shadows-data;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Token Pairing with Bevel and Elevation Tokens in Sass\nDESCRIPTION: This code demonstrates how to combine bevel tokens with elevation tokens to create visual distinction. It positions the bevel token as a pseudo element with absolute positioning and sets the mix-blend-mode to luminosity for the desired effect.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/depth/shadow-tokens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Sass\nCODE:\n```\nposition: relative;\nbox-shadow: $boxShadow;\nborder-radius: $borderRadius;\nborder: $border;\n\n&::before {\ncontent: $content;\nposition: absolute;\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;\nz-index: $zIndex;\nbox-shadow: var(--p-shadow-bevel-100);\nborder-radius: $borderRadius;\npointer-events: none;\nmix-blend-mode: luminosity;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Color Alias Tokens for Contrast\nDESCRIPTION: Updates CSS `color` alias tokens to improve color contrast ratios. This enhances accessibility by ensuring text and UI elements meet contrast requirements against their backgrounds.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n`color` alias tokens\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Rules with CSS Custom Properties\nDESCRIPTION: This snippet demonstrates the correct usage of CSS custom properties for font-size and line-height, as well as examples of disallowed hard-coded values. It enforces consistent typography across a project.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/typography-declaration-property-unit-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\nfont-size: var(--p-font-size-300);\nline-height: var(--p-font-line-height-600);\n// Don't\nfont-size: 12px;\nline-height: 1.5rem\n```\n\n----------------------------------------\n\nTITLE: Migrating TextStyle Component (Strong) to Text Component in JSX\nDESCRIPTION: Diff showing how to replace the deprecated TextStyle component with strong variation to the new Text component, including setting the appropriate font weight.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"strong\">No supplier listed</TextStyle>\n+ <Text as=\"span\" fontWeight=\"semibold\">No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: Rendering Variant Content Dynamically using MDX/JSX\nDESCRIPTION: This MDX/JSX snippet utilizes a custom `Variants` component. It dynamically renders content from multiple MDX files specified in the `variants` prop, which is sourced from the page's frontmatter (`frontmatter.variants`). This pattern is used to include and display different variations of a UI pattern or component on a single documentation page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Variants variants={frontmatter.variants} />\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Color CSS Variable (Diff Example)\nDESCRIPTION: This diff shows an example of replacing the deprecated Polaris custom property `--p-color-bg` with its v12 equivalent `--p-color-bg-surface`. This is part of the color property migration process, which requires multiple steps.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_107\n\nLANGUAGE: diff\nCODE:\n```\n- color: var(--p-color-bg);\n+ color: var(--p-color-bg-surface);\n```\n\n----------------------------------------\n\nTITLE: Replacing TextStyle Warning with Text Component in React\nDESCRIPTION: Demonstrates how to replace the warning TextStyle with the Text component using the warning tone.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"warning\">No supplier listed</TextStyle>\n+ <Text as=\"span\" tone=\"warning\">No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for DescriptionList Spacing Prop Update\nDESCRIPTION: This command runs the Polaris migrator to update the DescriptionList component, replacing the 'spacing' prop with 'gap'.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName DescriptionList --fromProp spacing --toProp gap \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Example of Icon color to tone migration\nDESCRIPTION: Diff showing the changes required for migrating from color=\"success\" to tone=\"success\" in the Icon component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_43\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon color=\"success\" />\n+ <Icon tone=\"success\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping Deprecated Polaris v10 Surface Color Tokens to v11 CSS Variables\nDESCRIPTION: Provides a mapping for deprecated Polaris v10 CSS surface (background) color tokens to their v11 replacements. Developers migrating to Polaris v11 should update their CSS to use the new variables (right side) instead of the deprecated ones (left side) to maintain correct background colors.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Deprecated Token                    -> Replacement Value */\n--p-surface-warning-subdued-pressed -> --p-color-bg-caution-subdued-active\n--p-surface-warning-subdued-hovered -> --p-color-bg-caution-subdued-hover\n--p-surface-warning-subdued         -> --p-color-bg-caution-subdued\n--p-surface-warning                 -> --p-color-bg-warning\n--p-surface-success-subdued-pressed -> --p-color-bg-success-subdued-active\n--p-surface-success-subdued-hovered -> --p-color-bg-success-subdued-hover\n--p-surface-success-subdued         -> --p-color-bg-success-subdued\n--p-surface-success                 -> --p-color-bg-success\n--p-surface-subdued                 -> --p-color-bg-subdued\n--p-surface-selected-pressed        -> --p-color-bg-interactive-subdued-active\n--p-surface-selected-hovered        -> --p-color-bg-interactive-subdued-hover\n--p-surface-selected                -> --p-color-bg-interactive-selected\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Space Properties with v9-styles-tokenize-space\nDESCRIPTION: This migration replaces lengths and functions (px, rem and rem()) in spacing declarations (padding, margin, and gap) with the corresponding Polaris spacing tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n- padding: 16px;\n+ padding: var(--p-space-4);\n\n- margin: 1rem;\n+ margin: var(--p-space-4);\n\n- gap: rem(16px);\n+ gap: var(--p-space-4);\n```\n\n----------------------------------------\n\nTITLE: AppProvider Migration Example\nDESCRIPTION: Example of removing deprecated features from AppProvider component\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <AppProvider features={{polarisSummerEditions2023: true, polarisSummerEditions2023ShadowBevelOptOut: false}} i18n={[]} />\n+ <AppProvider i18n={[]} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Small Thumbnail - Shopify Polaris - TypeScript/React\nDESCRIPTION: Shows usage of the Shopify Polaris Thumbnail component at small size (40×40 px) for layouts where the default size is too large or holds less importance. Dependencies include @shopify/polaris and React, accepting size, source, and alt as props.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/thumbnail.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Thumbnail} from '@shopify/polaris';\n\n<Thumbnail\n  size=\"small\"\n  source=\"/images/product-small.png\"\n  alt=\"Photo of product sample\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Linting and Formatting Migrated Files (shell)\nDESCRIPTION: These shell commands use ESLint and Prettier to automatically lint and format all tracked source files in the project after SCSS migrations have been applied. Both tools must be installed locally or accessible globally. Commands assume project structure compatible with these tools.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\nnpx eslint --fix .\nnpx prettier --write .\n```\n\n----------------------------------------\n\nTITLE: Replacing DisplayText (medium) with Text in React\nDESCRIPTION: Provides a specific example of replacing the medium variant of the deprecated `DisplayText` component with the equivalent `Text` component, using `variant=\"headingXl\"` and the appropriate semantic element via the `as` prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- <DisplayText size=\"medium\">Sales this year</DisplayText>\n+ <Text as=\"p\" variant=\"headingXl\">Sales this year</Text>\n```\n\n----------------------------------------\n\nTITLE: Defining Responsive Breakpoint Variables for Media Queries in Polaris (Sass)\nDESCRIPTION: This snippet lists all Sass variables for each responsive breakpoint alias, assigning respective `min-width` and `max-width` media query expressions for `up`, `down`, and `only` conditions at sizes `xs` through `xl`. No additional dependencies are required, though projects must import these definitions as shown previously. Inputs are SCSS-consuming build tools, and outputs are usable media query variables for consistent responsive styling.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/breakpoints.mdx#2025-04-22_snippet_2\n\nLANGUAGE: SCSS\nCODE:\n```\n$p-breakpoints-xs-up: (min-width: 0em);\n$p-breakpoints-xs-down: (max-width: -0.0025em);\n$p-breakpoints-xs-only: (min-width: 0em) and (max-width: 30.6225em);\n\n$p-breakpoints-sm-up: (min-width: 30.625em);\n$p-breakpoints-sm-down: (max-width: 30.6225em);\n$p-breakpoints-sm-only: (min-width: 30.625em) and (max-width: 47.9975em);\n\n$p-breakpoints-md-up: (min-width: 48em);\n$p-breakpoints-md-down: (max-width: 47.9975em);\n$p-breakpoints-md-only: (min-width: 48em) and (max-width: 64.9975em);\n\n$p-breakpoints-lg-up: (min-width: 65em);\n$p-breakpoints-lg-down: (max-width: 64.9975em);\n$p-breakpoints-lg-only: (min-width: 65em) and (max-width: 89.9975em);\n\n$p-breakpoints-xl-up: (min-width: 90em);\n$p-breakpoints-xl-down: (max-width: 89.9975em);\n$p-breakpoints-xl-only: (min-width: 90em);\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Border Tokens for Contrast\nDESCRIPTION: Updates the specific CSS tokens `border-caution-subdued` and `border-success-subdued` to improve color contrast. This ensures these border styles are sufficiently visible against adjacent colors.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\nborder-caution-subdued\n```\n\nLANGUAGE: css\nCODE:\n```\nborder-success-subdued\n```\n\n----------------------------------------\n\nTITLE: Replacing TextStyle Strong with Text Component in React\nDESCRIPTION: Demonstrates the replacement of strong TextStyle with the Text component using the fontWeight prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- <TextStyle variation=\"strong\">No supplier listed</TextStyle>\n+ <Text as=\"span\" fontWeight=\"semibold\" >No supplier listed</Text>\n```\n\n----------------------------------------\n\nTITLE: Describing Focus Component Behavior in Markdown\nDESCRIPTION: This snippet explains the core functionality of the Focus component. It automatically focuses the first focusable element among its children when mounted, unless the user has specified an autoFocus element.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/src/components/Focus/README_INTERNAL.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# <Focus>\\n\\n`Focus` will automatically focus the first focusable element that it finds in it's children when it is mounted, unless the user specified an `autoFocus` element.\n```\n\n----------------------------------------\n\nTITLE: Box border radius migration example\nDESCRIPTION: Example showing how to update Box component's border radius props to the new naming convention\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- <Box borderRadiusEndStart=\"2\" borderRadiusEndEnd=\"2\" borderRadiusStartStart=\"2\" borderRadiusStartEnd=\"2\" />\n+ <Box borderEndStartRadius=\"2\" borderEndEndRadius=\"2\" borderStartStartRadius=\"2\" borderStartEndRadius=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Updating AppProvider Configuration in React\nDESCRIPTION: Changes to AppProvider's props structure, removing newDesignLanguage feature flag and updating theme configuration format. The frameOffset now requires units and topBar theming has been replaced with new color config.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v5-to-v6.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n<AppProvider\n  i18n={{}}\n- features={{newDesignLanguage: true}}\n  theme={{\n    colors: {\n-     topBar: {\n-       color: 'rgb(33,43,54)',\n-       backgroundLighter: 'rgb(244, 246, 248)',\n-       backgroundDarker: 'rgb(223, 227, 232)',\n-       background: 'rgb(255,255,255)',\n-     },\n+     surface: 'rgb(0, 0, 0)',\n+     onSurface: 'rgb(33,43,54)',\n    },\n-   frameOffset: 60,\n+   frameOffset: '60px',\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Updating Experimental CSS Background State Variables\nDESCRIPTION: Updates the values for the experimental CSS variables `bg-hover` and `bg-active`. This change modifies the visual appearance of elements in their hover and active states using these specific experimental tokens within the Polaris system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbg-hover\n```\n\nLANGUAGE: css\nCODE:\n```\nbg-active\n```\n\n----------------------------------------\n\nTITLE: Enforcing Modern Shadow Custom Properties in CSS\nDESCRIPTION: This code snippet illustrates the correct and incorrect usage of shadow custom properties in CSS. It encourages the use of the newer --p-shadow-300 property instead of the legacy --p-shadow-deep property for box-shadow.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/shadow-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\n+ box-shadow: var(--p-shadow-300);\n// Don't\n- box-shadow: var(--p-shadow-deep)\n```\n\n----------------------------------------\n\nTITLE: Creating Component Metadata and Introduction in Markdown\nDESCRIPTION: This snippet demonstrates how to structure the metadata, component name, and introduction for a Polaris component README file. It includes YAML metadata for name, category, and keywords, followed by the component name and a brief introduction.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Component READMEs.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: ComponentName\ncategory: Category # for example: \"Actions\"\nkeywords:\n  - keywords are useful\n  - for improving search results\n  - in the style guide\n---\n\n# ComponentName\n\nShort introduction about the component.\n```\n\n----------------------------------------\n\nTITLE: Replacing VisuallyHidden Component with Text Component in React\nDESCRIPTION: Illustrates how to replace the VisuallyHidden component with the Text component using the visuallyHidden prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/text.mdx#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- <VisuallyHidden>\n-   <Heading>Title and description</Heading>\n- </VisuallyHidden>\n+ <Text visuallyHidden as=\"h2\">Title and description</Text>\n```\n\n----------------------------------------\n\nTITLE: Displaying Legacy Token Deprecations in Markdown\nDESCRIPTION: A markdown table showing deprecated legacy tokens and their replacement values. This includes various CSS custom properties for styling elements like banners, borders, and text fields.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated Token                     | Replacement Value                                                                                                                                     |\n| ------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `--p-override-loading-z-index`       | `--p-z-index-6`                                                                                                                                       |\n| `--p-choice-size`                    | `20px` / `1.25rem`                                                                                                                                    |\n| `--p-icon-size-small`                | `8px` / `0.5rem`                                                                                                                                      |\n| `--p-icon-size-medium`               | `20px` / `1.25rem`                                                                                                                                    |\n| `--p-choice-margin`                  | `--p-space-025`                                                                                                                                       |\n| `--p-control-border-width`           | `--p-border-width-2`                                                                                                                                  |\n| `--p-banner-border-default`          | `inset 0 var(--p-border-width-1) 0 0 var(--p-color-border-strong), inset 0 0 0 (--p-border-width-1) var(--p-color-border-strong)`                     |\n| `--p-banner-border-success`          | `inset 0 var(--p-border-width-1) 0 0 var(--p-color-border-success-subdued), inset 0 0 0 (--p-border-width-1) var(--p-color-border-success-subdued)`   |\n| `--p-banner-border-highlight`        | `inset 0 var(--p-border-width-1) 0 0 var(--p-color-border-info-subdued), inset 0 0 0 (--p-border-width-1) var(--p-color-border-info-subdued)`         |\n| `--p-banner-border-warning`          | `inset 0 var(--p-border-width-1) 0 0 var(--p-color-border-caution-subdued), inset 0 0 0 (--p-border-width-1)var(--p-color-border-caution-subdued)`    |\n| `--p-banner-border-critical`         | `inset 0 var(--p-border-width-1) 0 0 var(--p-color-border-critical-subdued), inset 0 0 0 (--p-border-width-1) var(--p-color-border-critical-subdued)` |\n| `--p-thin-border-subdued`            | `var(--p-border-width-1) solid var(--p-color-border-subdued)`                                                                                         |\n| `--p-text-field-spinner-offset`      | `2px` / `0.125rem`                                                                                                                                    |\n| `--p-text-field-focus-ring-offset`   | `-4px` / `-0.25rem`                                                                                                                                   |\n| `--p-button-group-item-spacing`      | `calc(-1 * var(--p-space-025))`                                                                                                                       |\n| `--p-range-slider-thumb-size-base`   | `16px` / `1rem`                                                                                                                                       |\n| `--p-range-slider-thumb-size-active` | `24px` / `1.5rem`                                                                                                                                     |\n| `--p-frame-offset`                   | `0`                                                                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Example of List spacing to gap migration\nDESCRIPTION: Diff showing the changes required for migrating from spacing=\"loose\" to gap=\"loose\" in the List component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n- <List spacing=\"loose\" />\n+ <List gap=\"loose\" />\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Icon color=\"warning\" migration\nDESCRIPTION: Regular expression to check for any remaining instances of Icon components with the outdated color=\"warning\" property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_34\n\nLANGUAGE: regex\nCODE:\n```\n<Icon[^>\\w](?:[^>]|\\n)*?color=\"warning\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Custom Properties with v9-styles-replace-custom-property-legacy\nDESCRIPTION: This migration replaces deprecated legacy CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n- width: var(--p-icon-size);\n+ width: var(--p-icon-size-small);\n\n- display: var(--p-override-none);\n+ display: none;\n```\n\n----------------------------------------\n\nTITLE: Updating Button Component Props\nDESCRIPTION: Changes to Button component API, replacing ariaPressed with pressed prop and stretchContent with a combination of fullWidth and textAlign props.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v5-to-v6.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <Button ariaPressed={true}>Let's go</Button>\n+ <Button pressed={true}>Let's go</Button>\n\n- <Button stretchContent>Let's go</Button>\n+ <Button fullWidth textAlign=\"left\">Let's go</Button>\n```\n\n----------------------------------------\n\nTITLE: Incomplete Progress Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the incomplete progress Badge to indicate when a given task has not yet been completed, such as marking an order as unfulfilled.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-incomplete.tsx\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Custom Property Disallowed List Plugin Options\nDESCRIPTION: TypeScript interface defining the configuration options for the custom property disallowed list plugin. It includes options for specifying disallowed properties and disallowed values for specific properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-disallowed-list/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PrimaryOptions {\n  /**\n   * A list of regular expressions or string literals that match disallowed custom properties.\n   */\n  disallowedProperties?: (string | RegExp)[];\n  /**\n   * A map of properties and their disallowed custom properties represented as a list\n   * of regular expressions or string literals.\n   */\n  disallowedValues?: {[property: string]: (string | RegExp)[]};\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Text Components in Shell\nDESCRIPTION: Shell command to run the Polaris migrator tool for replacing deprecated text components with the new Text component.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v10-react-replace-text-components <path>\n```\n\n----------------------------------------\n\nTITLE: Displaying Border Token Deprecations in Markdown\nDESCRIPTION: A markdown table showing deprecated border tokens and their replacement values. This includes various CSS custom properties for border styling.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated Token             | Replacement Value                                             |\n| ---------------------------- | ------------------------------------------------------------- |\n| `--p-border-radius-base`     | `--p-border-radius-1`                                         |\n| `--p-border-radius-large`    | `--p-border-radius-2`                                         |\n| `--p-border-radius-half`     | `--p-border-radius-full`                                      |\n| `--p-border-base`            | `var(--p-border-width-1) solid var(--p-color-border-subdued)` |\n| `--p-border-dark`            | `var(--p-border-width-1) solid var(--p-color-border)`         |\n| `--p-border-transparent`     | `var(--p-border-width-1) solid transparent`                   |\n| `--p-border-divider`         | `var(--p-border-width-1) solid var(--p-color-border-subdued)` |\n| `--p-border-divider-on-dark` | `var(--p-border-width-1) solid var(--p-color-border-inverse)` |\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Motion Properties with v9-styles-tokenize-motion\nDESCRIPTION: This migration replaces timing values (ms, s) in transition and animation declarations with corresponding Polaris motion tokens. It transforms transition-duration, transition-timing-function, animation-duration, and animation-timing-function properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n- transition-duration: 100ms;\n+ transition-duration: var(--p-duration-100);\n\n- transition-timing-function: linear;\n+ transition-timing-function: var(--p-linear);\n\n- transition: opacity 100ms linear;\n+ transition: opacity var(--p-duration-100) linear;\n\n- transition: opacity 100ms linear, left 100ms linear;\n+ transition: opacity var(--p-duration-100) linear, left var(--p-duration-100) linear;\n\n- animation-duration: 100ms;\n+ animation-duration: var(--p-duration-100);\n\n- animation-timing-function: linear;\n+ animation-timing-function: var(--p-linear);\n\n- animation: 100ms linear fadeIn;\n+ animation: var(--p-duration-100) linear fadeIn;\n\n- animation: 100ms linear slideIn, 100ms linear slideIn;\n+ animation: var(--p-duration-100) linear slideIn, var(--p-duration-100) linear slideIn;\n```\n\n----------------------------------------\n\nTITLE: Updating Card secondaryFooterAction Prop in React\nDESCRIPTION: This snippet demonstrates how to update the Card component by replacing the removed secondaryFooterAction prop with the new secondaryFooterActions prop that accepts an array of actions.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Card secondaryFooterAction={{content: 'Dismiss'}}>Polaris</Card>\n\n// new\n<Card secondaryFooterActions={[{content: 'Dismiss'}]}>Polaris</Card>\n```\n\n----------------------------------------\n\nTITLE: Avatar Shape Migration Example\nDESCRIPTION: Example of removing deprecated shape prop from Avatar component\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- <Avatar size=\"xs\" shape=\"round\" />\n- <Avatar size=\"xs\" shape=\"square\" />\n+ <Avatar size=\"xs\" />\n+ <Avatar size=\"xs\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating v12 Color Custom Properties (Diff/Shell)\nDESCRIPTION: Illustrates the code change and command for the `v12-styles-replace-custom-property-color` migration. This replaces the deprecated `--p-color-bg` CSS custom property with its v12 replacement, `--p-color-bg-surface`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- color: var(--p-color-bg);\n+ color: var(--p-color-bg-surface);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-color <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating v12 Font Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code changes and command for the `v12-styles-replace-custom-property-font` migration. This replaces deprecated font-related CSS custom properties (like `--p-font-size-75`, `--p-font-line-height-1`) with their v12 equivalents (`--p-font-size-300`, `--p-font-line-height-400`).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- font-size: var(--p-font-size-75);\n+ font-size: var(--p-font-size-300);\n```\n\nLANGUAGE: diff\nCODE:\n```\n- line-height: var(--p-font-line-height-1);\n+ line-height: var(--p-font-line-height-400);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-font <path>\n```\n\n----------------------------------------\n\nTITLE: Using Hard-Coded Values Instead of Legacy Layout Functions in CSS/SCSS\nDESCRIPTION: This example demonstrates the proper way to set height values in CSS by using explicit pixel values rather than calling internal Sass layout functions. Hard-coded pixel or rem values should be used for width and height properties instead of legacy mixins/variables or spacing tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/layout-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// Do\n+ height: 56px;\n// Don't\n- height: top-bar-height();\n```\n\n----------------------------------------\n\nTITLE: Updating SkeletonPage breadcrumbs prop in React\nDESCRIPTION: Illustrates the change needed to replace the deprecated `breadcrumbs` prop with the new `backAction` prop in the `SkeletonPage` component. The `backAction` prop now accepts a boolean.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <SkeletonPage breadcrumbs>\n+ <SkeletonPage backAction>\n```\n\n----------------------------------------\n\nTITLE: Border Property Unit Usage Examples in CSS\nDESCRIPTION: Demonstrates the correct usage of CSS custom properties for border-width and border-radius properties, avoiding hard-coded px, em, and rem units in favor of Polaris design tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/border-declaration-property-unit-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ border-width: var(--p-border-width-050);\n+ border-radius: var(--p-border-radius-200);\n// Don't\n- border-width: 2px;\n- border-radius: 0.5rem;\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating IndexTable.Row subdued prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of IndexTable.Row components with the subdued property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_50\n\nLANGUAGE: regex\nCODE:\n```\n<IndexTable\\.Row[^>\\w](?:[^>]|\\n)*?subdued\n```\n\n----------------------------------------\n\nTITLE: Rendering Extra Small Thumbnail - Shopify Polaris - TypeScript/React\nDESCRIPTION: Renders a Thumbnail component at the extra small size (24×24 px) for use in condensed layouts such as data table cells or action list items. Requires @shopify/polaris and React; accepts size, source, and alt properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/thumbnail.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Thumbnail} from '@shopify/polaris';\n\n<Thumbnail\n  size=\"extraSmall\"\n  source=\"/images/avatar-xs.png\"\n  alt=\"Photo of small mascot icon\"\n/>\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Box OutlineColor Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the outlineColor prop in Box components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_113\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?outlineColor\n```\n\n----------------------------------------\n\nTITLE: Using Motion Duration Variables in CSS\nDESCRIPTION: Demonstrates the correct usage of CSS custom properties for transition durations instead of hardcoded millisecond values. Shows both correct (using var(--p-motion-duration-200)) and incorrect (using direct 200ms value) approaches.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/motion-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ transition-duration: var(--p-motion-duration-200);\n// Don't\n- transition-duration: 200ms;\n```\n\n----------------------------------------\n\nTITLE: Updating Page breadcrumbs prop in React\nDESCRIPTION: Illustrates the change needed to replace the deprecated `breadcrumbs` prop (which accepted an array) with the new `backAction` prop in the `Page` component. The `backAction` prop now accepts a `LinkAction` object.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <Page breadcrumbs={[{url: '/testing', content: 'Home'}]}>\n+ <Page backAction={{url: '/testing', content: 'Home'}}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Text Field in React\nDESCRIPTION: This snippet demonstrates how to create a disabled text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Store name\"\n      value=\"Snowdevil\"\n      disabled\n      onChange={() => {}}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating v12 Shadow Custom Properties (Diff/Shell)\nDESCRIPTION: Illustrates the code change and command for the `v12-styles-replace-custom-property-shadow` migration. This replaces the deprecated `--p-shadow-xs` CSS custom property with its v12 equivalent, `--p-shadow-100`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- box-shadow: var(--p-shadow-xs);\n+ box-shadow: var(--p-shadow-100);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-shadow <path>\n```\n\n----------------------------------------\n\nTITLE: Running react-rename-component Migration for AlphaTabs\nDESCRIPTION: Shell command to run the Polaris migrator tool for renaming AlphaTabs to Tabs.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"AlphaTabs\" --renameTo=\"Tabs\" --renamePropsFrom=\"AlphaTabsProps\" --renamePropsTo=\"TabsProps\"\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Border Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy border() function with shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-border <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with Media Query Allowed List Plugin in JavaScript\nDESCRIPTION: This JavaScript configuration object demonstrates how to set up the Stylelint config with the Polaris media query allowed list plugin. It specifies allowed media types, feature names, and SCSS interpolations.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/media-query-allowed-list/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stylelintConfig = {\n  rules: {\n    'polaris/media-query-allowed-list': {\n      allowedMediaTypes: ['print'],\n      allowedMediaFeatureNames: ['forced-colors', 'reduced-motion'],\n      allowedScssInterpolations: [\n        '$p-breakpoints-sm-up',\n        '$p-breakpoints-md-up',\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Modal small to size migration\nDESCRIPTION: Diff showing the changes required for migrating from small to size=\"small\" in the Modal component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_69\n\nLANGUAGE: diff\nCODE:\n```\n- <Modal small />\n+ <Modal size=\"small\" />\n```\n\n----------------------------------------\n\nTITLE: Button Component Migration Examples\nDESCRIPTION: These diff examples show how to update various Button prop combinations to the new API.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- <Button plain />\n+ <Button variant=\"plain\" />\n- <Button primary />\n+ <Button variant=\"primary\" />\n- <Button primary plain />\n+ <Button variant=\"tertiary\" />\n- <Button monochrome plain />\n+ <Button variant=\"monochromePlain\" />\n- <Button destructive />\n+ <Button variant=\"primary\" tone=\"critical\" />\n- <Button primarySuccess />\n+ <Button variant=\"primary\" tone=\"success\" />\n- <Button destructive plain />\n+ <Button variant=\"plain\" tone=\"critical\" />\n- <Button destructive />\n+ <Button variant=\"primary\" tone=\"critical\" />\n- <Button primarySuccess />\n+ <Button variant=\"primary\" tone=\"success\" />\n- <Button destructive outline />\n+ <Button tone=\"critical\" />\n- <Button destructive plain />\n+ <Button variant=\"plain\" tone=\"critical\" />\n- <Button monochrome />\n+ <Button />\n- <Button outline />\n+ <Button />\n```\n\n----------------------------------------\n\nTITLE: Migrating Badge statusAndProgressLabelOverride prop\nDESCRIPTION: Command to update the Badge component's 'statusAndProgressLabelOverride' prop to 'toneAndProgressLabelOverride'\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Badge --fromProp statusAndProgressLabelOverride --toProp toneAndProgressLabelOverride \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Example of Icon warning to caution migration\nDESCRIPTION: Diff showing the changes required for migrating from color=\"warning\" to tone=\"caution\" in the Icon component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon color=\"warning\" />\n- <Icon tone=\"warning\" />\n+ <Icon tone=\"caution\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Color Function with Polaris CSS Custom Properties\nDESCRIPTION: This snippet shows how to replace the old SCSS color() function with corresponding Polaris CSS custom properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n- color: color('ink');\n- background: color('white');\n+ color: var(--p-text);\n+ background: var(--p-surface);\n```\n\n----------------------------------------\n\nTITLE: Custom Property Naming Convention Example\nDESCRIPTION: Demonstrates the correct naming convention for custom properties, allowing non-Polaris prefixes while avoiding Polaris-specific prefixes (--p-, --pc-, --polaris-version-).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/conventions-custom-property-allowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nroot: {\n// Do\n+ --osui_animation-name-drag-handle-pulse: osui_drag-handle-pulse;\n// Don't\n- --p-animation-name-drag-handle-pulse: osui_drag-handle-pulse;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering RichCardGrid with Non-Primitive Compositions - React JSX\nDESCRIPTION: This snippet renders another RichCardGrid, this time filtering posts to exclude those whose titles are in the primitives list. It demonstrates conditional rendering and filtering in JSX based on non-primitive layout compositions. Prerequisites include having the posts array and frontmatter.primitives available in scope. The component lists cards for layout compositions built with primitives.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RichCardGrid\n  cards={posts.filter((post) => !frontmatter.primitives.includes(post.title))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing Sass Functions Using Polaris Migrator (TypeScript)\nDESCRIPTION: This TypeScript code defines a SCSS migration function for the Polaris Migrator, designed to replace all usages of the Sass function 'hello()' with 'world()' in style declarations. It uses PostCSS APIs, utility methods (such as 'isSassFunction'), and migrator context to walk through declaration values, mutate them if in fix mode, and report deprecated usage. Dependencies include internal utilities and types from the migrator toolkit. Input is a PostCSS AST root; output is the mutated AST with outdated Sass function calls updated or reported.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_76\n\nLANGUAGE: TypeScript\nCODE:\n```\n// polaris-migrator/src/migrations/replace-sass-function/replace-sass-function.ts\nimport {\n  isSassFunction,\n  StopWalkingFunctionNodes,\n  createSassMigrator as v9ReplaceHelloWorld,\n} from '../../utilities/sass';\nimport type {PolarisMigrator} from '../../utilities/sass';\n\nconst replaceHelloWorld: PolarisMigrator = (_, {methods}, context) => {\n  return (root) => {\n    methods.walkDecls(root, (decl) => {\n+ const parsedValue = valueParser(decl.value);\n+ parsedValue.walk((node) => {\n+   if (isSassFunction('hello', node)) {\n+     if (context.fix) {\n+ node.value = 'world';\n+     } else {\n+ methods.report({\n+   node: decl,\n+   severity: 'error',\n+   message:\n+     'Method hello() is no longer supported. Please migrate to world().',\n+ });\n+     }\n\n+     return StopWalkingFunctionNodes;\n+   }\n+ });\n+ if (context.fix) {\n+   decl.value = parsedValue.toString();\n+ }\n    });\n  };\n};\n\nexport default v9ReplaceHelloWorld('replace-hello-world', replaceHelloWorld);\n```\n\n----------------------------------------\n\nTITLE: Regular Expressions for Validating Button Prop Updates\nDESCRIPTION: These regular expressions can be used to check for outdated Button props after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_15\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?connectedDisclosure\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?destructive\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?outline\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?monochrome\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?plain\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?primary\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Button[^>\\w](?:[^>]|\\n)*?primarySuccess\n```\n\n----------------------------------------\n\nTITLE: Font Migration Step 4 Validation RegExp\nDESCRIPTION: Regular expression to validate remaining instances of deprecated font size custom properties after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_128\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-font-size-75|--p-font-size-200)(?![\\w-])\n```\n\n----------------------------------------\n\nTITLE: Using Modern Space Custom Properties Instead of Legacy Properties in CSS\nDESCRIPTION: This example demonstrates the proper use of modern space custom properties (--p-space-025) instead of legacy properties (--p-choice-margin) in CSS. The rule enforces consistency in spacing throughout the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/space-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ margin-bottom: var(--p-space-025);\n// Don't\n- margin-bottom: var(--p-choice-margin);\n```\n\n----------------------------------------\n\nTITLE: Adding @deprecated warning to props in TypeScript React interfaces\nDESCRIPTION: Demonstrates how to add a JSDoc @deprecated comment to a prop in a component's TypeScript interface to indicate the prop is deprecated and provide replacement advice.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Deprecation guidelines.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/** Description of the prop\n * @deprecated Use [REPLACEMENT_ADVICE] instead\n*/\nexampleProp?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Field with Monospaced Font in React\nDESCRIPTION: This example shows how to apply a monospaced font to a text field using the TextField component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/text-field.mdx#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {TextField} from '@shopify/polaris';\nimport React from 'react';\n\nexport function TextFieldExample() {\n  return (\n    <TextField\n      label=\"Tracking number\"\n      value=\"\"\n      onChange={() => {}}\n      monospaced\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating v12 Space Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code change and command for the `v12-styles-replace-custom-property-space` migration. This replaces the deprecated `--p-space-1` CSS custom property with its v12 equivalent, `--p-space-100`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- padding: var(--p-space-1);\n+ padding: var(--p-space-100);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-space <path>\n```\n\n----------------------------------------\n\nTITLE: Example of Layout.Section secondary to variant migration\nDESCRIPTION: Diff showing the changes required for migrating from secondary to variant=\"oneThird\" in the Layout.Section component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n- <Layout.Section secondary>\n+ <Layout.Section variant=\"oneThird\">\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Duration Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy duration() function with motion tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-duration <path>\n```\n\n----------------------------------------\n\nTITLE: Rendering Variant Options with React JSX - JavaScript\nDESCRIPTION: This snippet renders the <Variants> React component, supplying it with the 'variants' property sourced from the page's frontmatter metadata. It enables dynamic selection and display of different user interface or documentation variants. Requires a React environment with access to the Variants component and frontmatter context. Expects 'frontmatter.variants' to be an array of variant paths; outputs the rendered Variant selection UI for the page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/new-features/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Variants variants={frontmatter.variants} />\n```\n\n----------------------------------------\n\nTITLE: Resource Item with Shortcut Actions in React TSX\nDESCRIPTION: Example showing how to implement shortcut actions that provide quick access to common actions from the resource's details page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/lists/resource-item.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nresource-item-with-shortcut-actions.tsx\n```\n\n----------------------------------------\n\nTITLE: Updating Color Tokens in CSS\nDESCRIPTION: Diff showing the changes needed to update deprecated color tokens to their new equivalents.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n- color: var(--p-text);\n+ color: var(--p-color-text);\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Migration Command\nDESCRIPTION: Polaris migrator command to update Avatar component size prop values\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-react-avatar-component \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Using Modern CSS Variables for Typography Instead of Legacy Sass Variables\nDESCRIPTION: This example demonstrates how to properly set font sizes using Polaris CSS custom properties instead of deprecated Sass variables. The rule enforces the use of the newer var(--p-font-size-*) syntax and prohibits $base-font-size variables.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/typography-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ font-size: var(--p-font-size-400);\n// Don't\n- font-size: $base-font-size;\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Breakpoints\nDESCRIPTION: This command runs the Polaris migrator to replace legacy breakpoint mixins with new media query variables.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-breakpoints <path>\n```\n\n----------------------------------------\n\nTITLE: Comparing Allowed vs. Disallowed Border Radius CSS Custom Properties (Diff)\nDESCRIPTION: This diff snippet exemplifies the 'border/custom-property-disallowed-list' stylelint rule. It highlights that using the legacy custom property '--p-border-radius-large' for the 'border-radius' CSS property is disallowed (indicated by '-'). Instead, the updated custom property '--p-border-radius-200' should be used (indicated by '+') to align with the current Polaris design system standards.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/border-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ border-radius: var(--p-border-radius-200);\n// Don't\n- border-radius: var(--p-border-radius-large);\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Shape Properties with v9-styles-tokenize-shape\nDESCRIPTION: This migration replaces the legacy SCSS rem() function and hard-coded lengths (px, rem) in border, border-width, and border-radius declarations with corresponding Polaris shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n- border: 1px solid transparent;\n+ border: var(--p-border-width-1) solid transparent;\n\n- border-width: 0.0625rem;\n+ border-width: var(--p-border-width-1);\n\n- border-radius: 4px;\n+ border-radius: var(--p-border-radius-1);\n```\n\n----------------------------------------\n\nTITLE: Small Size Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the small size variant of the Badge component in layouts with limited space, such as within an `IndexTable` cell. This ensures the badge fits appropriately in constrained areas.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-small.tsx\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated <Bleed> Props in React Components\nDESCRIPTION: These regular expressions are used to identify outdated props (marginBlockEnd, marginInlineStart, marginInlineEnd) in <Bleed> components within React code.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_137\n\nLANGUAGE: regex\nCODE:\n```\n<Bleed[^>\\w](?:[^>]|\\n)*?marginBlockEnd\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Bleed[^>\\w](?:[^>]|\\n)*?marginInlineStart\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Bleed[^>\\w](?:[^>]|\\n)*?marginInlineEnd\n```\n\n----------------------------------------\n\nTITLE: Running the react-rename-component-prop Migration\nDESCRIPTION: Command to execute the react-rename-component-prop migration script with options for component name and prop renaming.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_73\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component-prop <path> --componentName=\"MyComponent\" --from=\"prop\" --to=\"newProp\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Polaris Foundations Page Content in Markdown\nDESCRIPTION: Structures the content of the Polaris foundations page, including the title, lead paragraph, and a grid of rich cards for foundation topics. It uses custom components like Lede and RichCardGrid to enhance the presentation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/foundations/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# {frontmatter.title}\n\n<Lede>{frontmatter.description}</Lede>\n\n<RichCardGrid cards={posts} category=\"foundations\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Border Radius Function with Polaris Shape Tokens\nDESCRIPTION: This snippet shows how to replace the old SCSS border-radius() function with corresponding Polaris shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n- border-radius: border-radius();\n+ border-radius: var(--p-border-radius-1);\n\n- border-radius: border-radius(large);\n+ border-radius: var(--p-border-radius-large);\n```\n\n----------------------------------------\n\nTITLE: Search for AlphaStack Component Instances in React\nDESCRIPTION: This JSX snippet helps in post-migration validation by locating remaining AlphaStack component instances within a React project through its JSX tags.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_49\n\nLANGUAGE: jsx\nCODE:\n```\n<AlphaStack\n```\n\n----------------------------------------\n\nTITLE: Setting Language Attributes in HTML\nDESCRIPTION: Examples of correctly setting the language attribute in HTML to ensure proper pronunciation and translation for screen readers.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/alternative-text.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<html lang=\"en\"></html>\n<html lang=\"de\"></html>\n<html lang=\"pt-BR\"></html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Large Thumbnail - Shopify Polaris - TypeScript/React\nDESCRIPTION: Illustrates usage of the large variant (80×80 px) of the Thumbnail component, suitable when the thumbnail is a major focal point. Uses @shopify/polaris and React, and takes size, source, and alt properties. Should be avoided in lists of similar items.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/thumbnail.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Thumbnail} from '@shopify/polaris';\n\n<Thumbnail\n  size=\"large\"\n  source=\"/images/featured.png\"\n  alt=\"Photo of flagship product\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Examples of Specialty Color Tokens in CSS\nDESCRIPTION: Examples of specialty color tokens specifically for input components with different prominence levels.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--p-color-input-text\n--p-color-input-text-secondary\n--p-color-input-text-tertiary\n```\n\n----------------------------------------\n\nTITLE: Running the styles-replace-custom-property Migration (Option 1)\nDESCRIPTION: Command to execute the styles-replace-custom-property migration script with single custom property replacement using --decl, --from, and --to flags.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator styles-replace-custom-property \\\n  --decl=\"<name>\" --from=\"<prop>\" --to=\"<prop>\" <path>\n```\n\n----------------------------------------\n\nTITLE: Example of IndexTable.Row subdued to tone migration\nDESCRIPTION: Diff showing the changes required for migrating from subdued to tone=\"subdued\" in the IndexTable.Row component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n- <IndexTable.Row subdued />\n+ <IndexTable.Row tone=\"subdued\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing Depth Custom Properties with v9-styles-replace-custom-property-depth\nDESCRIPTION: This migration replaces deprecated depth CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_56\n\nLANGUAGE: diff\nCODE:\n```\n- box-shadow: var(--p-button-drop-shadow);\n+ box-shadow: var(--p-shadow-button);\n\n- box-shadow: 1px 1px var(--p-shadow-from-ambient-light);\n+ box-shadow: 1px 1px rgba(23, 24, 24, 0.05);\n```\n\n----------------------------------------\n\nTITLE: Regex Validation for Outdated Modal Prop\nDESCRIPTION: Regex pattern to locate outdated <Modal large /> prop usage. Helps in manually verifying migration results. Applies to files using Modal with a 'large' prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_71\n\nLANGUAGE: regex\nCODE:\n```\n<Modal[^>\\w](?:[^>]|\\n)*?large\n```\n\n----------------------------------------\n\nTITLE: Attention Tone Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the attention Badge when something requires merchants' attention but the issue isn’t critical, such as indicating an order needs review.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-attention.tsx\n```\n\n----------------------------------------\n\nTITLE: Automating Typography Component Replacement using Shell\nDESCRIPTION: Provides the shell command to run the `v10-react-replace-text-components` migration script from `@shopify/polaris-migrator`. This script replaces multiple deprecated typography components (`DisplayText`, `Heading`, `Subheading`, `Caption`, `TextStyle`, `VisuallyHidden`) with the new `Text` component across the specified project path.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v10-react-replace-text-components <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout.Section fullWidth prop to variant with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Layout.Section component's fullWidth prop to variant=\"fullWidth\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp fullWidth --toProp variant --toValue fullWidth \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Examples of Color Tokens in CSS\nDESCRIPTION: Examples showing default color tokens for text with different prominence levels and specialty tokens for input elements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n--p-color-text\n--p-color-text-secondary\n--p-color-text-tertiary\n```\n\n----------------------------------------\n\nTITLE: Renaming Component Props with react-rename-component-prop\nDESCRIPTION: A generic codemod to rename any component prop throughout a codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_72\n\nLANGUAGE: diff\nCODE:\n```\n- <MyComponent prop=\"value\" />\n- <MyComponent prop />\n+ <MyComponent newProp=\"value\" />\n+ <MyComponent newProp />\n```\n\n----------------------------------------\n\nTITLE: HorizontalGrid Rename Migration Example\nDESCRIPTION: This diff example shows how to rename the HorizontalGrid component to InlineGrid.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n- <HorizontalGrid />\n+ <InlineGrid />\n```\n\n----------------------------------------\n\nTITLE: Tree Shaking Support in JavaScript\nDESCRIPTION: This snippet shows how to leverage tree shaking support in the new token structure. It demonstrates two ways of importing tokens: bundling all tokens and importing only specific token groups to reduce bundle size.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-tokens-from-v5-to-v6.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// bundle all tokens\nimport {tokens} from '@shopify/polaris-tokens';\n\n// bundle only imported token groups\nimport {colors, motion} from '@shopify/polaris-tokens';\n```\n\n----------------------------------------\n\nTITLE: Replacing Font Custom Properties with v9-styles-replace-custom-property-font\nDESCRIPTION: This migration replaces deprecated font CSS custom properties with corresponding Polaris custom property replacement values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n- font-weight: var(--p-badge-font-weight);\n+ font-weight: var(--p-font-weight-regular);\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Icon backdrop prop removal\nDESCRIPTION: Regular expression to check for any remaining instances of Icon components with the deprecated backdrop property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_44\n\nLANGUAGE: regex\nCODE:\n```\n<Icon[^>\\w](?:[^>]|\\n)*?backdrop\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Border Width Function with Polaris Shape Tokens\nDESCRIPTION: This snippet demonstrates how to replace the old SCSS border-width() function with corresponding Polaris shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n- border-width: border-width();\n+ border-width: var(--p-border-width-1);\n\n- border-width: border-width(thick);\n+ border-width: var(--p-border-width-2);\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-AlphaStack CSS Class Overrides\nDESCRIPTION: This CSS snippet assists in post-migration validation by identifying any Polaris-AlphaStack CSS class overrides in the codebase for accurate updates.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_50\n\nLANGUAGE: css\nCODE:\n```\nPolaris-AlphaStack\n```\n\n----------------------------------------\n\nTITLE: Using Label with Checkbox in HTML\nDESCRIPTION: Example of how to properly structure a checkbox and label combination for user consent. The code wraps both the checkbox and text in a label element for better accessibility and user experience.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  <label>\n    <input type=\"checkbox\" />I agree to the terms and conditions\n  </label>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Replacing Filter Functions with CSS Custom Properties in SCSS\nDESCRIPTION: This snippet shows how to replace deprecated filter() functions with their equivalent CSS custom properties. It covers various color filters including ink, sky, black, white, icon, and action.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_6\n\nLANGUAGE: scss\nCODE:\n```\nfilter('ink', 'lightest'): brightness(0) saturate(100%) invert(68%) sepia(18%) saturate(246%) hue-rotate(169deg) brightness(88%) contrast(90%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nfilter('sky', 'dark'): brightness(0) saturate(100%) invert(86%) sepia(4%) saturate(502%) hue-rotate(167deg) brightness(96%) contrast(91%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nfilter('sky'):\nfilter('sky', 'base'): brightness(0) saturate(100%) invert(100%) sepia(95%) saturate(336%) hue-rotate(175deg) brightness(97%) contrast(87%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nfilter('black'):\nfilter('black', 'base'): brightness(0) saturate(100%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nfilter('white'):\nfilter('white', 'base'): brightness(0) saturate(100%) invert(100%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nfilter('icon'):\nfilter('icon', 'base'): brightness(0) saturate(100%) invert(36%) sepia(13%) saturate(137%) hue-rotate(169deg) brightness(95%) contrast(87%)\n```\n\nLANGUAGE: scss\nCODE:\n```\nfilter('action'):\nfilter('action', 'base'): brightness(0) saturate(100%) invert(20%) sepia(59%) saturate(5557%) hue-rotate(162deg) brightness(95%) contrast(101%)\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Font Tokenization\nDESCRIPTION: This command runs the Polaris migrator to replace legacy font values with Polaris font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-tokenize-font <path>\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Line Height Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy line-height() function with font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-line-height <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Text Color Prop to Tone in Bash\nDESCRIPTION: Transforms all 'color' props to 'tone' in Text components irrespective of their values. Requires 'npx @shopify/polaris-migrator'. Supports both .ts and .tsx files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp color --toProp tone \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Heading Component to Text Component in JSX\nDESCRIPTION: Diff showing how to replace the deprecated Heading component with the new Text component, including setting the appropriate HTML element and variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n- <Heading>Online store dashboard</Heading>\n+ <Text as=\"h2\" variant=\"headingMd\">Online store dashboard</Text>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Frontmatter (YAML)\nDESCRIPTION: This YAML frontmatter block sets metadata for the documentation page. It includes the page title ('Tools'), a brief description, the name of an icon component ('ToolsIcon'), and its display order (11). This metadata is likely used by a static site generator or framework to build the page and navigation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tools\ndescription: Extensions, plugins, and other tools to help build with Polaris.\nicon: ToolsIcon\norder: 11\n---\n```\n\n----------------------------------------\n\nTITLE: Aligned Footer Help Implementation - TSX\nDESCRIPTION: Example demonstrating how to control horizontal alignment of the Footer Help component using the align prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/footer-help.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfooter-help-align.tsx\n```\n\n----------------------------------------\n\nTITLE: Automating DisplayText Replacement using Shell\nDESCRIPTION: Provides a variation of the typography migration command using the `--componentName` flag. This command specifically targets only the `DisplayText` component for replacement with the `Text` component across the specified project path.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v10-react-replace-text-components --componentName='DisplayText' <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout.Section oneThird prop to variant with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Layout.Section component's oneThird prop to variant=\"oneThird\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp oneThird --toProp variant --toValue oneThird \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Button Size for TextField in React\nDESCRIPTION: This diff shows how to update a Button component's size to match the new height of input fields in Polaris v11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_139\n\nLANGUAGE: diff\nCODE:\n```\n- <TextField connectedRight={<Button icon={DeleteMajor} />} />\n+ <TextField connectedRight={<Button icon={DeleteMajor} size=\"large\" />} />\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Font Size Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy font-size() function with font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-font-size <path>\n```\n\n----------------------------------------\n\nTITLE: Updating connectedDisclosure Prop Example\nDESCRIPTION: This example shows how to manually update the connectedDisclosure prop on the Button component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- <Button\n-   connectedDisclosure={{\n-     icon: ChevronDownMinor,\n-   }}\n- >\n-   Save\n- </Button>\n+ <ButtonGroup variant=\"segmented\">\n+   <Button>Save</Button>\n+   <Popover activator={<Button icon={ChevronDownMinor} />}/>\n+ </ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Migrating IndexTable.Row status prop to tone with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating IndexTable.Row component's status prop to tone across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName IndexTable.Row --fromProp status --toProp tone \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Migrating v11 Border Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code change and command for the `v11-styles-replace-custom-property-border` migration. This replaces the deprecated `--p-border-radius-base` CSS custom property with its v11 equivalent, `--p-border-radius-1`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- border-radius: var(--p-border-radius-base);\n+ border-radius: var(--p-border-radius-1);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-border <path>\n```\n\n----------------------------------------\n\nTITLE: Searching for Remaining AlphaTab CSS Classes\nDESCRIPTION: CSS code snippet to search for any remaining AlphaTab CSS class overrides after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_64\n\nLANGUAGE: css\nCODE:\n```\nPolaris-AlphaTab\n```\n\n----------------------------------------\n\nTITLE: Updating ChoiceList with Required Title Prop in React\nDESCRIPTION: This snippet shows how to update the ChoiceList component by adding the now-required title prop and using titleHidden to visually hide it if needed.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<ChoiceList\n  choices={[\n    {label: 'Choice One', value: 'one'},\n    {label: 'Choice Two', value: 'two'},\n  ]}\n  selected={['one']}\n/>\n\n\n// new\n<ChoiceList\n  title={'Meaningful title'}\n  titleHidden\n  choices={[\n    {label: 'Choice One', value: 'one'},\n    {label: 'Choice Two', value: 'two'},\n  ]}\n  selected={['one']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Configuration\nDESCRIPTION: JavaScript configuration example for adding custom Stylelint rules and messages.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  rules: {\n    'polaris/coverage': {\n      color: {...},\n      layout: {...},\n      motion: {\n        'new-rule': 'new-rule-options',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout.Section oneHalf prop to variant with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Layout.Section component's oneHalf prop to variant=\"oneHalf\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp oneHalf --toProp variant --toValue oneHalf \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Easing Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy easing() function with motion tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-easing <path>\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Tokens List with React in JavaScript\nDESCRIPTION: This snippet dynamically maps over an array of color tokens and renders each as a TokenList.Item component, presenting all color design tokens for documentation and visualization in Shopify Polaris. It relies on the React framework, assuming the availability of the 'tokens' object and custom components 'TokensNav' and 'TokenList'. The input is the tokens.color array, with each token displayed in a list; the output is the rendered UI element for each token. Requirements include React, the TokenList structure, and a tokens object in scope, and there are no built-in error checks for missing tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/color.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<TokenList>\n  {tokens.color\n    .map((token) => (\n      <TokenList.Item\n        key={token.name}\n        category=\"color\"\n        token={token}\n      />\n    ))}\n</TokenList>\n```\n\n----------------------------------------\n\nTITLE: Creating Thin Scrollable with Scrollbar Gutter in React\nDESCRIPTION: This example shows how to implement a thin Scrollable component with a scrollbar gutter. This approach prevents content shift when the container becomes scrollable.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/scrollable.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Scrollable} from '@shopify/polaris';\n\nexport function ScrollableWithGutterExample() {\n  return (\n    <Scrollable style={{height: '100px'}} shadow vertical>\n      <p>Some content</p>\n      <p>Some content</p>\n      <p>Some content</p>\n      <p>Some content</p>\n      <p>Some content</p>\n    </Scrollable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Text Emphasis\nDESCRIPTION: This command runs the Polaris migrator to replace legacy text emphasis mixins with tokens and declarations.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-text-emphasis <path>\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Text Components\nDESCRIPTION: This command runs the Polaris migrator to replace legacy text components with the new Text component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v10-react-replace-text-components <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Text Variant Prop in Bash\nDESCRIPTION: Codemod for replacing the 'variant' prop value 'headingXs' with 'headingSm' in Text components. Relies on 'npx @shopify/polaris-migrator'. Processes typescript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp variant --fromValue headingXs --toValue headingSm \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Tabs to LegacyTabs using React\nDESCRIPTION: This diff snippet illustrates how to replace the Tabs component with LegacyTabs in a React project. It includes changing props interfaces from TabsProps to LegacyTabsProps to ensure consistency in the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n- <Tabs prop />\n+ <LegacyTabs prop />\n- export interface TabsProps {}\n+ export interface LegacyTabsProps {}\n```\n\n----------------------------------------\n\nTITLE: Identifying non-bg background props in AlphaCard components\nDESCRIPTION: A regular expression to find AlphaCard components with a background prop that doesn't use the 'bg' prefix. This helps identify potential color-related issues in AlphaCard components after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_71\n\nLANGUAGE: regex\nCODE:\n```\n<AlphaCard[^>\\w](?:[^>]|\\n)*?background(?!=\"bg)\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Component Requirements\nDESCRIPTION: Adding required title prop to Modal component for accessibility, with option to hide it visually using titleHidden prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v5-to-v6.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n<Modal\n  activator={activator}\n  open={active}\n  onClose={handleChange}\n  primaryAction={{\n    content: 'Add Instagram',\n    onAction: handleChange,\n  }}\n  secondaryActions={[\n    {\n      content: 'Learn more',\n      onAction: handleChange,\n    },\n  ]}\n+  title=\"Reach more shoppers with Instagram product tags\"\n+  hiddenTitle\n>\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for Filters\nDESCRIPTION: This shell command automates the migration of the Filters component to LegacyFilters using the @shopify/polaris-migrator tool. It demands specifying the project path, along with options to rename component and props as needed.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"Filters\" --renameTo=\"LegacyFilters\" --renamePropsFrom=\"FiltersProps\" --renamePropsTo=\"LegacyFiltersProps\"\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Prop to Size in Bash\nDESCRIPTION: Converts the 'large' boolean prop to a 'size' prop with a value of 'large' for the Modal component. Requires 'npx @shopify/polaris-migrator' package. Updates all files with extensions .ts and .tsx.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Modal --fromPropType boolean --fromProp large --toProp size --toValue large \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Using New Polaris Media Query Variables in SCSS\nDESCRIPTION: A comprehensive list of the new media query variables for applying responsive styles at each breakpoint alias. These variables replace legacy media queries and mixins.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v9-to-v10.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$p-breakpoints-xs-up: '(min-width: 0em)';\n$p-breakpoints-xs-down: '(max-width: -0.0025em)';\n$p-breakpoints-xs-only: '(min-width: 0em) and (max-width: 30.6225em)';\n\n$p-breakpoints-sm-up: '(min-width: 30.625em)';\n$p-breakpoints-sm-down: '(max-width: 30.6225em)';\n$p-breakpoints-sm-only: '(min-width: 30.625em) and (max-width: 47.9975em)';\n\n$p-breakpoints-md-up: '(min-width: 48em)';\n$p-breakpoints-md-down: '(max-width: 47.9975em)';\n$p-breakpoints-md-only: '(min-width: 48em) and (max-width: 64.9975em)';\n\n$p-breakpoints-lg-up: '(min-width: 65em)';\n$p-breakpoints-lg-down: '(max-width: 64.9975em)';\n$p-breakpoints-lg-only: '(min-width: 65em) and (max-width: 89.9975em)';\n\n$p-breakpoints-xl-up: '(min-width: 90em)';\n$p-breakpoints-xl-down: '(max-width: 89.9975em)';\n$p-breakpoints-xl-only: '(min-width: 90em)';\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator with Namespace for SCSS\nDESCRIPTION: This command demonstrates how to run Polaris migrator for SCSS with a specific namespace for projects using the @use rule.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-<scss-migration> <path> --namespace=\"legacy-polaris-v8\"\n```\n\n----------------------------------------\n\nTITLE: Example of Icon highlight to info migration\nDESCRIPTION: Diff showing the changes required for migrating from color=\"highlight\" to tone=\"info\" in the Icon component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_40\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon color=\"highlight\" />\n- <Icon tone=\"highlight\" />\n+ <Icon tone=\"info\" />\n```\n\n----------------------------------------\n\nTITLE: Validating DisplayText Removal in React JSX\nDESCRIPTION: Shows an example JSX snippet to search for in the codebase. This helps identify any remaining instances of the removed `DisplayText` React component after running migration scripts.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<DisplayText\n```\n\n----------------------------------------\n\nTITLE: Badge status prop migration example\nDESCRIPTION: Example showing how to update Badge component's status prop to tone prop\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge status=\"success\" />\n+ <Badge tone=\"success\" />\n```\n\n----------------------------------------\n\nTITLE: Detecting non-border outlineColor props in Box components\nDESCRIPTION: A regular expression to locate Box components with an outlineColor prop that doesn't use the 'border' prefix. This helps identify potential color-related issues in Box components after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_75\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?outlineColor(?!=\"border)\n```\n\n----------------------------------------\n\nTITLE: Migrating from polaris-icons-internal Package\nDESCRIPTION: Updates imports to use the public @shopify/polaris-icons package instead of the now-deprecated @shopify/polaris-icons-internal package, and removes style suffixes from icon names.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-icons-from-v3-to-v4.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n-  FraudProtectMajorMonotone\n-} from '@shopify/polaris-icons-internal';\n+  FraudProtectMajor\n+} from '@shopify/polaris-icons';\n```\n\n----------------------------------------\n\nTITLE: Examples of Border Tokens in CSS\nDESCRIPTION: Examples of border tokens showing width and radius properties with different scale values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--p-border-width-100\n--p-border-radius-100\n--p-border-radius-full\n```\n\n----------------------------------------\n\nTITLE: Updating CSS for Dark Mode Using New Polaris Color Tokens\nDESCRIPTION: Demonstrates replacing light theme CSS custom properties (`--p-surface`, `--p-text`) with their dark theme equivalents (`--p-surface-dark`, `--p-text-on-dark`) within a CSS rule for a `.Toast` component. This change is necessary to maintain a dark UI appearance following Polaris updates, as shown in the preceding mapping table.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v9-to-v10.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n.Toast {\n-  background: var(--p-surface);\n-  color: var(--p-text);\n+  background: var(--p-surface-dark);\n+  color: var(--p-text-on-dark);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Font Family Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy font-family() function with font tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-font-family <path>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sandbox Context for Date List Example (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a simple function call `(____CODE____)()` intended for a sandbox environment. It directly invokes the main component code, allowing it to run in isolation without the additional styling or layout wrappers present in the preview context.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/variants/date-list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{/* prettier-ignore */}\n```javascript {\"type\":\"sandboxContext\",\"for\":\"example\"}\n{(____CODE____)()}\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating v11 Legacy Custom Properties (Diff/Shell)\nDESCRIPTION: Illustrates code changes and the command for the `v11-styles-replace-custom-property-legacy` migration. This replaces various deprecated legacy CSS custom properties (e.g., `--p-override-loading-z-index`, `--p-choice-size`) with their corresponding v11 Polaris custom properties or static values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- z-index: var(--p-override-loading-z-index);\n+ z-index: var(--p-z-index-6);\n\n- width: var(--p-choice-size);\n+ width: 20px;\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-legacy <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating Icon color=\"warning\" to tone=\"caution\" with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Icon component's color prop from \"warning\" to tone=\"caution\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Icon --fromProp color --toProp tone --fromValue warning --toValue caution \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-Filters CSS Class Overrides\nDESCRIPTION: This CSS snippet is part of the process in post-migration validation to identify any overrides of the Polaris-Filters CSS class within the codebase. It ensures proper updates are made post-migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_38\n\nLANGUAGE: css\nCODE:\n```\nPolaris-Filters\n```\n\n----------------------------------------\n\nTITLE: DescriptionList Spacing Prop Migration Example\nDESCRIPTION: This diff example shows how to update the DescriptionList spacing prop to the new gap prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n- <DescriptionList spacing=\"loose\" />\n+ <DescriptionList gap=\"loose\" />\n```\n\n----------------------------------------\n\nTITLE: Running the Motion Property Migration Command (Shell)\nDESCRIPTION: Provides a CLI command to automatically migrate deprecated motion-related CSS custom properties to their new equivalents using the Shopify Polaris migrator tool.\nRequires Node.js and installation of '@shopify/polaris-migrator'. Replace '<path>' with the appropriate directory or file path in your project. Outputs migrated code ready for further validation.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_80\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-motion <path>\\n```\n```\n\n----------------------------------------\n\nTITLE: Running v11-styles-replace-custom-property-color Migration\nDESCRIPTION: Shell command to run the Polaris migrator tool for updating deprecated color tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_69\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-color <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Border Tokens in CSS\nDESCRIPTION: Diff showing the changes needed to update deprecated border tokens to their new equivalents.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n- border: var(--p-border-divider);\n+ border: var(--p-border-width-1) solid var(--p-color-border-subdued);\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for ButtonGroup Spacing Prop Update\nDESCRIPTION: This command runs the Polaris migrator to update the ButtonGroup component, replacing the 'spacing' prop with 'gap'.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName ButtonGroup --fromProp spacing --toProp gap \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Color Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy color() function with CSS custom properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-color <path>\n```\n\n----------------------------------------\n\nTITLE: Rendering Shadow Token Items using React JSX map Function\nDESCRIPTION: This JSX snippet dynamically generates a list of shadow token items within a <TokenList> component. It iterates over the `tokens.shadow` array using the `.map()` method. For each `token` object, it renders a `<TokenList.Item>` component, assigning a unique `key`, setting the `category` to \"shadow\", and passing the entire `token` object as a prop. This code assumes the `tokens.shadow` array and the `TokenList.Item` component are available in the current scope.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/shadow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  tokens.shadow.map((token) => (\n    <TokenList.Item key={token.name} category=\"shadow\" token={token} />\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator Codemod\nDESCRIPTION: Command to run the polaris-migrator tool for updating space custom properties\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_134\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-space \"**/*.{css,scss}\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Design Principles Overview with MDX and React - MDX\nDESCRIPTION: This snippet defines the layout and content for the Design section overview page using MDX and embedded React components. It pulls title and description metadata from the MDX frontmatter and displays them with custom components like <Lede> and <RichCardGrid>. Dependencies include a compatible MDX/React environment, as well as the <Lede> and <RichCardGrid> components and the required posts data. The content is dynamically rendered, with metadata driving the visible presentation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\n# {frontmatter.title}\n\n<Lede>{frontmatter.description}</Lede>\n\n<RichCardGrid cards={posts} category=\"design\" />\n```\n\n----------------------------------------\n\nTITLE: Migrating Badge status prop to tone\nDESCRIPTION: Command to update the Badge component's 'status' prop to 'tone' using polaris-migrator codemod tool\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Badge --fromProp status --toProp tone \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-AlphaFilters CSS Class Overrides\nDESCRIPTION: This CSS snippet assists in locating Polaris-AlphaFilters CSS class overrides for ensuring each is updated post-migration to the new Filters component.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_58\n\nLANGUAGE: css\nCODE:\n```\nPolaris-AlphaFilters\n```\n\n----------------------------------------\n\nTITLE: Executing Automated Token Migration with Polaris Migrator\nDESCRIPTION: Shell commands for running automated token migrations using the Polaris migrator tool, staging changes, formatting files, and committing the results.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\n# Example migration\nnpx @shopify/polaris-migrator ...\n# Stage all migrated files\ngit add .\n# Format staged files only\ngit diff --staged --name-only | xargs npx prettier --write\n# Commit automated migrations\ngit commit -m \"Migrate X custom properties from Polaris v10 to v11\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Content with LayoutSection Component (JSX)\nDESCRIPTION: This snippet uses the Polaris 'LayoutSection' React component, likely with a 'card' style, to define a distinct section within the documentation page layout. It acts as a container for related content like text and examples.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LayoutSection card>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n</LayoutSection>\n```\n\n----------------------------------------\n\nTITLE: Font Token Structure in CSS\nDESCRIPTION: Structure for font-related tokens that define properties like family, size, and line height with various scale values or aliases.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n--p-font-[property]-[alias-or-scale]\n```\n\n----------------------------------------\n\nTITLE: Migrating v11 Z-Index Custom Properties (Diff/Shell)\nDESCRIPTION: Illustrates the code change and command for the `v11-styles-replace-custom-property-zindex` migration. This replaces deprecated z-index CSS custom properties like `--p-z-1` with their v11 equivalents, such as `--p-z-index-1`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- z-index: var(--p-z-1);\n+ z-index: var(--p-z-index-1);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-zindex <path>\n```\n\n----------------------------------------\n\nTITLE: Migrating v11 Depth Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code change and command for the `v11-styles-replace-custom-property-depth` migration. This replaces the deprecated `--p-shadow-transparent` CSS custom property with its equivalent static value `0 0 0 0 transparent`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- box-shadow: var(--p-shadow-transparent);\n+ box-shadow: 0 0 0 0 transparent;\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-depth <path>\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-tokenize-space Migration\nDESCRIPTION: Command to execute the v9-styles-tokenize-space migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_53\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-tokenize-space <path>\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Z-Index Function with Polaris Z-Index Tokens\nDESCRIPTION: This snippet shows how to replace the old SCSS z-index() function with corresponding Polaris z-index tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_44\n\nLANGUAGE: diff\nCODE:\n```\n- .decl-1 {\n-   z-index: z-index(content);\n- }\n- .decl-2 {\n-   z-index: z-index(modal, $fixed-element-stacking-order)\n- }\n+ decl-1 {\n+   z-index: var(--p-z-1);\n+ }\n+ .decl-2 {\n+   z-index: var(--p-z-11)\n+ }\n```\n\n----------------------------------------\n\nTITLE: Example of IndexTable.Row status to tone migration\nDESCRIPTION: Diff showing the changes required for migrating from status=\"success\" to tone=\"success\" in the IndexTable.Row component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n- <IndexTable.Row status=\"success\" />\n+ <IndexTable.Row tone=\"success\" />\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Tooltip borderRadius Prop (Regex)\nDESCRIPTION: This regular expression helps identify instances where the `borderRadius` prop is used on the Polaris `<Tooltip>` component, which may be outdated after the v12 style migration. It's part of the post-migration validation process.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_93\n\nLANGUAGE: regex\nCODE:\n```\n<Tooltip[^>\\w](?:[^>]|\\n)*?borderRadius\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Polaris `CustomProperties` for Dark Mode Styling\nDESCRIPTION: Illustrates how to replace the deprecated `CustomProperties` component from `@shopify/polaris-react` when maintaining a dark UI. Instead of wrapping children with `<CustomProperties colorScheme=\"dark\">`, it shows applying dark theme styles by setting a light token (`--p-surface`) to its dark equivalent (`--p-surface-dark`) using an inline style on a wrapping `div`. This is an alternative if directly updating component styles is difficult.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v9-to-v10.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import {CustomProperties} from '@shopify/polaris-react';\n\nconst App = (props) => (\n-  <CustomProperties colorScheme=\"dark\">\n-    {props.children}\n-  </CustomProperties>\n+  <div style={{ '--p-surface': 'var(--p-surface-dark)' }}>\n+    {props.children}\n+  </div>\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Modal FullScreen Prop to Size in Bash\nDESCRIPTION: Updates 'fullScreen' boolean prop to a 'size' prop with the value 'fullScreen' for the Modal component. Requires 'npx @shopify/polaris-migrator'. Finds files with the specified extensions .ts and .tsx.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Modal --fromPropType boolean --fromProp fullScreen --toProp size --toValue fullScreen \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Migrating v11 Motion Custom Properties (Diff/Shell)\nDESCRIPTION: Shows the code change and command for the `v11-styles-replace-custom-property-motion` migration. This replaces deprecated motion-related CSS custom properties like `--p-linear` with their v11 equivalents, such as `--p-motion-linear`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- transition-timing-function: var(--p-linear);\n+ transition-timing-function: var(--p-motion-linear);\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-motion <path>\n```\n\n----------------------------------------\n\nTITLE: Comparing Modern Typography Components with Legacy Sass Mixins in Shopify Polaris\nDESCRIPTION: This snippet demonstrates the preferred use of modern Text components with props for text manipulation, contrasting it with the deprecated Sass mixin approach. It encourages the use of 'breakWord' and 'truncate' props on the Text component instead of the old '@include' syntax.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/typography-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Do\n<Text breakWord truncate />\n// Don't\n@include text-breakword;\n@include truncate;\n```\n\n----------------------------------------\n\nTITLE: Example of Icon backdrop prop replacement with Box\nDESCRIPTION: Diff showing how to replace the deprecated backdrop prop with a Box component in the new Polaris design language.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon source={CirclePlusMinor} color={iconColor} backdrop />\n+ <Box background={boxBackground} padding=\"100\" width=\"28px\" borderRadius=\"full\">\n+  <Icon source={CirclePlusMinor} color={iconColor} />\n+ </Box>\n```\n\n----------------------------------------\n\nTITLE: Installing Updated React Dependencies\nDESCRIPTION: This snippet provides commands to install the updated peer dependencies for react and react-dom using either yarn or npm.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn add react react-dom\n\n# npm\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Updating CDN Stylesheet URL for Polaris\nDESCRIPTION: This snippet demonstrates how to update the Polaris stylesheet URL from the old `sdks.shopifycdn.com` to the new `unpkg.com` location. Replace your current stylesheet link with the new link to utilize the latest Polaris CSS styles. Ensure the new URL points to the correct version.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- old -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://sdks.shopifycdn.com/polaris/3.21.1/polaris.min.css\"\n/>\n\n<!-- new -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://unpkg.com/@shopify/polaris@4.0.0/styles.min.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Avatar Size Migration Example\nDESCRIPTION: Example of updating Avatar size prop values to new format\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Avatar size=\"extraSmall\" />\n- <Avatar size=\"small\" />\n- <Avatar size=\"medium\" />\n- <Avatar size=\"large\" />\n- <Avatar size=\"xl-experimental\" />\n- <Avatar size=\"2xl-experimental\" />\n+ <Avatar size=\"xs\" />\n+ <Avatar size=\"sm\" />\n+ <Avatar size=\"md\" />\n+ <Avatar size=\"lg\" />\n+ <Avatar size=\"xl\" />\n+ <Avatar size=\"xl\" />\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderInlineStartWidth Prop (Regex)\nDESCRIPTION: This regex pattern is used to validate the migration by searching for `borderInlineStartWidth` props on Polaris `<Box>` components, which might use deprecated values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_102\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderInlineStartWidth\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for HorizontalStack Rename\nDESCRIPTION: This command runs the Polaris migrator to rename the HorizontalStack component to InlineStack.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component --renameFrom HorizontalStack --renameTo InlineStack --renamePropsFrom HorizontalStackProps --renamePropsTo InlineStackProps \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying a Negative Example with Medium Component (JSX)\nDESCRIPTION: This snippet employs the Polaris 'Medium' React component with a 'dont' variant to display a discouraged practice. It includes a Markdown image link showing a jarring or visually competitive color role combination to avoid.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Medium variant=\"dont\">\n      ![Tabs in an index table with different badges of different colors being used in each tab label](/images/design/colors/color-using-color-combining-dont@2x.png)\n\n      Avoid creating color role combinations that look too jarring or that create visual competition between elements.\n\n  </Medium>\n```\n\n----------------------------------------\n\nTITLE: Mapping Polaris Surface and Interaction CSS Custom Properties\nDESCRIPTION: Defines aliases for Shopify Polaris CSS custom properties related to surfaces (primary, neutral, highlight, critical, attention), interactions, shadows, and overlays. Each property (e.g., `--p-surface-primary-selected-pressed`) is mapped to a corresponding base color variable (e.g., `--p-color-bg-primary-subdued-active`) or a specific RGBA value, ensuring consistent application of the design system's color palette across different UI states and components.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_77\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-primary-selected-pressed`   | `--p-color-bg-primary-subdued-active`                                                                                                                                                                                                                                      |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-primary-selected-hovered`   | `--p-color-bg-primary-subdued-hover`                                                                                                                                                                                                                                       |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-primary-selected`           | `--p-color-bg-primary-subdued-selected`                                                                                                                                                                                                                                    |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-pressed-dark`               | `--p-color-bg-inverse-active`                                                                                                                                                                                                                                              |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-pressed`                    | `--p-color-bg-active`                                                                                                                                                                                                                                                      |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-neutral-subdued-dark`       | `--p-color-bg-inverse`                                                                                                                                                                                                                                                     |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-neutral-subdued`            | `--p-color-bg-subdued`                                                                                                                                                                                                                                                     |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-neutral-pressed`            | `--p-color-bg-strong-active`                                                                                                                                                                                                                                               |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-neutral-hovered`            | `--p-color-bg-strong-hover`                                                                                                                                                                                                                                                |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-neutral-disabled`           | `--p-color-bg-disabled`                                                                                                                                                                                                                                                    |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-neutral`                    | `--p-color-bg-strong`                                                                                                                                                                                                                                                      |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-hovered-dark`               | `--p-color-bg-inverse-hover`                                                                                                                                                                                                                                               |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-hovered`                    | `--p-color-bg-hover`                                                                                                                                                                                                                                                       |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-highlight-subdued-pressed`  | `--p-color-bg-info-subdued-active`                                                                                                                                                                                                                                         |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-highlight-subdued-hovered`  | `--p-color-bg-info-subdued-hover`                                                                                                                                                                                                                                          |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-highlight-subdued`          | `--p-color-bg-info-subdued`                                                                                                                                                                                                                                                |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-highlight`                  | `--p-color-bg-info`                                                                                                                                                                                                                                                        |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-disabled`                   | `--p-color-bg-disabled`                                                                                                                                                                                                                                                    |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-depressed`                  | `--p-color-bg-inset`                                                                                                                                                                                                                                                       |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-dark`                       | `--p-color-bg-inverse`                                                                                                                                                                                                                                                     |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-critical-subdued-pressed`   | `--p-color-bg-critical-subdued-active`                                                                                                                                                                                                                                     |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-critical-subdued-hovered`   | `--p-color-bg-critical-subdued-hover`                                                                                                                                                                                                                                      |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-critical-subdued-depressed` | `--p-color-bg-critical`                                                                                                                                                                                                                                                    |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-critical-subdued`           | `--p-color-bg-critical-subdued`                                                                                                                                                                                                                                            |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-critical`                   | `--p-color-bg-critical`                                                                                                                                                                                                                                                    |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface-attention`                  | `--p-color-bg-caution`                                                                                                                                                                                                                                                     |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-surface`                            | `--p-color-bg`                                                                                                                                                                                                                                                             |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-shadow-color-picker-dragger`        | `rgba(33, 43, 54, 0.32)`                                                                                                                                                                                                                                                   |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-shadow-color-picker`                | `rgba(0, 0, 0, 0.5)`                                                                                                                                                                                                                                                       |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-overlay`                            | `rgba(255, 255, 255, 0.5)`                                                                                                                                                                                                                                                 |\n```\n\nLANGUAGE: css\nCODE:\n```\n| `--p-interactive-pressed-on-dark`        | `--p-color-text-interactive-inverse`                                                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Import for Polaris Tokens\nDESCRIPTION: This diff demonstrates how to update the import of JSON token files to use the 'themes' object and JSON.stringify in Polaris v11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_142\n\nLANGUAGE: diff\nCODE:\n```\n- const color = require('@shopify/polaris-tokens/json/color.json');\n+ const {themes} = require('@shopify/polaris-tokens');\n+ const color = JSON.stringify(themes.light.color);\n```\n\n----------------------------------------\n\nTITLE: Updating v11 Page Breadcrumbs Prop (Diff/Shell)\nDESCRIPTION: Illustrates the code change and command for the `v11-react-update-page-breadcrumbs` migration. This replaces the legacy `breadcrumbs` prop on the React `Page` component with the new `backAction` prop, which expects a `LinkAction` object.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- <Page breadcrumbs={[{url: '/testing', content: 'Home'}]}>\n+ <Page backAction={{url: '/testing', content: 'Home'}}>\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-react-update-page-breadcrumbs <path>\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-replace-custom-property-border Migration\nDESCRIPTION: Command to execute the v9-styles-replace-custom-property-border migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-replace-custom-property-border <path>\n```\n\n----------------------------------------\n\nTITLE: Replacing Border Custom Properties with v9-styles-replace-custom-property-border\nDESCRIPTION: This migration replaces deprecated border CSS custom properties with corresponding replacement values (either a different Polaris custom property or a static value).\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n- border-radius: var(--p-border-radius-base);\n+ border-radius: var(--p-border-radius-1);\n\n- border-radius: var(--p-text-field-focus-ring-border-radius);\n+ border-radius: 7px;\n```\n\n----------------------------------------\n\nTITLE: Replacing State Mixins in SCSS\nDESCRIPTION: This snippet substitutes the deprecated `@include state()` mixins with direct CSS properties. The specific states such as hover, focused, and active have their respective CSS gradient or box-shadow properties provided. Dependencies include having defined variables like `--p-focused`. It aims to help developers replace state-based styling with equivalent styles directly in SCSS.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_10\n\nLANGUAGE: scss\nCODE:\n```\nbox-shadow: inset 2px 0 0 var(--p-focused);\\nbackground-image: linear-gradient(\\n  rgba(223, 227, 232, 0.3),\\n  rgba(223, 227, 232, 0.3)\\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box outlineWidth Prop (Regex)\nDESCRIPTION: This regex pattern helps identify the usage of the `outlineWidth` prop on Polaris `<Box>` components, which might be related to deprecated border width tokens and require validation after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_104\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?outlineWidth\n```\n\n----------------------------------------\n\nTITLE: Replacing Font Family Functions with CSS Custom Properties in SCSS\nDESCRIPTION: This snippet demonstrates how to replace deprecated font-family() functions with their equivalent CSS custom properties for sans-serif and monospace fonts.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_7\n\nLANGUAGE: scss\nCODE:\n```\nfont-family():\nfont-family($family: base): --p-font-family-sans\n```\n\nLANGUAGE: scss\nCODE:\n```\nfont-family($family: 'monospace'): --p-font-family-mono\n```\n\n----------------------------------------\n\nTITLE: Running v11-styles-replace-custom-property-border Migration\nDESCRIPTION: Shell command to run the Polaris migrator tool for updating deprecated border tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-border <path>\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-tokenize-motion Migration\nDESCRIPTION: Command to execute the v9-styles-tokenize-motion migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-tokenize-motion <path>\n```\n\n----------------------------------------\n\nTITLE: Comparing Allowed and Disallowed Typography Usage in React and CSS\nDESCRIPTION: This snippet demonstrates the preferred modern approaches for typography in React components and CSS, contrasting them with the deprecated Sass function method. It showcases the use of the Text component and CSS custom properties as alternatives to the legacy font-size() function.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/typography-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Do\n<Text variant=\"headingXs\" as=\"p\" />\n```\n\nLANGUAGE: css\nCODE:\n```\n// Do\nfont-size: var(--p-font-size-300);\n```\n\nLANGUAGE: scss\nCODE:\n```\n// Don't\nfont-size: font-size('caption');\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for AlphaFilters\nDESCRIPTION: This shell command helps rename AlphaFilters to Filters using the @shopify/polaris-migrator tool, with the prerequisite that all Filters instances have been transitioned to LegacyFilters first.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"AlphaFilters\" --renameTo=\"Filters\" --renamePropsFrom=\"AlphaFiltersProps\" --renamePropsTo=\"FiltersProps\"\n```\n\n----------------------------------------\n\nTITLE: Updating Style Import Paths\nDESCRIPTION: Shows the required changes for importing Polaris styles, including updates to CSS and SCSS import paths.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v4-to-v5.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import '@shopify/polaris/styles.css';\n+ import '@shopify/polaris/dist/styles.css';\n\n- import '@shopify/polaris/styles.min.css';\n+ import '@shopify/polaris/dist/styles.css';\n\n- @import 'path_to_node_modules/@shopify/polaris/styles';\n+ @import 'path_to_node_modules/@shopify/polaris/dist/styles.css';\n+ /* Optional - only needed if you use our mixins/functions */\n+ @import 'path_to_node_modules/@shopify/polaris/dist/styles/public-api';\n```\n\n----------------------------------------\n\nTITLE: Migrating Icon color prop to tone with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating all Icon component's color props to tone across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Icon --fromProp color --toProp tone \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Using LayoutSection Component in Polaris JSX\nDESCRIPTION: This snippet demonstrates the usage of the `<LayoutSection>` component, likely within the Polaris design system. The `card` prop suggests it's used to define a section within a Card component, providing structure and potentially specific styling or spacing associated with card sections.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LayoutSection card>\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Border Width CSS Variable (Diff Example)\nDESCRIPTION: This diff illustrates replacing the deprecated Polaris custom property `--p-border-width-1` with its v12 replacement `--p-border-width-025` as part of the border property migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_90\n\nLANGUAGE: diff\nCODE:\n```\n- border-width: var(--p-border-width-1);\n+ border-width: var(--p-border-width-025);\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Banner textColor Prop\nDESCRIPTION: Regular expression to check for outdated usage of the textColor prop in Banner components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_124\n\nLANGUAGE: regex\nCODE:\n```\n<Banner[^>\\w](?:[^>]|\\n)*?textColor\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the content fundamentals page, including title, description, icon, and SEO keywords.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/fundamentals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Fundamentals\ndescription: Designing content for experiences\nicon: TextInColumnsIcon\norder: 1\nkeywords:\n  - content standards\n  - content guidelines\n  - content strategy practices\n  - interface content\n  - strategic language\n  - edit content\n  - editing content\n  - reading level\n  - writes\n  - writing\n  - writing tips\n  - language tips\n  - content tips\n  - designing\n  - strategic designing\n  - action\n  - consistency\n  - consistent\n  - writing public-facing text\n  - public-facing text\n  - writing public-facing copy\n  - public-facing copy\n  - writing public-facing content\n  - public-facing content\n---\n```\n\n----------------------------------------\n\nTITLE: Running Migration Tests with npx (shell)\nDESCRIPTION: This shell command runs the migration test suite for the 'polaris-migrator' package using Turbo, specifically targeting the 'v9-scss-replace-function' test file. It assumes Node.js, turbo, and the relevant package setup are installed in the workspace. The output ensures migration logic works as expected on sample SCSS fixtures.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_77\n\nLANGUAGE: shell\nCODE:\n```\nnpx turbo run test --filter=polaris-migrator -- v9-scss-replace-function\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris v12\nDESCRIPTION: NPM/Yarn commands for upgrading to Polaris v12\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/polaris@12\n# or\nyarn add @shopify/polaris@12\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for Stack\nDESCRIPTION: This shell command automates the migration of the Stack component to LegacyStack using the @shopify/polaris-migrator tool. It requires specifying the project path and provides options to rename component and prop names accordingly.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"Stack\" --renameTo=\"LegacyStack\" --renamePropsFrom=\"StackProps\" --renamePropsTo=\"LegacyStackProps\"\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator Codemod for Color Migration Step 2\nDESCRIPTION: This command executes the Polaris Migrator codemod to replace custom property colors in CSS and SCSS files for step 2 of the migration process.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_117\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-color \"**/*.{css,scss}\" --step=2\n```\n\n----------------------------------------\n\nTITLE: Generic Custom Property Replacement with styles-replace-custom-property\nDESCRIPTION: A generic codemod to replace CSS custom properties with mapped values. This can be used with individual property flags or with a mapping file for multiple properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_64\n\nLANGUAGE: diff\nCODE:\n```\n- color: var(--p-text);\n+ color: var(--p-color-text);\n\n- animation-duration: var(--p-fast);\n+ animation-duration: 100ms;\n```\n\n----------------------------------------\n\nTITLE: Mapping Legacy Polaris Icons to New Icons in Markdown\nDESCRIPTION: This Markdown table provides a direct mapping from legacy Shopify Polaris icon component names (first column) to their corresponding new icon component names (second column). Legacy icons often had `Major` and `Minor` variants which typically map to the same new icon component. This table is used as a reference for updating codebases using older Polaris versions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `BillingStatementYenFilledMajor`    | `ReceiptYenFilledIcon`          |\n| `BillingStatementYenFilledMinor`    | `ReceiptYenFilledIcon`          |\n| `BillPayMajor`                      | `ReceiptFoldedIcon`             |\n| `BillPayMinor`                      | `ReceiptFoldedIcon`             |\n| `BillPayFilledMajor`                | `ReceiptFoldedFilledIcon`       |\n| `BillPayFilledMinor`                | `ReceiptFoldedFilledIcon`       |\n| `BlockMajor`                        | `LayoutBlockIcon`               |\n| `BlockMinor`                        | `LayoutBlockIcon`               |\n| `BlockquoteMajor`                   | `TextQuoteIcon`                 |\n| `BlockquoteMinor`                   | `TextQuoteIcon`                 |\n| `BlogMajor`                         | `BlogIcon`                      |\n| `BlogMinor`                         | `BlogIcon`                      |\n| `BoldMajor`                         | `TextBoldIcon`                  |\n| `BoldMinor`                         | `TextBoldIcon`                  |\n| `BugMajor`                          | `BugIcon`                       |\n| `BugMinor`                          | `BugIcon`                       |\n| `ButtonMajor`                       | `ButtonIcon`                    |\n| `ButtonMinor`                       | `ButtonIcon`                    |\n| `ButtonCornerPillMajor`             | `CornerPillIcon`                |\n| `ButtonCornerPillMinor`             | `CornerPillIcon`                |\n| `ButtonCornerRoundedMajor`          | `CornerRoundIcon`               |\n| `ButtonCornerRoundedMinor`          | `CornerRoundIcon`               |\n| `ButtonCornerSquareMajor`           | `CornerSquareIcon`              |\n| `ButtonCornerSquareMinor`           | `CornerSquareIcon`              |\n| `BuyButtonMajor`                    | `ButtonPressIcon`               |\n| `BuyButtonMinor`                    | `ButtonPressIcon`               |\n| `BuyButtonButtonLayoutMajor`        | `LayoutBuyButtonIcon`           |\n| `BuyButtonButtonLayoutMinor`        | `LayoutBuyButtonIcon`           |\n| `BuyButtonHorizontalLayoutMajor`    | `LayoutBuyButtonHorizontalIcon` |\n| `BuyButtonHorizontalLayoutMinor`    | `LayoutBuyButtonHorizontalIcon` |\n| `BuyButtonVerticalLayoutMajor`      | `LayoutBuyButtonVerticalIcon`   |\n| `BuyButtonVerticalLayoutMinor`      | `LayoutBuyButtonVerticalIcon`   |\n| `CalendarMajor`                     | `CalendarIcon`                  |\n| `CalendarMinor`                     | `CalendarIcon`                  |\n| `CalendarTickMajor`                 | `CalendarCheckIcon`             |\n| `CalendarTickMinor`                 | `CalendarCheckIcon`             |\n| `CalendarTimeMajor`                 | `CalendarTimeIcon`              |\n| `CalendarTimeMinor`                 | `CalendarTimeIcon`              |\n| `CameraMajor`                       | `CameraIcon`                    |\n| `CameraMinor`                       | `CameraIcon`                    |\n| `CancelMajor`                       | `XIcon`                         |\n| `CancelMinor`                       | `XIcon`                         |\n| `CancelSmallMajor`                  | `XSmallIcon`                    |\n| `CancelSmallMinor`                  | `XSmallIcon`                    |\n| `CapitalMajor`                      | `FlowerIcon`                    |\n| `CapitalMinor`                      | `FlowerIcon`                    |\n| `CapitalFilledMajor`                | `FlowerFilledIcon`              |\n| `CapitalFilledMinor`                | `FlowerFilledIcon`              |\n| `CapturePaymentMajor`               | `PaymentCaptureIcon`            |\n| `CapturePaymentMinor`               | `PaymentCaptureIcon`            |\n| `CardReaderMajor`                   | `CreditCardReaderIcon`          |\n| `CardReaderMinor`                   | `CreditCardReaderIcon`          |\n| `CardReaderChipMajor`               | `CreditCardReaderChipIcon`      |\n| `CardReaderChipMinor`               | `CreditCardReaderChipIcon`      |\n| `CardReaderTapMajor`                | `CreditCardReaderTapIcon`       |\n| `CardReaderTapMinor`                | `CreditCardReaderTapIcon`       |\n| `CaretDownMajor`                    | `CaretDownIcon`                 |\n| `CaretDownMinor`                    | `CaretDownIcon`                 |\n| `CaretUpMajor`                      | `CaretUpIcon`                   |\n| `CaretUpMinor`                      | `CaretUpIcon`                   |\n| `CartMajor`                         | `CartIcon`                      |\n| `CartMinor`                         | `CartIcon`                      |\n| `CartDownMajor`                     | `CartDownIcon`                  |\n| `CartDownMinor`                     | `CartDownIcon`                  |\n| `CartDownFilledMajor`               | `CartDownFilledIcon`            |\n| `CartDownFilledMinor`               | `CartDownFilledIcon`            |\n| `CartFilledMajor`                   | `CartFilledIcon`                |\n| `CartFilledMinor`                   | `CartFilledIcon`                |\n| `CartUpMajor`                       | `CartUpIcon`                    |\n| `CartUpMinor`                       | `CartUpIcon`                    |\n| `CashDollarMajor`                   | `CashDollarIcon`                |\n| `CashDollarMinor`                   | `CashDollarIcon`                |\n| `CashDollarFilledMajor`             | `CashDollarFilledIcon`          |\n| `CashDollarFilledMinor`             | `CashDollarFilledIcon`          |\n| `CashEuroMajor`                     | `CashEuroIcon`                  |\n| `CashEuroMinor`                     | `CashEuroIcon`                  |\n| `CashPoundMajor`                    | `CashPoundIcon`                 |\n| `CashPoundMinor`                    | `CashPoundIcon`                 |\n| `CashRupeeMajor`                    | `CashRupeeIcon`                 |\n| `CashRupeeMinor`                    | `CashRupeeIcon`                 |\n| `CashYenMajor`                      | `CashYenIcon`                   |\n| `CashYenMinor`                      | `CashYenIcon`                   |\n| `CategoriesMajor`                   | `CategoriesIcon`                |\n| `CategoriesMinor`                   | `CategoriesIcon`                |\n| `ChannelsMajor`                     | `ChannelsIcon`                  |\n| `ChannelsMinor`                     | `ChannelsIcon`                  |\n| `ChatMajor`                         | `ChatIcon`                      |\n| `ChatMinor`                         | `ChatIcon`                      |\n| `ChecklistMajor`                    | `ClipboardCheckIcon`            |\n| `ChecklistMinor`                    | `ClipboardCheckIcon`            |\n| `ChecklistAlternateMajor`           | `ClipboardChecklistIcon`        |\n| `ChecklistAlternateMinor`           | `ClipboardChecklistIcon`        |\n| `CheckoutMajor`                     | `CartIcon`                      |\n| `CheckoutMinor`                     | `CartIcon`                      |\n| `ChevronDownMajor`                  | `ChevronDownIcon`               |\n| `ChevronDownMinor`                  | `ChevronDownIcon`               |\n| `ChevronLeftMajor`                  | `ChevronLeftIcon`               |\n| `ChevronLeftMinor`                  | `ChevronLeftIcon`               |\n| `ChevronRightMajor`                 | `ChevronRightIcon`              |\n| `ChevronRightMinor`                 | `ChevronRightIcon`              |\n| `ChevronUpMajor`                    | `ChevronUpIcon`                 |\n| `ChevronUpMinor`                    | `ChevronUpIcon`                 |\n| `CircleAlertMajor`                  | `AlertCircleIcon`               |\n| `CircleAlertMinor`                  | `AlertCircleIcon`               |\n| `CircleCancelMajor`                 | `XCircleIcon`                   |\n| `CircleCancelMinor`                 | `XCircleIcon`                   |\n| `CircleChevronDownMajor`            | `CircleChevronDownIcon`         |\n| `CircleChevronDownMinor`            | `CircleChevronDownIcon`         |\n| `CircleChevronLeftMajor`            | `CircleChevronLeftIcon`         |\n| `CircleChevronLeftMinor`            | `CircleChevronLeftIcon`         |\n| `CircleChevronRightMajor`           | `CircleChevronRightIcon`        |\n| `CircleChevronRightMinor`           | `CircleChevronRightIcon`        |\n| `CircleChevronUpMajor`              | `CircleChevronUpIcon`           |\n| `CircleChevronUpMinor`              | `CircleChevronUpIcon`           |\n| `CircleDisabledMajor`               | `DisabledIcon`                  |\n| `CircleDisableMinor`                | `DisabledIcon`                  |\n| `CircleDotsMajor`                   | `MenuHorizontalIcon`            |\n| `CircleDotsMinor`                   | `MenuHorizontalIcon`            |\n| `CircleDownMajor`                   | `CircleDownIcon`                |\n| `CircleDownMinor`                   | `CircleDownIcon`                |\n| `CircleInformationMajor`            | `InfoIcon`                      |\n| `CircleInformationMinor`            | `InfoIcon`                      |\n| `CircleLeftMajor`                   | `CircleLeftIcon`                |\n| `CircleLeftMinor`                   | `CircleLeftIcon`                |\n| `CircleMinusMajor`                  | `MinusCircleIcon`               |\n| `CircleMinusMinor`                  | `MinusCircleIcon`               |\n| `CircleMinusOutlineMajor`           | `MinusCircleIcon`               |\n| `CircleMinusOutlineMinor`           | `MinusCircleIcon`               |\n| `CirclePlusMajor`                   | `PlusCircleIcon`                |\n| `CirclePlusMinor`                   | `PlusCircleIcon`                |\n| `CirclePlusOutlineMajor`            | `PlusCircleIcon`                |\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Shopify Polaris Content Page\nDESCRIPTION: This snippet defines the frontmatter for a Markdown file in the Shopify Polaris documentation. It specifies the title, order, description, and icon for the Content page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Content\norder: 4\ndescription: How to use content to build a world-class user experience\nicon: TextAlignmentLeftIcon\n---\n```\n\n----------------------------------------\n\nTITLE: Replacing High Contrast Border Mixin with CSS Custom Properties in SCSS\nDESCRIPTION: This snippet demonstrates how to replace the deprecated high-contrast-border mixin with CSS custom properties for border styles.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_9\n\nLANGUAGE: scss\nCODE:\n```\n@include high-contrast-border: border: var(--p-border-width-1) solid transparent;\n```\n\nLANGUAGE: scss\nCODE:\n```\n@include high-contrast-border($border-width: <border-width>): border: <border-width> solid transparent;\n```\n\n----------------------------------------\n\nTITLE: CSS Class Name Examples in Card.scss\nDESCRIPTION: Examples of how different class name patterns are transformed in a Card.scss component file. Demonstrates the three main naming patterns: Pascal case matching filename, Pascal case subcomponents, and variation modifiers.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Generating styles.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.Card       -> .Polaris-Card\n.Section    -> .Polaris-Card__Section\n.Section-subdued -> .Polaris-Card__Section--subdued\n.subdued    -> .Polaris-Card--subdued\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Z-Index Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy z-index() function with z-index tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-z-index <path>\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Component for Untrusted SVG in React\nDESCRIPTION: This snippet shows how to update the Icon component when using untrusted SVG content by removing the untrusted prop and directly passing the SVG string to the source prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v3-to-v4.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// old\n<Icon\n  untrusted\n  source=\"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\"\n/>;\n\n// new\n<Icon source=\"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\" />;\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for Card\nDESCRIPTION: This shell command automates the migration of the Card component to LegacyCard using the @shopify/polaris-migrator tool. It necessitates specifying the project path and provides options for renaming the component and prop names.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"Card\" --renameTo=\"LegacyCard\" --renamePropsFrom=\"CardProps\" --renamePropsTo=\"LegacyCardProps\"\n```\n\n----------------------------------------\n\nTITLE: Replacing filter() with Equivalent CSS Filter String - JavaScript\nDESCRIPTION: This snippet demonstrates the deprecation of the filter() function used to obtain specific color variants and its recommended replacement with a hardcoded CSS filter string that achieves the same effect. The table documents various calls to filter(), showing the color and optional tone variant as arguments, and lists their direct string replacements. This approach assumes usage in a CSS-in-JS or style assignment context, where filter() was a JavaScript or utility function, and the replacement is a raw CSS filter value.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfilter('purple', 'text') // Deprecated usage\n// Replacement:\n// 'brightness(0) saturate(100%) invert(29%) sepia(3%) saturate(2843%) hue-rotate(223deg) brightness(92%) contrast(86%)'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfilter('blue') // Deprecated usage\n// Replacement:\n// 'brightness(0) saturate(100%) invert(19%) sepia(98%) saturate(2885%) hue-rotate(190deg) brightness(99%) contrast(101%)'\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for AlphaStack\nDESCRIPTION: This shell command facilitates renaming AlphaStack to VerticalStack using the @shopify/polaris-migrator tool, requiring specification of the project path and options for component and props renaming.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"AlphaStack\" --renameTo=\"VerticalStack\" --renamePropsFrom=\"AlphaStackProps\" --renamePropsTo=\"VerticalStackProps\"\n```\n\n----------------------------------------\n\nTITLE: Renaming VerticalStack to BlockStack in Bash\nDESCRIPTION: Command for renaming the component VerticalStack to BlockStack. This change aligns with new naming conventions. Utilizes 'npx @shopify/polaris-migrator' and processes applicable typescript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component --renameFrom VerticalStack --renameTo BlockStack --renamePropsFrom VerticalStackProps --renamePropsTo BlockStackProps \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Data Visualization Documentation\nDESCRIPTION: YAML configuration block defining metadata for the data visualization documentation page, including title, description, icon and keywords.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/data-visualizations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Data visualizations\ndescription: Visualizations surface patterns in data, and provide immediate answers to a single, specific question.\nicon: ChartVerticalIcon\norder: 8\nkeywords:\n  - data viz\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Description in Markdown\nDESCRIPTION: This snippet shows how to display the description defined in the frontmatter of a Markdown file using a custom Lede component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-12.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Lede>{frontmatter.description}</Lede>\n```\n\n----------------------------------------\n\nTITLE: Running Stylelint\nDESCRIPTION: Commands to run Stylelint on CSS and SCSS files with and without auto-fixing.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx stylelint '**/*.{css,scss}'\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx stylelint --fix '**/*.{css,scss}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Visual Examples with Large Component in JSX\nDESCRIPTION: Utilizes the <Large> component to display visual examples, typically containing an image (`![]()`) and a caption. The `variant` prop (`do` or `dont`) visually classifies the example as a recommendation or an anti-pattern.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/layout/density.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Large variant=\"do\">\n  ![An index table with each row divided by a line](/images/design/layout/layout-density-01-high-density-do@2x.png)\n\n  Use divider lines and surface colors to create clear delineation between sections in a high density component.\n\n</Large>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Large variant=\"dont\">\n  ![A card split in the middle with packaging options on the left in a list and customer details on the right](/images/design/layout/layout-density-04-high-density-vertical-dont@2x.png)\n\n  Divide and organize surfaces vertically by creating columns of unrelated content.\n\n</Large>\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Specific Component in Shell\nDESCRIPTION: Shell command to run the Polaris migrator tool for a specific component (e.g., Heading) using the --componentName flag.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v10-react-replace-text-components --componentName='Heading' <path>\n```\n\n----------------------------------------\n\nTITLE: Updating ProgressBar Color Prop to Tone in Bash\nDESCRIPTION: Changes 'color' prop to 'tone' for ProgressBar components. Requires 'npx @shopify/polaris-migrator'. Processes typescript files with .ts and .tsx extensions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName ProgressBar --fromProp color --toProp tone \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Replacing `color-icon` Mixin with SCSS Styling\nDESCRIPTION: Provides an SCSS code example demonstrating how to replace the deprecated Polaris `@include color-icon(<value>, <hue>)` mixin. It involves applying `fill: color(<value>, <hue>)` to `svg` elements and `filter: filter(<value>, <hue>)` to `img` elements. Note that the `color()` and `filter()` functions used within this replacement snippet are themselves deprecated and require separate replacement according to their respective guidelines mentioned elsewhere in the document.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n```scss\nsvg {\n  fill: color(<value>, <hue>);\n}\n\nimg {\n  filter: filter(<value>, <hue>);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Icon Package\nDESCRIPTION: The snippet shows how to update import statements in a project following changes to the Shopify Polaris icons package. This is necessary after the removal of the internal icons package as dependencies from `package.json` are updated. Key dependencies include `@shopify/polaris-icons`. The expected input of this snippet is a diff file showing the changes made to import statements in the source code, resulting in updated imports that use the public package.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n-  FraudProtectMajorMonotone\n-} from '@shopify/polaris-icons-internal';\n+  FraudProtectMajor\n+} from '@shopify/polaris-icons';\n```\n\n----------------------------------------\n\nTITLE: Validating Token Migrations with Stylelint\nDESCRIPTION: Command for running stylelint-polaris to validate custom property migrations after completion.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\nnpx stylelint <path>\n```\n\n----------------------------------------\n\nTITLE: Regex for Outdated VerticalStack Component\nDESCRIPTION: Regex crafted to capture deprecated 'VerticalStack' component usage. Ensures seamless transition in naming conventions by identifying lingering instances.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_88\n\nLANGUAGE: regex\nCODE:\n```\nVerticalStack\n```\n\n----------------------------------------\n\nTITLE: Migrating v10 Color Custom Properties to v11\nDESCRIPTION: Migrates color-related CSS custom properties (variables) from the Polaris v10 structure to the new v11 structure. This is part of a larger upgrade and refactoring effort for the design system's foundations.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\ncolor` custom properties from Polaris `v10` to `v11\n```\n\n----------------------------------------\n\nTITLE: Updating i18n Translations Order in AppProvider\nDESCRIPTION: Demonstrates the change in order of translation dictionaries passed to AppProvider's i18n prop, now requiring preferred language first followed by fallback.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v4-to-v5.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport frTranslations from '@shopify/polaris/locales/fr.json';\n\nfunction App() {\n  return (\n    // French translations as the primary language, english as a fallback\n-    <AppProvider i18n={[enTranslations, frTranslations]}>\n+    <AppProvider i18n={[frTranslations, enTranslations]}>\n      {/* App content */}\n    </AppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for ButtonGroup Segmented Prop Update\nDESCRIPTION: This command runs the Polaris migrator to update the ButtonGroup component, replacing the 'segmented' prop with 'variant=\"segmented\"'.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName ButtonGroup --fromPropType boolean --fromProp segmented --toProp variant --toValue segmented \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Validating DisplayText Removal in CSS\nDESCRIPTION: Shows the CSS class name associated with the removed `DisplayText` component. Searching for this class helps identify potential CSS overrides that need updating after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nPolaris-DisplayText\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Token Groups from `@shopify/polaris-tokens`\nDESCRIPTION: Demonstrates the updated and preferred method for importing specific token groups like `depth` and `spacing` from the `@shopify/polaris-tokens` package. Instead of destructuring from the main imported `tokens` object, individual groups are now directly imported via named imports, allowing for better tree-shaking and potentially smaller application bundle sizes.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v9-to-v10.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import {tokens} from '@shopify/polaris-tokens';\n- const {depth, spacing} = tokens;\n\n+ import {depth, spacing} from '@shopify/polaris-tokens';\n```\n```\n\n----------------------------------------\n\nTITLE: Running Shadow Migration Step 1 Codemod\nDESCRIPTION: Command to execute the Polaris Migrator codemod for shadow token migration step 1, targeting CSS and SCSS files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_130\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-shadow \"**/*.{css,scss}\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Polaris Icons with Package Manager\nDESCRIPTION: Command to optimize SVG icons after adding them to the polaris-icons directory. This process likely minifies the SVG code and ensures it meets the project's standards for file size and formatting.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm optimize\n```\n\n----------------------------------------\n\nTITLE: Migrating Icon color=\"highlight\" to tone=\"info\" with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Icon component's color prop from \"highlight\" to tone=\"info\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Icon --fromProp color --toProp tone --fromValue highlight --toValue info \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris Icons with Yarn\nDESCRIPTION: Command to install the @shopify/polaris-icons package using Yarn package manager.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @shopify/polaris-icons\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Width Layout in Section with MDX\nDESCRIPTION: This snippet demonstrates how to create a full width layout section using the LayoutSection component with Text and Small components nested inside. The Small components are shown with 'do' and 'dont' variants.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/documentation/creating-layout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<LayoutSection>\n  <Text></Text>\n  <Small variant=\"do\"></Small>\n  <Small variant=\"dont\"></Small>\n</LayoutSection>\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component from Polaris React\nDESCRIPTION: TypeScript code to import the Icon component from the @shopify/polaris package.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Icon} from '@shopify/polaris';\n```\n\n----------------------------------------\n\nTITLE: Disabling Stylelint Rules Example\nDESCRIPTION: Diff showing how to disable Stylelint rules using inline comments.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ // stylelint-disable-next-line -- generated by polaris-migrator DO NOT COPY\npadding: 1rem;\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content with React Components\nDESCRIPTION: This code snippet demonstrates the use of custom React components within Markdown content. It includes the Lede component for rendering the page description and the DoDont component for displaying do's and don'ts examples.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/inclusive-language.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# {frontmatter.title}\n\n<Lede>{frontmatter.description}</Lede>\n\n<DoDont>\n\n#### Do\n\n![Setting toggle for abandoned carts with a status label that says \"On\". Action button is labeled \"Turn off\".](/images/content/inclusive-language/setting-toggle-do@2x.png)\n\n#### Don't\n\n![Setting toggle for abandoned carts with a status label that says \"Off\". Action button is labeled \"Turn on\".](/images/content/inclusive-language/setting-toggle-dont@2x.png)\n\n</DoDont>\n```\n\n----------------------------------------\n\nTITLE: Validating Breadcrumbs component prop removal using Regex\nDESCRIPTION: Provides a regular expression to search across all file types for any remaining instances of the deprecated `breadcrumbs` prop used within the `Breadcrumbs` component after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_8\n\nLANGUAGE: regex\nCODE:\n```\n<Breadcrumbs[^>\\w](?:[^>]|\\n)*?breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Border Properties (Bash)\nDESCRIPTION: This command executes the `@shopify/polaris-migrator` tool specifically for the `v12-styles-replace-custom-property-border` migration. It targets all CSS and SCSS files within the project (`**/*.{css,scss}`) to automatically replace deprecated border-related custom properties. Requires Node.js and npx.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_91\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-border \"**/*.{css,scss}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Imports With New Naming Convention - Shopify Polaris - diff\nDESCRIPTION: This diff snippet demonstrates how to update icon imports from the old 'Monotone', 'Twotone', and 'Filled' suffixes to the new unified naming convention without any style-specific suffixes. The changes involve removing the style suffixes in both the import statements and usage within React components. It is dependent on the '@shopify/polaris-icons' package, and is meant for projects migrating to Polaris Icons v4 or later. Inputs are the existing import and usage statements, and outputs are their updated forms following the new naming scheme. It is intended for TypeScript/JavaScript React projects using Polaris components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  DuplicateMinor,\n  ViewMinor,\n-  HomeMajorMonotone,\n-  CircleInformationMajorFilled,\n-  CircleInformationMajorTwotone,\n+  HomeMajor,\n+  CircleInformationMajor,\n} from '@shopify/polaris-icons';\n```\n\n----------------------------------------\n\nTITLE: Fixing Typo and Adjusting CSS Color Shades\nDESCRIPTION: Fixes a typographical error in the `yellow-100` color shade definition and lightens the `blue-100` shade. These adjustments correct and refine specific colors within the Polaris palette.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\nyellow-100\n```\n\nLANGUAGE: css\nCODE:\n```\nblue-100\n```\n\n----------------------------------------\n\nTITLE: Running Font Migration Step 4 Codemod\nDESCRIPTION: Command to execute the Polaris Migrator codemod for font size token migration step 4, targeting CSS and SCSS files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_127\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator v12-styles-replace-custom-property-font \"**/*.{css,scss}\" --step=4\n```\n\n----------------------------------------\n\nTITLE: Examples of Font Tokens in CSS\nDESCRIPTION: Examples of font tokens for family, size, and line height with different values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--p-font-family-sans\n--p-font-size-300\n--p-font-line-height-400\n```\n\n----------------------------------------\n\nTITLE: Migrating AppBridge Integration in React Components\nDESCRIPTION: Shows how to migrate from built-in AppBridge integration in Polaris components to using the separate @shopify/app-bridge-react package.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v4-to-v5.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old\nimport {AppProvider, Modal} from '@shopify/polaris';\n\nfunction MyApp() {\n  const config = {apiKey: '12345', shopOrigin: shopOrigin};\n\n  return (\n    <AppProvider apiKey={config.apiKey} shopOrigin={config.shopOrigin}>\n      <Modal /* ... *//>\n    </AppProvider>\n  );\n}\n\n\n// New\nimport {AppProvider} from '@shopify/polaris';\nimport {Provider, Modal} from '@shopify/app-bridge-react';\n\nfunction MyApp() {\n  const config = {apiKey: '12345', shopOrigin: shopOrigin};\n\n  return (\n    <AppProvider>\n      <Provider config={config}>\n        <Modal /* ... *//>\n      </Provider>\n    <AppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating IndexTable.Row subdued prop to tone with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating IndexTable.Row component's subdued prop to tone=\"subdued\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName IndexTable.Row --fromPropType boolean --fromProp subdued --toProp tone --toValue subdued \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Replacing ThemeProvider with CustomProperties in React\nDESCRIPTION: Demonstrates how to replace the deprecated ThemeProvider component with the new CustomProperties component, adjusting imports and props accordingly.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import {ThemeProvider} from '@shopify/polaris-react';\n+ import {CustomProperties} from '@shopify/polaris-react';\n\nconst App = (props) => (\n-  <ThemeProvider theme={{colorScheme: 'dark'}}>\n-    {props.children}\n-  </ThemeProvider>\n+  <CustomProperties colorScheme=\"dark\">\n+    {props.children}\n+  </CustomProperties>\n)\n```\n\n----------------------------------------\n\nTITLE: Automating Breadcrumbs component prop update using Shell\nDESCRIPTION: Provides the shell command to run the `@shopify/polaris-migrator` tool for automatically renaming the `breadcrumbs` prop to `backAction` within `Breadcrumbs` components across the specified project path.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component-prop --componentName=\"Breadcrumbs\" --from=\"breadcrumbs\" --to=\"backAction\" <path>\n```\n\n----------------------------------------\n\nTITLE: Manual Token Migration Workflow\nDESCRIPTION: Shell commands for handling manual token migrations, including staging changes, formatting files, and committing manual migrations.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_90\n\nLANGUAGE: shell\nCODE:\n```\n# Stage all manually migrated files\ngit add .\n# Format staged files only\ngit diff --staged --name-only | xargs npx prettier --write\n# Commit manual migrations\ngit commit -m \"Manually migrate X custom properties from Polaris v10 to v11\"\n```\n\n----------------------------------------\n\nTITLE: Box border radius props migration commands\nDESCRIPTION: Commands to update Box component's border radius props to align with CSS border radius constituent properties\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusEndStart --toProp borderEndStartRadius \"**/*.{ts,tsx}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusEndEnd --toProp borderEndEndRadius \"**/*.{ts,tsx}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusStartStart --toProp borderStartStartRadius \"**/*.{ts,tsx}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Box --fromProp borderRadiusStartEnd --toProp borderStartEndRadius \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Adding @deprecated warning to components in TypeScript React\nDESCRIPTION: Shows how to add a JSDoc @deprecated comment to a React component to indicate it's deprecated and suggest an alternative component to use instead.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Deprecation guidelines.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/** @deprecated Use the [COMPONENT_NAME] component instead */\nexport function ExampleComponent(props: ExampleComponentProps) {\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris Icons with npm\nDESCRIPTION: Command to install the @shopify/polaris-icons package using npm package manager.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/polaris-icons --save\n```\n\n----------------------------------------\n\nTITLE: Automating Page breadcrumbs prop update using Shell\nDESCRIPTION: Provides the shell command to run the specific `v11-react-update-page-breadcrumbs` migration script from `@shopify/polaris-migrator` to update the `breadcrumbs` prop to the new `backAction` structure within `Page` components across the specified project path.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v11-react-update-page-breadcrumbs <path>\n```\n\n----------------------------------------\n\nTITLE: Using Polaris Breakpoint Variables in Media Queries with Sass\nDESCRIPTION: This snippet demonstrates how to use the generated Polaris Sass variables for breakpoints within media queries in SCSS. It shows the syntax for implementing responsive styles at the `md` breakpoint for up, down, and only conditions. There are no additional dependencies except for the import of the breakpoint variables file, and the key parameter is the breakpoint size. The expected input is a valid SCSS environment, and the output is applied styles at specified responsive breakpoints.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/breakpoints.mdx#2025-04-22_snippet_0\n\nLANGUAGE: SCSS\nCODE:\n```\n@media #{$p-breakpoints-md-up} {/*...*/}\n@media #{$p-breakpoints-md-down} {/*...*/}\n@media #{$p-breakpoints-md-only} {/*...*/}\n```\n\n----------------------------------------\n\nTITLE: Validating Page breadcrumbs removal using Regex\nDESCRIPTION: Provides a regular expression to search across all file types for any remaining instances of the deprecated `breadcrumbs` prop used within the `Page` component after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\n<Page[^>\\w](?:[^>]|\\n)*?breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Border Radius CSS Variable (Diff Example)\nDESCRIPTION: This diff shows an example of replacing the deprecated Polaris custom property `--p-border-radius-1` with its v12 equivalent `--p-border-radius-100`. This is part of the border property migration process.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_89\n\nLANGUAGE: diff\nCODE:\n```\n- border-radius: var(--p-border-radius-1);\n+ border-radius: var(--p-border-radius-100);\n```\n\n----------------------------------------\n\nTITLE: Accessing Token Metadata in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the full metadata for each token group using the 'metadata' export. It shows how to retrieve both the value and description of a specific token.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-tokens-from-v5-to-v6.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {metadata} from '@shopify/polaris-tokens';\n\nconst {value, description} = metadata.colors.background;\n\nconsole.log(value);\n// \"rgba(246, 246, 247, 1)\"\n\nconsole.log(description);\n// \"For use as a background color, in components such as Page and Frame backgrounds.\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Token in JavaScript\nDESCRIPTION: Example of how to reference a color token in JavaScript after the removal of the 'Base' suffix in version 2.0.0.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ncolorPurple\n```\n\n----------------------------------------\n\nTITLE: Running Commands Across All Workspaces\nDESCRIPTION: List of commands that can be run across all workspaces in the Polaris monorepo using pnpm.\nSOURCE: https://github.com/shopify/polaris/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm changeset\npnpm lint\npnpm test\npnpm type-check\npnpm clean\npnpm format\n```\n\n----------------------------------------\n\nTITLE: Examples of Shadow Tokens in CSS\nDESCRIPTION: Examples of shadow tokens for different shadow styles including scaled values, inset shadows, and component-specific shadows with states.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n--p-shadow-100\n--p-shadow-inset-100\n--p-shadow-button\n--p-shadow-button-hover\n```\n\n----------------------------------------\n\nTITLE: Updating Sass Plugin Configuration for Sewing-Kit\nDESCRIPTION: Updates the Sass plugin's `autoInclude` option path for sewing-kit integrations due to the build process migration to `loom`. The path has changed from the dist directory to the build directory.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v6-to-v7.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nplugins.sass({\n  autoInclude: [\n-    path.join(__dirname, 'node_modules/@shopify/polaris/dist/styles/_public-api.scss'),\n+    path.join(__dirname, 'node_modules/@shopify/polaris/build/styles/_public-api.scss'),\n  ],\n })\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout.Section secondary prop to variant with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Layout.Section component's secondary prop to variant=\"oneThird\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Layout.Section --fromPropType boolean --fromProp secondary --toProp variant --toValue oneThird \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Page Component Props\nDESCRIPTION: Removing separator prop and renaming additionalMetaData to additionalMetadata in Page component.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v5-to-v6.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- <Page title=\"Settings\" separator>\n+ <Page title=\"Settings\">\n\n<Page\n  fullWidth\n- additionalMetaData=\"Created May 8, 2020 at 7:31 am from Developer Tools (via import)\"\n+ additionalMetadata=\"Created May 8, 2020 at 7:31 am from Developer Tools (via import)\"\n```\n\n----------------------------------------\n\nTITLE: Running the Polaris React Rename Component Tool for AlphaCard\nDESCRIPTION: This shell command automates renaming AlphaCard to Card using the @shopify/polaris-migrator, with the precondition that all Card instances have been remapped to LegacyCard.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renameFrom=\"AlphaCard\" --renameTo=\"Card\" --renamePropsFrom=\"AlphaCardProps\" --renamePropsTo=\"CardProps\"\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-replace-custom-property-motion Migration\nDESCRIPTION: Command to execute the v9-styles-replace-custom-property-motion migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_61\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-replace-custom-property-motion <path>\n```\n\n----------------------------------------\n\nTITLE: Adding New Magic Color Tokens\nDESCRIPTION: Introduces new CSS color tokens specifically related to 'Shopify Magic' features. This expands the color palette available for styling Magic-related UI elements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\nmagic tokens\n```\n\n----------------------------------------\n\nTITLE: Migrating TextField in Autocomplete Component\nDESCRIPTION: Updates the Autocomplete component implementation to use the new Autocomplete.TextField instead of the standard TextField due to the rebuild of Autocomplete using new Combobox and Listbox components.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v6-to-v7.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- textField={<TextField {...props} />}\n+ textField={<Autocomplete.TextField {...props} />}\n```\n\n----------------------------------------\n\nTITLE: Replacing Half Border Radius CSS Token\nDESCRIPTION: References the CSS token `--p-border-radius-half` which is being replaced by the newly introduced `--p-border-radius-full` token for managing border-radius values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n--p-border-radius-half\n```\n\n----------------------------------------\n\nTITLE: Search for Tabs Component Instances in React\nDESCRIPTION: This JSX snippet assists in post-migration validation to find any remaining Tabs component instances within a React project by searching for its JSX tag.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering a List of Border Tokens (JSX/JavaScript)\nDESCRIPTION: This snippet uses JSX and embedded JavaScript to dynamically render a list of border tokens. It wraps the list items within a `TokenList` component. The JavaScript `map` function iterates over the `tokens.border` array, rendering a `TokenList.Item` for each `token`. Each `TokenList.Item` receives a unique `key` based on `token.name`, a `category` prop set to \"border\", and the entire `token` object as a prop. It depends on `TokenList`, `TokenList.Item` components and the `tokens.border` data structure.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/border.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TokenList>\n  {tokens.border\n    .map((token) => (\n      <TokenList.Item\n        key={token.name}\n        category=\"border\"\n        token={token}\n      />\n    ))}\n</TokenList>\n```\n\n----------------------------------------\n\nTITLE: Loading Inter Web Font in HTML\nDESCRIPTION: This HTML code snippet shows how to load the Inter web font from Shopify's CDN, which is required for the new Polaris design language.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_138\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"preconnect\"\n  href=\"https://cdn.shopify.com/\"\n/>\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdn.shopify.com/static/fonts/inter/v4/styles.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Structuring Content Layout using Stack Component in MDX/JSX\nDESCRIPTION: This MDX snippet uses the `Stack` component (likely from the Polaris component library) to structure content. It wraps Markdown headings and list items, applying vertical spacing between them as defined by the `gap=\"400\"` prop. This component helps organize related content blocks, such as resource links, within the documentation page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Stack gap=\"400\">\n\n## Related resources\n\n- Programming timezones can be finicky. Get great tips in the article [UTC is for everyone right](https://zachholman.com/talk/utc-is-enough-for-everyone-right)?\n- Learn about date formatting in the [Grammar and mechanics](/content/grammar-and-mechanics#date) guidelines.\n- See how to craft effective button labels in the [Actionable language](/content/actionable-language) guidelines.\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Color Token Structure in CSS\nDESCRIPTION: Structure for color tokens with two variations: default tokens for general elements and specialty tokens for specific components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--p-color-[element]-[role?]-[prominence?]-[state?]\n--p-color-[specialty]-[variant?]-[default-token-structure]\n```\n\n----------------------------------------\n\nTITLE: Shadow Token Structure in CSS\nDESCRIPTION: Structure for shadow tokens that define box shadows with optional variants, scales, and states.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n--p-shadow-[variant?]-[alias-or-scale]-[state?]\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-replace-custom-property-legacy Migration\nDESCRIPTION: Command to execute the v9-styles-replace-custom-property-legacy migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-replace-custom-property-legacy <path>\n```\n\n----------------------------------------\n\nTITLE: Height Token Structure in CSS\nDESCRIPTION: Structure for height tokens that define consistent height values across the design system using a scale system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n--p-height-[alias-or-scale]\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Import Path for General Consumers\nDESCRIPTION: Updates the import path for compiled styles file due to the build process migration to `loom`. The path has changed from the dist directory to the build/esm directory.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v6-to-v7.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import '@shopify/polaris/dist/styles.css';\n+ import '@shopify/polaris/build/esm/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Migrating Modal small prop to size with polaris-migrator\nDESCRIPTION: Terminal command to run the polaris-migrator codemod for updating Modal component's small prop to size=\"small\" across TypeScript files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Modal --fromPropType boolean --fromProp small --toProp size --toValue small \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Token Values in JavaScript\nDESCRIPTION: This snippet illustrates the change in accessing token values directly without the 'value' property. It shows how to update the code to access the 'ease' property from the 'motion' object in the new token structure.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-tokens-from-v5-to-v6.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport {motion} from '@shopify/polaris-tokens';\n\n- const {ease} = motion.value;  // cubic-bezier(0.25, 0.1, 0.25, 1)\n+ const {ease} = motion;        // cubic-bezier(0.25, 0.1, 0.25, 1)\n```\n\n----------------------------------------\n\nTITLE: Renaming AlphaFilters to Filters using React\nDESCRIPTION: This migration snippet illustrates updating the AlphaFilters to Filters component, assuming all Filters instances are first migrated to LegacyFilters to solve compatibility concerns.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_55\n\nLANGUAGE: diff\nCODE:\n```\n- <AlphaFilters prop />\n+ <Filters prop />\n- export interface AlphaFiltersProps {}\n+ export interface FiltersProps {}\n```\n\n----------------------------------------\n\nTITLE: Creating New Component Command\nDESCRIPTION: Command to quickly create new components in the Polaris website.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create-component\n```\n\n----------------------------------------\n\nTITLE: Running the Z-index Property Migration Command (Shell)\nDESCRIPTION: Provides a shell command using '@shopify/polaris-migrator' to automatically upgrade deprecated z-index custom properties throughout a codebase. Accepts a file or directory path; outputs upgraded code matching new Polaris v11 standards. Assumes the migrator is available via npm or npx.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_87\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\nnpx @shopify/polaris-migrator v11-styles-replace-custom-property-zindex <path>\\n```\n```\n\n----------------------------------------\n\nTITLE: Examples of Height Tokens in CSS\nDESCRIPTION: Examples of height tokens with incremental scale values for consistent sizing.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n--p-height-100\n--p-height-200\n--p-height-300\n```\n\n----------------------------------------\n\nTITLE: Checking for remaining color custom properties using RegEx\nDESCRIPTION: A regular expression to identify any instances of 'colors' custom properties that may still exist across all file types after migration. This comprehensive pattern checks for a wide range of color-related custom properties used in the Shopify Polaris design system.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_70\n\nLANGUAGE: regex\nCODE:\n```\n--p-text-warning|--p-text-success|--p-text-subdued-on-dark|--p-text-subdued(?!-light|-neutral-light)|--p-text-primary-pressed|--p-text-primary-hovered|--p-text-primary|--p-text-on-primary|--p-text-on-interactive|--p-text-on-dark|--p-text-on-critical|--p-text-highlight|--p-text-disabled|--p-text-critical|--p-text(?!-field-spinner|-light|-subdued-light)|--p-surface-warning-subdued-pressed|--p-surface-warning-subdued-hovered|--p-surface-warning-subdued|--p-surface-warning|--p-surface-success-subdued-pressed|--p-surface-success-subdued-hovered|--p-surface-success-subdued|--p-surface-success|--p-surface-subdued|--p-surface-selected-pressed|--p-surface-selected-hovered|--p-surface-selected|--p-surface-search-field-dark|--p-surface-search-field|--p-surface-primary-selected-pressed|--p-surface-primary-selected-hovered|--p-surface-primary-selected|--p-surface-pressed-dark|--p-surface-pressed|--p-surface-neutral-subdued-dark|--p-surface-neutral-subdued|--p-surface-neutral-pressed|--p-surface-neutral-hovered|--p-surface-neutral-disabled|--p-surface-neutral(?!-light)|--p-surface-hovered-dark|--p-surface-hovered(?!-light)|--p-surface-highlight-subdued-pressed|--p-surface-highlight-subdued-hovered|--p-surface-highlight-subdued|--p-surface-highlight|--p-surface-disabled|--p-surface-depressed|--p-surface-dark|--p-surface-critical-subdued-pressed|--p-surface-critical-subdued-hovered|--p-surface-critical-subdued-depressed|--p-surface-critical-subdued|--p-surface-critical|--p-surface-attention|--p-surface(?!-hover|-interactive|-primary|-light|-neutral-light)|--p-shadow-color-picker-dragger|--p-shadow-color-picker|--p-overlay|--p-interactive-pressed-on-dark|--p-interactive-pressed|--p-interactive-on-dark|--p-interactive-hovered|--p-interactive-disabled|--p-interactive-critical-pressed|--p-interactive-critical-hovered|--p-interactive-critical-disabled|--p-interactive-critical|--p-interactive|--p-icon-warning|--p-icon-success|--p-icon-subdued|--p-icon-pressed|--p-icon-on-primary|--p-icon-on-interactive|--p-icon-on-dark|--p-icon-on-critical|--p-icon-hovered|--p-icon-highlight(?!--light)|--p-icon-disabled|--p-icon-critical|--p-icon-attention|--p-icon(?!-pinned|-hover|-light|-highlight--light)|--p-hint-from-direct-light|--p-focused|--p-divider-dark|--p-divider|--p-decorative-two-text|--p-decorative-two-surface|--p-decorative-two-icon|--p-decorative-three-text|--p-decorative-three-surface|--p-decorative-three-icon|--p-decorative-one-text|--p-decorative-one-surface|--p-decorative-one-icon|--p-decorative-four-text|--p-decorative-four-surface|--p-decorative-four-icon|--p-decorative-five-text|--p-decorative-five-surface|--p-decorative-five-icon|--p-border-warning-subdued|--p-border-warning|--p-border-success-subdued|--p-border-success|--p-border-subdued|--p-border-shadow-subdued|--p-border-shadow|--p-border-on-dark|--p-border-neutral-subdued|--p-border-hovered|--p-border-highlight-subdued|--p-border-highlight|--p-border-disabled|--p-border-depressed|--p-border-critical-subdued|--p-border-critical-disabled|--p-border-critical|--p-border(?!-width|-radius|-base|-dark|-transparent|-divider|-divider-on-dark)|--p-background-selected|--p-background-pressed|--p-background-hovered|--p-background|--p-backdrop|--p-action-secondary-pressed-dark|--p-action-secondary-pressed|--p-action-secondary-hovered-dark|--p-action-secondary-hovered|--p-action-secondary-disabled|--p-action-secondary-depressed|--p-action-secondary|--p-action-primary-pressed|--p-action-primary-hovered|--p-action-primary-disabled|--p-action-primary-depressed|--p-action-primary|--p-action-critical-pressed|--p-action-critical-hovered|--p-action-critical-disabled|--p-action-critical-depressed|--p-action-critical\n```\n\n----------------------------------------\n\nTITLE: Updating HeadingVariant for Text in Bash\nDESCRIPTION: Changes 'variant' prop from 'heading4xl' to 'heading3xl' in Text components. Requires 'npx @shopify/polaris-migrator'. Applies to .ts and .tsx files globally.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-update-component-prop --componentName Text --fromProp variant --fromValue heading4xl --toValue heading3xl \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Card background Prop\nDESCRIPTION: Regular expression to check for outdated usage of the background prop in Card components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_121\n\nLANGUAGE: regex\nCODE:\n```\n<Card[^>\\w](?:[^>]|\\n)*?background\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Blocks with Text Component in JSX\nDESCRIPTION: Employs the <Text> component to render blocks of text, applying standard Polaris typography. It supports Markdown elements like headings (e.g., ##) within its content.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/layout/density.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n  ## High density\n\n  Information-rich interfaces, like index pages or data tables, require high-density layouts for efficiency. By presenting information in a denser format, merchants can quickly access and compare data, enhancing the effectiveness of the Shopify admin.\n\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Motion Token Structure in CSS\nDESCRIPTION: Structure for motion tokens with two variations: default tokens for properties like duration and easing, and keyframes tokens for animations.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n--p-motion-[property]-[alias-or-scale]\n--p-motion-keyframes-[alias]\n```\n\n----------------------------------------\n\nTITLE: Examples of Space Tokens in CSS\nDESCRIPTION: Examples of space tokens with scale values and component-specific spacing for cards.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n--p-space-100\n--p-space-200\n--p-space-card-gap\n--p-space-card-padding\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Icons Build Commands\nDESCRIPTION: Terminal commands for installing dependencies, optimizing icons, and creating changesets in the Polaris Icons package\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install && pnpm optimize\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Running the scss-remove-unused-at-use Migration\nDESCRIPTION: Command to execute the scss-remove-unused-at-use migration script to remove a specific unused import.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_75\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator scss-remove-unused-at-use <path> --url='import/url'\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Component Usage After Suffix Removal - Shopify Polaris - diff\nDESCRIPTION: This diff snippet instructs developers on updating React component usage to match the new icon naming convention in Polaris v4. By removing the deprecated style suffixes in icon references, code now sources standardized icon names. The dependency is the latest '@shopify/polaris-icons' package with the revised icon names; input is old JSX icon usage and output is the revised JSX. This migration is crucial when upgrading to Polaris v4 to avoid missing or broken icons in UI components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- <Icon source={MobileCancelMajorMonotone} />\n+ <Icon source={MobileCancelMajor} />\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for Border Radius Function\nDESCRIPTION: This command runs the Polaris migrator to replace the legacy border-radius() function with shape tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-scss-replace-border-radius <path>\n```\n\n----------------------------------------\n\nTITLE: SecondaryAction Type Definition - TypeScript\nDESCRIPTION: Type definitions for secondary actions that can be added to navigation items, including URL, accessibility, and tooltip properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/internal-only/navigation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SecondaryAction {\n  url?: string;\n  accessibilityLabel?: string;\n  icon: IconProps['source'];\n  onClick?: () => void;\n  tooltip?: TooltipProps;\n}\n```\n\n----------------------------------------\n\nTITLE: RegExp for Finding Deprecated Border Components Pattern (RegExp)\nDESCRIPTION: This regular expression locates instances of <Box> components that contain border properties in their attributes. Useful for migrating or validating custom border declarations in React component source files. Input context is React or JSX-based code; outputs are lines/components matching the <Box...border pattern.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_85\n\nLANGUAGE: regexp\nCODE:\n```\n```\\n<Box[^>\\\\w](?:[^>]|\n)*?border\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Archived Section Header and Lede in MDX/JSX\nDESCRIPTION: Uses Markdown level 2 heading syntax (`##`) within MDX to create the 'Archived documentation' section title. Below the heading, a Polaris `Lede` component is employed to display introductory text specific to this archived section, informing users about the status and usability of these older guidelines.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n## Archived documentation\n\n{' '}\n\n<Lede>\n  These guidelines are safe to use and will be updated to the new documentation\n  format in the near future.\n</Lede>\n```\n\n----------------------------------------\n\nTITLE: Installing Stylelint Polaris\nDESCRIPTION: Command to install Stylelint Polaris and its peer dependency using Yarn.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @shopify/stylelint-polaris stylelint\n```\n\n----------------------------------------\n\nTITLE: Default Badge Usage in Polaris (React/TypeScript)\nDESCRIPTION: Use the default Badge to give a non-critical tone update on a piece of information or action. This represents the basic implementation without a specific emphasis.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/badge.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Code example described in the documentation, located in badge-default.tsx\n```\n\n----------------------------------------\n\nTITLE: Migrating Motion Custom Properties with CSS Diff Example (diff)\nDESCRIPTION: Demonstrates the required change in CSS to migrate from Deprecated 'motion' custom properties to new equivalents as part of Shopify Polaris v11 upgrade.\nShows a before and after diff for the 'transition-timing-function' property, replacing '--p-linear' with '--p-motion-linear'.\nUseful for developers to understand the necessary code update; requires familiarity with Polaris v11 token changes.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_79\n\nLANGUAGE: diff\nCODE:\n```\n```diff\\n- transition-timing-function: var(--p-linear);\\n+ transition-timing-function: var(--p-motion-linear);\\n```\n```\n\n----------------------------------------\n\nTITLE: Adjusting Divider Border Color with Shopify Polaris in TypeScript/React\nDESCRIPTION: Demonstrates how to render a Divider in a React component using Shopify Polaris and adjust its border color with color tokens. Requires the Polaris React component library and appropriate color tokens from the Polaris design system. The primary parameter is the border color which can be set with a token value, allowing for consistent theme styling. Input is properties passed to the Divider component; output is a rendered visual separator with a customized border.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/divider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// divider-with-border-color.tsx\nimport {Divider} from '@shopify/polaris';\n\n// Use a Polaris color token for the border color\n<Divider borderColor=\"border-critical\" />\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup Segmented Prop Migration Example\nDESCRIPTION: This diff example shows how to update the ButtonGroup segmented prop to the new variant prop.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n- <ButtonGroup segmented />\n+ <ButtonGroup variant=\"segmented\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Link Component Styling\nDESCRIPTION: Adding removeUnderline prop to Link component to maintain existing appearance, as links are now underlined by default.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v5-to-v6.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <Link url=\"https://help.shopify.com/\">Orders</Link>\n+ <Link url=\"https://help.shopify.com/\" removeUnderline>Orders</Link>\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Divider borderWidth Prop (Regex)\nDESCRIPTION: Use this regex pattern during post-migration validation to find `borderWidth` props on Polaris `<Divider>` components, ensuring they use the updated v12 border width values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_106\n\nLANGUAGE: regex\nCODE:\n```\n<Divider[^>\\w](?:[^>]|\\n)*?borderWidth\n```\n\n----------------------------------------\n\nTITLE: Including Sub-navigation with Subnav Component in JSX\nDESCRIPTION: Renders a <Subnav /> component, likely responsible for displaying secondary navigation links relevant to the current documentation section.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/layout/density.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Subnav />\n```\n\n----------------------------------------\n\nTITLE: Examples of Keyframes Motion Tokens in CSS\nDESCRIPTION: Examples of keyframes tokens for predefined animations like fading in and out.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n--p-motion-keyframes-fade-in\n--p-motion-keyframes-fade-out\n```\n\n----------------------------------------\n\nTITLE: SubNavigationItem Type Definition - TypeScript\nDESCRIPTION: Type definitions for sub-navigation items that can be nested within main navigation items.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/internal-only/navigation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SubNavigationItem {\n  url?: string;\n  matches?: boolean;\n  exactMatch?: boolean;\n  matchPaths?: string[];\n  excludePaths?: string[];\n  external?: boolean;\n  label: string;\n  disabled?: boolean;\n  new?: boolean;\n  onClick?: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Text Tokens in CSS\nDESCRIPTION: Examples of text tokens for an extra-large heading style with various font properties like family, size, and line height.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n--p-text-heading-xl-font-family\n--p-text-heading-xl-font-size\n--p-text-heading-xl-font-line-height\n```\n\n----------------------------------------\n\nTITLE: Icon Name Mapping Table in Markdown\nDESCRIPTION: A markdown table showing the mapping between legacy icon variant names (Major/Minor suffixes) and their corresponding modern icon component names. This table helps developers reference and migrate between different icon naming conventions in the Polaris design system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `TabletMinor`                       | `TabletIcon`                    |\n| `TapChipMajor`                      | `CreditCardTapChipIcon`         |\n| `TapChipMinor`                      | `CreditCardTapChipIcon`         |\n| `TaxMajor`                          | `TaxIcon`                       |\n| `TaxMinor`                          | `TaxIcon`                       |\n[...continued...]\n```\n\n----------------------------------------\n\nTITLE: Updating Magic Icon Color CSS Variable\nDESCRIPTION: Updates the `color-icon-magic` CSS variable to use the correct shade of purple[500]. This ensures icons associated with 'Shopify Magic' features display the intended purple color.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\ncolor-icon-magic\n```\n\n----------------------------------------\n\nTITLE: Replacing Motion Custom Properties with v9-styles-replace-custom-property-motion\nDESCRIPTION: This migration replaces deprecated motion CSS custom properties with corresponding Polaris custom property replacement values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n- transition: transform var(--p-duration-1-0-0) var(--p-ease);\n+ transition: transform var(--p-duration-100) var(--p-ease);\n```\n\n----------------------------------------\n\nTITLE: Navigation Section Rollup Type Definition - TypeScript\nDESCRIPTION: Type definitions for section rollup functionality that controls how navigation sections collapse and expand.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/internal-only/navigation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavigationSectionRollup {\n  after?: number;\n  view?: string;\n  hide?: string;\n  activePath?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Deprecated Polaris Background & Action CSS Tokens (v10 to v11)\nDESCRIPTION: This table lists deprecated Shopify Polaris v10 CSS custom properties for background and various action states (primary, secondary, critical) and maps them to their corresponding v11 replacement tokens. This mapping is essential for migrating UI component styles to Polaris v11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n| Deprecated Token                     | Replacement Value                                                                                                                                                                                                                                                    |\n| ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `--p-background-selected`                | `--p-color-bg-app-selected`                                                                                                                                                                                                                                                      |\n| `--p-background-pressed`                 | `--p-color-bg-app-active`                                                                                                                                                                                                                                                        |\n| `--p-background-hovered`                 | `--p-color-bg-app-hover`                                                                                                                                                                                                                                                         |\n| `--p-background`                         | `--p-color-bg-app`                                                                                                                                                                                                                                                               |\n| `--p-backdrop`                           | `rgba(0, 0, 0, 0.5)`                                                                                                                                                                                                                                                             |\n| `--p-action-secondary-pressed-dark`      | `--p-color-bg-inverse-active`                                                                                                                                                                                                                                                    |\n| `--p-action-secondary-pressed`           | `--p-color-bg-subdued-active`                                                                                                                                                                                                                                                    |\n| `--p-action-secondary-hovered-dark`      | `--p-color-bg-inverse-hover`                                                                                                                                                                                                                                                     |\n| `--p-action-secondary-hovered`           | `--p-color-bg-subdued-hover`                                                                                                                                                                                                                                                     |\n| `--p-action-secondary-disabled`          | `--p-color-bg-disabled`                                                                                                                                                                                                                                                          |\n| `--p-action-secondary-depressed`         | `--p-color-bg-inset-strong`                                                                                                                                                                                                                                                      |\n| `--p-action-secondary`                   | `--p-color-bg-subdued`                                                                                                                                                                                                                                                           |\n| `--p-action-primary-pressed`             | `--p-color-bg-primary-active`                                                                                                                                                                                                                                                    |\n| `--p-action-primary-hovered`             | `--p-color-bg-primary-hover`                                                                                                                                                                                                                                                     |\n| `--p-action-primary-disabled`            | `--p-color-bg-disabled`                                                                                                                                                                                                                                                          |\n| `--p-action-primary-depressed`           | `--p-color-bg-primary-active`                                                                                                                                                                                                                                                    |\n| `--p-action-primary`                     | For `color` properties: `--p-color-text-primary`<br /> For `background` properties: `--p-color-bg-primary` <br /> For `border` properties: `--p-color-border-primary` <br /> For `fill` properties: `--p-color-icon-primary`                                                     |\n| `--p-action-critical-pressed`            | `--p-color-bg-critical-strong-active`                                                                                                                                                                                                                                            |\n| `--p-action-critical-hovered`            | `--p-color-bg-critical-strong-hover`                                                                                                                                                                                                                                             |\n| `--p-action-critical-disabled`           | `--p-color-bg-disabled`                                                                                                                                                                                                                                                          |\n| `--p-action-critical-depressed`          | `--p-color-bg-critical-strong-active`                                                                                                                                                                                                                                            |\n| `--p-action-critical`                    | `--p-color-bg-critical-strong`                                                                                                                                                                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Z-Index Token Structure in CSS\nDESCRIPTION: Structure for z-index tokens that define stacking order using scales or component-specific aliases.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n--p-z-index-[alias-or-scale]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Modern Z-Index Custom Properties in CSS\nDESCRIPTION: This code snippet demonstrates the correct and incorrect usage of z-index custom properties in CSS. It encourages using the new --p-z-index-1 property instead of the legacy --p-z-1 property.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/z-index-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\nz-index: var(--p-z-index-1);\n// Don't\nz-index: var(--p-z-1);\n```\n\n----------------------------------------\n\nTITLE: Updating Sass API Import Path for General Consumers\nDESCRIPTION: Updates the import path for the public Sass API entrypoint due to the build process migration to `loom`. The path has changed from the dist directory to the build directory.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v6-to-v7.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- @import 'path_to_node_modules/@shopify/polaris/dist/styles/public-api';\n+ @import 'path_to_node_modules/@shopify/polaris/build/styles/public-api';\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator for HorizontalGrid Rename\nDESCRIPTION: This command runs the Polaris migrator to rename the HorizontalGrid component to InlineGrid.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component --renameFrom HorizontalGrid --renameTo InlineGrid --renamePropsFrom HorizontalGridProps --renamePropsTo InlineGridProps \"**/*.{ts,tsx}\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Hidden When Printing Mixin with Media Query in SCSS\nDESCRIPTION: This snippet shows how to replace the deprecated hidden-when-printing mixin with a media query for print styles.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_8\n\nLANGUAGE: scss\nCODE:\n```\n@media print {\n  display: none !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderEndEndRadius Prop (Regex)\nDESCRIPTION: Use this regex pattern to locate instances of the `borderEndEndRadius` prop on the Polaris `<Box>` component, which might need updating following the v12 border property migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_96\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderEndEndRadius\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Lede with Lede Component in JSX\nDESCRIPTION: Uses the <Lede> component to display the introductory paragraph (lede) of the page. The content is dynamically pulled from the page's frontmatter description variable.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/layout/density.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Lede>{frontmatter.description}</Lede>\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-Tabs CSS Class Overrides\nDESCRIPTION: This CSS snippet is part of post-migration validation to locate overrides of the Polaris-Tabs CSS class, ensuring all instances are aptly updated post-migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_42\n\nLANGUAGE: css\nCODE:\n```\nPolaris-Tabs\n```\n\n----------------------------------------\n\nTITLE: Adding Spacing with Small Component in JSX\nDESCRIPTION: Uses the <Small> component, often containing just a comment ` {/* Empty space */} `, primarily to introduce vertical spacing between elements in the layout.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/layout/density.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Small>{/* Empty space */}</Small>\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Layout.Section oneHalf prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of Layout.Section components with the oneHalf property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_56\n\nLANGUAGE: regex\nCODE:\n```\n<Layout\\.Section[^>\\w](?:[^>]|\\n)*?oneHalf\n```\n\n----------------------------------------\n\nTITLE: Adding Color Token Group from Internal Palette\nDESCRIPTION: Adds a new `color` token group based on a new internal color palette. This signifies a potentially significant update or reorganization of the available color tokens in Polaris.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n`color` token group\n```\n\n----------------------------------------\n\nTITLE: Adding New Border Tokens for v11 Replacement\nDESCRIPTION: Introduces new 'border' tokens. These are intended to replace the existing 'shape' tokens in the upcoming Polaris version 11, likely offering more granular control over borders.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nborder tokens\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris Tokens via npm (Bash)\nDESCRIPTION: Installs the `@shopify/polaris-tokens` package using the npm package manager. This command downloads and adds the package to the project's dependencies, making the tokens available for use.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/polaris-tokens\n```\n\n----------------------------------------\n\nTITLE: Importing Media Query Variables in SCSS from Polaris Tokens\nDESCRIPTION: Example showing how to import the media-queries.scss file from @shopify/polaris-tokens to use the new breakpoint variables in your project.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v9-to-v10.md#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import 'path/to/node_modules/@shopify/polaris-tokens/dist/scss/media-queries';\n```\n\n----------------------------------------\n\nTITLE: Mapping Deprecated Polaris Shadow CSS Tokens (v10 to v11)\nDESCRIPTION: This table lists deprecated Shopify Polaris v10 CSS custom properties for shadows and their corresponding v11 replacements (using the `--p-shadow-*` naming convention). This mapping reflects reworked shadow values for better consistency and contrast, aiding in the migration to Polaris v11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n| Deprecated Token                   | Replacement Value     |\n| ---------------------------------- | --------------------- |\n| `--p-shadow-transparent`           | `--p-shadow-none`     |\n| `--p-shadow-faint`                 | `--p-shadow-sm`       |\n| `--p-shadow-base`                  | `--p-shadow-md`       |\n| `--p-shadow-deep`                  | `--p-shadow-md`       |\n| `--p-shadow-button`                | `--p-shadow-sm`       |\n| `--p-shadow-top-bar`               | `--p-shadow-sm`       |\n| `--p-shadow-card`                  | `--p-shadow-md`       |\n| `--p-shadow-popover`               | `--p-shadow-xl`       |\n| `--p-shadow-layer`                 | `--p-shadow-2xl`      |\n| `--p-shadow-modal`                 | `--p-shadow-2xl`      |\n| `--p-shadows-inset-button`         | `--p-shadow-none`     |\n| `--p-shadows-inset-button-pressed` | `--p-shadow-inset-md` |\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Card Background Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the background prop in Card components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_111\n\nLANGUAGE: regex\nCODE:\n```\n<Card[^>\\w](?:[^>]|\\n)*?background\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Token in JSON\nDESCRIPTION: Example of how to reference a color token in JSON after the removal of the '-base' suffix in version 2.0.0.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntokens['color-ink']\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Polaris Changelog\nDESCRIPTION: Updates the dependencies for @shopify/polaris-icons and @shopify/polaris packages in the changelog.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`2b5ecf8df`](https://github.com/Shopify/polaris/commit/2b5ecf8df3dcc07a3a6a75939e6f3b588f710ea1), [`bd0cede27`](https://github.com/Shopify/polaris/commit/bd0cede27d266ec827220ad9da1016b788811922), [`d514150b1`](https://github.com/Shopify/polaris/commit/d514150b1b4e58a37b27ec9534108301a57f9b12)]:\n  - @shopify/polaris-icons@7.11.0\n  - @shopify/polaris@12.3.0\n```\n\n----------------------------------------\n\nTITLE: Specialty Color Token Structure\nDESCRIPTION: Shows the structure of specialty tokens used for specific UI concepts, combining the concept name with semantic token structure.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/color-tokens.mdx#2025-04-22_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n--p-nav-bg-surface-selected\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Box background Prop\nDESCRIPTION: Regular expression to check for outdated usage of the background prop in Box components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_120\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?background\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Icon tone=\"highlight\" migration\nDESCRIPTION: Regular expression to check for any remaining instances of Icon components with the incorrect tone=\"highlight\" property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_39\n\nLANGUAGE: regex\nCODE:\n```\n<Icon[^>\\w](?:[^>]|\\n)*?tone=\"highlight\"\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Layout.Section oneThird prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of Layout.Section components with the oneThird property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_53\n\nLANGUAGE: regex\nCODE:\n```\n<Layout\\.Section[^>\\w](?:[^>]|\\n)*?oneThird\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderRadius Prop (Regex)\nDESCRIPTION: This regex pattern searches for the use of the `borderRadius` prop on the Polaris `<Box>` component. This prop might be associated with deprecated border radius tokens and should be checked during post-migration validation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_94\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderRadius\n```\n\n----------------------------------------\n\nTITLE: Using ExtraLarge Component in Polaris JSX\nDESCRIPTION: Demonstrates the usage of the `<ExtraLarge>` component, likely a typography or sizing component within the Polaris framework. It's used here to wrap content, possibly applying specific styling like larger font size or spacing, often used for section headers or emphasized content.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ExtraLarge>\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-AlphaCard CSS Class Overrides\nDESCRIPTION: This CSS snippet is part of post-migration validation, helping locate any Polaris-AlphaCard CSS class overrides to ensure all are updated to the new Card component.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_54\n\nLANGUAGE: css\nCODE:\n```\nPolaris-AlphaCard\n```\n\n----------------------------------------\n\nTITLE: Avoiding Legacy Color Sass APIs in Shopify Polaris\nDESCRIPTION: This example shows code that should not be used because it references legacy color Sass APIs that are disallowed by the stylelint rule.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/color-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Don't\n- @type map $filter-palette-data: $polaris-color-filters;\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Modal small prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of Modal components with the small property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_68\n\nLANGUAGE: regex\nCODE:\n```\n<Modal[^>\\w](?:[^>]|\\n)*?small\n```\n\n----------------------------------------\n\nTITLE: Stylelint Output Example for Custom Property Violations\nDESCRIPTION: Demonstrates the output of Stylelint when it detects violations of the custom property allowed list rule.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-allowed-list/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsrc/components/typography/textContainer/TextContainer.scss\n  4:3  ✖  Unexpected custom property [--p-text-container-spacing].        polaris/custom-property-allowed-list\n  6:5  ✖  Invalid custom properties [--p-text-container-spacing].         polaris/custom-property-allowed-list\n 15:3  ✖  Unexpected custom property [--p-text-container-spacing].        polaris/custom-property-allowed-list\n 19:3  ✖  Unexpected custom property [--p-text-container-spacing].        polaris/custom-property-allowed-list\n```\n\n----------------------------------------\n\nTITLE: Adding New Space Tokens for v11 Replacement\nDESCRIPTION: Introduces new 'Space' tokens and associated types. These are intended to replace the existing spacing system in the upcoming Polaris version 11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nSpace tokens\n```\n\n----------------------------------------\n\nTITLE: Adding New Shadow Token Group\nDESCRIPTION: Introduces a new group of design tokens specifically for managing shadows (`shadow` token group). This provides standardized options for applying elevation and depth effects to UI elements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n`shadow` token group\n```\n\n----------------------------------------\n\nTITLE: Using Variant Props with Small Component in MDX\nDESCRIPTION: This snippet shows how to use the variant prop with the Small component to apply different visual styles including directive, do, dont, caution, and tip variants.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/documentation/creating-layout.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Small variant=\"directive\">...</Small>\n<Small variant=\"do\">...</Small>\n<Small variant=\"dont\">...</Small>\n<Small variant=\"caution\">...</Small>\n<Small variant=\"tip\">...</Column>\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderInlineEndWidth Prop (Regex)\nDESCRIPTION: Use this regex for post-migration validation to find `borderInlineEndWidth` props on Polaris `<Box>` components that may need updating to align with v12 border styles.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_103\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderInlineEndWidth\n```\n\n----------------------------------------\n\nTITLE: Examples of Z-Index Tokens in CSS\nDESCRIPTION: Examples of z-index tokens with numeric values and component-specific aliases for modals and tooltips.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n--p-z-index-1\n--p-z-index-2\n--p-z-index-modal\n--p-z-index-tooltip\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Token in Android\nDESCRIPTION: Example of how to reference a color token in Android XML after the removal of the '_base' suffix in version 2.0.0.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\npolaris_color_blue\n```\n\n----------------------------------------\n\nTITLE: Avatar Shape RegExp Validation\nDESCRIPTION: Regular expression to find deprecated Avatar shape prop\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n<Avatar[^>\\w](?:[^>]|\\n)*?shape\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating IndexTable.Row status prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of IndexTable.Row components with the status property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_47\n\nLANGUAGE: regex\nCODE:\n```\n<IndexTable\\.Row[^>\\w](?:[^>]|\\n)*?status\n```\n\n----------------------------------------\n\nTITLE: Locating non-border borderColor props in Box components\nDESCRIPTION: A regular expression to identify Box components with a borderColor prop that doesn't use the 'border' prefix. This assists in finding potential color-related issues in Box components after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_74\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderColor(?!=\"border)\n```\n\n----------------------------------------\n\nTITLE: Regex for Outdated Heading4XL Prop\nDESCRIPTION: Regex pattern designed to catch outdated 'variant=\"heading4xl\"' in Text component props. Important for understanding pre-migration occurrences.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_84\n\nLANGUAGE: regex\nCODE:\n```\n<Text[^>\\w](?:[^>]|\\n)*?variant=\"heading4xl\"\n```\n\n----------------------------------------\n\nTITLE: Using Text Component in Polaris JSX\nDESCRIPTION: This snippet illustrates the use of the `<Text>` component from the Polaris design system. It serves as a standard container for rendering text content, potentially applying default typography styles and allowing for semantic structuring of textual information within the UI.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n```\n\n----------------------------------------\n\nTITLE: RegExp for Finding Deprecated Shadow Custom Properties (RegExp)\nDESCRIPTION: A regular expression pattern that identifies deprecated shadow-related custom properties in source files. Intended for post-migration validation; input is source text and output is matched properties. Limitations may include matching unrelated text without proper context.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_84\n\nLANGUAGE: regexp\nCODE:\n```\n```\\n--p-shadow-base|--p-shadow-button|--p-shadow-card|--p-shadow-deep|--p-shadow-faint|--p-shadow-layer|--p-shadow-modal|--p-shadow-popover|--p-shadow-top-bar|--p-shadow-transparent|--p-shadows-inset-button|--p-shadows-inset-button-pressed\\n```\n```\n\n----------------------------------------\n\nTITLE: Disallowing text-shadow property in CSS for better readability\nDESCRIPTION: This example demonstrates what not to do with text-shadow property. The rule prohibits using text-shadow and instead recommends ensuring proper contrast between text and background for readability.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/shadow-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Don't\ntext-shadow: 2px 2px #ff0000;\n```\n\n----------------------------------------\n\nTITLE: Examples of Breakpoint Tokens in CSS\nDESCRIPTION: Examples of breakpoint tokens using different size aliases (xs, sm, md) for responsive design.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--p-breakpoints-xs\n--p-breakpoints-sm\n--p-breakpoints-md\n```\n\n----------------------------------------\n\nTITLE: AppProvider Features RegExp Validation\nDESCRIPTION: Regular expression to find outdated AppProvider features prop usage\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n<AppProvider[^>\\w](?:[^>]|\\n)*?features\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Hardcoded Color Custom Properties\nDESCRIPTION: This regular expression can be used to identify any remaining instances of color custom properties across all file types after the migration step 1 has been completed.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_109\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-color-avatar-background-experimental|--p-color-avatar-color-experimental|--p-color-avatar-style-five-background-experimental|--p-color-avatar-style-five-color-experimental|--p-color-avatar-style-four-background-experimental|--p-color-avatar-style-four-color-experimental|--p-color-avatar-style-one-background-experimental|--p-color-avatar-style-one-color-experimental|--p-color-avatar-style-three-background-experimental|--p-color-avatar-style-three-color-experimental|--p-color-avatar-style-two-background-experimental|--p-color-avatar-style-two-color-experimental|--p-color-bg|--p-color-bg-active|--p-color-bg-app-active|--p-color-bg-app-hover|--p-color-bg-app-selected|--p-color-bg-backdrop-experimental|--p-color-bg-caution|--p-color-bg-caution-strong|--p-color-bg-caution-subdued|--p-color-bg-caution-subdued-active|--p-color-bg-caution-subdued-hover|--p-color-bg-critical|--p-color-bg-critical-strong|--p-color-bg-critical-strong-active|--p-color-bg-critical-strong-hover|--p-color-bg-critical-subdued|--p-color-bg-critical-subdued-active|--p-color-bg-critical-subdued-hover|--p-color-bg-disabled|--p-color-bg-hover|--p-color-bg-info|--p-color-bg-info-strong|--p-color-bg-info-subdued|--p-color-bg-info-subdued-active|--p-color-bg-info-subdued-hover|--p-color-bg-input|--p-color-bg-input-active-experimental|--p-color-bg-input-hover-experimental|--p-color-bg-inset|--p-color-bg-inset-strong|--p-color-bg-interactive|--p-color-bg-interactive-active|--p-color-bg-interactive-disabled|--p-color-bg-interactive-hover|--p-color-bg-interactive-selected|--p-color-bg-interactive-subdued|--p-color-bg-interactive-subdued-active|--p-color-bg-interactive-subdued-hover|--p-color-bg-inverse-active|--p-color-bg-inverse-hover|--p-color-bg-magic|--p-color-bg-magic-active|--p-color-bg-magic-hover|--p-color-bg-magic-strong|--p-color-bg-magic-subdued|--p-color-bg-magic-subdued-hover|--p-color-bg-primary|--p-color-bg-primary-active|--p-color-bg-primary-disabled-experimental|--p-color-bg-primary-hover|--p-color-bg-primary-subdued|--p-color-bg-primary-subdued-active|--p-color-bg-primary-subdued-hover|--p-color-bg-primary-subdued-selected|--p-color-bg-secondary-experimental|--p-color-bg-strong|--p-color-bg-strong-active|--p-color-bg-strong-hover|--p-color-bg-subdued|--p-color-bg-subdued-active|--p-color-bg-subdued-hover|--p-color-bg-success|--p-color-bg-success-strong|--p-color-bg-success-strong-active-experimental|--p-color-bg-success-strong-hover-experimental|--p-color-bg-success-subdued|--p-color-bg-success-subdued-active|--p-color-bg-success-subdued-hover|--p-color-bg-transparent-active-experimental|--p-color-bg-transparent-disabled-experimental|--p-color-bg-transparent-experimental|--p-color-bg-transparent-hover-experimental|--p-color-bg-transparent-primary-disabled-experimental|--p-color-bg-transparent-subdued-experimental|--p-color-bg-warning|--p-color-bg-warning-strong-experimental|--p-color-bg-warning-subdued-experimental|--p-color-border-critical-strong-experimental|--p-color-border-input|--p-color-border-input-active-experimental|--p-color-border-input-hover|--p-color-border-interactive|--p-color-border-interactive-active|--p-color-border-interactive-disabled|--p-color-border-caution-subdued|--p-color-border-critical-active|--p-color-border-critical-hover|--p-color-border-critical-subdued|--p-color-border-info-subdued|--p-color-border-interactive-focus|--p-color-border-interactive-hover|--p-color-border-magic-strong|--p-color-border-primary|--p-color-border-strong|--p-color-border-strong-hover|--p-color-border-subdued|--p-color-border-success-subdued|--p-color-icon-interactive|--p-color-icon-interactive-active|--p-color-icon-interactive-hover|--p-color-icon-info-strong-experimental|--p-color-icon-interactive-disabled|--p-color-icon-primary|--p-color-icon-subdued|--p-color-icon-critical-strong-experimental|--p-color-icon-critical-strong-active-experimental|--p-color-icon-critical-strong-hover-experimental|--p-color-icon-success-strong-experimental|--p-color-icon-warning-strong-experimental|--p-color-text-critical-hover-experimental|--p-color-text-info-strong|--p-color-text-interactive|--p-color-text-interactive-active|--p-color-text-interactive-disabled|--p-color-text-interactive-hover|--p-color-text-interactive-inverse|--p-color-text-inverse-subdued|--p-color-text-primary|--p-color-text-primary-hover|--p-color-text-caution-strong|--p-color-text-critical-strong|--p-color-text-magic-strong|--p-color-text-success-strong|--p-color-text-subdued|--p-color-text-warning-experimental)(?![\\w-])\n```\n\n----------------------------------------\n\nTITLE: Displaying a Positive Example with Medium Component (JSX)\nDESCRIPTION: This snippet utilizes the Polaris 'Medium' React component with a 'do' variant to showcase a recommended practice. It contains a Markdown image link illustrating a meaningful combination of color roles.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Medium variant=\"do\">\n    ![Detail shot of different badges used in an order card](/images/design/colors/color-using-color-combining-do@2x.png)\n\n    Meaningful combinations of color roles can enhance a merchant’s experience.\n\n  </Medium>\n```\n\n----------------------------------------\n\nTITLE: Incorrect External Link Button Implementation in React JSX\nDESCRIPTION: Shows incorrect ways of creating external link buttons that lack proper accessibility and visual cues. These examples should be avoided as they don't follow best practices for external links.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/actions/button.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Button url=\"http://example.com\" external>Terms and conditions</Button>\n<Button url=\"http://example.com\" external>\n  Terms and conditions\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Validation RegExp for Component Props\nDESCRIPTION: Collection of regular expressions to validate deprecated spacing-related props on various Polaris components\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_136\n\nLANGUAGE: regex\nCODE:\n```\n<Tooltip[^>\\w](?:[^>]|\\n)*?padding\n```\n\nLANGUAGE: regex\nCODE:\n```\n<HorizontalGrid[^>\\w](?:[^>]|\\n)*?gap\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?padding\n```\n\n----------------------------------------\n\nTITLE: RegExp for Finding Deprecated Z-index Custom Properties (RegExp)\nDESCRIPTION: A regular expression that matches all deprecated z-index custom properties used in previous Polaris versions. Intended for post-migration code audits; input is code or config text, and matches indicate locations needing manual review. Limitation: may match substrings if not properly tokenized.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_88\n\nLANGUAGE: regexp\nCODE:\n```\n```\\n--p-z-1|--p-z-2|--p-z-3|--p-z-4|--p-z-5|--p-z-6|--p-z-7|--p-z-8|--p-z-9|--p-z-10|--p-z-11|--p-z-12\\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Content using JSX Components\nDESCRIPTION: This JSX snippet renders the main content of the 'Tools' page. It displays a heading using the title from the frontmatter (`{frontmatter.title}`), followed by the description rendered within a `Lede` component (`{frontmatter.description}`). Finally, it uses a `RichCardGrid` component to display a collection of tool cards, passing the `posts` data and specifying the category as 'tools'.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# {frontmatter.title}\n\n<Lede>{frontmatter.description}</Lede>\n\n<RichCardGrid cards={posts} category=\"tools\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Specific CSS Color Tokens\nDESCRIPTION: Adds two new specific CSS color tokens: `bg-app-active` for representing an active application background state and `text-primary-hover` for primary text hover states.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nbg-app-active\n```\n\nLANGUAGE: css\nCODE:\n```\ntext-primary-hover\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderBlockEndWidth Prop (Regex)\nDESCRIPTION: This regex aids in finding potentially outdated `borderBlockEndWidth` props on Polaris `<Box>` components after the v12 border property migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_101\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderBlockEndWidth\n```\n\n----------------------------------------\n\nTITLE: Detecting non-bg background props in Box components\nDESCRIPTION: A regular expression to locate Box components with a background prop that doesn't use the 'bg' prefix. This assists in finding potential color-related issues in Box components after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_72\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?background(?!=\"bg)\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Migrator\nDESCRIPTION: Command to run the Polaris migrator for inserting Stylelint disable comments.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator styles-insert-stylelint-disable <path>\n```\n\n----------------------------------------\n\nTITLE: Inserting Space Literal in JSX\nDESCRIPTION: This snippet demonstrates a common pattern in JSX for inserting a literal space character between components or elements. The curly braces `{}` signify a JavaScript expression, and `' '` is a string containing a single space.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{' '}\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Icon color=\"highlight\" migration\nDESCRIPTION: Regular expression to check for any remaining instances of Icon components with the outdated color=\"highlight\" property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_38\n\nLANGUAGE: regex\nCODE:\n```\n<Icon[^>\\w](?:[^>]|\\n)*?color=\"highlight\"\n```\n\n----------------------------------------\n\nTITLE: Search for Stack Component Instances in React\nDESCRIPTION: This code snippet is used for post-migration validation to identify any remaining instances of the Stack component within a React project. It involves searching for the component's JSX tag.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-Stack CSS Class Overrides\nDESCRIPTION: This CSS snippet is part of the post-migration validation process to check for any overrides of the Polaris-Stack CSS class in the codebase. It ensures that all instances are updated appropriately.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_30\n\nLANGUAGE: css\nCODE:\n```\nPolaris-Stack\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Layout.Section fullWidth prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of Layout.Section components with the fullWidth property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_59\n\nLANGUAGE: regex\nCODE:\n```\n<Layout\\.Section[^>\\w](?:[^>]|\\n)*?fullWidth\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Layout.Section secondary prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of Layout.Section components with the secondary property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_62\n\nLANGUAGE: regex\nCODE:\n```\n<Layout\\.Section[^>\\w](?:[^>]|\\n)*?secondary\n```\n\n----------------------------------------\n\nTITLE: Displaying Large Visual Example with Layout Control (JSX)\nDESCRIPTION: This snippet employs the Polaris 'Large' React component to display a significant visual example, in this case, a collection of components in disabled states. It includes responsive layout control via the 'columnSpan' prop, adjusting the space it occupies based on screen size.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Large columnSpan={{xs: 6, sm: 6, md: 6, lg: 8, xl: 8}}>\n\n    ![A collection of components in disabled states](/images/design/colors/color-using-color-disabled@2x.png)\n\n  </Large>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Positive Example for Using Other Colors (JSX)\nDESCRIPTION: This snippet utilizes the Polaris 'Large' component with a 'do' variant to present a recommended use case for colors outside the standard roles – specifically within illustrations, as shown by the embedded Markdown image link.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Large variant=\"do\">\n\n    ![Other colors that are not attached to a color role used in an illustration](/images/design/colors/color-using-color-other-colors@2x.png)\n\n    In the case of illustrations, any color of the color palette can be used. Diagrams, however, need to respect color role usage if they represent an abstracted view of the admin.\n\n  </Large>\n```\n\n----------------------------------------\n\nTITLE: Border Token Structure in CSS\nDESCRIPTION: Structure for border-related Polaris tokens that define properties like width and radius with various scale values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--p-border-[property]-[alias-or-scale]\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint Rules\nDESCRIPTION: JavaScript configuration example showing how to set up the at-rule-disallowed-list plugin with regular expressions to match specific patterns.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/at-rule-disallowed-list/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stylelintConfig = {\n  rules: {\n    'polaris/at-rule-disallowed-list': {\n      // Using a RegExp ensures we disallow `@mixin id` and `@mixin id()`\n      // https://regex101.com/r/PJYwuP/1\n      mixin: [/^disallowed-mixin($|\\()/],\n      include: [/^disallowed-mixin($|\\()/],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Tokens to Meet Contrast Requirements\nDESCRIPTION: Adjusts various color tokens across the system to ensure they meet color contrast requirements. This is a general accessibility improvement affecting multiple color definitions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\ncolors\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Box Color Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the color prop in Box components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_116\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?color\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Box borderColor Prop\nDESCRIPTION: Regular expression to check for outdated usage of the borderColor prop in Box components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_122\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderColor\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint in package.json\nDESCRIPTION: JSON configuration to extend Stylelint Polaris in package.json file.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stylelint\": {\n    \"extends\": [\"@shopify/stylelint-polaris\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Quotation Marks in HTML\nDESCRIPTION: This HTML snippet styles single and double quotation marks with specific font size, line height, and vertical alignment properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<span\n    style={{\n      fontSize: '2rem',\n      lineHeight: 0,\n      verticalAlign: 'bottom',\n      display: 'inline-block',\n      height: 0,\n    }}\n  >'</span>\n```\n\n----------------------------------------\n\nTITLE: Structuring Sections in Polaris Component Documentation\nDESCRIPTION: This snippet shows how to create sections in the component documentation using heading level 2 preceded by a horizontal rule. It also demonstrates how to add keywords to a section and how to skip a section in the side navigation.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Component READMEs.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\n## I am a section heading\n\nContent goes here.\n\n---\n\n## I am a section heading\n\n<!-- keywords: one, two, three -->\n\n---\n\n## I am a section heading<!-- nav:skipsection -->\n```\n\n----------------------------------------\n\nTITLE: Search for AlphaFilters Component Instances in React\nDESCRIPTION: This JSX snippet is used for post-migration validation to identify remaining AlphaFilters component instances in the React project by locating its JSX tags.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_57\n\nLANGUAGE: jsx\nCODE:\n```\n<AlphaFilters\n```\n\n----------------------------------------\n\nTITLE: Avatar Size RegExp Validation\nDESCRIPTION: Regular expression to find outdated Avatar size prop values\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n<Avatar[^>\\w](?:[^>]|\\n)*?size\n```\n\n----------------------------------------\n\nTITLE: Validating Border Custom Property Migration (Regex)\nDESCRIPTION: This regular expression is used for post-migration validation to find any remaining instances of deprecated Polaris border custom properties (radius and width) across all file types. It helps ensure the migration script ran correctly and catches hardcoded values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_92\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-border-radius-0-experimental|--p-border-radius-05|--p-border-radius-1|--p-border-radius-1_5-experimental|--p-border-radius-2|--p-border-radius-3|--p-border-radius-4|--p-border-radius-5|--p-border-radius-6|--p-border-width-1|--p-border-width-1-experimental|--p-border-width-2|--p-border-width-2-experimental|--p-border-width-3|--p-border-width-4|--p-border-width-5)(?![\\w-])\n```\n\n----------------------------------------\n\nTITLE: Searching for Remaining AlphaTab Instances in React\nDESCRIPTION: JSX code snippet to search for any remaining instances of the AlphaTab component after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_63\n\nLANGUAGE: jsx\nCODE:\n```\n<AlphaTab\n```\n\n----------------------------------------\n\nTITLE: Displaying a Positive Example for Disabled States (JSX)\nDESCRIPTION: This snippet uses the Polaris 'Medium' component with the 'do' variant to show the correct application of the disabled color scheme, illustrated by a Markdown image link.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Medium variant=\"do\">\n    ![Detail shot of disabled elements in a form](/images/design/colors/color-using-color-disabled-do@2x.png)\n\n    Use the disabled color scheme for disabled elements.\n\n  </Medium>\n```\n\n----------------------------------------\n\nTITLE: Running the v9-styles-replace-custom-property-depth Migration\nDESCRIPTION: Command to execute the v9-styles-replace-custom-property-depth migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator v9-styles-replace-custom-property-depth <path>\n```\n\n----------------------------------------\n\nTITLE: Text Token Structure in CSS\nDESCRIPTION: Structure for text tokens that combine typography variants, sizes, and font properties for predefined text styles.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n--p-text-[variant-size]-[font-token-group-property]\n```\n\n----------------------------------------\n\nTITLE: Search for Card Component Instances in React\nDESCRIPTION: This JSX snippet is used for post-migration validation to identify any remaining instances of the Card component within a React project by searching for its JSX tag.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n<Card\n```\n\n----------------------------------------\n\nTITLE: Adjusting SCSS Breakpoint Max-Width Precision\nDESCRIPTION: Increases the `max-width` values used in SCSS breakpoint variables (like `$p-breakpoint-*-{down,only}` and specifically `$p-breakpoints-md-down`) by 0.01px. This adjustment ensures the values (e.g., changing from `47.996875em` to `47.9975em`) are representable with fewer digits of precision when converted to `em` units, avoiding rounding issues with tools like `node-sass`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: scss\nCODE:\n```\n$p-breakpoint-*-{down,only}\n```\n\nLANGUAGE: scss\nCODE:\n```\n$p-breakpoints-md-down\n```\n\nLANGUAGE: css\nCODE:\n```\nmax-width: 47.996875em\n```\n\nLANGUAGE: css\nCODE:\n```\nmax-width: 47.9975em\n```\n\n----------------------------------------\n\nTITLE: Adding Active State Tokens for Shopify Magic\nDESCRIPTION: Introduces new CSS design tokens specifically for representing the 'active' state within Shopify Magic UI variants. This enhances the visual feedback for interactions related to Magic features.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nactive state tokens Shopify Magic variants\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated --p-color-bg-app Token\nDESCRIPTION: Regular expression to identify any remaining instances of the deprecated --p-color-bg-app token after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_119\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-color-bg-app)(?![\\w-])\n```\n\n----------------------------------------\n\nTITLE: Badge status prop validation regex\nDESCRIPTION: Regular expression to validate usage of deprecated 'status' prop in Badge component after migration\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_9\n\nLANGUAGE: regex\nCODE:\n```\n<Badge[^>\\w](?:[^>]|\\n)*?status\n```\n\n----------------------------------------\n\nTITLE: Disallowed Z-Index Map Declaration in Sass\nDESCRIPTION: Example showing a disallowed pattern for declaring z-index elevation data using deprecated global elements map.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/z-index-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@type map $elevation-data: $global-elements;\n```\n\n----------------------------------------\n\nTITLE: Styling Quotation Mark in HTML\nDESCRIPTION: This HTML snippet styles a single quotation mark with specific font size, line height, and vertical alignment properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span\n    style={{\n      fontSize: '2rem',\n      lineHeight: 0,\n      verticalAlign: 'bottom',\n      display: 'inline-block',\n      height: 0,\n    }}\n  >'</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with Custom Property Disallowed List Plugin (Example 1)\nDESCRIPTION: JavaScript configuration example for Stylelint using the custom property disallowed list plugin. It demonstrates how to set up disallowed properties and disallowed values for specific CSS properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-disallowed-list/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stylelintConfig = {\n  rules: {\n    'polaris/custom-property-disallowed-list': {\n      disallowedProperties: ['--p-foo'],\n      disallowedValues: {\n        width: ['--p-foo', /--p-bar/ /* etc... */],\n        '/.+/': ['--p-foo', /--p-bar/ /* etc... */],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying non-border borderColor props in Divider components\nDESCRIPTION: A regular expression to find Divider components with a borderColor prop that doesn't use the 'border' prefix. This assists in detecting potential color-related issues in Divider components after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_76\n\nLANGUAGE: regex\nCODE:\n```\n<Divider[^>\\w](?:[^>]|\\n)*?borderColor(?!=\"border)\n```\n\n----------------------------------------\n\nTITLE: Rendering Current Patterns with RichCardGrid in JSX\nDESCRIPTION: Utilizes the Polaris `RichCardGrid` component to display a collection of current design patterns. The actual card data (content, links, images, etc.) is passed dynamically via the `cards` prop, which references the `posts` variable. This variable is expected to hold an array or object structured according to the `RichCardGrid` component's requirements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RichCardGrid cards={posts} />\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderBlockStartWidth Prop (Regex)\nDESCRIPTION: Use this regex pattern to locate instances of the `borderBlockStartWidth` prop on Polaris `<Box>` components during post-migration validation for v12 border styles.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_100\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderBlockStartWidth\n```\n\n----------------------------------------\n\nTITLE: Validating SkeletonPage breadcrumbs removal using Regex\nDESCRIPTION: Provides a regular expression to search across all file types for any remaining instances of the deprecated `breadcrumbs` prop used within the `SkeletonPage` component after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n<SkeletonPage[^>\\w](?:[^>]|\\n)*?breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Content using Polaris React Components (JSX)\nDESCRIPTION: This JSX snippet renders the introductory paragraph and a grid of cards for the feedback indicators documentation page. It utilizes the `<Lede>` component for the main description and `<RichCardGrid>` to display related content passed via the `cards={posts}` prop. These are likely custom components within the Shopify Polaris documentation system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Lede>\n\nInform merchants about the status of a process, provide feedback on actions and tasks, or indicate progress.\n\n</Lede>\n\n<RichCardGrid cards={posts} />\n```\n\n----------------------------------------\n\nTITLE: Running the styles-insert-stylelint-disable Migration\nDESCRIPTION: Command to execute the styles-insert-stylelint-disable migration script on a specific file path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_69\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator styles-insert-stylelint-disable <path>\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Polaris Token Group JSON (JavaScript/Node.js)\nDESCRIPTION: Shows how to directly access a specific group of tokens (e.g., spacing) by requiring its corresponding JSON file from the package's `dist/json` directory. This is useful in Node.js environments or build processes where direct JSON data is needed.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/README.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst spacing = require('@shopify/polaris-tokens/json/spacing.json');\n```\n\n----------------------------------------\n\nTITLE: Renaming AlphaTabs to Tabs in React\nDESCRIPTION: Diff showing the changes needed to rename the AlphaTabs component to Tabs, including renaming the component props interface.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n- <AlphaTabs prop />\n+ <Tabs prop />\n- export interface AlphaTabsProps {}\n+ export interface TabsProps {}\n```\n\n----------------------------------------\n\nTITLE: Building Unstyled Links in SCSS\nDESCRIPTION: This component removes default styles from links by setting the text color to inherit and removing text decorations. It ensures visited links also inherit colors, effectively creating a base style for unstyled links across applications with SCSS handling.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_11\n\nLANGUAGE: scss\nCODE:\n```\ncolor: inherit;\\ntext-decoration: none;\\n\\n&:visited {\\n  color: inherit;\\n}\n```\n\n----------------------------------------\n\nTITLE: Codemod for Converting Hard-Coded Rem Values in SCSS Files\nDESCRIPTION: A Node.js script that finds and converts hard-coded rem values in SCSS files to use the rem() function. The script scans all SCSS files in a specified directory, updates rem units based on the new font size standard, and provides statistics on the changes made.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v7-to-v8.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// node index.js <target-path>\n​\nimport fs from 'fs/promises'\nimport path from 'path'\nimport os from 'os'\n​\nimport pMap from 'p-map'\nimport { globby } from 'globby'\n​\nconst target = path.resolve(process.cwd(), process.argv[2])\n​\nconst stats = {\n  files: 0,\n  rems: 0,\n}\n​\nif (!target) {\n  console.log('Please specify a target directory')\n  process.exit(1)\n}\n​\nconst scssPaths = await globby('**/*.scss', {\n  cwd: target,\n  ignore: ['**/node_modules/**/*.scss'],\n  absolute: true,\n})\n​\nconsole.log(`Checking for rems in ${scssPaths.length} file(s)\\n`)\n​\nasync function replaceRems(filePath) {\n  let hasRems = false\n  const fileContent = await fs.readFile(filePath, { encoding: 'utf8' })\n  const remRegex = /(-?\\d+(?:\\.\\d+|\\d*))rem/g\n​\n  const newContent = fileContent.replace(remRegex, (_, unit) => {\n    hasRems = true\n    stats.rems++\n​\n    const value = parseFloat(unit) * 10 // Note: 1rem was previously 10px\n​\n    return `rem(${value}px)`\n  })\n​\n  if (hasRems) stats.files++\n​\n  await fs.writeFile(filePath, newContent)\n}\n​\nawait pMap(scssPaths, replaceRems, { concurrency: os.cpus().length })\n​\nconsole.log(`Updated ${stats.rems} rems in ${stats.files} files\\n`)\n​\nconsole.log('Done! 🌈')\n```\n\n----------------------------------------\n\nTITLE: Shadow Migration Step 1 Validation RegExp\nDESCRIPTION: Regular expressions to validate remaining instances of deprecated shadow custom properties and Box component usage after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_131\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-shadow-inset-lg|--p-shadow-inset-md|--p-shadow-inset-sm|--p-shadow-none|--p-shadow-xs|--p-shadow-sm|--p-shadow-md|--p-shadow-lg|--p-shadow-xl|--p-shadow-2xl|--p-shadow-bevel-experimental|--p-shadow-card-sm-experimental|--p-shadow-card-md-experimental|--p-shadow-card-lg-experimental|--p-shadow-button-experimental|--p-shadow-button-hover-experimental|--p-shadow-button-disabled-experimental|--p-shadow-button-primary-strong-experimental|--p-shadow-button-primary-strong-inset-experimental|--p-shadow-button-primary-strong-hover-experimental|--p-shadow-border-inset-experimental)(?![\\w-])\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?shadow\n```\n\n----------------------------------------\n\nTITLE: Using Filter Value Constants in CSS - CSS\nDESCRIPTION: This snippet shows how to use the provided CSS filter string directly in a stylesheet or inline style to replicate the original filter() effect. The developer replaces calls to filter() with the corresponding CSS filter value as documented in the table, which can be set as a value for the filter property. This method is CSS-only and requires the value to be copied as-is from the documentation. Ensure that the exact filter string matches the intended color effect.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* Replacement for filter('purple', 'text') */\nfilter: brightness(0) saturate(100%) invert(29%) sepia(3%) saturate(2843%) hue-rotate(223deg) brightness(92%) contrast(86%);\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Replacement for filter('blue') or filter('blue', 'base') */\nfilter: brightness(0) saturate(100%) invert(19%) sepia(98%) saturate(2885%) hue-rotate(190deg) brightness(99%) contrast(101%);\n```\n\n----------------------------------------\n\nTITLE: Transitioning CSS Properties Using Motion Custom Properties\nDESCRIPTION: Demonstrates the correct usage of modern motion custom properties (--p-motion-*) versus deprecated legacy properties (--p-*) for CSS transitions. The rule enforces using --p-motion-duration-500 and --p-motion-ease instead of their legacy counterparts.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/motion-custom-property-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Do\ntransition: var(--p-motion-duration-500) var(--p-motion-ease);\n// Don't\ntransition: var(--p-duration-500) var(--p-ease);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Checkbox Implementation in HTML\nDESCRIPTION: Example showing an incorrect way to implement a checkbox with separate label and input elements. This approach uses htmlFor but places the checkbox after the label text, creating a poor user experience.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  <label htmlFor=\"Agree\">You agree the terms and conditions</label>\n  <input name=\"Agree\" type=\"checkbox\" id=\"Agree\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint for Custom Property Allowed List in JavaScript\nDESCRIPTION: Demonstrates how to configure the Stylelint rule with allowedProperties and allowedValues options.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-allowed-list/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst stylelintConfig = {\n  rules: {\n    'polaris/custom-property-allowed-list': {\n      allowedProperties: ['/--pc-.+/'],\n      allowedValues: {\n        width: ['--p-space-0', '--p-space-100' /* etc... */],\n        '/.+/': ['/--pc-.+/', '--p-space-0', '--p-space-100' /* etc... */],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Validating DescriptionList Spacing Prop Update\nDESCRIPTION: This regular expression can be used to check for outdated DescriptionList spacing props after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_25\n\nLANGUAGE: regex\nCODE:\n```\n<DescriptionList[^>\\w](?:[^>]|\\n)*?spacing\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Divider borderColor Prop\nDESCRIPTION: Regular expression to check for outdated usage of the borderColor prop in Divider components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_123\n\nLANGUAGE: regex\nCODE:\n```\n<Divider[^>\\w](?:[^>]|\\n)*?borderColor\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated ShadowBevel borderRadius Prop (Regex)\nDESCRIPTION: This regular expression searches for the `borderRadius` prop used on the Polaris `<ShadowBevel>` component, potentially indicating usage of deprecated tokens that need checking after the v12 migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_105\n\nLANGUAGE: regex\nCODE:\n```\n<ShadowBevel[^>\\w](?:[^>]|\\n)*?borderRadius\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderStartStartRadius Prop (Regex)\nDESCRIPTION: This regex is used during post-migration validation to identify the `borderStartStartRadius` prop on Polaris `<Box>` components, ensuring it aligns with the updated v12 border styles.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_97\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderStartStartRadius\n```\n\n----------------------------------------\n\nTITLE: Setting up Preview Context Wrapper in JavaScript/JSX\nDESCRIPTION: This snippet defines a JSX wrapper used for previewing a component. It creates a styled `div` element with padding and a fixed height to contain the rendered component, indicated by the `(____CODE____)()` placeholder.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-index-layout/variants/default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<div style={{ padding: '2rem', height: '600px' }}>\n  {(____CODE____)()}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sandbox Interface Components Initialization JavaScript\nDESCRIPTION: The snippet contains a configuration of a sandbox environment that utilizes Polaris components. The URL defines specific parameters encoded to initialize this environment, allowing for effortless prototyping and adjustment. Make sure Polaris components are globally accessible when setting up this environment.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/sandbox.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nurl: /sandbox?code=N4Igxg9gJgpiBcIA8AZGBzAhmAngYUwCcoAdAOwAIKBnGSMqInAMQggBcZCBBMdgSwhlqAXmABtYBXqcy7eBRIgAIv2oBbNdSUUAvgF1d5KgAdC-dU1YcuvAULFSZMOQqUBRAB4mIhdhQAlGB8-HV0jMgA%2BYwpUDGx8IigAOgAJGExYQhiqbHthMXEcqgpgYpLpIVl5RRAAFQ5MABsKAGVmmG0QABpyvV7KEsNigXYmmBEldvGumOjBqiQABQgfADcuPrz%2BDbEAM2baCIrcvh3Mdl8xPsWAIQBXdkvKKDUwJohqe8IYChMmzD8KI3EoANX4MAA7m0OtoFickAB6B5PITzE56PpCPAfWhiAAUAEoKCJIqVwsV0Qi7IIyCg1OwQfxOOpRBInFUXDUlABxQifagwmZhbqlSpyLluEAAORg-mmnTCw3hVERVMWiJW6y4VKRaCwuAIxDSGSyuv1CSNKVadHy6tidRgnnYeCqgLIOr6AE0IPdpJhKPdaDRYRQfiF2ILLjQYL8gXtfJZ8hRMAAjX3%2BHC%2BwjSIOXdRcaiATAIscRCxRU5haFAKEJpOZOOZMDR7mAABYpwXUUMQDY5gQF0WpnDSNsBj1NUW%2BCs4PrUdiYPZ7ZLFJGO52uuTuz2DPXxQ1JZI2s5omJxA2JY3H5OjcaTeqNFoKwW3H6YADWUAgkLISntSCCahszAGB6XnPofiA74QOlTAC0cGggXQe4AUIKVu3GJRRX%2Bb5mnQ2EwmOE5mRgVlChBMoVRODDOilAB5MtCC6AYMQqODfVcWoAFVWmUAASAAGZIBIErCQSob4milABiMSqKoXQWNYyjWJKGjqClIJ2G%2BYQ5NU3J1A47kQAAWh4-iACYAFYhJEvT9MkmT7IxRS%2BmVDEfgYLgAEkWQJEj1GJUlShBeh5zFdTRXY%2B45FFSS9BJCgAoAbhBH5tMISh8XE2JAOA0CGWSXzSJyqh%2BCgMR1OSS4UAgMAOlqyEuAIWgiSI-SKEksRJPa-TsBA6hqH4VN%2BCaZkcBQNMYCaMQAANwShIVOgoBMcz44B1N0WbetU7ExrAd8CSCskwogcZkg%2BdBsvAfb3xgGsAqwpKWUJHaTntVTzwSVoFwOj79K%2B3Afuwd8ipZFbRqaSINthXQ9wvYGDrB0j-s%2Bi0gd%2B0HivUaHorkOHEXRnBEaxllUYRQn92JzHyY1PLoIK%2BdkZxkFCVSqiKXhNUz0pi8rSPW1aXNKn%2BevWkKFvCYlGUDIzjWC57rDYJfEjHQvlTKB7nu-8wPYf7UEK7HIiWTAs0eag9UNsm%2BgNpmjYaBcn1DW4RzwMcyAnS27et%2BEvb1nmidFwXT13QPDzFutJfvaUbD-Vd1xdN0gR3DE6jbX51KViNBSIX5MHl0a03GWsyCaEd%2BD2CgzZzedfDjQVI-Tto21WCvZyo-4A1rHM234dB08IFdfcRBPNwXZPCF1XnLXD4PgTIeGZ%2BIeYehAdh04LagEHEEAPnq8Z4BcEB9G6EBIXK9et-gcRDCAA\n```\n\n----------------------------------------\n\nTITLE: Updating PSE23 Magic Color Values\nDESCRIPTION: Updates the values associated with 'magic colors' for the PSE23 (presumably Polaris Summer Edition 2023) initiative. This indicates adjustments to specific color tokens used for features related to Shopify Magic.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmagic colors\n```\n\n----------------------------------------\n\nTITLE: Updating Token Import in JavaScript\nDESCRIPTION: This diff shows how to update the import of token values from directly importing 'tokens' to using the 'useTheme' hook in Polaris v11.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_141\n\nLANGUAGE: diff\nCODE:\n```\n- import {tokens} from '@shopify/polaris-tokens';\n+ import {useTheme} from '@shopify/polaris';\n\n+ const theme = useTheme();\n\n- tokens.space['1'];\n+ theme.space['100'];\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Details patch changes made to the Polaris design system including pull request references, commit hashes, and descriptions of changes.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6821](https://github.com/Shopify/polaris/pull/6821) [`09a90c674`](https://github.com/Shopify/polaris/commit/09a90c674fddc3c7afcefb6403cceba95b815399) Thanks [@alex-page](https://github.com/alex-page)! - Fix content on naming page\n\n* [#6832](https://github.com/Shopify/polaris/pull/6832) [`c4047b30f`](https://github.com/Shopify/polaris/commit/c4047b30f5738dc293e7632e529fb57572b7b0d1) Thanks [@alex-page](https://github.com/alex-page)! - Use description and title front matter for pages rendered from /content\n```\n\n----------------------------------------\n\nTITLE: Defining Unstyled List in SCSS\nDESCRIPTION: This snippet removes default margins, padding, and list-style for lists, enabling developers to start with a clean slate to apply their custom styles. Its application is crucial for creating consistent UI components that align with specific design requirements.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v8-to-v9.md#2025-04-22_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\nmargin: 0;\\npadding: 0;\\nlist-style: none;\n```\n\n----------------------------------------\n\nTITLE: Displaying Motion Token Deprecations in Markdown\nDESCRIPTION: A markdown table showing deprecated motion tokens and their replacement values. This includes various CSS custom properties for animations and transitions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated Token             | Replacement Value                   |\n| ---------------------------- | ----------------------------------- |\n| `--p-linear`                 | `--p-motion-linear`                 |\n| `--p-ease-in-out`            | `--p-motion-ease-in-out`            |\n| `--p-ease-out`               | `--p-motion-ease-out`               |\n| `--p-ease-in`                | `--p-motion-ease-in`                |\n| `--p-ease`                   | `--p-motion-ease`                   |\n| `--p-duration-0`             | `--p-motion-duration-0`             |\n| `--p-duration-50`            | `--p-motion-duration-50`            |\n| `--p-duration-100`           | `--p-motion-duration-100`           |\n| `--p-duration-150`           | `--p-motion-duration-150`           |\n| `--p-duration-200`           | `--p-motion-duration-200`           |\n| `--p-duration-250`           | `--p-motion-duration-250`           |\n| `--p-duration-300`           | `--p-motion-duration-300`           |\n| `--p-duration-350`           | `--p-motion-duration-350`           |\n| `--p-duration-400`           | `--p-motion-duration-400`           |\n| `--p-duration-450`           | `--p-motion-duration-450`           |\n| `--p-duration-500`           | `--p-motion-duration-500`           |\n| `--p-duration-5000`          | `--p-motion-duration-5000`          |\n| `--p-keyframes-bounce`       | `--p-motion-keyframes-bounce`       |\n| `--p-keyframes-fade-in`      | `--p-motion-keyframes-fade-in`      |\n| `--p-keyframes-pulse`        | `--p-motion-keyframes-pulse`        |\n| `--p-keyframes-spin`         | `--p-motion-keyframes-spin`         |\n| `--p-keyframes-appear-above` | `--p-motion-keyframes-appear-above` |\n| `--p-keyframes-appear-below` | `--p-motion-keyframes-appear-below` |\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Polaris Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about Shopify Polaris design system updates. Defines metadata including title, description, preview image, order, URL, and relevant keywords related to layout components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/uplifting-shopify-polaris.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Uplifting Shopify Polaris\ndescription: The process of evolving a large scale design system.\npreviewImg: /images/updates/uplift-blogpost@2x.png\norder: 1\nurl: https://ux.shopify.com/uplifting-shopify-polaris-7c54fc6564d9\nkeywords:\n  - layout\n  - bleed\n  - box\n  - card\n  - divider\n  - grid\n  - horizontal grid\n  - horizontal stack\n  - vertical stack\n---\n```\n\n----------------------------------------\n\nTITLE: Automating SkeletonPage breadcrumbs prop update using Shell\nDESCRIPTION: Provides the shell command to run the `@shopify/polaris-migrator` tool for automatically renaming the `breadcrumbs` prop to `backAction` within `SkeletonPage` components across the specified project path.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component-prop --componentName=\"SkeletonPage\" --from=\"breadcrumbs\" --to=\"backAction\" <path>\n```\n\n----------------------------------------\n\nTITLE: Using Polaris Tokens Instead of Legacy Sass Variables\nDESCRIPTION: This example demonstrates how to replace legacy Sass variables with modern Polaris tokens. It shows replacing the outdated Sass variable '$timeline-border-width' with the appropriate Polaris token 'var(--p-space-100)' in a calculation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/legacy-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ left: calc(-1 * var(--p-space-100));\n// Don't\n- left: -1 * $timeline-border-width;\n```\n\n----------------------------------------\n\nTITLE: Regex Validation for Outdated ProgressBar Color Prop\nDESCRIPTION: Regex pattern to locate deprecated ProgressBar 'color' prop usage. Useful for verifying that migrations have successfully updated the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_76\n\nLANGUAGE: regex\nCODE:\n```\n<ProgressBar[^>\\w](?:[^>]|\\n)*?color\n```\n\n----------------------------------------\n\nTITLE: Including Polaris CSS in HTML\nDESCRIPTION: Includes the Polaris CSS styles in an HTML document using a link tag. This approach is used when direct CSS imports aren't supported.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"styles.css\" />\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderStartEndRadius Prop (Regex)\nDESCRIPTION: This pattern helps find potentially outdated `borderStartEndRadius` props on Polaris `<Box>` components after running the v12 border custom property migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_98\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderStartEndRadius\n```\n\n----------------------------------------\n\nTITLE: Rendering Width Tokens using React JSX\nDESCRIPTION: This JSX snippet dynamically generates a list of width design tokens. It maps over an array `tokens.width`, rendering a `TokenList.Item` component for each token object. Key properties like `key`, `category`, and the `token` object itself are passed as props to the child component. It relies on the availability of `tokens.width` data and the `TokenList` and `TokenList.Item` React components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/width.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TokenList>\n  {tokens.width\n    .map((token) => (\n      <TokenList.Item\n        key={token.name}\n        category=\"width\"\n        token={token}\n      />\n    ))}\n</TokenList>\n```\n\n----------------------------------------\n\nTITLE: Validation RegExp for Space Custom Properties\nDESCRIPTION: Regular expression pattern to validate any remaining deprecated space custom properties\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_135\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-space-05|--p-space-1|--p-space-1_5-experimental|--p-space-2|--p-space-3|--p-space-4|--p-space-5|--p-space-6|--p-space-8|--p-space-10|--p-space-12|--p-space-16 |--p-space-20 |--p-space-24|--p-space-28 |--p-space-32)(?![\\w-])\n```\n\n----------------------------------------\n\nTITLE: Regex for Outdated Text Warning Color\nDESCRIPTION: Regex patterns to find deprecated Text 'color=\"warning\"' and 'tone=\"warning\"' props. Necessary for checking the pre-migration state and ensuring post-migration consistency.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_78\n\nLANGUAGE: regex\nCODE:\n```\n<Text[^>\\w](?:[^>]|\\n)*?color=\"warning\"\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Text[^>\\w](?:[^>]|\\n)*?tone=\"warning\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Token Navigation and Token List UI with React and JSX - JavaScript\nDESCRIPTION: Renders a navigation element for selecting the z-index category using a custom TokensNav component, and then dynamically maps over the zIndex tokens array to generate a TokenList of Item components. Requires React as well as the custom components TokensNav, TokenList, and the tokens data object. Expects tokens[\"zIndex\"] to be an array of token objects with a unique name property, and each item is categorized under z-index. Outputs a rendered list UI with unique keys per item.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/z-index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<TokensNav selected=\"z-index\" />\n\n<TokenList>\n  {tokens['zIndex']\n    .map((token) => (\n      <TokenList.Item\n        key={token.name}\n        category=\"z-index\"\n        token={token}\n      />\n    ))}\n</TokenList>\n```\n\n----------------------------------------\n\nTITLE: Styling Special Characters in React/JSX\nDESCRIPTION: Example showing styled apostrophe character with inline JSX styling. The code applies specific styling to make the apostrophe character more visible, including adjustments to font size, positioning, and display properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<span\n    style={{\n      fontSize: '2rem',\n      lineHeight: 0,\n      verticalAlign: 'bottom',\n      display: 'inline-block',\n      height: 0,\n    }}\n  >'</span>\n  <kbd>option</kbd> + <kbd>shift</kbd> + <kbd>]</kbd>\n```\n\n----------------------------------------\n\nTITLE: Fixing Experimental Transparent Background CSS Variable\nDESCRIPTION: Corrects the value assigned to the experimental CSS variable `bg-transparent-experimental`. This ensures elements using this token render with the intended transparent background.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbg-transparent-experimental\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Validating HorizontalStack Rename\nDESCRIPTION: This regular expression can be used to check for outdated HorizontalStack component usage after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_31\n\nLANGUAGE: regex\nCODE:\n```\nHorizontalStack\n```\n\n----------------------------------------\n\nTITLE: Displaying Z-index Token Deprecations in Markdown\nDESCRIPTION: A markdown table showing deprecated z-index tokens and their replacement values. This includes various CSS custom properties for controlling element stacking order.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-11-tokens.mdx#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Deprecated Token | Replacement Value |\n| ---------------- | ----------------- |\n| `--p-z-1`        | `--p-z-index-1`   |\n| `--p-z-2`        | `--p-z-index-2`   |\n| `--p-z-3`        | `--p-z-index-3`   |\n| `--p-z-4`        | `--p-z-index-4`   |\n| `--p-z-5`        | `--p-z-index-5`   |\n| `--p-z-6`        | `--p-z-index-6`   |\n| `--p-z-7`        | `--p-z-index-7`   |\n| `--p-z-8`        | `--p-z-index-8`   |\n| `--p-z-9`        | `--p-z-index-9`   |\n| `--p-z-10`       | `--p-z-index-10`  |\n| `--p-z-11`       | `--p-z-index-11`  |\n| `--p-z-12`       | `--p-z-index-12`  |\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Utilities Documentation in Markdown\nDESCRIPTION: This code snippet defines the frontmatter for the Utilities documentation page. It sets the title, expansion state, order, and preview image for the page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Utilities\nexpanded: true\norder: 11\npreviewImg: /images/components/utilities.png\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering the Tokens Navigation Component (JSX)\nDESCRIPTION: This JSX snippet renders the `TokensNav` component, passing the string \"border\" to the `selected` prop. This likely highlights the \"Border\" category within the token navigation interface. It depends on the `TokensNav` component being defined and imported.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tokens/border.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TokensNav selected=\"border\" />\n```\n\n----------------------------------------\n\nTITLE: Converting Legacy Sass Mixin to React Component\nDESCRIPTION: Demonstrates the preferred approach of using UnstyledButton component instead of the legacy unstyled-button Sass mixin\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/legacy-at-rule-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ <UnstyledButton />\n// Don't\n- @include unstyled-button;\n```\n\n----------------------------------------\n\nTITLE: Regex for Outdated TextField Borderless Prop\nDESCRIPTION: Regex used to discover deprecated <TextField borderless /> instances. Helps ensure that the migration has appropriately updated all such occurrences.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_86\n\nLANGUAGE: regex\nCODE:\n```\n<TextField[^>\\w](?:[^>]|\\n)*?borderless\n```\n\n----------------------------------------\n\nTITLE: Rendering Variants with React in MDX\nDESCRIPTION: This snippet renders the <Variants> React component, passing in variant metadata from frontmatter within the MDX file. It enables dynamic selection and display of content variants for the documentation page. Dependencies include React support within the MDX environment, and the presence of a properly configured Variants component as well as the frontmatter. The main parameter is variants, holding an array of variant file paths to include; no output is returned except for the side effect of rendering the variant content on the page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/common-actions/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Variants variants={frontmatter.variants} />\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Box Background Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the background prop in Box components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_110\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?background\n```\n\n----------------------------------------\n\nTITLE: Width Token Structure in CSS\nDESCRIPTION: Structure for width tokens that define consistent width values across the design system using a scale system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n--p-width-[alias-or-scale]\n```\n\n----------------------------------------\n\nTITLE: Identifying non-text color props in Box components\nDESCRIPTION: A regular expression to find Box components with a color prop that doesn't use the 'text' prefix. This helps detect potential color-related issues in Box components after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_73\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?color(?!=\"text)\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Box outlineColor Prop\nDESCRIPTION: Regular expression to check for outdated usage of the outlineColor prop in Box components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_118\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?outlineColor\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Polaris Website\nDESCRIPTION: Commands to install dependencies and start the development server for the Polaris website.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Regex Validation for Outdated FullScreen Prop\nDESCRIPTION: Regex pattern to find outdated <Modal fullScreen /> prop usage. Useful for post-migration checks. Targets all instances of 'fullScreen' in Modal components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_73\n\nLANGUAGE: regex\nCODE:\n```\n<Modal[^>\\w](?:[^>]|\\n)*?fullScreen\n```\n\n----------------------------------------\n\nTITLE: Navigation Item Type Definition - TypeScript\nDESCRIPTION: Type definitions for main navigation item properties, including URL handling, matching behavior, visual elements, and interaction callbacks.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/internal-only/navigation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavigationItem {\n  url?: string;\n  matches?: boolean;\n  exactMatch?: boolean;\n  matchPaths?: string[];\n  excludePaths?: string[];\n  icon?: IconProps['source'];\n  badge?: string | null;\n  label: string;\n  disabled?: boolean;\n  new?: boolean;\n  accessibilityLabel?: string;\n  selected?: boolean;\n  shouldResizeIcon?: boolean;\n  subNavigationItems?: SubNavigationItem[];\n  secondaryAction?: SecondaryAction;\n  secondaryActions?: SecondaryAction[];\n  onClick?: () => void;\n  truncateText?: boolean;\n  displayActionsOnHover?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Space Token Structure in CSS\nDESCRIPTION: Structure for spacing tokens that define consistent spacing using a scale system or specific component contexts.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n--p-space-[alias-or-scale]\n```\n\n----------------------------------------\n\nTITLE: Search for AlphaCard Component Instances in React\nDESCRIPTION: This JSX snippet is used for post-migration validation to find remaining usages of AlphaCard components by locating its JSX tags within the React project.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_53\n\nLANGUAGE: jsx\nCODE:\n```\n<AlphaCard\n```\n\n----------------------------------------\n\nTITLE: RegExp for Finding Deprecated Motion Custom Properties (RegExp)\nDESCRIPTION: A regular expression that matches all deprecated motion-related CSS custom properties in source files. Use in post-migration validation to discover any lingering usage of old 'motion' tokens not caught by automated tools. Expected input is the text content of source files; output is any matches found. Limitations include possible false positives if used without context.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_81\n\nLANGUAGE: regexp\nCODE:\n```\n```\\n--p-duration-0|--p-duration-50|--p-duration-100|--p-duration-150|--p-duration-200|--p-duration-250|--p-duration-300|--p-duration-350|--p-duration-400|--p-duration-450|--p-duration-500|--p-duration-5000|--p-ease|--p-ease-in|--p-ease-out|--p-ease-in-out|--p-linear|--p-keyframes-bounce|--p-keyframes-fade-in|--p-keyframes-pulse|--p-keyframes-spin|--p-keyframes-appear-above|--p-keyframes-appear-below\\n```\n```\n\n----------------------------------------\n\nTITLE: Styling Ellipsis Character in HTML\nDESCRIPTION: This HTML snippet displays the ellipsis character with specific font size, line height, and background color properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/grammar-and-mechanics.mdx#2025-04-22_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<code\n  style={{\n    fontSize: '2rem',\n    lineHeight: 0,\n    backgroundColor: 'transparent',\n  }}\n>…</code>\n```\n\n----------------------------------------\n\nTITLE: Icon Usage Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the icons documentation page, defining metadata like title, description, icon reference and relevant keywords for search optimization.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/icons/using-icons.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Using icons\ndescription: Icons enhance an experience by providing intuitive and efficient navigation, conveying information concisely, and making it more visually appealing.\nicon: PaintBrushFlatIcon\nkeywords:\n  - shopify icons\n  - icon sets\n  - icon designs\n  - icon guidelines\n  - icon standards\n  - iconography\n  - visual helpers\n  - minor icons\n  - major icons\n  - inline icons\n  - in-line icons\n  - main navigation icons\n  - main nav icons\n  - icons in nav\n  - icons in main nav\n  - icon colors\n---\n```\n\n----------------------------------------\n\nTITLE: Private Token Usage Prevention\nDESCRIPTION: Illustrates the proper usage of public Polaris tokens instead of private (--pc-) tokens in property values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/conventions-custom-property-allowed-list.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ background: var(--p-color-bg-fill-inverse);\n// Don't\n- background: var(--pc-button-color-depressed);\n```\n\n----------------------------------------\n\nTITLE: Removing Page Divider Prop\nDESCRIPTION: Regex pattern for detecting use of the outdated <Page divider /> prop. Validates removal of deprecated divider prop in the Page component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_74\n\nLANGUAGE: regex\nCODE:\n```\n<Page[^>\\w](?:[^>]|\\n)*?divider\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Token in Sass\nDESCRIPTION: Example of how to reference a color token in Sass after the removal of the '-base' suffix in version 2.0.0.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: scss\nCODE:\n```\n$color-ink\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Options Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the plugin's primary options, specifying the structure for at-rule restrictions.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/at-rule-disallowed-list/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PrimaryOptions {\n  /**\n   * A map of at-rule names and disallowed at-rule identifiers represented as a list\n   * of regular expressions or string literals.\n   */\n  [atRuleName: string]: (string | RegExp)[];\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Width Tokens in CSS\nDESCRIPTION: Examples of width tokens with incremental scale values for consistent sizing.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/polaris-tokens-structure.md#2025-04-22_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n--p-width-100\n--p-width-200\n--p-width-300\n```\n\n----------------------------------------\n\nTITLE: Font Size Token Table in Markdown\nDESCRIPTION: A markdown table showing the mapping between new and old font size tokens with their corresponding pixel and rem values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-10-typography.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| New token         | Old token        | px value | rem value |\n| ----------------- | ---------------- | -------- | --------- |\n| --p-font-size-75  | --p-font-size-1  | 12       | 0.75      |\n| -                 | --p-font-size-2  | 13       | 0.8125    |\n| --p-font-size-100 | --p-font-size-3  | 14       | 0.875     |\n| -                 | --p-font-size-4  | 15       | 0.9375    |\n| --p-font-size-200 | --p-font-size-5  | 16       | 1         |\n| -                 | --p-font-size-6  | 17       | 1.0625    |\n| --p-font-size-300 | --p-font-size-7  | 20       | 1.25      |\n| -                 | --p-font-size-8  | 21       | 1.3125    |\n| --p-font-size-400 | --p-font-size-9  | 24       | 1.50      |\n| -                 | --p-font-size-10 | 26       | 1.625     |\n| -                 | --p-font-size-11 | 27       | 1.6875    |\n| --p-font-size-600 | --p-font-size-12 | 28       | 1.75      |\n| --p-font-size-500 | -                | 32       | 2         |\n| --p-font-size-700 | -                | 40       | 2.5       |\n```\n\n----------------------------------------\n\nTITLE: Renaming Components with react-rename-component\nDESCRIPTION: A generic codemod to rename any component and its prop type throughout a codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_70\n\nLANGUAGE: diff\nCODE:\n```\n- <MyComponent prop />\n+ <MyRenamedComponent prop />\n- export interface MyComponentPropType {}\n+ export interface MyRenamedComponentPropType {}\n```\n\n----------------------------------------\n\nTITLE: Running Polaris Icons Migration Script\nDESCRIPTION: Command to run the Polaris migrator tool to update icon names to the latest version (v8). This script helps automatically convert old icon names to the new naming convention throughout a codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-icons/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @shopify/polaris-migrator icons-v8-update-names <path>\n```\n\n----------------------------------------\n\nTITLE: Validating Outdated Box color Prop\nDESCRIPTION: Regular expression to check for outdated usage of the color prop in Box components after migration step 2.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_125\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?color\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Decision Flowchart in React/JSX\nDESCRIPTION: React iframe component that embeds a Figma flowchart to help contributors decide whether their solution is appropriate for Polaris. The flowchart is embedded with specific styling and dimensions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  style={{border: '1px solid rgba(0, 0, 0, 0.1)'}}\n  width=\"800\"\n  height=\"450\"\n  src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FAJNvON5VAAG5vZAnX6iuVJ%2FShould-I-contribute-to-Polaris%253F%3Fnode-id%3D0%253A1%26t%3DsSVh7oVMUM9KXOnB-1\"\n  allowFullScreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Validating HorizontalGrid Rename\nDESCRIPTION: This regular expression can be used to check for outdated HorizontalGrid component usage after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_28\n\nLANGUAGE: regex\nCODE:\n```\nHorizontalGrid\n```\n\n----------------------------------------\n\nTITLE: Searching for React Instances of Deprecated Components in JSX\nDESCRIPTION: JSX code snippet showing how to search for instances of deprecated components like Heading in React code.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading\n```\n\n----------------------------------------\n\nTITLE: Structuring Page Layout with Polaris Stack Component in JSX\nDESCRIPTION: Utilizes the Polaris `Stack` component as the main layout container for the page content. The `gap=\"800\"` prop applies vertical spacing, likely based on the Polaris theme's spacing scale (e.g., 800 = 20px), between its direct children elements. It wraps the entire visible content of the page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack gap=\"800\">\n\n  {/* ... page content ... */}\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for New Section Landing Page\nDESCRIPTION: Example directory structure for creating a new section with a landing page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/README.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n├── content\n│   ├── your-new-section\n│   │   ├── index.md\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Card Grid for Version Guides\nDESCRIPTION: Utilizes a RichCardGrid component to display posts related to version guides.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<RichCardGrid cards={posts} category=\"version-guides\" />\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderWidth Prop (Regex)\nDESCRIPTION: This regular expression searches for the `borderWidth` prop on Polaris `<Box>` components. It's part of the validation process to ensure consistency after migrating deprecated border width custom properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_99\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderWidth\n```\n\n----------------------------------------\n\nTITLE: Adding Provenance Statement in Changelog\nDESCRIPTION: This code snippet shows how a provenance statement is added to the changelog. It includes the pull request number, commit hash, and thanks to the contributor.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#13318](https://github.com/Shopify/polaris/pull/13318) [`cdb617a`](https://github.com/Shopify/polaris/commit/cdb617a9624215836e25975cc4c371b941e6178a) Thanks [@alex-page](https://github.com/alex-page)! - Add provenance statement\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Options Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the plugin's primary options, including allowedProperties and allowedValues.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-allowed-list/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PrimaryOptions {\n  /**\n   * A list of regular expressions or string literals that match custom properties\n   * that are allowed to be used.\n   */\n  allowedProperties?: (string | RegExp)[];\n  /**\n   * A map of properties and their allowed custom properties represented as a list\n   * of regular expressions or string literals.\n   */\n  allowedValues?: {[property: string]: (string | RegExp)[]};\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Stylelint Polaris\nDESCRIPTION: Commands for testing Stylelint Polaris updates in polaris-react.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm build -- --filter=@shopify/polaris^...\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm turbo run lint:styles --filter=@shopify/polaris\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Page Title and Description in JSX for Shopify Polaris\nDESCRIPTION: This JSX snippet renders the page title and description using Markdown syntax and a custom Lede component. It utilizes frontmatter data to populate the content.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# {frontmatter.title}\n\n<Lede>{frontmatter.description}</Lede>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with Custom Property Disallowed List Plugin (Example 2)\nDESCRIPTION: Another JavaScript configuration example for Stylelint, showing how to use predefined arrays of disallowed properties and apply them to specific CSS properties like 'border'. It also demonstrates using regular expressions for property matching.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/custom-property-disallowed-list/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst disallowedVarsBorder = [\n  // Legacy custom properties\n  '--p-foo',\n  '--p-bar',\n];\n\nconst stylelintOptions = {\n  border: [\n    {\n      'polaris/custom-property-disallowed-list': {\n        disallowedProperties: disallowedVarsBorder,\n        disallowedValues: {'/.+/': disallowedVarsBorder},\n      },\n    },\n  ],\n```\n\n----------------------------------------\n\nTITLE: Running react-rename-component Migration for AlphaTabProps\nDESCRIPTION: Shell command to run the Polaris migrator tool for renaming AlphaTabProps to TabProps.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_62\n\nLANGUAGE: sh\nCODE:\n```\nnpx @shopify/polaris-migrator react-rename-component <path> --renamePropsFrom=\"AlphaTabProps\" --renamePropsTo=\"TabProps\"\n```\n\n----------------------------------------\n\nTITLE: Searching for CSS Class Overrides of Deprecated Components\nDESCRIPTION: CSS code snippet showing how to search for class overrides of deprecated components like Heading in stylesheets.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_20\n\nLANGUAGE: css\nCODE:\n```\nPolaris-Heading\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSDoc Tags Usage in JavaScript\nDESCRIPTION: This snippet shows how to include JSDoc tags to describe default prop values in JavaScript code. It's an example of the recommended documentation practice for the Shopify Polaris project.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Code style guide.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @param {string} [name='John'] - The name of the user\n * @param {number} [age=30] - The age of the user\n */\nfunction greetUser(name = 'John', age = 30) {\n  console.log(`Hello, ${name}! You are ${age} years old.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Frontmatter Description with Lede Component\nDESCRIPTION: Uses a custom Lede component to display the description from the frontmatter.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Lede>{frontmatter.description}</Lede>\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Actions Documentation in Markdown\nDESCRIPTION: This code snippet defines the frontmatter for the Actions documentation page. It includes metadata such as title, short description, expanded state, order, and preview image path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/actions/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Actions\nshortDescription: Perform tasks or take actions within the Shopify admin.\nexpanded: true\norder: 1\npreviewImg: /images/components/actions.png\n---\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Icon color prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of Icon components with color property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_42\n\nLANGUAGE: regex\nCODE:\n```\n<Icon[^>\\w](?:[^>]|\\n)*?color\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Validating ButtonGroup Spacing Prop Update\nDESCRIPTION: This regular expression can be used to check for outdated ButtonGroup spacing props after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_19\n\nLANGUAGE: regex\nCODE:\n```\n<ButtonGroup[^>\\w](?:[^>]|\\n)*?spacing\n```\n\n----------------------------------------\n\nTITLE: Installing Polaris React with Yarn\nDESCRIPTION: Command to install the Polaris React component library using Yarn package manager.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @shopify/polaris\n```\n\n----------------------------------------\n\nTITLE: Regex for Outdated Text Variant Prop\nDESCRIPTION: Regex to find usage of outdated Text 'variant=\"headingXs\"'. Employs to validate the migration process and directly targets specific component prop versions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_82\n\nLANGUAGE: regex\nCODE:\n```\n<Text[^>\\w](?:[^>]|\\n)*?variant=\"headingXs\"\n```\n\n----------------------------------------\n\nTITLE: Creating Project Change Log in Markdown\nDESCRIPTION: A markdown formatted changelog documenting various pull requests and their associated changes to the Polaris project, including UI updates, documentation improvements, and website feature additions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6246](https://github.com/Shopify/polaris/pull/6246) [`8360c47bc`](https://github.com/Shopify/polaris/commit/8360c47bcb28d2ce5f504d109b7c77c8efe5bbb1) Thanks [@martenbjork](https://github.com/martenbjork)! - Update copy of welcome banner\n\n* [#6265](https://github.com/Shopify/polaris/pull/6265) [`31d802b9c`](https://github.com/Shopify/polaris/commit/31d802b9c6420a5e77a16a10e18a0bcf0395f14c) Thanks [@romellogoodman](https://github.com/romellogoodman)! - Update exaples to expand to the full height of the iframe\n```\n\n----------------------------------------\n\nTITLE: Stylelint Output Example for Invalid Media Queries\nDESCRIPTION: This snippet shows an example of Stylelint output when invalid media queries are detected. It highlights the file path, line numbers, and specific errors related to the media query allowed list plugin.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/media-query-allowed-list/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsrc/components/typography/textContainer/TextContainer.scss\n  4:3  ✖  Invalid media query [(min-width: 0px)].              polaris/media-query-allowed-list\n  6:5  ✖  Invalid media query [print and (min-width: 0px)].    polaris/media-query-allowed-list\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Card Grid Component in Markdown\nDESCRIPTION: This code snippet renders a Rich Card Grid component, likely used to display a collection of utility components. The 'posts' variable is passed as a prop to populate the grid.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/utilities/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<RichCardGrid cards={posts} />\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Typography Documentation\nDESCRIPTION: Basic markdown structure for typography documentation including a title reference, lede text component, and card grid component.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# {frontmatter.title}\n\n<Lede>\n\nEstablish hierarchy and communicate importance through text presentation.\n\n</Lede>\n\n<RichCardGrid cards={posts} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Archived Patterns with RichCardGrid in JSX\nDESCRIPTION: Employs the Polaris `RichCardGrid` component, similar to the current patterns section, but this instance displays archived or legacy design patterns. The card data for this grid is provided through the `cards` prop, referencing the `legacyPatternPosts` variable.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<RichCardGrid cards={legacyPatternPosts} />\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-Inline CSS Class Overrides\nDESCRIPTION: This CSS snippet assists in post-migration validation by locating any Polaris-Inline CSS class overrides in the codebase for proper updates.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_46\n\nLANGUAGE: css\nCODE:\n```\nPolaris-Inline\n```\n\n----------------------------------------\n\nTITLE: Creating Examples in Polaris Component Documentation\nDESCRIPTION: This snippet illustrates how to structure examples in the component documentation. It shows how to create an example with a description and code snippet, and how to restrict an example to specific platforms.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Component READMEs.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\n## Examples\n\n### First example\n\nExample description.\n\n```jsx\n<MyComponent aProp={true} />\n```\n\n---\n## Examples\n\n### No example-for meta\n\nThis example is for all platforms (must contain React code).\n\n```jsx\n<MyComponent aProp={true} />\n```\n```\n\n----------------------------------------\n\nTITLE: Ignoring StyleLint Rules in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable specific rules in Stylelint when custom styles diverge from Polaris. It serves as a placeholder for providing context in cases where Polaris contributions aren't feasible. No external dependencies are required.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/_postamble.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// stylelint-disable-next-line -- why custom styles are being used instead of Polaris\n```\n\n----------------------------------------\n\nTITLE: Renaming AlphaTabProps to TabProps in React\nDESCRIPTION: Diff showing the changes needed to rename the AlphaTabProps interface to TabProps.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n- export interface AlphaTabProps {}\n+ export interface TabProps {}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Validating ButtonGroup Segmented Prop Update\nDESCRIPTION: This regular expression can be used to check for outdated ButtonGroup segmented props after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_22\n\nLANGUAGE: regex\nCODE:\n```\n<ButtonGroup[^>\\w](?:[^>]|\\n)*?segmented\n```\n\n----------------------------------------\n\nTITLE: Version Update Documentation\nDESCRIPTION: Documentation listing patch changes and dependency updates for various versions of Polaris components and tokens\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#9191](https://github.com/Shopify/polaris/pull/9191) [`c1dd9ec1f`](https://github.com/Shopify/polaris/commit/c1dd9ec1f60c818d38cb5bf5272426ee2fbe403d) Thanks [@gwyneplaine](https://github.com/gwyneplaine)! - Fix component names in layout-and-structure index page to prevent 404s.\n\n* [#9150](https://github.com/Shopify/polaris/pull/9150) [`aac73a9ab`](https://github.com/Shopify/polaris/commit/aac73a9ab78d39f0f16d5674fe078bb1f011b1e4) Thanks [@aveline](https://github.com/aveline)! - Update `Icons` content on styleguide\n\n- [#9186](https://github.com/Shopify/polaris/pull/9186) [`d32c7270e`](https://github.com/Shopify/polaris/commit/d32c7270e0983eef6192d36911ec6c4596e3b35e) Thanks [@heyjoethomas](https://github.com/heyjoethomas)! - Republish new feature pattern guidance.\n```\n\n----------------------------------------\n\nTITLE: Adding New Z-Index CSS Tokens\nDESCRIPTION: Introduces new `z-index` tokens that are planned to become the default stacking context values in Polaris version 7.0.0. This standardizes layer management within the UI.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: css\nCODE:\n```\nz-index tokens\n```\n\n----------------------------------------\n\nTITLE: Rendering Variants Component in JSX\nDESCRIPTION: This JSX snippet renders a `Variants` component, passing the `variants` array (defined in the page's frontmatter) as a prop. It's used within the MDX page to dynamically display different variations or examples of the documented UI pattern.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-index-layout/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Variants variants={frontmatter.variants} />\n```\n\n----------------------------------------\n\nTITLE: Node Version Requirement\nDESCRIPTION: Change noting updated minimum required Node.js version.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#11844](https://github.com/Shopify/polaris/pull/11844) [`a89e61478`](https://github.com/Shopify/polaris/commit/a89e61478fb7c5f588021e542101aba8a3898ec8) Thanks [@jesstelford](https://github.com/jesstelford)! - Miniumum required node version updated to v20.10.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Card Grid Component in Markdown\nDESCRIPTION: This code snippet renders a Rich Card Grid component, likely used to display a collection of action-related posts or components. The 'posts' variable is used to populate the grid.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/actions/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<RichCardGrid cards={posts} />\n```\n\n----------------------------------------\n\nTITLE: Stylelint Error Output\nDESCRIPTION: Example of the error output when running Stylelint on SCSS files containing disallowed at-rules.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/at-rule-disallowed-list/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/example.scss\n  1:8  ✖  Invalid @mixin rule [disallowed-mixin]. Disallowed pattern [^disallowed-mixin]   (stylelint-polaris/at-rule-disallowed-list)\n  6:12 ✖  Invalid @include rule [disallowed-mixin]. Disallowed pattern [^disallowed-mixin] (stylelint-polaris/at-rule-disallowed-list)\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Typography Documentation\nDESCRIPTION: YAML frontmatter configuration for a typography documentation page, specifying the title, expansion state, ordering, and preview image path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/typography/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Typography\nexpanded: true\norder: 6\npreviewImg: /images/components/typography.png\n---\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Anchor Point in JSX\nDESCRIPTION: Uses a standard HTML `span` element with a specific `id` attribute ('legacy') within JSX. This creates an invisible anchor point on the page, allowing direct navigation to this section (Archived documentation) using a URL fragment like `#legacy`.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<span id=\"legacy\" />\n```\n\n----------------------------------------\n\nTITLE: Regex for Outdated Text Color Prop\nDESCRIPTION: Regex pattern that detects deprecated instances of Text 'color' props. Helpful for ensuring that all outdated props have been updated in the codebase.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_80\n\nLANGUAGE: regex\nCODE:\n```\n<Text[^>\\w](?:[^>]|\\n)*?color\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Polaris Component Documentation Errors\nDESCRIPTION: This snippet provides examples of common errors encountered when writing component documentation and how to fix them. It includes issues like missing section separators and syntax errors in code examples.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Component READMEs.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n🚨 [Top bar] No examples found in src/components/TopBar/README.md\n```\n\nLANGUAGE: console\nCODE:\n```\n🚨 Example \"Autocomplete with loading\" contains a syntax error in src/components/Autocomplete/README.md: Unexpected token (18:20)\n```\n\n----------------------------------------\n\nTITLE: Setting up Sandbox Context Wrapper in JavaScript/JSX\nDESCRIPTION: This snippet defines a basic JSX wrapper for rendering a component within a sandbox environment. It directly renders the component placeholder `(____CODE____)()` without additional styling or container elements.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-index-layout/variants/default.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{(____CODE____)()}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Selection/Input Components\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the selection and input components documentation page, including title, expanded state, order, and preview image path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/selection-and-input/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Selection and input\nexpanded: true\norder: 3\npreviewImg: /images/components/selection-and-input.png\n---\n```\n\n----------------------------------------\n\nTITLE: Search for Filters Component Instances in React\nDESCRIPTION: This JSX snippet is employed in the post-migration validation to detect any remaining instances of the Filters component within a React project by searching for its JSX tag.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\n<Filters\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Box BorderColor Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the borderColor prop in Box components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_112\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderColor\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Token in CSS\nDESCRIPTION: Example of how to reference a color token in CSS after the removal of the '-base' suffix in version 2.0.0.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: css\nCODE:\n```\nvar(--color-ink)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages for polaris-for-vscode\nDESCRIPTION: Commands to set up the development environment for the polaris-for-vscode extension. This installs all required dependencies and builds the necessary packages to start development.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-for-vscode/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Documentation Page\nDESCRIPTION: YAML frontmatter configuration for the contributing documentation page, defining metadata like title, navigation properties, keywords, and page display options.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Contributing to Polaris\nnavTitle: Contributing\ndescription: Polaris is built for merchants, by you.\nkeywords:\n  - how to contribute to polaris\n  - contribution\n  - contribute\norder: 10\nnewSection: true\nicon: MobilePlusIcon\nshowTOC: true\n---\n```\n\n----------------------------------------\n\nTITLE: Polaris Font Property Warning\nDESCRIPTION: Addition of warning for font-related CSS properties, recommending Text component usage.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#11547](https://github.com/Shopify/polaris/pull/11547) [`df5276317`](https://github.com/Shopify/polaris/commit/df527631730eccbbb259c43b7b7d1c5fc8e47264) Thanks [@sam-b-rose](https://github.com/sam-b-rose)! - Added warning for `font-size`, `line-height`, and `font-weight` properties. Use the `Text` component as a preferred option.\n```\n\n----------------------------------------\n\nTITLE: Rendering Polaris Update Cards using React Component in JSX\nDESCRIPTION: Uses a custom React component called FeaturedCardGrid to display a grid of cards featuring Polaris updates. The 'posts' prop is passed to the component, likely containing the update data.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FeaturedCardGrid posts={posts} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Link without underline (not recommended)\nDESCRIPTION: Shows an example of creating a Link without an underline, which is generally not recommended for accessibility reasons.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/link.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Link removeUnderline>Learn more about Fraud Protect.</Link>\n```\n\n----------------------------------------\n\nTITLE: Cross-browser Testing Checklist in Markdown\nDESCRIPTION: A markdown checklist template for documenting which browsers have been used for testing a PR. It includes major desktop browsers, mobile browsers, and device considerations.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Tophatting.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md\nI've tophatted these changes in the following browsers:\n\n- [ ] Chrome latest\n- [ ] FF latest\n- [ ] Safari latest\n- [ ] Edge\n- [ ] In at least one of the above browsers, test both retina and non-retina displays\n- [ ] iPhone (5/SE/X) (10+) Safari Mobile\n- [ ] iPad (10+) Safari Mobile\n- [ ] Android device (5.x) Chrome\n```\n```\n\n----------------------------------------\n\nTITLE: Minor Version Update Notification\nDESCRIPTION: A markdown entry indicating a minor change related to creating a new 'What's new' page for v11 token changes.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#9311](https://github.com/Shopify/polaris/pull/9311) [`b6f2d7928`](https://github.com/Shopify/polaris/commit/b6f2d7928f40e4eca4a30718ad0d1f56c6dfd776) Thanks [@lgriffee](https://github.com/lgriffee)! - Created a \"What's new\" page for v11 token changes.\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Divider BorderColor Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the borderColor prop in Divider components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_114\n\nLANGUAGE: regex\nCODE:\n```\n<Divider[^>\\w](?:[^>]|\\n)*?borderColor\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Section Separator in Polaris Documentation\nDESCRIPTION: This snippet demonstrates how to fix a missing section separator before the Examples section in a Polaris component README file.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Component READMEs.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n+ ---\n+\n  ## Examples\n```\n\n----------------------------------------\n\nTITLE: Setting Up Preview Context for Date List Example (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a wrapper function used for previewing the Date List component. It creates a styled div container with flexbox properties to center and align the component (represented by `(____CODE____)()`) vertically within the preview area. This setup ensures the component is displayed appropriately in a documentation or preview environment.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/date-picking/variants/date-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* prettier-ignore */}\n```javascript {\"type\":\"previewContext\",\"for\":\"example\"}\n<div style={{\n  display: 'flex',\n  paddingTop: \"2rem\",\n  flexDirection: 'column',\n  minHeight: '100vh',\n  alignItems: 'center',\n  justifyContent: 'start',\n}}>\n  {(____CODE____)()}\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Search for Polaris-Card CSS Class Overrides\nDESCRIPTION: This CSS snippet is part of the post-migration validation process to check for any overrides of the Polaris-Card CSS class across the codebase, ensuring all instances are updated correctly.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_34\n\nLANGUAGE: css\nCODE:\n```\nPolaris-Card\n```\n\n----------------------------------------\n\nTITLE: Finding Outdated Box borderEndStartRadius Prop (Regex)\nDESCRIPTION: This regular expression is designed to find usage of the potentially outdated `borderEndStartRadius` prop on the Polaris `<Box>` component as part of the v12 styles migration validation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_95\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?borderEndStartRadius\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Variable Prefix for Motion Tokens\nDESCRIPTION: Adds a 'motion' prefix to motion-related design tokens. This likely involves renaming existing tokens or introducing new ones with the prefix for better organization and namespacing within the Polaris token system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-tokens/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nmotion prefix\n```\n\n----------------------------------------\n\nTITLE: Version Number Update in Package.json\nDESCRIPTION: Minor version bump to 0.11.0 with associated patch notes\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.11.0\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Documentation\nDESCRIPTION: YAML frontmatter configuration defining metadata for the documentation page including title, navigation title, keywords and ordering\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/icons.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Contributing to Polaris Icons\nnavTitle: Icons\nkeywords:\n  - icons\n  - add a new icon\n  - deprecate an icon\n  - update an icon\n  - how to contribute to polaris icons\norder: 3\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Link usage (not recommended)\nDESCRIPTION: Demonstrates an example of inconsistent Link usage, which should be avoided for better user experience and accessibility.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/navigation/link.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n/* Somewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n\n/* Elsewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">order fulfillment section</Link>\n```\n\n----------------------------------------\n\nTITLE: Adding Minor Changes in Polaris Changelog\nDESCRIPTION: Adds minor changes to the Box component, updates icon contribution guidelines, and adds new content sections in the changelog.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#11170](https://github.com/Shopify/polaris/pull/11170) [`79cadcf4f`](https://github.com/Shopify/polaris/commit/79cadcf4ff7d7dac62f5f3b4aa44a7f519b5cfee) Thanks [@laurkim](https://github.com/laurkim)! - Added support for `paddingInline` and `paddingBlock` on `Box` component with updated documentation\n\n* [#11109](https://github.com/Shopify/polaris/pull/11109) [`533543abd`](https://github.com/Shopify/polaris/commit/533543abd85e1aa1618fe8379374af24fec02b88) Thanks [@heyjoethomas](https://github.com/heyjoethomas)! - Removed duplicate content on icon contribution\n\n- [#11078](https://github.com/Shopify/polaris/pull/11078) [`ed5d7d6bf`](https://github.com/Shopify/polaris/commit/ed5d7d6bfb881d2b74a3c701fa6e3506cffd60b2) Thanks [@heyjoethomas](https://github.com/heyjoethomas)! - Update icon contribution guidance\n\n* [#11104](https://github.com/Shopify/polaris/pull/11104) [`0e3f591ad`](https://github.com/Shopify/polaris/commit/0e3f591ad02b37a101c7830b15f5355b44a47baa) Thanks [@heyjoethomas](https://github.com/heyjoethomas)! - Added new content section on how to add an issue to our board rather than creating your own pr.\n```\n\n----------------------------------------\n\nTITLE: Rendering a Preview Context for App Settings Layout using React and Polaris - JavaScript\nDESCRIPTION: This snippet wraps the output of a code example function in a <div> with padding, useful for rendering a visually separated preview of the app settings layout in documentation or style-guides. It depends on React and the custom function (____CODE____), which returns the main content. The key input is the function to render, and it outputs the contained rendered layout with extra styling.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/app-settings-layout/variants/default.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript {\"type\":\"previewContext\",\"for\":\"example\"}\\n<div style={{ padding: '2rem' }}>\\n  {(____CODE____)()}\\n</div>\\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Node Version in .nvmrc\nDESCRIPTION: Specifies the Node.js version for NVM (Node Version Manager) in .nvmrc file.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Nodejs support.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nv20.11.1\n```\n\n----------------------------------------\n\nTITLE: Updating Polaris Dependencies in Package.json\nDESCRIPTION: This code snippet shows how dependencies are updated in the package.json file for the Polaris website. It includes version bumps for packages like @shopify/polaris, @shopify/polaris-icons, and @shopify/polaris-tokens.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@shopify/polaris\": \"13.9.5\",\n  \"@shopify/polaris-icons\": \"9.3.1\",\n  \"@shopify/polaris-tokens\": \"9.4.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Hardcoded Color Custom Properties\nDESCRIPTION: Regular expression to identify any remaining instances of specific hardcoded color custom properties after migration step 3.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_126\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-color-bg-transparent-primary-experimental|--p-color-bg-transparent-secondary-disabled-experimental)(?![\\w-])\n```\n\n----------------------------------------\n\nTITLE: Disallowing Legacy Sass Functions in Diff Format\nDESCRIPTION: An example showing the prohibited use of the 'available-names' Sass function. The diff format indicates that this pattern should be removed or avoided in code.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/legacy-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Don't\n- @include available-names\n```\n\n----------------------------------------\n\nTITLE: Specifying Patch Changes in Markdown\nDESCRIPTION: This code snippet demonstrates how patch changes are documented in the changelog. It includes the pull request number, commit hash, and a description of the change.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-migrator/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#13318](https://github.com/Shopify/polaris/pull/13318) [`cdb617a`](https://github.com/Shopify/polaris/commit/cdb617a9624215836e25975cc4c371b941e6178a) Thanks [@alex-page](https://github.com/alex-page)! - Add provenance statement\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Polaris Documentation Page\nDESCRIPTION: This code snippet defines the frontmatter for the Polaris documentation page. It includes the title, navigation title, keywords for search optimization, order, and a setting to hide children pages.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/contributing/documentation/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Documenting in Polaris\nnavTitle: Documentation\nkeywords:\n  - how to contribute to polaris documentation\n  - how to contribute to the style guide\n  - documenting in polaris\n  - documentation guidelines\norder: 4\nhideChildren: true\n---\n```\n\n----------------------------------------\n\nTITLE: RegExp for Checking Outdated Banner TextColor Prop\nDESCRIPTION: This regular expression can be used to identify outdated usage of the textColor prop in Banner components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_115\n\nLANGUAGE: regex\nCODE:\n```\n<Banner[^>\\w](?:[^>]|\\n)*?textColor\n```\n\n----------------------------------------\n\nTITLE: Using Medium Component with 'do' Variant in Polaris JSX\nDESCRIPTION: This snippet shows the `<Medium>` component, possibly a layout or typography component from Polaris, used with a `variant=\"do\"` prop. This variant likely indicates that the content within this component represents a recommended practice or a 'do' example in the documentation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Medium variant=\"do\">\n```\n\n----------------------------------------\n\nTITLE: Migrating Subheading Component to Text Component in JSX\nDESCRIPTION: Diff showing how to replace the deprecated Subheading component with the new Text component, including setting the appropriate HTML element and variant.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- <Subheading>Accounts</Subheading>\n+ <Text as=\"h3\" variant=\"headingXs\">Accounts</Text>\n```\n\n----------------------------------------\n\nTITLE: Semantic Color Token Structure\nDESCRIPTION: Demonstrates the structure of semantic color tokens which include element, role, prominence, and state components. Used for consistent color application across the admin interface.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/color-tokens.mdx#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n--p-color-bg-surface-secondary-hover\n```\n\n----------------------------------------\n\nTITLE: Removing Unused SCSS Imports with scss-remove-unused-at-use\nDESCRIPTION: A generic codemod to remove unused @use imports in SCSS files.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/polaris-migrator.mdx#2025-04-22_snippet_74\n\nLANGUAGE: diff\nCODE:\n```\n- @use 'global-styles/legacy';\n\n// No usages of the `legacy` namespace. Can be safely removed.\n.class {\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Sandbox Context for App Settings Layout using React and Polaris - JavaScript\nDESCRIPTION: This code renders an example function in a sandbox or isolated environment, suitable for interactive or testable previews of the app settings layout. It requires a React runtime and assumes the existence of the (____CODE____) function that returns the components for the sandboxed area. The main input is the render function, and the output is its rendered layout directly, enabling experimentation or isolation from surrounding context.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/app-settings-layout/variants/default.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript {\"type\":\"sandboxContext\",\"for\":\"example\"}\\n{(____CODE____)()}\\n```\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Section with Multiple Pages\nDESCRIPTION: Example directory structure for a section containing multiple pages.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/README.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n├── content\n│   ├── your-new-section\n│   │   ├── index.md\n│   │   ├── awesome-new-page.md\n```\n\n----------------------------------------\n\nTITLE: Using Medium Component with 'dont' Variant in Polaris JSX\nDESCRIPTION: This snippet showcases the `<Medium>` component from Polaris used with a `variant=\"dont\"` prop. This variant signifies that the enclosed content illustrates an anti-pattern or a 'don't' example, advising against a particular usage or layout in the documentation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Medium variant=\"dont\">\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Requirements in shipit.yml\nDESCRIPTION: Defines the required CI checks for Node.js validation before publishing and merging.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Nodejs support.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nci:\n  require:\n    - 'Validate with Node v20.11.1'\n\nmerge:\n  require:\n    - 'Validate with Node v20.11.1'\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Versions in Markdown\nDESCRIPTION: This code snippet shows how version updates for dependencies are represented in the changelog markdown. It uses square brackets for the pull request number, parentheses for the commit hash, and double square brackets for the updated dependency versions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-migrator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`cdb617a`](https://github.com/Shopify/polaris/commit/cdb617a9624215836e25975cc4c371b941e6178a)]:\n  - @shopify/polaris-tokens@9.4.2\n  - @shopify/stylelint-polaris@16.0.7\n```\n\n----------------------------------------\n\nTITLE: Shadow Migration Step 2 Validation RegExp\nDESCRIPTION: Regular expressions to validate remaining instances of deprecated shadow custom properties and component usage after step 2 migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_132\n\nLANGUAGE: regex\nCODE:\n```\n(?:--p-shadow-button-primary-experimental|--p-shadow-button-primary-hover-experimental|--p-shadow-button-inset-experimental)(?![\\w-])\n```\n\nLANGUAGE: regex\nCODE:\n```\n<Box[^>\\w](?:[^>]|\\n)*?shadow\n```\n\nLANGUAGE: regex\nCODE:\n```\n<ShadowBevel[^>\\w](?:[^>]|\\n)*?boxShadow\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Polaris Updates Page in Markdown\nDESCRIPTION: Sets up the frontmatter metadata for the Polaris updates page, including title, description, order, visibility settings, and icon.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: What's new\ndescription: Learn about the latest Polaris updates\norder: 0\nhideChildren: true\nicon: EmailNewsletterIcon\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries documenting changes, fixes and updates to the Polaris project including Sass migrations, utility additions, and dependency updates.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris-migrator/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#7487](https://github.com/Shopify/polaris/pull/7487) [`60191f353`](https://github.com/Shopify/polaris/commit/60191f353d1ef86f1eef167d36c0b040f21b72d6) Thanks [@lgriffee](https://github.com/lgriffee)! - Update numeric operator detection to check all node types\n\n* [#7412](https://github.com/Shopify/polaris/pull/7412) [`6d82e8965`](https://github.com/Shopify/polaris/commit/6d82e896587bacec60471e06fa81b2c61518551f) Thanks [@samrose3](https://github.com/samrose3)! - Enhance Sass spacing migration to catch Sass interpolations\n\n- [#7423](https://github.com/Shopify/polaris/pull/7423) [`0591db26a`](https://github.com/Shopify/polaris/commit/0591db26a4d13a5640245e433f61f77bf1be88d4) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Update `replace-typography-declarations` comment strategy\n\n* [#7459](https://github.com/Shopify/polaris/pull/7459) [`933a9d71b`](https://github.com/Shopify/polaris/commit/933a9d71b71b172657bbaf050cfc8793e39a49c0) Thanks [@lgriffee](https://github.com/lgriffee)! - Add missing values to borderRadius length map\n\n## 0.5.0\n\n### Minor Changes\n\n- [#7373](https://github.com/Shopify/polaris/pull/7373) [`56c82ee8d`](https://github.com/Shopify/polaris/commit/56c82ee8d15a58ef5e68b04968b126b93aa8dec9) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Add `getFunctionArgs` utility\n\n### Patch Changes\n\n- Updated dependencies [[`c3f427c17`](https://github.com/Shopify/polaris/commit/c3f427c17d268f406618aaddb684ba12c3fa15d1)]:\n  - @shopify/polaris-tokens@6.2.1\n\n## 0.4.1\n\n### Patch Changes\n\n- [#7371](https://github.com/Shopify/polaris/pull/7371) [`57e5f95c1`](https://github.com/Shopify/polaris/commit/57e5f95c1e402fda3202babfdce25b131b0b9165) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Make Polaris migrator comment generic\n\n## 0.4.0\n\n### Minor Changes\n\n- [#7216](https://github.com/Shopify/polaris/pull/7216) [`fbf2f8832`](https://github.com/Shopify/polaris/commit/fbf2f88320ad6c5767c37d18d76bfa82babf71cb) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Add migration to replace static mixins with declarations\n\n### Patch Changes\n\n- [#7328](https://github.com/Shopify/polaris/pull/7328) [`b31f51f25`](https://github.com/Shopify/polaris/commit/b31f51f259fefd8b119c5242e2ab1528c3a6cff8) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Add namespace support to the `replace-static-breakpoint-mixins` migration\n\n## 0.3.0\n\n### Minor Changes\n\n- [#7264](https://github.com/Shopify/polaris/pull/7264) [`5a1f45f7a`](https://github.com/Shopify/polaris/commit/5a1f45f7a29cf6994394d7fab6f007f850d956ad) Thanks [@lgriffee](https://github.com/lgriffee)! - Add sass padding and margin migration\n\n### Patch Changes\n\n- [#7315](https://github.com/Shopify/polaris/pull/7315) [`c958899c7`](https://github.com/Shopify/polaris/commit/c958899c73829bf1c1fa512946ffa3db7f06a2d0) Thanks [@lgriffee](https://github.com/lgriffee)! - Remove `0` and `0px` length values from `replace-sass-lengths` migration\n\n- Updated dependencies [[`0be40aa94`](https://github.com/Shopify/polaris/commit/0be40aa94be8c95f96f0835b4df7f91f6da0b5c2)]:\n  - @shopify/polaris-tokens@6.2.0\n\n## 0.2.1\n\n### Patch Changes\n\n- [#7269](https://github.com/Shopify/polaris/pull/7269) [`963581358`](https://github.com/Shopify/polaris/commit/9635813582030159f4c102242420fde3a6364808) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Update `renameProps` to avoid migrating nested component props\n\n## 0.2.0\n\n### Minor Changes\n\n- [#7262](https://github.com/Shopify/polaris/pull/7262) [`a5fd48bf4`](https://github.com/Shopify/polaris/commit/a5fd48bf4ba52a9675154d386e6365ca728554b7) Thanks [@samrose3](https://github.com/samrose3)! - Added generic migration script for renaming a component prop\n\n### Patch Changes\n\n- [#7241](https://github.com/Shopify/polaris/pull/7241) [`4cbf8f466`](https://github.com/Shopify/polaris/commit/4cbf8f4660242a9bd2a2dd05dbeece212658a420) Thanks [@samrose3](https://github.com/samrose3)! - Enable namespace option for Sass spacing migration\n\n## 0.1.2\n\n### Patch Changes\n\n- [#7223](https://github.com/Shopify/polaris/pull/7223) [`c7afbd498`](https://github.com/Shopify/polaris/commit/c7afbd4984048ddc7438c7cef9e50acd1d174db1) Thanks [@samrose3](https://github.com/samrose3)! - Update Sass spacing migration to properly map spacing functions where quoted string arguments are passed (ex: `spacing('tight')`)\n\n* [#7229](https://github.com/Shopify/polaris/pull/7229) [`2fec9611d`](https://github.com/Shopify/polaris/commit/2fec9611dec0a147be0be0410e955e92c025edc0) Thanks [@samrose3](https://github.com/samrose3)! - Update Sass spacing migrator to apply operator migrations as comments\n\n## 0.1.1\n\n### Patch Changes\n\n- [#7217](https://github.com/Shopify/polaris/pull/7217) [`77d7b5ae3`](https://github.com/Shopify/polaris/commit/77d7b5ae3ff94d29133ff132316cb779a635b047) Thanks [@samrose3](https://github.com/samrose3)! - Update the Sass spacing migration to perform spacing replacement even when there is an operator.\n\n## 0.1.0\n\n### Minor Changes\n\n- [#7153](https://github.com/Shopify/polaris/pull/7153) [`17d5bd0e8`](https://github.com/Shopify/polaris/commit/17d5bd0e8a0ba8adbaf31992e15894e2afa23451) Thanks [@aaronccasanova](https://github.com/aaronccasanova)! - Add migration for legacy static breakpoint mixins\n```\n\n----------------------------------------\n\nTITLE: Structuring Related Resources Links using Stack Component in JSX\nDESCRIPTION: This JSX snippet utilizes a `Stack` component (likely from Polaris) within an MDX file to vertically arrange content, specifically a heading and a list of related resource links (written in Markdown), with a specified gap ('400'). It provides organized navigation to related documentation pages.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/resource-index-layout/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack gap=\"400\">\n\n## Related resources\n\n- The [Resource detail layout](/patterns/resource-details-layout) pattern is a complement to the resource index layout pattern.\n- Use the [Empty state component](/components/layout-and-structure/empty-state) when the resource index is empty.\n- Learn about the meaning of “resources” on the [Resource list](/components/lists/resource-list) component page\n- Learn more about [Layout](https://shopify.dev/apps/design-guidelines/layout) in the app design guidelines.\n\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Listing Related Components for Navigation in Markdown\nDESCRIPTION: This snippet provides a list of related components to the Navigation component, including Frame, Top Bar, Contextual Save Bar, Toast, Loading, Tabs, and Link. It offers brief descriptions and links to each component's documentation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/internal-only/navigation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- To provide the structure for the navigation component, including the left sidebar and the top bar use the [frame](https://polaris.shopify.com/components/internal-only/frame) component.\n- To display the navigation component on small screens, to provide search and a user menu, or to theme the [frame](https://polaris.shopify.com/components/internal-only/frame) component to reflect an application's brand, use the [top bar](https://polaris.shopify.com/components/internal-only/top-bar) component.\n- To tell merchants their options once they have made changes to a form on the page use the [contextual save bar](https://polaris.shopify.com/components/internal-only/contextual-save-bar) component.\n- To provide quick, at-a-glance feedback on the outcome of an action, use the [toast](https://polaris.shopify.com/components/internal-only/toast) component.\n- To indicate to merchants that a page is loading or an upload is processing use the [loading](https://polaris.shopify.com/components/internal-only/loading) component.\n- To alternate among related views within the same context, use the [tabs](https://polaris.shopify.com/components/tabs) component.\n- To embed a single action or link within a larger span of text, use the [link](https://polaris.shopify.com/components/link) component.\n```\n\n----------------------------------------\n\nTITLE: Setting Node Version in GitHub Actions CI Workflow\nDESCRIPTION: Specifies the Node.js version to use in GitHub Actions CI workflow.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Nodejs support.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnode-version: ['20.11.1']\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating List spacing prop migration\nDESCRIPTION: Regular expression to check for any remaining instances of List components with the spacing property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_65\n\nLANGUAGE: regex\nCODE:\n```\n<List[^>\\w](?:[^>]|\\n)*?spacing\n```\n\n----------------------------------------\n\nTITLE: SCSS Example with Disallowed Mixins\nDESCRIPTION: Sample SCSS file demonstrating usage of disallowed mixins that will trigger linting errors.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/at-rule-disallowed-list/README.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// src/example.scss\n@mixin disallowed-mixin() {\n  color: red;\n}\n\n.example {\n  @include disallowed-mixin;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content with Frontmatter in React\nDESCRIPTION: This code snippet shows the structure of a Markdown file with frontmatter metadata. It includes title, description, icon, order, and keywords for the page content.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/inclusive-language.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Inclusive language\ndescription: Make commerce better for everyone by writing inclusively\nicon: EyeCheckMarkIcon\norder: 6\nkeywords:\n  - copy instructions\n  - copy rules\n  - copy guidelines\n  - content instructions\n  - content rules\n  - word list\n  - language\n  - race\n  - racial\n  - racist\n  - racism\n  - a11y\n  - accessible\n  - accessibility\n  - disability\n  - ableist\n  - ableism\n  - gender\n  - gendered\n  - ungendered\n  - gender binary\n  - sex\n  - gender identity\n  - gender-neutral\n  - pronoun\n  - inclusive content\n---\n```\n\n----------------------------------------\n\nTITLE: Modifying YAML Workflow for Prerelease Branch Configuration\nDESCRIPTION: Configuration adjustment to the release workflow file to include the 'next' branch for prerelease development. This change ensures the release GitHub Action runs on both the main branch and the next branch for beta releases.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Releasing.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  push:\n    branches:\n      - main\n      - next\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Title using Frontmatter Variable (Markdown)\nDESCRIPTION: This Markdown snippet renders the main heading (H1) for the page. It dynamically inserts the page title defined in the YAML frontmatter's `title` field using template variable syntax common in static site generators or documentation frameworks.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# {frontmatter.title}\n```\n\n----------------------------------------\n\nTITLE: Linking to Pre-v12 Guides on GitHub\nDESCRIPTION: Provides a markdown link to older version guides hosted on GitHub for versions before v12.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Guides before v12](https://github.com/Shopify/polaris/tree/main/documentation/guides)\n```\n\n----------------------------------------\n\nTITLE: RegExp for validating Icon tone=\"warning\" migration\nDESCRIPTION: Regular expression to check for any remaining instances of Icon components with the incorrect tone=\"warning\" property after migration.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/migrating-from-v11-to-v12.mdx#2025-04-22_snippet_35\n\nLANGUAGE: regex\nCODE:\n```\n<Icon[^>\\w](?:[^>]|\\n)*?tone=\"warning\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for New Page\nDESCRIPTION: Example directory structure for adding a new page to the root content directory.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n├── content\n│   ├── awesome-new-page.md\n```\n\n----------------------------------------\n\nTITLE: Version Update Markdown Documentation\nDESCRIPTION: Markdown changelog content detailing version updates, patches, and dependency changes for the Polaris project.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`24a2ef38a`](https://github.com/Shopify/polaris/commit/24a2ef38a14a5904e739a38c1421e3f7f5db81bc)]:\n  - @shopify/polaris@10.27.2\n\n## 0.33.1\n\n### Patch Changes\n\n- [#8285](https://github.com/Shopify/polaris/pull/8285) [`e70f70862`](https://github.com/Shopify/polaris/commit/e70f7086261b7f036b90550a432bf9d72e7ed8a4) Thanks [@kyledurand](https://github.com/kyledurand)! - Fixed contrast issue on alpha status badge\n  Added default value to prop documentation for AlphaStack\n- Updated dependencies [[`e70f70862`](https://github.com/Shopify/polaris/commit/e70f7086261b7f036b90550a432bf9d72e7ed8a4), [`20bb1a668`](https://github.com/Shopify/polaris/commit/20bb1a668dcde8fcb87da35d5caaef2f0e387c01), [`f335aaf99`](https://github.com/Shopify/polaris/commit/f335aaf9968ff87b38559572f51a92b413f8aecd)]:\n  - @shopify/polaris@10.27.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Version in package.json\nDESCRIPTION: Defines the minimum required Node.js version for the project in package.json engines field.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Nodejs support.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"engines\": {\n  \"node\": \">=20.11.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Image and Icon Content with React Components in Markdown\nDESCRIPTION: This snippet demonstrates embedding React components such as <Lede> and <RichCardGrid> inside a Markdown file, leveraging JSX to create interactive, visually rich documentation for images and icons. The approach requires a build system or documentation site generator that supports JSX/MDX (e.g., Next.js, MDX), and expects variables or props (e.g., posts) to be defined in the rendering context. The inputs are React elements and serialized frontmatter metadata; the output is rendered documentation with visual representation of available components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/images-and-icons/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Images and icons\nshortDescription: Represent visual content, such as avatars and thumbnails for images or video.\nexpanded: true\norder: 4\npreviewImg: /images/components/images-and-icons.png\n---\n\n# {frontmatter.title}\n\n<Lede>\n\nRepresent visual content, such as avatars and thumbnails for images or video.\n\n</Lede>\n\n<RichCardGrid cards={posts} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Version in Development Environment\nDESCRIPTION: Sets the Node.js version for local development environment in dev.yml.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/Nodejs support.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v20.11.1\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Options Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of the primary options for the media query allowed list plugin. It includes arrays for allowed media types, media feature names, and SCSS interpolations.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/media-query-allowed-list/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PrimaryOptions {\n  /**\n   * A list of RegExps or string literals to match against media types.\n   */\n  allowedMediaTypes: (string | RegExp)[];\n  /**\n   * A list of RegExps or string literals to match against media feature names.\n   *\n   * Note: This is passed directly to the built-in `media-feature-name-allowed-list` rule.\n   * https://stylelint.io/user-guide/rules/list/media-feature-name-value-allowed-list\n   */\n  allowedMediaFeatureNames: (string | RegExp)[];\n  /**\n   * A list of RegExps or string literals to match against SCSS interpolation expressions in media queries.\n   */\n  allowedScssInterpolations: (string | RegExp)[];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Posts Grid in JSX for Shopify Polaris\nDESCRIPTION: This JSX snippet uses a custom RichCardGrid component to display content-related posts. It passes the 'posts' prop and specifies the 'content' category.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/content/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RichCardGrid cards={posts} category=\"content\" />\n```\n\n----------------------------------------\n\nTITLE: Using Large Component in Polaris JSX\nDESCRIPTION: Shows the usage of the `<Large>` component, likely part of the Polaris system for controlling layout size or typography. It's used here potentially to display larger elements like images or apply specific large-scale styling/spacing rules to its children.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/patterns/card-layout/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Large>\n```\n\n----------------------------------------\n\nTITLE: Running Stylelint with NPM Scripts\nDESCRIPTION: These NPM script commands show how to run Stylelint on all files or specific file patterns. They use the 'pnpm' package manager to execute the 'lint' or 'stylelint' commands.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/plugins/media-query-allowed-list/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stylelint <file-glob>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stylelint **/*.scss\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm stylelint src/components/typography/textContainer/TextContainer.scss\n```\n\n----------------------------------------\n\nTITLE: Displaying Polaris Repository Structure\nDESCRIPTION: Shows the directory structure of the Polaris monorepo, including various packages and components.\nSOURCE: https://github.com/shopify/polaris/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npolaris/\n├── documentation               # Documentation for working in the monorepo\n├── polaris-for-vscode          # VS Code extension for Polaris\n├── polaris-icons               # Icons for Polaris\n├── polaris-react               # Components for @shopify/polaris package\n├── polaris-tokens              # Design tokens for Polaris\n├── polaris.shopify.com         # Documentation website\n└── stylelint-polaris           # Rules for custom property usage and mainline coverage\n```\n\n----------------------------------------\n\nTITLE: Search for Inline Component Instances in React\nDESCRIPTION: This JSX snippet is part of post-migration validation to identify remaining Inline component instances within a React project by locating their JSX tags.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\n<Inline\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Tables Documentation\nDESCRIPTION: YAML frontmatter configuration for the Tables component documentation page, defining metadata like title, expansion state, order, and preview image path.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/tables/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Tables\nexpanded: true\norder: 7\npreviewImg: /images/components/tables.png\n---\n```\n\n----------------------------------------\n\nTITLE: Using Modern CSS Variables for Media Queries in SCSS\nDESCRIPTION: This snippet demonstrates the correct way to use CSS variables for breakpoints in media queries, contrasting it with the deprecated method using sass functions.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/media-queries-function-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// Do\n@media (min-width: var(--p-breakpoints-md)) {}\n// Don't\n@include breakpoint-after(layout-width(page-with-nav)) {}\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update\nDESCRIPTION: Update of dependency versions showing version numbers and commit references.\nSOURCE: https://github.com/shopify/polaris/blob/main/stylelint-polaris/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`cdb617a`](https://github.com/Shopify/polaris/commit/cdb617a9624215836e25975cc4c371b941e6178a)]:\n  - @shopify/polaris-tokens@9.4.2\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Polaris Foundations Page in Markdown\nDESCRIPTION: Sets up the frontmatter for the Polaris foundations page, including title, order, description, section indicator, and icon. This metadata is used for page organization and display in the documentation system.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/foundations/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Foundations\norder: 2\ndescription: Polaris is the design system for the Shopify admin. It's the shared language that guides how we build high-quality merchant experiences.\nnewSection: true\nicon: BookOpenIcon\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Title in Markdown\nDESCRIPTION: This snippet demonstrates how to display the title defined in the frontmatter of a Markdown file using curly brace notation.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-12.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# {frontmatter.title}\n```\n\n----------------------------------------\n\nTITLE: Rendering Frontmatter Title in Markdown\nDESCRIPTION: Displays the title defined in the frontmatter using a Markdown heading.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/version-guides/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# {frontmatter.title}\n```\n\n----------------------------------------\n\nTITLE: Comparing Proper vs Improper Polaris Component Styling\nDESCRIPTION: Demonstrates the correct approach of using component props versus directly overriding component styles with CSS selectors. Shows why direct style overrides should be avoided in favor of using the component's built-in API.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/conventions-selector-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// Do\n+ <Textfield monospaced />\n// Don't\n- [class*='Polaris-TextField--Input'] {\n-   font-family: var(--p-font-family-mono);\n- };\n```\n\n----------------------------------------\n\nTITLE: Version Number Update with Dependencies\nDESCRIPTION: Version update with dependency changes and corresponding commit references\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* Updated dependencies [[`93db1ed8c`](https://github.com/Shopify/polaris/commit/93db1ed8c9771d2827d4bd5f7da3861409228ad8), [`0c9175177`](https://github.com/Shopify/polaris/commit/0c9175177021d93adfe19b57d44bbd33f656175f)]:\n  - @shopify/polaris@9.24.0\n  - @shopify/polaris-tokens@5.5.2\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates - Markdown\nDESCRIPTION: Lists updated dependency versions for Polaris packages including polaris-icons, polaris core, and polaris-tokens\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- @shopify/polaris-icons@5.0.0\n- @shopify/polaris@9.20.0\n- @shopify/polaris-tokens@5.5.0\n```\n\n----------------------------------------\n\nTITLE: Adding Patch Changes in Polaris Changelog\nDESCRIPTION: Adds patch changes including documentation updates, bug fixes, and component improvements in the changelog.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#11203](https://github.com/Shopify/polaris/pull/11203) [`8b9ded242`](https://github.com/Shopify/polaris/commit/8b9ded242e02b36f166a844c8ff2e160d217256d) Thanks [@kyledurand](https://github.com/kyledurand)! - Updated IndexTable documentation for when to hide bulk actions\n\n* [#11198](https://github.com/Shopify/polaris/pull/11198) [`351433f59`](https://github.com/Shopify/polaris/commit/351433f5972ff4d59896f27d97a831b33193ea67) Thanks [@kyledurand](https://github.com/kyledurand)! - Fixed typos in naming docs\n\n- [#11131](https://github.com/Shopify/polaris/pull/11131) [`9db9731c7`](https://github.com/Shopify/polaris/commit/9db9731c7d21d8bfa3738d906e455b9703ead3a8) Thanks [@sam-b-rose](https://github.com/sam-b-rose)! - Fixed icon search and query params from URL\n\n* [#11218](https://github.com/Shopify/polaris/pull/11218) [`b83ed4edb`](https://github.com/Shopify/polaris/commit/b83ed4edbade719a4935b0eee2fbba4b76051722) Thanks [@sam-b-rose](https://github.com/sam-b-rose)! - Fixed link to tokens from global search\n\n- [#11260](https://github.com/Shopify/polaris/pull/11260) [`61cacbfbb`](https://github.com/Shopify/polaris/commit/61cacbfbb4a59d97bd48124ee86c7b066be5b091) Thanks [@LauraAubin](https://github.com/LauraAubin)! - Fix column content alignment for the IndexTable and IndexFilters total column\n\n* [#11094](https://github.com/Shopify/polaris/pull/11094) [`2c5ca9900`](https://github.com/Shopify/polaris/commit/2c5ca990041de1a8c08aa4ab82c60c19945a5f00) Thanks [@laurkim](https://github.com/laurkim)! - Added support for `bodyXs` variant and fixed font weight for `headingLg` variant in `Text` component.\n  Updated references to font tokens from Polaris v11 to v12 in `Text` component documentation\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates\nDESCRIPTION: A markdown changelog entry showing updated dependencies and version changes for Polaris-related packages.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`d80cc63d6`](https://github.com/Shopify/polaris/commit/d80cc63d667ea08bb1e7ed9ce184da9f087dcb9d), [`4d0186647`](https://github.com/Shopify/polaris/commit/4d018664742bc3c9e7c4b577d31dcd05d09a2a6f)]:\n  - @shopify/polaris@11.7.0\n  - @shopify/polaris-icons@7.4.0\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Section Page\nDESCRIPTION: Example directory structure for adding a new page to an existing section.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n├── content\n│   ├── design\n│   │   ├── awesome-new-page.md\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Workspaces\nDESCRIPTION: Command to install dependencies and build all workspaces in the Polaris monorepo using pnpm.\nSOURCE: https://github.com/shopify/polaris/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Rendering RichCardGrid with Filtered Primitives - React JSX\nDESCRIPTION: This snippet renders a RichCardGrid component with a filtered list of posts whose titles are included in the primitives list defined in the frontmatter. It demonstrates how to pass filtered data as props in JSX. Ensure that both posts and frontmatter.primitives are defined and available in the component's context; posts should be an array of objects with a title property. The output displays cards relevant to primitive layout components.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/layout-and-structure/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RichCardGrid\n  cards={posts.filter((post) => frontmatter.primitives.includes(post.title))}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block defines metadata for the documentation page, including the title, short description, expansion state, display order, and a preview image path. This metadata is used by the documentation system (likely a static site generator) to build and organize the page.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/feedback-indicators/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Feedback indicators\nshortDescription: Inform merchants about the status of a process, provide feedback, or indicate progress.\nexpanded: true\norder: 5\npreviewImg: /images/components/feedback-indicators.png\n---\n```\n\n----------------------------------------\n\nTITLE: Recommended Component Migration Workflow\nDESCRIPTION: Shell commands for the recommended workflow when migrating Polaris components, including handling automated and manual migrations.\nSOURCE: https://github.com/shopify/polaris/blob/main/documentation/guides/migrating-from-v10-to-v11.md#2025-04-22_snippet_65\n\nLANGUAGE: sh\nCODE:\n```\n# Example migration\nnpx @shopify/polaris-migrator ...\n# Stash files with \"polaris-migrator:\" comments\ngit stash push $(grep -r -l \"polaris-migrator:\" $(git ls-files -m))\n# Stage all migrated files without \"polaris-migrator:\" comments\ngit add .\n# Format staged files only\ngit diff --staged --name-only | xargs npx prettier --write\n# Commit automated migrations\ngit commit -m \"Migrate X to Y\"\n\n# Bring back the files with \"polaris-migrator:\" comments\ngit stash pop\n\n# Stage all manually migrated files\ngit add .\n# Format staged files only\ngit diff --staged --name-only | xargs npx prettier --write\n# Commit manual migrations\ngit commit -m \"Manually migrate X to Y\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Text with Text Component (JSX/Markdown)\nDESCRIPTION: This snippet utilizes the Polaris 'Text' React component to render textual content. The inner content uses Markdown formatting (like the '##' heading) to structure the explanation about disabled color schemes or using other colors.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/design/colors/using-color.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n\n      ## Disabled color scheme\n\n      Some elements may require a disabled state. The color scheme for disabled elements is intentionally consistent throughout the admin interface, generally avoiding the use of distinct colors for each color role.\n\n  </Text>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n\n      ## Using other colors\n\n      The creation of new color roles is tied to the Shopify admin. Some colors available in the color palette are not yet tied to a color role. Usage of these colors is strictly reserved for illustration work.\n\n      More information about what color roles are available and their respective purposes can be found in color roles.\n\n  </Text>\n```\n\n----------------------------------------\n\nTITLE: Defining Action Properties for Navigation Component in Markdown\nDESCRIPTION: This snippet defines the properties for actions in the Navigation component. It includes details on icon, accessibility label, onClick function, and tooltip properties.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/components/internal-only/navigation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop               | Type                                                                      | Description                                                                        |\n| ------------------ | ------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |\n| icon               | IconProps['source']                                                       | An icon to be displayed as the content of the action                               |\n| accessibilityLabel | string                                                                    | A visually hidden label for screen readers to understand the content of the action |\n| onClick()          | function                                                                  | A callback function to handle clicking on the action                               |\n| tooltip            | [TooltipProps](https://polaris.shopify.com/components/tooltip#navigation) | Options for displaying a tooltip when you hover over the action button             |\n```\n\n----------------------------------------\n\nTITLE: Line Height Token Table in Markdown\nDESCRIPTION: A markdown table comparing new and old line height tokens with their corresponding values.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/whats-new/version-10-typography.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| New token         | Value | Old token              | Value |\n| ----------------- | ----- | ---------------------- | ----- |\n| --p-line-height-1 | 16    | --p-font-line-height-1 | 16    |\n| --p-line-height-2 | 20    | --p-font-line-height-2 | 20    |\n| --p-line-height-3 | 24    | --p-font-line-height-3 | 24    |\n| --p-line-height-4 | 28    | --p-font-line-height-4 | 28    |\n| --p-line-height-5 | 32    | --p-font-line-height-5 | 32    |\n| --p-line-height-6 | 40    | --p-font-line-height-6 | 36    |\n| --p-line-height-7 | 48    | --p-font-line-height-7 | 44    |\n```\n\n----------------------------------------\n\nTITLE: Disallowed Usage of Legacy Spacing Sass Variables in Polaris\nDESCRIPTION: This code snippet demonstrates a prohibited pattern in Polaris styling. It shows the use of legacy spacing Sass API $polaris-spacing, which is no longer recommended and should be avoided.\nSOURCE: https://github.com/shopify/polaris/blob/main/polaris.shopify.com/content/tools/stylelint-polaris/rules/space-global-disallowed-list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n// Don't\n@type map $spacing-data: $polaris-spacing;\n```\n\n----------------------------------------\n\nTITLE: Running Commands for Specific Workspaces\nDESCRIPTION: Examples of how to run commands for specific workspaces using turbo and filters.\nSOURCE: https://github.com/shopify/polaris/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm turbo run dev --filter=@shopify/polaris\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm turbo run dev --filter=polaris.shopify.com\n```"
  }
]