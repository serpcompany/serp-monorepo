[
  {
    "owner": "tortoise",
    "repo": "aerich",
    "content": "TITLE: Configuring TortoiseORM with Aerich Models\nDESCRIPTION: Example configuration for TortoiseORM including Aerich models. This setup is required before using Aerich commands.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTORTOISE_ORM = {\n    \"connections\": {\"default\": \"mysql://root:123456@127.0.0.1:3306/test\"},\n    \"apps\": {\n        \"models\": {\n            \"models\": [\"tests.models\", \"aerich.models\"],\n            \"default_connection\": \"default\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TortoiseORM with Aerich\nDESCRIPTION: Example configuration for TortoiseORM that includes aerich.models, which is necessary for Aerich to work properly.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTORTOISE_ORM = {\n    \"connections\": {\"default\": \"mysql://root:123456@127.0.0.1:3306/test\"},\n    \"apps\": {\n        \"models\": {\n            \"models\": [\"tests.models\", \"aerich.models\"],\n            \"default_connection\": \"default\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Database Configuration for TortoiseORM and Aerich\nDESCRIPTION: Example configuration for using Aerich with multiple databases in a TortoiseORM setup.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntortoise_orm = {\n    \"connections\": {\n        \"default\": expand_db_url(db_url, True),\n        \"second\": expand_db_url(db_url_second, True),\n    },\n    \"apps\": {\n        \"models\": {\"models\": [\"tests.models\", \"aerich.models\"], \"default_connection\": \"default\"},\n        \"models_second\": {\"models\": [\"tests.models_second\"], \"default_connection\": \"second\", },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TortoiseORM for Multiple Databases\nDESCRIPTION: Example configuration for TortoiseORM with multiple database connections and apps.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntortoise_orm = {\n    \"connections\": {\n        \"default\": \"postgres://postgres_user:postgres_pass@127.0.0.1:5432/db1\",\n        \"second\": \"postgres://postgres_user:postgres_pass@127.0.0.1:5432/db2\",\n    },\n    \"apps\": {\n        \"models\": {\"models\": [\"tests.models\", \"aerich.models\"], \"default_connection\": \"default\"},\n        \"models_second\": {\"models\": [\"tests.models_second\"], \"default_connection\": \"second\", },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aerich in Python Application\nDESCRIPTION: Example of how to use Aerich programmatically within a Python application using the Command class.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom aerich import Command\n\nasync with Command(tortoise_config=config, app='models') as command:\n    await command.migrate('test')\n    await command.upgrade()\n```\n\n----------------------------------------\n\nTITLE: Programmatic Usage of Aerich in Python Code\nDESCRIPTION: Example of using Aerich programmatically in Python code through the Command class rather than via the command line.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom aerich import Command\n\ncommand = Command(tortoise_config=config, app='models')\nawait command.init()\nawait command.migrate('test')\n```\n\n----------------------------------------\n\nTITLE: Initializing Aerich Configuration\nDESCRIPTION: Shell command to initialize Aerich configuration file and migrations location.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naerich init -t tests.backends.mysql.TORTOISE_ORM\n```\n\n----------------------------------------\n\nTITLE: Initializing Aerich Configuration\nDESCRIPTION: Example command to initialize Aerich with a specific TortoiseORM configuration module.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init -t tests.backends.mysql.TORTOISE_ORM\n\nSuccess create migrate location ./migrations\nSuccess write config to pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Schema with Aerich\nDESCRIPTION: Command to initialize the database with the current schema defined in TortoiseORM models.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init-db\n\nSuccess create app migrate location ./migrations/models\nSuccess generate schema for app \"models\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with Aerich\nDESCRIPTION: Command to initialize the database and create migration locations for the specified Tortoise-ORM app.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\naerich init-db\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration with Aerich\nDESCRIPTION: Command to create a new migration file with a specified name.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naerich migrate --name drop_column\n```\n\n----------------------------------------\n\nTITLE: Generating a Database Migration\nDESCRIPTION: Command to create a migration file based on changes made to TortoiseORM models.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> aerich migrate --name drop_column\n\nSuccess migrate 1_202029051520102929_drop_column.py\n```\n\n----------------------------------------\n\nTITLE: Upgrading Database to Latest Version\nDESCRIPTION: Command to apply all pending migrations and upgrade the database to the latest version.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\naerich upgrade\n```\n\n----------------------------------------\n\nTITLE: Upgrading Database to Latest Version\nDESCRIPTION: Command to apply all pending migrations to bring the database to the latest schema version.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> aerich upgrade\n\nSuccess upgrade 1_202029051520102929_drop_column.py\n```\n\n----------------------------------------\n\nTITLE: Downgrading Database to Previous Version\nDESCRIPTION: Command to rollback the database to a previous migration version.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naerich downgrade\n```\n\n----------------------------------------\n\nTITLE: Downgrading Database Schema\nDESCRIPTION: Command to downgrade the database to a specified version or to the previous version.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n> aerich downgrade\n\nSuccess downgrade 1_202029051520102929_drop_column.py\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Specific Table\nDESCRIPTION: Command to introspect a specific database table and save the generated TortoiseORM model to a file.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\naerich inspectdb -t user > models.py\n```\n\n----------------------------------------\n\nTITLE: Inspecting All Database Tables\nDESCRIPTION: Command to introspect all database tables and output TortoiseORM models to the console.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\naerich --app models inspectdb\n```\n\n----------------------------------------\n\nTITLE: Viewing Pending Migrations\nDESCRIPTION: Command to show which migrations should be applied but haven't been yet.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n> aerich heads\n\n1_202029051520102929_drop_column.py\n```\n\n----------------------------------------\n\nTITLE: Viewing Migration History\nDESCRIPTION: Command to list all migration files that have been created.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> aerich history\n\n1_202029051520102929_drop_column.py\n```\n\n----------------------------------------\n\nTITLE: Defining Unmanaged Model in TortoiseORM\nDESCRIPTION: Example of how to define a model that should be ignored by Aerich migrations using the managed=False option in the Meta class.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(Model):\n    class Meta:\n        managed = False\n```\n\n----------------------------------------\n\nTITLE: Generated TortoiseORM Model from InspectDB\nDESCRIPTION: Example of a TortoiseORM model automatically generated by the inspectdb command from a database table.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom tortoise import Model, fields\n\n\nclass Test(Model):\n    date = fields.DateField(null=True, )\n    datetime = fields.DatetimeField(auto_now=True, )\n    decimal = fields.DecimalField(max_digits=10, decimal_places=2, )\n    float = fields.FloatField(null=True, )\n    id = fields.IntField(pk=True, )\n    string = fields.CharField(max_length=200, null=True, )\n    time = fields.TimeField(null=True, )\n    tinyint = fields.BooleanField(null=True, )\n```\n\n----------------------------------------\n\nTITLE: Example SQL Table Definition\nDESCRIPTION: SQL definition of a test table with various data types that can be introspected by Aerich.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `test`\n(\n    `id`       int            NOT NULL AUTO_INCREMENT,\n    `decimal`  decimal(10, 2) NOT NULL,\n    `date`     date                                    DEFAULT NULL,\n    `datetime` datetime       NOT NULL                 DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    `time`     time                                    DEFAULT NULL,\n    `float`    float                                   DEFAULT NULL,\n    `string`   varchar(200) COLLATE utf8mb4_general_ci DEFAULT NULL,\n    `tinyint`  tinyint                                 DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    KEY `asyncmy_string_index` (`string`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4\n  COLLATE = utf8mb4_general_ci\n```\n\n----------------------------------------\n\nTITLE: Installing Aerich with TOML support\nDESCRIPTION: Command to install Aerich package with TOML support using pip.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \"aerich[toml]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Aerich via pip\nDESCRIPTION: Command to install the Aerich package from PyPI using pip.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install aerich\n```\n\n----------------------------------------\n\nTITLE: Aerich Command Line Interface Usage\nDESCRIPTION: Output of the help command showing all available Aerich commands and options.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> aerich -h\n\nUsage: aerich [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -V, --version      Show the version and exit.\n  -c, --config TEXT  Config file.  [default: pyproject.toml]\n  --app TEXT         Tortoise-ORM app name.\n  -h, --help         Show this message and exit.\n\nCommands:\n  downgrade  Downgrade to specified version.\n  heads      Show current available heads in migrate location.\n  history    List all migrate items.\n  init       Init config file and generate root migrate location.\n  init-db    Generate schema and generate app migrate location.\n  inspectdb  Introspects the database tables to standard output as...\n  migrate    Generate migrate changes file.\n  upgrade    Upgrade to specified version.\n```\n\n----------------------------------------\n\nTITLE: Aerich Init Command Help\nDESCRIPTION: Help output for the 'init' command which initializes the configuration file and migration directory.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> aerich init -h\n\nUsage: aerich init [OPTIONS]\n\n  Init config file and generate root migrate location.\n\nOptions:\n  -t, --tortoise-orm TEXT  Tortoise-ORM config module dict variable, like\n                           settings.TORTOISE_ORM.  [required]\n  --location TEXT          Migrate store location.  [default: ./migrations]\n  -s, --src_folder TEXT    Folder of the source, relative to the project root.\n  -h, --help               Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Downgrade Command Help\nDESCRIPTION: Help output for the 'downgrade' command which reverts the database schema to a specified version.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> aerich downgrade -h\n\nUsage: aerich downgrade [OPTIONS]\n\n  Downgrade to specified version.\n\nOptions:\n  -v, --version INTEGER  Specified version, default to last.  [default: -1]\n  -d, --delete           Delete version files at the same time.  [default:\n                         False]\n\n  --yes                  Confirm the action without prompting.\n  -h, --help             Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: InspectDB Command Help\nDESCRIPTION: Help output for the 'inspectdb' command which generates TortoiseORM models from existing database tables.\nSOURCE: https://github.com/tortoise/aerich/blob/dev/README_RU.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nUsage: aerich inspectdb [OPTIONS]\n\n  Introspects the database tables to standard output as TortoiseORM model.\n\nOptions:\n  -t, --table TEXT  Which tables to inspect.\n  -h, --help        Show this message and exit.\n```"
  }
]