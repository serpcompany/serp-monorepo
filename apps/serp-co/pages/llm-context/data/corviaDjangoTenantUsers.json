[
  {
    "owner": "corvia",
    "repo": "django-tenant-users",
    "content": "TITLE: Configuring Multi-Type Tenants\nDESCRIPTION: This configuration snippet demonstrates how to configure multi-type tenants. Each tenant type ('public', 'type1') can have its own set of apps and URL configurations. This example defines two tenant types, 'public' and 'type1', with different sets of apps.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTENANT_TYPES = {\n   \"public\": {\n      \"APPS\": [\n         \"django.contrib.auth\", \"django.contrib.contenttypes\",\n         \"tenant_users.permissions\", \"tenant_users.tenants\",\n         \"companies\", \"users\", # Add other apps as needed ],\n\n      \"URLCONF\": \"myproject.urls.public\",\n\n   },\n\n   \"type1\": {\n      \"APPS\": [\n         \"django.contrib.auth\", \"django.contrib.contenttypes\",\n         \"tenant_users.permissions\", # Add other apps as needed ], },\n\n   # Add other tenant types as needed }\n```\n\n----------------------------------------\n\nTITLE: Provisioning Multi-Type Tenant in Python\nDESCRIPTION: This code demonstrates how to provision a tenant with a specific type using the `tenant_type` keyword argument of the `provision_tenant` function. It imports the required modules, gets the tenant owner, and calls `provision_tenant` with the tenant name, slug, owner, and tenant type.  This leverages the multi-type tenants feature from django-tenants.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/using.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tenant_users.tenants.tasks import provision_tenant\nfrom users.models import TenantUser\n\nprovision_tenant_owner = TenantUser.objects.get(email=\"admin@evilcorp.com\")\n\ntenant, domain = provision_tenant(\n    \"EvilCorp\", \"evilcorp\", provision_tenant_owner, tenant_type=\"tenant_type\"\n)\n```\n\n----------------------------------------\n\nTITLE: Provisioning a New Tenant in Python\nDESCRIPTION: This code snippet demonstrates how to provision a new tenant using the `provision_tenant` function from the `tenant_users.tenants.tasks` module. It imports the necessary modules, retrieves a tenant owner, and then calls the `provision_tenant` function with the tenant name, slug, and owner as arguments. The function returns the created tenant and domain objects.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/using.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tenant_users.tenants.tasks import provision_tenant\nfrom users.models import TenantUser\n\nprovision_tenant_owner = CustomUserModel.objects.get(email=\"admin@evilcorp.com\")\n\n\ntenant, domain = provision_tenant(\"EvilCorp\", \"evilcorp\", provision_tenant_owner)\n```\n\n----------------------------------------\n\nTITLE: Updating SHARED_APPS and TENANT_APPS in settings.py\nDESCRIPTION: Add the necessary apps to SHARED_APPS and TENANT_APPS in your Django settings file. This configures which apps are shared across all tenants and which are specific to each tenant. The 'tenant_users.permissions' and 'tenant_users.tenants' apps are essential for the multi-tenant user management.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSHARED_APPS = [\n    ...\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"tenant_users.permissions\",\n    \"tenant_users.tenants\",\n    \"companies\",\n    \"users\",\n    ...\n]\n\nTENANT_APPS = [\n    ...\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"tenant_users.permissions\",\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a User in Python\nDESCRIPTION: This code shows how to create a new tenant user using the `create_user` method of the `TenantUser.objects` manager. It imports the `TenantUser` model and then calls `create_user` with the user's email (which serves as the username), password, and a boolean indicating superuser status. In django-tenant-users, emails are usernames.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/using.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom users.models import TenantUser\n\nuser = TenantUser.objects.create_user(\"user@evilcorp.com\", \"password\", True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Model in Django\nDESCRIPTION: Define a custom user model that inherits from UserProfile provided by django-tenant-users. This allows for extending the user model with custom fields while maintaining compatibility with the multi-tenant authentication system. In this example, the TenantUser model is created in the 'users' application.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom tenant_users.tenants.models import UserProfile\n\n\nclass TenantUser(UserProfile):\n    name = models.CharField(max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in Python\nDESCRIPTION: This code shows how to 'delete' a user in `django-tenant-users` by using the `delete_user` manager method. It retrieves the user and then calls `TenantUser.objects.delete_user(user)` to mark the user as inactive rather than permanently deleting them.  This allows for potential reactivation in the future.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/using.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom users.models import TenantUser\n\nuser = TenantUser.objects.get(email=\"user@domain.com\")\nTenantUser.objects.delete_user(user)\n```\n\n----------------------------------------\n\nTITLE: Adding a User to a Tenant in Python\nDESCRIPTION: This code demonstrates how to give a user access to a tenant using the `add_user` function.  It fetches the user and the tenant, then calls the `evil.add_user(user)` method to associate the user with the specified tenant. This function is a method of the `TenantBase` model.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/using.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom companies.models import Company\nfrom users.models import TenantUser\n\nuser = TenantUser.objects.get(email=\"user@domain.com\")\nevil = Company.objects.get(slug=\"evil\")\nevil.add_user(user)\n```\n\n----------------------------------------\n\nTITLE: Modifying the Tenant Model in Django\nDESCRIPTION: Modify the existing TenantModel to inherit from TenantBase provided by django-tenant-users. This ensures that the tenant model is compatible with the django-tenant-users authentication and authorization features. The name and description fields are examples and can be customized.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tenant_users.tenants.models import TenantBase\n\n\nclass Company(TenantBase):\n    name = models.CharField(max_length=100)\n    description = models.TextField(max_length=200)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tenant in Python\nDESCRIPTION: This code demonstrates the proper way to 'delete' a tenant using the `delete_tenant` method.  It retrieves the tenant (Company in this example) and calls `delete_tenant()` to mark the tenant as inactive instead of permanently removing it. This approach maintains data integrity.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/using.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom companies.models import Company\n\nevil = Company.objects.get(slug=\"evil\")\nevil.delete_tenant()\n```\n\n----------------------------------------\n\nTITLE: Adding TenantAccessMiddleware\nDESCRIPTION: Add the TenantAccessMiddleware to the MIDDLEWARE setting. This middleware checks if the authenticated user has access to the requested tenant. If the user does not have access, a 404 error is raised. Ensure this is after Django's AuthenticationMiddleware.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    ...\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    ...\n    \"tenant_users.tenants.middleware.TenantAccessMiddleware\",\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Public Tenant programmatically\nDESCRIPTION: Use the create_public_tenant utility function to create the public tenant programmatically. This function requires the domain URL and owner email as parameters and creates the necessary entries in the database for the public tenant.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom tenant_users.tenants.utils import create_public_tenant\n\ncreate_public_tenant(domain_url=\"public.domain.com\", owner_email=\"admin@domain.com\")\n```\n\n----------------------------------------\n\nTITLE: Installing isort and black for code formatting\nDESCRIPTION: This command installs `isort` and `black`, tools used to automatically format Python code. `isort` sorts imports, while `black` formats the code according to PEP 8.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install isort black\n```\n\n----------------------------------------\n\nTITLE: Creating Public Tenant via Management Command\nDESCRIPTION: Use the manage.py command to create the public tenant. This command provides a convenient way to create the public tenant directly from the command line. It requires the domain URL and owner email as command-line arguments.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmanage.py create_public_tenant --domain_url public.domain.com --owner_email admin@domain.com\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth User Model\nDESCRIPTION: Specify the AUTH_USER_MODEL setting to point to the custom user model created earlier. This tells Django to use the custom user model for authentication and authorization purposes. This should point to the model inheriting from TenantUser.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nAUTH_USER_MODEL = \"users.TenantUser\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Cross Domain Cookies\nDESCRIPTION: Configure the SESSION_COOKIE_DOMAIN setting to enable single sign-on across tenants. Setting this to a domain like '.domain.com' allows cookies to be shared across all subdomains (tenants). However, understand the security implications.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nSESSION_COOKIE_DOMAIN = \".domain.com\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Access Denied Message\nDESCRIPTION: Optionally customize the error message displayed when a user is denied access to a tenant by setting the TENANT_USERS_ACCESS_ERROR_MESSAGE in your Django settings. This provides a more user-friendly experience when access is restricted.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTENANT_USERS_ACCESS_ERROR_MESSAGE = \"Custom access denied message.\"\n```\n\n----------------------------------------\n\nTITLE: Running tests with pytest and Poetry\nDESCRIPTION: This command executes the project's test suite using pytest within the Poetry environment. Ensure that all tests pass before submitting a pull request.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Formatting code with isort\nDESCRIPTION: This command uses `isort` to automatically sort the imports in the project's Python files. It ensures that imports are organized in a consistent and readable manner.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nisort .\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Domain\nDESCRIPTION: Define the TENANT_USERS_DOMAIN setting, which is used when provisioning new tenants. This domain is used as the base domain for all tenants created using the django-tenant-users utilities and management commands.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTENANT_USERS_DOMAIN = \"domain.com\"\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies using Poetry\nDESCRIPTION: This command uses Poetry to install the project's dependencies as specified in the `pyproject.toml` file. It creates a virtual environment and installs all required packages.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Switching to Custom Authentication Backend\nDESCRIPTION: Configure the authentication backend to use the UserBackend provided by django-tenant-users. This backend enables the multi-tenant authentication logic, ensuring that users are authenticated against the correct tenant.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAUTHENTICATION_BACKENDS = (\"tenant_users.permissions.backend.UserBackend\",)\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch using Git\nDESCRIPTION: This command creates a new branch for your feature or bugfix. It's important to create a separate branch for each contribution to keep the main branch clean.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Formatting code with black\nDESCRIPTION: This command uses `black` to automatically format the project's Python files according to PEP 8. It ensures consistent code style throughout the project.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nblack .\n```\n\n----------------------------------------\n\nTITLE: Committing changes using Git\nDESCRIPTION: This command commits the changes with a descriptive commit message. The `-am` flag combines the `add` and `commit` operations.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am \"Add feature: Your feature description\"\n```\n\n----------------------------------------\n\nTITLE: Pushing the branch to the forked repository using Git\nDESCRIPTION: This command pushes the created branch to your forked repository on GitHub. Replace `feature/your-feature-name` with the actual name of your branch.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Formatting documentation with rstfmt and Poetry\nDESCRIPTION: This command formats the reStructuredText documentation files within the Poetry environment using `rstfmt`. It ensures that the documentation is consistently formatted.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npoetry run rstfmt docs\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry for Python dependency management\nDESCRIPTION: This command installs Poetry, a tool for dependency management and packaging in Python. Poetry helps to manage project dependencies and virtual environments.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Installing django-tenant-users with pip\nDESCRIPTION: Install the django-tenant-users package using pip, the Python package installer. This command fetches and installs the latest version of the package from the Python Package Index (PyPI).\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-tenant-users\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository using Git\nDESCRIPTION: This command clones the forked repository to your local machine. Replace `your-username` with your GitHub username.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/django-tenant-users.git\n```\n\n----------------------------------------\n\nTITLE: Installing rstfmt for documentation formatting\nDESCRIPTION: This command installs `rstfmt`, a tool for formatting reStructuredText documentation files.  This ensures consistent formatting for the project's documentation.\nSOURCE: https://github.com/corvia/django-tenant-users/blob/master/docs/pages/conributing.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install rstfmt\n```"
  }
]