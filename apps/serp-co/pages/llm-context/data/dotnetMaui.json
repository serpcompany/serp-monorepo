[
  {
    "owner": "dotnet",
    "repo": "maui",
    "content": "TITLE: Canvas Extension Methods for Drawing in MAUI Graphics\nDESCRIPTION: Extension methods for ICanvas that provide convenient drawing functionality for shapes like circles, ellipses, rectangles, rounded rectangles, lines, and paths. These methods simplify common drawing operations by providing overloaded versions that accept different parameter types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.BitmapExportContextExtensions.WriteToFile(this Microsoft.Maui.Graphics.BitmapExportContext exportContext, string filename) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawLine(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Graphics Platform Canvas Operations\nDESCRIPTION: Method signatures for platform-specific canvas operations including drawing, state management, and resource handling in Microsoft.Maui.Graphics\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.Session.get -> Microsoft.Graphics.Canvas.CanvasDrawingSession\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: AnimationManager Class API Definition in C#\nDESCRIPTION: Public API surface for the Microsoft.Maui.Animations.AnimationManager class, handling animation lifecycle and management\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.AnimationManager.AnimationManager(Microsoft.Maui.Animations.ITicker! ticker) -> void\nMicrosoft.Maui.Animations.AnimationManager.AutoStartTicker.get -> bool\nMicrosoft.Maui.Animations.AnimationManager.AutoStartTicker.set -> void\nMicrosoft.Maui.Animations.AnimationManager.Dispose() -> void\n```\n\n----------------------------------------\n\nTITLE: TitleBar Component API Definition\nDESCRIPTION: Class definition for MAUI TitleBar control with properties for customizing window title bars including content, colors, icons and layout sections.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar\nMicrosoft.Maui.Controls.TitleBar.Content.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Controls.TitleBar.Content.set -> void\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.set -> void\nMicrosoft.Maui.Controls.TitleBar.Icon.get -> Microsoft.Maui.Controls.ImageSource!\nMicrosoft.Maui.Controls.TitleBar.Icon.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ICanvas Interface Methods in C#\nDESCRIPTION: This snippet shows various method signatures for the ICanvas interface in the Microsoft.Maui.Graphics namespace. These methods provide drawing and transformation capabilities for canvas operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ICanvas.Alpha.set -> void\nMicrosoft.Maui.Graphics.ICanvas.Antialias.set -> void\nMicrosoft.Maui.Graphics.ICanvas.BlendMode.set -> void\nMicrosoft.Maui.Graphics.ICanvas.ClipRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nMicrosoft.Maui.Graphics.ICanvas.DisplayScale.get -> float\nMicrosoft.Maui.Graphics.ICanvas.DisplayScale.set -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Control Handlers for iOS\nDESCRIPTION: Method signatures for interactive UI controls like Shape, Slider, Stepper, and Switch handlers. These create and manage platform-specific controls like UISlider, UIStepper, and UISwitch.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ShapeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiShapeView!\noverride Microsoft.Maui.Handlers.ShapeViewHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.SliderHandler.ConnectHandler(UIKit.UISlider! platformView) -> void\noverride Microsoft.Maui.Handlers.SliderHandler.CreatePlatformView() -> UIKit.UISlider!\noverride Microsoft.Maui.Handlers.SliderHandler.DisconnectHandler(UIKit.UISlider! platformView) -> void\noverride Microsoft.Maui.Handlers.StepperHandler.ConnectHandler(UIKit.UIStepper! platformView) -> void\noverride Microsoft.Maui.Handlers.StepperHandler.CreatePlatformView() -> UIKit.UIStepper!\noverride Microsoft.Maui.Handlers.StepperHandler.DisconnectHandler(UIKit.UIStepper! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.ConnectHandler(UIKit.UISwitch! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.CreatePlatformView() -> UIKit.UISwitch!\noverride Microsoft.Maui.Handlers.SwitchHandler.DisconnectHandler(UIKit.UISwitch! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.NeedsContainer.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Utilities in MAUI (C#)\nDESCRIPTION: Comprehensive set of unit conversion methods for temperature, pressure, distance, angle, weight and other measurements. Provides conversions between different measurement systems.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToHertz(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToRadiansPerSecond(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesToRadians(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.FahrenheitToCelsius(double fahrenheit) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HectopascalsToKilopascals(double hpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HectopascalsToPascals(double hpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HertzToDegreesPerSecond(double hertz) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HertzToRadiansPerSecond(double hertz) -> double\nstatic Microsoft.Maui.Media.UnitConverters.InternationalFeetToMeters(double internationalFeet) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KelvinToCelsius(double kelvin) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilogramsToPounds(double kilograms) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilometersToMiles(double kilometers) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilopascalsToHectopascals(double kpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilopascalsToPascals(double kpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MetersToInternationalFeet(double meters) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MetersToUSSurveyFeet(double meters) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MilesToKilometers(double miles) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MilesToMeters(double miles) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PascalsToAtmospheres(double pascals) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToKilograms(double pounds) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToStones(double pounds) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToDegreesPerSecond(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToHertz(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansToDegrees(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.StonesToPounds(double stones) -> double\nstatic Microsoft.Maui.Media.UnitConverters.USSurveyFeetToMeters(double usFeet) -> double\n```\n\n----------------------------------------\n\nTITLE: Performing Map Actions with Microsoft.Maui Application Model in C#\nDESCRIPTION: The set of static methods from the `Microsoft.Maui.ApplicationModel.Map` and `MapExtensions` classes allows opening maps using latitude and longitude, location objects, or placemarks. They also provide asynchronous capabilities via Task objects. Prerequisites include understanding of asynchronous programming in C#.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, double latitude, double longitude) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Permission Management in Microsoft.Maui\nDESCRIPTION: Outlines the initializers and enumerations for handling various permissions, such as Camera and Location. Uses Microsoft.Maui.ApplicationModel and is structured using classes like BasePermission.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.BasePermission.BasePermission() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.BasePlatformPermission() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Battery.Battery() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Bluetooth.Bluetooth() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarRead.CalendarRead() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarWrite.CalendarWrite() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Camera.Camera() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsRead.ContactsRead() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsWrite.ContactsWrite() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Flashlight.Flashlight() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.LaunchApp.LaunchApp() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.LocationAlways.LocationAlways() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.LocationWhenInUse.LocationWhenInUse() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Maps.Maps() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Media.Media() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Microphone.Microphone() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices.NearbyWifiDevices() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.NetworkState.NetworkState() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Phone.Phone() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Photos.Photos() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.PhotosAddOnly.PhotosAddOnly() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.PostNotifications.PostNotifications() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Reminders.Reminders() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Sensors.Sensors() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Sms.Sms() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Speech.Speech() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.StorageRead.StorageRead() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.StorageWrite.StorageWrite() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Vibrate.Vibrate() -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Interface: IView Layout and Rendering\nDESCRIPTION: Comprehensive interface defining view properties, layout, measurement, and rendering capabilities including dimensions, alignment, and visual properties\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: IView Interface Members in .NET MAUI\nDESCRIPTION: Members of the IView interface from Microsoft.Maui namespace, which represents a visual element in a MAUI application. This interface defines properties and methods for UI elements including layout, measurement, focus handling, and visual attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IView.Height.get -> double\nMicrosoft.Maui.IView.HorizontalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.InputTransparent.get -> bool\nMicrosoft.Maui.IView.InvalidateArrange() -> void\nMicrosoft.Maui.IView.InvalidateMeasure() -> void\nMicrosoft.Maui.IView.IsEnabled.get -> bool\nMicrosoft.Maui.IView.IsFocused.get -> bool\nMicrosoft.Maui.IView.IsFocused.set -> void\nMicrosoft.Maui.IView.Margin.get -> Microsoft.Maui.Thickness\nMicrosoft.Maui.IView.MaximumHeight.get -> double\nMicrosoft.Maui.IView.MaximumWidth.get -> double\nMicrosoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.MinimumHeight.get -> double\nMicrosoft.Maui.IView.MinimumWidth.get -> double\nMicrosoft.Maui.IView.Opacity.get -> double\nMicrosoft.Maui.IView.Semantics.get -> Microsoft.Maui.Semantics?\nMicrosoft.Maui.IView.Shadow.get -> Microsoft.Maui.IShadow?\nMicrosoft.Maui.IView.Unfocus() -> void\nMicrosoft.Maui.IView.VerticalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.Visibility.get -> Microsoft.Maui.Visibility\nMicrosoft.Maui.IView.Width.get -> double\nMicrosoft.Maui.IView.ZIndex.get -> int\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Color Constants in .NET MAUI\nDESCRIPTION: Static readonly color constant declarations for the Microsoft.Maui.Graphics.Colors class. Each constant represents a predefined color value that can be used throughout a MAUI application for consistent color referencing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkKhaki -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkMagenta -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOliveGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOrange -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOrchid -> Microsoft.Maui.Graphics.Color\n// ... additional color definitions\n```\n\n----------------------------------------\n\nTITLE: Abstract Canvas Functionality in Microsoft.Maui (C#)\nDESCRIPTION: This code snippet details the abstract definitions within the Microsoft.Maui.Graphics library, used for various canvas operations such as drawing shapes (arc, ellipse, line, rectangle), rotating, scaling, and managing transformations. These must be implemented by any subclass aiming to provide custom graphics handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FontSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.MiterLimit.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawEllipse(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians, float x, float y) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformScale(float fx, float fy) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformStrokeSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformTranslate(float tx, float ty) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineCap.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineJoin.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.SubtractFromClip(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Animation Class Implementation - C#\nDESCRIPTION: Core animation class implementation for MAUI, providing methods for creating and managing animations with callbacks and timing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation\nMicrosoft.Maui.Animations.Animation.Add(double beginAt, double duration, Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.Animation.Animation() -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void\n```\n\n----------------------------------------\n\nTITLE: File Management with Microsoft.Maui.Storage\nDESCRIPTION: Details key interface methods and properties related to file handling, including operations for file picking and secure data storing. These methods can be asynchronously executed and require precise handling of file paths and types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.IFilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.IFilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: Checking Email Compose Support in .NET MAUI\nDESCRIPTION: This snippet retrieves a boolean value indicating whether email composition is supported on the device. It is the getter for the IsComposeSupported property of the IEmail interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IEmail.IsComposeSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Test Interactions with Appium\nDESCRIPTION: Example showing how to interact with UI elements in an Appium test, including waiting for elements, entering text, and validating results.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/UITesting.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nApp.WaitForElement(\"btnLogin\");\nApp.EnterText(\"entryUsername\", \"user@email.com\");\nApp.EnterText(\"entryPassword\", \"Password\");\n\nApp.Tap(\"btnLogin\");\nvar lblStatus = App.WaitForElement(\"lblStatus\").FirstOrDefault();\nvar text = lblStatus?.Text;\n\nAssert.IsNotNull(text);\nAssert.IsTrue(text.StartsWith(\"Logging in\", StringComparison.CurrentCulture));\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constructors in C#\nDESCRIPTION: This snippet shows various constructor overloads for the Color class in the Microsoft.Maui.Graphics namespace. These constructors allow creating color objects using different parameter combinations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.Color() -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue, byte alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(float gray) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue, float alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(int red, int green, int blue, int alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(int red, int green, int blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(System.Numerics.Vector4 color) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Extensions\nDESCRIPTION: Static extension methods for handling animations and interpolation (lerp) operations on various types including colors, points, rectangles and thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.GenericLerp<T>(this T start, T end, double progress, double toggleThreshold = 0.5) -> T\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!\n```\n\n----------------------------------------\n\nTITLE: Creating MAUI App Builder\nDESCRIPTION: Static method for creating a new MAUI application builder instance. The useDefaults parameter determines whether default configurations should be applied.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.MauiApp.CreateBuilder(bool useDefaults = true) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining HybridWebView Class in .NET MAUI\nDESCRIPTION: HybridWebView class implementation for MAUI that enables web view functionality with JavaScript interaction capabilities. Includes methods for JavaScript evaluation and message handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.set -> void\nMicrosoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.set -> void\nMicrosoft.Maui.Controls.HybridWebView.HybridWebView() -> void\nMicrosoft.Maui.Controls.HybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\n```\n\n----------------------------------------\n\nTITLE: IGeolocation Interface Definition in C#\nDESCRIPTION: Interface for geolocation services in .NET MAUI. Provides methods to get current location, listen for location changes, and manage foreground location tracking with event handlers for changes and failures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGeolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: Device Information in MAUI Applications\nDESCRIPTION: Provides static properties for accessing device information, including manufacturer, model, platform, and version. Useful for implementing device-specific features and compatibility checks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceInfo.Current.get -> Microsoft.Maui.Devices.IDeviceInfo!\nstatic Microsoft.Maui.Devices.DeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nstatic Microsoft.Maui.Devices.DeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceInfo.Manufacturer.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Model.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Name.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DeviceInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.Devices.DeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Mapping Methods in .NET MAUI\nDESCRIPTION: Collection of static methods in ViewHandler class that map various view properties like borders, dimensions, opacity, transformations, and user interactions to platform implementations. These methods are used by the MAUI framework to handle cross-platform UI property rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending Command Mappers in MAUI (C#)\nDESCRIPTION: These extension methods for CommandMapper and ICommandMapper classes provide functionality to append, modify, prepend, and replace mappings in MAUI's command mapping system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing App Information in .NET MAUI\nDESCRIPTION: Static methods in the AppInfo class to access application information such as version, theme, and layout direction. These methods help developers retrieve crucial app details and provide functionality to open settings UI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nstatic Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for ImageHandler in MAUI (C#)\nDESCRIPTION: Static methods that connect IImage interface properties to platform-specific implementations through IImageHandler, including aspect ratio, animation control, and image source mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapSource(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Scaling Implementation\nDESCRIPTION: ScalingCanvas class implementation that provides methods for drawing and transforming graphics with proper scaling support. Includes methods for drawing shapes and handling transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ScalingCanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.Rotate(float degrees) -> void\n```\n\n----------------------------------------\n\nTITLE: Indicator View Handler Methods\nDESCRIPTION: Static methods for configuring indicator view properties such as count, visibility, colors, shape, size and positioning.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BlazorWebView Class in C# for .NET MAUI\nDESCRIPTION: Defines the BlazorWebView class with properties and events for managing Blazor components in a MAUI WebView. Includes initialization events, host page settings, and URL loading handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.BlazorWebView() -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.BlazorWebViewInitialized -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs!>?\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.BlazorWebViewInitializing -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializingEventArgs!>?\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.HostPage.get -> string?\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.HostPage.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.RootComponents.get -> Microsoft.AspNetCore.Components.WebView.Maui.RootComponentsCollection!\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.StartPath.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.StartPath.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.UrlLoading -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.UrlLoadingEventArgs!>?\n```\n\n----------------------------------------\n\nTITLE: XAML Extension Classes API Definition\nDESCRIPTION: Public API surface for XAML extensions including TypeExtension, BindingExtension, and other XAML markup extensions used in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TypeExtension.ProvideValue(System.IServiceProvider serviceProvider) -> System.Type\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.get -> string\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Mode.get -> Microsoft.Maui.Controls.BindingMode\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Mode.set -> void\n```\n\n----------------------------------------\n\nTITLE: NavigationViewHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the NavigationViewHandler class in Microsoft.Maui that manage navigation operations between views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI App Configuration Extensions in C#\nDESCRIPTION: These extension methods are used to configure various aspects of a MAUI application, including animations, dispatching, essentials, fonts, and handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\n// ... (additional configuration extension methods)\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots in MAUI (C#)\nDESCRIPTION: Methods for capturing screenshots of the current application window. Provides functionality to check if screenshot capture is supported on the device.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!\nstatic Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Platform Information in .NET MAUI\nDESCRIPTION: Static properties to identify the current device platform (Tizen, tvOS, UWP, WinUI, etc.) within MAUI applications. These properties return enumeration values from the DevicePlatform type to determine the operating system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.Tizen.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.tvOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.Unknown.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.UWP.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.watchOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.WinUI.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\n----------------------------------------\n\nTITLE: Absolute Layout Flags in .NET MAUI\nDESCRIPTION: Defines positioning and sizing configuration options for absolute layout elements, supporting proportional and fixed positioning strategies\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1\n```\n\n----------------------------------------\n\nTITLE: Secure Storage Get Async in .NET MAUI\nDESCRIPTION: This asynchronous method retrieves a value associated with a specified key from the secure storage, returning a task that resolves to a string, which might be null if the key does not exist.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\n```\n\n----------------------------------------\n\nTITLE: Preferences Storage Methods in MAUI C#\nDESCRIPTION: Static methods for storing and retrieving various data types in preferences storage. Includes overloads for optional shared name parameter to specify storage container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void\n```\n\n----------------------------------------\n\nTITLE: Geocoding Services in MAUI C# Applications\nDESCRIPTION: Static methods to perform geocoding operations in MAUI applications, converting between addresses and geographic coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.Default.get -> Microsoft.Maui.Devices.Sensors.IGeocoding!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetMapServiceToken(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding) -> string?\nstatic Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetPlacemarksAsync(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.GeocodingExtensions.SetMapServiceToken(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, string? mapServiceToken) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler Classes for MAUI Controls in C#\nDESCRIPTION: Virtual methods for various handler classes in MAUI, including ElementHandler, ButtonHandler, and ImageHandler. These methods manage control-specific behaviors and platform interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.CommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?\nvirtual Microsoft.Maui.Handlers.ButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ElementHandler.Invoke(string! command, object? args) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.UpdateValue(string! property) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ImageButtonHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ViewHandler.NeedsContainer.get -> bool\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: UI Element Handlers in .NET MAUI\nDESCRIPTION: Defines base and specific handler classes for managing platform-specific rendering of UI components in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ElementHandler\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ButtonHandler\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler\n```\n\n----------------------------------------\n\nTITLE: MAUI application creation and handler registration\nDESCRIPTION: Methods for creating MAUI applications and registering handlers for UI elements. These include creating an application builder and adding various types of handlers with different registration strategies.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_154\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.MauiApp.CreateBuilder(bool useDefaults = true) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\n```\n\n----------------------------------------\n\nTITLE: FileSystem Access in MAUI (C#)\nDESCRIPTION: Methods for accessing app-specific directories, checking file existence, and opening files from the application package. Provides cross-platform access to file storage locations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: XAML Extension Method Declarations in .NET MAUI\nDESCRIPTION: Comprehensive set of XAML extension method declarations used in .NET MAUI Controls for data binding, resource management, and platform-specific adaptations. These methods enable XAML markup extensions and provide core functionality for XAML-based UI development.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Value.get -> object\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Extensions in MAUI Graphics\nDESCRIPTION: Extension methods for ICanvas interface providing drawing operations like filling shapes and setting paint properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\n----------------------------------------\n\nTITLE: MauiAppBuilder Configuration Extensions in .NET MAUI\nDESCRIPTION: Extension methods for MauiAppBuilder that configure various aspects of MAUI applications. These methods handle setup for animations, dispatching, Essentials features, fonts, and handlers in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.ConfigureEssentials(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IEssentialsBuilder!>? configureDelegate = null) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddEmbeddedResourceFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, System.Reflection.Assembly! assembly, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IFontCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource, TImageSourceService>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Defining FlexLayoutManager Class in .NET MAUI\nDESCRIPTION: This snippet defines the FlexLayoutManager class and its key methods, which handle the layout arrangement and measurement of child elements in a flex container. It integrates with the graphics system for rendering sizes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.Layouts.FlexLayoutManager.FlexLayoutManager(Microsoft.Maui.IFlexLayout! flexLayout) -> void\nMicrosoft.Maui.Layouts.FlexLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Class in C# for MAUI Maps\nDESCRIPTION: This snippet defines the Map class in the Microsoft.Maui.Controls.Maps namespace. It includes properties and methods for managing map behavior, such as scrolling, zooming, traffic display, and pin management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Map\nMicrosoft.Maui.Controls.Maps.Map.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Maps.IMapPin!>!\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemsSource.get -> System.Collections.IEnumerable!\nMicrosoft.Maui.Controls.Maps.Map.ItemsSource.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplate.get -> Microsoft.Maui.Controls.DataTemplate!\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplate.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplateSelector.get -> Microsoft.Maui.Controls.DataTemplateSelector!\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplateSelector.set -> void\nMicrosoft.Maui.Controls.Maps.Map.Map() -> void\nMicrosoft.Maui.Controls.Maps.Map.Map(Microsoft.Maui.Maps.MapSpan! region) -> void\nMicrosoft.Maui.Controls.Maps.Map.MapClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.MapClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Map.MapElements.get -> System.Collections.Generic.IList<Microsoft.Maui.Controls.Maps.MapElement!>!\nMicrosoft.Maui.Controls.Maps.Map.MapType.get -> Microsoft.Maui.Maps.MapType\nMicrosoft.Maui.Controls.Maps.Map.MapType.set -> void\nMicrosoft.Maui.Controls.Maps.Map.MoveToRegion(Microsoft.Maui.Maps.MapSpan! mapSpan) -> void\nMicrosoft.Maui.Controls.Maps.Map.Pins.get -> System.Collections.Generic.IList<Microsoft.Maui.Controls.Maps.Pin!>!\nMicrosoft.Maui.Controls.Maps.Map.VisibleRegion.get -> Microsoft.Maui.Maps.MapSpan?\n```\n\n----------------------------------------\n\nTITLE: Generic View Handler Implementation in MAUI\nDESCRIPTION: Generic base handler implementation for MAUI views with platform-specific type parameters. Provides core functionality for mapping between virtual and platform views with property and command mapping support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.Context.get -> Android.Content.Context!\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!\n```\n\n----------------------------------------\n\nTITLE: Overriding Layout Manager Methods for Windows UI in C#\nDESCRIPTION: These methods override various layout manager classes to handle arranging and measuring different types of layouts in Windows UI. They include implementations for AbsoluteLayout, FlexLayout, GridLayout, and StackLayout (both horizontal and vertical).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.FlexBasis.Equals(object? obj) -> bool\noverride Microsoft.Maui.Layouts.FlexBasis.GetHashCode() -> int\noverride Microsoft.Maui.Layouts.GridLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.GridLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Configuring ProgressBar Mapper and Handler in C# for MAUI\nDESCRIPTION: Static properties and methods for configuring the command mapper, property mapper, and mapping progress and progress color for a ProgressBar control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Layout Manager Overrides in .NET MAUI\nDESCRIPTION: Method overrides for various layout managers in MAUI, including AbsoluteLayoutManager, GridLayoutManager, and Stack layouts. These methods handle measuring and arranging UI elements according to their layout requirements and constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.FlexBasis.Equals(object? obj) -> bool\noverride Microsoft.Maui.Layouts.FlexBasis.GetHashCode() -> int\noverride Microsoft.Maui.Layouts.GridLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.GridLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Defining WindowHandler Static Methods in C#\nDESCRIPTION: These static methods are part of the WindowHandler class in the Microsoft.Maui.Handlers namespace. They handle window-specific operations such as content mapping, dimensions, and positioning.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\n// ... (additional WindowHandler methods)\n```\n\n----------------------------------------\n\nTITLE: SwipeItemView and SwipeView Mapping in MAUI (C#)\nDESCRIPTION: Static methods for mapping properties of SwipeItemView and SwipeView controls to platform implementations. Includes content mapping, visibility settings, and directional swipe item configuration for SwipeView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Performing Geocoding\nDESCRIPTION: Allows for asynchronous geocoding operations, including getting locations from an address and placemarks from a latitude and longitude. Requires using the Microsoft.Maui.Devices.Sensors namespace and handles network-based geolocation tasks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!\nMicrosoft.Maui.Devices.Sensors.IGeocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Extension Methods\nDESCRIPTION: Static extension methods for ICanvas providing drawing utilities for geometric shapes like circles, rectangles, lines, arcs, and paths with multiple overloads supporting different coordinate systems\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: File Picking Operations in MAUI (C#)\nDESCRIPTION: Static methods for picking files. Includes methods to pick single or multiple files with optional picking options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: MAUI App Builder Configuration Extensions\nDESCRIPTION: Static extension methods for MauiAppBuilder that configure core application services like animations and dispatching. These methods are used during application startup to set up essential MAUI framework components.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Geolocation Services in .NET MAUI\nDESCRIPTION: Static methods for accessing device geolocation capabilities in .NET MAUI applications. These methods allow retrieving the device's current location and monitoring location changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.Default.get -> Microsoft.Maui.Devices.Sensors.IGeolocation!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation, Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Class Definition\nDESCRIPTION: Core animation class implementation that handles animation timing, child animations, and disposal. Provides methods for creating and managing animations with support for duration, easing and completion callbacks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation\nMicrosoft.Maui.Animations.Animation.Animation() -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void\nMicrosoft.Maui.Animations.Animation.Add(double beginAt, double duration, Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.Animation.CreateAutoReversing() -> Microsoft.Maui.Animations.Animation!\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Manipulation Methods in C#\nDESCRIPTION: This snippet demonstrates various color manipulation methods in the Color class, including luminosity adjustment, alpha manipulation, and conversion to different color formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Color.AddLuminosity(float delta) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.AsPaint() -> Microsoft.Maui.Graphics.Paint\n~Microsoft.Maui.Graphics.Color.GetComplementary() -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.MultiplyAlpha(float multiplyBy) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.ToArgbHex(bool includeAlpha = false) -> string\n~Microsoft.Maui.Graphics.Color.ToHex() -> string\n~Microsoft.Maui.Graphics.Color.ToHex(bool includeAlpha) -> string\n~Microsoft.Maui.Graphics.Color.ToRgbaHex(bool includeAlpha = false) -> string\n~Microsoft.Maui.Graphics.Color.WithAlpha(float alpha) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.WithHue(float hue) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.WithLuminosity(float luminosity) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.WithSaturation(float saturation) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: MAUI Property Mapper Extensions\nDESCRIPTION: Extension methods for property mapping operations in MAUI, allowing modification and extension of property mappings between virtual views and handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Framework\nDESCRIPTION: Defines the core animation system classes and constructors for handling UI animations in MAUI. Includes support for timing, easing, and animation composition.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation\nMicrosoft.Maui.Animations.Animation.Animation() -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Using Hot Reloadable Views in .NET MAUI\nDESCRIPTION: This interface defines methods related to hot reload functionality in .NET MAUI, allowing views to be reloaded without restarting the application. Methods include Reload, ReloadHandler, and TransferState, facilitating rapid UI updates during development.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.HotReload.IHotReloadableView.Reload() -> void\nMicrosoft.Maui.HotReload.IHotReloadableView.ReloadHandler.get -> Microsoft.Maui.HotReload.IReloadHandler!\nMicrosoft.Maui.HotReload.IHotReloadableView.TransferState(Microsoft.Maui.IView! newView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Image Source Extensions\nDESCRIPTION: Extension methods for loading and managing image sources in MAUI applications. These methods handle the conversion of cross-platform image sources to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSourceService! imageSourceService, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!\nstatic Microsoft.Maui.ImageSourceExtensions.LoadImage(this Microsoft.Maui.IImageSource? source, Microsoft.Maui.IMauiContext! mauiContext, System.Action<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>? finished = null) -> void\n```\n\n----------------------------------------\n\nTITLE: File Picking APIs in MAUI (C#)\nDESCRIPTION: Methods for selecting single or multiple files from the device filesystem. Supports customization through PickOptions to filter file types and customize the picker interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas Methods for Drawing in MAUI\nDESCRIPTION: Abstract method declarations from the AbstractCanvas<TState> class used for drawing operations in MAUI applications. These methods define core functionality for drawing shapes, handling clipping, and managing canvas state, requiring implementation by derived classes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n~virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.StateRestored(TState state) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Antialias.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.BlendMode.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillEllipse(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for GraphicsViewHandler in MAUI (C#)\nDESCRIPTION: Static mapping methods for GraphicsViewHandler that connect properties of IGraphicsView to platform implementations, handling drawing operations, invalidation, and flow direction.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: MAUI Element Handler and Platform Conversion Extensions\nDESCRIPTION: Extension methods for connecting MAUI application/window elements to their platform counterparts and converting between MAUI elements and Windows UI framework elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this Microsoft.UI.Xaml.Application! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.ElementExtensions.SetWindowHandler(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!\nstatic Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.UI.Xaml.FrameworkElement!\n```\n\n----------------------------------------\n\nTITLE: Static Readonly TitleProperty (TitleBar)\nDESCRIPTION: This code defines a static readonly `BindableProperty` named `TitleProperty` within the `TitleBar` class. This property is used to set and bind the title text displayed in the title bar of a MAUI application, providing a clear label for the current window or page.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.TitleProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Extending iOS Lifecycle Events in C#\nDESCRIPTION: These extension methods provide a fluent interface for registering various iOS lifecycle event handlers, including application and scene-specific events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ApplicationSignificantTimeChange(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ApplicationSignificantTimeChange! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.DidEnterBackground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.DidEnterBackground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.FinishedLaunching(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.FinishedLaunching! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OnActivated(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnActivated! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OnResignActivation(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnResignActivation! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OpenUrl(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OpenUrl! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.PerformActionForShortcutItem(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.PerformActionForShortcutItem! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidDisconnect(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidDisconnect! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidEnterBackground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidEnterBackground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidFailToContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidFailToContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidUpdateUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidUpdateUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOnActivated(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnActivated! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOnResignActivation(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnResignActivation! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOpenUrl(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOpenUrl! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneRestoreInteractionState(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneRestoreInteractionState! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillConnect(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillConnect! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: WebViewHandler Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for handling WebView controls in MAUI applications. These methods map browser-like functions such as navigation, JavaScript evaluation, and source loading to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapReload(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapUserAgent(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Properties and Methods in Microsoft MAUI\nDESCRIPTION: This snippet lists out the properties and methods available in the Microsoft.Maui.Animations.Animation class. Key properties include Duration, Easing, and Repeats, while methods like Pause and Resume control the animation flow. Dependencies include the Microsoft.Maui.Animations namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Duration.set -> void\nMicrosoft.Maui.Animations.Animation.Easing.get -> Microsoft.Maui.Easing!\nMicrosoft.Maui.Animations.Animation.Easing.set -> void\nMicrosoft.Maui.Animations.Animation.Finished.get -> System.Action?\nMicrosoft.Maui.Animations.Animation.Finished.set -> void\nMicrosoft.Maui.Animations.Animation.GetEnumerator() -> System.Collections.IEnumerator!\nMicrosoft.Maui.Animations.Animation.HasFinished.get -> bool\nMicrosoft.Maui.Animations.Animation.HasFinished.set -> void\nMicrosoft.Maui.Animations.Animation.IsDisposed.get -> bool\nMicrosoft.Maui.Animations.Animation.IsPaused.get -> bool\nMicrosoft.Maui.Animations.Animation.Name.get -> string?\nMicrosoft.Maui.Animations.Animation.Name.set -> void\nMicrosoft.Maui.Animations.Animation.Pause() -> void\nMicrosoft.Maui.Animations.Animation.Progress.get -> double\nMicrosoft.Maui.Animations.Animation.Progress.set -> void\nMicrosoft.Maui.Animations.Animation.RemoveFromParent() -> void\nMicrosoft.Maui.Animations.Animation.Repeats.get -> bool\nMicrosoft.Maui.Animations.Animation.Repeats.set -> void\nMicrosoft.Maui.Animations.Animation.Resume() -> void\nMicrosoft.Maui.Animations.Animation.StartDelay.get -> double\nMicrosoft.Maui.Animations.Animation.StartDelay.set -> void\nMicrosoft.Maui.Animations.Animation.Step.get -> System.Action<double>?\nMicrosoft.Maui.Animations.Animation.Step.set -> void\nMicrosoft.Maui.Animations.Animation.Tick(double milliseconds) -> void\n\n```\n\n----------------------------------------\n\nTITLE: Accessing a Skia Bitmap\nDESCRIPTION: Provides a property to retrieve a SkiaSharp.SKBitmap representation of the image being managed in the SkiaBitmapExportContext, facilitating direct manipulation of bitmap data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.Bitmap.get -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for EntryHandler in MAUI (C#)\nDESCRIPTION: Collection of static methods in EntryHandler class for mapping text entry properties like IsPassword, Text, Font, and Keyboard between IEntry interface and platform implementations via IEntryHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Preferences Storage API in MAUI (C#)\nDESCRIPTION: Methods for storing and retrieving application preferences. Supports various data types and shared preference containers for cross-platform key-value storage.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\nstatic Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue, string? sharedName) -> double\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue) -> double\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue, string? sharedName) -> float\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue) -> float\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue, string? sharedName) -> int\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue) -> int\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue, string? sharedName) -> long\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue) -> long\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue, string? sharedName) -> string?\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue) -> string?\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue, string? sharedName) -> System.DateTime\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void\n```\n\n----------------------------------------\n\nTITLE: Generic Lifecycle Event Configuration Extensions in .NET MAUI\nDESCRIPTION: Extension methods for configuring and invoking lifecycle events in a MAUI application. These methods allow registering event handlers for specific named events and provide a way to invoke those events when needed.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleExtensions.AddiOS(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!>! configureDelegate) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName, System.Action<TDelegate!>! action) -> void\nstatic Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Image and ImageButton Handler Methods\nDESCRIPTION: Static methods for handling image-related controls including aspect ratio, animation, source mapping and button-specific properties like corner radius and stroke.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in Microsoft.Maui\nDESCRIPTION: Provides a suite of methods and properties for tracking application version history and first-time launches. Includes methods like FirstInstalledVersion and BuildHistory. It depends on the ApplicationModel.IVersionTracking interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.BuildHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledVersion.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchEver.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForBuild(string! build) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForVersion(string! version) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousBuild.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousVersion.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.Track() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.VersionHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\n----------------------------------------\n\nTITLE: Map Control Class Implementation in C#\nDESCRIPTION: Defines the core Map control class with properties for controlling map behavior including zoom, scroll, traffic display and user location. Includes methods for region management and pin collection handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Map {\n    public bool IsScrollEnabled { get; set; }\n    public bool IsShowingUser { get; set; }\n    public bool IsTrafficEnabled { get; set; }\n    public bool IsZoomEnabled { get; set; }\n    public IEnumerable ItemsSource { get; set; }\n    public DataTemplate ItemTemplate { get; set; }\n    public void MoveToRegion(MapSpan mapSpan) { }\n    public IList<Pin> Pins { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: SliderHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods in the SliderHandler class that map ISlider properties to platform-specific implementations. These methods handle properties like minimum/maximum values, track colors, thumb appearance, and current value of the slider control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: PropertyMapper Implementation in C#\nDESCRIPTION: PropertyMapper provides a mapping mechanism between virtual view properties and platform-specific implementations. It manages property updates and chains multiple mappers together for complex property mapping scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PropertyMapper\nMicrosoft.Maui.PropertyMapper.Chained.get -> Microsoft.Maui.IPropertyMapper![]?\nMicrosoft.Maui.PropertyMapper.Chained.set -> void\nMicrosoft.Maui.PropertyMapper.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]? chained) -> void\nMicrosoft.Maui.PropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView) -> void\nMicrosoft.Maui.PropertyMapper.UpdateProperty(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Application Configuration Extensions in C#\nDESCRIPTION: Extension methods for configuring MAUI applications, including animations, fonts, handlers, and essential services setup.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n// ... additional configuration extensions\n```\n\n----------------------------------------\n\nTITLE: Map Handler Core Methods\nDESCRIPTION: Static methods for handling core map functionality including zoom, map type, region movement and pin management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.Handlers.MapHandler.MapIsZoomEnabled(Microsoft.Maui.Maps.Handlers.IMapHandler! handler, Microsoft.Maui.Maps.IMap! map) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapHandler.MapMapType(Microsoft.Maui.Maps.Handlers.IMapHandler! handler, Microsoft.Maui.Maps.IMap! map) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapHandler.MapMoveToRegion(Microsoft.Maui.Maps.Handlers.IMapHandler! handler, Microsoft.Maui.Maps.IMap! map, object? arg) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.Maps.IMap!, Microsoft.Maui.Maps.Handlers.IMapHandler!>!\nstatic Microsoft.Maui.Maps.Handlers.MapHandler.MapPins(Microsoft.Maui.Maps.Handlers.IMapHandler! handler, Microsoft.Maui.Maps.IMap! map) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapHandler.MapUpdateMapElement(Microsoft.Maui.Maps.Handlers.IMapHandler! handler, Microsoft.Maui.Maps.IMap! map, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Rect Struct in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines the Rect struct, representing a rectangle with double-precision coordinates and size. It includes methods for manipulation, intersection, and containment checks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Bottom.get -> double\nMicrosoft.Maui.Graphics.Rect.Bottom.set -> void\nMicrosoft.Maui.Graphics.Rect.Center.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Rect.Contains(double x, double y) -> bool\nMicrosoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Point pt) -> bool\nMicrosoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Rect rect) -> bool\nMicrosoft.Maui.Graphics.Rect.Deconstruct(out double x, out double y, out double width, out double height) -> void\nMicrosoft.Maui.Graphics.Rect.Equals(Microsoft.Maui.Graphics.Rect other) -> bool\nMicrosoft.Maui.Graphics.Rect.Height.get -> double\nMicrosoft.Maui.Graphics.Rect.Height.set -> void\nMicrosoft.Maui.Graphics.Rect.Inflate(double width, double height) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Inflate(Microsoft.Maui.Graphics.Size sz) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.IntersectsWith(Microsoft.Maui.Graphics.Rect r) -> bool\nMicrosoft.Maui.Graphics.Rect.IsEmpty.get -> bool\nMicrosoft.Maui.Graphics.Rect.Left.get -> double\nMicrosoft.Maui.Graphics.Rect.Left.set -> void\nMicrosoft.Maui.Graphics.Rect.Location.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Rect.Location.set -> void\nMicrosoft.Maui.Graphics.Rect.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Offset(Microsoft.Maui.Graphics.Point dr) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Rect() -> void\nMicrosoft.Maui.Graphics.Rect.Rect(double x, double y, double width, double height) -> void\nMicrosoft.Maui.Graphics.Rect.Rect(Microsoft.Maui.Graphics.Point loc, Microsoft.Maui.Graphics.Size sz) -> void\nMicrosoft.Maui.Graphics.Rect.Right.get -> double\nMicrosoft.Maui.Graphics.Rect.Right.set -> void\nMicrosoft.Maui.Graphics.Rect.Round() -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Size.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.Graphics.Rect.Size.set -> void\nMicrosoft.Maui.Graphics.Rect.Top.get -> double\nMicrosoft.Maui.Graphics.Rect.Top.set -> void\nMicrosoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Width.get -> double\nMicrosoft.Maui.Graphics.Rect.Width.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping View Properties in ViewHandler Class\nDESCRIPTION: Static methods in ViewHandler for mapping various view properties like dimensions, transformations, and visual states to platform-specific implementations. These methods handle the cross-platform behavior of core view properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolbar(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: Networking API Definitions in .NET MAUI\nDESCRIPTION: Static API definitions for accessing network connectivity status and changes in MAUI applications. Includes properties for connection profiles, network access state and event handlers for connectivity changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!\nstatic Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!\nstatic Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!\nstatic Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Platform Element Handler Extensions for MAUI\nDESCRIPTION: Extension methods for converting between MAUI elements and their platform-specific handlers, and setting handlers for applications and windows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this object! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.SetWindowHandler(this object! platformWindow, Microsoft.Maui.IWindow! window, Microsoft.Maui.IMauiContext! context) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> object!\n```\n\n----------------------------------------\n\nTITLE: Defining IView Interface in C#\nDESCRIPTION: This snippet defines the IView interface in the Microsoft.Maui namespace. It includes various properties and methods for handling view layout, focus, and visual characteristics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IView\nMicrosoft.Maui.IView.Arrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.AutomationId.get -> string!\nMicrosoft.Maui.IView.Background.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.IView.Clip.get -> Microsoft.Maui.Graphics.IShape?\nMicrosoft.Maui.IView.DesiredSize.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IView.Focus() -> bool\nMicrosoft.Maui.IView.Frame.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.IView.Frame.set -> void\nMicrosoft.Maui.IView.Handler.get -> Microsoft.Maui.IViewHandler?\nMicrosoft.Maui.IView.Handler.set -> void\nMicrosoft.Maui.IView.Height.get -> double\nMicrosoft.Maui.IView.HorizontalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.InputTransparent.get -> bool\nMicrosoft.Maui.IView.InvalidateArrange() -> void\nMicrosoft.Maui.IView.InvalidateMeasure() -> void\nMicrosoft.Maui.IView.IsEnabled.get -> bool\nMicrosoft.Maui.IView.IsFocused.get -> bool\nMicrosoft.Maui.IView.IsFocused.set -> void\nMicrosoft.Maui.IView.Margin.get -> Microsoft.Maui.Thickness\nMicrosoft.Maui.IView.MaximumHeight.get -> double\nMicrosoft.Maui.IView.MaximumWidth.get -> double\nMicrosoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.MinimumHeight.get -> double\nMicrosoft.Maui.IView.MinimumWidth.get -> double\nMicrosoft.Maui.IView.Opacity.get -> double\nMicrosoft.Maui.IView.Semantics.get -> Microsoft.Maui.Semantics?\nMicrosoft.Maui.IView.Shadow.get -> Microsoft.Maui.IShadow?\nMicrosoft.Maui.IView.Unfocus() -> void\nMicrosoft.Maui.IView.VerticalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.Visibility.get -> Microsoft.Maui.Visibility\nMicrosoft.Maui.IView.Width.get -> double\nMicrosoft.Maui.IView.ZIndex.get -> int\n```\n\n----------------------------------------\n\nTITLE: Controlling Device Flashlight in .NET MAUI\nDESCRIPTION: Static methods for accessing and controlling the device flashlight in .NET MAUI applications. These methods allow checking if flashlight is supported and turning it on or off.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.Default.get -> Microsoft.Maui.Devices.IFlashlight!\nstatic Microsoft.Maui.Devices.Flashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Switch, TabView and TimePicker Mapping in MAUI (C#)\nDESCRIPTION: Static methods for mapping properties of Switch, TabbedView, and TimePicker controls to platform implementations. Includes toggle state, appearance properties, time formatting, and character styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> Drawing Operations in C#\nDESCRIPTION: Abstract methods for the AbstractCanvas<TState> class that define various drawing operations including filling and drawing shapes, managing state transformations, and handling canvas properties like alpha and anti-aliasing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Antialias.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.BlendMode.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillEllipse(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FontSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.MiterLimit.set -> void\n```\n\n----------------------------------------\n\nTITLE: Point Static Methods and Operators in MAUI Graphics\nDESCRIPTION: Static methods and operator overloads for Microsoft.Maui.Graphics.Point, providing conversion, equality, and arithmetic operations for integer-based points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.Zero -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.Point(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.Point p) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.Point.explicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.Point pt) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Point.operator +(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Point.operator ==(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool\nstatic Microsoft.Maui.Graphics.Point.operator !=(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool\n```\n\n----------------------------------------\n\nTITLE: Button Handler Methods in MAUI\nDESCRIPTION: Static methods for ButtonHandler that map various button properties including text, image, styling, and visual attributes between MAUI button abstractions and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.ImageButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IButtonHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapText(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.TextButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITextButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Interface Definition\nDESCRIPTION: Interface definition for IHybridWebView including methods for JavaScript evaluation, message handling, and configuration properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IHybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.IHybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.IHybridWebView.SendRawMessage(string! rawMessage) -> void\n```\n\n----------------------------------------\n\nTITLE: Device Display Interface Definition in MAUI\nDESCRIPTION: Interface for accessing and manipulating display information in MAUI applications. Provides properties for main display information, screen keep-on functionality, and events for monitoring display changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.get -> bool\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.set -> void\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: WebView Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for WebViewHandler responsible for mapping properties and handling events for the WebView control. Includes methods for JavaScript evaluation and navigation controls like going back and forward.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Device Idiom Detection and Comparison in MAUI C# Applications\nDESCRIPTION: Static properties and operators for detecting and comparing device idioms (phone, tablet, desktop, etc.) in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceIdiom.Desktop.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceIdiom.operator !=(Microsoft.Maui.Devices.DeviceIdiom left, Microsoft.Maui.Devices.DeviceIdiom right) -> bool\nstatic Microsoft.Maui.Devices.DeviceIdiom.operator ==(Microsoft.Maui.Devices.DeviceIdiom left, Microsoft.Maui.Devices.DeviceIdiom right) -> bool\nstatic Microsoft.Maui.Devices.DeviceIdiom.Phone.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceIdiom.Tablet.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceIdiom.TV.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceIdiom.Unknown.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceIdiom.Watch.get -> Microsoft.Maui.Devices.DeviceIdiom\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Class Definition\nDESCRIPTION: Core animation class containing properties and methods for controlling animations including duration, easing, progress tracking and playback controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Duration.set -> void\nMicrosoft.Maui.Animations.Animation.Easing.get -> Microsoft.Maui.Easing!\nMicrosoft.Maui.Animations.Animation.Easing.set -> void\nMicrosoft.Maui.Animations.Animation.Progress.get -> double\nMicrosoft.Maui.Animations.Animation.Progress.set -> void\nMicrosoft.Maui.Animations.Animation.Pause() -> void\nMicrosoft.Maui.Animations.Animation.Resume() -> void\n```\n\n----------------------------------------\n\nTITLE: Preferences Management in Microsoft MAUI\nDESCRIPTION: These static methods from Microsoft.Maui.Storage.Preferences allow retrieving and setting application preferences on different data types such as integers, floats, doubles, strings, and DateTime. Shared preferences can be specifically targeted using a shared name. These methods require Microsoft MAUI's preferences component.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue) -> double\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue, string? sharedName) -> float\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue) -> float\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue, string? sharedName) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue, string? sharedName) -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue) -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue, string? sharedName) -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue) -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue, string? sharedName) -> System.DateTime\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void\n```\n\n----------------------------------------\n\nTITLE: Image source service configuration for MAUI applications\nDESCRIPTION: Extensions for configuring image source services in MAUI applications. These methods allow registering custom image source handlers that convert between various image source formats and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource, TImageSourceService>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services, System.Func<System.IServiceProvider!, Microsoft.Maui.IImageSourceService<TImageSource>!>! implementationFactory) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IImageSourceServiceCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Handling Accelerometer Events\nDESCRIPTION: Defines events and methods for managing accelerometer functions, such as starting and stopping the sensor, and handling reading changes and shake detection. This requires the Microsoft.Maui.Devices.Sensors namespace and is useful for applications needing accelerometer data in real-time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.ShakeDetected -> System.EventHandler?\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping TimePicker Properties in C#\nDESCRIPTION: Static methods and properties for mapping TimePicker control properties, including CharacterSpacing, FlowDirection, Font, Format, TextColor, and Time. It also defines CommandMapper and Mapper for the TimePickerHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFlowDirection(Microsoft.Maui.Handlers.TimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring RefreshView Mapper and Handler in C# for MAUI\nDESCRIPTION: Static properties and methods for configuring the command mapper, property mapper, and mapping various properties of a RefreshView control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshViewBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: DrawRoundedRectangle Extensions for ICanvas in .NET MAUI Graphics\nDESCRIPTION: These static extension methods `DrawRoundedRectangle` extend the `ICanvas` interface in the Microsoft.Maui.Graphics library.  They allow drawing rounded rectangles using various overloads, including specifying individual corner radii or a uniform corner radius.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Window Handler Methods in C#\nDESCRIPTION: Static methods for managing window properties and behaviors in MAUI applications, including size, position, and content management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\n// ... additional window handler methods\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Extensions in Microsoft.Maui.Graphics.Text\nDESCRIPTION: Methods for manipulating attributed text, including creating blocks and paragraphs, optimizing text, and handling text runs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateBlocks(this Microsoft.Maui.Graphics.Text.IAttributedText text) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.AttributedTextBlock>\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphRun(this Microsoft.Maui.Graphics.Text.IAttributedText text, int start, int length, System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int startIndexForSearch = 0) -> int\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphs(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedText>\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.Optimize(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: Path Conversion and Manipulation\nDESCRIPTION: Static extension methods for converting and transforming paths between MAUI graphics paths and SkiaSharp paths with support for scaling, rotation, and coordinate transformations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSKGraphicsExtensions.AsSkiaPath(this Microsoft.Maui.Graphics.PathF path, float ppu)\n```\n\n----------------------------------------\n\nTITLE: Geolocation API in .NET MAUI\nDESCRIPTION: Static methods for device geolocation, including getting the current location, last known location, and continuous location monitoring. Provides methods for one-time location requests and background location tracking with customizable accuracy.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.Default.get -> Microsoft.Maui.Devices.Sensors.IGeolocation!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation, Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: Defining Connectivity Interfaces and Enums in C#\nDESCRIPTION: Defines interfaces and enums for network connectivity in MAUI applications. Includes IConnectivity interface and NetworkAccess enum for determining network status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Networking.IConnectivity\nMicrosoft.Maui.Networking.IConnectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs>\nMicrosoft.Maui.Networking.IConnectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n\nMicrosoft.Maui.Networking.NetworkAccess\nMicrosoft.Maui.Networking.NetworkAccess.ConstrainedInternet = 3 -> Microsoft.Maui.Networking.NetworkAccess\nMicrosoft.Maui.Networking.NetworkAccess.Internet = 4 -> Microsoft.Maui.Networking.NetworkAccess\nMicrosoft.Maui.Networking.NetworkAccess.Local = 2 -> Microsoft.Maui.Networking.NetworkAccess\nMicrosoft.Maui.Networking.NetworkAccess.None = 1 -> Microsoft.Maui.Networking.NetworkAccess\nMicrosoft.Maui.Networking.NetworkAccess.Unknown = 0 -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Defining ILayoutHandler Interface in C#\nDESCRIPTION: Defines the ILayoutHandler interface with methods for managing views within a layout. It includes operations for adding, removing, and updating views, as well as accessing the platform-specific view implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ILayoutHandler\nMicrosoft.Maui.ILayoutHandler.Add(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.ILayoutHandler.Clear() -> void\nMicrosoft.Maui.ILayoutHandler.Insert(int index, Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.ILayoutHandler.PlatformView.get -> Microsoft.Maui.Platform.LayoutViewGroup!\nMicrosoft.Maui.ILayoutHandler.Remove(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.ILayoutHandler.Update(int index, Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.ILayoutHandler.UpdateZIndex(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.ILayoutHandler.VirtualView.get -> Microsoft.Maui.ILayout!\n```\n\n----------------------------------------\n\nTITLE: Layout Extension Methods for View Positioning in MAUI\nDESCRIPTION: These extension methods provide layout functionality for MAUI views. They handle various aspects of measuring and arranging content, computing desired sizes and frames, and adjusting views for proper filling of available space.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_163\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutExtensions.AdjustForFill(this Microsoft.Maui.Graphics.Size size, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> void\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContentUnbounded(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeFrame(this Microsoft.Maui.IView! view, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Thickness inset, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Opening URLs in .NET MAUI\nDESCRIPTION: This method uses the IBrowser interface to open a specified URI with defined browser launch options asynchronously. It facilitates easy navigation to web resources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IBrowser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Location Distance Calculation in MAUI C#\nDESCRIPTION: Static method for calculating the distance between two geographic coordinates with specified distance units.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Color Creation and Parsing Methods in .NET MAUI Graphics\nDESCRIPTION: Static methods for the Color structure to create colors from various formats (RGB, RGBA, HSL, HSV) and to parse color values from strings. Includes conversion methods for different numeric types and an implicit operator for Vector4.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromArgb(string colorAsHex) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHex(string colorAsArgbHex) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHsla(double h, double s, double l, double a = 1) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHsla(float h, float s, float l, float a = 1) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHsv(float h, float s, float v) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHsv(int h, int s, int v) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHsva(float h, float s, float v, float a) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHsva(int h, int s, int v, int a) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromInt(int argb) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgb(byte red, byte green, byte blue) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgb(double red, double green, double blue) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgb(float red, float green, float blue) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgb(int red, int green, int blue) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgba(byte red, byte green, byte blue, byte alpha) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgba(double r, double g, double b, double a) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgba(float r, float g, float b, float a) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgba(int red, int green, int blue, int alpha) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromRgba(string colorAsHex) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromUint(uint argb) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.implicit operator Microsoft.Maui.Graphics.Color(System.Numerics.Vector4 color) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.Parse(string value) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.TryParse(string value, out Microsoft.Maui.Graphics.Color color) -> bool\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Drawing Methods API Reference (C#)\nDESCRIPTION: Method signatures for PictureCanvas drawing operations including lines, rectangles, arcs, and other shapes. These methods provide the core drawing functionality for the Microsoft.Maui.Graphics library.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding UI Control Handler Methods for Windows UI in C#\nDESCRIPTION: These methods override handlers for various UI controls such as NavigationView, Picker, ProgressBar, RadioButton, RefreshView, ScrollView, SearchBar, ShapeView, Slider, SwipeView, Switch, TabbedView, TimePicker, Toolbar, and WebView. They manage creating platform views, connecting/disconnecting handlers, and setting up virtual views for these controls in Windows UI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.NavigationViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Frame! platformView) -> void\noverride Microsoft.Maui.Handlers.NavigationViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Frame!\noverride Microsoft.Maui.Handlers.NavigationViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Frame! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.ComboBox! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ComboBox!\noverride Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.ComboBox! platformView) -> void\noverride Microsoft.Maui.Handlers.ProgressBarHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ProgressBar!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.RadioButton! platformView) -> void\noverride Microsoft.Maui.Handlers.RadioButtonHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.RadioButton!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.RadioButton! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.RefreshContainer! nativeView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.RefreshContainer!\noverride Microsoft.Maui.Handlers.RefreshViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.RefreshContainer! nativeView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.ScrollViewer! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ScrollViewer!\noverride Microsoft.Maui.Handlers.ScrollViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.ScrollViewer! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.AutoSuggestBox!\noverride Microsoft.Maui.Handlers.SearchBarHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformView) -> void\noverride Microsoft.Maui.Handlers.ShapeViewHandler.CreatePlatformView() -> Microsoft.Maui.Graphics.Win2D.W2DGraphicsView!\noverride Microsoft.Maui.Handlers.ShapeViewHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.SliderHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.Slider! platformView) -> void\noverride Microsoft.Maui.Handlers.SliderHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.Slider!\noverride Microsoft.Maui.Handlers.SliderHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.Slider! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.SwipeItem! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.SwipeItem!\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.SwipeItem! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.FrameworkElement!\noverride Microsoft.Maui.Handlers.SwipeViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.SwipeControl! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.SwipeControl!\noverride Microsoft.Maui.Handlers.SwipeViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.SwipeControl! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.ToggleSwitch! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.ToggleSwitch!\noverride Microsoft.Maui.Handlers.SwitchHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.ToggleSwitch! platformView) -> void\noverride Microsoft.Maui.Handlers.TabbedViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.FrameworkElement!\noverride Microsoft.Maui.Handlers.TimePickerHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.TimePicker! platformView) -> void\noverride Microsoft.Maui.Handlers.TimePickerHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.TimePicker!\noverride Microsoft.Maui.Handlers.TimePickerHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.TimePicker! platformView) -> void\noverride Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> Microsoft.Maui.Platform.MauiToolbar!\noverride Microsoft.Maui.Handlers.WebViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.WebView2! platformView) -> void\noverride Microsoft.Maui.Handlers.WebViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.WebView2!\noverride Microsoft.Maui.Handlers.WebViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.WebView2! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Dispatcher Extensions for Asynchronous Operations (C#)\nDESCRIPTION: Extension methods for the MAUI Dispatcher interface that facilitate dispatching actions and functions to the UI thread. These methods ensure thread-safe UI updates and provide various overloads for handling different return types and synchronization contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void\n```\n\n----------------------------------------\n\nTITLE: Hot Reload Support Extensions in MAUI C#\nDESCRIPTION: Extensions for supporting hot reload functionality in MAUI applications. Includes methods for managing view replacement, handler registration, and reload triggering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterHandlers(Microsoft.Maui.Hosting.IMauiHandlersCollection handlerService)\n```\n\n----------------------------------------\n\nTITLE: SecureStorage Methods for Secure Data Storage in .NET MAUI\nDESCRIPTION: API for the SecureStorage class that provides methods for securely storing, retrieving, and removing sensitive data. Includes a Default property to access the implementation and async methods for operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Replacing StackLayout with ScrollView to Grid in MAUI\nDESCRIPTION: This example shows how to replace a StackLayout containing a ScrollView with a Grid in MAUI. This change is necessary because MAUI's StackLayout doesn't constrain ScrollView size like Xamarin.Forms did.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<StackLayout> \n\t<ScrollView>...</ScrollView>\n</StackLayout>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Grid>\n\t<ScrollView>...</ScrollView>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: IWebView Interface Members in .NET MAUI\nDESCRIPTION: Members of the IWebView interface which represents a web browser control in MAUI applications. This interface provides navigation capabilities, JavaScript execution, cookie management, and event handling for web content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWebView\nMicrosoft.Maui.IWebView.CanGoBack.get -> bool\nMicrosoft.Maui.IWebView.CanGoBack.set -> void\nMicrosoft.Maui.IWebView.CanGoForward.get -> bool\nMicrosoft.Maui.IWebView.CanGoForward.set -> void\nMicrosoft.Maui.IWebView.Cookies.get -> System.Net.CookieContainer!\nMicrosoft.Maui.IWebView.Eval(string! script) -> void\nMicrosoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Maui.IWebView.GoBack() -> void\nMicrosoft.Maui.IWebView.GoForward() -> void\nMicrosoft.Maui.IWebView.Navigated(Microsoft.Maui.WebNavigationEvent evnt, string! url, Microsoft.Maui.WebNavigationResult result) -> void\nMicrosoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool\nMicrosoft.Maui.IWebView.Reload() -> void\nMicrosoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!\nMicrosoft.Maui.IWebView.UserAgent.get -> string?\nMicrosoft.Maui.IWebView.UserAgent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Screenshot Interfaces in C#\nDESCRIPTION: The IScreenshot interface allows capturing the current screen asynchronously and defines methods to handle screenshot results, offering support verification and streaming functionalities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.IScreenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nMicrosoft.Maui.Media.IScreenshot.IsCaptureSupported.get -> bool\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Switch Properties in C#\nDESCRIPTION: Static methods and properties for mapping Switch control properties, including IsOn, ThumbColor, and TrackColor. It also defines CommandMapper and Mapper for the SwitchHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: ButtonHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the ButtonHandler class, handling various properties of a button such as text, image, and styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.ImageButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapFormatting(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSourceAsync(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapText(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.TextButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITextButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Geolocation Functionality in .NET MAUI - C#\nDESCRIPTION: This snippet covers methods for obtaining location data in .NET MAUI applications. It includes functionalities for getting the last known location, starting and stopping location listening, and checks for support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.Default.get -> Microsoft.Maui.Devices.Sensors.IGeolocation!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: Setting up HybridWebView for JavaScript Interop in MAUI\nDESCRIPTION: The HybridWebView class provides a way to create hybrid applications that combine web content with native code. It allows JavaScript code in the web view to call C# methods and vice versa.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.SetInvokeJavaScriptTarget<T>(T! target) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Canvas Operations in Microsoft.Maui.Graphics C#\nDESCRIPTION: Abstract platform-specific drawing methods for the AbstractCanvas<TState> class. These methods handle various platform implementations for transformations, drawing primitives like lines, arcs, and rectangles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawEllipse(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians, float x, float y) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformScale(float fx, float fy) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformStrokeSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformTranslate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: NavigationView Handler Methods in .NET MAUI\nDESCRIPTION: Static API methods for the NavigationViewHandler class that provide navigation capabilities. Includes property and command mappers, and a RequestNavigation method for managing stack-based navigation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: Animation Lerping Extensions in MAUI (C#)\nDESCRIPTION: A collection of linear interpolation (Lerp) extension methods for various data types within the MAUI framework, allowing smooth transitions between values for animations. These methods calculate intermediate values based on a progress parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.GenericLerp<T>(this T start, T end, double progress, double toggleThreshold = 0.5) -> T\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float start, float end, double progress) -> float\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float? start, float? end, double progress) -> float?\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Point start, Microsoft.Maui.Graphics.Point end, double progress) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.PointF start, Microsoft.Maui.Graphics.PointF end, double progress) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Rect start, Microsoft.Maui.Graphics.Rect end, double progress) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.RectF start, Microsoft.Maui.Graphics.RectF end, double progress) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Size start, Microsoft.Maui.Graphics.Size end, double progress) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SizeF start, Microsoft.Maui.Graphics.SizeF end, double progress) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SolidPaint! paint, Microsoft.Maui.Graphics.SolidPaint! endPaint, double progress) -> Microsoft.Maui.Graphics.SolidPaint!\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Thickness start, Microsoft.Maui.Thickness end, double progress) -> Microsoft.Maui.Thickness\n```\n\n----------------------------------------\n\nTITLE: Managing Color Manipulations in Microsoft.Maui.Graphics\nDESCRIPTION: This code segment presents abstract definitions for color manipulation methods in the Microsoft.Maui.Graphics.Color class. These methods allow operations such as adjusting luminosity, multiplying alpha, and converting color to various hex formats. Implementation requires providing appropriate logic for these transformations which affect how colors are rendered in graphical interfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Color.AddLuminosity(float delta) -> Microsoft.Maui.Graphics.Color\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Color.MultiplyAlpha(float multiplyBy) -> Microsoft.Maui.Graphics.Color\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Color.ToArgbHex(bool includeAlpha = false) -> string\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Color.ToHex() -> string\"\n```\n\n----------------------------------------\n\nTITLE: Screen Capture Methods in MAUI\nDESCRIPTION: Extension methods for capturing screenshots of views and windows. These methods return tasks that resolve to screenshot results or byte arrays representing images.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IView! view, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IWindow! window, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.WindowExtensions.CaptureAsync(this Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\n```\n\n----------------------------------------\n\nTITLE: Authentication API Methods in MAUI\nDESCRIPTION: Static methods for handling web authentication and Apple Sign-In authentication in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Operations Interface\nDESCRIPTION: Core interface definitions for canvas drawing operations including path drawing, string rendering, and image manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.ICanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void\n~Microsoft.Maui.Graphics.ICanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n~Microsoft.Maui.Graphics.ICanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Lifecycle Events Extensions\nDESCRIPTION: Extension methods for configuring and invoking lifecycle events in MAUI applications. These methods support registering and triggering both generic and specialized event handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName, System.Action<TDelegate!>! action) -> void\nstatic Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Font Management Methods in MAUI\nDESCRIPTION: Static methods for creating and managing fonts in MAUI applications, including system font creation with weight parameters and font file loading from strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!\n```\n\n----------------------------------------\n\nTITLE: Mapping Entry Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of an Entry control in MAUI, including background, character spacing, clear button visibility, cursor position, font, text alignment, password mode, read-only state, spell check, text prediction, keyboard type, max length, placeholder, return type, selection length, text, and text color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.MapBackground(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Communication Features in .NET MAUI\nDESCRIPTION: Method signatures for communication-related features including email, SMS, phone dialer, and contacts. These methods enable various communication capabilities within MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\n```\n\n----------------------------------------\n\nTITLE: ToolbarHandler Mappings in MAUI\nDESCRIPTION: Static methods for handling Toolbar controls in MAUI, including title mapping and providing command and property mappers for toolbar functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Operations in MAUI (C#)\nDESCRIPTION: Static methods for text-to-speech functionality. Includes methods to get available locales and to speak text with various options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!\nstatic Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Color Constants in Microsoft.Maui.Graphics\nDESCRIPTION: A comprehensive collection of predefined color constants in the Microsoft.Maui.Graphics.Colors class. These constants provide ready-to-use Color objects for common named colors and a default shadow color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowColor -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.AliceBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.AntiqueWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Aqua -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Aquamarine -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Azure -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Beige -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Bisque -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Black -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.BlanchedAlmond -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Blue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.BlueViolet -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Brown -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.BurlyWood -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.CadetBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Chartreuse -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Chocolate -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Coral -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.CornflowerBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Cornsilk -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Crimson -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Cyan -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkCyan -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGoldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkKhaki -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkMagenta -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOliveGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOrange -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOrchid -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSalmon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSeaGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSlateBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSlateGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSlateGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkTurquoise -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkViolet -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DeepPink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DeepSkyBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DimGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DimGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DodgerBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Firebrick -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.FloralWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.ForestGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Fuchsia -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gainsboro -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.GhostWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gold -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Goldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Green -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.GreenYellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Grey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Honeydew -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.HotPink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.IndianRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Indigo -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Ivory -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Khaki -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Lavender -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LavenderBlush -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LawnGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LemonChiffon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightCoral -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightCyan -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGoldenrodYellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightPink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSalmon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSeaGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSkyBlue -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: IGeolocation Interface Definition in C#\nDESCRIPTION: Interface for geolocation services, providing methods to get the current and last known location. It includes events for location changes and listening failures, as well as methods to start and stop foreground listening.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGeolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Shapes on ICanvas\nDESCRIPTION: These extension methods provide various ways to draw shapes like circles, rectangles, and ellipses on any ICanvas implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Creation and Parsing Methods in MAUI\nDESCRIPTION: Static methods for creating Color objects from various formats including RGB, RGBA, HSL, HSV, and hex strings. Includes parsing methods for converting string representations to Color objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Color FromRgb(byte red, byte green, byte blue);\nstatic Color FromHsla(double h, double s, double l, double a = 1);\nstatic Color FromHex(string colorAsArgbHex);\nstatic bool TryParse(string value, out Color color);\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Operations Interface (C#)\nDESCRIPTION: Interface definitions for core canvas drawing operations including path drawing, string rendering, and image manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.ICanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n~Microsoft.Maui.Graphics.ICanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in Microsoft.Maui.Graphics C#\nDESCRIPTION: A collection of static readonly color definitions in the Microsoft.Maui.Graphics.Colors class. These constants provide standard named colors that return Microsoft.Maui.Graphics.Color objects for use in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSlateGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSlateGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSteelBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightYellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Lime -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LimeGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Linen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Magenta -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Maroon -> Microsoft.Maui.Graphics.Color\n// ... and many more color definitions\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Manager Implementation\nDESCRIPTION: Animation manager class for controlling multiple animations with ticker system integration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.AnimationManager.AnimationManager(Microsoft.Maui.Animations.ITicker! ticker) -> void\nMicrosoft.Maui.Animations.AnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.AnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.AnimationManager.SpeedModifier.get -> double\n```\n\n----------------------------------------\n\nTITLE: IViewHandler Interface Members in .NET MAUI\nDESCRIPTION: Members of the IViewHandler interface which is responsible for connecting MAUI views with platform-specific implementations. This interface handles platform arrangement, measurement, and container management for views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IViewHandler\nMicrosoft.Maui.IViewHandler.ContainerView.get -> object?\nMicrosoft.Maui.IViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IViewHandler.HasContainer.get -> bool\nMicrosoft.Maui.IViewHandler.HasContainer.set -> void\nMicrosoft.Maui.IViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\nMicrosoft.Maui.IViewHandler.VirtualView.get -> Microsoft.Maui.IView?\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioButtonHandler Mappers and Methods in MAUI (C#)\nDESCRIPTION: Static properties and methods for the RadioButtonHandler, including command and property mappers, and methods for mapping various properties such as background, character spacing, content, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapBackground(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Lifecycle Event Handler Registration Extensions in .NET MAUI\nDESCRIPTION: Extension methods for registering various iOS lifecycle event handlers. These methods enable adding custom logic to respond to specific iOS application lifecycle events such as entering foreground, continuing user activity, and terminating.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillEnterForeground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillEnterForeground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillEnterForeground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillEnterForeground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillFinishLaunching(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillFinishLaunching! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillTerminate(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillTerminate! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WindowSceneDidUpdateCoordinateSpace(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WindowSceneDidUpdateCoordinateSpace! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Entry Handler Property Mapping Methods\nDESCRIPTION: Static methods for mapping Entry control properties including character spacing, cursor position, font, text alignment, password, spell check and keyboard settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining RadioButtonHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods for the RadioButtonHandler class that map various properties such as text styling, content, corner radius, checked state, and stroke appearance to enable cross-platform radio button functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Vibration API in MAUI\nDESCRIPTION: Static methods for controlling device vibration, including triggering vibrations with specified durations and canceling ongoing vibrations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Vibration.Cancel() -> void\nstatic Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!\nstatic Microsoft.Maui.Devices.Vibration.Vibrate() -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void\nstatic Microsoft.Maui.Devices.VibrationExtensions.Vibrate(this Microsoft.Maui.Devices.IVibration! vibration, double duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Initiating Authentication Process with MAUI's Web Authenticator\nDESCRIPTION: This snippet showcases functionalities to authenticate users using Apple's sign-in or generic web authenticator through MAUI framework. It involves Async calls to negotiate authentication parameters, accommodate options, and return authenticated results if successful. Primarily used in secure applications mandating robust user authentication.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: Clipboard Operations in .NET MAUI\nDESCRIPTION: Methods for interacting with the device clipboard including setting and getting text and handling clipboard change events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.HasText.get -> bool\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Overriding LabelHandler Methods for Windows UI in C#\nDESCRIPTION: These methods override the LabelHandler class to create and manage TextBlock elements for labels in Windows UI. They handle creating the platform view, managing containers, and setting up the virtual view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.LabelHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.TextBlock!\noverride Microsoft.Maui.Handlers.LabelHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.LabelHandler.RemoveContainer() -> void\noverride Microsoft.Maui.Handlers.LabelHandler.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: Font Conversion Extensions for Windows Typography\nDESCRIPTION: Extensions that convert MAUI font attributes to Windows-specific font style and weight properties. These methods map cross-platform font concepts to the Windows typography system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.FontExtensions.ToFontStyle(this Microsoft.Maui.Font fontAttributes) -> Windows.UI.Text.FontStyle\nstatic Microsoft.Maui.Platform.FontExtensions.ToFontWeight(this Microsoft.Maui.Font font) -> Windows.UI.Text.FontWeight\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollViewHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the ScrollViewHandler class, including a command mapper, a property mapper, and methods for mapping various properties such as content, content size, scroll bar visibility, and orientation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContentSize(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Navigation and Page Handler Static Mappings - C#\nDESCRIPTION: Static methods for handling navigation and page operations. Includes command mappers and methods for managing navigation requests and page properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining MauiApp and MauiAppBuilder Classes in C#\nDESCRIPTION: Implements MauiApp class with configuration and services properties, and MauiAppBuilder class for constructing and configuring MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.MauiApp.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration!\nMicrosoft.Maui.Hosting.MauiApp.Dispose() -> void\nMicrosoft.Maui.Hosting.MauiApp.DisposeAsync() -> System.Threading.Tasks.ValueTask\nMicrosoft.Maui.Hosting.MauiApp.Services.get -> System.IServiceProvider!\n\nMicrosoft.Maui.Hosting.MauiAppBuilder.Build() -> Microsoft.Maui.Hosting.MauiApp!\nMicrosoft.Maui.Hosting.MauiAppBuilder.Configuration.get -> Microsoft.Extensions.Configuration.ConfigurationManager!\nMicrosoft.Maui.Hosting.MauiAppBuilder.ConfigureContainer<TBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TBuilder>! factory, System.Action<TBuilder>? configure = null) -> void\nMicrosoft.Maui.Hosting.MauiAppBuilder.Logging.get -> Microsoft.Extensions.Logging.ILoggingBuilder!\nMicrosoft.Maui.Hosting.MauiAppBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Search Bar Extensions for AutoSuggestBox\nDESCRIPTION: Extension methods for Windows AutoSuggestBox to implement MAUI SearchBar functionality, including text input properties, styling, and behavior settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdatePlaceholder(this Microsoft.UI.Xaml.Controls.AutoSuggestBox! platformControl, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Opening Maps Async (Location) in MAUI\nDESCRIPTION: This extension method opens the device's map application to display the provided Location. It operates asynchronously. This is an extension method on Location.  It takes only a Location as a parameter and returns a Task representing the asynchronous operation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location) -> System.Threading.Tasks.Task\"\n```\n\n----------------------------------------\n\nTITLE: IDispatcher Interface Methods - C#\nDESCRIPTION: Interface methods for IDepatcher that provide timer creation, action dispatching immediately or with delay, and a property to check if dispatching is required. These methods are crucial for managing threading in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcher.Dispatch(System.Action! action) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcher.IsDispatchRequired.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Mapping Editor Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of an Editor control in MAUI, including background, character spacing, cursor position, font, text alignment, read-only state, spell check, text prediction, keyboard type, max length, placeholder, text color, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapBackground(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Flags in Microsoft MAUI\nDESCRIPTION: This snippet defines various keyboard flags used within the Microsoft MAUI framework, indicating settings like capitalization, spellcheck, and suggestions which can influence user input behavior. The flags are defined as enumerations with corresponding integer values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.CapitalizeWord = 8 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.None = 0 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.Spellcheck = 2 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.Suggestions = 4 -> Microsoft.Maui.KeyboardFlags\n```\n\n----------------------------------------\n\nTITLE: Using MediaPicker for Photos and Videos in MAUI (C#)\nDESCRIPTION: Methods for capturing and picking photos and videos using the device's camera and gallery. Provides options to check capture support and customize media picking through MediaPickerOptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!\nstatic Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Dispatcher and DispatcherExtensions Methods in .NET MAUI\nDESCRIPTION: Methods for working with the MAUI Dispatcher system that handles thread synchronization. These methods enable executing code on the UI thread and retrieving dispatcher instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.Dispatcher.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.Current.get -> Microsoft.Maui.Dispatching.IDispatcherProvider!\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.SetCurrent(Microsoft.Maui.Dispatching.IDispatcherProvider? provider) -> bool\n```\n\n----------------------------------------\n\nTITLE: Application Info via IAppInfo in MAUI\nDESCRIPTION: The 'IAppInfo' interface provides access to application metadata, including version, build string, package name, and layout direction. It also provides methods for user interface actions such as showing settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.BuildString.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Name.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackageName.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.ShowSettingsUI() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Location Class Operations\nDESCRIPTION: Defines properties and constructors for handling location details including latitude, longitude, altitude, and timestamps. Used extensively for positioning tasks within applications using Microsoft.Maui.Devices.Sensors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Location.Accuracy.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Accuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Altitude.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Altitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.get -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Course.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Course.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.IsFromMockProvider.get -> bool\nMicrosoft.Maui.Devices.Sensors.Location.IsFromMockProvider.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Latitude.get -> double\nMicrosoft.Maui.Devices.Sensors.Location.Latitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location() -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, double altitude) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, System.DateTimeOffset timestamp) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Longitude.get -> double\nMicrosoft.Maui.Devices.Sensors.Location.Longitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.ReducedAccuracy.get -> bool\nMicrosoft.Maui.Devices.Sensors.Location.ReducedAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Speed.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Speed.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Timestamp.get -> System.DateTimeOffset\nMicrosoft.Maui.Devices.Sensors.Location.Timestamp.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.VerticalAccuracy.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.VerticalAccuracy.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Paint Extension Methods for UI in C#\nDESCRIPTION: Implements extension methods for various Paint types to create brushes, check for null/empty paints, and convert paints to colors or platform-specific brushes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.ImagePaint! imagePaint) -> Microsoft.UI.Xaml.Media.Brush?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint) -> Microsoft.UI.Xaml.Media.Brush?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.PatternPaint! patternPaint) -> Microsoft.UI.Xaml.Media.Brush?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint) -> Microsoft.UI.Xaml.Media.Brush?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateBrush(this Microsoft.Maui.Graphics.SolidPaint! solidPaint) -> Microsoft.UI.Xaml.Media.Brush?\nstatic Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToPlatform(this Microsoft.Maui.Graphics.Paint! paint) -> Microsoft.UI.Xaml.Media.Brush?\n```\n\n----------------------------------------\n\nTITLE: File Picking and Management in C# MAUI\nDESCRIPTION: Static methods for file picking and management. Includes picking single and multiple files, accessing temporary locations, and managing app-specific directories.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\nstatic Microsoft.Maui.Storage.FileProvider.TemporaryLocation.get -> Microsoft.Maui.Storage.FileProviderLocation\nstatic Microsoft.Maui.Storage.FileProvider.TemporaryLocation.set -> void\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Extensions for iOS in .NET MAUI\nDESCRIPTION: Extensions for converting between MAUI Colors and UIKit/CoreGraphics colors. These methods facilitate the translation between cross-platform color representations and native iOS color formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ColorExtensions.FromPatternImageFromBundle(string! bgImage) -> UIKit.UIColor!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToCGColor(this Microsoft.Maui.Graphics.Color! color) -> CoreGraphics.CGColor!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToColor(this UIKit.UIColor! color) -> Microsoft.Maui.Graphics.Color?\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color! color) -> UIKit.UIColor!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color? color, Microsoft.Maui.Graphics.Color? defaultColor) -> UIKit.UIColor?\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color? color, UIKit.UIColor! defaultColor) -> UIKit.UIColor!\n```\n\n----------------------------------------\n\nTITLE: ImageHandler Static Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods for mapping Image properties between cross-platform abstractions and platform-specific implementations. Includes mappers for aspects, background, animation state, and image source loading.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapBackground(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapSource(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapSourceAsync(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Advanced Text Attribute Operations in C#\nDESCRIPTION: These methods provide more advanced operations on text attributes, such as combining two sets of attributes and retrieving or setting attributes of specific types (bool, enum, float, int).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.Union(this System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> Microsoft.Maui.Graphics.Text.ITextAttributes\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string defaultValue = null) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetBoolAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool defaultValue = false) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetEnumAttribute<T>(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T defaultValue) -> T\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation Methods\nDESCRIPTION: Methods for color manipulation including alpha channel modifications, luminosity adjustments, and color space conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nColor AddLuminosity(float delta);\nColor MultiplyAlpha(float multiplyBy);\nColor WithAlpha(float alpha);\nstring ToArgbHex(bool includeAlpha = false);\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the LayoutHandler class, including property mappers and methods for handling various aspects of a Layout such as adding/removing elements, setting background, and managing input transparency.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapBackground(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClipsToBounds(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapInputTransparent(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapInsert(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Accelerometer Sensor in .NET MAUI - C#\nDESCRIPTION: This snippet defines methods and properties for interacting with the accelerometer sensor in .NET MAUI. It includes functionalities for checking if the sensor is supported and for starting and stopping sensor data acquisition asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Default.get -> Microsoft.Maui.Devices.Sensors.IAccelerometer!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsMonitoring.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsSupported.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ShakeDetected -> System.EventHandler!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Border Stroke Extensions for MAUI Platform Views\nDESCRIPTION: Extensions for updating various stroke properties on platform-specific views, including stroke thickness, shape, line style, and dash patterns.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStroke(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashOffset(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashPattern(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineCap(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineJoin(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeMiterLimit(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeShape(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeThickness(this object! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Label Properties in LabelHandler in C#\nDESCRIPTION: These static methods map various properties of a Label, such as CharacterSpacing, Font, TextAlignment, LineHeight, MaxLines, Padding, Text, TextColor, and TextDecorations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapLineHeight(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapMaxLines(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapPadding(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapText(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextColor(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextDecorations(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\n----------------------------------------\n\nTITLE: Starting Location Listening - C# .NET MAUI\nDESCRIPTION: Starts listening for location updates based on the provided GeolocationListeningRequest. Returns a task that indicates success or failure of the operation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Opening Maps in .NET MAUI\nDESCRIPTION: This method is part of the IMap interface and allows users to open a map application with specific coordinates or a Placemark for location-based services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: File System Operations in MAUI (C#)\nDESCRIPTION: Provides static methods and properties for file system operations, including accessing app data and cache directories, and working with app package files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: TextToSpeech API in MAUI\nDESCRIPTION: Static methods for text-to-speech functionality, including speaking text with various options and retrieving available locales for speech synthesis.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!\nstatic Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining FlexBasis Class in .NET MAUI\nDESCRIPTION: This snippet defines the FlexBasis class and its members, which represent the base size of a flex item. It includes constructors and methods for comparison and property access related to the flex basis length.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexBasis.Equals(Microsoft.Maui.Layouts.FlexBasis other) -> bool\nMicrosoft.Maui.Layouts.FlexBasis.FlexBasis() -> void\nMicrosoft.Maui.Layouts.FlexBasis.FlexBasis(float length, bool isRelative = false) -> void\nMicrosoft.Maui.Layouts.FlexBasis.Length.get -> float\n```\n\n----------------------------------------\n\nTITLE: Managing Commands in MAUI\nDESCRIPTION: This snippet outlines the command mapping functionality, including constructors and methods for invoking commands and managing command relationships between views and handlers in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper.CommandMapper() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper.CommandMapper(Microsoft.Maui.CommandMapper! chained) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper.Invoke(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property, object? args) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper.Chained.get -> Microsoft.Maui.CommandMapper?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper.Chained.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IImage Interface Methods in C#\nDESCRIPTION: This snippet outlines the method signatures for the IImage interface, which provides functionality for image resizing, downsizing, and saving operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.IImage.Downsize(float maxWidth, float maxHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n~Microsoft.Maui.Graphics.IImage.Downsize(float maxWidthOrHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n~Microsoft.Maui.Graphics.IImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n~Microsoft.Maui.Graphics.IImage.Save(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> void\n```\n\n----------------------------------------\n\nTITLE: ICanvas Interface Methods in C#\nDESCRIPTION: Core drawing interface defining methods for basic shapes, transformations and state management in MAUI graphics\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ICanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.SaveState() -> void\nMicrosoft.Maui.Graphics.ICanvas.RestoreState() -> bool\n```\n\n----------------------------------------\n\nTITLE: Filling Shapes on Canvas in C# using MAUI Graphics\nDESCRIPTION: These methods extend the ICanvas interface to fill various shapes including arcs, circles, ellipses, rectangles, and rounded rectangles. They provide options for different coordinate systems and shape parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, float x, float y, float width, float height, float startAngle, float endAngle, Microsoft.Maui.Graphics.Paint paint, bool clockwise) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining UI Element Handlers in C#\nDESCRIPTION: This snippet defines various handler classes for UI elements such as ActivityIndicator, Button, CheckBox, and others. These handlers are responsible for managing the platform-specific implementation of the UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler() -> void\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n\nMicrosoft.Maui.Handlers.ButtonHandler\nMicrosoft.Maui.Handlers.ButtonHandler.ButtonHandler() -> void\nMicrosoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n\nMicrosoft.Maui.Handlers.CheckBoxHandler\nMicrosoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler() -> void\nMicrosoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Locations in C#\nDESCRIPTION: Static methods for calculating the distance between two locations using various parameter combinations. These methods are part of the Microsoft.Maui.Devices.Sensors.Location class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Geolocation API Methods in MAUI\nDESCRIPTION: Static methods for accessing device geolocation functionality, including location tracking, listening for location changes, and handling location events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation, Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: Web Authentication in MAUI\nDESCRIPTION: Static methods for handling web authentication including Apple Sign In and general web authentication flows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: MAUI MainThread Utility Methods\nDESCRIPTION: Static utility methods for executing code on the main/UI thread in MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic void BeginInvokeOnMainThread(Action action);\nstatic Task<SynchronizationContext> GetMainThreadSynchronizationContextAsync();\nstatic Task InvokeOnMainThreadAsync(Action action);\nstatic Task InvokeOnMainThreadAsync(Func<Task> funcTask);\nstatic Task<T> InvokeOnMainThreadAsync<T>(Func<Task<T>> funcTask);\n```\n\n----------------------------------------\n\nTITLE: File Type Management in MAUI\nDESCRIPTION: This static readonly field defining helps identify platform-specific file types using Microsoft MAUI.Storage.FilePickerFileType. It accommodates images, videos, and document types like JPEG, PNG, and PDF. Device platform specifics can be retrieved using GetPlatformFileType, providing necessary support for file operations within MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Defining IWindow Interface in C#\nDESCRIPTION: This snippet defines the IWindow interface with properties and methods for window management, including lifecycle events and overlay handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWindow\nMicrosoft.Maui.IWindow.Activated() -> void\nMicrosoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.BackButtonClicked() -> bool\nMicrosoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void\nMicrosoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!\nMicrosoft.Maui.IWindow.Created() -> void\nMicrosoft.Maui.IWindow.Deactivated() -> void\nMicrosoft.Maui.IWindow.Destroying() -> void\nMicrosoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void\nMicrosoft.Maui.IWindow.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void\nMicrosoft.Maui.IWindow.Height.get -> double\nMicrosoft.Maui.IWindow.MaximumHeight.get -> double\nMicrosoft.Maui.IWindow.MaximumWidth.get -> double\nMicrosoft.Maui.IWindow.MinimumHeight.get -> double\nMicrosoft.Maui.IWindow.MinimumWidth.get -> double\nMicrosoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!\nMicrosoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.RequestDisplayDensity() -> float\nMicrosoft.Maui.IWindow.Resumed() -> void\nMicrosoft.Maui.IWindow.Stopped() -> void\nMicrosoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!\nMicrosoft.Maui.IWindow.Width.get -> double\nMicrosoft.Maui.IWindow.X.get -> double\nMicrosoft.Maui.IWindow.Y.get -> double\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IImageHandler in MAUI\nDESCRIPTION: Defines properties for the `IImageHandler` interface in MAUI, providing access to the platform view, virtual view, and SourceLoader. The PlatformView allows interaction with the underlying native image view, VirtualView represents the MAUI Image, and SourceLoader is responsible for loading the image source.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IImageHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IImageHandler.VirtualView.get -> Microsoft.Maui.IImage!\"\n```\n\n----------------------------------------\n\nTITLE: Font configuration extensions for MAUI applications\nDESCRIPTION: Extensions for adding and configuring fonts in MAUI applications, including embedding resource fonts from assemblies and loading fonts from files, with optional aliases for font name mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddEmbeddedResourceFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, System.Reflection.Assembly! assembly, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IFontCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Adding Application Actions using EssentialsBuilder in .NET MAUI\nDESCRIPTION: This method adds an application action to the EssentialsBuilder, which is part of the application lifecycle management in .NET MAUI. It accepts an AppAction object as a parameter and returns an updated IEssentialsBuilder interface for method chaining.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.IEssentialsBuilder.AddAppAction(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining SearchBarHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the SearchBarHandler class, including a command mapper, a property mapper, and methods for mapping various properties such as background, cancel button color, character spacing, and font.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Extension Methods\nDESCRIPTION: Static extension methods for MAUI components including visual tree traversal and screenshot capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeDescendants(this Microsoft.Maui.IVisualTreeElement! visualElement) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\n```\n\n----------------------------------------\n\nTITLE: FilePickerFileType Constants and Methods in .NET MAUI\nDESCRIPTION: Predefined FilePickerFileType constants for common file types (Images, Jpeg, Pdf, Png, Videos) and a virtual method to get platform-specific file type extensions based on the device platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!\nvirtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Dispatcher Extensions in MAUI for C#\nDESCRIPTION: Extension methods for IDispatcher interface that enable asynchronous dispatching of actions and functions to the UI thread. These methods provide various overloads for handling different return types and task patterns.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!\n```\n\n----------------------------------------\n\nTITLE: Picture Writer Extensions for Saving Pictures\nDESCRIPTION: Extension methods for IPictureWriter to save pictures in various formats. These methods convert pictures to different formats including base64, byte arrays, and streams.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBase64(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> string\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytes(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> byte[]\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytesAsync(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsStream(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: GeolocationListeningRequest Class Implementation in C#\nDESCRIPTION: Class for configuring continuous geolocation listening requests in .NET MAUI. Provides properties for desired accuracy and minimum time between updates, with multiple constructor overloads.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest() -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan minimumTime) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.get -> System.TimeSpan\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.set -> void\n```\n\n----------------------------------------\n\nTITLE: SecureStorage Extension Methods in MAUI (C#)\nDESCRIPTION: These extension methods provide additional functionality for the ISecureStorage interface in MAUI. They include getting and setting the default accessibility and setting a value with specific accessibility.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorageExtensions.GetDefaultAccessible(this Microsoft.Maui.Storage.ISecureStorage! secureStorage) -> Security.SecAccessible\nstatic Microsoft.Maui.Storage.SecureStorageExtensions.SetAsync(this Microsoft.Maui.Storage.ISecureStorage! secureStorage, string! key, string! value, Security.SecAccessible accessible) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Storage.SecureStorageExtensions.SetDefaultAccessible(this Microsoft.Maui.Storage.ISecureStorage! secureStorage, Security.SecAccessible accessible) -> void\n```\n\n----------------------------------------\n\nTITLE: Padding Management Extensions for WinUI Controls\nDESCRIPTION: Extension methods for synchronizing padding values between MAUI components and Windows UI controls. These methods handle the conversion of MAUI padding models to Windows-specific thickness properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdatePadding(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.IPadding! padding, Microsoft.UI.Xaml.Thickness? defaultThickness = null) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdatePadding(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Thickness padding, Microsoft.UI.Xaml.Thickness? defaultThickness = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Paint and Color Extension Methods in C#\nDESCRIPTION: Extension methods for the Paint class to check for null/empty values and convert Paint objects to Color objects. These methods support styling and appearance management in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?\n```\n\n----------------------------------------\n\nTITLE: Defining ShapeView Mappers in C#\nDESCRIPTION: These static properties and methods define mappers and mapping functions for ShapeView components in MAUI, including various shape properties such as aspect, background, fill, and stroke characteristics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MenuBar Handler Implementation in C#\nDESCRIPTION: Implementation of the MenuBarHandler class that manages menu bars in MAUI. Provides methods for adding, removing, inserting and clearing menu items.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler {\n    void Add(Microsoft.Maui.IMenuBarItem view);\n    void Clear();\n    void Insert(int index, Microsoft.Maui.IMenuBarItem view);\n    void Remove(Microsoft.Maui.IMenuBarItem view);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchBarHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods for the SearchBarHandler class that map search bar properties such as background, cancel button color, character spacing, font, and text formatting to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFormatting(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ICrossPlatformLayout Interface in C#\nDESCRIPTION: The ICrossPlatformLayout interface provides methods for arranging and measuring layouts across platforms, accommodating different constraint scenarios in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ICrossPlatformLayout.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.ICrossPlatformLayout.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Defining Location Permission Methods in C#\nDESCRIPTION: Override declarations for location permission methods including status checking, permission requests and info.plist key requirements for both LocationAlways and LocationWhenInUse scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\noverride Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\noverride Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.RequiredInfoPlistKeys.get -> System.Func<System.Collections.Generic.IEnumerable<string>>\n```\n\n----------------------------------------\n\nTITLE: Predefined Color Constants in Microsoft.Maui.Graphics\nDESCRIPTION: A collection of static readonly color constants defined in the Microsoft.Maui.Graphics.Colors class. These predefined colors can be used for UI elements, drawings, and other visual components in MAUI applications without having to define custom RGB values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.Gold -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Goldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Green -> Microsoft.Maui.Graphics.Color\n// ... more color definitions ...\nstatic readonly Microsoft.Maui.Graphics.Colors.White -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.WhiteSmoke -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Yellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.YellowGreen -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: GeocodingExtensions in MAUI C#\nDESCRIPTION: Extension methods for the IGeocoding interface to provide additional functionality for getting placemarks from a location object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetPlacemarksAsync(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: CanvasState Class in C#\nDESCRIPTION: Defines the CanvasState class which tracks the current state of a canvas including transformations, scaling, and stroke properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.CanvasState\nMicrosoft.Maui.Graphics.CanvasState.CanvasState() -> void\nMicrosoft.Maui.Graphics.CanvasState.Transform.get -> System.Numerics.Matrix3x2\nMicrosoft.Maui.Graphics.CanvasState.Transform.set -> void\nMicrosoft.Maui.Graphics.CanvasState.Scale.get -> float\nMicrosoft.Maui.Graphics.CanvasState.ScaleX.get -> float\nMicrosoft.Maui.Graphics.CanvasState.ScaleY.get -> float\nMicrosoft.Maui.Graphics.CanvasState.StrokeSize.get -> float\nMicrosoft.Maui.Graphics.CanvasState.StrokeSize.set -> void\nMicrosoft.Maui.Graphics.CanvasState.StrokeDashOffset.get -> float\nMicrosoft.Maui.Graphics.CanvasState.StrokeDashOffset.set -> void\n```\n\n----------------------------------------\n\nTITLE: SMS Functionality in .NET MAUI\nDESCRIPTION: Methods for composing and sending SMS messages using the device's messaging app.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.Default.get -> Microsoft.Maui.ApplicationModel.Communication.ISms!\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation in C# using MAUI Graphics\nDESCRIPTION: These static methods of the Color class provide various ways to create Color objects from different color models including RGB, RGBA, HSL, HSV, and hexadecimal representations. They also include parsing methods for string color values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgb(byte red, byte green, byte blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgba(byte red, byte green, byte blue, byte alpha) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsla(double h, double s, double l, double a = 1) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsv(float h, float s, float v) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHex(string colorAsArgbHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.Parse(string value) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Defining Static Color Constants in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet showcases the pattern used to define static readonly color constants in the Microsoft.Maui.Graphics.Colors class. Each line declares a different named color as a Microsoft.Maui.Graphics.Color object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.CornflowerBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Cornsilk -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Crimson -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Cyan -> Microsoft.Maui.Graphics.Color\n// ... (additional color definitions follow the same pattern)\n```\n\n----------------------------------------\n\nTITLE: Hot Reload extension methods for MAUI applications\nDESCRIPTION: Extensions to support hot reload functionality in MAUI applications, checking UI elements for updated handlers and discovering methods to invoke during hot reload operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.HotReloadExtensions.CheckHandlers(this Microsoft.Maui.IView? view) -> void\nstatic Microsoft.Maui.HotReload.HotReloadExtensions.GetOnHotReloadMethods(this System.Type! type) -> System.Collections.Generic.List<System.Reflection.MethodInfo!>!\n```\n\n----------------------------------------\n\nTITLE: Media Picking in MAUI (C#)\nDESCRIPTION: Defines static methods for capturing and picking photos and videos using the MediaPicker class, with optional MediaPickerOptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!\nstatic Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Editor Handler Property Mapping Methods\nDESCRIPTION: Static methods for mapping Editor control properties like spell check, text prediction, keyboard, max length, placeholder, text color and alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Semantic Accessibility Classes in C#\nDESCRIPTION: Definitions of semantic accessibility classes and enumerations for enhancing accessibility in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SemanticExtensions\nMicrosoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level1 = 1 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level2 = 2 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level3 = 3 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level4 = 4 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level5 = 5 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level6 = 6 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level7 = 7 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level8 = 8 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level9 = 9 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.None = 0 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.Semantics\nMicrosoft.Maui.Semantics.Description.get -> string?\nMicrosoft.Maui.Semantics.Description.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Location Asynchronously with Custom Request - C# .NET MAUI\nDESCRIPTION: Asynchronously fetches the device's location based on a specified GeolocationRequest and cancellation token. The method returns a task that provides the location or null if the location couldn't be determined.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: File Picking in MAUI (C#)\nDESCRIPTION: Defines static methods for picking single or multiple files using the FilePicker class, with optional PickOptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: Mapping DatePicker Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of a DatePicker control in MAUI, including background, character spacing, date, font, format, maximum date, minimum date, and text color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapBackground(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping WebView Properties and Commands in C#\nDESCRIPTION: Static methods and properties for mapping WebView control properties and commands, including Eval, EvaluateJavaScriptAsync, GoBack, and GoForward. It also defines CommandMapper and Mapper for the WebViewHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: WindowHandler Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for handling windows in MAUI applications. These methods map window properties like content, dimensions, position, title, and display density to platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapRequestDisplayDensity(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window, object? args) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapTitle(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapX(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapY(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollView Mappers in C#\nDESCRIPTION: These static properties and methods define mappers and mapping functions for ScrollView components in MAUI, including content, scroll bar visibility, orientation, and scroll-to functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting StackLayout with FillAndExpand to Grid in MAUI\nDESCRIPTION: This snippet demonstrates how to convert a Xamarin.Forms StackLayout using 'FillAndExpand' to an equivalent MAUI Grid layout. It shows the replacement of VerticalOptions='FillAndExpand' with a Grid using RowDefinitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<StackLayout>\n\t<Label Text=\"howdy\"/>\n\t<Image VerticalOptions=\"FillAndExpand\" src=\"dotnetbot.png\"/>\n</StackLayout>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Grid RowDefinitions=\"Auto, *\">\n\t<Label Text=\"howdy\"/>\n\t<Image Grid.Row=\"1\" src=\"dotnetbot.png\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Canvas Extension Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Static extension methods for the ICanvas interface that provide additional drawing functionality. These methods include operations for clipping, drawing various shapes (circles, rectangles, paths), and filling shapes with colors or patterns in MAUI graphics applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.BitmapExportContextExtensions.WriteToFile(this Microsoft.Maui.Graphics.BitmapExportContext exportContext, string filename) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawLine(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.RectF bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.EnableDefaultShadow(this Microsoft.Maui.Graphics.ICanvas canvas, float zoom = 1) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, float x, float y, float width, float height, float startAngle, float endAngle, Microsoft.Maui.Graphics.Paint paint, bool clockwise) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Polygon Map Element Class (C#)\nDESCRIPTION: The Polygon class represents a closed shape on a map defined by a collection of locations. It supports properties for fill color and stroke configuration, as well as collection operations for managing the points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Polygon\nMicrosoft.Maui.Controls.Maps.Polygon.Polygon() -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Geopath.get -> System.Collections.Generic.IList<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polygon.Fill.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.Controls.Maps.Polygon.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.Polygon.FillColor.set -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Count.get -> int\nMicrosoft.Maui.Controls.Maps.Polygon.IsReadOnly.get -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.this[int index].get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Polygon.this[int index].set -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Add(Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Clear() -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Contains(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.CopyTo(Microsoft.Maui.Devices.Sensors.Location![]! array, int arrayIndex) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polygon.IndexOf(Microsoft.Maui.Devices.Sensors.Location! item) -> int\nMicrosoft.Maui.Controls.Maps.Polygon.Insert(int index, Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Remove(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.RemoveAt(int index) -> void\n```\n\n----------------------------------------\n\nTITLE: Overridden Object Methods for Geometric Types in MAUI Graphics\nDESCRIPTION: Override implementations of Object.Equals and Object.ToString for various geometric types like Point, PointF, Rect, RectF, Size, SizeF, and other graphics objects. These methods provide proper equality comparison and string representation of graphics objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Font.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.GradientPaint.ToString() -> string\n~override Microsoft.Maui.Graphics.Insets.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Insets.ToString() -> string\n~override Microsoft.Maui.Graphics.InsetsF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.InsetsF.ToString() -> string\n~override Microsoft.Maui.Graphics.PathF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.PicturePattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n~override Microsoft.Maui.Graphics.Point.Equals(object o) -> bool\n~override Microsoft.Maui.Graphics.Point.ToString() -> string\n~override Microsoft.Maui.Graphics.PointF.Equals(object o) -> bool\n~override Microsoft.Maui.Graphics.PointF.ToString() -> string\n~override Microsoft.Maui.Graphics.Rect.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Rect.ToString() -> string\n~override Microsoft.Maui.Graphics.RectF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.RectF.ToString() -> string\n~override Microsoft.Maui.Graphics.Size.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Size.ToString() -> string\n~override Microsoft.Maui.Graphics.SizeF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.SizeF.ToString() -> string\n~override Microsoft.Maui.Graphics.SolidPaint.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: ISwipeView Interface Definition in .NET MAUI\nDESCRIPTION: Interface for a swipeable UI component with support for items on all four sides (top, bottom, left, right). Defines events for swipe interactions and methods for controlling the open/closed state programmatically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ISwipeView\nMicrosoft.Maui.ISwipeView.BottomItems.get -> Microsoft.Maui.ISwipeItems!\nMicrosoft.Maui.ISwipeView.IsOpen.get -> bool\nMicrosoft.Maui.ISwipeView.IsOpen.set -> void\nMicrosoft.Maui.ISwipeView.LeftItems.get -> Microsoft.Maui.ISwipeItems!\nMicrosoft.Maui.ISwipeView.RequestClose(Microsoft.Maui.SwipeViewCloseRequest! swipeCloseRequest) -> void\nMicrosoft.Maui.ISwipeView.RequestOpen(Microsoft.Maui.SwipeViewOpenRequest! swipeOpenRequest) -> void\nMicrosoft.Maui.ISwipeView.RightItems.get -> Microsoft.Maui.ISwipeItems!\nMicrosoft.Maui.ISwipeView.SwipeChanging(Microsoft.Maui.SwipeViewSwipeChanging! swipeChanging) -> void\nMicrosoft.Maui.ISwipeView.SwipeEnded(Microsoft.Maui.SwipeViewSwipeEnded! swipeEnded) -> void\nMicrosoft.Maui.ISwipeView.SwipeStarted(Microsoft.Maui.SwipeViewSwipeStarted! swipeStarted) -> void\nMicrosoft.Maui.ISwipeView.SwipeTransitionMode.get -> Microsoft.Maui.SwipeTransitionMode\nMicrosoft.Maui.ISwipeView.Threshold.get -> double\nMicrosoft.Maui.ISwipeView.TopItems.get -> Microsoft.Maui.ISwipeItems!\n```\n\n----------------------------------------\n\nTITLE: Connectivity Changes in Microsoft.Maui.Networking\nDESCRIPTION: Methods related to network connectivity within the maui framework are included here, including properties to track active network access and event handling for changes to connectivity.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Networking.IConnectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs>\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Networking.IConnectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Editor Handler Property Mappings\nDESCRIPTION: Static methods for mapping editor properties like background, font, text alignment, keyboard options and input behaviors between the MAUI abstraction and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapBackground(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeItemMenuItemHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods in the SwipeItemMenuItemHandler class that map swipe menu item properties to platform implementations. These methods handle styling, text formatting, image sources, and visibility state of swipeable menu items in a SwipeView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Geocoding Interface in C#\nDESCRIPTION: Introduces the IPlatformGeocoding interface for location-based services in Microsoft Maui. It suggests methods related to geocoding operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IPlatformGeocoding\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Constraint Resolution in C#\nDESCRIPTION: This static method resolves layout constraints based on external constraints, explicit lengths, and measured lengths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutManager.ResolveConstraints(double externalConstraint, double explicitLength, double measuredLength, double min = 0, double max = Infinity) -> double\n```\n\n----------------------------------------\n\nTITLE: Distance Class Implementation\nDESCRIPTION: Class for handling geographic distances with conversions between meters, kilometers, and miles\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Distance {\n    public Distance();\n    public Distance(double meters);\n    public double Kilometers { get; }\n    public double Meters { get; }\n    public double Miles { get; }\n    public bool Equals(Distance other);\n    public static Distance FromKilometers(double kilometers);\n    public static Distance FromMeters(double meters);\n    public static Distance FromMiles(double miles);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text to Clipboard in .NET MAUI\nDESCRIPTION: This async method sets the specified text to the clipboard. It takes a nullable string parameter and returns a Task. It is defined in the IClipboard interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Overriding PickerSource Methods in MAUI for iOS\nDESCRIPTION: Override methods for the PickerSource class that manage component count, row handling, item title generation, and selection for UIPickerView in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.PickerSource.GetComponentCount(UIKit.UIPickerView! picker) -> nint\noverride Microsoft.Maui.Handlers.PickerSource.GetRowsInComponent(UIKit.UIPickerView! pickerView, nint component) -> nint\noverride Microsoft.Maui.Handlers.PickerSource.GetTitle(UIKit.UIPickerView! picker, nint row, nint component) -> string!\noverride Microsoft.Maui.Handlers.PickerSource.Selected(UIKit.UIPickerView! picker, nint row, nint component) -> void\n```\n\n----------------------------------------\n\nTITLE: Rect Methods and Operators in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Static methods and operators for Microsoft.Maui.Graphics.Rect, including rectangle creation, type conversion, intersection, union operations, and equality checking. Provides functionality for rectangle manipulation and comparison.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator CoreGraphics.CGRect(Microsoft.Maui.Graphics.Rect rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Microsoft.Maui.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Rectangles with Microsoft.Maui.Graphics\nDESCRIPTION: This set of extension methods allows for the drawing of rounded rectangles on a canvas using the Microsoft.Maui.Graphics.ICanvas interface. The methods provide multiple overloads, allowing for flexibility in specifying corner radii and rectangle dimensions. It requires the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: MauiView Class Definition\nDESCRIPTION: Core MAUI view class that provides layout and measurement functionality for cross-platform UI elements\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiView.AdjustForSafeArea(CoreGraphics.CGRect bounds) -> CoreGraphics.CGRect\nMicrosoft.Maui.Platform.MauiView.CacheMeasureConstraints(double widthConstraint, double heightConstraint) -> void\nMicrosoft.Maui.Platform.MauiView.CrossPlatformLayout.get -> Microsoft.Maui.ICrossPlatformLayout?\nMicrosoft.Maui.Platform.MauiView.CrossPlatformLayout.set -> void\nMicrosoft.Maui.Platform.MauiView.InvalidateConstraintsCache() -> void\n```\n\n----------------------------------------\n\nTITLE: Color Creation and Parsing Methods\nDESCRIPTION: Static methods for creating Color objects from various formats including RGB, RGBA, HSL, HSV and hex strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Color FromRgb(byte red, byte green, byte blue);\nstatic Color FromRgba(byte red, byte green, byte blue, byte alpha);\nstatic Color FromHsla(double h, double s, double l, double a = 1);\nstatic Color FromHex(string colorAsArgbHex);\n```\n\n----------------------------------------\n\nTITLE: FilePicker Pick Async in .NET MAUI\nDESCRIPTION: This method allows the user to pick a file asynchronously, optionally passing in settings for the file picker dialog. It returns a task that resolves to a FileResult.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.IFilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Loading Image From Stream in .NET MAUI\nDESCRIPTION: This snippet defines the FromStream method for the IImageLoadingService interface, enabling the creation of an image from a stream with a specified image format, defaulting to PNG.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IImageLoadingService.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Parsing and Defining Colors in MAUI C#\nDESCRIPTION: Facilitates color parsing and standard color definitions within Microsoft MAUI applications. The color parsing methods accept a color string and return arrays of floats or integers representing color components. There are also predefined standard colors accessible in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.ParseAsInts(this string color) -> int[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.StandardColors -> System.Collections.Generic.Dictionary<string, string>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowColor -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.AliceBlue -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.AntiqueWhite -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: PlatformCanvas Drawing Methods in .NET MAUI\nDESCRIPTION: Override methods for the PlatformCanvas class that implement basic shape drawing functionality including rectangles, ellipses, arcs, and lines. These methods form the core drawing capabilities of the MAUI graphics system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillRectangle(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool close) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawRectangle(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Operations\nDESCRIPTION: Method signatures for the PictureCanvas class, providing drawing capabilities for text, images, paths, and various graphical elements\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BlazorWebView Class in C# for .NET MAUI\nDESCRIPTION: Defines the BlazorWebView class with properties and events for integrating Blazor components into MAUI applications. Includes handlers for initialization, URL loading, and component management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.BlazorWebView() -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.BlazorWebViewInitialized -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs!>?\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.BlazorWebViewInitializing -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializingEventArgs!>?\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.HostPage.get -> string?\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.HostPage.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.RootComponents.get -> Microsoft.AspNetCore.Components.WebView.Maui.RootComponentsCollection!\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.StartPath.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.StartPath.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebView.UrlLoading -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.UrlLoadingEventArgs!>?\n```\n\n----------------------------------------\n\nTITLE: Requesting Permission in MAUI\nDESCRIPTION: This static method asynchronously requests a specified permission from the user within a MAUI application. It returns a Task that resolves to a PermissionStatus enum, reflecting the user's response (granted, denied, etc.). This is essential for accessing sensitive device features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.ApplicationModel.Permissions.RequestAsync<TPermission>() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\"\n```\n\n----------------------------------------\n\nTITLE: Accelerometer Data Class Implementation in MAUI\nDESCRIPTION: Class for handling accelerometer sensor data in MAUI applications. Contains properties for acceleration vector and constructors for initializing with different numeric types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.Acceleration.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData() -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(float x, float y, float z) -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.Equals(Microsoft.Maui.Devices.Sensors.AccelerometerData other) -> bool\n```\n\n----------------------------------------\n\nTITLE: Ticker Implementation for Animation Timing Control\nDESCRIPTION: The ITicker interface defines the essential operations for timing control in animations. Classes implementing ITicker provide critical features like starting, stopping, and configuring maximum frames per second (MaxFps) for animations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.ITicker\nMicrosoft.Maui.Animations.ITicker.Fire.get -> System.Action?\nMicrosoft.Maui.Animations.ITicker.Fire.set -> void\nMicrosoft.Maui.Animations.ITicker.IsRunning.get -> bool\nMicrosoft.Maui.Animations.ITicker.MaxFps.get -> int\nMicrosoft.Maui.Animations.ITicker.MaxFps.set -> void\nMicrosoft.Maui.Animations.ITicker.Start() -> void\nMicrosoft.Maui.Animations.ITicker.Stop() -> void\nMicrosoft.Maui.Animations.ITicker.SystemEnabled.get -> bool\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Button Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of a Button control in MAUI, including padding, stroke color, stroke thickness, text, and text color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapText(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\n```\n\n----------------------------------------\n\nTITLE: Opening a Phone Dialer in .NET MAUI\nDESCRIPTION: This function opens the phone dialer with a specified number. It returns void and specifies that it belongs to the IPhoneDialer interface. It is useful for initiating phone calls directly from applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IPhoneDialer.Open(string! number) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing Map Control Class\nDESCRIPTION: Defines the core Map control class with properties for controlling map behavior, including zoom, scroll, traffic display and user location. Supports map clicks, pins, and map elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Map Map() -> void\nMicrosoft.Maui.Controls.Maps.Map Map(Microsoft.Maui.Maps.MapSpan! region) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeItemMenuItemHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the SwipeItemMenuItemHandler class that handle mapping of swipe menu item attributes like background, text, font, and visibility to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Contact Management in C#\nDESCRIPTION: Contact class implementation for managing contact information including name, phone numbers, and email addresses.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nContact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, IEnumerable<ContactPhone> phones, IEnumerable<ContactEmail> email, string displayName = null)\n```\n\n----------------------------------------\n\nTITLE: Controlling Device Vibration in C# MAUI\nDESCRIPTION: Static methods for controlling device vibration. Includes cancelling vibration, accessing the default vibration interface, and initiating vibration for specified durations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Vibration.Cancel() -> void\nstatic Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!\nstatic Microsoft.Maui.Devices.Vibration.Vibrate() -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void\nstatic Microsoft.Maui.Devices.VibrationExtensions.Vibrate(this Microsoft.Maui.Devices.IVibration! vibration, double duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Authentication using Microsoft.Maui in C#\nDESCRIPTION: Explore web authentication capabilities via `Microsoft.Maui.Authentication` and `WebAuthenticatorExtensions`. These methods allow for authenticating users against web services using URLs and WebAuthenticatorOptions, supporting async operations with results returned as WebAuthenticatorResult.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.Default.get -> Microsoft.Maui.Authentication.IAppleSignInAuthenticator!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.Default.get -> Microsoft.Maui.Authentication.IWebAuthenticator!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Authentication.WebAuthenticatorExtensions.AuthenticateAsync(this Microsoft.Maui.Authentication.IWebAuthenticator! webAuthenticator, System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticatorExtensions.ContinueUserActivity(this Microsoft.Maui.Authentication.IWebAuthenticator! webAuthenticator, UIKit.UIApplication! application, Foundation.NSUserActivity! userActivity, UIKit.UIApplicationRestorationHandler! completionHandler) -> bool\nstatic Microsoft.Maui.Authentication.WebAuthenticatorExtensions.OpenUrl(this Microsoft.Maui.Authentication.IWebAuthenticator! webAuthenticator, System.Uri! uri) -> bool\nstatic Microsoft.Maui.Authentication.WebAuthenticatorExtensions.OpenUrl(this Microsoft.Maui.Authentication.IWebAuthenticator! webAuthenticator, UIKit.UIApplication! app, Foundation.NSUrl! url, Foundation.NSDictionary! options) -> bool\n```\n\n----------------------------------------\n\nTITLE: Contact Model Class Definition in C#\nDESCRIPTION: Contact class implementation for MAUI's Communication namespace, providing properties and methods for managing contact information including name components, phone numbers, and email addresses.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.ApplicationModel.Communication.Contact.Contact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactPhone> phones, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactEmail> email, string displayName = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Pin Class for Map Markers\nDESCRIPTION: Implements the Pin class for representing map markers with properties for address, label, location, and event handlers for clicks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Pin\nMicrosoft.Maui.Controls.Maps.Pin.Address.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Address.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.InfoWindowClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.PinClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Pin.Label.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Label.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Pin.Location.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.MarkerClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.PinClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Pin.MarkerId.get -> object?\nMicrosoft.Maui.Controls.Maps.Pin.MarkerId.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Pin() -> void\nMicrosoft.Maui.Controls.Maps.Pin.SendInfoWindowClick() -> bool\nMicrosoft.Maui.Controls.Maps.Pin.SendMarkerClick() -> bool\nMicrosoft.Maui.Controls.Maps.Pin.Type.get -> Microsoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.Pin.Type.set -> void\n```\n\n----------------------------------------\n\nTITLE: ShapeViewHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods in the ShapeViewHandler class that map IShapeView properties to platform implementations. These methods handle shape appearance, stroke properties, fill, and background customization for cross-platform shape rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing an Arc on ICanvas in C#\nDESCRIPTION: This method draws an arc on the canvas. It takes parameters for position, size, start and end angles, and options for clockwise direction and closure.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ICanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n```\n\n----------------------------------------\n\nTITLE: Button Handler Implementation in MAUI\nDESCRIPTION: Handler implementation for Button UI elements, managing properties like text styling, background, and image sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.ImageButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapBackground(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSourceAsync(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\n```\n\n----------------------------------------\n\nTITLE: SkiaTextLayout Constructor\nDESCRIPTION: Creates a text layout with advanced configuration options including text attributes, layout callback, text flow, and optional font\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: View Extensions for MAUI Platform Views\nDESCRIPTION: Extensions for updating various view properties on platform-specific views, such as position, size, appearance, and accessibility attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.Focus(this object! platformView, Microsoft.Maui.FocusRequest! request) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.InvalidateMeasure(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.ToHandler(this Microsoft.Maui.IView! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IViewHandler!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.Unfocus(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateAnchorX(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateAnchorY(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateAutomationId(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackgroundImageSourceAsync(this object! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBorder(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateClip(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateClipsToBounds(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateFlowDirection(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this object! nativeView, Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateIsEnabled(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumHeight(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumWidth(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumHeight(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumWidth(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateOpacity(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateRotation(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateRotationX(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateRotationY(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateScale(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateSemantics(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateShadow(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateTranslationX(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateTranslationY(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateVisibility(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IWebView Interface in C#\nDESCRIPTION: This snippet defines the IWebView interface with properties and methods for web content manipulation, including navigation and JavaScript execution.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWebView\nMicrosoft.Maui.IWebView.CanGoBack.get -> bool\nMicrosoft.Maui.IWebView.CanGoBack.set -> void\nMicrosoft.Maui.IWebView.CanGoForward.get -> bool\nMicrosoft.Maui.IWebView.CanGoForward.set -> void\nMicrosoft.Maui.IWebView.Cookies.get -> System.Net.CookieContainer!\nMicrosoft.Maui.IWebView.Eval(string! script) -> void\nMicrosoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Maui.IWebView.GoBack() -> void\nMicrosoft.Maui.IWebView.GoForward() -> void\nMicrosoft.Maui.IWebView.Navigated(Microsoft.Maui.WebNavigationEvent evnt, string! url, Microsoft.Maui.WebNavigationResult result) -> void\nMicrosoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool\nMicrosoft.Maui.IWebView.Reload() -> void\nMicrosoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!\nMicrosoft.Maui.IWebView.UserAgent.get -> string?\nMicrosoft.Maui.IWebView.UserAgent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Text from Clipboard in .NET MAUI\nDESCRIPTION: This async method retrieves text content from the clipboard. It returns a Task containing a string. The method belongs to the IClipboard interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\n```\n\n----------------------------------------\n\nTITLE: Opening Maps in MAUI Applications\nDESCRIPTION: Static methods for opening maps with various parameters such as location, placemark, and options. These methods are part of the Microsoft.Maui.ApplicationModel namespace and return Tasks indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Dispatcher Extensions for MAUI\nDESCRIPTION: Extension methods for MAUI's dispatcher system, providing async dispatch capabilities and timer functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining PictureCanvas Properties and Methods in MAUI\nDESCRIPTION: This snippet includes methods for drawing shapes, transforming the canvas, and managing the canvas state within the PictureCanvas class, providing comprehensive graphics manipulation capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.ClipRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ResetState() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Translate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring BindingExtension Properties in C#\nDESCRIPTION: This snippet declares various properties for the BindingExtension class, including Converter, Path, Source, and others related to binding configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Converter.get -> Microsoft.Maui.Controls.IValueConverter\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Converter.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.ConverterParameter.get -> object\n~Microsoft.Maui.Controls.Xaml.BindingExtension.ConverterParameter.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Path.get -> string\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Path.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Source.get -> object\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Source.set -> void\n```\n\n----------------------------------------\n\nTITLE: StyleableElement Class Definition in C#\nDESCRIPTION: Defines the StyleableElement class which serves as a base for UI elements that can be styled. Includes properties for style classes and style application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement\nMicrosoft.Maui.Controls.StyleableElement.class.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.class.set -> void\nMicrosoft.Maui.Controls.StyleableElement.Style.set -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleableElement() -> void\n```\n\n----------------------------------------\n\nTITLE: Point Structure Implementation in C#\nDESCRIPTION: Implementation of a Point structure representing a 2D point with double precision coordinates. Includes constructors, property accessors, and utility methods for point manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\npublic struct Point {\n    public Point() -> void\n    public Point(double x, double y) -> void\n    public Point(Size sz) -> void\n    public Point(SizeF sz) -> void\n    public Point(Vector2 v) -> void\n    public double X { get; set; }\n    public double Y { get; set; }\n    public bool IsEmpty { get; }\n    public void Deconstruct(out double x, out double y) -> void\n    public double Distance(Point other) -> double\n    public Point Offset(double dx, double dy) -> Point\n    public Point Round() -> Point\n}\n```\n\n----------------------------------------\n\nTITLE: Loading XAML in C# for MAUI Controls\nDESCRIPTION: Extension methods for loading XAML content into MAUI Controls. These methods allow loading XAML from a string or a calling type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, string xaml) -> TXaml\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, System.Type callingType) -> TXaml\n```\n\n----------------------------------------\n\nTITLE: WebView Navigation Delegate Implementation in C#\nDESCRIPTION: MauiWebViewNavigationDelegate handles navigation events for WebView components. It manages web navigation policies, navigation failures, and successful navigation completion.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiWebViewNavigationDelegate\nMicrosoft.Maui.Platform.MauiWebViewNavigationDelegate.DecidePolicy(WebKit.WKWebView! webView, WebKit.WKNavigationAction! navigationAction, System.Action<WebKit.WKNavigationActionPolicy>! decisionHandler) -> void\nMicrosoft.Maui.Platform.MauiWebViewNavigationDelegate.DidFailNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation, Foundation.NSError! error) -> void\nMicrosoft.Maui.Platform.MauiWebViewNavigationDelegate.DidFailProvisionalNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation, Foundation.NSError! error) -> void\nMicrosoft.Maui.Platform.MauiWebViewNavigationDelegate.DidFinishNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation) -> void\nMicrosoft.Maui.Platform.MauiWebViewNavigationDelegate.MauiWebViewNavigationDelegate(Microsoft.Maui.Handlers.IWebViewHandler! handler) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Permission Handlers in .NET MAUI\nDESCRIPTION: Override implementations for location permission methods including status checking, requesting permissions and managing InfoPlist keys for different location access levels.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\noverride Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\noverride Microsoft.Maui.ApplicationModel.Permissions.LocationAlways.RequiredInfoPlistKeys.get -> System.Func<System.Collections.Generic.IEnumerable<string>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Window State Management Interface in .NET MAUI\nDESCRIPTION: The IWindowStateManager interface defines methods and events for managing window state in Windows-based MAUI applications, providing window activation and initialization functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.ActiveWindowChanged -> System.EventHandler!\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.GetActiveWindow() -> Microsoft.UI.Xaml.Window?\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.OnActivated(Microsoft.UI.Xaml.Window! window, Microsoft.UI.Xaml.WindowActivatedEventArgs! args) -> void\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.OnPlatformWindowInitialized(Microsoft.UI.Xaml.Window! window) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Image Handling API Reference (C#)\nDESCRIPTION: Classes and methods for platform-specific image operations including PlatformImage, PlatformBitmapExportContext, and related services. These components enable working with images across different platforms in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_160\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportContext\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportContext.PlatformBitmapExportContext(int width, int height, float displayScale, int dpi = 72, int border = 0) -> void\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportService\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportService.PlatformBitmapExportService() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformImage\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Dispose() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Height.get -> float\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Width.get -> float\nMicrosoft.Maui.Graphics.Platform.PlatformImageLoadingService\nMicrosoft.Maui.Graphics.Platform.PlatformImageLoadingService.PlatformImageLoadingService() -> void\n```\n\n----------------------------------------\n\nTITLE: Secure Storage API Definitions in .NET MAUI\nDESCRIPTION: Static API definitions for secure storage operations in MAUI applications. Provides methods for securely storing and retrieving string values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Point Structure Implementation in C#\nDESCRIPTION: Defines the Point structure in Microsoft.Maui.Graphics with constructors, properties, and methods for 2D point coordinates using double precision values. Includes methods for distance calculation, offset, and coordinate manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.Deconstruct(out double x, out double y) -> void\nMicrosoft.Maui.Graphics.Point.Distance(Microsoft.Maui.Graphics.Point other) -> double\nMicrosoft.Maui.Graphics.Point.IsEmpty.get -> bool\nMicrosoft.Maui.Graphics.Point.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.Point() -> void\nMicrosoft.Maui.Graphics.Point.Point(double x, double y) -> void\nMicrosoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.Size sz) -> void\nMicrosoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.SizeF sz) -> void\nMicrosoft.Maui.Graphics.Point.Point(System.Numerics.Vector2 v) -> void\nMicrosoft.Maui.Graphics.Point.Round() -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.X.get -> double\nMicrosoft.Maui.Graphics.Point.X.set -> void\nMicrosoft.Maui.Graphics.Point.Y.get -> double\nMicrosoft.Maui.Graphics.Point.Y.set -> void\n```\n\n----------------------------------------\n\nTITLE: PathF Advanced Path Operations\nDESCRIPTION: Method signatures for advanced path operations like curves, rotation, and path separation in the PathF class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF.QuadTo(float cx, float cy, float x, float y) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.QuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.Reverse() -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.Rotate(float angleAsDegrees, Microsoft.Maui.Graphics.PointF pivot) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.SegmentTypes.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PathOperation>\nMicrosoft.Maui.Graphics.PathF.Separate() -> System.Collections.Generic.List<Microsoft.Maui.Graphics.PathF>\n```\n\n----------------------------------------\n\nTITLE: CollectionView Handler Property Mappings in C#\nDESCRIPTION: Static method declarations for mapping CollectionView properties such as reordering, templates, grouping, and selection. These methods handle the core functionality of CollectionView components.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.MapCanReorderItems(Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2 handler, Microsoft.Maui.Controls.ReorderableItemsView itemsView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.MapFooterTemplate(Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2 handler, Microsoft.Maui.Controls.StructuredItemsView itemsView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.MapHeaderTemplate(Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2 handler, Microsoft.Maui.Controls.StructuredItemsView itemsView) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Orientation Sensors in C#\nDESCRIPTION: This snippet defines the interfaces and methods related to orientation sensors in the Microsoft Maui framework. It includes methods to start and stop the sensor, check if it is supported, and handle reading changes. The output involves event handlers and properties for sensor support and monitoring.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.Stop() -> void\n\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Renderer Interface and Implementation in C#\nDESCRIPTION: Interface and class definitions for platform-specific graphics rendering in MAUI. The IGraphicsRenderer interface defines methods for handling rendering contexts, while DirectRenderer provides a concrete implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.Detached() -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.Invalidate() -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.Invalidate(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.SizeChanged(float width, float height) -> void\n\nMicrosoft.Maui.Graphics.Platform.DirectRenderer\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.DirectRenderer() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Detached() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Dispose() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Invalidate() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Invalidate(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.SizeChanged(float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Base Permission Abstract Methods in C#\nDESCRIPTION: Abstract methods for checking and requesting permissions in MAUI's BasePermission class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Task<PermissionStatus> CheckStatusAsync();\nabstract Task<PermissionStatus> RequestAsync();\n```\n\n----------------------------------------\n\nTITLE: SwitchHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the SwitchHandler class that handle mapping of switch attributes like toggle state, thumb color, and track color to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Static Methods for Microsoft.Maui.Graphics.Rect in C#\nDESCRIPTION: This snippet defines static methods for the Rect struct, including equality operators, a Union method, and a Zero property. These methods allow for comparison and manipulation of Rect objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: SearchBar Handler Property Mapping in C#\nDESCRIPTION: Static methods for mapping SearchBar properties like formatting, text alignment, keyboard settings, and text content to platform-specific implementations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFormatting(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Orientation Sensor Data Operations\nDESCRIPTION: Describes methods for initializing and manipulating orientation sensor data, including constructors with parameters for direction (quaternion) which are key in applications requiring orientation calculations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Equals(Microsoft.Maui.Devices.Sensors.OrientationSensorData other) -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Orientation.get -> System.Numerics.Quaternion\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData() -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(double x, double y, double z, double w) -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(float x, float y, float z, float w) -> void\n```\n\n----------------------------------------\n\nTITLE: Accelerometer APIs in MAUI C#\nDESCRIPTION: Static methods for accessing and controlling the device accelerometer, including starting and stopping monitoring, checking support status, and handling accelerometer events such as reading changes and shake detection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Default.get -> Microsoft.Maui.Devices.Sensors.IAccelerometer!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ShakeDetected -> System.EventHandler!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Managing MenuBarItem Elements with IMenuBarItemHandler in MAUI\nDESCRIPTION: Defines methods for the `IMenuBarItemHandler` interface in MAUI to add, clear, insert, and remove menu elements. It also exposes the PlatformView and VirtualView properties for accessing native and MAUI elements respectively.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarItemHandler.Clear() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarItemHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarItemHandler.VirtualView.get -> Microsoft.Maui.IMenuBarItem!\"\n```\n\n----------------------------------------\n\nTITLE: Authentication in MAUI Applications\nDESCRIPTION: Provides static methods for handling authentication, including Apple Sign-In and web-based authentication. Supports various authentication options and callback handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.Default.get -> Microsoft.Maui.Authentication.IAppleSignInAuthenticator!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.Default.get -> Microsoft.Maui.Authentication.IWebAuthenticator!\n```\n\n----------------------------------------\n\nTITLE: ShapeView Handler Property Mapping in C#\nDESCRIPTION: Static methods for mapping ShapeView properties including background, fill, stroke settings, and shape geometry to platform-specific implementations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: MAUI Hot Reload helper methods\nDESCRIPTION: Static helper methods for managing hot reload functionality in MAUI applications, including view registration, replacement tracking, cache management, and triggering reload operations for runtime updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_156\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.AddActiveView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.ClearCache(System.Type![]! types) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.GetReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> Microsoft.Maui.IView!\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.get -> bool\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.set -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view, Microsoft.Maui.IView! newView) -> bool\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.Register(Microsoft.Maui.HotReload.IHotReloadableView! view, params object![]! parameters) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterHandlers(Microsoft.Maui.Hosting.IMauiHandlersCollection! handlerService) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterReplacedView(string! oldViewType, System.Type! newViewType) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.Reset() -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.TriggerReload() -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.UnRegister(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.UpdateApplication(System.Type![]! types) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Grid with Row and Column Spacing in XAML\nDESCRIPTION: This snippet demonstrates how to create an empty Grid with defined row and column spacing. Even though the Grid has no children, it will still measure 10x10 due to the spacing being applied between the defined rows and columns.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<Grid RowSpacing=\"10\" ColumnSpacing=\"10\" RowDefintions=\"Auto, Auto\" ColumnDefinitions=\"Auto,Auto\" />\n```\n\n----------------------------------------\n\nTITLE: ISemanticScreenReader Announce method in MAUI\nDESCRIPTION: This method announces a given text string using the semantic screen reader. It is part of the ISemanticScreenReader interface, which is used for accessibility purposes. The method takes a string as input, which is the text to be announced, and returns void.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Accessibility.ISemanticScreenReader.Announce(string! text) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Visual Tree Element Extensions in .NET MAUI\nDESCRIPTION: Extension methods for IVisualTreeElement that provide capabilities for traversing the visual tree, finding elements at specific coordinates, and retrieving windows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualElementWindow(this Microsoft.Maui.IVisualTreeElement! element) -> Microsoft.Maui.IWindow?\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeDescendants(this Microsoft.Maui.IVisualTreeElement! visualElement) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x, double y) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x1, double y1, double x2, double y2) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Point point) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Rect rectangle) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\n```\n\n----------------------------------------\n\nTITLE: Visual Tree Element Extensions in MAUI\nDESCRIPTION: Extensions for working with visual tree elements including methods to find elements at specific coordinates and retrieve descendants.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualElementWindow(this Microsoft.Maui.IVisualTreeElement! element) -> Microsoft.Maui.IWindow?\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeDescendants(this Microsoft.Maui.IVisualTreeElement! visualElement) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x, double y) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x1, double y1, double x2, double y2) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Point point) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Rect rectangle) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI Maps Control Properties in C#\nDESCRIPTION: Static readonly property definitions that establish bindable properties for MAUI Maps controls. These properties enable functionality like item templates, map types, styling elements, pin locations, and polygon fills.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Handler configuration extensions for MAUI applications\nDESCRIPTION: Extensions for configuring custom handlers in MAUI applications, allowing registration of control-specific handlers that map cross-platform abstractions to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Apple Sign-In Authentication in Microsoft MAUI\nDESCRIPTION: This snippet implements the Apple Sign-In authenticator in MAUI, providing options for user authentication. It includes properties for including email and full name scopes, and methods for authentication and response decoding.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.get -> bool\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.set -> void\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.get -> bool\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.set -> void\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.Options() -> void\nMicrosoft.Maui.Authentication.IAppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: Geocoding API in .NET MAUI\nDESCRIPTION: Static methods for geocoding operations, including forward geocoding (address to coordinates) and reverse geocoding (coordinates to address). Provides methods to convert between addresses and geographic coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.Default.get -> Microsoft.Maui.Devices.Sensors.IGeocoding!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetPlacemarksAsync(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: Color Creation and Parsing Methods\nDESCRIPTION: Static methods for creating Color objects from various formats including RGB, RGBA, HSL, HSV and hex strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgb(byte red, byte green, byte blue) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.FromHex(string colorAsArgbHex) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Color.Parse(string value) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Geocoding APIs in MAUI C#\nDESCRIPTION: Static methods for geocoding operations, including retrieving locations from addresses and getting placemarks from coordinates or location objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.Default.get -> Microsoft.Maui.Devices.Sensors.IGeocoding!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: MainThread Utility Methods in C#\nDESCRIPTION: Static utility methods for executing code on the main thread, including synchronous and asynchronous variants with support for actions and functions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.MainThread.BeginInvokeOnMainThread(System.Action action) -> void\nstatic Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync(System.Action action) -> System.Threading.Tasks.Task\nstatic Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync<T>(System.Func<T> func) -> System.Threading.Tasks.Task<T>\n```\n\n----------------------------------------\n\nTITLE: OrientationSensor Operations in MAUI (C#)\nDESCRIPTION: Static methods and properties for working with the device's orientation sensor. Includes methods to start and stop monitoring, check support and monitoring status, and an event for reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Default.get -> Microsoft.Maui.Devices.Sensors.IOrientationSensor!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots of MAUI Views and Windows in C#\nDESCRIPTION: These methods allow capturing screenshots of MAUI views and windows, returning the result as byte arrays or IScreenshotResult objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_188\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IView! view, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IWindow! window, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\n```\n\n----------------------------------------\n\nTITLE: Defining PageHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the PageHandler class, including a command mapper, a property mapper, and methods for mapping background and title properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapBackground(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IWindow Interface in C#\nDESCRIPTION: This snippet defines the IWindow interface with methods and properties for window management in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWindow\nMicrosoft.Maui.IWindow.Activated() -> void\nMicrosoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.BackButtonClicked() -> bool\nMicrosoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void\nMicrosoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!\nMicrosoft.Maui.IWindow.Created() -> void\nMicrosoft.Maui.IWindow.Deactivated() -> void\nMicrosoft.Maui.IWindow.Destroying() -> void\nMicrosoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void\nMicrosoft.Maui.IWindow.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void\nMicrosoft.Maui.IWindow.Height.get -> double\nMicrosoft.Maui.IWindow.MaximumHeight.get -> double\nMicrosoft.Maui.IWindow.MaximumWidth.get -> double\nMicrosoft.Maui.IWindow.MinimumHeight.get -> double\nMicrosoft.Maui.IWindow.MinimumWidth.get -> double\nMicrosoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!\nMicrosoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.RequestDisplayDensity() -> float\nMicrosoft.Maui.IWindow.Resumed() -> void\nMicrosoft.Maui.IWindow.Stopped() -> void\nMicrosoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!\nMicrosoft.Maui.IWindow.Width.get -> double\nMicrosoft.Maui.IWindow.X.get -> double\nMicrosoft.Maui.IWindow.Y.get -> double\n```\n\n----------------------------------------\n\nTITLE: MainThread Operations in MAUI\nDESCRIPTION: Methods for executing code on the main UI thread both synchronously and asynchronously, with support for various delegate types and return values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.MainThread.BeginInvokeOnMainThread(System.Action action) -> void\nstatic Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync(System.Action action) -> System.Threading.Tasks.Task\nstatic Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync<T>(System.Func<T> func) -> System.Threading.Tasks.Task<T>\n```\n\n----------------------------------------\n\nTITLE: RadioButton Handler Property Mappings in C#\nDESCRIPTION: Static methods for handling RadioButton control properties including Background, CharacterSpacing, Content, CornerRadius, Font, IsChecked, and other visual properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapBackground(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Utilities in MAUI\nDESCRIPTION: Static methods for converting between different units of measurement, including temperature, pressure, distance, angular measurements, and weight conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToHertz(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToRadiansPerSecond(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesToRadians(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.FahrenheitToCelsius(double fahrenheit) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HectopascalsToKilopascals(double hpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HectopascalsToPascals(double hpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HertzToDegreesPerSecond(double hertz) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HertzToRadiansPerSecond(double hertz) -> double\nstatic Microsoft.Maui.Media.UnitConverters.InternationalFeetToMeters(double internationalFeet) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KelvinToCelsius(double kelvin) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilogramsToPounds(double kilograms) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilometersToMiles(double kilometers) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilopascalsToHectopascals(double kpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilopascalsToPascals(double kpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MetersToInternationalFeet(double meters) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MetersToUSSurveyFeet(double meters) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MilesToKilometers(double miles) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MilesToMeters(double miles) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PascalsToAtmospheres(double pascals) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToKilograms(double pounds) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToStones(double pounds) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToDegreesPerSecond(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToHertz(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansToDegrees(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.StonesToPounds(double stones) -> double\nstatic Microsoft.Maui.Media.UnitConverters.USSurveyFeetToMeters(double usFeet) -> double\n```\n\n----------------------------------------\n\nTITLE: HybridWebView: Evaluate JavaScript Async in C#\nDESCRIPTION: This method allows you to execute JavaScript code within a HybridWebView and asynchronously retrieve the result as a string. It takes a JavaScript script as input and returns a Task that resolves to a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\"\n```\n\n----------------------------------------\n\nTITLE: Slider Extensions in MAUI for Android\nDESCRIPTION: Extension methods for implementing slider controls in Android. These methods handle updating various slider properties like minimum and maximum values, track colors, and thumb colors in the Android SeekBar implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_167\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMaximum(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMaximumTrackColor(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMinimum(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMinimumTrackColor(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateThumbColor(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Colors in .NET MAUI\nDESCRIPTION: Provides a list of static readonly color fields from the Microsoft.Maui.Graphics namespace, each representing a unique color. These colors are predefined constants available for use in MAUI applications for a consistent look and feel.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.Gold -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.Indigo -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.White -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Navigation Management Virtual Methods in Microsoft.Maui.Platform\nDESCRIPTION: Virtual methods for managing navigation in the Microsoft.Maui.Platform namespace. These methods handle navigation transitions, connections between platform and MAUI navigation components, and navigation requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Platform.MauiCancelButton.OnReadyChanged() -> void\nvirtual Microsoft.Maui.Platform.NavigationRootManager.Connect(Microsoft.UI.Xaml.UIElement! platformView) -> void\nvirtual Microsoft.Maui.Platform.NavigationRootManager.Disconnect() -> void\nvirtual Microsoft.Maui.Platform.StackNavigationManager.Connect(Microsoft.Maui.IStackNavigation! navigationView, Microsoft.UI.Xaml.Controls.Frame! navigationFrame) -> void\nvirtual Microsoft.Maui.Platform.StackNavigationManager.Disconnect(Microsoft.Maui.IStackNavigation! navigationView, Microsoft.UI.Xaml.Controls.Frame! navigationFrame) -> void\nvirtual Microsoft.Maui.Platform.StackNavigationManager.GetDestinationPageType() -> System.Type!\nvirtual Microsoft.Maui.Platform.StackNavigationManager.GetNavigationTransition(Microsoft.Maui.NavigationRequest! args) -> Microsoft.UI.Xaml.Media.Animation.NavigationTransitionInfo?\nvirtual Microsoft.Maui.Platform.StackNavigationManager.NavigateTo(Microsoft.Maui.NavigationRequest! args) -> void\n```\n\n----------------------------------------\n\nTITLE: Updating Tizen SkiaGraphicsView for MAUI GraphicsView\nDESCRIPTION: This extension method updates the drawable content of a Tizen SkiaGraphicsView to match the MAUI IGraphicsView. It enables custom drawing in MAUI applications on the Tizen platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.GraphicsViewExtensions.UpdateDrawable(this Microsoft.Maui.Graphics.Skia.Views.SkiaGraphicsView! platformGraphicsView, Microsoft.Maui.IGraphicsView! graphicsView) -> void\n```\n\n----------------------------------------\n\nTITLE: Blend Modes in Microsoft.Maui (C#)\nDESCRIPTION: Defines various blend modes that determine how graphical layers are composited in the Microsoft.Maui.Graphics library. Each mode represents a different method of blending colors from layers, enabling effects such as darkening, lighting, overlay, and multiplication.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode.Clear = 16 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Color = 14 -> Microsoft.Maui.Graphics.BlendMode\n// Additional blend modes\nMicrosoft.Maui.Graphics.BlendMode.Xor = 25 -> Microsoft.Maui.Graphics.BlendMode\n```\n\n----------------------------------------\n\nTITLE: SearchView Extensions in MAUI for Android\nDESCRIPTION: Extension methods for implementing SearchBar functionality in Android using SearchView. These methods manage a wide range of properties including cancel button color, font, enabled state, spell check, text prediction, keyboard type, text length limits, placeholders, and text alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_164\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateCancelButtonColor(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateFont(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Microsoft.Maui.IFontManager! fontManager, Android.Widget.EditText? editText = null) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateIsEnabled(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Android.Widget.EditText? editText = null) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateIsReadOnly(this Android.Widget.EditText! editText, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateIsSpellCheckEnabled(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Android.Widget.EditText? editText = null) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateIsTextPredictionEnabled(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Android.Widget.EditText? editText = null) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateKeyboard(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateMaxLength(this AndroidX.AppCompat.Widget.SearchView! searchView, int maxLength, Android.Widget.EditText? editText) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateMaxLength(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Android.Widget.EditText? editText) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateMaxLength(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdatePlaceholder(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdatePlaceholderColor(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Android.Content.Res.ColorStateList? defaultPlaceholderColor, Android.Widget.EditText? editText = null) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateText(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateVerticalTextAlignment(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar, Android.Widget.EditText? editText) -> void\nstatic Microsoft.Maui.Platform.SearchViewExtensions.UpdateVerticalTextAlignment(this AndroidX.AppCompat.Widget.SearchView! searchView, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Opening a URI using Microsoft MAUI\nDESCRIPTION: The 'OpenAsync' method allows developers to open a specified URI or initiate an open file request. A URI or OpenFileRequest object can be passed, and the method returns a Task boolean indicating success or failure. This function promotes interoperability with other applications or system features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Accessing Battery Information in MAUI C# Applications\nDESCRIPTION: Static methods to access battery information including power source, state, and energy saver status changes in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nstatic Microsoft.Maui.Devices.Battery.State.get -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: Convert and Manipulate Graphics Coordinates in C#\nDESCRIPTION: These methods provide conversion utilities for graphic elements between Microsoft.Maui.Graphics and SkiaSharp. It includes functions for converting between structures like Matrix3x2, SKPoint, SKRect, and SKSize to their Maui equivalents, facilitating graphic manipulations and coordinate transformations. Dependencies encompass Microsoft.Maui.Graphics and SkiaSharp namespaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsMatrix(this in System.Numerics.Matrix3x2 transform) -> SkiaSharp.SKMatrix\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsPointF(this SkiaSharp.SKPoint target) -> Microsoft.Maui.Graphics.PointF\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsRectangleF(this SkiaSharp.SKRect target) -> Microsoft.Maui.Graphics.RectF\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSize(this SkiaSharp.SKSize target) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSizeF(this Microsoft.Maui.Graphics.SizeF target) -> SkiaSharp.SKSize\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSKRect(this Microsoft.Maui.Graphics.RectF target) -> SkiaSharp.SKRect\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToSKPoint(this Microsoft.Maui.Graphics.PointF target) -> SkiaSharp.SKPoint\n```\n\n----------------------------------------\n\nTITLE: ScrollToRequest Class in C#\nDESCRIPTION: Definition of ScrollToRequest class which encapsulates scroll position information and animation preferences for scrolling operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollToRequest\nMicrosoft.Maui.ScrollToRequest.HorizontalOffset.get -> double\nMicrosoft.Maui.ScrollToRequest.HorizontalOffset.init -> void\nMicrosoft.Maui.ScrollToRequest.Instant.get -> bool\nMicrosoft.Maui.ScrollToRequest.Instant.init -> void\nMicrosoft.Maui.ScrollToRequest.ScrollToRequest(double HorizontalOffset, double VerticalOffset, bool Instant) -> void\nMicrosoft.Maui.ScrollToRequest.VerticalOffset.get -> double\nMicrosoft.Maui.ScrollToRequest.VerticalOffset.init -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI XAML Extensions API Signatures\nDESCRIPTION: Collection of method and property signatures for various XAML extensions used in .NET MAUI, including AppThemeBinding, Array, Binding, DataTemplate, DynamicResource, FontImage, and platform-specific extensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n```\n\n----------------------------------------\n\nTITLE: Saving Images Asynchronously in .NET MAUI\nDESCRIPTION: This method saves an image to a provided stream asynchronously. It allows specifying the image format and quality. The default format is PNG with a quality setting ranging from 0 to 1.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: WebViewHandler mapping methods in Microsoft.Maui\nDESCRIPTION: Static methods for mapping properties and actions between MAUI WebView abstractions and platform implementations. These methods handle operations like reloading content, setting the source, configuring user agent, and WKUIDelegate for iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapReload(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapUserAgent(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapWKUIDelegate(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Status in Microsoft MAUI\nDESCRIPTION: This snippet defines the permission status enumeration in MAUI, categorizing different states of permissions including Denied, Disabled, Granted, Limited, Restricted, and Unknown.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Denied = 1 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Granted = 3 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Limited = 5 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\n----------------------------------------\n\nTITLE: MAUI Interface: IWebView Navigation\nDESCRIPTION: Interface defining web view navigation methods including forward/back navigation, JavaScript evaluation, and navigation event tracking\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Thickness Implicit Operators and Arithmetic Operators in C#\nDESCRIPTION: Defines implicit conversion operators and arithmetic operators for the Thickness struct in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(double uniformSize) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator -(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator !=(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool\nstatic Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator ==(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool\n```\n\n----------------------------------------\n\nTITLE: HybridWebView: Invoke JavaScript Async with Return Type in C#\nDESCRIPTION: This method allows you to execute a JavaScript method within a HybridWebView and asynchronously retrieve the result. It takes the method name, a JsonTypeInfo for the return type and optionally, parameter values and their JsonTypeInfos.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.HybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform View Creation in .NET MAUI Android Handlers\nDESCRIPTION: These method signatures show how different .NET MAUI UI handlers override the CreatePlatformView method to instantiate Android-specific native controls. Each handler is responsible for creating the appropriate Android view that corresponds to a MAUI cross-platform control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.DatePickerHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiDatePicker!\noverride Microsoft.Maui.Handlers.EditorHandler.CreatePlatformView() -> AndroidX.AppCompat.Widget.AppCompatEditText!\noverride Microsoft.Maui.Handlers.EntryHandler.CreatePlatformView() -> AndroidX.AppCompat.Widget.AppCompatEditText!\noverride Microsoft.Maui.Handlers.FlyoutViewHandler.CreatePlatformView() -> Android.Views.View!\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!\noverride Microsoft.Maui.Handlers.ImageButtonHandler.CreatePlatformView() -> Google.Android.Material.ImageView.ShapeableImageView!\noverride Microsoft.Maui.Handlers.ImageHandler.CreatePlatformView() -> Android.Widget.ImageView!\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPageControl!\noverride Microsoft.Maui.Handlers.LabelHandler.CreatePlatformView() -> AndroidX.AppCompat.Widget.AppCompatTextView!\noverride Microsoft.Maui.Handlers.LayoutHandler.CreatePlatformView() -> Microsoft.Maui.Platform.LayoutViewGroup!\n```\n\n----------------------------------------\n\nTITLE: Defining Flex Layout Properties in Microsoft MAUI\nDESCRIPTION: This snippet outlines various properties related to flex layout alignment and behavior in Microsoft MAUI, including alignment content, alignment items, and justification properties, facilitating responsive UI development.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.End = 4 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignItems.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.End = 4 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignSelf.Auto = 0 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.End = 4 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\n----------------------------------------\n\nTITLE: Map Control Class Definition (C#)\nDESCRIPTION: The main Map control class in .NET MAUI for displaying interactive maps. It provides properties for configuration, collections for pins and map elements, and methods for interacting with the map.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Map\nMicrosoft.Maui.Controls.Maps.Map.Map() -> void\nMicrosoft.Maui.Controls.Maps.Map.Map(Microsoft.Maui.Maps.MapSpan! region) -> void\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemsSource.get -> System.Collections.IEnumerable!\nMicrosoft.Maui.Controls.Maps.Map.ItemsSource.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplate.get -> Microsoft.Maui.Controls.DataTemplate!\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplate.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplateSelector.get -> Microsoft.Maui.Controls.DataTemplateSelector!\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplateSelector.set -> void\nMicrosoft.Maui.Controls.Maps.Map.MapClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.MapClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Map.MapElements.get -> System.Collections.Generic.IList<Microsoft.Maui.Controls.Maps.MapElement!>!\nMicrosoft.Maui.Controls.Maps.Map.MapType.get -> Microsoft.Maui.Maps.MapType\nMicrosoft.Maui.Controls.Maps.Map.MapType.set -> void\nMicrosoft.Maui.Controls.Maps.Map.MoveToRegion(Microsoft.Maui.Maps.MapSpan! mapSpan) -> void\nMicrosoft.Maui.Controls.Maps.Map.Pins.get -> System.Collections.Generic.IList<Microsoft.Maui.Controls.Maps.Pin!>!\nMicrosoft.Maui.Controls.Maps.Map.VisibleRegion.get -> Microsoft.Maui.Maps.MapSpan?\nMicrosoft.Maui.Controls.Maps.Map.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Maps.IMapPin!>!\noverride Microsoft.Maui.Controls.Maps.Map.OnHandlerChanged() -> void\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsScrollEnabledProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsShowingUserProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsTrafficEnabledProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsZoomEnabledProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemsSourceProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Initializing Generic ElementHandler in MAUI\nDESCRIPTION: Initializes a generic `ElementHandler<TVirtualView, TPlatformView>` in MAUI with a property mapper and an optional command mapper. It establishes the connection between a MAUI virtual view and its corresponding platform-specific view, enabling property mapping and command execution.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!\"\n```\n\n----------------------------------------\n\nTITLE: Animation and Easing Constants in .NET MAUI\nDESCRIPTION: Static readonly fields for standard easing functions and animation settings in MAUI applications, including bounce, cubic, sine, and spring animations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Animations.Lerp.Lerps -> System.Collections.Generic.Dictionary<System.Type!, Microsoft.Maui.Animations.Lerp!>!\nstatic readonly Microsoft.Maui.Easing.BounceIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.BounceOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicInOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.Linear -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinInOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SpringIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SpringOut -> Microsoft.Maui.Easing!\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Paints and Manipulating Stops in C#\nDESCRIPTION: This section describes abstract methods for handling gradient paints in the Microsoft.Maui.Graphics framework. The methods include managing color stops, blending colors, and retrieving gradient stops. These capabilities are crucial for rendering gradient effects in graphical user interfaces, providing smooth color transitions. Developers must implement these methods to tailor gradient displays appropriately.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.GradientPaint.AddOffset(float offset, Microsoft.Maui.Graphics.Color color) -> void\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors() -> Microsoft.Maui.Graphics.Color\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.GradientPaint.GradientStops.get -> Microsoft.Maui.Graphics.PaintGradientStop[]\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.GradientPaint.GetSortedStops() -> Microsoft.Maui.Graphics.PaintGradientStop[]\"\n```\n\n----------------------------------------\n\nTITLE: WebView Extensions for MAUI Platform\nDESCRIPTION: Extension methods specific to WebView components in MAUI. These methods handle web navigation, JavaScript evaluation, source updates, and user agent configuration for the platform-specific WebView implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.WebViewExtensions.EvaluateJavaScript(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.EvaluateJavaScriptAsyncRequest! request) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateGoBack(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateGoForward(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateReload(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.IWebView! webView, Microsoft.Maui.IWebViewDelegate? webViewDelegate) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateUserAgent(this Microsoft.Maui.Platform.MauiWebView! platformWebView, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: Interface for Media Picker in C#\nDESCRIPTION: The IMediaPicker interface provides methods to capture and pick media, such as photos and videos, with support for option customization and checking feature support in Microsoft Maui.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.IMediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Media.IMediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Media.IMediaPicker.IsCaptureSupported.get -> bool\nMicrosoft.Maui.Media.IMediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Media.IMediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n\n```\n\n----------------------------------------\n\nTITLE: MAUI App Host Builder Extension Methods\nDESCRIPTION: Extension methods for configuring MAUI applications using the app host builder pattern. Includes methods for adding control handlers and initializing MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiControlsHandlers(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Hot Reload Functionality in MAUI\nDESCRIPTION: Static methods and extensions for implementing hot reload functionality in MAUI applications. These methods handle view registration, updates, and management during hot reload scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.AddActiveView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.ClearCache(System.Type![]! types) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.GetReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> Microsoft.Maui.IView!\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.get -> bool\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Tree Element Extension Methods in C#\nDESCRIPTION: Extension methods for IVisualTreeElement to retrieve visual tree information, including descendants and elements at specific coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualElementWindow(this Microsoft.Maui.IVisualTreeElement! element) -> Microsoft.Maui.IWindow?\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeDescendants(this Microsoft.Maui.IVisualTreeElement! visualElement) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x, double y) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, double x1, double y1, double x2, double y2) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Point point) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nstatic Microsoft.Maui.VisualTreeElementExtensions.GetVisualTreeElements(this Microsoft.Maui.IVisualTreeElement! visualElement, Microsoft.Maui.Graphics.Rect rectangle) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas State Management and Transformation Methods in C#\nDESCRIPTION: Method signatures for managing canvas state and applying transformations. These methods allow saving and restoring canvas state, applying rotations, translations, and scaling to the drawing context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.ResetState() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.RestoreState() -> bool\nMicrosoft.Maui.Graphics.PictureCanvas.SaveState() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Rotate(float degrees) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Translate(float tx, float ty) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.SubtractFromClip(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Device Information Access in MAUI C# Applications\nDESCRIPTION: Static methods to access device information like manufacturer, model, platform, and version in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceInfo.Current.get -> Microsoft.Maui.Devices.IDeviceInfo!\nstatic Microsoft.Maui.Devices.DeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nstatic Microsoft.Maui.Devices.DeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceInfo.Manufacturer.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Model.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Name.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DeviceInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.Devices.DeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI Maps Control Bindable Properties in C#\nDESCRIPTION: Declares static readonly bindable properties for MAUI Maps controls including Map configuration, Pin attributes, MapElement styling, and Polygon fill properties. These properties enable data binding and styling of map components.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Stroke Extension Methods in MAUI\nDESCRIPTION: Extension methods for ContentPanel to handle border stroke properties including dash pattern, line cap, line join, and thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStroke(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashOffset(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashPattern(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining UI View Interfaces in .NET MAUI\nDESCRIPTION: Interface definitions for core view properties and methods in the Microsoft .NET MAUI framework, covering layout, transformation, and interaction capabilities\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IView.Arrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Defining PathF Class Methods in C#\nDESCRIPTION: Class for creating and manipulating paths in MAUI graphics, with methods for appending various shapes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.AppendCircle(float cx, float cy, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendCircle(Microsoft.Maui.Graphics.PointF center, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(Microsoft.Maui.Graphics.RectF rect) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(float x, float y, float w, float h, bool includeLast = false) -> void\n```\n\n----------------------------------------\n\nTITLE: Image Creation from Stream in SkiaSharp\nDESCRIPTION: This snippet initializes images using streams with a hint for image format, defaulting to PNG if not specified. It's part of the SkiaSharp extension methods to handle the IImage interface within .NET MAUI, relying on standard IO stream operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SkiaImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Defining SearchBarHandler Mappers and Methods in MAUI (C#)\nDESCRIPTION: Static properties and methods for the SearchBarHandler, including command and property mappers, and methods for mapping various properties such as background, cancel button color, character spacing, font, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Navigation and Graphics Overrides in .NET MAUI for Android\nDESCRIPTION: Method overrides for navigation fragments and graphics views in MAUI's Android implementation. These methods handle fragment lifecycle, view creation, and touch/hover events for graphics components to ensure consistent behavior across platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.NavigationViewFragment.OnCreateAnimation(int transit, bool enter, int nextAnim) -> Android.Views.Animations.Animation!\noverride Microsoft.Maui.Platform.NavigationViewFragment.OnCreateView(Android.Views.LayoutInflater! inflater, Android.Views.ViewGroup? container, Android.OS.Bundle? savedInstanceState) -> Android.Views.View!\noverride Microsoft.Maui.Platform.NavigationViewFragment.OnDestroy() -> void\noverride Microsoft.Maui.Platform.NavigationViewFragment.OnResume() -> void\noverride Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnHoverEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnLayout(bool changed, int left, int top, int right, int bottom) -> void\noverride Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnTouchEvent(Android.Views.MotionEvent? e) -> bool\n```\n\n----------------------------------------\n\nTITLE: Platform Image Creation from Stream\nDESCRIPTION: Static method to create a platform-specific image from a stream. This method supports various image formats with PNG as the default format hint.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.PlatformImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI Maps Control Properties in C#\nDESCRIPTION: Static readonly property declarations that define bindable properties for MAUI Maps controls. These properties enable data binding and property change notifications for map-related functionality including item templates, map types, styling, pin locations, and polygon fills.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Path Manipulation Extensions\nDESCRIPTION: Extensions for path creation and manipulation, including SVG path parsing and scaling operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic void DrawArc(this PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation);\nstatic PathF AsScaledPath(this PathF target, float scale);\nstatic string ToDefinitionString(this PathF path, float ppu = 1);\n```\n\n----------------------------------------\n\nTITLE: Image Handling Extensions in MAUI (C#)\nDESCRIPTION: A set of extension methods for handling images in the MAUI framework. These include converting images to base64 string, byte arrays, and streams, as well as setting images to be filled in graphics contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.ImageExtensions.AsBase64(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> string\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.ImageExtensions.AsBytes(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> byte[]\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.ImageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task<byte[]>\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.ImageExtensions.AsPaint(this Microsoft.Maui.Graphics.IImage target) -> Microsoft.Maui.Graphics.Paint\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.ImageExtensions.AsStream(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.IO.Stream\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.ImageExtensions.SetFillImage(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.IImage image) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Handler Configuration Extensions\nDESCRIPTION: Static extension methods for configuring MAUI handlers that manage platform-specific implementations of cross-platform UI components. These methods are essential for dependency injection and customization of handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: IWebViewDelegate and IWebViewSource Interface Members in .NET MAUI\nDESCRIPTION: Members of WebView-related interfaces for handling content loading in web views. IWebViewDelegate allows loading HTML or URLs, while IWebViewSource represents a content source that can be loaded into a web view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWebViewDelegate\nMicrosoft.Maui.IWebViewDelegate.LoadHtml(string? html, string? baseUrl) -> void\nMicrosoft.Maui.IWebViewDelegate.LoadUrl(string? url) -> void\nMicrosoft.Maui.IWebViewSource\nMicrosoft.Maui.IWebViewSource.Load(Microsoft.Maui.IWebViewDelegate! webViewDelegate) -> void\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture in MAUI (C#)\nDESCRIPTION: Static methods for capturing screenshots. Includes methods to check capture support and to initiate capture operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!\nstatic Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Dispatcher Methods and Extensions in C#\nDESCRIPTION: Implements static methods and extensions for the Dispatcher class, including methods for asynchronous dispatch, timer creation, and synchronization context retrieval.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.Dispatcher.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void\n```\n\n----------------------------------------\n\nTITLE: Handler Implementation Methods in .NET MAUI\nDESCRIPTION: Virtual methods for UI element handlers that connect MAUI virtual views to platform-specific implementations, including element handlers and specialized view handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_154\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.CommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?\nvirtual Microsoft.Maui.Handlers.ButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ElementHandler.Invoke(string! command, object? args) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.UpdateValue(string! property) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ImageButtonHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\n```\n\n----------------------------------------\n\nTITLE: Semantic Accessibility Extensions in MAUI for Android\nDESCRIPTION: Extension methods for implementing accessibility semantics in Android views. These methods update semantic node information and manage accessibility properties for MAUI views in the Android platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_165\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SemanticExtensions.UpdateSemanticNodeInfo(this Android.Views.View! platformView, Microsoft.Maui.IView! virtualView, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? info) -> void\nstatic Microsoft.Maui.Platform.SemanticExtensions.UpdateSemantics(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Image from Stream in .NET MAUI\nDESCRIPTION: This method creates an IImage instance from a given stream, allowing for specifying the image format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IImageLoadingService.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Image Source Loading and Service Extensions in MAUI\nDESCRIPTION: These extension methods facilitate image loading and image source service handling in MAUI applications. They provide utilities for loading images through a MAUI context and retrieving appropriate image source services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.LoadImage(this Microsoft.Maui.IImageSource? source, Microsoft.Maui.IMauiContext! mauiContext, System.Action<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>? finished = null) -> void\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService?\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService?\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService!\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, System.Type! imageSourceType) -> Microsoft.Maui.IImageSourceService!\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService!\n```\n\n----------------------------------------\n\nTITLE: Browser Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for the IBrowser interface to provide simpler ways to open web content. These methods extend the IBrowser interface with convenience methods that accept string or Uri parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Evaluating JavaScript in HybridWebView\nDESCRIPTION: Methods for executing JavaScript code within the HybridWebView and retrieving results asynchronously. These methods allow for communication between C# and JavaScript in a hybrid MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\n```\n\n----------------------------------------\n\nTITLE: Clipboard Functionality in .NET MAUI\nDESCRIPTION: Static methods to access and manipulate the device clipboard. These methods allow checking for text content, getting and setting text, and subscribing to clipboard change events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.HasText.get -> bool\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining HybridWebView Class in MAUI Controls\nDESCRIPTION: Defines the HybridWebView class which provides a customizable web view component that allows JavaScript interaction and custom file loading. It enables sending messages between .NET and JavaScript code.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.set -> void\nMicrosoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.set -> void\nMicrosoft.Maui.Controls.HybridWebView.HybridWebView() -> void\nMicrosoft.Maui.Controls.HybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\nMicrosoft.Maui.Controls.HybridWebView.RawMessageReceived -> System.EventHandler<Microsoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs!>?\nMicrosoft.Maui.Controls.HybridWebView.SendRawMessage(string! rawMessage) -> void\n```\n\n----------------------------------------\n\nTITLE: Location Extension Methods for Distance Calculation in C#\nDESCRIPTION: Extension methods for the Location class to calculate distances between locations using various parameter combinations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.LocationExtensions.CalculateDistance(this Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.LocationExtensions.CalculateDistance(this Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Creating an Embedded Window Context in .NET MAUI\nDESCRIPTION: This static extension method creates an embedded window context for a MauiApp, assisting in the UI component integration within the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.CreateEmbeddedWindowContext(this Microsoft.Maui.Hosting.MauiApp! mauiApp, UIKit.UIWindow! platformWindow) -> Microsoft.Maui.IMauiContext!\n```\n\n----------------------------------------\n\nTITLE: MAUI Dispatcher Implementation\nDESCRIPTION: Core dispatcher functionality for managing UI thread operations and timers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Dispatching.Dispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!\nMicrosoft.Maui.Dispatching.Dispatcher.Dispatch(System.Action! action) -> bool\nMicrosoft.Maui.Dispatching.Dispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool\nMicrosoft.Maui.Dispatching.Dispatcher.IsDispatchRequired.get -> bool\n```\n\n----------------------------------------\n\nTITLE: DatePicker Handler Methods in MAUI\nDESCRIPTION: Static methods for DatePickerHandler that map date picker properties like date range, format, and styling between MAUI date picker abstractions and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IGeolocation Interface in C#\nDESCRIPTION: Defines the IGeolocation interface with methods and properties for accessing device location services in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGeolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Abstract Canvas Methods in C# for .NET MAUI Graphics\nDESCRIPTION: This snippet shows the declaration of abstract methods in the Microsoft.Maui.Graphics.AbstractCanvas<TState> class. These methods define various drawing operations that must be implemented by concrete canvas classes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillEllipse(float x, float y, float width, float height) -> void\n// ... more abstract method declarations\n```\n\n----------------------------------------\n\nTITLE: Configuring SearchBar Mapper and Handler in C# for MAUI\nDESCRIPTION: Static properties and methods for configuring the command mapper, property mapper, and mapping various properties of a SearchBar control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Preferences in MAUI (C#)\nDESCRIPTION: These methods set values of different types in the Preferences storage. They accept a key, a value, and an optional shared name. The methods store the provided value associated with the given key.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void\n```\n\n----------------------------------------\n\nTITLE: Text and Attributed String Extensions for iOS in .NET MAUI\nDESCRIPTION: Extensions for handling NSAttributedString operations in iOS applications, including applying character spacing, text decorations, and line height. These methods enhance the text rendering capabilities by applying advanced formatting to text elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.TrimToMaxLength(this Foundation.NSAttributedString? attributedString, int maxLength) -> Foundation.NSAttributedString?\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.WithCharacterSpacing(this Foundation.NSAttributedString! attributedString, double characterSpacing) -> Foundation.NSMutableAttributedString?\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.WithDecorations(this Foundation.NSAttributedString! attributedString, Microsoft.Maui.TextDecorations decorations) -> Foundation.NSMutableAttributedString?\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.WithLineHeight(this Foundation.NSAttributedString! attributedString, double lineHeight) -> Foundation.NSMutableAttributedString?\n```\n\n----------------------------------------\n\nTITLE: Handling File Picking in .NET MAUI\nDESCRIPTION: This snippet defines classes associated with file picking functionality, including the FilePicker and FilePickerFileType. It includes constructors for initializing the file picker and methods for specifying accepted file types. This functionality is critical for applications that require user interaction to select files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Storage.FilePicker\nMicrosoft.Maui.Storage.FilePickerFileType\nMicrosoft.Maui.Storage.FilePickerFileType.FilePickerFileType() -> void\nMicrosoft.Maui.Storage.FilePickerFileType.FilePickerFileType(System.Collections.Generic.IDictionary<Microsoft.Maui.Devices.DevicePlatform, System.Collections.Generic.IEnumerable<string!>!>! fileTypes) -> void\nMicrosoft.Maui.Storage.FilePickerFileType.Value.get -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Defining PathF Methods for Shape Manipulation in MAUI\nDESCRIPTION: This snippet covers various methods for appending shapes like circles, ellipses, and rectangles to a path, as well as managing points and operations for advanced path manipulation in MAUI graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF.AppendCircle(float cx, float cy, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(float x, float y, float w, float h, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.Close() -> void\nMicrosoft.Maui.Graphics.PathF.Move(float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.PathF() -> void\nMicrosoft.Maui.Graphics.PathF.RemoveSegment(int segmentIndex) -> void\n```\n\n----------------------------------------\n\nTITLE: Media Picking and Capturing in C# MAUI\nDESCRIPTION: Static methods for capturing photos and videos, and picking media files from the device. Includes asynchronous operations for media capture and selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!\nstatic Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Class Constructors in C#\nDESCRIPTION: This snippet shows various constructor overloads for the Color class in the Microsoft.Maui.Graphics namespace, allowing color creation using different parameter combinations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.Color() -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue, byte alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(float gray) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue, float alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(int red, int green, int blue, int alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(int red, int green, int blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(System.Numerics.Vector4 color) -> void\n```\n\n----------------------------------------\n\nTITLE: Image Handler Method Declarations - .NET MAUI C#\nDESCRIPTION: Static method declarations for handling image properties and commands in MAUI applications. Includes mappings for source, aspect ratio, background, and animation properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapBackground(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Overridden Methods for Text-Related Classes in MAUI Graphics\nDESCRIPTION: Overridden methods for text-related classes in the Microsoft.Maui.Graphics.Text namespace, including property accessors and string representations. These methods handle attributed text runs, blocks, and text writers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Text.AttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n~override Microsoft.Maui.Graphics.Text.AttributedText.Text.get -> string\n~override Microsoft.Maui.Graphics.Text.AttributedTextBlock.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.AttributedTextRun.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.CountingWriter.Encoding.get -> System.Text.Encoding\n~override Microsoft.Maui.Graphics.Text.CountingWriter.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: ContentView Handler Mapping Methods in C#\nDESCRIPTION: Methods for mapping content view properties to native controls. These handle content management for containers in the MAUI UI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ContentViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!\nstatic Microsoft.Maui.Handlers.ContentViewHandler.MapContent(Microsoft.Maui.Handlers.IContentViewHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.ContentViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: iOS Text and Attributed String Extensions in .NET MAUI\nDESCRIPTION: Extension methods for handling text styling and attributed strings in iOS. These methods help apply MAUI text properties like character spacing and decorations to native iOS attributed strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.TrimToMaxLength(this Foundation.NSAttributedString? attributedString, int maxLength) -> Foundation.NSAttributedString?\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.WithCharacterSpacing(this Foundation.NSAttributedString! attributedString, double characterSpacing) -> Foundation.NSMutableAttributedString?\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.WithDecorations(this Foundation.NSAttributedString! attributedString, Microsoft.Maui.TextDecorations decorations) -> Foundation.NSMutableAttributedString?\nstatic Microsoft.Maui.Platform.AttributedStringExtensions.WithLineHeight(this Foundation.NSAttributedString! attributedString, double lineHeight) -> Foundation.NSMutableAttributedString?\n```\n\n----------------------------------------\n\nTITLE: Constructing SkiaTextLayout with Optional Parameters in C#\nDESCRIPTION: The constructor initializes a SkiaTextLayout object with various parameters, including a string value, a rectangle area, and text attributes, essential for managing text layout in SkiaSharp. This setup supports optional arguments for text flow and font management, enhancing flexibility in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing App Actions and Info in C#\nDESCRIPTION: These code snippets manage application actions and information access through interfaces like IAppActions and IAppInfo. They include methods for checking and setting app actions and retrieving app information such as version, package name, and theme. Dependencies may include event handlers and actions relevant to app lifecycle management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.AppActionActivated -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.IsSupported.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.BuildString.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Name.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackageName.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.ShowSettingsUI() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining Element Handler Base Class in C# for MAUI\nDESCRIPTION: This snippet defines the ElementHandler base class and its generic version. It provides core functionality for handling elements in MAUI, including access to the virtual view, platform view, and services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ElementHandler\nMicrosoft.Maui.Handlers.ElementHandler.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?\nMicrosoft.Maui.Handlers.ElementHandler.PlatformView.get -> object?\nMicrosoft.Maui.Handlers.ElementHandler.Services.get -> System.IServiceProvider?\nMicrosoft.Maui.Handlers.ElementHandler.VirtualView.get -> Microsoft.Maui.IElement?\n\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!\n```\n\n----------------------------------------\n\nTITLE: Accessing AppInfo Properties in C#\nDESCRIPTION: Static properties and methods to access application information such as package model, layout direction, theme, version, and settings UI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nstatic Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Rectangle in C# using MAUI Graphics\nDESCRIPTION: These methods extend the ICanvas interface to draw rounded rectangles with various corner radius options. They allow for drawing rectangles with uniform or individual corner radii.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Type Conversion Extensions in .NET MAUI\nDESCRIPTION: Extension methods for converting between MAUI types and iOS native types. These methods handle conversions for colors, geometry, dates, and other common types used in cross-platform UI development.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_171\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.AspectExtensions.ToUIViewContentMode(this Microsoft.Maui.Aspect aspect) -> UIKit.UIViewContentMode\nstatic Microsoft.Maui.Platform.ColorExtensions.FromPatternImageFromBundle(string! bgImage) -> UIKit.UIColor!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToCGColor(this Microsoft.Maui.Graphics.Color! color) -> CoreGraphics.CGColor!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToColor(this UIKit.UIColor! color) -> Microsoft.Maui.Graphics.Color?\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color! color) -> UIKit.UIColor!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color? color, Microsoft.Maui.Graphics.Color? defaultColor) -> UIKit.UIColor?\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color? color, UIKit.UIColor! defaultColor) -> UIKit.UIColor!\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.IsCloseTo(this CoreGraphics.CGSize size0, CoreGraphics.CGSize size1, System.Runtime.InteropServices.NFloat tolerance) -> bool\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToCGRect(this Microsoft.Maui.Graphics.Rect rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToCGSize(this Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToPoint(this CoreGraphics.CGPoint size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToRectangle(this CoreGraphics.CGRect rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToSize(this CoreGraphics.CGSize size) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Platform.DateExtensions.ToDateTime(this Foundation.NSDate! date) -> System.DateTime\nstatic Microsoft.Maui.Platform.DateExtensions.ToNSDate(this System.DateTime date) -> Foundation.NSDate!\n```\n\n----------------------------------------\n\nTITLE: WindowHandler mapping methods and properties in Microsoft.Maui\nDESCRIPTION: Static methods and properties for handling window operations in MAUI, including mapping window content, dimensions, position, title, and menu configurations between cross-platform abstractions and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMaximumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMaximumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMenuBar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMinimumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMinimumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapRequestDisplayDensity(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window, object? args) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapTitle(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapX(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapY(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API - Drawing Methods\nDESCRIPTION: Defines abstract drawing operations for the AbstractCanvas<TState> class, including methods for drawing lines, rectangles, arcs, and ellipses.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformDrawEllipse(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing MAUI Handlers Collection\nDESCRIPTION: Extension methods for managing handlers in a MAUI application. These methods provide ways to add and try to add handlers for different view types with varying levels of type safety.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.TryAddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture in MAUI (C#)\nDESCRIPTION: Provides static methods for capturing screenshots, checking capture support, and accessing the default screenshot instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!\nstatic Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Device Information API in MAUI\nDESCRIPTION: Static properties for accessing device information such as platform type, manufacturer, model, and device characteristics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceInfo.Manufacturer.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Model.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\n----------------------------------------\n\nTITLE: Color Conversions using Microsoft.Maui.Graphics\nDESCRIPTION: This segment showcases an array of methods for creating Color objects from various color representations including ARGB, Hex, HSLA, HSV, RGB, and RGBA. It encompasses conversions using integers, bytes, and strings to facilitate color manipulations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromArgb(string colorAsHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHex(string colorAsArgbHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsla(double h, double s, double l, double a = 1) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsla(float h, float s, float l, float a = 1) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsv(float h, float s, float v) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsv(int h, int s, int v) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsva(float h, float s, float v, float a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromHsva(int h, int s, int v, int a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromInt(int argb) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgb(byte red, byte green, byte blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgb(double red, double green, double blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgb(float red, float green, float blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgb(int red, int green, int blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgba(byte red, byte green, byte blue, byte alpha) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgba(double r, double g, double b, double a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgba(float r, float g, float b, float a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgba(int red, int green, int blue, int alpha) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromRgba(string colorAsHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.FromUint(uint argb) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Implementing IBlazorWebView Interface in C# for .NET MAUI\nDESCRIPTION: Defines the IBlazorWebView interface with methods and properties for Blazor WebView functionality in MAUI. Includes initialization methods, file provider creation, and component management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.BlazorWebViewInitialized(Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs! args) -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.BlazorWebViewInitializing(Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializingEventArgs! args) -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.CreateFileProvider(string! contentRootDir) -> Microsoft.Extensions.FileProviders.IFileProvider!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.HostPage.get -> string?\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.JSComponents.get -> Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.RootComponents.get -> Microsoft.AspNetCore.Components.WebView.Maui.RootComponentsCollection!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.StartPath.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.StartPath.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.UrlLoading(Microsoft.AspNetCore.Components.WebView.UrlLoadingEventArgs! args) -> void\n```\n\n----------------------------------------\n\nTITLE: Animation Lerp Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for linear interpolation (lerp) between various value types used in animations. These methods calculate intermediate values between start and end points based on a progress value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.GenericLerp<T>(this T start, T end, double progress, double toggleThreshold = 0.5) -> T\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float start, float end, double progress) -> float\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float? start, float? end, double progress) -> float?\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Point start, Microsoft.Maui.Graphics.Point end, double progress) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.PointF start, Microsoft.Maui.Graphics.PointF end, double progress) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Rect start, Microsoft.Maui.Graphics.Rect end, double progress) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.RectF start, Microsoft.Maui.Graphics.RectF end, double progress) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Size start, Microsoft.Maui.Graphics.Size end, double progress) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SizeF start, Microsoft.Maui.Graphics.SizeF end, double progress) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SolidPaint! paint, Microsoft.Maui.Graphics.SolidPaint! endPaint, double progress) -> Microsoft.Maui.Graphics.SolidPaint!\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Thickness start, Microsoft.Maui.Thickness end, double progress) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Animations.Lerp.GetLerp(System.Type! type) -> Microsoft.Maui.Animations.Lerp?\n```\n\n----------------------------------------\n\nTITLE: Input Handling Extensions in MAUI for Android\nDESCRIPTION: Extension methods that convert MAUI input types to Android-specific input types. These methods handle keyboard types, IME actions, and measurement specifications for proper input handling on Android.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_159\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ImeActionExtensions.ToPlatform(this Microsoft.Maui.ReturnType returnType) -> Android.Views.InputMethods.ImeAction\nstatic Microsoft.Maui.Platform.KeyboardExtensions.ToInputType(this Microsoft.Maui.Keyboard! self) -> Android.Text.InputTypes\nstatic Microsoft.Maui.Platform.LayoutViewGroupExtensions.UpdateClipsToBounds(this Microsoft.Maui.Platform.LayoutViewGroup! layoutViewGroup, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Platform.LocalizedDigitsKeyListener.Create(Android.Text.InputTypes inputTypes) -> Android.Text.Method.NumberKeyListener!\nstatic Microsoft.Maui.Platform.LocalizedDigitsKeyListener.GetInstance(Android.Text.InputTypes inputTypes, char decimalSeparator) -> Microsoft.Maui.Platform.LocalizedDigitsKeyListener!\n```\n\n----------------------------------------\n\nTITLE: Control Extensions for Background Management in .NET MAUI for WinUI\nDESCRIPTION: Extension methods that update the background of Windows UI controls based on MAUI paint objects and views. These methods handle the conversion of cross-platform painting concepts to platform-specific brush implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Graphics.Paint? paint, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.IView! view, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.Panel! platformControl, Microsoft.Maui.Graphics.Paint? paint, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Animations in MAUI\nDESCRIPTION: This snippet introduces the animation management class and various methods to handle animation lifecycle, including adding, committing, and updating animations in MAUI. This is crucial for creating fluid UI interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Add(double beginAt, double duration, Microsoft.Maui.Animations.Animation! animation) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Animation() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Commit(Microsoft.Maui.Animations.IAnimationManager! animationManger) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Dispose() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.CurrentTime.get -> double\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.CurrentTime.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Name.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Name.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Pause() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Resume() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.RemoveFromParent() -> void\n```\n\n----------------------------------------\n\nTITLE: Command Mapper Extensions for MAUI Handlers (C#)\nDESCRIPTION: Extension methods for the MAUI CommandMapper that provide functionality to modify, append, prepend, and replace mappings between virtual views and their handlers. These methods help customize the behavior of UI elements without directly modifying the mapper implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Vibration Control in MAUI (C#)\nDESCRIPTION: Provides static methods for controlling device vibration, including canceling, getting the default instance, and initiating vibration with optional duration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Vibration.Cancel() -> void\nstatic Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!\nstatic Microsoft.Maui.Devices.Vibration.Vibrate() -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void\nstatic Microsoft.Maui.Devices.VibrationExtensions.Vibrate(this Microsoft.Maui.Devices.IVibration! vibration, double duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Image in PlatformCanvas in C#\nDESCRIPTION: This snippet allows the drawing of an image at specified coordinates and dimensions on the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IMenuBar and Related Interfaces in C#\nDESCRIPTION: Defines interfaces for menu-related components in MAUI, including IMenuBar, IMenuBarElement, IMenuBarItem, and IMenuElement. These interfaces provide properties and methods for managing menu structures and interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IMenuBar\nMicrosoft.Maui.IMenuBar.IsEnabled.get -> bool\nMicrosoft.Maui.IMenuBarElement\nMicrosoft.Maui.IMenuBarElement.MenuBar.get -> Microsoft.Maui.IMenuBar?\nMicrosoft.Maui.IMenuBarItem\nMicrosoft.Maui.IMenuBarItem.IsEnabled.get -> bool\nMicrosoft.Maui.IMenuBarItem.Text.get -> string!\nMicrosoft.Maui.IMenuElement\nMicrosoft.Maui.IMenuElement.Clicked() -> void\nMicrosoft.Maui.IMenuElement.IsEnabled.get -> bool\n```\n\n----------------------------------------\n\nTITLE: ToolbarHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the ToolbarHandler class that handle mapping of toolbar attributes, particularly the title, to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void\n```\n\n----------------------------------------\n\nTITLE: SMS Functionality in .NET MAUI\nDESCRIPTION: Static methods to compose and send SMS messages from the device. These methods allow composing SMS messages with or without predefined content through the default SMS service.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.Default.get -> Microsoft.Maui.ApplicationModel.Communication.ISms!\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Setting Extensions in Microsoft.Maui.Graphics.Text\nDESCRIPTION: Methods for setting various text attributes in attribute dictionaries, such as background color, boldness, and font name.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBackgroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBold(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontName(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\n```\n\n----------------------------------------\n\nTITLE: Gyroscope Sensor API in MAUI\nDESCRIPTION: Static methods for accessing device gyroscope functionality, including monitoring rotation, reading changes, and checking sensor status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Default.get -> Microsoft.Maui.Devices.Sensors.IGyroscope!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator !=(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator ==(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Managing ShareFile and ShareFileRequest in C#\nDESCRIPTION: This set of code snippets is responsible for creating and managing share file operations. It includes constructors and getter/setter methods for different configurations of ShareFile and ShareFileRequest classes. Dependencies include Microsoft.Maui.Storage for handling file base operations. Key parameters include file paths, content types, and titles. It manages both individual and multiple file share requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath, string! contentType) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\n----------------------------------------\n\nTITLE: Pin Class Definition for Map Markers (C#)\nDESCRIPTION: The Pin class represents a marker on a map with a location, label, and address. It includes events for click interactions and methods to trigger these events programmatically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Pin\nMicrosoft.Maui.Controls.Maps.Pin.Pin() -> void\nMicrosoft.Maui.Controls.Maps.Pin.Address.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Address.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Label.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Label.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Pin.Location.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Type.get -> Microsoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.Pin.Type.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.MarkerId.get -> object?\nMicrosoft.Maui.Controls.Maps.Pin.MarkerId.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.MarkerClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.PinClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Pin.InfoWindowClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.PinClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Pin.SendMarkerClick() -> bool\nMicrosoft.Maui.Controls.Maps.Pin.SendInfoWindowClick() -> bool\noverride Microsoft.Maui.Controls.Maps.Pin.Equals(object? obj) -> bool\noverride Microsoft.Maui.Controls.Maps.Pin.GetHashCode() -> int\nstatic Microsoft.Maui.Controls.Maps.Pin.operator ==(Microsoft.Maui.Controls.Maps.Pin? left, Microsoft.Maui.Controls.Maps.Pin? right) -> bool\nstatic Microsoft.Maui.Controls.Maps.Pin.operator !=(Microsoft.Maui.Controls.Maps.Pin? left, Microsoft.Maui.Controls.Maps.Pin? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Editor Handler Mapping Methods in C#\nDESCRIPTION: Methods for mapping editor (multi-line text input) properties to native controls. These handle text formatting, cursor positioning, and styling for cross-platform text editors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.ITextInput! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Scene-specific Lifecycle Event Extensions in MAUI\nDESCRIPTION: These extension methods provide integration points for iOS scene-specific lifecycle events in MAUI. They handle scene-level events for features like connection, disconnection, state restoration, and URL handling within the scene context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_166\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidDisconnect(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidDisconnect! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidEnterBackground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidEnterBackground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidFailToContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidFailToContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneDidUpdateUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneDidUpdateUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOnActivated(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnActivated! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOnResignActivation(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOnResignActivation! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneOpenUrl(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneOpenUrl! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneRestoreInteractionState(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneRestoreInteractionState! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillConnect(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillConnect! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining Preferences and Secure Storage Interfaces in C#\nDESCRIPTION: Defines interfaces for preferences and secure storage in MAUI applications. Includes methods for getting, setting, and removing key-value pairs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.IPreferences\nMicrosoft.Maui.Storage.IPreferences.Clear(string? sharedName = null) -> void\nMicrosoft.Maui.Storage.IPreferences.ContainsKey(string! key, string? sharedName = null) -> bool\nMicrosoft.Maui.Storage.IPreferences.Get<T>(string! key, T defaultValue, string? sharedName = null) -> T\nMicrosoft.Maui.Storage.IPreferences.Remove(string! key, string? sharedName = null) -> void\nMicrosoft.Maui.Storage.IPreferences.Set<T>(string! key, T value, string? sharedName = null) -> void\n\nMicrosoft.Maui.Storage.ISecureStorage\nMicrosoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Storage.ISecureStorage.Remove(string! key) -> bool\nMicrosoft.Maui.Storage.ISecureStorage.RemoveAll() -> void\nMicrosoft.Maui.Storage.ISecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Email Functionality in .NET MAUI\nDESCRIPTION: Methods for composing and sending emails using the device's email client.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage! message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IEmail!\n```\n\n----------------------------------------\n\nTITLE: Defining Rectangle Structure in .NET MAUI\nDESCRIPTION: Definition of RectF structure that represents a rectangle using floating-point coordinates. Includes properties for position, size, and helper methods for common geometric operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.RectF.RectF(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.RectF.Contains(float x, float y) -> bool\nMicrosoft.Maui.Graphics.RectF.Inflate(float width, float height) -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Network Connectivity in C# MAUI\nDESCRIPTION: Static properties and events for monitoring network connectivity. Includes accessing connection profiles, handling connectivity changes, and checking network access.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!\nstatic Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!\nstatic Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!\nstatic Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Filling Rounded Rectangles in MAUI (C#)\nDESCRIPTION: This method allows filling rounded rectangles on a specified canvas. The method can accept multiple parameters to define the rounding of corners. It requires the ICanvas interface from Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: File Picker API Definitions in .NET MAUI\nDESCRIPTION: Static API definitions for file picking operations in MAUI applications. Includes methods for single and multiple file selection with optional pick parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: Mapping Image Properties in Microsoft.Maui\nDESCRIPTION: Static methods and mappers from ImageHandler class that define the property and command mapping for image controls in MAUI, including the aspect ratio mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Flex Layout Configurations in .NET MAUI\nDESCRIPTION: Comprehensive enum definitions for flexible layout management, including alignment, direction, justification, and wrapping strategies\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.Row = 0\nMicrosoft.Maui.Layouts.FlexJustify.Center = 2\nMicrosoft.Maui.Layouts.FlexWrap.NoWrap = 0\n```\n\n----------------------------------------\n\nTITLE: Mapping Editor Properties in Microsoft.Maui\nDESCRIPTION: Static methods from EditorHandler class that map various IEditor properties to platform-specific implementations. These methods handle text formatting, alignment, validation, and input behavior for the Editor control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFormatting(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Geolocation APIs in MAUI C#\nDESCRIPTION: Static methods for accessing device geolocation capabilities, including getting the current or last known location, listening for location changes in the foreground, and handling geolocation events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.Default.get -> Microsoft.Maui.Devices.Sensors.IGeolocation!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: Platform Image Creation Method in Microsoft.Maui.Graphics\nDESCRIPTION: Static method to create a platform-specific image from a stream with optional format specification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.PlatformImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: GeometryUtil Static Methods in MAUI Graphics\nDESCRIPTION: Static utility methods for geometric calculations in Microsoft.Maui.Graphics.GeometryUtil, providing functions for angle conversions, distance calculations, point rotations, and intersection tests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(float angle) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(float angle) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetDistance(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetAngleAsDegrees(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF center, Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetOppositePoint(Microsoft.Maui.Graphics.PointF pivot, Microsoft.Maui.Graphics.PointF oppositePoint) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.PolarToPoint(float angleInRadians, float fx, float fy) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.EllipseAngleToPoint(float x, float y, float width, float height, float angleInDegrees) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetFactor(float aMin, float aMax, float aValue) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetLinearValue(float aMin, float aMax, float aFactor) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetSweep(float angle1, float angle2, bool clockwise) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.IsLineIntersectingLine(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3) -> bool\n```\n\n----------------------------------------\n\nTITLE: Android Context Extensions for .NET MAUI\nDESCRIPTION: These extension methods provide utilities for working with Android Context in .NET MAUI applications. They handle conversions between pixel-based measurements and device-independent units.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ContextExtensions.FromPixels(this Android.Content.Context! context, double width, double height) -> Microsoft.Maui.Graphics.Size\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ContextExtensions.FromPixels(this Android.Content.Context! context, Microsoft.Maui.Thickness thickness) -> Microsoft.Maui.Thickness\n```\n\n----------------------------------------\n\nTITLE: MAUI Interface: ISwipeView Interaction\nDESCRIPTION: Defines interface for swipe view interactions, including opening, closing, and tracking swipe behavior across different view directions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ISwipeView.RequestClose(Microsoft.Maui.SwipeViewCloseRequest! swipeCloseRequest) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining PathF Class in C#\nDESCRIPTION: The PathF class represents a path with floating-point coordinates. It provides methods for creating and manipulating complex shapes and paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.AppendCircle(float cx, float cy, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendCircle(Microsoft.Maui.Graphics.PointF center, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(Microsoft.Maui.Graphics.RectF rect) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(float x, float y, float w, float h, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(Microsoft.Maui.Graphics.RectF rect, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float xCornerRadius, float yCornerRadius) -> void\nMicrosoft.Maui.Graphics.PathF.Bounds.get -> Microsoft.Maui.Graphics.RectF\nMicrosoft.Maui.Graphics.PathF.Close() -> void\nMicrosoft.Maui.Graphics.PathF.Closed.get -> bool\nMicrosoft.Maui.Graphics.PathF.Count.get -> int\nMicrosoft.Maui.Graphics.PathF.Dispose() -> void\nMicrosoft.Maui.Graphics.PathF.FirstPoint.get -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.GetArcAngle(int aIndex) -> float\nMicrosoft.Maui.Graphics.PathF.GetArcClockwise(int aIndex) -> bool\nMicrosoft.Maui.Graphics.PathF.GetBoundsByFlattening(float flatness = 0.001) -> Microsoft.Maui.Graphics.RectF\nMicrosoft.Maui.Graphics.PathF.GetRotatedPoint(int pointIndex, Microsoft.Maui.Graphics.PointF pivotPoint, float angle) -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.GetSegmentForPoint(int pointIndex) -> int\nMicrosoft.Maui.Graphics.PathF.GetSegmentInfo(int segmentIndex, out int pointIndex, out int arcAngleIndex, out int arcClockwiseIndex) -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathF.GetSegmentPointIndex(int index) -> int\nMicrosoft.Maui.Graphics.PathF.GetSegmentType(int aIndex) -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathF.Invalidate() -> void\nMicrosoft.Maui.Graphics.PathF.IsSubPathClosed(int subPathIndex) -> bool\nMicrosoft.Maui.Graphics.PathF.LastPoint.get -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.LastPointIndex.get -> int\nMicrosoft.Maui.Graphics.PathF.Move(float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.MovePoint(int index, float dx, float dy) -> void\nMicrosoft.Maui.Graphics.PathF.Open() -> void\nMicrosoft.Maui.Graphics.PathF.OperationCount.get -> int\nMicrosoft.Maui.Graphics.PathF.PathF() -> void\nMicrosoft.Maui.Graphics.PathF.PathF(float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PointF point) -> void\nMicrosoft.Maui.Graphics.PathF.RemoveAllSegmentsAfter(int segmentIndex) -> void\nMicrosoft.Maui.Graphics.PathF.RemoveSegment(int segmentIndex) -> void\nMicrosoft.Maui.Graphics.PathF.SegmentCountExcludingOpenAndClose.get -> int\nMicrosoft.Maui.Graphics.PathF.SetArcAngle(int aIndex, float aValue) -> void\nMicrosoft.Maui.Graphics.PathF.SetArcClockwise(int aIndex, bool aValue) -> void\nMicrosoft.Maui.Graphics.PathF.SetPoint(int index, float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.SetPoint(int index, Microsoft.Maui.Graphics.PointF point) -> void\nMicrosoft.Maui.Graphics.PathF.SubPathCount.get -> int\nMicrosoft.Maui.Graphics.PathF.this[int index].get -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.Transform(System.Numerics.Matrix3x2 transform) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MAUI ViewHandler Generic Class\nDESCRIPTION: Generic class definition for ViewHandler that handles platform-specific view implementations with virtual and platform view type parameters\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>\n```\n\n----------------------------------------\n\nTITLE: View Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for Android View management and manipulation. These methods handle view focus, outline clipping, parent-child relationships, and view initialization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_181\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.Focus(this Android.Views.View! platformView, Microsoft.Maui.FocusRequest! request) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.GetClipToOutline(this Android.Views.View! view) -> bool\nstatic Microsoft.Maui.Platform.ViewExtensions.Initialize(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.InvalidateMeasure(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.RemoveFromParent(this Android.Views.View! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.SetClipToOutline(this Android.Views.View! view, bool value) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.SetWindowBackground(this Android.Views.View! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Slider Control Extensions for iOS in .NET MAUI\nDESCRIPTION: Extension methods for configuring UISlider controls with MAUI ISlider properties. These methods manage slider values, track colors, thumb appearance, and min/max values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_185\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMaximum(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMaximumTrackColor(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMinimum(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMinimumTrackColor(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateThumbColor(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateThumbImageSourceAsync(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider, Microsoft.Maui.IImageSourceServiceProvider! provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateValue(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SoftInputExtensions ShowSoftInputAsync Method in C#\nDESCRIPTION: Extension method for ITextInput to show soft input asynchronously. Returns a Task<bool> indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SoftInputExtensions.ShowSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: IWindowOverlay and IWindowOverlayElement Interface Members in .NET MAUI\nDESCRIPTION: Members of window overlay interfaces which provide UI elements that can be drawn over windows. IWindowOverlay manages overlay elements and handles initialization and touch events, while IWindowOverlayElement represents individual elements within an overlay.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay\nMicrosoft.Maui.IWindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool\nMicrosoft.Maui.IWindowOverlay.Deinitialize() -> bool\nMicrosoft.Maui.IWindowOverlay.Density.get -> float\nMicrosoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.get -> bool\nMicrosoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.set -> void\nMicrosoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.get -> bool\nMicrosoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.set -> void\nMicrosoft.Maui.IWindowOverlay.HandleUIChange() -> void\nMicrosoft.Maui.IWindowOverlay.Initialize() -> bool\nMicrosoft.Maui.IWindowOverlay.Invalidate() -> void\nMicrosoft.Maui.IWindowOverlay.IsPlatformViewInitialized.get -> bool\nMicrosoft.Maui.IWindowOverlay.IsVisible.get -> bool\nMicrosoft.Maui.IWindowOverlay.IsVisible.set -> void\nMicrosoft.Maui.IWindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool\nMicrosoft.Maui.IWindowOverlay.RemoveWindowElements() -> void\nMicrosoft.Maui.IWindowOverlay.Tapped -> System.EventHandler<Microsoft.Maui.WindowOverlayTappedEventArgs!>!\nMicrosoft.Maui.IWindowOverlay.Window.get -> Microsoft.Maui.IWindow!\nMicrosoft.Maui.IWindowOverlay.WindowElements.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlayElement!>!\nMicrosoft.Maui.IWindowOverlayElement\nMicrosoft.Maui.IWindowOverlayElement.Contains(Microsoft.Maui.Graphics.Point point) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ShareMultipleFilesRequest Class in C#\nDESCRIPTION: Defines the ShareMultipleFilesRequest class with properties and constructors for creating multiple file sharing requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.Files.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>?\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.Files.set -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest() -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\n----------------------------------------\n\nTITLE: FilePickerFileType Definitions in MAUI C#\nDESCRIPTION: Static readonly properties defining common file types for file picker operations and virtual method for platform-specific file type mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!\nvirtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Methods for Android in MAUI\nDESCRIPTION: Static methods and properties for handling Android-specific functionality in MAUI applications. These include initialization, activity state management, and permission handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Platform.ActivityStateChanged -> System.EventHandler<Microsoft.Maui.ApplicationModel.ActivityStateChangedEventArgs!>?\nstatic Microsoft.Maui.ApplicationModel.Platform.AppContext.get -> Android.Content.Context!\nstatic Microsoft.Maui.ApplicationModel.Platform.CurrentActivity.get -> Android.App.Activity?\nstatic Microsoft.Maui.ApplicationModel.Platform.Init(Android.App.Activity! activity, Android.OS.Bundle? bundle) -> void\nstatic Microsoft.Maui.ApplicationModel.Platform.Init(Android.App.Application! application) -> void\nstatic Microsoft.Maui.ApplicationModel.Platform.OnNewIntent(Android.Content.Intent? intent) -> void\nstatic Microsoft.Maui.ApplicationModel.Platform.OnRequestPermissionsResult(int requestCode, string![]! permissions, Android.Content.PM.Permission[]! grantResults) -> void\nstatic Microsoft.Maui.ApplicationModel.Platform.OnResume(Android.App.Activity? activity = null) -> void\nstatic Microsoft.Maui.ApplicationModel.Platform.WaitForActivityAsync(System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Android.App.Activity!>!\n```\n\n----------------------------------------\n\nTITLE: Layout Manager Method Overrides in .NET MAUI\nDESCRIPTION: Overridden methods for StackLayout managers that handle measuring and arranging UI elements in both horizontal and vertical orientations. These methods calculate the size and position of child elements in stack layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Screenshot API in MAUI\nDESCRIPTION: Static methods for capturing screenshots of the device screen or specific UI elements, with platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!\nstatic Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.ScreenshotExtensions.CaptureAsync(this Microsoft.Maui.Media.IScreenshot! screenshot, Microsoft.UI.Xaml.UIElement! element) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nstatic Microsoft.Maui.Media.ScreenshotExtensions.CaptureAsync(this Microsoft.Maui.Media.IScreenshot! screenshot, Microsoft.UI.Xaml.Window! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\n```\n\n----------------------------------------\n\nTITLE: Extending IImageSourceServiceProvider for Image Source Service Retrieval in C#\nDESCRIPTION: These extension methods provide ways to retrieve image source services from an IImageSourceServiceProvider. They include generic and non-generic versions, as well as methods that throw exceptions if the required service is not found.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService?\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService?\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService!\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, System.Type! imageSourceType) -> Microsoft.Maui.IImageSourceService!\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService!\n```\n\n----------------------------------------\n\nTITLE: Connectivity Operations in MAUI (C#)\nDESCRIPTION: Static properties and events for monitoring device connectivity. Includes methods to get connection profiles and network access status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!\nstatic Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!\nstatic Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!\nstatic Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Defining MenuFlyout Handler Implementation in C#\nDESCRIPTION: Implementation of the MenuFlyoutHandler class that manages context menus in MAUI. Provides methods for adding, removing, inserting and clearing menu elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuFlyoutHandler {\n    void Add(Microsoft.Maui.IMenuElement view);\n    void Clear();\n    void Insert(int index, Microsoft.Maui.IMenuElement view);\n    void Remove(Microsoft.Maui.IMenuElement view);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IContentView Interface in C#\nDESCRIPTION: The IContentView interface defines properties and methods related to content views in the .NET MAUI framework, including layout and measurement functionalities. It specifies methods for arranging and measuring the view based on provided constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IContentView.Content.get -> object?\nMicrosoft.Maui.IContentView.CrossPlatformArrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IContentView.CrossPlatformMeasure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IContentView.PresentedContent.get -> Microsoft.Maui.IView?\n```\n\n----------------------------------------\n\nTITLE: Property Mapping in MAUI\nDESCRIPTION: Methods for mapping properties between virtual views and platform-specific implementations, including caching and property updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void\nvirtual Microsoft.Maui.PropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!\nvirtual Microsoft.Maui.PropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?\nvirtual Microsoft.Maui.PropertyMapper.SetPropertyCore(string! key, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>! action) -> void\nvirtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!\nvirtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Management in .NET MAUI Android Handlers\nDESCRIPTION: These method signatures define container-related functionality in .NET MAUI handlers for Android. Some views require a container to properly render, and these methods handle the creation, setup, and removal of these containers. The NeedsContainer property determines if a view requires a container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ImageHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ShapeViewHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: Reversing PathF in .NET MAUI\nDESCRIPTION: This method reverses the segments of the path in a PathF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Reverse() -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Property Mapper Extensions\nDESCRIPTION: Extensions for modifying property mappings between virtual views and handlers in MAUI. Provides methods to append, prepend, and modify existing mappings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Version Tracking Interface for App Version Management in .NET MAUI\nDESCRIPTION: The IVersionTracking interface provides methods and properties to track app version information, including build history, first launch detection, and version comparison functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.BuildHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledVersion.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchEver.get -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForBuild(string! build) -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForVersion(string! version) -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousBuild.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousVersion.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.Track() -> void\nMicrosoft.Maui.ApplicationModel.IVersionTracking.VersionHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual View Management in .NET MAUI Android Handlers\nDESCRIPTION: These method signatures define how handlers manage the relationship between MAUI's virtual views and Android platform views. The SetVirtualView method is called when a virtual view is associated with a handler and is responsible for updating the platform view to match the virtual view's state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.EditorHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.LayoutHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ITimePickerHandler Interface in C#\nDESCRIPTION: Defines the ITimePickerHandler interface with properties for PlatformView (Microsoft.UI.Xaml.Controls.TimePicker) and VirtualView (Microsoft.Maui.ITimePicker).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ITimePickerHandler\nMicrosoft.Maui.Handlers.ITimePickerHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.TimePicker!\nMicrosoft.Maui.Handlers.ITimePickerHandler.VirtualView.get -> Microsoft.Maui.ITimePicker!\n```\n\n----------------------------------------\n\nTITLE: MediaPicker API in MAUI\nDESCRIPTION: Static methods for accessing device media capture functionality, including taking photos, recording videos, and picking media from the device gallery.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!\nstatic Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Text Handling Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Method signatures for attributed text handling classes in Microsoft.Maui.Graphics.Text namespace. These methods provide functionality for working with attributed text, text runs, and text blocks which enable rich text rendering in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Text.AttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n~override Microsoft.Maui.Graphics.Text.AttributedText.Text.get -> string\n~override Microsoft.Maui.Graphics.Text.AttributedTextBlock.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.AttributedTextRun.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.CountingWriter.Encoding.get -> System.Text.Encoding\n~override Microsoft.Maui.Graphics.Text.CountingWriter.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: Initializing Platform Canvas State in C#\nDESCRIPTION: The PlatformCanvasState class is responsible for maintaining the state of a graphics canvas. It includes methods and properties to manage shadowing and other state-related functionalities. This class is integral to graphics rendering, ensuring consistent visuals across different platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.PlatformCanvasState() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.Shadowed.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.Shadowed.set -> void\n```\n\n----------------------------------------\n\nTITLE: StepperHandler Mapping Methods in MAUI (C#)\nDESCRIPTION: Static methods for StepperHandler that map stepper properties from the cross-platform IStepper interface to platform-specific implementations. Includes mappers for increment, minimum/maximum values, and current value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMaximum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMinimum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing ElementHandler in MAUI\nDESCRIPTION: Initializes an `ElementHandler` in MAUI with a property mapper and an optional command mapper. The property mapper maps properties of the virtual view to platform-specific properties, and the command mapper defines commands that can be executed on the platform view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler.PlatformView.get -> object?\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler.Services.get -> System.IServiceProvider?\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ElementHandler.VirtualView.get -> Microsoft.Maui.IElement?\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ShapeViewHandler Mappers and Methods in MAUI (C#)\nDESCRIPTION: Static properties and methods for the ShapeViewHandler, including command and property mappers, and methods for mapping various properties such as aspect, background, fill, shape, stroke, and stroke-related attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Preferences.Set Methods for Storing Different Data Types in .NET MAUI\nDESCRIPTION: A collection of static methods from the Preferences class that allows storing various primitive data types (double, float, int, long, string, DateTime) with an optional sharedName parameter for storage isolation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollViewHandler Mappers and Methods in MAUI (C#)\nDESCRIPTION: Static properties and methods for the ScrollViewHandler, including command and property mappers, and methods for mapping content, content size, scroll bar visibility, orientation, and scroll requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContentSize(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Map Control Properties - C#\nDESCRIPTION: Static readonly property declarations for the Map control defining bindable properties for scrolling, zooming, user location, traffic display and item source functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsScrollEnabledProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsShowingUserProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsTrafficEnabledProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.IsZoomEnabledProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemsSourceProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Distance Class Implementation in MAUI Maps\nDESCRIPTION: Core implementation of the Distance class that provides distance calculations and conversions between different units (meters, kilometers, miles).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Distance\n{\n    public Distance();\n    public Distance(double meters);\n    public double Kilometers { get; }\n    public double Meters { get; }\n    public double Miles { get; }\n    public bool Equals(Distance other);\n    public static Distance FromKilometers(double kilometers);\n    public static Distance FromMeters(double meters);\n    public static Distance FromMiles(double miles);\n    public static Distance BetweenPositions(Location position1, Location position2);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IAppInfo in MAUI\nDESCRIPTION: This snippet details the IAppInfo interface, providing properties and methods to retrieve application-related information such as name, version, and packaging model within the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Name.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackageName.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.VersionString.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.BuildString.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.ShowSettingsUI() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutHandler Class in C#\nDESCRIPTION: Defines the LayoutHandler class with methods for adding, removing, and updating child views, as well as constructors with optional mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler\nMicrosoft.Maui.Handlers.LayoutHandler.Add(Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Clear() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Insert(int index, Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Remove(Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Update(int index, Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.UpdateZIndex(Microsoft.Maui.IView! child) -> void\n```\n\n----------------------------------------\n\nTITLE: Rect Static Methods and Operators in MAUI Graphics\nDESCRIPTION: Static methods and operator overloads for Microsoft.Maui.Graphics.Rect, providing rectangle creation, intersection calculation, and conversion operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Microsoft.Maui.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Converting Between MAUI and SkiaSharp Geometric Types\nDESCRIPTION: Extension methods that convert between MAUI's geometric types (PointF, RectF, SizeF) and SkiaSharp's equivalent types (SKPoint, SKRect, SKSize). These methods facilitate interoperability between the two graphics systems.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsPointF(this SkiaSharp.SKPoint target) -> Microsoft.Maui.Graphics.PointF\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsRectangleF(this SkiaSharp.SKRect target) -> Microsoft.Maui.Graphics.RectF\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSize(this SkiaSharp.SKSize target) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSizeF(this Microsoft.Maui.Graphics.SizeF target) -> SkiaSharp.SKSize\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSKRect(this Microsoft.Maui.Graphics.RectF target) -> SkiaSharp.SKRect\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToSKPoint(this Microsoft.Maui.Graphics.PointF target) -> SkiaSharp.SKPoint\n```\n\n----------------------------------------\n\nTITLE: AppHostBuilderExtensions for configuring MAUI applications\nDESCRIPTION: Extension methods for MauiAppBuilder that configure animations and dispatching services in a MAUI application. These methods are part of the application initialization process.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: WindowHandler Methods and Mappers\nDESCRIPTION: Static methods and mappers for WindowHandler that manage window properties like dimensions, position, content, and UI elements. These methods define behavior for application windows across different platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapFlowDirection(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMaximumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMaximumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMenuBar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMinimumHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapMinimumWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapRequestDisplayDensity(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window, object? args) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapTitle(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapToolbar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapX(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapY(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Handler Interfaces in MAUI\nDESCRIPTION: Interface definitions for map handlers that manage platform-specific map implementations and element handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMapHandler\n{\n    object PlatformView { get; }\n    IMap VirtualView { get; }\n    void UpdateMapElement(IMapElement element);\n}\n\npublic interface IMapElementHandler\n{\n    object PlatformView { get; }\n    IMapElement VirtualView { get; }\n}\n\npublic interface IMapPinHandler\n{\n    object PlatformView { get; }\n    IMapPin VirtualView { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Launch Options Class in .NET MAUI\nDESCRIPTION: The MapLaunchOptions class provides configuration options for launching the map application, including navigation mode settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.MapLaunchOptions() -> void\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.get -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.set -> void\n```\n\n----------------------------------------\n\nTITLE: Haptic Feedback in .NET MAUI\nDESCRIPTION: Static methods for triggering haptic feedback on supported devices. The API allows triggering various types of haptic feedback with customizable intensity through the HapticFeedbackType enumeration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.HapticFeedback.Default.get -> Microsoft.Maui.Devices.IHapticFeedback!\nstatic Microsoft.Maui.Devices.HapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type = Microsoft.Maui.Devices.HapticFeedbackType.Click) -> void\n```\n\n----------------------------------------\n\nTITLE: GraphicsView Drawable Update Extension\nDESCRIPTION: Extension method for updating the drawable content of a WinUI-based graphics view with MAUI graphics components. This enables cross-platform drawing code to be rendered on Windows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.GraphicsViewExtensions.UpdateDrawable(this Microsoft.Maui.Graphics.Win2D.W2DGraphicsView! PlatformGraphicsView, Microsoft.Maui.IGraphicsView! graphicsView) -> void\n```\n\n----------------------------------------\n\nTITLE: DrawLine Extension for ICanvas in .NET MAUI Graphics\nDESCRIPTION: This static extension method `DrawLine` extends the `ICanvas` interface in the Microsoft.Maui.Graphics library. It draws a line between two points, specified as `PointF` objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawLine(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Magnetometer Sensor API in MAUI\nDESCRIPTION: Static methods for accessing device magnetometer functionality, including monitoring magnetic fields, reading changes, and checking sensor status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Default.get -> Microsoft.Maui.Devices.Sensors.IMagnetometer!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.MagnetometerData.operator !=(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.MagnetometerData.operator ==(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Path Manipulation Extensions\nDESCRIPTION: Extension methods for working with PathF objects, including arc drawing, SVG parsing, and path scaling operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic void DrawArc(this PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation)\nstatic void SVGArcTo(this PathF aTarget, float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY)\nstatic PathF Build(string definition)\nstatic PathF AsScaledPath(this PathF target, float scale)\n```\n\n----------------------------------------\n\nTITLE: Overriding Window Handler and Layout Manager Methods in MAUI for iOS\nDESCRIPTION: Override methods for WindowHandler and AbsoluteLayoutManager classes that manage platform element creation, handler connection, and layout arrangement for windows and absolute positioning in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.WindowHandler.ConnectHandler(UIKit.UIWindow! platformView) -> void\noverride Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> UIKit.UIWindow!\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: TabbedView Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for TabbedViewHandler defining property and command mappers for the TabbedView control. These mappers allow for cross-platform binding of properties and commands to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Image Handling Methods in MAUI\nDESCRIPTION: Override methods for handling stream and URI-based image sources in MAUI, providing asynchronous image loading capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.StreamImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\n```\n\n----------------------------------------\n\nTITLE: Defining RootComponent Class in C# for Blazor WebView in .NET MAUI\nDESCRIPTION: Defines the RootComponent class for managing Blazor components in a MAUI WebView. Includes properties for component type, parameters, and selector.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.ComponentType.get -> System.Type?\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.ComponentType.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Parameters.get -> System.Collections.Generic.IDictionary<string!, object?>?\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Parameters.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.RootComponent() -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Selector.get -> string?\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Selector.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Class in MAUI\nDESCRIPTION: Defines the Map class with various properties and methods for map functionality, including pin management, map types, and region manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Map\nMicrosoft.Maui.Controls.Maps.Map.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Maps.IMapPin!>!\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemsSource.get -> System.Collections.IEnumerable!\nMicrosoft.Maui.Controls.Maps.Map.ItemsSource.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplate.get -> Microsoft.Maui.Controls.DataTemplate!\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplate.set -> void\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplateSelector.get -> Microsoft.Maui.Controls.DataTemplateSelector!\nMicrosoft.Maui.Controls.Maps.Map.ItemTemplateSelector.set -> void\nMicrosoft.Maui.Controls.Maps.Map.Map() -> void\nMicrosoft.Maui.Controls.Maps.Map.Map(Microsoft.Maui.Maps.MapSpan! region) -> void\nMicrosoft.Maui.Controls.Maps.Map.MapClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.MapClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Map.MapElements.get -> System.Collections.Generic.IList<Microsoft.Maui.Controls.Maps.MapElement!>!\nMicrosoft.Maui.Controls.Maps.Map.MapType.get -> Microsoft.Maui.Maps.MapType\nMicrosoft.Maui.Controls.Maps.Map.MapType.set -> void\nMicrosoft.Maui.Controls.Maps.Map.MoveToRegion(Microsoft.Maui.Maps.MapSpan! mapSpan) -> void\nMicrosoft.Maui.Controls.Maps.Map.Pins.get -> System.Collections.Generic.IList<Microsoft.Maui.Controls.Maps.Pin!>!\nMicrosoft.Maui.Controls.Maps.Map.VisibleRegion.get -> Microsoft.Maui.Maps.MapSpan?\n```\n\n----------------------------------------\n\nTITLE: Defining Paint Properties in MAUI\nDESCRIPTION: This snippet provides the default constructor for the Paint class in MAUI, enabling developers to create paint instances for drawing graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Paint.Paint() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationViewHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the NavigationViewHandler class, including a command mapper, a property mapper, and a method for requesting navigation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Strings with Microsoft.Maui.Graphics\nDESCRIPTION: These methods provide capabilities to draw strings on a canvas, aligning them based on specified horizontal and vertical alignments. The text flows within bounds and supports line spacing adjustments. Requires Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.RectF bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Handler Interface Definition\nDESCRIPTION: Defines the core interface for map handlers in MAUI, including methods for managing map elements and properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMapHandler\n{\n    Microsoft.UI.Xaml.FrameworkElement PlatformView { get; }\n    IMap VirtualView { get; }\n    void UpdateMapElement(IMapElement element);\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Extensions in MAUI Graphics\nDESCRIPTION: Extension methods for ICanvas interface providing shape drawing functionality including rectangles and rounded rectangles with various parameter combinations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic void FillRectangle(this ICanvas target, RectF rect);\nstatic void FillRoundedRectangle(this ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius);\n```\n\n----------------------------------------\n\nTITLE: Mapping EditorHandler Properties in MAUI Framework\nDESCRIPTION: Static methods that map IEditor properties to platform-specific implementations through the EditorHandler. These methods handle properties like read-only state, spell checking, text prediction, keyboard type, max length, placeholder, text color, and text alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.ITextInput! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Extensions for Filling Rounded Rectangles in .NET MAUI Graphics\nDESCRIPTION: Extension methods for the ICanvas interface to fill rounded rectangles with various parameter options. These methods allow specifying different corner radii and support different rectangle format types (Rect and RectF).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Operations and Navigation via Microsoft MAUI\nDESCRIPTION: This set of methods provides capability for opening or trying to open geographical locations using latitude and longitude, location objects or placemarks with options. It allows integrating map functionalities in MAUI applications, vital for location-based services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: CheckBox Handler Methods in MAUI\nDESCRIPTION: Static methods for CheckBoxHandler that map checkbox properties like state and foreground between MAUI checkbox abstractions and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.CheckBoxHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.ICheckBoxHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Mapping Entry Properties in Microsoft.Maui\nDESCRIPTION: Static methods from EntryHandler class that map various IEntry properties to platform-specific implementations. These methods handle text input, formatting, validation, and keyboard behavior for the Entry control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFormatting(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationRequest Class in .NET MAUI\nDESCRIPTION: This snippet defines the NavigationRequest class that is responsible for managing navigation stack changes in the application. It includes properties to define if navigation should be animated as well as the new navigation stack to be adopted.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.NavigationRequest.Animated.get -> bool\nMicrosoft.Maui.NavigationRequest.NavigationRequest(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newNavigationStack, bool animated) -> void\n```\n\n----------------------------------------\n\nTITLE: Measuring Layout in LayoutManager\nDESCRIPTION: This snippet defines an abstract method for measuring layout sizes based on width and height constraints. Implementations are responsible for returning the appropriate size for child elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.Layouts.LayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Managing Animation Collections with AnimationManager\nDESCRIPTION: The AnimationManager class provides methods to add and remove animations and control their timing via a ticker component. The class is part of the Microsoft.Maui.Animations namespace and requires a ticker implementation to start.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.AnimationManager\nMicrosoft.Maui.Animations.AnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.AnimationManager.AnimationManager(Microsoft.Maui.Animations.ITicker! ticker) -> void\nMicrosoft.Maui.Animations.AnimationManager.AutoStartTicker.get -> bool\nMicrosoft.Maui.Animations.AnimationManager.AutoStartTicker.set -> void\nMicrosoft.Maui.Animations.AnimationManager.Dispose() -> void\nMicrosoft.Maui.Animations.AnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.AnimationManager.SpeedModifier.get -> double\nMicrosoft.Maui.Animations.AnimationManager.SpeedModifier.set -> void\nMicrosoft.Maui.Animations.AnimationManager.Ticker.get -> Microsoft.Maui.Animations.ITicker!\n\n```\n\n----------------------------------------\n\nTITLE: Contacts Functionality in .NET MAUI\nDESCRIPTION: Static methods to access and interact with device contacts. These methods allow retrieving all contacts, picking a specific contact, and accessing the default contact service implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IContacts!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\n```\n\n----------------------------------------\n\nTITLE: Geolocation Services Implementation in C#\nDESCRIPTION: Implementation of geolocation services including location tracking, geocoding, and accuracy settings with supporting data structures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest() -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan timeout) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Button Handler Mapping Methods in C#\nDESCRIPTION: Methods for mapping button properties to native controls. These handle text, styling, images, and other button-specific properties for cross-platform implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.ImageButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapPadding(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapText(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.TextButtonMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITextButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\n```\n\n----------------------------------------\n\nTITLE: ElementHandler Property and Command Mappers in MAUI\nDESCRIPTION: Static properties that define property and command mappers for the ElementHandler, which is responsible for mapping IElement properties to IElementHandler implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Stroke Extensions for Border Styling in .NET MAUI iOS\nDESCRIPTION: Extension methods for applying stroke and border properties to UIView components. These methods handle various stroke attributes like dash patterns, line caps, joins, thickness and shapes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_187\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStroke(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashOffset(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashPattern(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineCap(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineJoin(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeMiterLimit(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeShape(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeThickness(this UIKit.UIView! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\n----------------------------------------\n\nTITLE: WebView Handler Methods in C#\nDESCRIPTION: Static methods for handling WebView-specific operations in MAUI, including navigation, JavaScript evaluation, and source management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\n// ... additional webview methods\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayInfo Class in C#\nDESCRIPTION: Class representing display information for a device in MAUI, including properties for dimensions, density, orientation, rotation, and refresh rate.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.DisplayInfo\nMicrosoft.Maui.Devices.DisplayInfo.Density.get -> double\nMicrosoft.Maui.Devices.DisplayInfo.DisplayInfo() -> void\nMicrosoft.Maui.Devices.DisplayInfo.DisplayInfo(double width, double height, double density, Microsoft.Maui.Devices.DisplayOrientation orientation, Microsoft.Maui.Devices.DisplayRotation rotation, float rate) -> void\nMicrosoft.Maui.Devices.DisplayInfo.DisplayInfo(double width, double height, double density, Microsoft.Maui.Devices.DisplayOrientation orientation, Microsoft.Maui.Devices.DisplayRotation rotation) -> void\nMicrosoft.Maui.Devices.DisplayInfo.Equals(Microsoft.Maui.Devices.DisplayInfo other) -> bool\nMicrosoft.Maui.Devices.DisplayInfo.Height.get -> double\nMicrosoft.Maui.Devices.DisplayInfo.Orientation.get -> Microsoft.Maui.Devices.DisplayOrientation\nMicrosoft.Maui.Devices.DisplayInfo.RefreshRate.get -> float\nMicrosoft.Maui.Devices.DisplayInfo.Rotation.get -> Microsoft.Maui.Devices.DisplayRotation\nMicrosoft.Maui.Devices.DisplayInfo.Width.get -> double\n```\n\n----------------------------------------\n\nTITLE: Managing Device Display in MAUI C# Applications\nDESCRIPTION: Static methods to control and monitor device display information, including keeping the screen on and detecting display changes in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.Current.get -> Microsoft.Maui.Devices.IDeviceDisplay!\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.get -> bool\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.set -> void\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: MapLaunchOptions in MAUI ApplicationModel\nDESCRIPTION: Defines options for map launching within applications, allowing customization of navigation modes and other settings in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.MapLaunchOptions() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.get -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationViewHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static properties and methods for the NavigationViewHandler class that define command and property mappers for handling navigation requests in a stack-based navigation system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Collection View and Date Picker Extensions in .NET MAUI\nDESCRIPTION: Extension methods for handling collection views and date pickers in iOS. These methods apply MAUI properties to native iOS controls for scroll bar visibility and date handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_173\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.CollectionViewExtensions.UpdateHorizontalScrollBarVisibility(this UIKit.UICollectionView! collectionView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void\nstatic Microsoft.Maui.Platform.CollectionViewExtensions.UpdateVerticalScrollBarVisibility(this UIKit.UICollectionView! collectionView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void\nstatic Microsoft.Maui.Platform.Culture.CurrentCulture.get -> System.Globalization.CultureInfo!\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this UIKit.UIDatePicker! picker, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending Layout Functionality in C# for Microsoft.Maui.Layouts\nDESCRIPTION: This snippet defines extension methods for the LayoutExtensions class in Microsoft.Maui.Layouts. It includes methods for adjusting size, arranging content, and computing desired size and frame for views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutExtensions.AdjustForFill(this Microsoft.Maui.Graphics.Size size, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> void\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContentUnbounded(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeFrame(this Microsoft.Maui.IView! view, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Thickness inset, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Haptic Feedback Interface Definition in MAUI\nDESCRIPTION: Interface for controlling haptic feedback in MAUI applications. Provides a property to check support and a method to perform specific haptic feedback types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IHapticFeedback.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IHapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining EmailMessage Class in C#\nDESCRIPTION: Defines the EmailMessage class with properties for Cc, Subject, and To. Includes constructors for creating email messages.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Cc.get -> System.Collections.Generic.List<string!>?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Cc.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.EmailMessage() -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.EmailMessage(string! subject, string! body, params string![]! to) -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Subject.get -> string?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Subject.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.To.get -> System.Collections.Generic.List<string!>?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.To.set -> void\n```\n\n----------------------------------------\n\nTITLE: Extending IPicker for Item Retrieval in C#\nDESCRIPTION: These extension methods provide ways to retrieve items from an IPicker as either an array or a list of strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.IPickerExtension.GetItemsAsArray(this Microsoft.Maui.IPicker! picker) -> string![]!\nstatic Microsoft.Maui.IPickerExtension.GetItemsAsList(this Microsoft.Maui.IPicker! picker) -> System.Collections.Generic.List<string!>!\n```\n\n----------------------------------------\n\nTITLE: MauiApplication Lifecycle Overrides for Android\nDESCRIPTION: Method overrides for the MauiApplication class that handle Android application lifecycle events and memory management. These methods ensure proper initialization and resource management of the MAUI application in the Android environment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.MauiApplication.OnConfigurationChanged(Android.Content.Res.Configuration! newConfig) -> void\noverride Microsoft.Maui.MauiApplication.OnCreate() -> void\noverride Microsoft.Maui.MauiApplication.OnLowMemory() -> void\noverride Microsoft.Maui.MauiApplication.OnTrimMemory(Android.Content.TrimMemory level) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Operations with Microsoft.Maui\nDESCRIPTION: Handles map-related operations using latitude, longitude, and placemark data. Requires Microsoft.Maui.ApplicationModel namespace and supports asynchronous operations returning a Task<boolean>. Leverages TryOpenAsync for opening maps.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Manipulating Rect in Microsoft MAUI\nDESCRIPTION: The Rect class manages rectangle objects, providing capabilities to determine geometry properties, perform transformations, and handle intersections with points and other rectangles. It is essential in defining layouts and collision detection within MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect.Rect() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Rect\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: Rotating PathF in .NET MAUI\nDESCRIPTION: This method rotates the path around a pivot point by a specified angle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Rotate(float angleAsDegrees, Microsoft.Maui.Graphics.PointF pivot) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Lerping in MAUI (C#)\nDESCRIPTION: These static methods are part of the AnimationLerpingExtensions class, providing linear interpolation (lerp) functionality for various data types used in MAUI animations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.GenericLerp<T>(this T start, T end, double progress, double toggleThreshold = 0.5) -> T\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float start, float end, double progress) -> float\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this float? start, float? end, double progress) -> float?\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Point start, Microsoft.Maui.Graphics.Point end, double progress) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.PointF start, Microsoft.Maui.Graphics.PointF end, double progress) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Rect start, Microsoft.Maui.Graphics.Rect end, double progress) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.RectF start, Microsoft.Maui.Graphics.RectF end, double progress) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Size start, Microsoft.Maui.Graphics.Size end, double progress) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SizeF start, Microsoft.Maui.Graphics.SizeF end, double progress) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.SolidPaint! paint, Microsoft.Maui.Graphics.SolidPaint! endPaint, double progress) -> Microsoft.Maui.Graphics.SolidPaint!\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Thickness start, Microsoft.Maui.Thickness end, double progress) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Animations.Lerp.GetLerp(System.Type! type) -> Microsoft.Maui.Animations.Lerp?\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Paint in .NET MAUI\nDESCRIPTION: This snippet defines multiple constructors for the LinearGradientPaint class, allowing the creation of gradient paint using gradient paints or gradient stops positioned between specified points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.GradientPaint gradientPaint) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops, Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops) -> void\n```\n\n----------------------------------------\n\nTITLE: Animation and Easing Properties in MAUI\nDESCRIPTION: Static properties for different easing functions and animation utilities to control the timing and feel of UI animations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Animations.Lerp.Lerps -> System.Collections.Generic.Dictionary<System.Type!, Microsoft.Maui.Animations.Lerp!>!\nstatic readonly Microsoft.Maui.Easing.BounceIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.BounceOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicInOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.Linear -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinInOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SpringIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SpringOut -> Microsoft.Maui.Easing!\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Functionality in MAUI\nDESCRIPTION: Provides static methods for opening maps and handling map-related operations asynchronously. Includes options for different location types and launch configurations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for ImageButtonHandler in MAUI (C#)\nDESCRIPTION: Static methods and properties for mapping image button properties, including corner radius, padding, and stroke settings between IImageButton interface and platform implementations via IImageButtonHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: Checking Permission Status in MAUI\nDESCRIPTION: This static method asynchronously checks the status of a specified permission within a MAUI application. It returns a Task that resolves to a PermissionStatus enum indicating whether the permission is granted, denied, etc. It's generic to specify the permission type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.ApplicationModel.Permissions.CheckStatusAsync<TPermission>() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\"\n```\n\n----------------------------------------\n\nTITLE: Managing Secure Storage in .NET MAUI\nDESCRIPTION: Static methods and properties from the Microsoft.Maui.Storage.SecureStorage class for securely storing, retrieving, and managing sensitive data. These methods provide asynchronous operations for secure data storage.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Configuration and Messaging\nDESCRIPTION: Properties and methods for configuring a HybridWebView component and handling raw message communication between native code and web content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.set -> void\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.set -> void\nMicrosoft.Maui.Controls.HybridWebView.HybridWebView() -> void\nMicrosoft.Maui.Controls.HybridWebView.RawMessageReceived -> System.EventHandler<Microsoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs!>?\nMicrosoft.Maui.Controls.HybridWebView.SendRawMessage(string! rawMessage) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Soft Input for Text Inputs in C#\nDESCRIPTION: These extension methods provide functionality to show, hide, and check the status of the soft input (keyboard) for MAUI text input elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_187\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SoftInputExtensions.HideSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.SoftInputExtensions.IsSoftInputShowing(this Microsoft.Maui.ITextInput! targetView) -> bool\nstatic Microsoft.Maui.SoftInputExtensions.ShowSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Location Services Implementation in C#\nDESCRIPTION: Methods for location-based calculations and map operations, including distance calculations between coordinates and opening maps with specified locations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Animation Ticker Methods in .NET MAUI\nDESCRIPTION: Virtual methods for the Ticker class that control animation timing, frame rates, and system-level animation enabling/disabling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Animations.Ticker.IsRunning.get -> bool\nvirtual Microsoft.Maui.Animations.Ticker.MaxFps.get -> int\nvirtual Microsoft.Maui.Animations.Ticker.MaxFps.set -> void\nvirtual Microsoft.Maui.Animations.Ticker.OnSystemEnabledChanged() -> void\nvirtual Microsoft.Maui.Animations.Ticker.Start() -> void\nvirtual Microsoft.Maui.Animations.Ticker.Stop() -> void\nvirtual Microsoft.Maui.Animations.Ticker.SystemEnabled.get -> bool\nvirtual Microsoft.Maui.Animations.Ticker.SystemEnabled.set -> void\n```\n\n----------------------------------------\n\nTITLE: WKWebView Implementation for MAUI in C#\nDESCRIPTION: MauiWKWebView extends WKWebView to provide MAUI-specific functionality. It handles HTML loading, URL navigation, and provides access to the current URL.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiWKWebView\nMicrosoft.Maui.Platform.MauiWKWebView.CurrentUrl.get -> string?\nMicrosoft.Maui.Platform.MauiWKWebView.DidFinishNavigation(WebKit.WKWebView! webView, WebKit.WKNavigation! navigation) -> void\nMicrosoft.Maui.Platform.MauiWKWebView.LoadHtml(string? html, string? baseUrl) -> void\nMicrosoft.Maui.Platform.MauiWKWebView.LoadUrl(string? url) -> void\nMicrosoft.Maui.Platform.MauiWKWebView.MauiWKWebView(CoreGraphics.CGRect frame, Microsoft.Maui.Handlers.WebViewHandler! handler, WebKit.WKWebViewConfiguration! configuration) -> void\nMicrosoft.Maui.Platform.MauiWKWebView.MauiWKWebView(CoreGraphics.CGRect frame, Microsoft.Maui.Handlers.WebViewHandler! handler) -> void\nMicrosoft.Maui.Platform.MauiWKWebView.MauiWKWebView(Microsoft.Maui.Handlers.WebViewHandler! handler) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform Screenshot Interfaces in C#\nDESCRIPTION: Defines the IPlatformScreenshot interface for capturing screen content on various platforms, focusing on specific elements like UI views and windows. It outlines asynchronous capture methods and indicates whether capture is supported.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.IPlatformScreenshot.CaptureAsync(CoreAnimation.CALayer! layer, bool skipChildren) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nMicrosoft.Maui.Media.IPlatformScreenshot.CaptureAsync(UIKit.UIView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nMicrosoft.Maui.Media.IPlatformScreenshot.CaptureAsync(UIKit.UIWindow! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\n\n```\n\n----------------------------------------\n\nTITLE: Navigation View Extensions for Flyout Management\nDESCRIPTION: Extensions for configuring flyout behavior, icons, scroll modes, and backgrounds in MAUI Navigation Views on WinUI. These methods adapt cross-platform navigation drawer concepts to Windows navigation views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutBehavior(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutIconAsync(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutIconAsync(this Microsoft.UI.Xaml.Controls.AnimatedIcon! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutVerticalScrollMode(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.UI.Xaml.Controls.ScrollMode scrollMode) -> void\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdateFlyoutWidth(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdatePaneBackground(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Layout Extensions\nDESCRIPTION: Extension methods for handling layout operations in MAUI. These methods provide utilities for measuring, arranging, and computing frames for views and content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutExtensions.AdjustForFill(this Microsoft.Maui.Graphics.Size size, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> void\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContentUnbounded(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeFrame(this Microsoft.Maui.IView! view, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Thickness inset, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Stepper Handler Implementation\nDESCRIPTION: Handler implementation for MAUI Stepper control including platform view creation and property mapping\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.StepperHandler.ConnectHandler(Microsoft.Maui.Platform.MauiStepper platformView) -> void\noverride Microsoft.Maui.Handlers.StepperHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiStepper\noverride Microsoft.Maui.Handlers.StepperHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiStepper platformView) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapBackground(Microsoft.Maui.Handlers.IStepperHandler handler, Microsoft.Maui.IStepper view) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI UI Element Handlers\nDESCRIPTION: Static members and mapping methods for various UI element handlers in MAUI. These include handlers for ActivityIndicator, Application, Border, Button, CheckBox, ContentView, and DatePicker.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Web Authenticator Result Class in C#\nDESCRIPTION: Implementation of web authentication result handling, including properties for access tokens, callback URIs, and authentication properties management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Collections.Generic.IDictionary<string, string> properties) -> void\n~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Uri uri, Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder responseDecoder) -> void\n~Microsoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Uri uri) -> void\n```\n\n----------------------------------------\n\nTITLE: IMagnetometer Interface Definition in C#\nDESCRIPTION: Interface for the magnetometer sensor in .NET MAUI. Provides methods to start and stop monitoring, an event for reading changes, and properties to check support and monitoring status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: DrawArc Extensions for ICanvas in .NET MAUI Graphics\nDESCRIPTION: These static extension methods `DrawArc` extend the `ICanvas` interface in the Microsoft.Maui.Graphics library. They take an `ICanvas`, a `Rect` or `RectF` representing the bounds of the arc, start and end angles, a clockwise flag, and a closed flag.  They draw an arc on the canvas within the given bounds.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise, bool closed) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining IWebView Interface in C#\nDESCRIPTION: This snippet defines the IWebView interface with methods and properties for web view functionality in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool\nMicrosoft.Maui.IWebView.Reload() -> void\nMicrosoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!\nMicrosoft.Maui.IWebView.UserAgent.get -> string?\nMicrosoft.Maui.IWebView.UserAgent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IWebView Interface in C#\nDESCRIPTION: Defines the IWebView interface with properties and methods for managing web view functionality, including navigation, JavaScript evaluation, and cookie handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWebView.CanGoBack.get -> bool\nMicrosoft.Maui.IWebView.CanGoBack.set -> void\nMicrosoft.Maui.IWebView.CanGoForward.get -> bool\nMicrosoft.Maui.IWebView.CanGoForward.set -> void\nMicrosoft.Maui.IWebView.Cookies.get -> System.Net.CookieContainer!\nMicrosoft.Maui.IWebView.Eval(string! script) -> void\nMicrosoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Maui.IWebView.GoBack() -> void\nMicrosoft.Maui.IWebView.GoForward() -> void\nMicrosoft.Maui.IWebView.Navigated(Microsoft.Maui.WebNavigationEvent evnt, string! url, Microsoft.Maui.WebNavigationResult result) -> void\nMicrosoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool\nMicrosoft.Maui.IWebView.Reload() -> void\nMicrosoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!\nMicrosoft.Maui.IWebView.UserAgent.get -> string?\nMicrosoft.Maui.IWebView.UserAgent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Data Transfer APIs in MAUI\nDESCRIPTION: Interfaces and classes for clipboard operations and sharing content between applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(ShareFileRequest request) -> System.Threading.Tasks.Task\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(ShareTextRequest request) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: DatePicker Extensions for WinUI Calendar Controls\nDESCRIPTION: Extension methods for synchronizing DatePicker properties between MAUI and WinUI CalendarDatePicker controls. These methods update date values, character spacing, fonts, and constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, System.DateTime dateTime) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateMaximumDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateMinimumDate(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.CalendarDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Abstract methods and properties of the AbstractCanvas<TState> generic class. This class provides a foundation for implementing platform-specific canvas rendering with methods for drawing shapes, setting properties like alpha and blend mode, and managing state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.StateRestored(TState state) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Antialias.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.BlendMode.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillEllipse(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Static CreateEmbeddedWindowContext Extension Method\nDESCRIPTION: This code snippet presents a static extension method CreateEmbeddedWindowContext for MauiApp, which creates a MAUI context for an embedded window using a platform-specific UIWindow (UIKit). This is essential for hosting MAUI content within existing native applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.CreateEmbeddedWindowContext(this Microsoft.Maui.Hosting.MauiApp! mauiApp, UIKit.UIWindow! platformWindow) -> Microsoft.Maui.IMauiContext!\"\n```\n\n----------------------------------------\n\nTITLE: Platform App Actions via IPlatformAppActions in MAUI\nDESCRIPTION: Provides functionality for handling platform-specific shortcut items within a MAUI application using actions and completion handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IPlatformAppActions\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IPlatformAppActions.PerformActionForShortcutItem(UIKit.UIApplication! application, UIKit.UIApplicationShortcutItem! shortcutItem, UIKit.UIOperationHandler! completionHandler) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing UrlLoadingEventArgs and UrlLoadingStrategy in C# for Blazor WebView\nDESCRIPTION: Defines UrlLoadingEventArgs class and UrlLoadingStrategy enum for handling URL loading in Blazor WebView. Includes properties for URL and loading strategy.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs.Url.get -> System.Uri!\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs.UrlLoadingStrategy.get -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs.UrlLoadingStrategy.set -> void\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.CancelLoad = 2 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.OpenExternally = 0 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.OpenInWebView = 1 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\n```\n\n----------------------------------------\n\nTITLE: Convert Color to CGColor in MAUI\nDESCRIPTION: This method converts a Microsoft MAUI Color instance to a corresponding CoreGraphics CGColor object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGColor(this Microsoft.Maui.Graphics.Color color) -> CoreGraphics.CGColor\n```\n\n----------------------------------------\n\nTITLE: Creating an ImageSourceService Instance\nDESCRIPTION: This snippet shows how to create an instance of the `ImageSourceService` class, optionally providing a logger instance. The logger is used for logging events and errors related to image source loading and processing. The `ImageSourceService` is used for loading images from various sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ImageSourceService.ImageSourceService(Microsoft.Extensions.Logging.ILogger? logger = null) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining MediaPicker API in C#\nDESCRIPTION: Declares static methods for the MediaPicker class in the Microsoft.Maui.Media namespace. Includes methods for capturing and picking photos and videos, with options for customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!\nstatic Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Graphics Path Conversion Extensions for Android\nDESCRIPTION: Extension methods to convert MAUI PathF objects to Android Path objects with transformation options. These methods support scaling, offsetting, and zooming paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsAndroidPath(this Microsoft.Maui.Graphics.PathF path, float offsetX = 0, float offsetY = 0, float scaleX = 1, float scaleY = 1) -> Android.Graphics.Path\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsAndroidPath(this Microsoft.Maui.Graphics.PathF path, float ppu, float zoom) -> Android.Graphics.Path\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsAndroidPathFromSegment(this Microsoft.Maui.Graphics.PathF target, int segmentIndex, float ppu, float zoom) -> Android.Graphics.Path\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRotatedAndroidPath(this Microsoft.Maui.Graphics.PathF target, Microsoft.Maui.Graphics.PointF center, float ppu, float zoom, float angle) -> Android.Graphics.Path\n```\n\n----------------------------------------\n\nTITLE: Defining Network Connection Profiles in .NET MAUI\nDESCRIPTION: This snippet defines various network connection profiles in .NET MAUI's Networking module, establishing enums that represent different types of network connections, such as Cellular, Ethernet, WiFi, and Unknown. These definitions are crucial for enabling responsive behavior based on network availability.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Networking.ConnectionProfile.Cellular = 2 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.Ethernet = 3 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.Unknown = 0 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.WiFi = 4 -> Microsoft.Maui.Networking.ConnectionProfile\n```\n\n----------------------------------------\n\nTITLE: ScalingCanvas Implementation in MAUI Graphics\nDESCRIPTION: Canvas implementation that supports scaling operations. Includes methods for drawing shapes, transformations, and state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ScalingCanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.Rotate(float degrees) -> void\n```\n\n----------------------------------------\n\nTITLE: DrawEllipse Extensions for ICanvas in .NET MAUI Graphics\nDESCRIPTION: These static extension methods `DrawEllipse` extend the `ICanvas` interface in the Microsoft.Maui.Graphics library. They allow drawing an ellipse defined by a bounding rectangle, specified either as a `Rect` or a `RectF`.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Implementing IHotReloadableView Interface in C#\nDESCRIPTION: Defines an interface for views that support hot reloading, including methods for reloading and transferring state between views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.HotReload.IHotReloadableView.Reload() -> void\nMicrosoft.Maui.HotReload.IHotReloadableView.ReloadHandler.get -> Microsoft.Maui.HotReload.IReloadHandler!\nMicrosoft.Maui.HotReload.IHotReloadableView.ReloadHandler.set -> void\nMicrosoft.Maui.HotReload.IHotReloadableView.TransferState(Microsoft.Maui.IView! newView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Image Source Service Provider Extensions\nDESCRIPTION: Extension methods for retrieving image source services from providers in MAUI applications. These methods support both type-safe and runtime type checking approaches.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService?\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService?\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, Microsoft.Maui.IImageSource! imageSource) -> Microsoft.Maui.IImageSourceService!\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService(this Microsoft.Maui.IImageSourceServiceProvider! provider, System.Type! imageSourceType) -> Microsoft.Maui.IImageSourceService!\nstatic Microsoft.Maui.ImageSourceServiceProviderExtensions.GetRequiredImageSourceService<T>(this Microsoft.Maui.IImageSourceServiceProvider! provider) -> Microsoft.Maui.IImageSourceService!\n```\n\n----------------------------------------\n\nTITLE: Drawing String on Canvas in C# using MAUI Graphics\nDESCRIPTION: These methods extend the ICanvas interface to draw strings within specified bounds, with options for alignment, text flow, and line spacing adjustment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.RectF bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: File System Storage API Methods\nDESCRIPTION: Defines methods for accessing app directories, checking file existence, and opening app package files in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nIFileSystem.AppDataDirectory.get\nIFileSystem.AppPackageFileExistsAsync(string filename)\nIFileSystem.CacheDirectory.get\nIFileSystem.OpenAppPackageFileAsync(string filename)\n```\n\n----------------------------------------\n\nTITLE: MAUI View Property Update Extensions\nDESCRIPTION: Collection of extension methods for updating various view properties like dimensions, transforms, and visual attributes. These methods handle platform-specific view updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this object! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this object! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateOpacity(this object! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateRotation(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Image Conversion Extensions in Microsoft.Maui.Graphics\nDESCRIPTION: These methods convert images to Base64 strings or byte arrays in specified formats and quality. They extend image format manipulation capabilities, essential for encoding images efficiently. Support the Microsoft.Maui.Graphics.IImage interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBase64(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBytes(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Media Picker Operations in MAUI (C#)\nDESCRIPTION: Static methods for capturing and picking photos and videos. Includes methods to check capture support and to initiate capture or picking operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.Default.get -> Microsoft.Maui.Media.IMediaPicker!\nstatic Microsoft.Maui.Media.MediaPicker.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.MediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: MauiView Class Definition in C#\nDESCRIPTION: MauiView serves as a platform-specific wrapper for MAUI views. It provides methods to check measurement validity and properties to get or set the underlying view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiView.IsMeasureValid(double widthConstraint, double heightConstraint) -> bool\nMicrosoft.Maui.Platform.MauiView.MauiView() -> void\nMicrosoft.Maui.Platform.MauiView.View.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Platform.MauiView.View.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SizeRequest Struct in C# for MAUI\nDESCRIPTION: This snippet defines the SizeRequest struct, which represents a size request with minimum and requested sizes. It includes constructors, equality comparison, and properties for minimum and requested sizes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SizeRequest\nMicrosoft.Maui.SizeRequest.Equals(Microsoft.Maui.SizeRequest other) -> bool\nMicrosoft.Maui.SizeRequest.Minimum.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.SizeRequest.Minimum.set -> void\nMicrosoft.Maui.SizeRequest.Request.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.SizeRequest.Request.set -> void\nMicrosoft.Maui.SizeRequest.SizeRequest() -> void\nMicrosoft.Maui.SizeRequest.SizeRequest(Microsoft.Maui.Graphics.Size request, Microsoft.Maui.Graphics.Size minimum) -> void\nMicrosoft.Maui.SizeRequest.SizeRequest(Microsoft.Maui.Graphics.Size request) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Storage in .NET MAUI\nDESCRIPTION: This snippet describes the ISecureStorage interface in MAUI, which allows applications to securely store key-value pairs. It includes methods for setting, getting, and removing values from secure storage, vital for handling sensitive information securely within applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Storage.ISecureStorage\nMicrosoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Storage.ISecureStorage.Remove(string! key) -> bool\nMicrosoft.Maui.Storage.ISecureStorage.RemoveAll() -> void\nMicrosoft.Maui.Storage.ISecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: TextView Extensions for Editor Controls in .NET MAUI iOS\nDESCRIPTION: Extension methods for configuring UITextView components based on MAUI IEditor properties. These methods handle multiline text input features like formatting, keyboard options, and text restrictions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_191\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateCharacterSpacing(this UIKit.UITextView! textView, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateCursorPosition(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateFont(this UIKit.UITextView! textView, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateHorizontalTextAlignment(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateIsEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateIsReadOnly(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateIsSpellCheckEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateIsTextPredictionEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateKeyboard(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateMaxLength(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IElement Interface in C#\nDESCRIPTION: The IElement interface provides foundational properties for UI elements, such as getting and setting handlers, and accessing parent elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IElement.Handler.get -> Microsoft.Maui.IElementHandler?\nMicrosoft.Maui.IElement.Handler.set -> void\nMicrosoft.Maui.IElement.Parent.get -> Microsoft.Maui.IElement?\n```\n\n----------------------------------------\n\nTITLE: View Transformation Extensions for iOS\nDESCRIPTION: Extension methods for handling UIView transformations and core animation layers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateTransformation(this UIKit.UIView! platformView, Microsoft.Maui.IView? view, CoreAnimation.CALayer? layer, CoreGraphics.CGPoint? originalAnchor) -> void\n```\n\n----------------------------------------\n\nTITLE: View Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for ViewHandler which serves as the base for all view handlers. Includes a comprehensive set of methods for handling common view properties such as positioning, sizing, visibility, and visual effects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Extension Methods in MAUI Graphics\nDESCRIPTION: Extension methods for manipulating text attributes including font size, colors, styles and text decorations. These methods provide a fluent interface for working with text formatting in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nstatic void SetFontSize(this Dictionary<TextAttribute, string> attributes, float value)\nstatic void SetForegroundColor(this Dictionary<TextAttribute, string> attributes, string value)\nstatic void SetItalic(this Dictionary<TextAttribute, string> attributes, bool value)\nstatic void SetMarker(this Dictionary<TextAttribute, string> attributes, MarkerType value)\nstatic void SetStrikethrough(this Dictionary<TextAttribute, string> attributes, bool value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flashlight Functionality in .NET MAUI - C#\nDESCRIPTION: This snippet includes methods for controlling the flashlight functionality in .NET MAUI applications. Developers can check if the flashlight is supported and can turn it on or off asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.Default.get -> Microsoft.Maui.Devices.IFlashlight!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Vibration Interface Definition in MAUI\nDESCRIPTION: Interface for controlling device vibration in MAUI applications. Provides methods to vibrate the device with or without duration, cancel vibration, and check support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IVibration.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IVibration.Vibrate() -> void\nMicrosoft.Maui.Devices.IVibration.Vibrate(System.TimeSpan duration) -> void\nMicrosoft.Maui.Devices.IVibration.Cancel() -> void\n```\n\n----------------------------------------\n\nTITLE: Path Operations in Microsoft.Maui.Graphics\nDESCRIPTION: Method signatures for path manipulation and drawing operations in the PathF class, including curve generation, line drawing, and path transformation functions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF.AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.LineTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Accessing Magnetometer in MAUI (C#)\nDESCRIPTION: Static methods and events for interacting with the device's magnetometer sensor. Includes methods to start and stop monitoring, and an event for reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Orientation Sensor in C# MAUI\nDESCRIPTION: Static methods for interacting with the device's orientation sensor. Includes event handling for sensor changes, starting and stopping the sensor, and comparison operators for sensor data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator !=(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator ==(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Orientation Sensor API in .NET MAUI\nDESCRIPTION: Static methods for accessing and monitoring the device orientation sensor. Provides methods to check if the orientation sensor is currently monitoring device orientation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Default.get -> Microsoft.Maui.Devices.Sensors.IOrientationSensor!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsMonitoring.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Display Info Class Implementation in MAUI\nDESCRIPTION: Class for handling display information in MAUI applications. Contains properties for display dimensions, density, orientation, rotation, and refresh rate, with multiple constructors for various initialization scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.DisplayInfo.Width.get -> double\nMicrosoft.Maui.Devices.DisplayInfo.Height.get -> double\nMicrosoft.Maui.Devices.DisplayInfo.Density.get -> double\nMicrosoft.Maui.Devices.DisplayInfo.Orientation.get -> Microsoft.Maui.Devices.DisplayOrientation\nMicrosoft.Maui.Devices.DisplayInfo.Rotation.get -> Microsoft.Maui.Devices.DisplayRotation\nMicrosoft.Maui.Devices.DisplayInfo.RefreshRate.get -> float\nMicrosoft.Maui.Devices.DisplayInfo.DisplayInfo() -> void\nMicrosoft.Maui.Devices.DisplayInfo.DisplayInfo(double width, double height, double density, Microsoft.Maui.Devices.DisplayOrientation orientation, Microsoft.Maui.Devices.DisplayRotation rotation) -> void\nMicrosoft.Maui.Devices.DisplayInfo.DisplayInfo(double width, double height, double density, Microsoft.Maui.Devices.DisplayOrientation orientation, Microsoft.Maui.Devices.DisplayRotation rotation, float rate) -> void\nMicrosoft.Maui.Devices.DisplayInfo.Equals(Microsoft.Maui.Devices.DisplayInfo other) -> bool\n```\n\n----------------------------------------\n\nTITLE: Extending IServiceCollection for WPF Blazor WebView in C#\nDESCRIPTION: Defines extension methods for IServiceCollection to add Blazor WebView services and developer tools for WPF applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Wpf/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Extensions.DependencyInjection.BlazorWebViewServiceCollectionExtensions\nstatic Microsoft.Extensions.DependencyInjection.BlazorWebViewServiceCollectionExtensions.AddBlazorWebViewDeveloperTools(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Extensions.DependencyInjection.BlazorWebViewServiceCollectionExtensions.AddWpfBlazorWebView(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Components.WebView.Wpf.IWpfBlazorWebViewBuilder!\n```\n\n----------------------------------------\n\nTITLE: BindableObject Extension Methods\nDESCRIPTION: Extension methods for BindableObject class to handle property binding and property value management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BindableObjectExtensions\n{\n    public static void SetBinding<TSource, TProperty>(\n        this BindableObject self,\n        BindableProperty targetProperty,\n        Func<TSource, TProperty> getter,\n        BindingMode mode = BindingMode.Default,\n        IValueConverter? converter = null,\n        object? converterParameter = null,\n        string? stringFormat = null,\n        object? source = null,\n        object? fallbackValue = null,\n        object? targetNullValue = null\n    ) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base View Handler Methods for iOS\nDESCRIPTION: Method signatures showing common base handler functionality implemented in the ViewHandler generic class. These methods handle core layout and container management for MAUI controls on iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI App Builder (C#)\nDESCRIPTION: Static method to create a MauiAppBuilder instance, which is the entry point for configuring a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.MauiApp.CreateBuilder(bool useDefaults = true) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Window Extensions for Windows UI in MAUI Applications\nDESCRIPTION: Extension methods for Microsoft.UI.Xaml.Window that manage window properties, dimensions, and platform-specific behaviors in MAUI applications. These methods provide access to native window handles and enable window size and position manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.WindowExtensions.GetAppWindow(this Microsoft.UI.Xaml.Window! platformWindow) -> Microsoft.UI.Windowing.AppWindow?\nstatic Microsoft.Maui.Platform.WindowExtensions.GetDisplayDensity(this Microsoft.UI.Xaml.Window! platformWindow) -> float\nstatic Microsoft.Maui.Platform.WindowExtensions.GetWindow(this Microsoft.UI.Xaml.Window! platformWindow) -> Microsoft.Maui.IWindow?\nstatic Microsoft.Maui.Platform.WindowExtensions.GetWindowHandle(this Microsoft.UI.Xaml.Window! platformWindow) -> nint\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateHeight(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumHeight(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumSize(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateMaximumWidth(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumHeight(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumSize(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateMinimumWidth(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdatePosition(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateSize(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateTitle(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateWidth(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateX(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Platform.WindowExtensions.UpdateY(this Microsoft.UI.Xaml.Window! platformWindow, Microsoft.Maui.IWindow! window) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WebViewHandler Static Methods in C#\nDESCRIPTION: These static methods are part of the WebViewHandler class in the Microsoft.Maui.Handlers namespace. They handle operations specific to web views such as JavaScript evaluation, navigation, and source mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\n// ... (additional WebViewHandler methods)\n```\n\n----------------------------------------\n\nTITLE: WindowHandler Mapping Methods (C#)\nDESCRIPTION: Static methods in the WindowHandler class that map window properties like content, dimensions, position, title, and toolbar to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WindowHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapContent(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapHeight(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWindow!, Microsoft.Maui.Handlers.IWindowHandler!>!\nstatic Microsoft.Maui.Handlers.WindowHandler.MapRequestDisplayDensity(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window, object? args) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapTitle(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! window) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapToolbar(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapWidth(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapX(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\nstatic Microsoft.Maui.Handlers.WindowHandler.MapY(Microsoft.Maui.Handlers.IWindowHandler! handler, Microsoft.Maui.IWindow! view) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Font Collection Configuration Extensions\nDESCRIPTION: Static extension methods for configuring fonts in MAUI applications, including adding embedded resource fonts and configuring font collections. These methods support custom fonts across platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddEmbeddedResourceFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, System.Reflection.Assembly! assembly, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IFontCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Mapping PickerHandler Properties in MAUI (C#)\nDESCRIPTION: Static methods for mapping various properties of the IPicker interface to the PickerHandler. These methods handle updates to the selected index, text color, title, title color, and vertical text alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Working with App Actions in .NET MAUI\nDESCRIPTION: Methods for managing app actions (shortcuts) including retrieving, setting, and handling action events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppActions.Current.get -> Microsoft.Maui.ApplicationModel.IAppActions!\nstatic Microsoft.Maui.ApplicationModel.AppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\nstatic Microsoft.Maui.ApplicationModel.AppActions.IsSupported.get -> bool\nstatic Microsoft.Maui.ApplicationModel.AppActions.OnAppAction -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?\nstatic Microsoft.Maui.ApplicationModel.AppActions.SetAsync(params Microsoft.Maui.ApplicationModel.AppAction![]! actions) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.AppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Getting Placemarks from Coordinates - C# .NET MAUI\nDESCRIPTION: Asynchronously retrieves placemarks based on given latitude and longitude. This method returns a task that provides an enumerable collection of placemarks. It requires the latitude and longitude as input parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: Menu Component Handlers in .NET MAUI\nDESCRIPTION: Static mapping methods for menu-related components including MenuBar, MenuBarItem, MenuFlyout, MenuFlyoutItem, and MenuFlyoutSeparator. These methods enable cross-platform menu functionality for MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing BindableObject Extensions in C#\nDESCRIPTION: Defines extension methods for BindableObject to set bindings and create binding instances in Microsoft.Maui.Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding<TSource, TProperty>(this Microsoft.Maui.Controls.BindableObject! self, Microsoft.Maui.Controls.BindableProperty! targetProperty, System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> void\nstatic Microsoft.Maui.Controls.BindingBase.Create<TSource, TProperty>(System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> Microsoft.Maui.Controls.BindingBase!\n```\n\n----------------------------------------\n\nTITLE: Rectangle Class Definition in MAUI Graphics\nDESCRIPTION: Class definitions and methods for handling rectangular shapes in double precision. Includes methods for manipulation, intersection, union and geometric operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect.Inflate(Microsoft.Maui.Graphics.Size sz) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.IntersectsWith(Microsoft.Maui.Graphics.Rect r) -> bool\n```\n\n----------------------------------------\n\nTITLE: LayoutHandler Static Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods for handling layout container operations like adding, removing, inserting, and clearing child elements. Also includes methods for mapping visual properties like background and clip-to-bounds behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapBackground(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClipsToBounds(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapInsert(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining LockableObservableListWrapper Class in .NET MAUI\nDESCRIPTION: This snippet defines the LockableObservableListWrapper class that encapsulates a list with locking capabilities to control concurrent access. It provides methods for collection manipulation while ensuring thread-safety during operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.LockableObservableListWrapper.Add(string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Clear() -> void\nMicrosoft.Maui.LockableObservableListWrapper.Contains(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.CopyTo(string![]! array, int arrayIndex) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Count.get -> int\nMicrosoft.Maui.LockableObservableListWrapper.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!\nMicrosoft.Maui.LockableObservableListWrapper.IndexOf(string! item) -> int\nMicrosoft.Maui.LockableObservableListWrapper.Insert(int index, string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Remove(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.RemoveAt(int index) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Extensions for ICanvas in MAUI Graphics\nDESCRIPTION: Extension methods for drawing operations on ICanvas including rounded rectangles, strings, arcs, circles, and other shapes. These methods provide convenient ways to draw various geometric shapes with different parameters and styles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic void DrawRoundedRectangle(this ICanvas target, RectF rect, float cornerRadius);\nstatic void DrawString(this ICanvas target, string value, Rect bounds, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);\nstatic void FillCircle(this ICanvas target, float centerX, float centerY, float radius);\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual View for Menu Flyout Handler in C#\nDESCRIPTION: This property retrieves the virtual view associated with the IMenuFlyoutHandler. It returns an instance of the IMenuFlyout interface representing the virtual menu flyout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyout!\n```\n\n----------------------------------------\n\nTITLE: CommandMapper Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for the CommandMapper class that allow modifying command mappings. These methods enable appending, prepending, modifying, and replacing mappings for command handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.ICommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in C# using Microsoft Maui\nDESCRIPTION: These snippets outline interfaces and properties related to tracking application versions. The IVersionTracking interface provides methods and properties to access version histories and check first launch conditions. It mainly works with string data representing version numbers and bool returning methods for checking version history constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.BuildHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledVersion.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchEver.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForBuild(string! build) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForVersion(string! version) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousBuild.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousVersion.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.Track() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.VersionHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient Paint Attributes in MAUI\nDESCRIPTION: This snippet includes constructors and property setters/getters for the LinearGradientPaint class, allowing developers to create and manipulate linear gradient paints with specified start and end points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.set -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint() -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Stepper Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for updating MauiStepper control properties based on MAUI IStepper values. These methods handle increment, enabled state, minimum/maximum values, and current value synchronization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_169\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateIncrement(this Microsoft.Maui.Platform.MauiStepper! linearLayout, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateIsEnabled(this Microsoft.Maui.Platform.MauiStepper! linearLayout, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateMaximum(this Microsoft.Maui.Platform.MauiStepper! linearLayout, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateMinimum(this Microsoft.Maui.Platform.MauiStepper! linearLayout, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateValue(this Microsoft.Maui.Platform.MauiStepper! linearLayout, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding ViewHandler and WindowHandler Methods for Windows UI in C#\nDESCRIPTION: These methods override the ViewHandler and WindowHandler classes to manage views and windows in Windows UI. They handle getting desired sizes, arranging views, managing containers, and connecting/disconnecting handlers for windows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void\noverride Microsoft.Maui.Handlers.WindowHandler.ConnectHandler(Microsoft.UI.Xaml.Window! platformView) -> void\noverride Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Window!\noverride Microsoft.Maui.Handlers.WindowHandler.DisconnectHandler(Microsoft.UI.Xaml.Window! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Rect Structure Implementation in C#\nDESCRIPTION: Implementation of a Rect structure representing a rectangle with double precision coordinates. Includes geometric operations, property accessors, and rectangle manipulation methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\npublic struct Rect {\n    public Rect() -> void\n    public Rect(double x, double y, double width, double height) -> void\n    public Rect(Point loc, Size sz) -> void\n    public double X { get; set; }\n    public double Y { get; set; }\n    public double Width { get; set; }\n    public double Height { get; set; }\n    public Point Location { get; set; }\n    public Size Size { get; set; }\n    public bool IsEmpty { get; }\n    public double Left { get; set; }\n    public double Top { get; set; }\n    public double Right { get; set; }\n    public double Bottom { get; set; }\n    public Point Center { get; }\n    public bool Contains(double x, double y) -> bool\n    public bool Contains(Point pt) -> bool\n    public bool Contains(Rect rect) -> bool\n    public void Deconstruct(out double x, out double y, out double width, out double height) -> void\n    public bool Equals(Rect other) -> bool\n    public Rect Inflate(double width, double height) -> Rect\n    public Rect Inflate(Size sz) -> Rect\n    public Rect Intersect(Rect r) -> Rect\n    public bool IntersectsWith(Rect r) -> bool\n    public Rect Offset(double dx, double dy) -> Rect\n    public Rect Offset(Point dr) -> Rect\n    public Rect Round() -> Rect\n    public Rect Union(Rect r) -> Rect\n}\n```\n\n----------------------------------------\n\nTITLE: ItemsView Handler Class Definitions\nDESCRIPTION: Class definitions for various ItemsView handlers including CarouselView and CollectionView implementations with their constructors and core methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2\nMicrosoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.CarouselViewHandler2() -> void\nMicrosoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2\nMicrosoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.CollectionViewHandler2() -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility and App Actions in C#\nDESCRIPTION: This snippet shows static methods for MAUI's SemanticScreenReader and AppActions classes. It includes methods for announcing text, retrieving app actions, and setting app actions. These methods provide cross-platform accessibility and app functionality features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Accessibility.SemanticScreenReader.Announce(string! text) -> void\nstatic Microsoft.Maui.Accessibility.SemanticScreenReader.Default.get -> Microsoft.Maui.Accessibility.ISemanticScreenReader!\nstatic Microsoft.Maui.ApplicationModel.AppActions.Current.get -> Microsoft.Maui.ApplicationModel.IAppActions!\nstatic Microsoft.Maui.ApplicationModel.AppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\nstatic Microsoft.Maui.ApplicationModel.AppActions.IsSupported.get -> bool\nstatic Microsoft.Maui.ApplicationModel.AppActions.OnAppAction -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?\nstatic Microsoft.Maui.ApplicationModel.AppActions.SetAsync(params Microsoft.Maui.ApplicationModel.AppAction![]! actions) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.AppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Filling Ellipses in Microsoft.Maui.Graphics\nDESCRIPTION: These methods fill ellipses on a canvas. They work with different types of rectangle structures to define the ellipse bounds. Use cases include creating ovals and elliptical shapes. Requires Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillEllipse(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Toolbar, Generic ViewHandler, and WebView Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for ToolbarHandler, ViewHandler<TVirtualView, TPlatformView>, and WebViewHandler classes that manage platform element creation, desired size calculation, and container management for toolbars, generic views, and web views in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> UIKit.UINavigationBar!\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void\noverride Microsoft.Maui.Handlers.WebViewHandler.CreatePlatformView() -> WebKit.WKWebView!\noverride Microsoft.Maui.Handlers.WebViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Overriding RefreshViewHandler Methods for Tizen Platform\nDESCRIPTION: These methods override RefreshViewHandler functionality to create, connect, and disconnect MauiRefreshLayout elements for the Tizen implementation of MAUI refresh views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiRefreshLayout! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiRefreshLayout!\noverride Microsoft.Maui.Handlers.RefreshViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiRefreshLayout! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: PlatformCanvas Override Methods Implementation in C#\nDESCRIPTION: Implementation of override methods in PlatformCanvas class that provide platform-specific rendering operations for shapes, transformations, and state management in the graphics subsystem.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.Alpha.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.Antialias.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.BlendMode.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.ClipRectangle(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillRectangle(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FontSize.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.MiterLimit.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawRectangle(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformRotate(float degrees, float radians, float x, float y) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformRotate(float degrees, float radians) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformScale(float sx, float sy) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformStrokeSize.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformTranslate(float tx, float ty) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.SaveState() -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.StrokeLineCap.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.StrokeLineJoin.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.SubtractFromClip(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: CoreGraphics Conversion Extensions in .NET MAUI\nDESCRIPTION: Extensions for converting between MAUI geometric primitives and CoreGraphics structures. These methods enable seamless translation between cross-platform representation of points, sizes, and rectangles and their iOS-specific counterparts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.IsCloseTo(this CoreGraphics.CGSize size0, CoreGraphics.CGSize size1, System.Runtime.InteropServices.NFloat tolerance) -> bool\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToCGRect(this Microsoft.Maui.Graphics.Rect rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToCGSize(this Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToPoint(this CoreGraphics.CGPoint size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToRectangle(this CoreGraphics.CGRect rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Platform.CoreGraphicsExtensions.ToSize(this CoreGraphics.CGSize size) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: SearchBar Extension Methods for iOS in .NET MAUI\nDESCRIPTION: Static extension methods for updating UISearchBar properties based on MAUI ISearchBar settings. These methods handle various properties like readonly state, spell check, text prediction, keyboard type, and text alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_183\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsReadOnly(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsSpellCheckEnabled(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField = null) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateIsTextPredictionEnabled(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField = null) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateKeyboard(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateMaxLength(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdatePlaceholder(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateText(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateVerticalTextAlignment(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar, UIKit.UITextField? textField) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateVerticalTextAlignment(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler Connection in .NET MAUI Android\nDESCRIPTION: These method signatures show the ConnectHandler methods implemented by various .NET MAUI handlers for Android. ConnectHandler is called when a handler is connected to its platform view, allowing initialization and setup of event handlers for the native control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.EditorHandler.ConnectHandler(AndroidX.AppCompat.Widget.AppCompatEditText! platformView) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.ConnectHandler(AndroidX.AppCompat.Widget.AppCompatEditText! platformView) -> void\noverride Microsoft.Maui.Handlers.FlyoutViewHandler.ConnectHandler(Android.Views.View! platformView) -> void\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.ConnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageButtonHandler.ConnectHandler(Google.Android.Material.ImageView.ShapeableImageView! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageHandler.ConnectHandler(Android.Widget.ImageView! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void\noverride Microsoft.Maui.Handlers.RadioButtonHandler.ConnectHandler(Android.Views.View! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiSwipeRefreshLayout! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiScrollView! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Hardware Features Interfaces in C#\nDESCRIPTION: Interfaces for controlling device hardware features including flashlight, haptic feedback, and vibration functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IFlashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.IFlashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nMicrosoft.Maui.Devices.IFlashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\nMicrosoft.Maui.Devices.IHapticFeedback.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IHapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type) -> void\nMicrosoft.Maui.Devices.IVibration.Cancel() -> void\nMicrosoft.Maui.Devices.IVibration.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IVibration.Vibrate() -> void\nMicrosoft.Maui.Devices.IVibration.Vibrate(System.TimeSpan duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Stroke Dash Pattern Configuration in .NET MAUI Canvas State\nDESCRIPTION: The method to configure the stroke dash pattern is defined here, allowing customization of the stroke style used in rendering graphics on the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.SetStrokeDashPattern(float[] pattern, float strokeDashOffset, float strokeSize) -> void\n```\n\n----------------------------------------\n\nTITLE: MapSpan Class Definition\nDESCRIPTION: Class representing a geographic region on a map, defined by center coordinates and span distances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MapSpan\n{\n    public MapSpan(Location center, double latitudeDegrees, double longitudeDegrees);\n    public Location Center { get; }\n    public double LatitudeDegrees { get; }\n    public double LongitudeDegrees { get; }\n    public Distance Radius { get; }\n    public MapSpan WithZoom(double zoomFactor);\n    public MapSpan ClampLatitude(double north, double south);\n}\n```\n\n----------------------------------------\n\nTITLE: KeyboardFlags Enum in .NET MAUI\nDESCRIPTION: Enumeration of flags that control keyboard behavior for text input in MAUI applications. These flags determine capitalization, spell checking, and suggestion features for the virtual keyboard.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.All = -1 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeCharacter = 16 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeNone = 32 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeSentence = 1 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeWord = 8 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.None = 0 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.Spellcheck = 2 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.Suggestions = 4 -> Microsoft.Maui.KeyboardFlags\n```\n\n----------------------------------------\n\nTITLE: Override Selected Property Setter (TemplatedCell)\nDESCRIPTION: This code snippet overrides the setter of the Selected property in TemplatedCell2, suggesting a way to customize how the selected state of a templated cell is managed within a MAUI ItemsView. This allows for controlling the cell's appearance or behavior upon selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.TemplatedCell2.Selected.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Constructing ImageButtonHandler in MAUI\nDESCRIPTION: Defines constructors for the `ImageButtonHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. This handler manages the platform-specific implementation of a MAUI ImageButton.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Rect Methods and Operators in Microsoft.Maui.Graphics\nDESCRIPTION: Static methods and operator overloads for the Rect struct in Microsoft.Maui.Graphics. Includes rectangle creation, conversion, comparison, and geometric operations like intersection and union.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_168\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator CoreGraphics.CGRect(Microsoft.Maui.Graphics.Rect rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Microsoft.Maui.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: App Actions via IAppActions in MAUI\nDESCRIPTION: The 'IAppActions' interface facilitates handling app actions and shortcuts within an application, allowing asynchronous queries and modifications of current actions. It also includes support checks for these actions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.AppActionActivated -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.IsSupported.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: WebView and Window Handler Overrides in .NET MAUI for Android\nDESCRIPTION: Method overrides for WebViewHandler and WindowHandler classes in MAUI, responsible for mapping cross-platform abstractions to native Android implementations. These methods handle view creation, connection, and platform-specific lifecycle management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.WebViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.WindowHandler.ConnectHandler(Android.App.Activity! platformView) -> void\noverride Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> Android.App.Activity!\n```\n\n----------------------------------------\n\nTITLE: Overriding SearchBar and ShapeView Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for SearchBarHandler and ShapeViewHandler classes that manage platform view creation, handler connection/disconnection, desired size calculation, and container needs for search bars and custom shapes in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SearchBarHandler.ConnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSearchBar!\noverride Microsoft.Maui.Handlers.SearchBarHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ShapeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiShapeView!\noverride Microsoft.Maui.Handlers.ShapeViewHandler.NeedsContainer.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Mapping ImageHandler Properties in MAUI Framework\nDESCRIPTION: Static methods and properties for ImageHandler that map IImage properties to platform implementations. These methods handle aspect ratio, animation state, and image source loading for image controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapSource(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Override LayoutChildren in ContentPage (C#)\nDESCRIPTION: This snippet indicates overriding the `LayoutChildren` method in a `ContentPage`. It receives the x and y coordinates, width and height, and handles the layout of the children within the page.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.ContentPage.LayoutChildren(double x, double y, double width, double height) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Label Properties in C#\nDESCRIPTION: These static methods map various properties of a Label, such as CharacterSpacing, Font, TextAlignment, LineHeight, MaxLines, Padding, Text, TextColor, and TextDecorations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Weight Constants in Microsoft.Maui.Graphics C#\nDESCRIPTION: Constant integer values representing standard font weights in the Microsoft.Maui.Graphics.FontWeights class. These values align with CSS font weight standards and are used for text rendering across MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Default = -1 -> int\nconst Microsoft.Maui.Graphics.FontWeights.DemiBold = 600 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraBlack = 950 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraBold = 800 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraLight = 200 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Heavy = 900 -> int\n```\n\n----------------------------------------\n\nTITLE: Dispatcher Extensions for MAUI\nDESCRIPTION: Extension methods for handling asynchronous operations and timer functionality in the MAUI dispatcher system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void\n```\n\n----------------------------------------\n\nTITLE: WebView Interface Methods in .NET MAUI\nDESCRIPTION: Interface methods for WebView interactions including navigation, JavaScript evaluation, and cookie management in .NET MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string!>!\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Conversion Extensions for iOS in .NET MAUI\nDESCRIPTION: Extension methods for converting MAUI TextAlignment values to their UIKit equivalents. These methods translate abstract alignment values to platform-specific alignment types for both horizontal and vertical alignments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_189\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextAlignmentExtensions.ToPlatformHorizontal(this Microsoft.Maui.TextAlignment alignment, Microsoft.Maui.IView! view) -> UIKit.UITextAlignment\nstatic Microsoft.Maui.Platform.TextAlignmentExtensions.ToPlatformHorizontal(this Microsoft.Maui.TextAlignment alignment) -> UIKit.UITextAlignment\nstatic Microsoft.Maui.Platform.TextAlignmentExtensions.ToPlatformVertical(this Microsoft.Maui.TextAlignment alignment) -> UIKit.UIControlContentVerticalAlignment\n```\n\n----------------------------------------\n\nTITLE: Mapping Picker Properties in C# for MAUI\nDESCRIPTION: Static methods for mapping text color, title, title color, and vertical text alignment properties of a Picker control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Management in Microsoft.Maui (C#)\nDESCRIPTION: Details constructors and utility methods for managing color objects within the Microsoft.Maui framework. Supports color creation from RGBA components or vectors and conversion to HSL format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.Color() -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue, byte alpha) -> void\n// Additional color constructors\nMicrosoft.Maui.Graphics.Color.GetHue() -> float\nMicrosoft.Maui.Graphics.Color.ToHsl(out float h, out float s, out float l) -> void\n```\n\n----------------------------------------\n\nTITLE: UI Control Handlers\nDESCRIPTION: Handler implementations for MAUI UI controls including ActivityIndicator, Button, CheckBox, and DatePicker with property mapping and command handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutHandler Class in C#\nDESCRIPTION: Declares the LayoutHandler class with methods for managing child views and constructors for initializing the handler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler\nMicrosoft.Maui.Handlers.LayoutHandler.Add(Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Clear() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Insert(int index, Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Remove(Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Update(int index, Microsoft.Maui.IView! child) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.UpdateZIndex(Microsoft.Maui.IView! child) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Platform Properties in .NET MAUI\nDESCRIPTION: Static properties for identifying different device platforms in .NET MAUI applications. These properties allow checking what platform the application is running on for platform-specific code paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.MacCatalyst.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.macOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.operator !=(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool\nstatic Microsoft.Maui.Devices.DevicePlatform.operator ==(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool\nstatic Microsoft.Maui.Devices.DevicePlatform.Tizen.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.tvOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.Unknown.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.UWP.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.watchOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.WinUI.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\n----------------------------------------\n\nTITLE: Set DateTimeOffset Value in MAUI Preferences\nDESCRIPTION: Static methods to store DateTimeOffset values in preferences storage. Includes overloads with and without shared name parameter. Void return type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Tracking Application Version with Microsoft.Maui in C#\nDESCRIPTION: Includes methods to track application version history and determine first launch states using `Microsoft.Maui.ApplicationModel.VersionTracking`. It exposes various properties and methods for obtaining version information, ensuring the developer maintains version-related state efficiently.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.BuildHistory.get -> System.Collections.Generic.IEnumerable<string!>!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentBuild.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentVersion.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Default.get -> Microsoft.Maui.ApplicationModel.IVersionTracking!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledBuild.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledVersion.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchEver.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForBuild(string! build) -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForVersion(string! version) -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.PreviousBuild.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.PreviousVersion.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Track() -> void\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.VersionHistory.get -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Managing MenuBar Items with IMenuBarHandler in MAUI\nDESCRIPTION: Defines methods for the `IMenuBarHandler` interface in MAUI to add, clear, insert, and remove menu bar items. Also provides access to the PlatformView and VirtualView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarHandler.Clear() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuBarHandler.VirtualView.get -> Microsoft.Maui.IMenuBar!\"\n```\n\n----------------------------------------\n\nTITLE: SliderHandler Mapping Methods in MAUI (C#)\nDESCRIPTION: Static methods for SliderHandler that map slider properties from the cross-platform ISlider interface to platform-specific implementations. Includes mappers for properties like minimum/maximum values, track colors, thumb appearance, and current value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Menu Flyout Sub Item in .NET MAUI\nDESCRIPTION: The code snippet provides the IMenuFlyoutSubItemHandler interface responsible for managing submenu items in a flyout menu, with methods for manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Clear() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutSubItem!\n```\n\n----------------------------------------\n\nTITLE: Updating DatePicker Format in .NET MAUI for iOS\nDESCRIPTION: This method updates the format of a DatePicker control in .NET MAUI for iOS. It takes a MauiDatePicker, an IDatePicker interface, and an optional UIDatePicker as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_174\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding View Lifecycle: ViewDidLoad and ViewWillLayoutSubviews in .NET MAUI\nDESCRIPTION: These methods are overridden to customize the behavior of the view lifecycle for the ItemsViewController2<TItemsView>. ViewDidLoad initializes the view’s state, while ViewWillLayoutSubviews is called before the layout of subviews.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.ViewDidLoad() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.ViewWillLayoutSubviews() -> void\n```\n\n----------------------------------------\n\nTITLE: Easing and Font Utility Methods in .NET MAUI\nDESCRIPTION: Static methods and operators for Easing and Font classes that provide default values and conversion capabilities. These methods simplify working with animation easing functions and font definitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Easing.Default.get -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Easing.implicit operator Microsoft.Maui.Easing!(System.Func<double, double>! func) -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Flashlight APIs in MAUI C#\nDESCRIPTION: Static methods for controlling device flashlight functionality, including checking support status, turning the flashlight on and off, and accessing the default implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.Default.get -> Microsoft.Maui.Devices.IFlashlight!\nstatic Microsoft.Maui.Devices.Flashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Geometry Utility Functions\nDESCRIPTION: Static utility methods for geometric calculations including angle conversions, distance calculations, and point transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_165\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetDistance(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF center, Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Arranging Children in LayoutManager\nDESCRIPTION: This snippet defines an abstract method for arranging child elements within specified bounds. This is an essential method for the layout management of UI elements in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.Layouts.LayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Managing MenuFlyout Items with IMenuFlyoutHandler in MAUI\nDESCRIPTION: Defines methods for the `IMenuFlyoutHandler` interface in MAUI to add, clear, and insert menu elements into a flyout. These methods facilitate the dynamic construction of menu flyouts within a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuFlyoutHandler.Add(Microsoft.Maui.IMenuElement! view) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuFlyoutHandler.Clear() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IMenuFlyoutHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Mapping View Properties in C#\nDESCRIPTION: Static methods for mapping various View properties, including layout, appearance, and interaction-related properties. It also defines ViewCommandMapper and ViewMapper for the ViewHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Align Items\nDESCRIPTION: Declares enums for aligning individual items within a flex layout, enhancing layout control for various item arrangements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignItems.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignItems\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignItems.End = 4 -> Microsoft.Maui.Layouts.FlexAlignItems\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignItems.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignItems\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignItems.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignItems\n```\n\n----------------------------------------\n\nTITLE: WebViewHandler Methods and Mappers\nDESCRIPTION: Static methods and mappers for WebViewHandler that handle web navigation, JavaScript execution, and web source management. These methods define behavior for the cross-platform WebView component.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapReload(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapUserAgent(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: Keyboard Input Scope Conversion Extensions\nDESCRIPTION: Extensions for converting MAUI keyboard types to WinUI input scopes and scope names. These methods map cross-platform keyboard concepts to platform-specific input configurations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.KeyboardExtensions.ToInputScope(this Microsoft.Maui.Keyboard! self) -> Microsoft.UI.Xaml.Input.InputScope!\nstatic Microsoft.Maui.Platform.KeyboardExtensions.ToInputScopeName(this Microsoft.Maui.Keyboard! self) -> Microsoft.UI.Xaml.Input.InputScopeName!\n```\n\n----------------------------------------\n\nTITLE: Creating MapSpan from Center and Radius\nDESCRIPTION: Static factory method that creates a MapSpan instance given a center location and radius distance\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardFlags Enumeration in C#\nDESCRIPTION: This snippet defines the KeyboardFlags enumeration in the Microsoft.Maui namespace. It includes various keyboard capitalization flags such as CapitalizeCharacter, CapitalizeNone, CapitalizeSentence, and CapitalizeWord.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.All = -1 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeCharacter = 16 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeNone = 32 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeSentence = 1 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeWord = 8 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.None = 0 -> Microsoft.Maui.KeyboardFlags\n```\n\n----------------------------------------\n\nTITLE: Accelerometer Sensor API in .NET MAUI\nDESCRIPTION: Static methods for accessing and monitoring the device accelerometer. Provides methods to start and stop monitoring, check if the accelerometer is supported, and events for detecting changes in acceleration and shake gestures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Default.get -> Microsoft.Maui.Devices.Sensors.IAccelerometer!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ShakeDetected -> System.EventHandler!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator !=(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator ==(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: NavigationViewHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the NavigationViewHandler class that define mappers and navigation operations between the cross-platform IStackNavigationView interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing ImageHandler in MAUI\nDESCRIPTION: Defines constructors for the `ImageHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. This handler manages the platform-specific implementation of a MAUI Image.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ImageHandler.ImageHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: TimePickerHandler Mappings in MAUI\nDESCRIPTION: Static methods for handling TimePicker controls in MAUI, including appearance properties (background, text styling, fonts) and functional properties (time value, format). Supports both property and command mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapBackground(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Easing Functionality - C#\nDESCRIPTION: Defines the Easing class along with its constructors and functionalities for applying custom easing functions to animations in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Easing.Ease(double v) -> double\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Easing.Easing(System.Func<double, double>! easingFunc) -> void\n```\n\n----------------------------------------\n\nTITLE: IMap Interface Definition\nDESCRIPTION: Core interface for map functionality, defining properties and methods for map manipulation including pins, elements, and region management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMap\n{\n    IList<IMapElement> Elements { get; }\n    IList<IMapPin> Pins { get; }\n    bool IsScrollEnabled { get; }\n    bool IsShowingUser { get; }\n    bool IsTrafficEnabled { get; }\n    bool IsZoomEnabled { get; }\n    MapType MapType { get; }\n    MapSpan? VisibleRegion { get; set; }\n    void MoveToRegion(MapSpan region);\n    void Clicked(Location position);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Map Pin Class\nDESCRIPTION: Represents a pin/marker on the map with properties for location, label, address and type. Includes events for marker and info window clicks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Pin Pin() -> void\nMicrosoft.Maui.Controls.Maps.Pin.Label.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for IndicatorViewHandler in MAUI (C#)\nDESCRIPTION: Static methods that map properties of IIndicatorView to platform implementations via IIndicatorViewHandler, handling indicator count, color, size, shape, and visibility settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorShape(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorSize(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapMaximumVisible(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapPosition(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: Speech Options Initialization in .NET MAUI\nDESCRIPTION: This constructor initializes a new instance of SpeechOptions, which allows the configuration of various parameters for speech synthesis, including pitch and volume.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.SpeechOptions.SpeechOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Implicit Grid Row Definition in XAML\nDESCRIPTION: Example demonstrating Grid behavior that worked in Xamarin.Forms but requires explicit row definitions in .NET MAUI. In MAUI, developers must explicitly define rows using RowDefinitions=\"Auto,Auto\" rather than relying on automatic row creation.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_8\n\nLANGUAGE: xaml\nCODE:\n```\n<Grid>\n\t<Label Text=\"Hello\"/>\n\t<Label Grid.Row=\"1\" Text=\"World\"/>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Flattening Paths in .NET MAUI\nDESCRIPTION: This snippet defines the GetFlattenedPath method within the PathF class, enabling the flattening of complex paths to a simpler structure based on specified flatness parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.GetFlattenedPath(float flatness = 0.001, bool includeSubPaths = false) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Color and Visual State Extensions for WinUI Controls\nDESCRIPTION: Extension methods for updating foreground colors and enabled states on Windows UI controls. These methods translate MAUI color objects to platform brushes and handle control state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateForegroundColor(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Graphics.Color! color, Microsoft.UI.Xaml.Media.Brush? defaultBrush = null) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateIsEnabled(this Microsoft.UI.Xaml.Controls.Control! platformControl, bool isEnabled) -> void\n```\n\n----------------------------------------\n\nTITLE: Moving to Points in Paths in .NET MAUI\nDESCRIPTION: This snippet allows defining starting points in paths using the MoveTo method, where a new drawing segment begins in the PathF class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.MoveTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.MoveTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Overriding MauiWinUIApplication.OnLaunched Method in C#\nDESCRIPTION: This method overrides the OnLaunched event handler in the MauiWinUIApplication class to handle application launch for Windows UI applications in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.MauiWinUIApplication.OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs! args) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Configuration Extensions (C#)\nDESCRIPTION: Extension methods for configuring fonts in a MAUI application, including methods to add fonts from files or embedded resources in assemblies, with optional aliases.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddEmbeddedResourceFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, System.Reflection.Assembly! assembly, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontCollectionExtensions.AddFont(this Microsoft.Maui.Hosting.IFontCollection! fontCollection, string! filename, string? alias = null) -> Microsoft.Maui.Hosting.IFontCollection!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IFontCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.FontsMauiAppBuilderExtensions.ConfigureFonts(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraphs from Attributed Text in MAUI\nDESCRIPTION: This method creates a list of paragraphs from the specified attributed text, enabling paragraph-level manipulation within text content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphs(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedText>\n```\n\n----------------------------------------\n\nTITLE: Defining Read-only Fields in MAUI (C#)\nDESCRIPTION: These read-only fields are part of the LockableObservableListWrapper and PropertyMapper classes, storing core data structures used in MAUI's property mapping system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.LockableObservableListWrapper._list -> System.Collections.ObjectModel.ObservableCollection<string!>!\nreadonly Microsoft.Maui.PropertyMapper._mapper -> System.Collections.Generic.Dictionary<string!, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>!>!\n```\n\n----------------------------------------\n\nTITLE: Battery Information API in .NET MAUI\nDESCRIPTION: Exposes device battery status, charge level, power source, and energy saver information through an interface with event support\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IBattery.ChargeLevel.get\nMicrosoft.Maui.Devices.IBattery.PowerSource.get\nMicrosoft.Maui.Devices.IBattery.BatteryInfoChanged\n```\n\n----------------------------------------\n\nTITLE: Defining IElementHandler Interface in C#\nDESCRIPTION: The IElementHandler interface defines the methods related to the handler of UI elements, including connecting and disconnecting handlers, invoking commands, and setting contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IElementHandler.DisconnectHandler() -> void\nMicrosoft.Maui.IElementHandler.Invoke(string! command, object? args = null) -> void\nMicrosoft.Maui.IElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?\nMicrosoft.Maui.IElementHandler.PlatformView.get -> object?\nMicrosoft.Maui.IElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void\nMicrosoft.Maui.IElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\nMicrosoft.Maui.IElementHandler.UpdateValue(string! property) -> void\nMicrosoft.Maui.IElementHandler.VirtualView.get -> Microsoft.Maui.IElement?\n```\n\n----------------------------------------\n\nTITLE: MAUI App Builder Configuration\nDESCRIPTION: Core builder class for configuring and constructing MAUI applications. Provides configuration management and container customization capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.MauiAppBuilder\nMicrosoft.Maui.Hosting.MauiAppBuilder.Build() -> Microsoft.Maui.Hosting.MauiApp!\nMicrosoft.Maui.Hosting.MauiAppBuilder.Configuration.get -> Microsoft.Extensions.Configuration.ConfigurationManager!\nMicrosoft.Maui.Hosting.MauiAppBuilder.ConfigureContainer<TBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TBuilder>! factory, System.Action<TBuilder>? configure = null) -> void\n```\n\n----------------------------------------\n\nTITLE: GeolocationRequest Class Implementation in C#\nDESCRIPTION: Class for configuring geolocation requests in .NET MAUI. Provides properties for desired accuracy, timeout duration, and whether to request full accuracy, with multiple constructor overloads.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest() -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan timeout) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.get -> bool\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.Timeout.get -> System.TimeSpan\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.Timeout.set -> void\n```\n\n----------------------------------------\n\nTITLE: Updating Android UI Controls in .NET MAUI\nDESCRIPTION: These extension methods provide ways to update Android-specific UI controls with .NET MAUI abstractions. They handle operations like updating colors, visibility, and other properties of Android views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this Android.Widget.ProgressBar! progressBar, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateBackground(this Google.Android.Material.Button.MaterialButton! platformView, Microsoft.Maui.IButton! button) -> void\n```\n\n----------------------------------------\n\nTITLE: Geometry Utility Methods in C#\nDESCRIPTION: Static methods in the GeometryUtil class for performing geometric calculations such as angle calculations, distance measurements, and point transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetAngleAsDegrees(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetDistance(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetFactor(float aMin, float aMax, float aValue) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetLinearValue(float aMin, float aMax, float aFactor) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetOppositePoint(Microsoft.Maui.Graphics.PointF pivot, Microsoft.Maui.Graphics.PointF oppositePoint) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetSweep(float angle1, float angle2, bool clockwise) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.IsLineIntersectingLine(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3) -> bool\nstatic Microsoft.Maui.Graphics.GeometryUtil.PolarToPoint(float angleInRadians, float fx, float fy) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(float angle) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF center, Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: SearchBarHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: A collection of static methods in the SearchBarHandler class that map various properties of ISearchBar interface to platform-specific implementations. These methods handle text alignment, input restrictions, keyboard type, and styling properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Class in C#\nDESCRIPTION: Defines the Color class for representing and manipulating colors in MAUI Graphics, with constructors and methods for color operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color\nMicrosoft.Maui.Graphics.Color.Color() -> void\nMicrosoft.Maui.Graphics.Color.Color(float gray) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue, float alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue, byte alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(int red, int green, int blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(int red, int green, int blue, int alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(System.Numerics.Vector4 color) -> void\nMicrosoft.Maui.Graphics.Color.ToInt() -> int\nMicrosoft.Maui.Graphics.Color.GetHue() -> float\nMicrosoft.Maui.Graphics.Color.GetSaturation() -> float\nMicrosoft.Maui.Graphics.Color.GetLuminosity() -> float\nMicrosoft.Maui.Graphics.Color.ToHsl(out float h, out float s, out float l) -> void\n```\n\n----------------------------------------\n\nTITLE: MainThread Access in .NET MAUI\nDESCRIPTION: Static method to check if the current code is running on the main/UI thread. This is important for UI operations that must be performed on the main thread.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.MainThread.IsMainThread.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Magnetometer Sensor API in .NET MAUI\nDESCRIPTION: Static methods for accessing and monitoring the device magnetometer. Provides methods to start and stop monitoring, check if the magnetometer is supported, and events for detecting changes in the magnetic field.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Default.get -> Microsoft.Maui.Devices.Sensors.IMagnetometer!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.MagnetometerData.operator !=(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.MagnetometerData.operator ==(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Locales for Text-to-Speech in .NET MAUI\nDESCRIPTION: This method retrieves a collection of locales supported by the text-to-speech functionality. It returns a task that resolves to an enumerable list of Locale objects, representing different language and region combinations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ITextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\n```\n\n----------------------------------------\n\nTITLE: Mapping DatePicker Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of a DatePicker control, including date, flow direction, font, format, maximum and minimum dates, and text color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFlowDirection(Microsoft.Maui.Handlers.DatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Manager Interface\nDESCRIPTION: Interface definition for the animation manager, handling animation registration and playback control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IAnimationManager {\n    bool AutoStartTicker { get; set; }\n    double SpeedModifier { get; set; }\n    ITicker Ticker { get; }\n    void Add(Animation animation);\n    void Remove(Animation animation);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICanvas Interface Methods in C#\nDESCRIPTION: This snippet outlines various methods of the ICanvas interface in the Microsoft.Maui.Graphics namespace, including drawing and state management operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ICanvas.Alpha.set -> void\nMicrosoft.Maui.Graphics.ICanvas.Antialias.set -> void\nMicrosoft.Maui.Graphics.ICanvas.BlendMode.set -> void\nMicrosoft.Maui.Graphics.ICanvas.ClipRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nMicrosoft.Maui.Graphics.ICanvas.DisplayScale.get -> float\nMicrosoft.Maui.Graphics.ICanvas.DisplayScale.set -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.ICanvas.FontSize.set -> void\nMicrosoft.Maui.Graphics.ICanvas.MiterLimit.set -> void\nMicrosoft.Maui.Graphics.ICanvas.ResetState() -> void\nMicrosoft.Maui.Graphics.ICanvas.RestoreState() -> bool\nMicrosoft.Maui.Graphics.ICanvas.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.ICanvas.Rotate(float degrees) -> void\nMicrosoft.Maui.Graphics.ICanvas.SaveState() -> void\nMicrosoft.Maui.Graphics.ICanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeDashOffset.set -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeLineCap.set -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeLineJoin.set -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeSize.set -> void\nMicrosoft.Maui.Graphics.ICanvas.SubtractFromClip(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.Translate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing ShareTextRequest in C#\nDESCRIPTION: This section handles text sharing operations using the ShareTextRequest class. It provides constructors for initializing text, title, and URL properties necessary for text data transfer. This is dependent on string inputs representing text content and supplementary metadata such as titles. It supports manipulating text, subject, and URI through properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text, string! title) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Lifecycle Event Extensions in MAUI\nDESCRIPTION: These extension methods provide integration points for iOS application lifecycle events in MAUI. They allow registering callbacks for various iOS application events like application launch, activation, background entry, and URL handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_165\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ApplicationSignificantTimeChange(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ApplicationSignificantTimeChange! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.ContinueUserActivity(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.ContinueUserActivity! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.DidEnterBackground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.DidEnterBackground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.FinishedLaunching(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.FinishedLaunching! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OnActivated(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnActivated! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OnResignActivation(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OnResignActivation! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.OpenUrl(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.OpenUrl! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.PerformActionForShortcutItem(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.PerformActionForShortcutItem! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Managing Battery and Display Information with Microsoft.Maui in C#\nDESCRIPTION: Details regarding the extraction and management of battery and display properties in `Microsoft.Maui.Devices`. These methods return important device states like charge level, power source, and screen status. Demonstrates use of events such as BatteryInfoChanged to respond to state changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.ChargeLevel.get -> double\nstatic Microsoft.Maui.Devices.Battery.Default.get -> Microsoft.Maui.Devices.IBattery!\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nstatic Microsoft.Maui.Devices.Battery.State.get -> Microsoft.Maui.Devices.BatteryState\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.Current.get -> Microsoft.Maui.Devices.IDeviceDisplay!\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.get -> bool\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.set -> void\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Animation and Easing Properties in C#\nDESCRIPTION: Static readonly properties for various easing functions and animation-related constants in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Animations.Lerp.Lerps -> System.Collections.Generic.Dictionary<System.Type!, Microsoft.Maui.Animations.Lerp!>!\nstatic readonly Microsoft.Maui.Easing.BounceIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.BounceOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicInOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.CubicOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.Linear -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinInOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SinOut -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SpringIn -> Microsoft.Maui.Easing!\nstatic readonly Microsoft.Maui.Easing.SpringOut -> Microsoft.Maui.Easing!\n```\n\n----------------------------------------\n\nTITLE: Managing Menu Bar in .NET MAUI\nDESCRIPTION: This code snippet outlines the IMenuBarHandler interface providing methods to manage menu bar items in MAUI applications, including adding, removing, and clearing items.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler.Clear() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler.VirtualView.get -> Microsoft.Maui.IMenuBar!\n```\n\n----------------------------------------\n\nTITLE: WebView Extensions for iOS WebKit\nDESCRIPTION: Extension methods for WKWebView to handle JavaScript evaluation and navigation controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.WebViewExtensions.Eval(this WebKit.WKWebView! platformWebView, Microsoft.Maui.IWebView! webView, string! script) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.EvaluateJavaScript(this WebKit.WKWebView! webView, Microsoft.Maui.EvaluateJavaScriptAsyncRequest! request) -> void\n```\n\n----------------------------------------\n\nTITLE: IMauiContext Interface Definition\nDESCRIPTION: Defines the IMauiContext interface which provides access to the service provider and handlers factory, serving as a context for MAUI operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/HandlerResolution.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMauiContext\n{\n    IServiceProvider Services { get; }\n\n    IMauiHandlersFactory Handlers { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Device Flashlight in MAUI C# Applications\nDESCRIPTION: Static methods to access and control the device flashlight in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.Default.get -> Microsoft.Maui.Devices.IFlashlight!\nstatic Microsoft.Maui.Devices.Flashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Implementing MAUI App Initialization in C#\nDESCRIPTION: Extension methods for configuring and initializing a MAUI application. These methods allow for adding MAUI Controls handlers and setting up the app with dependency injection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiControlsHandlers(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: IWindow Interface Members in .NET MAUI\nDESCRIPTION: Members of the IWindow interface which represents an application window in MAUI. This interface provides methods for handling window lifecycle events, managing overlays, responding to system events, and accessing window properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWindow\nMicrosoft.Maui.IWindow.Activated() -> void\nMicrosoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.BackButtonClicked() -> bool\nMicrosoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void\nMicrosoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!\nMicrosoft.Maui.IWindow.Created() -> void\nMicrosoft.Maui.IWindow.Deactivated() -> void\nMicrosoft.Maui.IWindow.Destroying() -> void\nMicrosoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void\nMicrosoft.Maui.IWindow.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void\nMicrosoft.Maui.IWindow.Height.get -> double\nMicrosoft.Maui.IWindow.MaximumHeight.get -> double\nMicrosoft.Maui.IWindow.MaximumWidth.get -> double\nMicrosoft.Maui.IWindow.MinimumHeight.get -> double\nMicrosoft.Maui.IWindow.MinimumWidth.get -> double\nMicrosoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!\nMicrosoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.RequestDisplayDensity() -> float\nMicrosoft.Maui.IWindow.Resumed() -> void\nMicrosoft.Maui.IWindow.Stopped() -> void\nMicrosoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!\nMicrosoft.Maui.IWindow.Width.get -> double\nMicrosoft.Maui.IWindow.X.get -> double\nMicrosoft.Maui.IWindow.Y.get -> double\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Methods in MAUI Graphics\nDESCRIPTION: Abstract canvas class methods for basic shape drawing operations including lines, rectangles, ellipses and arcs. Includes transformation methods for rotation, scaling and translation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n```\n\n----------------------------------------\n\nTITLE: Screenshot Format Enum Initialization in .NET MAUI\nDESCRIPTION: This line defines a ScreenshotFormat enumeration for specifying the image format for screenshots, allowing choice between JPEG and PNG formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ScreenshotFormat.Jpeg = 1 -> Microsoft.Maui.Media.ScreenshotFormat\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ScreenshotFormat.Png = 0 -> Microsoft.Maui.Media.ScreenshotFormat\n```\n\n----------------------------------------\n\nTITLE: Preferences Management in C# MAUI\nDESCRIPTION: Static methods for managing application preferences. Includes methods for setting, getting, and clearing preferences of various data types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\nstatic Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\n// ... (additional Get methods for different data types)\n```\n\n----------------------------------------\n\nTITLE: Get DateTimeOffset from Preferences\nDESCRIPTION: Static methods to retrieve DateTimeOffset values from MAUI Preferences storage. Includes overloads with and without sharedName parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\n```\n\n----------------------------------------\n\nTITLE: Defining PickerHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods for the PickerHandler class that handle various picker properties such as font, text color, alignment, selected index, and title. These mappings apply cross-platform picker characteristics to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Interface Methods in .NET MAUI\nDESCRIPTION: The IBrowser interface defines methods for opening URLs in the device's web browser with customizable launch options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IBrowser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Abstract Canvas Class API\nDESCRIPTION: Core abstract class defining canvas operations for drawing, clipping, and text rendering with generic state management\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract class AbstractCanvas<TState> {\n    void ClipPath(PathF path, WindingMode windingMode = WindingMode.NonZero);\n    void DrawImage(IImage image, float x, float y, float width, float height);\n    void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);\n    void FillPath(PathF path, WindingMode windingMode);\n    void SetFillPaint(Paint paint, RectF rectangle);\n}\n```\n\n----------------------------------------\n\nTITLE: Device Information and Platform in MAUI\nDESCRIPTION: Static properties for accessing device information and platform details in MAUI applications. These include device type, manufacturer, model, and platform-specific information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceInfo.Current.get -> Microsoft.Maui.Devices.IDeviceInfo!\nstatic Microsoft.Maui.Devices.DeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nstatic Microsoft.Maui.Devices.DeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nstatic Microsoft.Maui.Devices.DeviceInfo.Manufacturer.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Model.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Name.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DeviceInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.Devices.DeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Size Operators and Conversions in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Static operators and type conversions for Microsoft.Maui.Graphics.Size class, including arithmetic operations, equality comparison, and conversions to other graphics types like CGPoint, CGSize, and SizeF. Enables size manipulation and interoperability.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Size.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Web Navigation Event Enumerations\nDESCRIPTION: Defines standard web navigation events and their corresponding numeric values for tracking browser-like navigation actions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.WebNavigationEvent.Back = 1\nMicrosoft.Maui.WebNavigationEvent.Forward = 2\nMicrosoft.Maui.WebNavigationEvent.NewPage = 3\nMicrosoft.Maui.WebNavigationEvent.Refresh = 4\n```\n\n----------------------------------------\n\nTITLE: Device Display Information in .NET MAUI\nDESCRIPTION: Provides detailed display information including screen dimensions, density, orientation, and refresh rate with change event support\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.DisplayInfo.Width.get\nMicrosoft.Maui.Devices.DisplayInfo.Height.get\nMicrosoft.Maui.Devices.DisplayInfo.Density.get\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Mode Enumeration for Maps in .NET MAUI\nDESCRIPTION: The NavigationMode enumeration defines available transportation methods for map navigation requests in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Bicycling = 2 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Default = 1 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Driving = 3 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.None = 0 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Transit = 4 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Walking = 5 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\n----------------------------------------\n\nTITLE: GridLength Operators and Conversions in MAUI\nDESCRIPTION: Static operator overloads for GridLength including implicit conversion from double values and equality comparison operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\n----------------------------------------\n\nTITLE: ProgressBarHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the ProgressBarHandler class in Microsoft.Maui that handle progress value and color properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Location Services Implementation in C#\nDESCRIPTION: Classes for handling location and placemark data in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Location.Location(Microsoft.Maui.Devices.Sensors.Location point) -> void\nMicrosoft.Maui.Devices.Sensors.Placemark.Placemark(Microsoft.Maui.Devices.Sensors.Placemark placemark) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring RadioButton Mapper and Handler in C# for MAUI\nDESCRIPTION: Static properties and methods for configuring the command mapper, property mapper, and mapping various properties of a RadioButton control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapBackground(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Shadows in PictureCanvas\nDESCRIPTION: This snippet describes the SetShadow method in the PictureCanvas class for defining shadow effects associated with drawings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining UI Element Handler Interfaces in C#\nDESCRIPTION: This snippet defines interfaces for various UI element handlers, such as IActivityIndicatorHandler, IButtonHandler, and ICheckBoxHandler. These interfaces specify the contract for implementing platform-specific handlers for each UI element type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IActivityIndicatorHandler\nMicrosoft.Maui.Handlers.IActivityIndicatorHandler.PlatformView.get -> Tizen.UIExtensions.NUI.GraphicsView.ActivityIndicator!\nMicrosoft.Maui.Handlers.IActivityIndicatorHandler.VirtualView.get -> Microsoft.Maui.IActivityIndicator!\n\nMicrosoft.Maui.Handlers.IButtonHandler\nMicrosoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nMicrosoft.Maui.Handlers.IButtonHandler.PlatformView.get -> Tizen.UIExtensions.NUI.Button!\nMicrosoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!\n\nMicrosoft.Maui.Handlers.ICheckBoxHandler\nMicrosoft.Maui.Handlers.ICheckBoxHandler.PlatformView.get -> Tizen.UIExtensions.NUI.GraphicsView.CheckBox!\nMicrosoft.Maui.Handlers.ICheckBoxHandler.VirtualView.get -> Microsoft.Maui.ICheckBox!\n```\n\n----------------------------------------\n\nTITLE: IVisualTreeElement Interface Members in .NET MAUI\nDESCRIPTION: Members of the IVisualTreeElement interface which represents an element in the MAUI visual tree. This interface provides methods to navigate the visual hierarchy by accessing parent and child elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IVisualTreeElement\nMicrosoft.Maui.IVisualTreeElement.GetVisualChildren() -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IVisualTreeElement!>!\nMicrosoft.Maui.IVisualTreeElement.GetVisualParent() -> Microsoft.Maui.IVisualTreeElement?\n```\n\n----------------------------------------\n\nTITLE: Device Display Management in Microsoft MAUI\nDESCRIPTION: This snippet provides access to properties and handlers for managing device displays. The 'KeepScreenOn' attribute assures screen remains operational, essential for minimizing distractions or interruptions in vital operations. Retrieval of display info facilitates UI consistency across devices in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\n```\n\n----------------------------------------\n\nTITLE: Filling Arcs on Canvas using Microsoft.Maui.Graphics\nDESCRIPTION: These methods fill arcs on a canvas, allowing specification of angles, boundaries, and whether the arc should be drawn clockwise. They suit complex graphic design needs in Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, float x, float y, float width, float height, float startAngle, float endAngle, Microsoft.Maui.Graphics.Paint paint, bool clockwise) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.Rect bounds, float startAngle, float endAngle, bool clockwise) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise) -> void\n```\n\n----------------------------------------\n\nTITLE: Distance Class Definition\nDESCRIPTION: Class representing geographical distance with conversion methods for different units (meters, kilometers, miles)\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Distance\n{\n    public Distance();\n    public Distance(double meters);\n    public double Kilometers { get; }\n    public double Meters { get; }\n    public double Miles { get; }\n    public bool Equals(Distance other);\n    public static Distance FromKilometers(double kilometers);\n    public static Distance FromMeters(double meters);\n    public static Distance FromMiles(double miles);\n}\n```\n\n----------------------------------------\n\nTITLE: UI Control Extensions for iOS in .NET MAUI\nDESCRIPTION: Extensions for various UI controls to update their properties on iOS platform. These methods handle the translation of MAUI cross-platform UI properties to their native iOS UIKit equivalents for controls like ActivityIndicator, Button, and CheckBox.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this UIKit.UIActivityIndicatorView! activityIndicatorView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateIsRunning(this UIKit.UIActivityIndicatorView! activityIndicatorView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Platform.AspectExtensions.ToUIViewContentMode(this Microsoft.Maui.Aspect aspect) -> UIKit.UIViewContentMode\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateCharacterSpacing(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateCornerRadius(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateFont(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this UIKit.UIButton! platformButton, Microsoft.Maui.IButton! button, Microsoft.Maui.Thickness? defaultPadding = null) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this UIKit.UIButton! platformButton, Microsoft.Maui.Thickness padding, Microsoft.Maui.Thickness? defaultPadding = null) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeColor(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeThickness(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateText(this UIKit.UIButton! platformButton, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateTextColor(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Platform.CheckBoxExtensions.UpdateForeground(this Microsoft.Maui.Platform.MauiCheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Platform.CheckBoxExtensions.UpdateIsChecked(this Microsoft.Maui.Platform.MauiCheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Platform.CollectionViewExtensions.UpdateHorizontalScrollBarVisibility(this UIKit.UICollectionView! collectionView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void\nstatic Microsoft.Maui.Platform.CollectionViewExtensions.UpdateVerticalScrollBarVisibility(this UIKit.UICollectionView! collectionView, Microsoft.Maui.ScrollBarVisibility scrollBarVisibility) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Image from Stream - SkiaSharp - C#\nDESCRIPTION: This static method constructs an image from a given stream and format hint. This is useful for loading images dynamically from various sources into the SkiaSharp context, enhancing the versatility of image handling in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SkiaImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Bitmap Context and Export Service in C#\nDESCRIPTION: Platform-specific implementations for bitmap export context and service. These classes provide functionality for creating and exporting bitmaps with specific dimensions, scale, and DPI settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportContext\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportContext.PlatformBitmapExportContext(int width, int height, float displayScale, int dpi = 72, int border = 0) -> void\n\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportService\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportService.PlatformBitmapExportService() -> void\n```\n\n----------------------------------------\n\nTITLE: Keyboard Type Definitions in MAUI\nDESCRIPTION: These static properties and methods define various keyboard types available in MAUI. They provide predefined keyboard configurations for different input scenarios such as email, numeric, URL, and other specialized input types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_161\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Keyboard.Chat.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Create(Microsoft.Maui.KeyboardFlags flags) -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Default.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Email.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Numeric.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Plain.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Telephone.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Text.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Url.get -> Microsoft.Maui.Keyboard!\n```\n\n----------------------------------------\n\nTITLE: Implementing View Layout Methods in .NET MAUI Android Handlers\nDESCRIPTION: These method signatures define layout-related functionality in various .NET MAUI handlers for Android. Methods like PlatformArrange handle positioning and sizing of native Android controls, while GetDesiredSize calculates the preferred dimensions for controls based on their content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.EditorHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\noverride Microsoft.Maui.Handlers.ImageHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\noverride Microsoft.Maui.Handlers.LabelHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\noverride Microsoft.Maui.Handlers.RadioButtonHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ShapeViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.SwitchHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\n```\n\n----------------------------------------\n\nTITLE: Event Argument Classes for Map Interactions (C#)\nDESCRIPTION: Classes that provide event arguments for map interaction events, including MapClickedEventArgs for map clicks and PinClickedEventArgs for pin interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.MapClickedEventArgs\nMicrosoft.Maui.Controls.Maps.MapClickedEventArgs.MapClickedEventArgs(Microsoft.Maui.Devices.Sensors.Location! location) -> void\nMicrosoft.Maui.Controls.Maps.MapClickedEventArgs.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\n\nMicrosoft.Maui.Controls.Maps.PinClickedEventArgs\nMicrosoft.Maui.Controls.Maps.PinClickedEventArgs.PinClickedEventArgs() -> void\nMicrosoft.Maui.Controls.Maps.PinClickedEventArgs.HideInfoWindow.get -> bool\nMicrosoft.Maui.Controls.Maps.PinClickedEventArgs.HideInfoWindow.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing UI View Handlers for iOS\nDESCRIPTION: Method signatures for various view handlers in iOS, including FlyoutView, GraphicsView, and LayoutView. These methods create and manage the platform-specific implementations of MAUI controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.FlyoutViewHandler.CreatePlatformView() -> UIKit.UIView!\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.ConnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.DisconnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void\noverride Microsoft.Maui.Handlers.LayoutHandler.CreatePlatformView() -> Microsoft.Maui.Platform.LayoutView!\noverride Microsoft.Maui.Handlers.LayoutHandler.DisconnectHandler(Microsoft.Maui.Platform.LayoutView! platformView) -> void\noverride Microsoft.Maui.Handlers.LayoutHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Speaking Text with Speech Options in .NET MAUI\nDESCRIPTION: This method initiates speech synthesis for the given text string using optional speech settings, such as pitch and volume. It returns a task that completes when the speech has finished processing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ITextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options = null, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Web Authentication Interface in .NET MAUI\nDESCRIPTION: Provides methods for web-based authentication with support for configurable authentication options and result decoding\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.IWebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Image Saving to Stream\nDESCRIPTION: Executes an asynchronous operation to save images to a stream, accommodating non-blocking execution and enhancing application responsiveness during IO operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Enabling .NET MAUI Workload\nDESCRIPTION: This XML snippet shows how to enable the .NET MAUI workload in a .NET project by setting the `$(UseMaui)` property to `true`. This automatically includes necessary workload packs for MAUI development.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>net6.0-android;net6.0-ios</TargetFrameworks>\n    <OutputType>Exe</OutputType>\n    <UseMaui>true</UseMaui>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Preferences Management in MAUI (C#)\nDESCRIPTION: Static methods for managing app preferences. Includes methods to clear preferences, check for keys, and get values with optional shared names.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\nstatic Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue, string? sharedName) -> double\n```\n\n----------------------------------------\n\nTITLE: Defining GridLength and GridUnitType in C#\nDESCRIPTION: This snippet defines the GridLength struct and GridUnitType enum, which are used for specifying sizes in grid-based layouts. GridLength includes properties for different types of measurements, while GridUnitType defines the units of measurement.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.GridLength\nMicrosoft.Maui.GridLength.GridLength() -> void\nMicrosoft.Maui.GridLength.GridLength(double value, Microsoft.Maui.GridUnitType type) -> void\nMicrosoft.Maui.GridLength.GridLength(double value) -> void\nMicrosoft.Maui.GridLength.GridUnitType.get -> Microsoft.Maui.GridUnitType\nMicrosoft.Maui.GridLength.IsAbsolute.get -> bool\nMicrosoft.Maui.GridLength.IsAuto.get -> bool\nMicrosoft.Maui.GridLength.IsStar.get -> bool\nMicrosoft.Maui.GridLength.Value.get -> double\n\nMicrosoft.Maui.GridUnitType\nMicrosoft.Maui.GridUnitType.Absolute = 0 -> Microsoft.Maui.GridUnitType\nMicrosoft.Maui.GridUnitType.Auto = 2 -> Microsoft.Maui.GridUnitType\nMicrosoft.Maui.GridUnitType.Star = 1 -> Microsoft.Maui.GridUnitType\n```\n\n----------------------------------------\n\nTITLE: Defining IEntry Interface in C#\nDESCRIPTION: The IEntry interface defines properties and methods for text entry components, such as password visibility and completion events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IEntry.ClearButtonVisibility.get -> Microsoft.Maui.ClearButtonVisibility\nMicrosoft.Maui.IEntry.Completed() -> void\nMicrosoft.Maui.IEntry.IsPassword.get -> bool\nMicrosoft.Maui.IEntry.ReturnType.get -> Microsoft.Maui.ReturnType\n```\n\n----------------------------------------\n\nTITLE: Mapping HybridWebView Handler Methods\nDESCRIPTION: Static methods for mapping JavaScript evaluation, invocation and raw message handling in HybridWebViewHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.HybridWebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IHybridWebViewHandler! handler, Microsoft.Maui.IHybridWebView! hybridWebView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.HybridWebViewHandler.MapInvokeJavaScriptAsync(Microsoft.Maui.Handlers.IHybridWebViewHandler! handler, Microsoft.Maui.IHybridWebView! hybridWebView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.HybridWebViewHandler.MapSendRawMessage(Microsoft.Maui.Handlers.IHybridWebViewHandler! handler, Microsoft.Maui.IHybridWebView! hybridWebView, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending Layout Functionality in C#\nDESCRIPTION: These extension methods provide various layout-related functionalities for MAUI views, including size adjustments, content arrangement, and measurement calculations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutExtensions.AdjustForFill(this Microsoft.Maui.Graphics.Size size, Microsoft.Maui.Graphics.Rect bounds, Microsoft.Maui.IView! view) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> void\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ArrangeContentUnbounded(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeFrame(this Microsoft.Maui.IView! view, Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Layouts.LayoutExtensions.MeasureContent(this Microsoft.Maui.IContentView! contentView, Microsoft.Maui.Thickness inset, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: MAUI Platform Constants Definitions\nDESCRIPTION: Defines platform-specific constants including web asset base URL, progress bar maximum value, slider maximum value, and unit conversion coefficients.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Platform.MauiWebView.AssetBaseUrl = \"file:///android_asset/\";\nconst Microsoft.Maui.Platform.ProgressBarExtensions.Maximum = 10000;\nconst Microsoft.Maui.Platform.SliderExtensions.PlatformMaxValue = 2147483647;\nconst Microsoft.Maui.Platform.UnitExtensions.EmCoefficient = 0.0624;\n```\n\n----------------------------------------\n\nTITLE: Handling Barometer Events\nDESCRIPTION: Provides methods and properties for accessing barometer sensor data. This includes checking sensor support, monitoring status, and handling reading changes. Dependency includes the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IBarometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IBarometer.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IBarometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IBarometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IBarometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Window Width\nDESCRIPTION: Obtains the minimum width value of the window, enforcing constraints on its size during user interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.MinimumWidth.get -> double\n```\n\n----------------------------------------\n\nTITLE: Declaring Various XAML Extensions in C#\nDESCRIPTION: This snippet declares properties for various XAML extensions such as DataTemplate, DynamicResource, FontImage, OnIdiom, OnPlatform, Reference, RelativeSource, Static, StaticResource, StyleSheet, and TemplateBinding.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.DataTemplateExtension.ProvideValue(System.IServiceProvider serviceProvider) -> Microsoft.Maui.Controls.DataTemplate\n~Microsoft.Maui.Controls.Xaml.DataTemplateExtension.TypeName.get -> string\n~Microsoft.Maui.Controls.Xaml.DataTemplateExtension.TypeName.set -> void\n~Microsoft.Maui.Controls.Xaml.DynamicResourceExtension.Key.get -> string\n~Microsoft.Maui.Controls.Xaml.DynamicResourceExtension.Key.set -> void\n~Microsoft.Maui.Controls.Xaml.DynamicResourceExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.Color.get -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.Color.set -> void\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.FontFamily.get -> string\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.FontFamily.set -> void\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.Glyph.get -> string\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.Glyph.set -> void\n~Microsoft.Maui.Controls.Xaml.FontImageExtension.ProvideValue(System.IServiceProvider serviceProvider) -> Microsoft.Maui.Controls.ImageSource\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Converter.get -> Microsoft.Maui.Controls.IValueConverter\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Converter.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.ConverterParameter.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.ConverterParameter.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Desktop.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Desktop.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Phone.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Phone.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Tablet.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Tablet.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.TV.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.TV.set -> void\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Watch.get -> object\n~Microsoft.Maui.Controls.Xaml.OnIdiomExtension.Watch.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Android.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Android.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Converter.get -> Microsoft.Maui.Controls.IValueConverter\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Converter.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.ConverterParameter.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.ConverterParameter.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.iOS.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.iOS.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.MacCatalyst.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.MacCatalyst.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Tizen.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Tizen.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.UWP.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.UWP.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.WinUI.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.WinUI.set -> void\n~Microsoft.Maui.Controls.Xaml.ReferenceExtension.Name.get -> string\n~Microsoft.Maui.Controls.Xaml.ReferenceExtension.Name.set -> void\n~Microsoft.Maui.Controls.Xaml.ReferenceExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.RelativeSourceExtension.AncestorType.get -> System.Type\n~Microsoft.Maui.Controls.Xaml.RelativeSourceExtension.AncestorType.set -> void\n~Microsoft.Maui.Controls.Xaml.RelativeSourceExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.StaticExtension.Member.get -> string\n~Microsoft.Maui.Controls.Xaml.StaticExtension.Member.set -> void\n~Microsoft.Maui.Controls.Xaml.StaticExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.StaticResourceExtension.Key.get -> string\n~Microsoft.Maui.Controls.Xaml.StaticResourceExtension.Key.set -> void\n~Microsoft.Maui.Controls.Xaml.StaticResourceExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.StyleSheetExtension.Source.get -> System.Uri\n~Microsoft.Maui.Controls.Xaml.StyleSheetExtension.Source.set -> void\n~Microsoft.Maui.Controls.Xaml.StyleSheetExtension.Style.get -> string\n~Microsoft.Maui.Controls.Xaml.StyleSheetExtension.Style.set -> void\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.Converter.get -> Microsoft.Maui.Controls.IValueConverter\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.Converter.set -> void\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.ConverterParameter.get -> object\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.ConverterParameter.set -> void\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.Path.get -> string\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.Path.set -> void\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.StringFormat.get -> string\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.StringFormat.set -> void\n```\n\n----------------------------------------\n\nTITLE: Matrix Conversion Extensions for Android\nDESCRIPTION: Extension method to convert .NET Matrix3x2 to Android Matrix for transformation operations. This enables consistent coordinate transformations across platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsMatrix(this System.Numerics.Matrix3x2 transform) -> Android.Graphics.Matrix\n```\n\n----------------------------------------\n\nTITLE: Text Styling Extensions for WinUI Controls\nDESCRIPTION: Extension methods that synchronize text-related properties between MAUI text components and WinUI controls. These methods handle character spacing, font properties, and text colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.Control! nativeControl, Microsoft.Maui.ITextStyle! text) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.Control! platformButton, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.Control! platformControl, Microsoft.Maui.Font font, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateTextColor(this Microsoft.UI.Xaml.Controls.Control! nativeControl, Microsoft.Maui.ITextStyle! text) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Readonly Properties in Handler and HybridWebView C#\nDESCRIPTION: Defining static readonly bindable properties relevant to HandlerProperties, HybridWebView, StyleableElement, and TitleBar, allowing consistent property management across instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.HandlerProperties.DisconnectPolicyProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.HybridWebView.HybridRootProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.StyleableElement.StyleProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.ContentProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.ForegroundColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.IconProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.LeadingContentProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.SubtitleProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.TitleProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.TitleBar.TrailingContentProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Window.TitleBarProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Text To Speech Interface in C#\nDESCRIPTION: Introduces the ITextToSpeech interface, detailing asynchronous methods to get available locales and convert text to speech, with parameter options for loation, pitch, and cancellation support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ITextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nMicrosoft.Maui.Media.ITextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options = null, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\n```\n\n----------------------------------------\n\nTITLE: Layout Manager Method Overrides\nDESCRIPTION: Override implementations for core layout manager classes including AbsoluteLayout, GridLayout, and StackLayout. These methods handle measuring and arranging child elements within their respective containers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: MAUI XAML Extensions Method Signatures\nDESCRIPTION: Public API surface for XAML extensions in Microsoft.Maui.Controls.Xaml namespace. Includes property accessors and methods for handling XAML bindings, resources, and platform-specific functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Value.get -> object\n```\n\n----------------------------------------\n\nTITLE: Mapping Picker Properties in PickerHandler in C#\nDESCRIPTION: These static methods map various properties of a Picker, such as CharacterSpacing, Font, HorizontalTextAlignment, and a Reload operation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining LabelHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the LabelHandler class, including property mappers and methods for handling various properties of a Label such as character spacing, font, text alignment, line height, and text decorations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\nstatic Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapLineHeight(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapPadding(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\nstatic Microsoft.Maui.Handlers.LabelHandler.MapText(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextColor(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextDecorations(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting up Container in MAUI\nDESCRIPTION: This snippet defines an abstract method for setting up a UI container in a view handler. Implementations will use this to initialize the necessary UI components for a specific platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ViewHandler.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Battery Interface in C#\nDESCRIPTION: Defines the IBattery interface with properties and events for battery information in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IBattery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\nMicrosoft.Maui.Devices.IBattery.ChargeLevel.get -> double\nMicrosoft.Maui.Devices.IBattery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\nMicrosoft.Maui.Devices.IBattery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\nMicrosoft.Maui.Devices.IBattery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.IBattery.State.get -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: SwipeView and Switch Extensions for iOS in .NET MAUI\nDESCRIPTION: Extension methods for SwipeView menu items and UISwitch components. These methods handle color properties, toggled state, and appearance customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_188\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SwipeViewExtensions.GetTextColor(this Microsoft.Maui.ISwipeItemMenuItem! swipeItemMenuItem) -> Microsoft.Maui.Graphics.Color?\nstatic Microsoft.Maui.Platform.SwitchExtensions.UpdateIsOn(this UIKit.UISwitch! uiSwitch, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Platform.SwitchExtensions.UpdateThumbColor(this UIKit.UISwitch! uiSwitch, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Platform.SwitchExtensions.UpdateTrackColor(this UIKit.UISwitch! uiSwitch, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Blend Mode Enum in C# for .NET MAUI Graphics\nDESCRIPTION: This snippet shows the definition of the BlendMode enum in the Microsoft.Maui.Graphics namespace. It defines various blending modes that can be used in graphics operations to control how colors are combined.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Clear = 16 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Color = 14 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.ColorBurn = 7 -> Microsoft.Maui.Graphics.BlendMode\n// ... more blend mode enum values\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Handlers in MAUI\nDESCRIPTION: NavigationViewHandler implementation providing navigation stack management and view handling capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.NavigationViewHandler.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!\nMicrosoft.Maui.Handlers.NavigationViewHandler.NavigationView.get -> Microsoft.Maui.IStackNavigationView!\nMicrosoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler() -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing String on Canvas in .NET MAUI\nDESCRIPTION: This method draws a string on the canvas at specified coordinates with alignment options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\n```\n\n----------------------------------------\n\nTITLE: Image Processing and Conversion Extensions\nDESCRIPTION: Extension methods for converting images between different formats and representations including base64, byte arrays and streams.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic string AsBase64(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\nstatic byte[] AsBytes(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\nstatic Stream AsStream(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\n```\n\n----------------------------------------\n\nTITLE: Converting Color to RGBA Components in C#\nDESCRIPTION: This method converts a Color object to its RGBA components. It takes out parameters for red, green, blue, and alpha byte values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.ToRgba(out byte r, out byte g, out byte b, out byte a) -> void\n```\n\n----------------------------------------\n\nTITLE: IAccelerometer Interface Definition in C#\nDESCRIPTION: Interface for the accelerometer sensor in .NET MAUI. Provides methods to start and stop monitoring, events for reading changes and shake detection, and properties to check support and monitoring status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.ShakeDetected -> System.EventHandler?\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Rotating PathF into CGPath in MAUI\nDESCRIPTION: This method generates a rotated CGPath based on an input PathF and specified rotation parameters. It is useful for graphical transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRotatedCGPath(this Microsoft.Maui.Graphics.PathF target, Microsoft.Maui.Graphics.PointF center, float ppu, float zoom, float angle) -> CoreGraphics.CGPath\n```\n\n----------------------------------------\n\nTITLE: Image Source Extensions in MAUI C#\nDESCRIPTION: Extensions for handling image sources in MAUI Android applications. Provides methods for loading and processing platform-specific image resources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSource imageSource, Microsoft.Maui.IMauiContext mauiContext)\n```\n\n----------------------------------------\n\nTITLE: Geometric Utility Functions in MAUI\nDESCRIPTION: Static utility methods for geometric calculations including angle conversions, distance calculations, and point transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetDistance(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Mapping SwipeView Properties in C#\nDESCRIPTION: Static methods for mapping various properties of SwipeView, including request close, request open, right items, swipe transition mode, and top items.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining FileSystem API in C#\nDESCRIPTION: Declares static properties and methods for the FileSystem class in the Microsoft.Maui.Storage namespace. Includes methods for accessing app-specific directories and files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: SecureStorage Methods in MAUI C#\nDESCRIPTION: Static methods for securely storing and retrieving string data. Includes asynchronous operations for setting and getting values, plus methods for removing stored data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Implementing View and Window Capture Methods in C#\nDESCRIPTION: Extension methods for capturing views and windows as images in various formats (JPEG, PNG) asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IView! view, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IWindow! window, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<byte[]?>!\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Paint in Skia Canvas\nDESCRIPTION: Assigns an SKPaint for stroke operations, dictating the visual styling for line or outline elements in graphical shapes, allowing customized paint attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.StrokePaint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing MenuBarHandler in C#\nDESCRIPTION: Handler class for managing menu bar items in MAUI applications. Includes methods for adding menu items to the platform-specific menu bar implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Gradient Paint Implementation\nDESCRIPTION: Class for creating and managing gradient paints with color stops and blending functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class GradientPaint {\n    void AddOffset(float offset, Color color);\n    Color BlendStartAndEndColors();\n    Color GetColorAt(float offset);\n    void SetGradientStops(float[] offsets, Color[] colors);\n    Color StartColor { get; set; }\n    Color EndColor { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Operations in C#\nDESCRIPTION: Static methods to open URLs in the default browser with various options and launch modes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Browser.Default.get -> Microsoft.Maui.ApplicationModel.IBrowser!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Semantic and Shape View Extensions for iOS in .NET MAUI\nDESCRIPTION: Extension methods for updating semantic properties and shape rendering on iOS platform views. Includes methods for accessibility features and shape invalidation/updating.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_184\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SemanticExtensions.UpdateSemantics(this UIKit.UIView! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ShapeViewExtensions.InvalidateShape(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Platform.ShapeViewExtensions.UpdateShape(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Opening Files in .NET MAUI\nDESCRIPTION: This method is defined within the ILauncher interface to open local files based on a given OpenFileRequest or URI. It supports various implementations for file handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Saving Picture Asynchronously in .NET MAUI\nDESCRIPTION: This asynchronous method saves a picture to the specified stream.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPictureWriter.SaveAsync(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Extending ICanvas with DrawRoundedRectangle Method in C#\nDESCRIPTION: This extension method adds the ability to draw a rounded rectangle on an ICanvas object. It provides multiple overloads to accommodate different parameter types and corner radius specifications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressBarHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static properties and methods for the ProgressBarHandler class that map progress value and color properties from the cross-platform IProgress interface to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Canvas Drawing Methods in C#\nDESCRIPTION: This code snippet defines various abstract drawing methods within an abstract canvas class in the Microsoft.Maui.Graphics namespace. These methods include operations for clipping paths, drawing images and strings, setting fill and stroke properties, and manipulating text alignment. Implementers must provide concrete definitions of these methods for different platforms. No direct dependencies are outlined, but implementations should respect platform-specific rendering capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\"\n```\n\n----------------------------------------\n\nTITLE: PointF Structure Implementation in C#\nDESCRIPTION: Defines the PointF structure in Microsoft.Maui.Graphics with constructors, properties, and methods for 2D point coordinates using single precision (float) values. Includes transformation and manipulation methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PointF.Deconstruct(out float x, out float y) -> void\nMicrosoft.Maui.Graphics.PointF.Distance(Microsoft.Maui.Graphics.PointF other) -> float\nMicrosoft.Maui.Graphics.PointF.IsEmpty.get -> bool\nMicrosoft.Maui.Graphics.PointF.Offset(float dx, float dy) -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PointF.PointF() -> void\nMicrosoft.Maui.Graphics.PointF.PointF(float x, float y) -> void\nMicrosoft.Maui.Graphics.PointF.PointF(Microsoft.Maui.Graphics.SizeF sz) -> void\nMicrosoft.Maui.Graphics.PointF.PointF(System.Numerics.Vector2 v) -> void\nMicrosoft.Maui.Graphics.PointF.Round() -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PointF.TransformBy(in System.Numerics.Matrix3x2 transform) -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PointF.X.get -> float\nMicrosoft.Maui.Graphics.PointF.X.set -> void\nMicrosoft.Maui.Graphics.PointF.Y.get -> float\nMicrosoft.Maui.Graphics.PointF.Y.set -> void\n```\n\n----------------------------------------\n\nTITLE: WebView UI Delegate Implementation in C#\nDESCRIPTION: MauiWebViewUIDelegate provides UI-related functionality for WebView components, handling interactions with the web content from the UI perspective.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiWebViewUIDelegate\nMicrosoft.Maui.Platform.MauiWebViewUIDelegate.MauiWebViewUIDelegate(Microsoft.Maui.Handlers.IWebViewHandler! handler) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Image Handling Interface Definitions\nDESCRIPTION: Interface definitions for MAUI image source handling and processing. Includes interfaces for image sources, services and results.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IImageSource\nMicrosoft.Maui.IImageSource.IsEmpty.get -> bool\nMicrosoft.Maui.IImageSourcePart\nMicrosoft.Maui.IImageSourcePart.IsAnimationPlaying.get -> bool\nMicrosoft.Maui.IImageSourcePart.Source.get -> Microsoft.Maui.IImageSource?\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshViewHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the RefreshViewHandler class, including a command mapper, a property mapper, and methods for mapping various properties such as background, content, isEnabled, isRefreshing, and refresh color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! view) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IContextFlyoutElement Interface in C#\nDESCRIPTION: The IContextFlyoutElement interface provides a way to handle context menus in the .NET MAUI framework, allowing retrieval of the related flyout element.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IContextFlyoutElement.ContextFlyout.get -> Microsoft.Maui.IFlyout?\n```\n\n----------------------------------------\n\nTITLE: BlendMode Enumeration in MAUI Graphics\nDESCRIPTION: Defines blend modes for compositing operations in graphics rendering. Includes standard modes like Normal, Multiply, Screen as well as advanced modes like ColorBurn and ColorDodge.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode.Normal = 0\nMicrosoft.Maui.Graphics.BlendMode.Multiply = 1\nMicrosoft.Maui.Graphics.BlendMode.Screen = 2\nMicrosoft.Maui.Graphics.BlendMode.Overlay = 3\nMicrosoft.Maui.Graphics.BlendMode.Darken = 4\nMicrosoft.Maui.Graphics.BlendMode.Lighten = 5\n```\n\n----------------------------------------\n\nTITLE: ShareTextRequest in MAUI DataTransfer\nDESCRIPTION: The 'ShareTextRequest' class supports text sharing functionalities, allowing text to be shared with optional titles, subjects, and URIs. It simplifies text data transfer tasks within the MAUI ecosystem.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text, string! title) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.set -> void\n```\n\n----------------------------------------\n\nTITLE: ScrollView Extensions in MAUI for Android\nDESCRIPTION: Extension methods for handling scroll view content in the Android implementation of MAUI. These methods manage updating the scroll view's content and applying the appropriate context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_163\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ScrollViewExtensions.UpdateContent(this Microsoft.Maui.Platform.MauiScrollView! scrollView, Microsoft.Maui.IView? content, Microsoft.Maui.IMauiContext! context) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Management Utilities - Microsoft MAUI - CSharp\nDESCRIPTION: Defines properties and methods for managing font characteristics such as size, weight, and slant within the Microsoft MAUI framework. The operations focus on getting or setting various font attributes, vital for UI design consistency. Dependencies include the Microsoft.Maui namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Font.WithSize(double size) -> Microsoft.Maui.Font\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Font.WithSlant(Microsoft.Maui.FontSlant fontSlant) -> Microsoft.Maui.Font\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Font.WithWeight(Microsoft.Maui.FontWeight weight) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: Device Display Interface Implementation in C#\nDESCRIPTION: Interface definition for device display functionality in MAUI, including screen state management and display information monitoring.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.get -> bool\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.set -> void\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Point Struct in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines the Point struct, which represents a 2D point with double-precision coordinates. It includes constructors, property accessors, and utility methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.Deconstruct(out double x, out double y) -> void\nMicrosoft.Maui.Graphics.Point.Distance(Microsoft.Maui.Graphics.Point other) -> double\nMicrosoft.Maui.Graphics.Point.IsEmpty.get -> bool\nMicrosoft.Maui.Graphics.Point.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.Point() -> void\nMicrosoft.Maui.Graphics.Point.Point(double x, double y) -> void\nMicrosoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.Size sz) -> void\nMicrosoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.SizeF sz) -> void\nMicrosoft.Maui.Graphics.Point.Point(System.Numerics.Vector2 v) -> void\nMicrosoft.Maui.Graphics.Point.Round() -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.X.get -> double\nMicrosoft.Maui.Graphics.Point.X.set -> void\nMicrosoft.Maui.Graphics.Point.Y.get -> double\nMicrosoft.Maui.Graphics.Point.Y.set -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Operations in MAUI Graphics\nDESCRIPTION: Platform-specific implementations of basic drawing operations including arcs, ellipses, lines and rectangles. These methods provide the core drawing functionality for the MAUI graphics system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_164\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool close) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Functionality in C# MAUI\nDESCRIPTION: Static methods for text-to-speech operations. Includes getting available locales and speaking text with various options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!\nstatic Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Gyroscope Sensor API in .NET MAUI\nDESCRIPTION: Static methods for accessing and monitoring the device gyroscope. Provides methods to start and stop monitoring, check if the gyroscope is supported, and events for detecting rotational changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Default.get -> Microsoft.Maui.Devices.Sensors.IGyroscope!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator !=(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator ==(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Location Calculation Methods in MAUI\nDESCRIPTION: Static method for calculating distance between two geographic coordinates with support for different distance units.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Location Distance Calculation in .NET MAUI\nDESCRIPTION: Static method for calculating the distance between two geographic coordinates. Supports calculating distances in kilometers or miles between points specified by latitude and longitude.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Base Permission Class Declarations in C#\nDESCRIPTION: Abstract base class declarations for handling permission checks and requests in MAUI applications. Defines core async methods for checking and requesting permissions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\n~abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Modifying Property Mappings in C#\nDESCRIPTION: These extension methods allow modification of property mappings for MAUI views and handlers, including appending, prepending, and replacing mappings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_186\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: AppAction Constructor in MAUI\nDESCRIPTION: This constructor initializes a new instance of the AppAction class.  It requires an id and title, and accepts optional subtitle and icon parameters.  AppActions allow registering actions that can be invoked when the app is launched.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.AppAction(string! id, string! title, string? subtitle = null, string? icon = null) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Layout Operations in C#\nDESCRIPTION: These static methods map various operations for a Layout, such as Add, Clear, Insert, and Remove, as well as properties like Background and ClipsToBounds.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapInsert(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: SearchBar Extension Methods for iOS UIKit\nDESCRIPTION: Collection of extension methods for updating UISearchBar properties including font, text, placeholder, keyboard settings and text alignment. These methods bridge MAUI SearchBar control properties to their UIKit counterparts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateFont(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateText(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping View Properties in ViewHandler Class (C#)\nDESCRIPTION: Static methods in the ViewHandler class that map various view properties like rotation, scale, translation, visibility, etc. from the cross-platform MAUI view to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScale(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapScaleY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapSemantics(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapShadow(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolbar(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapToolTip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapTranslationY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapUnfocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapZIndex(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: Permission Status Enumeration in MAUI\nDESCRIPTION: Defines the possible states for permission requests in MAUI applications, including Denied, Disabled, Granted, Limited, Restricted and Unknown states\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Denied = 1\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Granted = 3\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Limited = 5\n```\n\n----------------------------------------\n\nTITLE: Setting Application Handler for .NET MAUI on iOS\nDESCRIPTION: This extension method sets the application handler for a .NET MAUI application on iOS. It takes an IUIApplicationDelegate, an IApplication interface, and an IMauiContext as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_175\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Attributed Text on Canvas in .NET MAUI\nDESCRIPTION: This method draws attributed text on the canvas at specified coordinates with defined width and height.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: TitleBar Constants Definition in .NET MAUI\nDESCRIPTION: Constants used for TitleBar states and template parts in MAUI applications. Defines visibility states and template part names for various TitleBar components.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.ContentHiddenState = \"ContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.ContentVisibleState = \"ContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconHiddenState = \"IconCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconVisibleState = \"IconVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TemplateRootName = \"PART_Root\" -> string!\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutItemHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the MenuFlyoutItemHandler class that map properties and operations between the cross-platform IMenuFlyoutItem interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapKeyboardAccelerators(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapSource(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.MapText(Microsoft.Maui.Handlers.IMenuFlyoutItemHandler! handler, Microsoft.Maui.IMenuFlyoutItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: ClipPath Extension for ICanvas in .NET MAUI Graphics\nDESCRIPTION: This static extension method `ClipPath` extends the `ICanvas` interface in the Microsoft.Maui.Graphics library. It takes an `ICanvas` and a `PathF` object as input and clips the canvas to the specified path, using a specified winding mode (defaulting to `NonZero`).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.ClipPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Functionality in C#\nDESCRIPTION: This snippet shows static methods for MAUI's Browser class and extension methods for IBrowser interface. It provides methods to open URLs in the device's default browser with various options. These methods enable cross-platform web browsing capabilities in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Browser.Default.get -> Microsoft.Maui.ApplicationModel.IBrowser!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Defining HapticFeedback Interface in C#\nDESCRIPTION: Defines the IHapticFeedback interface with methods for providing haptic feedback in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IHapticFeedback.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IHapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Transfer Features in C#\nDESCRIPTION: This snippet shows static methods for MAUI's Clipboard and Share classes. It provides methods to interact with the device's clipboard and share content across apps. These methods enable cross-platform data transfer capabilities in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.HasText.get -> bool\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IShare!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text, string! title) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Graphics Conversion Extensions in C#\nDESCRIPTION: Extension methods for converting MAUI Graphics objects to Windows-specific Canvas geometry and colors. These methods facilitate platform-specific rendering on Windows platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCanvasGeometry(this Microsoft.Maui.Graphics.PathF path, float ox, float oy, float fx, float fy, Microsoft.Graphics.Canvas.ICanvasResourceCreator creator, Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination fillMode = Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination.Winding) -> Microsoft.Graphics.Canvas.Geometry.CanvasGeometry\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCanvasGeometry(this Microsoft.Maui.Graphics.PathF path, Microsoft.Graphics.Canvas.ICanvasResourceCreator creator, Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination fillMode = Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination.Winding) -> Microsoft.Graphics.Canvas.Geometry.CanvasGeometry\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCanvasGeometryFromSegment(this Microsoft.Maui.Graphics.PathF path, int segmentIndex, float zoom, Microsoft.Graphics.Canvas.ICanvasResourceCreator creator) -> Microsoft.Graphics.Canvas.Geometry.CanvasGeometry\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsWindowsColor(this Microsoft.Maui.Graphics.Color color, float alpha = 1) -> Windows.UI.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsWindowsColor(this Microsoft.Maui.Graphics.Color color, Microsoft.Maui.Graphics.Color defaultColor, float alpha = 1) -> Windows.UI.Color\n```\n\n----------------------------------------\n\nTITLE: Color Creation and Parsing Methods\nDESCRIPTION: Static methods for creating Color objects from various color formats including RGB, RGBA, HSL, HSV and hex values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Color FromRgb(byte red, byte green, byte blue);\nstatic Color FromHsla(double h, double s, double l, double a = 1);\nstatic Color FromHex(string colorAsArgbHex);\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Methods for Microsoft.Maui.Graphics.AbstractCanvas<TState> in C#\nDESCRIPTION: This snippet defines virtual methods and properties for the AbstractCanvas<TState> class, including display scale management, state handling, and disposal. These methods provide a base implementation for canvas operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\n```\n\n----------------------------------------\n\nTITLE: IMauiFactory Interface Definition\nDESCRIPTION: Defines the IMauiFactory interface which extends IServiceProvider and serves as the base for MAUI's dependency resolver.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/HandlerResolution.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMauiFactory : IServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Map Interface Definition\nDESCRIPTION: Primary interface for map functionality including pin management, region control, and user interaction\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMap\n{\n    IList<IMapElement> Elements { get; }\n    IList<IMapPin> Pins { get; }\n    bool IsScrollEnabled { get; }\n    bool IsShowingUser { get; }\n    bool IsTrafficEnabled { get; }\n    bool IsZoomEnabled { get; }\n    MapType MapType { get; }\n    MapSpan? VisibleRegion { get; set; }\n    void MoveToRegion(MapSpan region);\n    void Clicked(Location position);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SkiaSharp with Pattern Bitmap Generation\nDESCRIPTION: This snippet provides extension methods for generating SkiaSharp SKBitmap objects from PatternPaint objects in the Microsoft.Maui.Graphics package. It supports both precise scaling and optional figure-specific alignment, requiring SkiaSharp and Microsoft.Maui.Graphics dependencies.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scale = 1) -> SkiaSharp.SKBitmap\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scaleX, float scaleY, object currentFigure) -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: Implementing Launcher Interface for Opening Files and URLs in .NET MAUI\nDESCRIPTION: The ILauncher interface provides methods to check if a URI can be opened and to launch external applications with files or URIs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.ApplicationModel.ILauncher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Tizen Application and Window Handlers in MAUI\nDESCRIPTION: These methods set up handlers for Tizen CoreApplication and Window to integrate with MAUI's application and window abstractions. They establish the connection between MAUI's cross-platform API and Tizen-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this Tizen.Applications.CoreApplication! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.ElementExtensions.SetWindowHandler(this Tizen.NUI.Window! platformWindow, Microsoft.Maui.IWindow! window, Microsoft.Maui.IMauiContext! context) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IPicker Interface in C#\nDESCRIPTION: Defines the IPicker interface with properties for managing a picker control in MAUI. It includes properties for items, selected index, title, and title color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IPicker\nMicrosoft.Maui.IPicker.Items.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.IPicker.SelectedIndex.get -> int\nMicrosoft.Maui.IPicker.SelectedIndex.set -> void\nMicrosoft.Maui.IPicker.Title.get -> string!\nMicrosoft.Maui.IPicker.TitleColor.get -> Microsoft.Maui.Graphics.Color!\n```\n\n----------------------------------------\n\nTITLE: Blend Mode Enumeration in Microsoft.Maui.Graphics\nDESCRIPTION: Enumeration defining various blend modes for graphics operations in the Microsoft.Maui.Graphics.BlendMode enum.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Clear = 16 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Color = 14 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.ColorBurn = 7 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.ColorDodge = 6 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Copy = 17 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Darken = 4 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationAtop = 24 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationIn = 22 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationOut = 23 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationOver = 21 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Difference = 10 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Exclusion = 11 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.HardLight = 9 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Hue = 12 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Lighten = 5 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Luminosity = 15 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Multiply = 1 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Normal = 0 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Overlay = 3 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.PlusDarker = 26 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.PlusLighter = 27 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Saturation = 13 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Screen = 2 -> Microsoft.Maui.Graphics.BlendMode\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Operations in MAUI Graphics\nDESCRIPTION: Methods for drawing and manipulating shapes on a scaled canvas including rectangles, rotations, and state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ScalingCanvas.FillRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.ScalingCanvas.Scale(float sx, float sy) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeView and WebView Overrides in .NET MAUI for Android\nDESCRIPTION: Method overrides for SwipeView and WebView components in MAUI's Android implementation, handling touch events, web navigation, and error handling. These methods ensure proper interaction and web content display within MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.MauiSwipeView.DispatchTouchEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.Platform.MauiSwipeView.OnAttachedToWindow() -> void\noverride Microsoft.Maui.Platform.MauiSwipeView.OnInterceptTouchEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.Platform.MauiSwipeView.OnTouchEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.Platform.MauiWebChromeClient.Dispose(bool disposing) -> void\noverride Microsoft.Maui.Platform.MauiWebViewClient.Dispose(bool disposing) -> void\noverride Microsoft.Maui.Platform.MauiWebViewClient.OnPageFinished(Android.Webkit.WebView? view, string? url) -> void\noverride Microsoft.Maui.Platform.MauiWebViewClient.OnPageStarted(Android.Webkit.WebView? view, string? url, Android.Graphics.Bitmap? favicon) -> void\noverride Microsoft.Maui.Platform.MauiWebViewClient.OnReceivedError(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, Android.Webkit.WebResourceError? error) -> void\noverride Microsoft.Maui.Platform.MauiWebViewClient.ShouldOverrideUrlLoading(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request) -> bool\n```\n\n----------------------------------------\n\nTITLE: TextAttributesExtensions Get Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Extension methods for retrieving different types of attributes (bool, enum, float, int) from ITextAttributes. These methods provide type-safe access to attribute values with fallback to default values when attributes are not found.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetBoolAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool defaultValue = false) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetEnumAttribute<T>(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T defaultValue) -> T\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetFloatAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, float defaultValue) -> float\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetIntAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, int defaultValue) -> int\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for RefreshView Handler in .NET MAUI\nDESCRIPTION: Static methods for mapping RefreshView properties like background, content, refresh state and color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing File Operations in MAUI\nDESCRIPTION: This snippet includes the definition of the FileBase class, which serves as a base for file operations within the MAUI framework. It provides properties for accessing file content type, file name, and full path, and includes a method for opening files asynchronously. This is fundamental for managing files across different platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Storage.FileBase\nMicrosoft.Maui.Storage.FileBase.ContentType.get -> string!\nMicrosoft.Maui.Storage.FileBase.ContentType.set -> void\nMicrosoft.Maui.Storage.FileBase.FileBase(Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.Storage.FileBase.FileName.get -> string!\nMicrosoft.Maui.Storage.FileBase.FileName.set -> void\nMicrosoft.Maui.Storage.FileBase.FullPath.get -> string!\nMicrosoft.Maui.Storage.FileBase.OpenReadAsync() -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: Defining TextAlignment Enum in C# for MAUI\nDESCRIPTION: This snippet defines the TextAlignment enum, which represents different text alignment options in MAUI applications. It includes values for Start, Center, and End alignments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.TextAlignment\nMicrosoft.Maui.TextAlignment.Center = 1 -> Microsoft.Maui.TextAlignment\nMicrosoft.Maui.TextAlignment.End = 2 -> Microsoft.Maui.TextAlignment\nMicrosoft.Maui.TextAlignment.Start = 0 -> Microsoft.Maui.TextAlignment\n```\n\n----------------------------------------\n\nTITLE: Defining RootComponent Class in C# for .NET MAUI Blazor Integration\nDESCRIPTION: Defines the RootComponent class for managing Blazor components in MAUI applications. Includes properties for component type, parameters, and selector.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.ComponentType.get -> System.Type?\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.ComponentType.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Parameters.get -> System.Collections.Generic.IDictionary<string!, object?>?\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Parameters.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.RootComponent() -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Selector.get -> string?\nMicrosoft.AspNetCore.Components.WebView.Maui.RootComponent.Selector.set -> void\n```\n\n----------------------------------------\n\nTITLE: Email Message and Attachment Classes in C#\nDESCRIPTION: Classes for creating and managing email messages and attachments in the Microsoft.Maui.ApplicationModel.Communication namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Attachments.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.Communication.EmailAttachment!>?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Attachments.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Bcc.get -> System.Collections.Generic.List<string!>?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Bcc.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Body.get -> string?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Body.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.BodyFormat.get -> Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.BodyFormat.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Cc.get -> System.Collections.Generic.List<string!>?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Cc.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.EmailMessage() -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.EmailMessage(string! subject, string! body, params string![]! to) -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Subject.get -> string?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.Subject.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.To.get -> System.Collections.Generic.List<string!>?\nMicrosoft.Maui.ApplicationModel.Communication.EmailMessage.To.set -> void\n```\n\n----------------------------------------\n\nTITLE: Insets Parsing Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Static methods for parsing string representations into Insets and InsetsF objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Insets.Parse(string value) -> Microsoft.Maui.Graphics.Insets\nstatic Microsoft.Maui.Graphics.InsetsF.Parse(string value) -> Microsoft.Maui.Graphics.InsetsF\n```\n\n----------------------------------------\n\nTITLE: Shape and ShapeView Extensions in MAUI for Android\nDESCRIPTION: Extension methods for handling shapes in MAUI Android implementation. These methods convert MAUI shapes to Android paths and manage shape properties in platform-specific graphics views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_166\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ShapeExtensions.ToPlatform(this Microsoft.Maui.Graphics.IShape! shape, Microsoft.Maui.Graphics.Rect bounds, float strokeThickness, float density, bool innerPath = false) -> Android.Graphics.Path!\nstatic Microsoft.Maui.Platform.ShapeViewExtensions.InvalidateShape(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Platform.ShapeViewExtensions.UpdateShape(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! platformView, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Radial Gradient Paint in C#\nDESCRIPTION: The RadialGradientPaint class allows for the creation and manipulation of radial gradients, defined by a center point and radius. It's a critical component for elaborate UI designs, offering smooth, color-transition effects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint(Microsoft.Maui.Graphics.Point center, double radius) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeViewHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods in the SwipeViewHandler class that map ISwipeView properties to platform implementations. These methods handle the main content and available swipe actions (left/bottom items) of the SwipeView container control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Managing Dispatcher Provider in MAUI\nDESCRIPTION: Static methods for accessing and setting the current dispatcher provider in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.Current.get -> Microsoft.Maui.Dispatching.IDispatcherProvider!\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.SetCurrent(Microsoft.Maui.Dispatching.IDispatcherProvider? provider) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing App Information Methods in C#\nDESCRIPTION: This snippet contains static methods for MAUI's AppInfo class. It provides access to various app-related information such as build string, name, package name, theme, and version. These methods allow developers to retrieve app metadata across different platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppInfo.BuildString.get -> string!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Current.get -> Microsoft.Maui.ApplicationModel.IAppInfo!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Name.get -> string!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.PackageName.get -> string!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nstatic Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Editor Handler Methods in MAUI\nDESCRIPTION: Static methods for EditorHandler that map text editor properties like character spacing, cursor position, and text alignment between MAUI editor abstractions and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.ITextInput! editor) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Arrangement in MAUI\nDESCRIPTION: This snippet defines an abstract method for arranging platform-specific views within a given frame. It requires a 'Rect' object as a parameter, which specifies the dimensions for arranging the view. This is crucial for proper UI layout management in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI FlexBasis Operators\nDESCRIPTION: Operator overloads for the FlexBasis type in MAUI layouts. These operators support implicit conversion from float and equality comparisons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.FlexBasis.implicit operator Microsoft.Maui.Layouts.FlexBasis(float length) -> Microsoft.Maui.Layouts.FlexBasis\nstatic Microsoft.Maui.Layouts.FlexBasis.operator !=(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\nstatic Microsoft.Maui.Layouts.FlexBasis.operator ==(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Constructor and Methods\nDESCRIPTION: Defines the core drawing canvas class with methods for basic shapes, transformations, and state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.PictureCanvas(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRectangle(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Pattern, PDF, and Picture Interface Methods\nDESCRIPTION: Method signatures for pattern drawing, PDF page operations, and picture reading/writing in various interfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\nMicrosoft.Maui.Graphics.IPdfPage.Save(System.IO.Stream stream) -> void\nMicrosoft.Maui.Graphics.IPdfPage.SaveAsync(System.IO.Stream stream) -> System.Threading.Tasks.Task\nMicrosoft.Maui.Graphics.IPdfRenderService.CreatePage(System.IO.Stream stream, int pageNumber = -1) -> Microsoft.Maui.Graphics.IPdfPage\nMicrosoft.Maui.Graphics.IPicture.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\nMicrosoft.Maui.Graphics.IPictureReader.Read(byte[] data) -> Microsoft.Maui.Graphics.IPicture\nMicrosoft.Maui.Graphics.IPictureWriter.Save(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> void\nMicrosoft.Maui.Graphics.IPictureWriter.SaveAsync(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Battery Information in MAUI Applications\nDESCRIPTION: Static properties and events for accessing battery information in MAUI applications. These include charge level, power source, and energy saver status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.ChargeLevel.get -> double\nstatic Microsoft.Maui.Devices.Battery.Default.get -> Microsoft.Maui.Devices.IBattery!\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nstatic Microsoft.Maui.Devices.Battery.State.get -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: Map Pin Equality Operators - C#\nDESCRIPTION: Operator overloads for comparing Pin objects for equality and inequality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Maps.Pin.operator ==(Microsoft.Maui.Controls.Maps.Pin? left, Microsoft.Maui.Controls.Maps.Pin? right) -> bool\nstatic Microsoft.Maui.Controls.Maps.Pin.operator !=(Microsoft.Maui.Controls.Maps.Pin? left, Microsoft.Maui.Controls.Maps.Pin? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Share Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for IShare interface providing alternative ways to share content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text, string! title) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Creating Font Copies in SkiaSharp for MAUI\nDESCRIPTION: This method creates a copy of a given SkiaSharp SKFont instance. It is designed to be used as an extension method for easy integration into the workflow of font management in graphic rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Defining Static Methods for Microsoft.Maui.Graphics.Size in C#\nDESCRIPTION: This snippet implements static methods for the Size struct, including type conversions, arithmetic operators, and equality comparisons. These methods enable various operations and conversions involving Size objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Attributed Text API Members in C#\nDESCRIPTION: Interface and implementation members for attributed text handling, which provide rich text formatting and manipulation capabilities in the text subsystem.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.AbstractAttributedText\nMicrosoft.Maui.Graphics.Text.AbstractAttributedText.AbstractAttributedText() -> void\nMicrosoft.Maui.Graphics.Text.AbstractAttributedText.Optimal.get -> bool\nMicrosoft.Maui.Graphics.Text.AbstractAttributedText.Optimal.set -> void\nMicrosoft.Maui.Graphics.Text.AttributedText\nMicrosoft.Maui.Graphics.Text.AttributedTextBlock\nMicrosoft.Maui.Graphics.Text.AttributedTextExtensions\nMicrosoft.Maui.Graphics.Text.AttributedTextRun\nMicrosoft.Maui.Graphics.Text.AttributedTextRun.Length.get -> int\nMicrosoft.Maui.Graphics.Text.AttributedTextRun.Start.get -> int\nMicrosoft.Maui.Graphics.Text.AttributedTextRunComparer\nMicrosoft.Maui.Graphics.Text.AttributedTextRunComparer.AttributedTextRunComparer() -> void\nMicrosoft.Maui.Graphics.Text.AttributedTextRunExtensions\nMicrosoft.Maui.Graphics.Text.IAttributedText\nMicrosoft.Maui.Graphics.Text.IAttributedTextRun\nMicrosoft.Maui.Graphics.Text.IAttributedTextRun.Length.get -> int\nMicrosoft.Maui.Graphics.Text.IAttributedTextRun.Start.get -> int\nMicrosoft.Maui.Graphics.Text.ITextAttributes\nMicrosoft.Maui.Graphics.Text.MutableAttributedText\nMicrosoft.Maui.Graphics.Text.TextAttributes\nMicrosoft.Maui.Graphics.Text.TextAttributes.TextAttributes() -> void\nMicrosoft.Maui.Graphics.Text.TextAttributesExtensions\nMicrosoft.Maui.Graphics.Text.TextColors\n```\n\n----------------------------------------\n\nTITLE: String Size Measurement Methods\nDESCRIPTION: Method signatures for measuring string dimensions with different alignment options in the IStringSizeService interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\nMicrosoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: MapSpan Class Implementation\nDESCRIPTION: Implements geographic region spanning functionality with methods for manipulating map regions and coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MapSpan\n{\n    public MapSpan(Location center, double latitudeDegrees, double longitudeDegrees);\n    public Location Center { get; }\n    public double LatitudeDegrees { get; }\n    public double LongitudeDegrees { get; }\n    public Distance Radius { get; }\n    public MapSpan ClampLatitude(double north, double south);\n    public MapSpan WithZoom(double zoomFactor);\n}\n```\n\n----------------------------------------\n\nTITLE: Shadow Setting in .NET MAUI Canvas State\nDESCRIPTION: This snippet includes the method for setting shadows in the canvas state, specifying offset, blur, and color, crucial for adding depth to graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BlendMode Enum Values in C#\nDESCRIPTION: This snippet shows the definition of various blend mode options in the BlendMode enum within the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode.SoftLight = 8 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceAtop = 20 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceIn = 18 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceOut = 19 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Xor = 25 -> Microsoft.Maui.Graphics.BlendMode\n```\n\n----------------------------------------\n\nTITLE: Defining Communication Interfaces in MAUI\nDESCRIPTION: Interface definitions for core communication features including contacts, email, phone dialing and SMS functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IContacts.PickContactAsync() -> System.Threading.Tasks.Task<Contact?>\nMicrosoft.Maui.ApplicationModel.Communication.IEmail.ComposeAsync(EmailMessage? message) -> System.Threading.Tasks.Task\nMicrosoft.Maui.ApplicationModel.Communication.IPhoneDialer.Open(string number) -> void\nMicrosoft.Maui.ApplicationModel.Communication.ISms.ComposeAsync(SmsMessage? message) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Animation Manager and Ticker Methods in MAUI\nDESCRIPTION: Virtual methods for animation management including ticker functionality that controls animation timing and frame rates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Animations.AnimationManager.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Animations.Ticker.IsRunning.get -> bool\nvirtual Microsoft.Maui.Animations.Ticker.MaxFps.get -> int\nvirtual Microsoft.Maui.Animations.Ticker.MaxFps.set -> void\nvirtual Microsoft.Maui.Animations.Ticker.OnSystemEnabledChanged() -> void\nvirtual Microsoft.Maui.Animations.Ticker.Start() -> void\nvirtual Microsoft.Maui.Animations.Ticker.Stop() -> void\nvirtual Microsoft.Maui.Animations.Ticker.SystemEnabled.get -> bool\nvirtual Microsoft.Maui.Animations.Ticker.SystemEnabled.set -> void\n```\n\n----------------------------------------\n\nTITLE: Rectangle Adorner Implementation\nDESCRIPTION: Class for adding rectangular visual adorners to MAUI views with customizable properties like density, offset, and colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.RectangleAdorner.RectangleAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining GtkSkiaGraphicsView Class for MAUI GTK Integration\nDESCRIPTION: A GTK-specific implementation of a graphics view using Skia rendering. Handles drawing and sizing operations through a composition with ISkiaGraphicsRenderer and overrides GTK-specific methods for surface painting and size allocation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia.GtkSharp/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.GtkSkiaGraphicsView\nMicrosoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.GtkSkiaGraphicsView() -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.BackgroundColor.get -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.BackgroundColor.set -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.Drawable.get -> Microsoft.Maui.Graphics.IDrawable\n~Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.Drawable.set -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.Renderer.get -> Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer\n~Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.Renderer.set -> void\n~override Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.OnPaintSurface(SkiaSharp.Views.Desktop.SKPaintSurfaceEventArgs e) -> void\noverride Microsoft.Maui.Graphics.Skia.GtkSkiaGraphicsView.OnSizeAllocated(Gdk.Rectangle allocation) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Layout Operations in LayoutHandler in C#\nDESCRIPTION: These static methods map various operations for a Layout, such as Add, Clear, Insert, Remove, and property mappings for Background and ClipsToBounds.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapBackground(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClipsToBounds(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapInsert(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IClipboard Interface in C#\nDESCRIPTION: Defines the IClipboard interface with methods for managing clipboard content and events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.HasText.get -> bool\nMicrosoft.Maui.ApplicationModel.DataTransfer.IClipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Saving Images as Bytes in MAUI\nDESCRIPTION: This method saves a specified picture as a byte array. It takes an IPictureWriter and an IPicture as inputs and returns the byte array of the image.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytes(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Accelerometer Sensor Access in .NET MAUI\nDESCRIPTION: Static methods for monitoring device accelerometer data in .NET MAUI applications. These methods allow starting/stopping monitoring and handling acceleration data changes and shake detection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Default.get -> Microsoft.Maui.Devices.Sensors.IAccelerometer!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ShakeDetected -> System.EventHandler!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator !=(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator ==(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Switch Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for SwitchHandler responsible for mapping properties and handling events for the Switch control. Includes methods for controlling Switch state, thumb color, and track color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating MapSpan from Center Location and Radius\nDESCRIPTION: Static factory method that creates a MapSpan instance from a center location and radius distance. Used to define the visible region on a map.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\n```\n\n----------------------------------------\n\nTITLE: Size and SizeF Static Methods and Operators in .NET MAUI\nDESCRIPTION: Static methods for Microsoft.Maui.Graphics.Size and SizeF including type conversions and arithmetic operations. Defines operators for addition, subtraction, multiplication, division, and comparison, along with explicit and implicit conversions to other geometric types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Size.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.SizeF size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.SizeF size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size\nstatic readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Single-Type PropertyMapper Implementation in C#\nDESCRIPTION: Single-type PropertyMapper provides a specialized mapper for cases where only the virtual view type is needed. It offers constructors to create empty mappers or chain existing ones.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PropertyMapper<TVirtualView>\nMicrosoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper(params Microsoft.Maui.PropertyMapper![]! chained) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollToRequest Class in C# for MAUI\nDESCRIPTION: This snippet defines the ScrollToRequest class with methods for scrolling to a specific offset. It includes properties for horizontal and vertical offsets, and a constructor for initializing these values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollToRequest.ScrollToRequest(double HorizontalOffset, double VerticalOffset, bool Instant) -> void\nMicrosoft.Maui.ScrollToRequest.VerticalOffset.get -> double\nMicrosoft.Maui.ScrollToRequest.VerticalOffset.init -> void\n```\n\n----------------------------------------\n\nTITLE: Override ViewWillLayoutSubviews Method (ItemsViewController)\nDESCRIPTION: This code snippet overrides the ViewWillLayoutSubviews method in ItemsViewController2, probably for custom layout management within a MAUI ItemsView on iOS. It's part of the Microsoft.Maui.Controls.Handlers.Items2 namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.ViewWillLayoutSubviews() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Geocoding Services in .NET MAUI\nDESCRIPTION: Static methods for performing geocoding operations in .NET MAUI applications. These methods allow converting between addresses and geographic coordinates and retrieving location information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.Default.get -> Microsoft.Maui.Devices.Sensors.IGeocoding!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.Geocoding.GetPlacemarksAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\nstatic Microsoft.Maui.Devices.Sensors.GeocodingExtensions.GetPlacemarksAsync(this Microsoft.Maui.Devices.Sensors.IGeocoding! geocoding, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: RadioButton Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the RadioButtonHandler class that map various properties like background, font, content, check state, and visual styles. These methods connect the cross-platform RadioButton control with platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapBackground(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Point and Rectangle Structure Operations\nDESCRIPTION: Operator overloads and utility methods for Point, PointF, Rect, and RectF structures including conversions and comparisons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.operator +(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Element Creation for Menu Components in .NET MAUI Android\nDESCRIPTION: These method signatures define how different menu-related handlers in .NET MAUI create their platform-specific elements for Android. Each handler creates the appropriate Android views or objects that represent menu items, separators, or menu containers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.MenuBarHandler.CreatePlatformElement() -> Android.Views.View!\noverride Microsoft.Maui.Handlers.MenuBarItemHandler.CreatePlatformElement() -> Android.Views.View!\noverride Microsoft.Maui.Handlers.MenuFlyoutHandler.CreatePlatformElement() -> object!\noverride Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CreatePlatformElement() -> Android.Views.View!\noverride Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CreatePlatformElement() -> object!\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CreatePlatformElement() -> Android.Views.View!\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> Android.Views.View!\noverride Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> Google.Android.Material.AppBar.MaterialToolbar!\n```\n\n----------------------------------------\n\nTITLE: Image Handling Methods in Microsoft.Maui.Graphics Interfaces\nDESCRIPTION: Method signatures for saving and converting images in the IImage interface and loading images from streams in the IImageLoadingService interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task\nMicrosoft.Maui.Graphics.IImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage\nMicrosoft.Maui.Graphics.IImageLoadingService.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifecycle Events in MAUI Applications\nDESCRIPTION: Extension method for configuring lifecycle events in a MAUI application builder. This allows developers to define custom actions for various lifecycle events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Extending ICanvas with ClipPath Method\nDESCRIPTION: This extension method adds the ability to clip a path on any ICanvas implementation with a specified winding mode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.ClipPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining GeolocationAccuracy Enum in C#\nDESCRIPTION: Defines the GeolocationAccuracy enum with various accuracy levels. This enum is used to specify the desired accuracy for geolocation operations in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Best = 5 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Default = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.High = 4 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Low = 2 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Lowest = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Medium = 3 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\n```\n\n----------------------------------------\n\nTITLE: SizeRequest Operators and Conversions\nDESCRIPTION: Operator overloads and implicit conversions for the SizeRequest struct. Enables conversions between SizeRequest and Size structs, as well as equality comparison between SizeRequest instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.SizeRequest size) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.SizeRequest(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.SizeRequest\nstatic Microsoft.Maui.SizeRequest.operator !=(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool\nstatic Microsoft.Maui.SizeRequest.operator ==(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Preferences in MAUI (C#)\nDESCRIPTION: These methods retrieve values of different types from the Preferences storage. They accept a key, a default value, and an optional shared name. The methods return the stored value if it exists, or the default value if it doesn't.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue) -> double\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue, string? sharedName) -> float\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue) -> float\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue, string? sharedName) -> int\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue) -> int\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue, string? sharedName) -> long\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue) -> long\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue, string? sharedName) -> string?\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue) -> string?\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue, string? sharedName) -> System.DateTime\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime\n```\n\n----------------------------------------\n\nTITLE: Initializing LockableObservableListWrapper in .NET MAUI\nDESCRIPTION: A specialized collection wrapper that provides locking and read-only capabilities for observable lists in .NET MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.LockableObservableListWrapper.LockableObservableListWrapper() -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Application and Context Management\nDESCRIPTION: Core classes for managing MAUI application context, services, and platform-specific application behaviors\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.MauiApplication.SetBackButtonPressedHandler(System.Func<bool>! handler) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing ButtonHandler in MAUI\nDESCRIPTION: Defines constructors for the `ButtonHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. This handler is responsible for managing the platform-specific implementation of a MAUI Button.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: PickerHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the PickerHandler class in Microsoft.Maui that handle various properties of a picker control such as font, colors, alignment and selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\n```\n\n----------------------------------------\n\nTITLE: MenuBarItemHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the MenuBarItemHandler class that map operations and properties between the cross-platform IMenuBarItem interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapText(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Extensions between MAUI and Android\nDESCRIPTION: Extension methods for converting color objects between MAUI and Android platforms. These methods facilitate cross-platform color consistency.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsColor(this Android.Graphics.Color target) -> Microsoft.Maui.Graphics.Color\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsColor(this Microsoft.Maui.Graphics.Color target) -> Android.Graphics.Color\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsColorMultiplyAlpha(this Microsoft.Maui.Graphics.Color target, float alpha) -> Android.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Overriding UpdateItemsLayout Method for SelectableItemsViewHandler\nDESCRIPTION: Overrides the UpdateItemsLayout method in SelectableItemsViewHandler to provide custom layout handling for selectable items.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items.SelectableItemsViewHandler<TItemsView>.UpdateItemsLayout() -> void\n```\n\n----------------------------------------\n\nTITLE: ActivityIndicator Handler Mapping Methods in C#\nDESCRIPTION: Static methods and mappers for ActivityIndicator UI elements. These define how properties like Color and IsRunning are applied to the native platform controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Map Interface Definition\nDESCRIPTION: Core interface defining map functionality including pin management, region control, and interaction capabilities\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMap {\n    IList<IMapElement> Elements { get; }\n    IList<IMapPin> Pins { get; }\n    bool IsScrollEnabled { get; }\n    bool IsShowingUser { get; }\n    bool IsTrafficEnabled { get; }\n    bool IsZoomEnabled { get; }\n    MapType MapType { get; }\n    MapSpan? VisibleRegion { get; set; }\n    void MoveToRegion(MapSpan region);\n    void Clicked(Location position);\n}\n```\n\n----------------------------------------\n\nTITLE: MauiCALayer Class Definition\nDESCRIPTION: Custom CALayer implementation for MAUI that handles background and border styling with various paint types\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiCALayer.MauiCALayer() -> void\nMicrosoft.Maui.Platform.MauiCALayer.SetBackground(Microsoft.Maui.Graphics.Paint? paint) -> void\nMicrosoft.Maui.Platform.MauiCALayer.SetBorderBrush(Microsoft.Maui.Graphics.Paint? paint) -> void\nMicrosoft.Maui.Platform.MauiCALayer.SetBorderDash(float[]? borderDashArray, double borderDashOffset) -> void\n```\n\n----------------------------------------\n\nTITLE: Picker Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the PickerHandler class that map various properties like background, font, text alignment, and selection state. These methods connect the cross-platform Picker control with platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapBackground(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\n```\n\n----------------------------------------\n\nTITLE: Static SetBinding Extension Method\nDESCRIPTION: This code snippet presents a static extension method `SetBinding` for `BindableObject` in MAUI, enabling a concise way to create and apply bindings between a source property (specified by a getter) and a target property. This allows for data synchronization between UI elements and data sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding<TSource, TProperty>(this Microsoft.Maui.Controls.BindableObject! self, Microsoft.Maui.Controls.BindableProperty! targetProperty, System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> void\"\n```\n\n----------------------------------------\n\nTITLE: TitleBar Class Definition\nDESCRIPTION: Class definition for TitleBar control with properties for customizing window title bars including title, subtitle, icon, and content areas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class TitleBar\n{\n    public IView? Content { get; set; }\n    public Color ForegroundColor { get; set; }\n    public ImageSource Icon { get; set; }\n    public IView? LeadingContent { get; set; }\n    public IList<IView> PassthroughElements { get; }\n    public string Subtitle { get; set; }\n    public string Title { get; set; }\n    public IView? TrailingContent { get; set; }\n    public TitleBar() { }\n    protected virtual void OnApplyTemplate() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractCanvas<TState> Methods in C#\nDESCRIPTION: This snippet shows the method signatures for the AbstractCanvas<TState> class, which provides core canvas functionality like drawing paths, setting colors, and handling text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\n~abstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation Methods (C#)\nDESCRIPTION: Methods for manipulating colors including alpha modification, luminosity adjustment, and color space conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Color.AddLuminosity(float delta) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.MultiplyAlpha(float multiplyBy) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.ToArgbHex(bool includeAlpha = false) -> string\n```\n\n----------------------------------------\n\nTITLE: Declaring IMediaPicker Interface Methods in C#\nDESCRIPTION: Defines methods for capturing and picking photos and videos in the IMediaPicker interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.IMediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Media.IMediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Media.IMediaPicker.IsCaptureSupported.get -> bool\nMicrosoft.Maui.Media.IMediaPicker.PickPhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Media.IMediaPicker.PickVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\n----------------------------------------\n\nTITLE: Inserting Points in Paths in .NET MAUI\nDESCRIPTION: This snippet describes methods for inserting curves and lines at specific indices within the PathF class, enhancing path definitions dynamically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.InsertCurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.InsertLineTo(Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.InsertQuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Web Navigation Result Enumerations\nDESCRIPTION: Provides enum values representing various outcomes of web navigation attempts, including success, failure, cancellation, and timeout scenarios\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.WebNavigationResult.Success = 1\nMicrosoft.Maui.WebNavigationResult.Cancel = 2\nMicrosoft.Maui.WebNavigationResult.Timeout = 3\nMicrosoft.Maui.WebNavigationResult.Failure = 4\n```\n\n----------------------------------------\n\nTITLE: View Handler Mapping Methods in C#\nDESCRIPTION: Static methods for mapping various view properties and behaviors in MAUI ViewHandler class. These methods handle view-related operations like layout, transformation, and interaction.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n// ... additional view mapping methods\n```\n\n----------------------------------------\n\nTITLE: Canvas State Management in MAUI Graphics\nDESCRIPTION: Virtual methods for managing canvas state including save/restore operations and display scale handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Utilities in C# MAUI\nDESCRIPTION: Static methods for various unit conversions including temperature, pressure, distance, and more. These methods provide easy conversion between different measurement units.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double\n// ... (additional unit conversion methods)\n```\n\n----------------------------------------\n\nTITLE: MAUI Layout Manager Utility Methods\nDESCRIPTION: Static utility methods for layout management in MAUI. These methods handle constraint resolution and spacing measurement for layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutManager.ResolveConstraints(double externalConstraint, double explicitLength, double measuredLength, double min = 0, double max = Infinity) -> double\nstatic Microsoft.Maui.Layouts.StackLayoutManager.MeasureSpacing(double spacing, int childCount) -> double\n```\n\n----------------------------------------\n\nTITLE: Opening Maps Async (Location, Options) in MAUI\nDESCRIPTION: This extension method opens the device's map application to display the provided Location, with optional launch options. It operates asynchronously. This is an extension method on Location. It takes a Location and MapLaunchOptions as parameters and returns a Task representing the asynchronous operation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location, Microsoft.Maui.ApplicationModel.MapLaunchOptions options) -> System.Threading.Tasks.Task\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Accelerometer Sensor in MAUI C# Applications\nDESCRIPTION: Static methods to access and monitor the device accelerometer in MAUI applications, including shake detection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Default.get -> Microsoft.Maui.Devices.Sensors.IAccelerometer!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.ShakeDetected -> System.EventHandler!\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Accelerometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator !=(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator ==(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: IBarometer Interface Definition in C#\nDESCRIPTION: Interface for the barometer sensor in .NET MAUI. Provides methods to start and stop monitoring, an event for reading changes, and properties to check support and monitoring status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IBarometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IBarometer.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IBarometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IBarometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IBarometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: ScalingCanvas Class Implementation\nDESCRIPTION: Implements a canvas that supports scaling operations for drawing primitives like lines, rectangles, and ellipses\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScalingCanvas\n{\n    public float DisplayScale { get; set; }\n    public void DrawLine(float x1, float y1, float x2, float y2);\n    public void DrawRectangle(float x, float y, float width, float height);\n    public void DrawEllipse(float x, float y, float width, float height);\n    public void DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);\n    public void DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);\n    public void FillEllipse(float x, float y, float width, float height);\n    public void FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);\n    public void ClipRectangle(float x, float y, float width, float height);\n    public void ConcatenateTransform(Matrix3x2 transform);\n}\n```\n\n----------------------------------------\n\nTITLE: TimePicker Extension Methods in MAUI\nDESCRIPTION: Extension methods for TimePicker to handle time formatting and updates to visual properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this Microsoft.Maui.ITimePicker! timePicker) -> string!\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this System.TimeSpan time, string! format, System.Globalization.CultureInfo? cultureInfo = null) -> string!\nstatic Microsoft.Maui.Platform.TimePickerExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.TimePicker! platformTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ViewHandler Static Methods in C#\nDESCRIPTION: These static methods are part of the ViewHandler class in the Microsoft.Maui.Handlers namespace. They handle various aspects of view mapping such as clipping, focus, dimensions, and transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n// ... (additional ViewHandler methods)\n```\n\n----------------------------------------\n\nTITLE: Drawing String in PlatformCanvas in C#\nDESCRIPTION: This snippet provides a method to draw a string on the canvas at specific coordinates while customizing alignment and text flow.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Handling Methods and Operators in MAUI\nDESCRIPTION: Static methods and operators for creating and comparing Font objects, including system fonts with various weights and sizes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: Composing an Email in .NET MAUI\nDESCRIPTION: This snippet provides an asynchronous method to compose an email message within a MAUI application. It requires an EmailMessage object as a parameter and returns a Task, indicating completion status. The IEmail interface must be implemented.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IEmail.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage? message) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Overriding ClipPath Method in PlatformCanvas\nDESCRIPTION: This method override implements clipping a path on a PlatformCanvas with a specified winding mode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n```\n\n----------------------------------------\n\nTITLE: Create IImage from Stream in MAUI\nDESCRIPTION: This method creates an IImage object from a specified stream, allowing for the inclusion of an optional format for the image.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.PlatformImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Color Component Properties in MAUI Graphics\nDESCRIPTION: Read-only property definitions for Microsoft.Maui.Graphics.Color components, providing access to red, green, blue, and alpha channel values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.Graphics.Color.Red -> float\nreadonly Microsoft.Maui.Graphics.Color.Green -> float\nreadonly Microsoft.Maui.Graphics.Color.Blue -> float\nreadonly Microsoft.Maui.Graphics.Color.Alpha -> float\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Flags in .NET MAUI\nDESCRIPTION: Defines keyboard interaction flags for text input, including spell checking and suggestions for enhanced user input experience\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.Spellcheck = 2\nMicrosoft.Maui.KeyboardFlags.Suggestions = 4\n```\n\n----------------------------------------\n\nTITLE: Getting DateTimeOffset Values from MAUI Preferences\nDESCRIPTION: Method signatures for retrieving DateTimeOffset values from preferences storage. Includes overloads with and without sharedName parameter for namespace isolation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\n```\n\n----------------------------------------\n\nTITLE: Set Fill Color in SkiaCanvasState\nDESCRIPTION: This method sets the fill color in a SkiaCanvasState instance, allowing customization of how shapes and paths are filled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FillColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Rect Struct in C#\nDESCRIPTION: This snippet defines the Rect struct in the Microsoft.Maui.Graphics namespace. It includes properties and methods for manipulating rectangles with double precision coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Bottom.get -> double\nMicrosoft.Maui.Graphics.Rect.Bottom.set -> void\nMicrosoft.Maui.Graphics.Rect.Center.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Rect.Contains(double x, double y) -> bool\nMicrosoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Point pt) -> bool\nMicrosoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Rect rect) -> bool\nMicrosoft.Maui.Graphics.Rect.Deconstruct(out double x, out double y, out double width, out double height) -> void\nMicrosoft.Maui.Graphics.Rect.Equals(Microsoft.Maui.Graphics.Rect other) -> bool\nMicrosoft.Maui.Graphics.Rect.Height.get -> double\nMicrosoft.Maui.Graphics.Rect.Height.set -> void\nMicrosoft.Maui.Graphics.Rect.Inflate(double width, double height) -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: Layout Panel Clipping Extension for WinUI\nDESCRIPTION: Extension method for updating clipping behavior of MAUI layout panels in WinUI. This controls whether content is clipped to the bounds of the layout container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.LayoutPanelExtensions.UpdateClipsToBounds(this Microsoft.Maui.Platform.LayoutPanel! layoutPanel, Microsoft.Maui.ILayout! layout) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals Method for PathF Class in C#\nDESCRIPTION: This snippet overrides the Equals method for PathF, allowing for equality checks for path instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.PathF.Equals(object obj) -> bool\n```\n\n----------------------------------------\n\nTITLE: Control-Specific Overrides in .NET MAUI for Android\nDESCRIPTION: Method overrides for specific controls in MAUI's Android implementation, including MaterialButton, Picker, ScrollView, and SwipeRefreshLayout. These methods customize layout, measurement, and touch handling for each control type to match MAUI's cross-platform behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.MauiMaterialButton.IconGravity.get -> int\noverride Microsoft.Maui.Platform.MauiMaterialButton.IconGravity.set -> void\noverride Microsoft.Maui.Platform.MauiMaterialButton.OnLayout(bool changed, int left, int top, int right, int bottom) -> void\noverride Microsoft.Maui.Platform.MauiMaterialButton.OnMeasure(int widthMeasureSpec, int heightMeasureSpec) -> void\noverride Microsoft.Maui.Platform.MauiPicker.Dispose(bool disposing) -> void\noverride Microsoft.Maui.Platform.MauiPicker.OnFocusChanged(bool gainFocus, Android.Views.FocusSearchDirection direction, Android.Graphics.Rect? previouslyFocusedRect) -> void\noverride Microsoft.Maui.Platform.MauiPicker.OnTouchEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.Platform.MauiScrollView.OnInterceptTouchEvent(Android.Views.MotionEvent? ev) -> bool\noverride Microsoft.Maui.Platform.MauiScrollView.OnLayout(bool changed, int left, int top, int right, int bottom) -> void\noverride Microsoft.Maui.Platform.MauiScrollView.OnMeasure(int widthMeasureSpec, int heightMeasureSpec) -> void\noverride Microsoft.Maui.Platform.MauiScrollView.OnTouchEvent(Android.Views.MotionEvent? ev) -> bool\noverride Microsoft.Maui.Platform.MauiSwipeRefreshLayout.CanChildScrollUp() -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating Blocks from Attributed Text in MAUI\nDESCRIPTION: This method creates a list of blocks from the given attributed text, allowing for structured representation and manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateBlocks(this Microsoft.Maui.Graphics.Text.IAttributedText text) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.AttributedTextBlock>\n```\n\n----------------------------------------\n\nTITLE: Managing Menu Flyout in .NET MAUI\nDESCRIPTION: This code snippet describes the IMenuFlyoutHandler interface, detailing methods for managing flyout menus, including adding, clearing, and inserting items.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Add(Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Clear() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.PlatformView.get -> object!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyout!\n```\n\n----------------------------------------\n\nTITLE: Dispatching System API Signatures\nDESCRIPTION: Core dispatcher interfaces and classes for handling asynchronous operations and timer management in MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDispatcher {\n    IDispatcherTimer CreateTimer();\n    bool Dispatch(Action action);\n    bool DispatchDelayed(TimeSpan delay, Action action);\n    bool IsDispatchRequired { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Speech Options Properties in C#\nDESCRIPTION: This snippet outlines properties and constructors for the SpeechOptions class, allowing configuration of speech characteristics such as locale, pitch, and volume for text-to-speech operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.SpeechOptions.Locale.get -> Microsoft.Maui.Media.Locale?\nMicrosoft.Maui.Media.SpeechOptions.Locale.set -> void\nMicrosoft.Maui.Media.SpeechOptions.Pitch.get -> float?\nMicrosoft.Maui.Media.SpeechOptions.Pitch.set -> void\nMicrosoft.Maui.Media.SpeechOptions.SpeechOptions() -> void\nMicrosoft.Maui.Media.SpeechOptions.Volume.get -> float?\nMicrosoft.Maui.Media.SpeechOptions.Volume.set -> void\n\n```\n\n----------------------------------------\n\nTITLE: Canvas Transformation Methods in .NET MAUI\nDESCRIPTION: Methods that handle canvas transformations such as rotation, scaling, and translation. These methods allow for complex graphical manipulations and are essential for implementing advanced drawing capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformRotate(float degrees, float radians, float x, float y) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformRotate(float degrees, float radians) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformScale(float sx, float sy) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformTranslate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Element Handler Base Classes in C#\nDESCRIPTION: This snippet defines the base ElementHandler class and its generic version. These classes provide a foundation for implementing handlers for various UI elements, including properties for accessing the virtual and platform views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ElementHandler\nMicrosoft.Maui.Handlers.ElementHandler.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ElementHandler.MauiContext.get -> Microsoft.Maui.IMauiContext?\nMicrosoft.Maui.Handlers.ElementHandler.PlatformView.get -> object?\nMicrosoft.Maui.Handlers.ElementHandler.Services.get -> System.IServiceProvider?\nMicrosoft.Maui.Handlers.ElementHandler.VirtualView.get -> Microsoft.Maui.IElement?\n\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!\n```\n\n----------------------------------------\n\nTITLE: MAUI Image Source Extensions\nDESCRIPTION: Static extension methods for handling image sources in MAUI applications, including async loading and platform-specific image handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<object!>?>!\n```\n\n----------------------------------------\n\nTITLE: Creating MapSpan from Center and Radius in MAUI Maps\nDESCRIPTION: Static factory method that creates a MapSpan instance from a center location and radius distance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\n```\n\n----------------------------------------\n\nTITLE: TabbedViewHandler Static Properties in .NET MAUI\nDESCRIPTION: Static properties for the TabbedViewHandler class that define mappers for tabbed view control customization, including CommandMapper for handling commands and Mapper for handling general properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: UI Adorners and Window Overlays in MAUI\nDESCRIPTION: Methods for implementing UI overlays and adorners that can be drawn on top of windows and views, including initialization and element management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool\nvirtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\nvirtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void\nvirtual Microsoft.Maui.WindowOverlay.Initialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in Microsoft.Maui.Graphics\nDESCRIPTION: Static readonly fields defining various color constants in the Microsoft.Maui.Graphics.Colors class. These represent commonly used colors as Microsoft.Maui.Graphics.Color objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\n~static readonly Microsoft.Maui.Graphics.Colors.Tan -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Teal -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Thistle -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Tomato -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Transparent -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Turquoise -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Violet -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Wheat -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.White -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.WhiteSmoke -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Yellow -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.YellowGreen -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation Methods\nDESCRIPTION: Extension methods for color manipulation including alpha channel adjustments, luminosity changes, and color space conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Color.AddLuminosity(float delta) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.MultiplyAlpha(float multiplyBy) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Color.ToArgbHex(bool includeAlpha = false) -> string\n~Microsoft.Maui.Graphics.Color.WithAlpha(float alpha) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Interacting with Gyroscope Sensor\nDESCRIPTION: Details methods and properties for gyroscope data access including start/stop of monitoring, handling data change events, and checking sensor status. Utilizes Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGyroscope.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGyroscope.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.IGyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IGyroscope.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Invoking on Main Thread in MAUI\nDESCRIPTION: This static method allows executing a function on the main thread asynchronously within a MAUI application.  It takes a function as input and returns a Task representing the asynchronous operation. This is crucial for UI updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync<T>(System.Func<T> func) -> System.Threading.Tasks.Task<T>\"\n```\n\n----------------------------------------\n\nTITLE: Drawing Arcs and Paths in MAUI (C#)\nDESCRIPTION: These methods allow for drawing arcs and building paths based on definitions. They utilize parameters to define the characteristics of the arcs being drawn.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathArcExtensions.DrawArc(this Microsoft.Maui.Graphics.PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathArcExtensions.SVGArcTo(this Microsoft.Maui.Graphics.PathF aTarget, float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathBuilder.Build(string definition) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathBuilder.ParseFloat(string value) -> float\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Sources in MAUI App Builder\nDESCRIPTION: Extension methods for configuring image sources in a MAUI application builder. These methods allow for customizing image source handling during application initialization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IImageSourceServiceCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: LabelHandler Static Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods for mapping Label properties such as text, formatting, colors, alignments, and decorations. These methods enable consistent text display across different platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\nstatic Microsoft.Maui.Handlers.LabelHandler.MapBackground(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFormatting(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapLineHeight(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapPadding(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\nstatic Microsoft.Maui.Handlers.LabelHandler.MapText(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextColor(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextDecorations(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Window Frame Dimensions\nDESCRIPTION: Retrieves the current dimensions of the window's frame, essential for layout calculations and positioning.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Methods for Microsoft.Maui.Graphics Classes in C#\nDESCRIPTION: This snippet defines virtual methods for various Microsoft.Maui.Graphics classes, including BitmapExportContext, CanvasState, and Paint. These methods handle disposal, state changes, and transparency checks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void\nvirtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Handling Platform Graphics View in C#\nDESCRIPTION: PlatformGraphicsView provides functionalities to refresh or invalidate the graphics drawn on a view. Methods in this class offer ways to update the visuals either entirely or based on specific coordinates and dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.InvalidateDrawable() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.InvalidateDrawable(float x, float y, float w, float h) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Parsers and Operators in Microsoft.Maui.Graphics\nDESCRIPTION: This section describes methods that convert System.Numerics.Vector4 to Color and parse strings into Color instances. Includes ability to attempt color parsing safely using TryParse. Requires Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.implicit operator Microsoft.Maui.Graphics.Color(System.Numerics.Vector4 color) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.Parse(string value) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Color.TryParse(string value, out Microsoft.Maui.Graphics.Color color) -> bool\n```\n\n----------------------------------------\n\nTITLE: Font Extensions in Microsoft.Maui.Graphics\nDESCRIPTION: These extension methods retrieve SVG style and weight for a given font. Useful for graphic developers who convert font properties to SVG attributes. These methods depend on Microsoft.Maui.Graphics.IFont.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.IFontExtensions.GetSvgStyle(this Microsoft.Maui.Graphics.IFont font) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.IFontExtensions.GetSvgWeight(this Microsoft.Maui.Graphics.IFont font) -> string\n```\n\n----------------------------------------\n\nTITLE: Platform UI Component Properties\nDESCRIPTION: Property definitions for MAUI platform-specific UI components including buttons and steppers\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiCancelButton.BackgroundBrush.get -> Microsoft.UI.Xaml.Media.Brush\nMicrosoft.Maui.Platform.MauiCancelButton.BackgroundBrush.set -> void\nMicrosoft.Maui.Platform.MauiCancelButton.ForegroundBrush.get -> Microsoft.UI.Xaml.Media.Brush\nMicrosoft.Maui.Platform.MauiCancelButton.ForegroundBrush.set -> void\nMicrosoft.Maui.Platform.MauiStepper.ButtonBackground.get -> Microsoft.UI.Xaml.Media.Brush\nMicrosoft.Maui.Platform.MauiStepper.ButtonBackground.set -> void\nMicrosoft.Maui.Platform.MauiStepper.ButtonBackgroundColor.get -> Microsoft.Maui.Graphics.Color\nMicrosoft.Maui.Platform.MauiStepper.ButtonBackgroundColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Command Mapper Generic Class Definition\nDESCRIPTION: Generic command mapping implementation for handling view-specific commands with type safety.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.CommandMapper<TVirtualView, TViewHandler>\nMicrosoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void\nMicrosoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Image on Canvas in .NET MAUI\nDESCRIPTION: This method draws an image at specified coordinates along with width and height on the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending AppHostBuilder for MAUI Controls in C#\nDESCRIPTION: Defines extension methods for AppHostBuilder to add MAUI Controls handlers and use MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiControlsHandlers(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining Generic SetInvokeJavaScriptTarget Method\nDESCRIPTION: Defines a generic method for setting a target object that can be invoked from JavaScript in a HybridWebView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.SetInvokeJavaScriptTarget<T>(T! target) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar TrailingContent Property in C#\nDESCRIPTION: These code snippets represent accessing the TrailingContent property of the TitleBar, allowing to get or set the view displayed on the right side of the title bar.  The view must implement IView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.TrailingContent.get -> Microsoft.Maui.IView?\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.TrailingContent.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Slider Handler Property Mapping in C#\nDESCRIPTION: Static methods for mapping Slider properties such as minimum/maximum values, track colors, and thumb appearance to platform-specific implementations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Window Management Virtual Methods in Microsoft.Maui\nDESCRIPTION: Virtual methods for handling window events in the Microsoft.Maui framework. These methods manage window activation, closure, and visibility changes in WinUI windows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.MauiWinUIWindow.OnActivated(object! sender, Microsoft.UI.Xaml.WindowActivatedEventArgs! args) -> void\nvirtual Microsoft.Maui.MauiWinUIWindow.OnClosed(object! sender, Microsoft.UI.Xaml.WindowEventArgs! args) -> void\nvirtual Microsoft.Maui.MauiWinUIWindow.OnVisibilityChanged(object! sender, Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs! args) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Magnetometer Sensor Data\nDESCRIPTION: Provides capabilities for accessing magnetometer sensor data including properties to check support status, manage monitoring, and handle reading changes. Based in the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in C# for .NET MAUI Graphics\nDESCRIPTION: This snippet shows the declaration of static readonly fields for various color constants in the Microsoft.Maui.Graphics.Colors class. These fields represent predefined colors that can be used in MAUI graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.SlateGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Snow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SpringGreen -> Microsoft.Maui.Graphics.Color\n// ... more color definitions\n```\n\n----------------------------------------\n\nTITLE: Location Services API in .NET MAUI\nDESCRIPTION: Location-related functionality including distance calculations, map launching, and location comparison operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Defining ISkiaGraphicsRenderer Interface in MAUI Graphics Skia\nDESCRIPTION: Interface definition for Skia-based graphics renderers in GTK environments. Specifies methods and properties for handling drawing operations, size changes, and invalidation requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia.GtkSharp/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer\nMicrosoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Detached() -> void\nMicrosoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Invalidate() -> void\nMicrosoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Invalidate(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.SizeChanged(int width, int height) -> void\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.BackgroundColor.get -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.BackgroundColor.set -> void\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Canvas.get -> Microsoft.Maui.Graphics.ICanvas\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Draw(SkiaSharp.SKCanvas canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Drawable.get -> Microsoft.Maui.Graphics.IDrawable\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.Drawable.set -> void\n~Microsoft.Maui.Graphics.Skia.ISkiaGraphicsRenderer.GraphicsView.set -> void\n```\n\n----------------------------------------\n\nTITLE: Layout Handler Static Mappings - C#\nDESCRIPTION: Static methods for handling layout operations like Add, Remove, Clear and Insert. Includes command mapper and property mapper definitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapBackground(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rounded Rectangle on ICanvas in C#\nDESCRIPTION: This method draws a rounded rectangle on the canvas. It takes parameters for position, size, and corner radius.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ICanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Bounds and Reading Pictures in MAUI (C#)\nDESCRIPTION: These methods retrieve bounds from pictures and read picture data from streams, supporting operations involving images loaded within the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureExtensions.GetBounds(this Microsoft.Maui.Graphics.IPicture target) -> Microsoft.Maui.Graphics.RectF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureReaderExtensions.Read(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> Microsoft.Maui.Graphics.IPicture\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureReaderExtensions.ReadAsync(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Graphics.IPicture>\n```\n\n----------------------------------------\n\nTITLE: Image View Control Extensions for WinUI\nDESCRIPTION: Extensions for managing WinUI image controls, including clearing images, updating aspect ratios, and controlling image animations based on MAUI image properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ImageViewExtensions.Clear(this Microsoft.UI.Xaml.Controls.Image! imageView) -> void\nstatic Microsoft.Maui.Platform.ImageViewExtensions.UpdateAspect(this Microsoft.UI.Xaml.Controls.Image! imageView, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Platform.ImageViewExtensions.UpdateIsAnimationPlaying(this Microsoft.UI.Xaml.Controls.Image! imageView, Microsoft.Maui.IImageSourcePart! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IEditor Interface in C#\nDESCRIPTION: The IEditor interface defines properties and methods for text editing controls in the .NET MAUI framework, including a completion event.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IEditor.Completed() -> void\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture Functionality\nDESCRIPTION: APIs for capturing screenshots with various configuration options and format support in .NET MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nIScreenshot.CaptureAsync() -> Task<IScreenshotResult!>\n```\n\n----------------------------------------\n\nTITLE: ScrollView Handler Property Mappings in C#\nDESCRIPTION: Static methods for managing ScrollView control properties including Content, ContentSize, ScrollBarVisibility and Orientation settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContentSize(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Triggering Haptic Feedback in MAUI C# Applications\nDESCRIPTION: Static methods to trigger haptic feedback in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.HapticFeedback.Default.get -> Microsoft.Maui.Devices.IHapticFeedback!\nstatic Microsoft.Maui.Devices.HapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type = Microsoft.Maui.Devices.HapticFeedbackType.Click) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Flex Direction and Wrap in Microsoft MAUI\nDESCRIPTION: This snippet defines properties for flex direction and wrapping behavior in Microsoft MAUI, allowing developers to control how items are laid out in a flexible container, whether in rows or columns, and how they wrap across lines.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.Column = 2 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexDirection.ColumnReverse = 3 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexDirection.Row = 0 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexDirection.RowReverse = 1 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexWrap.NoWrap = 0 -> Microsoft.Maui.Layouts.FlexWrap\nMicrosoft.Maui.Layouts.FlexWrap.Reverse = 2 -> Microsoft.Maui.Layouts.FlexWrap\nMicrosoft.Maui.Layouts.FlexWrap.Wrap = 1 -> Microsoft.Maui.Layouts.FlexWrap\n```\n\n----------------------------------------\n\nTITLE: TextBox Extension Methods in MAUI\nDESCRIPTION: Extension methods for TextBox control to update various text-related properties including font, alignment, input settings, and styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextBoxExtensions.UpdateBackground(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TextBoxExtensions.UpdateCharacterSpacing(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextBoxExtensions.UpdateClearButtonVisibility(this Microsoft.UI.Xaml.Controls.TextBox! textBox, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: CheckBox Handler Mapping Methods in C#\nDESCRIPTION: Methods for mapping checkbox properties to native controls. These handle the checked state and foreground color for cross-platform checkbox implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.CheckBoxHandler!>!\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.ICheckBoxHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods in MAUI\nDESCRIPTION: Static methods for handling authentication in MAUI applications, including Apple Sign-In and Web Authentication. These methods are part of the Microsoft.Maui.Authentication namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.AppleSignInAuthenticator.Default.get -> Microsoft.Maui.Authentication.IAppleSignInAuthenticator!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.AuthenticateAsync(System.Uri! url, System.Uri! callbackUrl) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\nstatic Microsoft.Maui.Authentication.WebAuthenticator.Default.get -> Microsoft.Maui.Authentication.IWebAuthenticator!\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Canvas Implementation\nDESCRIPTION: Platform-specific implementation of canvas functionality including state management and bitmap export.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformBitmapExportContext.PlatformBitmapExportContext(int width, int height, float displayScale = 1, int dpi = 72, bool disposeBitmap = true, bool transparent = true) -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.SetBlur(float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Functionality in MAUI (C#)\nDESCRIPTION: Methods for converting text to speech, retrieving available system locales, and controlling speech through options and cancellation tokens.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!\nstatic Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: TextField Extensions for Entry Controls in .NET MAUI iOS\nDESCRIPTION: Extension methods for configuring UITextField controls based on MAUI IEntry properties. These methods handle text input features like character spacing, cursor position, text alignment, and keyboard behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_190\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateCharacterSpacing(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateClearButtonVisibility(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateCursorPosition(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateFont(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateHorizontalTextAlignment(this UIKit.UITextField! textField, Microsoft.Maui.ITextAlignment! textAlignment) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsPassword(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsReadOnly(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsSpellCheckEnabled(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateIsTextPredictionEnabled(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateKeyboard(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateMaxLength(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdatePlaceholder(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry, Microsoft.Maui.Graphics.Color? defaultPlaceholderColor = null) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateReturnType(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateSelectionLength(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateText(this UIKit.UITextField! textField, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateTextColor(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateVerticalTextAlignment(this UIKit.UITextField! textField, Microsoft.Maui.ITextAlignment! textAlignment) -> void\n```\n\n----------------------------------------\n\nTITLE: PDF Page Handling in MAUI (C#)\nDESCRIPTION: These methods facilitate the handling of PDF pages, enabling conversions to byte arrays, streams, and base64 strings, which can be useful for viewing or sharing PDF content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PdfPageExtensions.AsBase64(this Microsoft.Maui.Graphics.IPdfPage target) -> string\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PdfPageExtensions.AsBytes(this Microsoft.Maui.Graphics.IPdfPage target) -> byte[]\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PdfPageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IPdfPage target) -> System.Threading.Tasks.Task<byte[]>\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PdfPageExtensions.AsStream(this Microsoft.Maui.Graphics.IPdfPage target) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: CheckBox Handler Property Mappings\nDESCRIPTION: Static methods for mapping checkbox properties like background, foreground and checked state between the MAUI abstraction and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.ICheckBoxHandler!>!\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapBackground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\n```\n\n----------------------------------------\n\nTITLE: Point and PointF Operators and Conversions in C#\nDESCRIPTION: Operator overloads and conversion methods for Point and PointF structures, including arithmetic operations and conversions between Point, PointF, and Vector2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.explicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.Point pt) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.Point(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.Point p) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Point.operator !=(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool\nstatic Microsoft.Maui.Graphics.Point.operator +(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.operator ==(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool\nstatic Microsoft.Maui.Graphics.Point.Zero -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.PointF.explicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.PointF pt) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.PointF p) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.PointF p) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.PointF(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.operator !=(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic Microsoft.Maui.Graphics.PointF.operator +(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator ==(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\n```\n\n----------------------------------------\n\nTITLE: HybridWebView JavaScript Interaction Method in C#\nDESCRIPTION: Defines a method to set a target for JavaScript invocation in the HybridWebView. This enables communication between the .NET code and JavaScript running in the WebView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.SetInvokeJavaScriptTarget<T>(T! target) -> void\n```\n\n----------------------------------------\n\nTITLE: PDF Page Extension Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Methods for converting IPdfPage objects to different formats like Base64, byte arrays, and streams.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBase64(this Microsoft.Maui.Graphics.IPdfPage target) -> string\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBytes(this Microsoft.Maui.Graphics.IPdfPage target) -> byte[]\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IPdfPage target) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsStream(this Microsoft.Maui.Graphics.IPdfPage target) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: Resizing Skia Images with Mode\nDESCRIPTION: Modifies an image's dimensions according to a specified resize mode, supporting various fit strategies and ensuring proportional rendering when necessary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Updating Tizen DrawerView for MAUI FlyoutView\nDESCRIPTION: These extension methods update properties of a Tizen DrawerView to implement MAUI's FlyoutView functionality. They handle flyout behavior, presentation, and content updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.FlyoutViewExtensions.UpdateDetail(this Tizen.UIExtensions.NUI.DrawerView! platformDrawerView, Microsoft.Maui.IFlyoutView! flyoutView, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.FlyoutViewExtensions.UpdateFlyout(this Tizen.UIExtensions.NUI.DrawerView! platformDrawerView, Microsoft.Maui.IFlyoutView! flyoutView, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.FlyoutViewExtensions.UpdateFlyoutBehavior(this Tizen.UIExtensions.NUI.DrawerView! platformDrawerView, Microsoft.Maui.IFlyoutView! flyoutView) -> void\n```\n\n----------------------------------------\n\nTITLE: MenuFlyout Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the MenuFlyoutHandler class that map operations like adding, inserting, removing, and clearing items. These methods manage the lifecycle of items within a MenuFlyout control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Readonly ForegroundColorProperty (TitleBar)\nDESCRIPTION: This code declares a static readonly BindableProperty named ForegroundColorProperty within the TitleBar class. This allows developers to bind and control the foreground color of the TitleBar in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.ForegroundColorProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Parsing SizeF from String in MAUI\nDESCRIPTION: This method attempts to parse a string representation of a size (floating-point) into a Microsoft MAUI SizeF object. It returns a boolean indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.SizeF.TryParse(string value, out Microsoft.Maui.Graphics.SizeF sizeF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific WebView Implementation\nDESCRIPTION: Implements platform-specific web view functionality for iOS/MacOS using WKWebView\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiHybridWebView.MauiHybridWebView(Microsoft.Maui.Handlers.HybridWebViewHandler! handler, CoreGraphics.CGRect frame, WebKit.WKWebViewConfiguration! configuration) -> void\nMicrosoft.Maui.Platform.MauiHybridWebView.SendRawMessage(string! rawMessage) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Font Copy in Skia Extensions\nDESCRIPTION: Extension method to create a copy of a SkiaSharp font, handling nullable input and providing a safe font duplication mechanism\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Override ViewWillLayoutSubviews Method (StructuredItemsViewController)\nDESCRIPTION: This code snippet shows an override of the ViewWillLayoutSubviews method inside StructuredItemsViewController2. This is probably used for custom layout adjustments before subviews are laid out in a MAUI iOS scenario.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2<TItemsView>.ViewWillLayoutSubviews() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitmap Export Context in Skia\nDESCRIPTION: Initializes a new BitmapExportContext with specified dimensions and display scale. This context is used for bitmap-related operations in Skia graphic rendering. Dependencies include Microsoft.Maui.Graphics and SkiaSharp libraries.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.PlatformBitmapExportService.CreateContext(int width, int height, float displayScale = 1) -> Microsoft.Maui.Graphics.BitmapExportContext\n```\n\n----------------------------------------\n\nTITLE: Static Create BindingBase Method\nDESCRIPTION: This code defines a static `Create` method that simplifies creating instances of `BindingBase` in MAUI. This method supports various binding options like mode, converter, string format, source, fallback value, and target null value, providing flexibility in defining data bindings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.BindingBase.Create<TSource, TProperty>(System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> Microsoft.Maui.Controls.BindingBase!\"\n```\n\n----------------------------------------\n\nTITLE: Extension Classes API Reference (C#)\nDESCRIPTION: Platform-specific extension classes for graphics operations including extensions for attributed text, CGColor, CgContext, and other platform components. These extensions provide utilities to integrate with platform-specific graphics APIs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_163\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureExtensions\nMicrosoft.Maui.Graphics.PicturePattern\nMicrosoft.Maui.Graphics.PictureReaderExtensions\nMicrosoft.Maui.Graphics.PictureWriterExtensions\nMicrosoft.Maui.Graphics.Platform.AttributedTextExtensions\nMicrosoft.Maui.Graphics.Platform.CGColorExtensions\nMicrosoft.Maui.Graphics.Platform.CgContextExtensions\nMicrosoft.Maui.Graphics.Platform.FontExtensions\nMicrosoft.Maui.Graphics.Platform.GraphicsExtensions\nMicrosoft.Maui.Graphics.Platform.ImageExtensions\nMicrosoft.Maui.Graphics.Platform.NSAttributedStringExtension\n```\n\n----------------------------------------\n\nTITLE: Setting Text Attributes in MAUI C#\nDESCRIPTION: Enables the setting of various properties in a text attributes dictionary in Microsoft MAUI, covering basic, boolean, enum, float, and integer types. The main inputs are the attributes dictionary, the attribute type, and values. These methods do not have a return type but update the dictionary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.RemoveAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetBoolAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool value, bool defaultValue = false) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetEnumAttribute<T>(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T value, T defaultValue) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetFloatAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, float value, float defaultValue) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetIntAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, int value, int defaultValue) -> void\n```\n\n----------------------------------------\n\nTITLE: Share Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for the IShare interface to provide simpler ways to share content. These methods extend the IShare interface with convenience methods for sharing text with various parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text, string! title) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: PropertyMapper Classes in C#\nDESCRIPTION: Definitions of PropertyMapper classes which facilitate mapping properties between virtual views and platform-specific handlers in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PropertyMapper\nMicrosoft.Maui.PropertyMapper.Chained.get -> Microsoft.Maui.IPropertyMapper![]?\nMicrosoft.Maui.PropertyMapper.Chained.set -> void\nMicrosoft.Maui.PropertyMapper.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]? chained) -> void\nMicrosoft.Maui.PropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView) -> void\nMicrosoft.Maui.PropertyMapper.UpdateProperty(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]! chained) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].get -> System.Action<TViewHandler, TVirtualView>!\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].set -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView>\nMicrosoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView>.PropertyMapper(params Microsoft.Maui.PropertyMapper![]! chained) -> void\nMicrosoft.Maui.PropertyMapperExtensions\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeLifecycleExtensions Class for Handler Association in .NET MAUI\nDESCRIPTION: This code defines a static class that handles the association between objects and lifecycle event handlers in .NET MAUI. It provides methods to set, get, and remove handlers, allowing for proper management of native lifecycle events and preventing memory leaks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: DatePicker Handler Mapping Methods in C#\nDESCRIPTION: Methods for mapping date picker properties to native controls. These handle date formatting, value ranges, and styling for cross-platform date picker implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Flashlight Interface Definition in MAUI\nDESCRIPTION: Interface for controlling the device flashlight in MAUI applications. Provides asynchronous methods to check support, turn on, and turn off the flashlight.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IFlashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.IFlashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\nMicrosoft.Maui.Devices.IFlashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Battery Information in MAUI Applications\nDESCRIPTION: Provides static properties and events for accessing battery information, including charge level, power source, and energy saver status. Useful for implementing power-aware features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.ChargeLevel.get -> double\nstatic Microsoft.Maui.Devices.Battery.Default.get -> Microsoft.Maui.Devices.IBattery!\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Battery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nstatic Microsoft.Maui.Devices.Battery.State.get -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: Abstract Canvas Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Abstract methods for the AbstractCanvas<TState> class, defining various drawing operations and property setters for canvas manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Antialias.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.BlendMode.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillEllipse(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRectangle(float x, float y, float width, float height) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FontSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.MiterLimit.set -> void\n```\n\n----------------------------------------\n\nTITLE: Controlling Device Vibration in MAUI (C#)\nDESCRIPTION: Static methods to control device vibration. Provides different options to initiate vibration with or without specified duration, as well as cancellation functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Vibration.Cancel() -> void\nstatic Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!\nstatic Microsoft.Maui.Devices.Vibration.Vibrate() -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void\nstatic Microsoft.Maui.Devices.VibrationExtensions.Vibrate(this Microsoft.Maui.Devices.IVibration! vibration, double duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Orientation Sensors in C#\nDESCRIPTION: This snippet illustrates actual implementations of orientation sensors. It includes properties to check sensor support and monitoring status, as well as methods for starting and stopping the sensor. Events are also described for responding to reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.OrientationSensorImplementation() -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.Stop() -> void\n\n```\n\n----------------------------------------\n\nTITLE: Device Display Information in MAUI\nDESCRIPTION: Provides static properties and events for accessing device display information, including screen dimensions and orientation. Useful for implementing responsive layouts and display-aware features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.Current.get -> Microsoft.Maui.Devices.IDeviceDisplay!\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.get -> bool\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.set -> void\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Paint Extensions for Graphics in MAUI\nDESCRIPTION: Extension methods for the Paint class that provide functionality to check if a paint object is null or empty and to convert paint objects to color objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?\n```\n\n----------------------------------------\n\nTITLE: Defining IMenuBarHandler Interface in C#\nDESCRIPTION: Interface definition for menu bar handlers, including methods for adding, inserting, removing, and clearing menu items, as well as property getters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler\nMicrosoft.Maui.Handlers.IMenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.Clear() -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.PlatformView.get -> object!\nMicrosoft.Maui.Handlers.IMenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.VirtualView.get -> Microsoft.Maui.IMenuBar!\n```\n\n----------------------------------------\n\nTITLE: PageHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the PageHandler class that map properties between the cross-platform IContentView interface and platform-specific page implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing Operations in MAUI Graphics\nDESCRIPTION: Core drawing operations for the PlatformCanvas class including methods for drawing shapes, transformations, and state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillRoundedRectangle(float x, float y, float width, float height, float aCornerRadius) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\n```\n\n----------------------------------------\n\nTITLE: WebView Handler Mappings in MAUI\nDESCRIPTION: Static methods for handling WebView functionality including navigation, JavaScript evaluation, and web content source mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: PathF Core Drawing Methods\nDESCRIPTION: Method signatures for basic path drawing operations like lineTo and moveTo in the PathF class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF.LineTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.LineTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.MoveTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.MoveTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PathF path) -> void\nMicrosoft.Maui.Graphics.PathF.PlatformPath.get -> object\nMicrosoft.Maui.Graphics.PathF.PlatformPath.set -> void\nMicrosoft.Maui.Graphics.PathF.Points.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PointF>\n```\n\n----------------------------------------\n\nTITLE: AppAction Id getter in MAUI\nDESCRIPTION: This property getter retrieves the unique identifier of the AppAction. This is a read/write property. The identifier is a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.Id.get -> string!\"\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Access Extensions in Microsoft.Maui.Graphics.Text\nDESCRIPTION: Methods for getting various text attributes from ITextAttributes objects, including colors, font properties, and text formatting options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBackgroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBold(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontName(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontSize(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, float? fontSize = null) -> float\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetForegroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetItalic(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetMarker(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> Microsoft.Maui.Graphics.Text.MarkerType\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetStrikethrough(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetSubscript(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetSuperscript(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetUnderline(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetUnorderedList(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\n----------------------------------------\n\nTITLE: GetHashCode Implementations for Graphic Types in .NET MAUI\nDESCRIPTION: GetHashCode implementations for various graphic types including Point, Rect, and Size (with their float variants). These are necessary for collection operations and equality comparisons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Point.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.PointF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Rect.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.RectF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Size.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.SizeF.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Merging Text Attributes in C#\nDESCRIPTION: This extension method merges two IReadOnlyDictionary<TextAttribute, string> instances into a new ITextAttributes instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.Union(this System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> Microsoft.Maui.Graphics.Text.ITextAttributes\n```\n\n----------------------------------------\n\nTITLE: Static Brush Property Signatures - C#\nDESCRIPTION: Static property signatures for predefined brush colors in MAUI Controls, providing access to common grey color variations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Brush.DarkGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\nstatic Microsoft.Maui.Controls.Brush.LightGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n```\n\n----------------------------------------\n\nTITLE: Overriding RadioButtonHandler Methods for Tizen Platform\nDESCRIPTION: These methods override RadioButtonHandler functionality to create, connect, and disconnect ContentViewGroup elements for the Tizen implementation of MAUI radio buttons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.RadioButtonHandler.ConnectHandler(Microsoft.Maui.Platform.ContentViewGroup! platformView) -> void\noverride Microsoft.Maui.Handlers.RadioButtonHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentViewGroup!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.DisconnectHandler(Microsoft.Maui.Platform.ContentViewGroup! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Readonly HybridRootProperty\nDESCRIPTION: This snippet declares a static readonly `BindableProperty` named `HybridRootProperty` within the `HybridWebView` class. This property likely stores a reference to the root element or container within the hybrid web view's structure, which is used to manage the layout and rendering of content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.HybridWebView.HybridRootProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Circle Map Element Class (C#)\nDESCRIPTION: The Circle class represents a circular overlay on a map with properties for center location, radius, and fill color. It's used to highlight circular areas on maps.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Circle\nMicrosoft.Maui.Controls.Maps.Circle.Circle() -> void\nMicrosoft.Maui.Controls.Maps.Circle.Center.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Circle.Center.set -> void\nMicrosoft.Maui.Controls.Maps.Circle.Radius.get -> Microsoft.Maui.Maps.Distance\nMicrosoft.Maui.Controls.Maps.Circle.Radius.set -> void\nMicrosoft.Maui.Controls.Maps.Circle.Fill.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.Controls.Maps.Circle.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.Circle.FillColor.set -> void\nstatic readonly Microsoft.Maui.Controls.Maps.Circle.CenterProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Circle.RadiusProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Circle.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Abstract Canvas Drawing Methods\nDESCRIPTION: Core abstract methods for the AbstractCanvas<TState> class defining drawing operations like ClipPath, DrawImage, DrawString, and FillPath.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract void ClipPath(PathF path, WindingMode windingMode = WindingMode.NonZero);\nabstract void DrawImage(IImage image, float x, float y, float width, float height);\nabstract void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow = TextFlow.ClipBounds, float lineSpacingAdjustment = 0);\n```\n\n----------------------------------------\n\nTITLE: Implementing LayoutHandler Class in C#\nDESCRIPTION: This snippet shows the implementation of the LayoutHandler class, which includes methods for adding, removing, and updating views in a layout. It also includes constructors and a method for updating the Z-index of a view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler\nMicrosoft.Maui.Handlers.LayoutHandler.Add(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Clear() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Insert(int index, Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Remove(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Update(int index, Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.UpdateZIndex(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing AppleSignInAuthenticator in MAUI Authentication\nDESCRIPTION: Defines the AppleSignInAuthenticator class and its Options in the Microsoft.Maui.Authentication namespace, providing properties for Apple Sign-In authentication.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.get -> bool\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.set -> void\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.get -> bool\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.set -> void\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.Options() -> void\n```\n\n----------------------------------------\n\nTITLE: Extending ITextInput for Text Manipulation in C#\nDESCRIPTION: These extension methods provide functionality for text input validation and updating. They include checking if text is within maximum length and updating the text of an ITextInput.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ITextInputExtensions.TextWithinMaxLength(this Microsoft.Maui.ITextInput! textInput, string? text, Foundation.NSRange range, string! replacementString) -> bool\nstatic Microsoft.Maui.ITextInputExtensions.UpdateText(this Microsoft.Maui.ITextInput! textInput, string? text) -> void\n```\n\n----------------------------------------\n\nTITLE: TextAttributesExtensions Set and Remove Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Extension methods for setting and removing attributes in a Dictionary<TextAttribute, string>. These methods handle type conversion for different attribute types (string, bool, enum, float, int) and provide options for default values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.RemoveAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetBoolAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool value, bool defaultValue = false) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetEnumAttribute<T>(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T value, T defaultValue) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetFloatAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, float value, float defaultValue) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.SetIntAttribute(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, int value, int defaultValue) -> void\n```\n\n----------------------------------------\n\nTITLE: Graphics Extensions for CoreGraphics Conversion in .NET MAUI\nDESCRIPTION: Static extension methods for converting between MAUI graphics types and CoreGraphics types. These methods facilitate interoperability with platform-specific graphics APIs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGAffineTransform(this in System.Numerics.Matrix3x2 transform) -> CoreGraphics.CGAffineTransform\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPoint(this Microsoft.Maui.Graphics.Point target) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPoint(this Microsoft.Maui.Graphics.PointF target) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGRect(this Microsoft.Maui.Graphics.Rect target) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGRect(this Microsoft.Maui.Graphics.RectF target) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGSize(this Microsoft.Maui.Graphics.Size target) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGSize(this Microsoft.Maui.Graphics.SizeF target) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsPoint(this CoreGraphics.CGPoint target) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsPointF(this CoreGraphics.CGPoint target) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRectangle(this CoreGraphics.CGRect target) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRectangleF(this CoreGraphics.CGRect target) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsSize(this CoreGraphics.CGSize target) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsSizeF(this CoreGraphics.CGSize target) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Working with Magnetometer in C#\nDESCRIPTION: This snippet details interactions with the magnetometer sensor, defining its data structure and methods for accessing changes in magnetic field readings. It also outlines constructor overloads for initializing magnetometer data using both double and float types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs.MagnetometerChangedEventArgs(Microsoft.Maui.Devices.Sensors.MagnetometerData reading) -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.MagnetometerData\nMicrosoft.Maui.Devices.Sensors.MagnetometerData\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.Equals(Microsoft.Maui.Devices.Sensors.MagnetometerData other) -> bool\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagneticField.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData() -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(float x, float y, float z) -> void\n\n```\n\n----------------------------------------\n\nTITLE: MAUI Layout Method Overrides\nDESCRIPTION: Override implementations for layout-related methods in MAUI platform classes. Includes arrange and measure operations for various panel types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.ContentPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size\noverride Microsoft.Maui.Platform.LayoutPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size\noverride Microsoft.Maui.Platform.MauiPanel.ArrangeOverride(Windows.Foundation.Size finalSize) -> Windows.Foundation.Size\noverride Microsoft.Maui.Platform.MauiPanel.MeasureOverride(Windows.Foundation.Size availableSize) -> Windows.Foundation.Size\n```\n\n----------------------------------------\n\nTITLE: Defining Dimension Constants in MAUI\nDESCRIPTION: This snippet defines constant values for dimension specifications within MAUI, including maximum, minimum, and unset dimensions. These constants are helpful for layout design and constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Maui.Primitives.Dimension.Maximum = Infinity -> double\n```\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Maui.Primitives.Dimension.Minimum = 0 -> double\n```\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Maui.Primitives.Dimension.Unset = NaN -> double\n```\n\n----------------------------------------\n\nTITLE: Declaring BindingExtension Properties in C#\nDESCRIPTION: This snippet declares properties for the BindingExtension class, which is used for data binding in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Converter.get -> Microsoft.Maui.Controls.IValueConverter\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Converter.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.ConverterParameter.get -> object\n~Microsoft.Maui.Controls.Xaml.BindingExtension.ConverterParameter.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.FallbackValue.get -> object\n~Microsoft.Maui.Controls.Xaml.BindingExtension.FallbackValue.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Path.get -> string\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Path.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Source.get -> object\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Source.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.StringFormat.get -> string\n~Microsoft.Maui.Controls.Xaml.BindingExtension.StringFormat.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.TargetNullValue.get -> object\n~Microsoft.Maui.Controls.Xaml.BindingExtension.TargetNullValue.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.BindingExtension.TypedBinding.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.UpdateSourceEventName.get -> string\n~Microsoft.Maui.Controls.Xaml.BindingExtension.UpdateSourceEventName.set -> void\n```\n\n----------------------------------------\n\nTITLE: TimePicker Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for TimePickerHandler responsible for mapping properties and handling events for the TimePicker control. Includes methods for handling time selection, formatting, font properties, and visual styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFlowDirection(Microsoft.Maui.Handlers.TimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Geometric Structure Parsing Methods in Microsoft.Maui.Graphics\nDESCRIPTION: TryParse methods for converting string representations to geometric structures like Point, PointF, Rect, RectF, Size, and SizeF.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.TryParse(string value, out Microsoft.Maui.Graphics.Point point) -> bool\nstatic Microsoft.Maui.Graphics.PointF.TryParse(string value, out Microsoft.Maui.Graphics.PointF pointF) -> bool\nstatic Microsoft.Maui.Graphics.Rect.TryParse(string value, out Microsoft.Maui.Graphics.Rect rectangle) -> bool\nstatic Microsoft.Maui.Graphics.RectF.TryParse(string value, out Microsoft.Maui.Graphics.RectF rectangleF) -> bool\nstatic Microsoft.Maui.Graphics.Size.TryParse(string value, out Microsoft.Maui.Graphics.Size size) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.TryParse(string value, out Microsoft.Maui.Graphics.SizeF sizeF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Image Source Management Extensions\nDESCRIPTION: Extensions for working with image sources in WinUI, including retrieving image dimensions and converting MAUI image sources to WinUI icon sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ImageExtensions.GetImageSourceSize(this Microsoft.UI.Xaml.Media.ImageSource! source, Microsoft.UI.Xaml.FrameworkElement? element = null) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Platform.ImageExtensions.ToIconSource(this Microsoft.Maui.IImageSource! source, Microsoft.Maui.IMauiContext! mauiContext) -> Microsoft.UI.Xaml.Controls.IconSource?\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphicsViewHandler in .NET MAUI\nDESCRIPTION: This snippet defines multiple constructors for the GraphicsViewHandler, which handles rendering graphics in MAUI applications. It includes constructors with optional property mapper and command mapper inputs for flexibility.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding FlyoutView and GraphicsView Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for FlyoutViewHandler and GraphicsViewHandler classes that manage platform view creation, handler connection/disconnection for flyout menus and graphics rendering in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.FlyoutViewHandler.CreatePlatformView() -> UIKit.UIView!\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.ConnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.DisconnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Attributed Text in MAUI\nDESCRIPTION: These methods draw attributed text on a CGContext, either along a path or within a specified rectangle. Optional parameters allow customization of text flow and initial position.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawAttributedText(CoreGraphics.CGContext context, Microsoft.Maui.Graphics.Text.IAttributedText text, CoreGraphics.CGPath path, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.Color fontColor, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float ix = 0, float iy = 0) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawAttributedText(CoreGraphics.CGContext context, Microsoft.Maui.Graphics.Text.IAttributedText text, CoreGraphics.CGRect rect, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.Color fontColor, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float ix = 0, float iy = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Web Authentication Result Handling in C#\nDESCRIPTION: Class for handling web authentication results including access tokens and callback URIs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nWebAuthenticatorResult(IDictionary<string, string> properties);\nWebAuthenticatorResult(Uri uri, IWebAuthenticatorResponseDecoder responseDecoder);\nWebAuthenticatorResult(Uri uri);\n```\n\n----------------------------------------\n\nTITLE: Implementing Compass Sensor in .NET MAUI - C#\nDESCRIPTION: This snippet defines functionalities for the compass sensor in .NET MAUI, allowing developers to start and stop monitoring, check if the sensor is supported, and handle compass heading calibration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Default.get -> Microsoft.Maui.Devices.Sensors.ICompass!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsMonitoring.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsSupported.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.ShouldDisplayHeadingCalibration.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.ShouldDisplayHeadingCalibration.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Location Properties and Constructors in C#\nDESCRIPTION: This snippet provides constructors and property accessors related to geographical location, such as accuracy, altitude, latitude, and longitude in Microsoft Maui. These properties support both getter and setter methods with some nullable double types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Location.Accuracy.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Accuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Altitude.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Altitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.get -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Course.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Course.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.IsFromMockProvider.get -> bool\nMicrosoft.Maui.Devices.Sensors.Location.IsFromMockProvider.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Latitude.get -> double\nMicrosoft.Maui.Devices.Sensors.Location.Latitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location() -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, double altitude) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, System.DateTimeOffset timestamp) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Longitude.get -> double\nMicrosoft.Maui.Devices.Sensors.Location.Longitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.ReducedAccuracy.get -> bool\nMicrosoft.Maui.Devices.Sensors.Location.ReducedAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Speed.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Speed.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Timestamp.get -> System.DateTimeOffset\nMicrosoft.Maui.Devices.Sensors.Location.Timestamp.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.VerticalAccuracy.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.VerticalAccuracy.set -> void\n\n```\n\n----------------------------------------\n\nTITLE: Main Thread Operations in .NET MAUI\nDESCRIPTION: Static methods for executing code on the main thread including synchronous and asynchronous operations with various return types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.MainThread.BeginInvokeOnMainThread(System.Action action) -> void\nstatic Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync(System.Action action) -> System.Threading.Tasks.Task\nstatic Microsoft.Maui.ApplicationModel.MainThread.InvokeOnMainThreadAsync<T>(System.Func<T> func) -> System.Threading.Tasks.Task<T>\n```\n\n----------------------------------------\n\nTITLE: Accessing Deployed Assets Using FileSystem in .NET MAUI\nDESCRIPTION: This snippet demonstrates how to access deployed raw assets using the `FileSystem.OpenAppPackageFileAsync` method in .NET MAUI. It opens a stream to the specified asset file (e.g., \"AboutAssets.txt\") and reads its contents into a string.  It requires the `Microsoft.Maui.Essentials` namespace to access the `FileSystem` class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-blazor/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n    async Task LoadMauiAsset()\n    {\n        using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n        using var reader = new StreamReader(stream);\n\n        var contents = reader.ReadToEnd();\n    }\n```\n\n----------------------------------------\n\nTITLE: Overriding ImageButton and Image Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for ImageButtonHandler and ImageHandler classes that manage platform view creation, handler connection/disconnection, and container needs for image-related controls in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ImageButtonHandler.ConnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageButtonHandler.CreatePlatformView() -> UIKit.UIButton!\noverride Microsoft.Maui.Handlers.ImageButtonHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageButtonHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ImageHandler.CreatePlatformView() -> UIKit.UIImageView!\noverride Microsoft.Maui.Handlers.ImageHandler.DisconnectHandler(UIKit.UIImageView! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageHandler.NeedsContainer.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Handler Classes for MAUI Views in C#\nDESCRIPTION: This snippet defines abstract methods for MAUI view handlers. These methods are responsible for creating platform-specific views, arranging elements, and managing containers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nabstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\nabstract Microsoft.Maui.Handlers.ViewHandler.RemoveContainer() -> void\nabstract Microsoft.Maui.Handlers.ViewHandler.SetupContainer() -> void\nabstract Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.CreatePlatformView() -> TPlatformView!\n```\n\n----------------------------------------\n\nTITLE: Rectangle Geometric Operations in .NET MAUI Graphics\nDESCRIPTION: Provides static methods for performing geometric operations on rectangular regions, including union and zero rectangle creation\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: Defining ElementHandler<TVirtualView, TPlatformView> Class in C#\nDESCRIPTION: Generic class definition for ElementHandler with virtual and platform view type parameters, including a constructor and property getters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ElementHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!\nMicrosoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!\n```\n\n----------------------------------------\n\nTITLE: Image Processing Extension Methods\nDESCRIPTION: Collection of extension methods for converting and manipulating IImage objects, including conversion to bytes, streams, and Paint objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Task<byte[]> AsBytesAsync(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1)\nstatic Paint AsPaint(this IImage target)\nstatic Stream AsStream(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1)\nstatic void SetFillImage(this ICanvas canvas, IImage image)\n```\n\n----------------------------------------\n\nTITLE: Defining ITabbedViewHandler Interface in C#\nDESCRIPTION: Defines the ITabbedViewHandler interface with a property for VirtualView of type Microsoft.Maui.ITabbedView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ITabbedViewHandler\nMicrosoft.Maui.Handlers.ITabbedViewHandler.VirtualView.get -> Microsoft.Maui.ITabbedView!\n```\n\n----------------------------------------\n\nTITLE: PointF Structure Implementation in C#\nDESCRIPTION: Implementation of a PointF structure representing a 2D point with single precision (float) coordinates. Includes constructors, property accessors, and transformation methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\npublic struct PointF {\n    public PointF() -> void\n    public PointF(float x, float y) -> void\n    public PointF(SizeF sz) -> void\n    public PointF(Vector2 v) -> void\n    public float X { get; set; }\n    public float Y { get; set; }\n    public bool IsEmpty { get; }\n    public void Deconstruct(out float x, out float y) -> void\n    public float Distance(PointF other) -> float\n    public PointF Offset(float dx, float dy) -> PointF\n    public PointF Round() -> PointF\n    public PointF TransformBy(in Matrix3x2 transform) -> PointF\n}\n```\n\n----------------------------------------\n\nTITLE: Size and SizeF Structs in MAUI Graphics\nDESCRIPTION: Size structures for representing dimensions in both double and float precision. Includes constructors and basic size operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Size.Size(double width, double height) -> void\nMicrosoft.Maui.Graphics.SizeF.SizeF(float width, float height) -> void\nMicrosoft.Maui.Graphics.SizeF.TransformNormalBy(in System.Numerics.Matrix3x2 transform) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Extensions in MAUI C#\nDESCRIPTION: Provides a set of extension methods for manipulating text attributes in Microsoft MAUI, including font size, color, and style settings. Dependencies include Microsoft.Maui.Graphics.Text namespace, and it operates on dictionaries of text attributes. Key input parameters include attributes dictionary and attribute values. These methods return void but modify the passed dictionary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontSize(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, float value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetForegroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetItalic(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetMarker(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.MarkerType value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetStrikethrough(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetSubscript(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetSuperscript(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetUnderline(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetUnorderedList(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating BindingBase in C#\nDESCRIPTION: Static method Create in BindingBase creates a binding between a source's getter and a property. Offers modes, conversion, and formatting options for flexible data binding setups.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.BindingBase.Create<TSource, TProperty>(System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> Microsoft.Maui.Controls.BindingBase!\n```\n\n----------------------------------------\n\nTITLE: Font Conversion Extensions for Android\nDESCRIPTION: Extension method to convert MAUI font objects to Android typefaces. This enables consistent font rendering across platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.FontExtensions.ToTypeface(this Microsoft.Maui.Graphics.IFont font) -> Android.Graphics.Typeface\n```\n\n----------------------------------------\n\nTITLE: HybridWebViewRawMessageReceivedEventArgs Class Definition in C#\nDESCRIPTION: Event arguments class for handling raw messages received from JavaScript in the HybridWebView. Contains the message passed from JavaScript to the .NET application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs.HybridWebViewRawMessageReceivedEventArgs(string? message) -> void\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs.Message.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Converting Color to SKColor\nDESCRIPTION: Facilitates conversion from Microsoft.Maui.Graphics.Color to SkiaSharp.SKColor, optimizing color handling between different frameworks used in graphical applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSKColor(this Microsoft.Maui.Graphics.Color target) -> SkiaSharp.SKColor\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Constants API Reference (C#)\nDESCRIPTION: Constants for the PictureCommand class that represent various drawing and state operations in the graphics pipeline. These commands are used internally to build and execute drawing instructions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Alpha = 71 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.BlendMode = 72 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.BoldSystemFont = 111 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ClipPath = 81 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ClipRectangle = 82 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ConcatenateTransform = 64 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawArc = 6 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawEllipse = 3 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawImage = 5 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawLine = 0 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawPath = 4 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawPdfPage = 7 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawRectangle = 1 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawRoundedRectangle = 2 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringAtPoint = 20 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringInPath = 22 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringInRect = 21 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawTextInRect = 25 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillArc = 14 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillColor = 40 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillEllipse = 12 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPaint = 41 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPath = 13 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPath2 = 15 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillRectangle = 10 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillRoundedRectangle = 11 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontColor = 50 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontName = 51 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontSize = 52 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.LimitStrokeScaling = 37 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ResetState = 102 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RestoreState = 101 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Rotate = 62 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RotateAtPoint = 63 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SaveState = 100 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Scale = 60 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Shadow = 70 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeBrush = 39 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeColor = 31 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeDashPattern = 32 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLimit = 38 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineCap = 33 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineJoin = 34 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLocation = 35 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeMiterLimit = 36 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeSize = 30 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractFromClip = 80 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractPathFromClip = 83 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SystemFont = 110 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Translate = 61 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Defining PickerHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the PickerHandler class, including a command mapper, a property mapper, and methods for mapping various properties such as character spacing, font, text alignment, and colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Accelerometer Classes in C#\nDESCRIPTION: Defines classes related to the accelerometer sensor, including event arguments and data structures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Accelerometer\nMicrosoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs\nMicrosoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs.AccelerometerChangedEventArgs(Microsoft.Maui.Devices.Sensors.AccelerometerData reading) -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.AccelerometerData\nMicrosoft.Maui.Devices.Sensors.AccelerometerData\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.Acceleration.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData() -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(float x, float y, float z) -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.Equals(Microsoft.Maui.Devices.Sensors.AccelerometerData other) -> bool\n```\n\n----------------------------------------\n\nTITLE: Filling Arc in W2DCanvas\nDESCRIPTION: This method fills an arc shape on the W2DCanvas, defined by its bounding box and angles. Its parameters include coordinates, dimensions, angles, and a boolean indicating the direction of drawing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Hot Reload Helper Methods\nDESCRIPTION: Static utility methods for managing hot reload functionality in MAUI applications. These methods handle view registration, replacement, and triggering reload operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.AddActiveView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.ClearCache(System.Type![]! types) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.GetReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view) -> Microsoft.Maui.IView!\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.get -> bool\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsEnabled.set -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.IsReplacedView(Microsoft.Maui.HotReload.IHotReloadableView! view, Microsoft.Maui.IView! newView) -> bool\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.Register(Microsoft.Maui.HotReload.IHotReloadableView! view, params object![]! parameters) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterHandlers(Microsoft.Maui.Hosting.IMauiHandlersCollection! handlerService) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterReplacedView(string! oldViewType, System.Type! newViewType) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.Reset() -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.TriggerReload() -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.UnRegister(Microsoft.Maui.HotReload.IHotReloadableView! view) -> void\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.UpdateApplication(System.Type![]! types) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS UI Control Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for customizing iOS UI controls like activity indicators, buttons, and checkboxes. These methods allow MAUI applications to update native iOS control properties based on MAUI abstractions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_169\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.MauiUIApplicationDelegate.Current.get -> Microsoft.Maui.MauiUIApplicationDelegate!\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this UIKit.UIActivityIndicatorView! activityIndicatorView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateIsRunning(this UIKit.UIActivityIndicatorView! activityIndicatorView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateCharacterSpacing(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateCornerRadius(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateFont(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this UIKit.UIButton! platformButton, Microsoft.Maui.IButton! button, Microsoft.Maui.Thickness? defaultPadding = null) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdatePadding(this UIKit.UIButton! platformButton, Microsoft.Maui.Thickness padding, Microsoft.Maui.Thickness? defaultPadding = null) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeColor(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeThickness(this UIKit.UIButton! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateText(this UIKit.UIButton! platformButton, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateTextColor(this UIKit.UIButton! platformButton, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Platform.CheckBoxExtensions.UpdateForeground(this Microsoft.Maui.Platform.MauiCheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Platform.CheckBoxExtensions.UpdateIsChecked(this Microsoft.Maui.Platform.MauiCheckBox! platformCheckBox, Microsoft.Maui.ICheckBox! check) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint on Canvas in MAUI (C#)\nDESCRIPTION: These methods apply a fill paint to specified areas of the canvas using different parameters. The methods accept various shapes like rectangles and points for defining the fill region.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Point point1, Microsoft.Maui.Graphics.Point point2) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Rect rectangle) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Stroke and Paint Settings in Microsoft.Maui.Graphics\nDESCRIPTION: These methods adjust stroke and fill paint settings for the canvas. They enable setting gradient fills between two points or across a rectangle. It's essential for customized graphic styling and effects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.ResetStroke(this Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Point point1, Microsoft.Maui.Graphics.Point point2) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Rect rectangle) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Layout Manager Methods for Tizen Platform\nDESCRIPTION: These methods override various layout managers (Absolute, Grid, HorizontalStack, VerticalStack) to provide Tizen-specific implementations for measuring and arranging UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.AbsoluteLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.FlexBasis.Equals(object? obj) -> bool\noverride Microsoft.Maui.Layouts.FlexBasis.GetHashCode() -> int\noverride Microsoft.Maui.Layouts.GridLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.GridLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Skia Canvas and Image Operations\nDESCRIPTION: Provides methods for drawing images, text, paths, and managing canvas state using SkiaSharp rendering capabilities\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nSkiaCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height)\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Handler Implementation\nDESCRIPTION: Core implementation of the HybridWebView handler for Android platform, including platform view creation and connection logic.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.CreatePlatformView() -> Android.Webkit.WebView!\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.ConnectHandler(Android.Webkit.WebView! platformView) -> void\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.DisconnectHandler(Android.Webkit.WebView! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Application Handler Implementation in MAUI\nDESCRIPTION: Handler implementation for MAUI applications, providing methods for managing windows and application lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: ActivityIndicator Handler Implementation in MAUI\nDESCRIPTION: Static methods and property mappers for the ActivityIndicator control handler, handling properties like color and running state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: IDispatcherTimer Interface Methods - C#\nDESCRIPTION: Methods and properties for the IDispatcherTimer interface that manage timer settings, including interval, repeating status, and control of timer execution (start/stop). Essential for creating timed events in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.Interval.get -> System.TimeSpan\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.Interval.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.IsRepeating.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.IsRepeating.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.IsRunning.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.Start() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.Stop() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.IDispatcherTimer.Tick -> System.EventHandler!\n```\n\n----------------------------------------\n\nTITLE: ScrollOrientation Enumeration in C#\nDESCRIPTION: Definition of ScrollOrientation enumeration which defines different scroll directions for scrollable UI elements in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Both = 2 -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Horizontal = 1 -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Neither = 3 -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Vertical = 0 -> Microsoft.Maui.ScrollOrientation\n```\n\n----------------------------------------\n\nTITLE: Image Extension Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Extension methods for the IImage interface providing conversion to bytes, streams, and paint objects, as well as canvas integration functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsPaint(this Microsoft.Maui.Graphics.IImage target) -> Microsoft.Maui.Graphics.Paint\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsStream(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.IO.Stream\nstatic Microsoft.Maui.Graphics.ImageExtensions.SetFillImage(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.IImage image) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting Skia Image to Platform Image\nDESCRIPTION: Transforms a Skia-based image to its platform-specific equivalent, ensuring compatibility and correctness in rendering across different environments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: IVisualDiagnosticsOverlay Interface Members in .NET MAUI\nDESCRIPTION: Members of the IVisualDiagnosticsOverlay interface which provides functionality for visual debugging in MAUI applications. It allows adding adorners to UI elements, handling scrollable elements, and navigating to specific elements for inspection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IVisualDiagnosticsOverlay\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToElement) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToElement) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! view) -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.get -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.set -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners() -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.get -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.set -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!\n```\n\n----------------------------------------\n\nTITLE: Calculating Intersections between Attributed Text Runs in MAUI\nDESCRIPTION: This method calculates the intersections between two attributed text runs, providing a list of intersecting runs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.CalculatedIntersections(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n```\n\n----------------------------------------\n\nTITLE: App Host Builder Extensions for Core MAUI Features (C#)\nDESCRIPTION: Extension methods for MauiAppBuilder that configure core features like animations and dispatching in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureAnimations(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.AppHostBuilderExtensions.ConfigureDispatching(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Static DefaultTemplate Property Getter (TitleBar)\nDESCRIPTION: This code defines a static property getter for `DefaultTemplate` in the `TitleBar` class, returning a `ControlTemplate`. This template is used as the default visual structure for the title bar in MAUI applications, allowing for customization of its appearance and behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.TitleBar.DefaultTemplate.get -> Microsoft.Maui.Controls.ControlTemplate!\"\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Handler in C#\nDESCRIPTION: This code contains constructors and methods for the LayoutHandler. It supports adding, updating, and removing views from the layout, central to layout management in .NET MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Vibration Interface in C#\nDESCRIPTION: Defines the IVibration interface with methods for controlling device vibration in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IVibration.Cancel() -> void\nMicrosoft.Maui.Devices.IVibration.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IVibration.Vibrate() -> void\nMicrosoft.Maui.Devices.IVibration.Vibrate(System.TimeSpan duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting SVG Style and Weight from Font in MAUI (C#)\nDESCRIPTION: These methods retrieve SVG style and weight from an IFont instance. They provide the necessary information to style text consistently in SVG formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.IFontExtensions.GetSvgStyle(this Microsoft.Maui.Graphics.IFont font) -> string\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.IFontExtensions.GetSvgWeight(this Microsoft.Maui.Graphics.IFont font) -> string\n```\n\n----------------------------------------\n\nTITLE: Getting Points for Path Segment in .NET MAUI\nDESCRIPTION: This method retrieves points for a specific segment in a PathF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.GetPointsForSegment(int segmentIndex) -> Microsoft.Maui.Graphics.PointF[]\n```\n\n----------------------------------------\n\nTITLE: Time Picker Handler Mappings in C#\nDESCRIPTION: Static methods for managing time picker properties including character spacing, font, format, and time value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attributes Helper Methods\nDESCRIPTION: Utility methods for getting and setting various attribute types (bool, enum, float, int) on text attributes. Includes methods for attribute manipulation and dictionary operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nstatic string GetAttribute(this ITextAttributes attributes, TextAttribute type, string defaultValue = null)\nstatic bool GetBoolAttribute(this ITextAttributes attributes, TextAttribute type, bool defaultValue = false)\nstatic T GetEnumAttribute<T>(this ITextAttributes attributes, TextAttribute type, T defaultValue)\nstatic float GetFloatAttribute(this ITextAttributes attributes, TextAttribute type, float defaultValue)\n```\n\n----------------------------------------\n\nTITLE: Converting UIUserInterfaceLayoutDirection to FlowDirection in .NET MAUI\nDESCRIPTION: This extension method converts a UIUserInterfaceLayoutDirection to a .NET MAUI FlowDirection. It's used to handle right-to-left (RTL) layouts in iOS applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_176\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.FlowDirectionExtensions.ToFlowDirection(this UIKit.UIUserInterfaceLayoutDirection direction) -> Microsoft.Maui.FlowDirection\n```\n\n----------------------------------------\n\nTITLE: Battery Interface Definition in MAUI\nDESCRIPTION: Interface for accessing battery information in MAUI applications. Provides properties for charge level, power source, state, and energy saver status, along with events for monitoring changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IBattery.ChargeLevel.get -> double\nMicrosoft.Maui.Devices.IBattery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.IBattery.State.get -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.IBattery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\nMicrosoft.Maui.Devices.IBattery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\nMicrosoft.Maui.Devices.IBattery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Soft Input Extensions for Text Input in MAUI\nDESCRIPTION: Extensions for managing software keyboard input for text input elements, including checking if the soft keyboard is visible and hiding it programmatically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SoftInputExtensions.HideSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SoftInputExtensions.IsSoftInputShowing(this Microsoft.Maui.ITextInput! targetView) -> bool\n```\n\n----------------------------------------\n\nTITLE: Size and Point Conversion Operators in .NET MAUI Graphics\nDESCRIPTION: Implements implicit and explicit conversion operators between different size and point representations, enabling flexible type transformations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\n```\n\n----------------------------------------\n\nTITLE: Clipping Path in Skia Canvas\nDESCRIPTION: Implements path clipping with specific winding modes, allowing portions of the graphics canvas to be restricted to defined path geometries enhancing rendering capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for EditorHandler in MAUI (C#)\nDESCRIPTION: Collection of static methods in EditorHandler class for mapping properties like IsReadOnly, Text, MaxLength, and TextColor from IEditor interface to platform-specific implementations via IEditorHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.ITextInput! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: ItemsView Handler Method Signatures - C#\nDESCRIPTION: Method signatures for ItemsView handler implementations, including collection management, cell display, and layout configuration for iOS platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.GetCell(UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath) -> UIKit.UICollectionViewCell\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.ConnectHandler(UIKit.UIView platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Dispatcher Provider Static Methods (C#)\nDESCRIPTION: Static methods for managing the global dispatcher provider in MAUI applications. These methods allow getting the current provider instance and setting a new provider to handle thread dispatching across the application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.Dispatcher.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.Current.get -> Microsoft.Maui.Dispatching.IDispatcherProvider!\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.SetCurrent(Microsoft.Maui.Dispatching.IDispatcherProvider? provider) -> bool\n```\n\n----------------------------------------\n\nTITLE: Gradient Paint Implementation\nDESCRIPTION: Methods for handling gradient paints including color stops, blending, and gradient stop management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddOffset(float offset, Color color);\nColor BlendStartAndEndColors();\nColor GetColorAt(float offset);\nvoid SetGradientStops(float[] offsets, Color[] colors);\n```\n\n----------------------------------------\n\nTITLE: Constructing GraphicsViewHandler in MAUI\nDESCRIPTION: Defines constructors for the `GraphicsViewHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. This handler is responsible for managing the platform-specific implementation of a MAUI GraphicsView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.GraphicsViewHandler.GraphicsViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IGraphicsViewHandler in MAUI\nDESCRIPTION: Defines properties for the `IGraphicsViewHandler` interface in MAUI, providing access to the platform view and virtual view for a GraphicsView. The PlatformView exposes the underlying platform-specific view, while VirtualView represents the .NET MAUI GraphicsView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IGraphicsViewHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IGraphicsViewHandler.VirtualView.get -> Microsoft.Maui.IGraphicsView!\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Direction\nDESCRIPTION: Defines the main axis direction of flex items, allowing for vertical or horizontal arrangement in a flex layout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.Column = 2 -> Microsoft.Maui.Layouts.FlexDirection\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.ColumnReverse = 3 -> Microsoft.Maui.Layouts.FlexDirection\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.Row = 0 -> Microsoft.Maui.Layouts.FlexDirection\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.RowReverse = 1 -> Microsoft.Maui.Layouts.FlexDirection\n```\n\n----------------------------------------\n\nTITLE: Initializing ShareTextRequest in MAUI\nDESCRIPTION: This snippet defines the ShareTextRequest class with multiple constructors for creating text sharing requests with an optional title. It facilitates sharing text content within a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text, string! title) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.set -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Font Copies using SkiaSharp in C#\nDESCRIPTION: This method creates a copy of a given SkiaSharp.SKFont instance. It is useful when you need to duplicate font settings for use in different parts of a graphics application. No external dependencies are required aside from SkiaSharp. Inputs include an optional SkiaSharp.SKFont object, and the output is a new instance of SkiaSharp.SKFont or null if the input is null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Property Mapping in .NET MAUI\nDESCRIPTION: Virtual methods for the PropertyMapper class that manages the mapping between MAUI properties and platform-specific implementations, including property caching and updating.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void\nvirtual Microsoft.Maui.PropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!\nvirtual Microsoft.Maui.PropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?\nvirtual Microsoft.Maui.PropertyMapper.SetPropertyCore(string! key, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>! action) -> void\nvirtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!\nvirtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void\n```\n\n----------------------------------------\n\nTITLE: Invalidating Measure in View Extensions in .NET MAUI\nDESCRIPTION: This static method allows for invalidating the measure of a VisualElement, which triggers a re-layout of the element and its children when called.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Controls.ViewExtensions.InvalidateMeasure(this Microsoft.Maui.Controls.VisualElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Extensions for Clipping in .NET MAUI Graphics\nDESCRIPTION: Extension methods for the ICanvas interface to manage clipping regions. These methods allow subtracting rectangular areas from the current clipping region using either Rect or RectF structures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Last Known Location - C# .NET MAUI\nDESCRIPTION: Asynchronously retrieves the last known location of the device. Returns a task that can either provide the location or null if no location is available. No parameters are necessary for this method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: PaintGradientStop Properties and Methods\nDESCRIPTION: Signatures for properties, comparison methods, and constructors in the PaintGradientStop class for defining gradient color stops.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PaintGradientStop.Color.get -> Microsoft.Maui.Graphics.Color\nMicrosoft.Maui.Graphics.PaintGradientStop.Color.set -> void\nMicrosoft.Maui.Graphics.PaintGradientStop.CompareTo(Microsoft.Maui.Graphics.PaintGradientStop obj) -> int\nMicrosoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(float offset, Microsoft.Maui.Graphics.Color color) -> void\nMicrosoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(Microsoft.Maui.Graphics.PaintGradientStop source) -> void\n```\n\n----------------------------------------\n\nTITLE: Pattern Extensions for Paint Creation in .NET MAUI Graphics\nDESCRIPTION: Extension methods for the IPattern interface to convert patterns to Paint objects. These methods allow creating Paint objects from patterns with or without a specified foreground color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target, Microsoft.Maui.Graphics.Color foregroundColor) -> Microsoft.Maui.Graphics.Paint\nstatic Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target) -> Microsoft.Maui.Graphics.Paint\n```\n\n----------------------------------------\n\nTITLE: Canvas Implementation Methods in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Virtual methods for canvas-related classes in Microsoft.Maui.Graphics, including state management, disposal, and transform handling. These methods provide the foundation for the graphics canvas implementation used throughout MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\nvirtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void\nvirtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool\nvirtual Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.PatternPhase.get -> CoreGraphics.CGSize\n```\n\n----------------------------------------\n\nTITLE: SliderHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the SliderHandler class that handle the mapping of slider attributes such as track color, thumb color, and value to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Writing to Stream from PlatformBitmapExportContext in C#\nDESCRIPTION: This snippet shows a method that writes the content of the PlatformBitmapExportContext to a provided stream.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformBitmapExportContext.WriteToStream(System.IO.Stream aStream) -> void\n```\n\n----------------------------------------\n\nTITLE: Version Tracking via IVersionTracking in MAUI\nDESCRIPTION: The 'IVersionTracking' interface facilitates app version management, offering properties and methods to track version history, first launches, and current version details.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.BuildHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledVersion.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchEver.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForBuild(string! build) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForVersion(string! version) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousBuild.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousVersion.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.Track() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.VersionHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\n----------------------------------------\n\nTITLE: Layout Manager Utility Methods in MAUI\nDESCRIPTION: These static methods provide utility functions for MAUI layout managers. They help resolve constraints for layout elements and calculate appropriate spacing measurements for stack layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_164\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutManager.ResolveConstraints(double externalConstraint, double explicitLength, double measuredLength, double min = 0, double max = Infinity) -> double\nstatic Microsoft.Maui.Layouts.StackLayoutManager.MeasureSpacing(double spacing, int childCount) -> double\n```\n\n----------------------------------------\n\nTITLE: Platform Graphics View API Reference (C#)\nDESCRIPTION: Methods and constructors for the PlatformGraphicsView class which provides platform-specific implementation of a graphics view. This class enables drawing graphics on native platform views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_162\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.InvalidateDrawable() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.InvalidateDrawable(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.PlatformGraphicsView(nint aPtr) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping IndicatorViewHandler Properties in MAUI Framework\nDESCRIPTION: Static methods and properties for IndicatorViewHandler that map IIndicatorView properties to platform implementations. These methods handle indicator count, visibility, color, shape, size, and position settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorShape(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorSize(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapMaximumVisible(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapPosition(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: Filling Circles with Microsoft.Maui.Graphics\nDESCRIPTION: These extension methods allow filling circles on a canvas, providing different overloads to accommodate various center coordinates and radius types. Ideal for drawing circle-based graphics with Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MenuBarHandler Class in C#\nDESCRIPTION: This snippet defines the MenuBarHandler class, which includes methods for adding, removing, and manipulating menu bar items. It also includes constructors for initializing the handler with property mappers and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler\nMicrosoft.Maui.Handlers.MenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Clear() -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.MenuBarHandler() -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.MenuBarHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Type Converters in MAUI\nDESCRIPTION: Abstract method declarations for various type converters in MAUI framework including converters for Easing, FlexAlign, and Thickness properties. These converters handle type conversion between different representations of UI properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\n----------------------------------------\n\nTITLE: Device Display Information in MAUI\nDESCRIPTION: Static properties and methods for accessing device display information in MAUI applications. These include screen keep-on status and main display information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceDisplay.Current.get -> Microsoft.Maui.Devices.IDeviceDisplay!\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.get -> bool\nstatic Microsoft.Maui.Devices.DeviceDisplay.KeepScreenOn.set -> void\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nstatic Microsoft.Maui.Devices.DeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Essentials configuration extensions for MAUI apps\nDESCRIPTION: Extension methods for configuring Essentials features in MAUI applications, including app actions with custom identifiers, titles, subtitles, and icons. These methods enable platform-specific features through a common API.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.ConfigureEssentials(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IEssentialsBuilder!>? configureDelegate = null) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining LineCap and LineJoin Enums in C#\nDESCRIPTION: Defines the LineCap and LineJoin enums with their respective values for specifying line endings and joins in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LineCap\nMicrosoft.Maui.Graphics.LineCap.Butt = 0 -> Microsoft.Maui.Graphics.LineCap\nMicrosoft.Maui.Graphics.LineCap.Round = 1 -> Microsoft.Maui.Graphics.LineCap\nMicrosoft.Maui.Graphics.LineCap.Square = 2 -> Microsoft.Maui.Graphics.LineCap\n\nMicrosoft.Maui.Graphics.LineJoin\nMicrosoft.Maui.Graphics.LineJoin.Bevel = 2 -> Microsoft.Maui.Graphics.LineJoin\nMicrosoft.Maui.Graphics.LineJoin.Miter = 0 -> Microsoft.Maui.Graphics.LineJoin\nMicrosoft.Maui.Graphics.LineJoin.Round = 1 -> Microsoft.Maui.Graphics.LineJoin\n```\n\n----------------------------------------\n\nTITLE: KeyboardAcceleratorModifiers Enum in .NET MAUI\nDESCRIPTION: Keyboard modifier flags used with keyboard accelerators in MAUI applications. This enumeration defines the possible modifier keys (Shift, Ctrl, Alt, etc.) that can be used in keyboard shortcuts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Keyboard\nMicrosoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Service Provider in .NET MAUI (C#)\nDESCRIPTION: This class implements a custom IServiceProvider that intercepts GetServices requests to provide scoped services specific to a particular context. It's used to create multiple levels of scoping beyond what MS.Ext.DI supports natively, enabling scoped services for Modal Pages and Android Fragments.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/Scoping.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass WrappedServiceProvider : IServiceProvider\n```\n\n----------------------------------------\n\nTITLE: Loading URL in Web View Delegate\nDESCRIPTION: Issues a request to load a specified URL within the web view delegate, enabling navigation to web resources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebViewDelegate.LoadUrl(string? url) -> void\n```\n\n----------------------------------------\n\nTITLE: File Picker and Preference Operations in .NET MAUI\nDESCRIPTION: These C# methods under the Microsoft.Maui.Storage namespace provide functionalities for picking files asynchronously, managing application data directories, and accessing and modifying application preferences. They require the Microsoft.Maui.Storage namespace and depend on the asynchronous programming model using Task<>. Inputs typically include options or keys, and outputs vary from tasks representing file results to boolean and other primitive types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.PickOptions.Default.get -> Microsoft.Maui.Storage.PickOptions!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.PickOptions.Images.get -> Microsoft.Maui.Storage.PickOptions!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue, string? sharedName) -> double\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue) -> double\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue, string? sharedName) -> float\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue) -> float\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue, string? sharedName) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue, string? sharedName) -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue) -> long\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue, string? sharedName) -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue) -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue, string? sharedName) -> System.DateTime\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Image Processing Extensions\nDESCRIPTION: Extension methods for handling image conversion and manipulation, including conversion to different formats and async operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic string AsBase64(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\nstatic byte[] AsBytes(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\nstatic Task<byte[]> AsBytesAsync(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\n```\n\n----------------------------------------\n\nTITLE: Defining Mapper and CommandMapper for PageHandler in C#\nDESCRIPTION: These static properties define a Mapper and CommandMapper for the PageHandler, which map properties and commands for IContentView to IPageHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Xml Attributed Text Reading\nDESCRIPTION: Reads attributed text from a string via XmlAttributedTextReader, returning an IAttributedText object. The method needs 'text' as input, outputs an IAttributedText, and uses no additional dependencies.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(string text) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: Defining ImageButtonHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the ImageButtonHandler class, including property mappers and methods for handling background, corner radius, padding, and stroke properties of an ImageButton.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapBackground(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: RectF Structure Operators and Static Methods in .NET MAUI Graphics\nDESCRIPTION: Defines operator overloads and static methods for the RectF structure in Microsoft.Maui.Graphics, including equality operators and a Union method that combines two rectangles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Text Layout Initialization with Skia\nDESCRIPTION: Configures and initializes a SkiaTextLayout object with advanced text layout options, such as bounding rectangles and flow attributes, providing comprehensive text positioning and layout capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKPaint paint = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Polygon Class in C# for MAUI Maps\nDESCRIPTION: This snippet defines the Polygon class in the Microsoft.Maui.Controls.Maps namespace. It includes methods for managing a collection of Location objects that form the polygon, as well as properties for Fill and FillColor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Polygon\nMicrosoft.Maui.Controls.Maps.Polygon.Add(Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Clear() -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Contains(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.CopyTo(Microsoft.Maui.Devices.Sensors.Location![]! array, int arrayIndex) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Count.get -> int\nMicrosoft.Maui.Controls.Maps.Polygon.Fill.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.Controls.Maps.Polygon.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.Polygon.FillColor.set -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Geopath.get -> System.Collections.Generic.IList<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polygon.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polygon.IndexOf(Microsoft.Maui.Devices.Sensors.Location! item) -> int\nMicrosoft.Maui.Controls.Maps.Polygon.Insert(int index, Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.IsReadOnly.get -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.Polygon() -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Remove(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.RemoveAt(int index) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.this[int index].get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Polygon.this[int index].set -> void\n```\n\n----------------------------------------\n\nTITLE: Conversion Utilities in Microsoft MAUI\nDESCRIPTION: Various type converters like EasingTypeConverter and ThicknessTypeConverter help convert between types within MAUI. These converters streamline data transformations required for handling different UI elements and settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Converters.CornerRadiusTypeConverter\nMicrosoft.Maui.Converters.CornerRadiusTypeConverter.CornerRadiusTypeConverter() -> void\nMicrosoft.Maui.Converters.EasingTypeConverter\nMicrosoft.Maui.Converters.EasingTypeConverter.EasingTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexAlignContentTypeConverter\nMicrosoft.Maui.Converters.FlexAlignContentTypeConverter.FlexAlignContentTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexAlignItemsTypeConverter\nMicrosoft.Maui.Converters.FlexAlignItemsTypeConverter.FlexAlignItemsTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexAlignSelfTypeConverter\nMicrosoft.Maui.Converters.FlexAlignSelfTypeConverter.FlexAlignSelfTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexBasisTypeConverter\nMicrosoft.Maui.Converters.FlexBasisTypeConverter.FlexBasisTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexDirectionTypeConverter\nMicrosoft.Maui.Converters.FlexDirectionTypeConverter.FlexDirectionTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexJustifyTypeConverter\nMicrosoft.Maui.Converters.FlexJustifyTypeConverter.FlexJustifyTypeConverter() -> void\nMicrosoft.Maui.Converters.FlexWrapTypeConverter\nMicrosoft.Maui.Converters.FlexWrapTypeConverter.FlexWrapTypeConverter() -> void\nMicrosoft.Maui.Converters.KeyboardTypeConverter\nMicrosoft.Maui.Converters.KeyboardTypeConverter.KeyboardTypeConverter() -> void\nMicrosoft.Maui.Converters.ThicknessTypeConverter\nMicrosoft.Maui.Converters.ThicknessTypeConverter.ThicknessTypeConverter() -> void\n\n```\n\n----------------------------------------\n\nTITLE: Defining LinearGradientPaint Class in C#\nDESCRIPTION: Class for creating linear gradient paints in MAUI graphics, with properties for start and end points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LinearGradientPaint\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.set -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint() -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Skia Canvas within the Context\nDESCRIPTION: This getter returns the SKCanvas associated with a SkiaCanvas object. The canvas is used to draw on the bitmap or other image surfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvas.Canvas.get -> SkiaSharp.SKCanvas\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAuthenticatorOptions in MAUI Authentication\nDESCRIPTION: Defines the WebAuthenticatorOptions class in the Microsoft.Maui.Authentication namespace, providing properties for web authentication configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.CallbackUrl.get -> System.Uri?\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.CallbackUrl.set -> void\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.PrefersEphemeralWebBrowserSession.get -> bool\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.PrefersEphemeralWebBrowserSession.set -> void\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.ResponseDecoder.get -> Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder?\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.ResponseDecoder.set -> void\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.Url.get -> System.Uri?\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.Url.set -> void\nMicrosoft.Maui.Authentication.WebAuthenticatorOptions.WebAuthenticatorOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Google Maps Platform Extensions\nDESCRIPTION: Extension methods for updating Google Maps specific functionality on Android platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.Platform.MapExtensions.UpdateIsScrollEnabled(this Android.Gms.Maps.GoogleMap! googleMap, Microsoft.Maui.Maps.IMap! map) -> void\nstatic Microsoft.Maui.Maps.Platform.MapExtensions.UpdateIsShowingUser(this Android.Gms.Maps.GoogleMap! googleMap, Microsoft.Maui.Maps.IMap! map, Microsoft.Maui.IMauiContext? mauiContext) -> void\nstatic Microsoft.Maui.Maps.Platform.MapExtensions.UpdateIsTrafficEnabled(this Android.Gms.Maps.GoogleMap! googleMap, Microsoft.Maui.Maps.IMap! map) -> void\nstatic Microsoft.Maui.Maps.Platform.MapExtensions.UpdateIsZoomEnabled(this Android.Gms.Maps.GoogleMap! googleMap, Microsoft.Maui.Maps.IMap! map) -> void\nstatic Microsoft.Maui.Maps.Platform.MapExtensions.UpdateMapType(this Android.Gms.Maps.GoogleMap! googleMap, Microsoft.Maui.Maps.IMap! map) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting between DP and Pixel values in MAUI for Tizen\nDESCRIPTION: These methods provide conversions between device-independent pixels (DP) and physical pixels for Tizen platform in MAUI. They include scaling factors for accurate representation across different device densities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.DPExtensions.ConvertToPixel(double dp) -> int\nstatic Microsoft.Maui.Platform.DPExtensions.ConvertToScaledDP(double pixel) -> double\nstatic Microsoft.Maui.Platform.DPExtensions.ConvertToScaledDP(int pixel) -> double\nstatic Microsoft.Maui.Platform.DPExtensions.ConvertToScaledPixel(double dp) -> int\n```\n\n----------------------------------------\n\nTITLE: WebViewHandler Mapping and Configuration Methods (C#)\nDESCRIPTION: Static methods in the WebViewHandler class that map WebView-specific properties and operations like Source, UserAgent, JavaScript evaluation, and navigation commands to platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.WebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEval(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapEvaluateJavaScriptAsync(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoBack(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapGoForward(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IWebView!, Microsoft.Maui.Handlers.IWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapReload(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapSource(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapUserAgent(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapWebChromeClient(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapWebViewClient(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Handlers.WebViewHandler.MapWebViewSettings(Microsoft.Maui.Handlers.IWebViewHandler! handler, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Navigation Operations in C#\nDESCRIPTION: This static method maps navigation requests for a NavigationViewHandler, taking an INavigationViewHandler, IStackNavigation, and an optional object parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: RefreshView Handler Property Mappings in C#\nDESCRIPTION: Static methods for handling RefreshView control properties including Content, IsRefreshing, RefreshColor and background settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\n----------------------------------------\n\nTITLE: Navigation View Extensions in MAUI Windows Platform\nDESCRIPTION: Extension methods for MauiNavigationView to update various navigation-related visual properties including background colors, text colors, and selection states.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.NavigationViewExtensions.UpdateTopNavAreaBackground(this Microsoft.Maui.Platform.MauiNavigationView! navigationView, Microsoft.Maui.Graphics.Paint? paint) -> void\n```\n\n----------------------------------------\n\nTITLE: CarouselView Handler Property Mappings in C#\nDESCRIPTION: Static method declarations for mapping CarouselView properties including Loop, PeekAreaInsets, and Position. These methods are part of the CarouselViewHandler2 class that manages carousel view functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.MapLoop(Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2 handler, Microsoft.Maui.Controls.CarouselView carouselView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.MapPeekAreaInsets(Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2 handler, Microsoft.Maui.Controls.CarouselView carouselView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.Mapper -> Microsoft.Maui.PropertyMapper<Microsoft.Maui.Controls.CarouselView, Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2>\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Entry in .NET MAUI\nDESCRIPTION: This snippet provides the getters for platform and virtual views in the IEntryHandler interface, which is responsible for text entry operations in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IEntryHandler.PlatformView.get -> AndroidX.AppCompat.Widget.AppCompatEditText!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IEntryHandler.VirtualView.get -> Microsoft.Maui.IEntry!\n```\n\n----------------------------------------\n\nTITLE: Converting MAUI Elements to Tizen Platform Views\nDESCRIPTION: These extension methods convert MAUI IElement instances to their corresponding Tizen platform views or handlers. They facilitate the rendering of MAUI UI elements on the Tizen platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.ToContainerView(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Tizen.NUI.BaseComponents.View!\nstatic Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!\nstatic Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Tizen.NUI.BaseComponents.View!\n```\n\n----------------------------------------\n\nTITLE: Font Services Initialization - Microsoft MAUI - CSharp\nDESCRIPTION: These constructors and method definitions are part of the Microsoft Maui's font management system. They handle the initialization of font-related services, including image source services for fonts with optional logging. Dependencies might include Microsoft.Maui.IFontManager and Microsoft.Extensions.Logging.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager, Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.FontImageSourceService!>? logger = null) -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager) -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.FontManager.FontManager(Microsoft.Maui.IFontRegistrar! fontRegistrar, System.IServiceProvider? serviceProvider = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Paths with Skia Platform\nDESCRIPTION: Executes low-level path drawing suitable for Skia platform integration, directly interfacing with graphic paths for optimized rendering procedures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.PlatformDrawPath(Microsoft.Maui.Graphics.PathF path) -> void\n```\n\n----------------------------------------\n\nTITLE: View Property Update Extensions\nDESCRIPTION: Collection of extension methods for updating various view properties like dimensions, transforms, and visual attributes on platform-specific views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this object! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this object! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateRotation(this object! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Device Platform Detection and Comparison in MAUI C# Applications\nDESCRIPTION: Static properties and operators for detecting and comparing device platforms (Android, iOS, Windows, etc.) in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.Android.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.iOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.MacCatalyst.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.macOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.operator !=(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool\nstatic Microsoft.Maui.Devices.DevicePlatform.operator ==(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool\nstatic Microsoft.Maui.Devices.DevicePlatform.Tizen.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.tvOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.Unknown.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.UWP.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.watchOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.WinUI.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\n----------------------------------------\n\nTITLE: Defining Vibration API in C#\nDESCRIPTION: Declares static methods for the Vibration class in the Microsoft.Maui.Devices namespace. Includes methods to start and stop vibration, with overloads for different duration specifications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Vibration.Cancel() -> void\nstatic Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!\nstatic Microsoft.Maui.Devices.Vibration.Vibrate() -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Page Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the PageHandler class that includes property and command mappers, and a MapTitle method for setting the page title. These methods are used to connect the cross-platform Page control with platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating API Diff with Git\nDESCRIPTION: Git command to generate a diff of API changes between two branches.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ngit diff <previous-branch> <new-branch> --output=api-changes.diff **\\PublicAPI.*.txt\n```\n\n----------------------------------------\n\nTITLE: Defining TextTransform enum in C#\nDESCRIPTION: Declares an enumeration for text transformation options, including Default, Lowercase, None, and Uppercase.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.TextTransform\nMicrosoft.Maui.TextTransform.Default = 1 -> Microsoft.Maui.TextTransform\nMicrosoft.Maui.TextTransform.Lowercase = 2 -> Microsoft.Maui.TextTransform\nMicrosoft.Maui.TextTransform.None = 0 -> Microsoft.Maui.TextTransform\nMicrosoft.Maui.TextTransform.Uppercase = 3 -> Microsoft.Maui.TextTransform\n```\n\n----------------------------------------\n\nTITLE: Virtual UpdateItemsSource Method (ItemsViewController)\nDESCRIPTION: This code defines a virtual method `UpdateItemsSource` within the `ItemsViewController2` class. This method is responsible for updating the items source of the view, likely triggering a refresh of the displayed content when the underlying data changes in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.UpdateItemsSource() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Subtracting from Clip in W2DCanvasState\nDESCRIPTION: This method subtracts a rectangle area from the current clipping region in W2DCanvasState, allowing for complex drawings by removing parts of shapes. It receives float parameters for x, y, width, and height.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DCanvasState.SubtractFromClip(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting UITouch Event Passthrough\nDESCRIPTION: Allows control over whether UITouch events should be passed through the overlay, critical for touch event handling in UI design.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.DisableUITouchEventPassthrough.set -> void\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance (Lat/Lon, Location) in MAUI\nDESCRIPTION: This static method calculates the distance between two geographic locations, using latitude/longitude for the start and a Location object for the end. It takes a starting latitude and longitude, an ending Location object, and a DistanceUnits enum. It returns the calculated distance as a double.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\"\n```\n\n----------------------------------------\n\nTITLE: Managing Compass Sensor\nDESCRIPTION: Contains properties and methods to manage compass sensor data including starting and stopping monitoring, checking support and status, and handling reading changes. Relies on the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.ICompass.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.ICompass.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.ICompass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.ICompass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\nMicrosoft.Maui.Devices.Sensors.ICompass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.ICompass.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping ImageButton Properties in C#\nDESCRIPTION: Static methods for mapping ImageButton properties in MAUI. Includes methods for mapping corner radius, padding, and stroke color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing SkiaGraphicsView\nDESCRIPTION: Initializes a new SkiaGraphicsView, optionally including a Drawable to define the initial graphical representation within the view context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.Views.SkiaGraphicsView.SkiaGraphicsView(Microsoft.Maui.Graphics.IDrawable drawable = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IVibration Interface in C#\nDESCRIPTION: Defines the IVibration interface for controlling device vibration functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IVibration\nMicrosoft.Maui.Devices.IVibration.Cancel() -> void\nMicrosoft.Maui.Devices.IVibration.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IVibration.Vibrate() -> void\nMicrosoft.Maui.Devices.IVibration.Vibrate(System.TimeSpan duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Attribute Union and Retrieval in MAUI C#\nDESCRIPTION: This collection of methods allows for the union and retrieval of text attributes within Microsoft MAUI. Methods provide a means to combine dictionaries of attributes and retrieve individual attribute values, with support for various data types. Inputs include dictionaries or attribute instances, with outputs being a combined set or individual attribute values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.Union(this System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> Microsoft.Maui.Graphics.Text.ITextAttributes\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string defaultValue = null) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetBoolAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool defaultValue = false) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetEnumAttribute<T>(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T defaultValue) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetFloatAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, float defaultValue) -> float\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetIntAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, int defaultValue) -> int\n```\n\n----------------------------------------\n\nTITLE: Writing Skia Bitmap Export Context to Stream\nDESCRIPTION: An overridden operation that enables writing or exporting a rendered image context to an output stream, crucial for image transfers or storage processes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.WriteToStream(System.IO.Stream stream) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Readonly LeadingContentProperty (TitleBar)\nDESCRIPTION: This code defines a static readonly `BindableProperty` called `LeadingContentProperty` for the `TitleBar` class.  This property likely represents the content positioned at the leading edge (left in LTR, right in RTL) of the title bar, allowing for the placement of custom controls or elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.LeadingContentProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Filling Shapes on ICanvas\nDESCRIPTION: These extension methods provide ways to fill shapes like circles and arcs on any ICanvas implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillArc(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF bounds, float startAngle, float endAngle, bool clockwise) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Extensions\nDESCRIPTION: Static extension methods for converting between Microsoft.Maui.Graphics.Color and SkiaSharp.SKColor with optional alpha manipulation\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKColorExtensions.ToColor(this Microsoft.Maui.Graphics.Color target, float alpha = 1) -> SkiaSharp.SKColor\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsColor(this SkiaSharp.SKColor target) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: RectF Methods and Operators in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Static methods and operators for Microsoft.Maui.Graphics.RectF, including rectangle creation with float parameters, type conversion, intersection, union operations, and equality checking. Provides the float-precision version of rectangle operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.RectF.FromLTRB(float left, float top, float right, float bottom) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.implicit operator CoreGraphics.CGRect(Microsoft.Maui.Graphics.RectF rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Microsoft.Maui.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Defining UrlLoadingEventArgs in C# for Blazor WebView\nDESCRIPTION: Defines the UrlLoadingEventArgs class for handling URL loading events in Blazor WebView. Includes properties for URL and loading strategy.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs.Url.get -> System.Uri!\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs.UrlLoadingStrategy.get -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingEventArgs.UrlLoadingStrategy.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing ShareFileRequest in MAUI\nDESCRIPTION: This snippet contains multiple constructors for the ShareFileRequest class, allowing the creation of file share requests with different parameters, such as a file reference and an optional title. It enables sharing of single files in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\n----------------------------------------\n\nTITLE: Visual Tree Management and Diagnostics in .NET MAUI\nDESCRIPTION: Methods for tracking, inspecting, and manipulating the visual tree in MAUI applications, including helpers for registering source information and detecting changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.VisualDiagnostics.GetSourceInfo(object! obj) -> Microsoft.Maui.SourceInfo?\nstatic Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child) -> void\nstatic Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement? parent, Microsoft.Maui.IVisualTreeElement! child, int newLogicalIndex) -> void\nstatic Microsoft.Maui.VisualDiagnostics.OnChildRemoved(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child, int oldLogicalIndex) -> void\nstatic Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(object! target, System.Uri! uri, int lineNumber, int linePosition) -> void\nstatic Microsoft.Maui.VisualDiagnostics.VisualTreeChanged -> System.EventHandler<Microsoft.Maui.VisualTreeChangeEventArgs!>?\n```\n\n----------------------------------------\n\nTITLE: Adding Arc to PathF in .NET MAUI\nDESCRIPTION: These methods add an arc to a PathF instance, defined by start and end angles, among other parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.AddArc(Microsoft.Maui.Graphics.PointF topLeft, Microsoft.Maui.Graphics.PointF bottomRight, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Overriding Layout Managers in MAUI (C#)\nDESCRIPTION: These method overrides are part of the HorizontalStackLayoutManager and VerticalStackLayoutManager classes. They handle measurement and arrangement of child elements within stack layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Layouts.HorizontalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Layouts.VerticalStackLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: MapSpan Static Methods\nDESCRIPTION: Static methods for creating and comparing MapSpan objects. Includes factory method for creating MapSpan from center location and radius, and equality comparison operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing ImageHandler in .NET MAUI\nDESCRIPTION: This snippet defines the constructors for the ImageHandler responsible for managing image components in a MAUI app. The constructors provide options for property mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageHandler.ImageHandler() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Utility Methods in PaintExtensions Class\nDESCRIPTION: These static methods provide utility functions for Paint objects, including checking for null or empty Paint, converting Paint to CALayer, and converting Paint to Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToCALayer(this Microsoft.Maui.Graphics.Paint! paint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Creation and Comparison Methods in C#\nDESCRIPTION: Provides static methods for creating Font objects with various parameters, as well as equality and inequality operators for Font comparison.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: UI Drawing and Overlay Virtual Methods in Microsoft.Maui\nDESCRIPTION: Virtual methods for handling UI drawing, adorners, and window overlays in the Microsoft.Maui framework. These methods manage hit testing, drawing, and window element lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool\nvirtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\nvirtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void\nvirtual Microsoft.Maui.WindowOverlay.Initialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the ViewHandler class that handle mapping of general view attributes like size, position, background, and interaction properties to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Compass Sensor API in .NET MAUI\nDESCRIPTION: Static methods for accessing and monitoring the device compass. Provides methods to start and stop monitoring with configurable sensor speed and low-pass filtering, check if the compass is supported, and events for detecting heading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Default.get -> Microsoft.Maui.Devices.Sensors.ICompass!\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator !=(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator ==(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Opening Maps from Location and Placemark in C#\nDESCRIPTION: Extension methods for opening maps using Location and Placemark objects, with optional MapLaunchOptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location, Microsoft.Maui.ApplicationModel.MapLaunchOptions options) -> System.Threading.Tasks.Task\nstatic Microsoft.Maui.Devices.Sensors.LocationExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Location location) -> System.Threading.Tasks.Task\nstatic Microsoft.Maui.Devices.Sensors.PlacemarkExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Placemark placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions options) -> System.Threading.Tasks.Task\nstatic Microsoft.Maui.Devices.Sensors.PlacemarkExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Placemark placemark) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: File System API Definitions in .NET MAUI\nDESCRIPTION: Static API definitions for file system operations in MAUI applications. Provides access to app directories and methods for working with package files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Circle Element\nDESCRIPTION: Defines a circle element that can be added to maps with properties for center location, radius and fill color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Circle Circle() -> void\nMicrosoft.Maui.Controls.Maps.Circle.Center.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Circle.Radius.get -> Microsoft.Maui.Maps.Distance\n```\n\n----------------------------------------\n\nTITLE: Defining FlyoutViewHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the FlyoutViewHandler class, including property mappers and methods for handling various aspects of a FlyoutView such as detail, flyout, behavior, width, and presentation state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapDetail(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyout(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyoutBehavior(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyoutWidth(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapIsGestureEnabled(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! view) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapIsPresented(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapToolbar(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: FontSource Property Accessors in C#\nDESCRIPTION: Read-only property accessors for FontSource class that provide access to font metadata including style, name, and weight.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.Graphics.FontSource.FontStyleType -> Microsoft.Maui.Graphics.FontStyleType\nreadonly Microsoft.Maui.Graphics.FontSource.Name -> string!\nreadonly Microsoft.Maui.Graphics.FontSource.Weight -> int\n```\n\n----------------------------------------\n\nTITLE: Updating UIImageView Source Asynchronously in .NET MAUI\nDESCRIPTION: This method asynchronously updates the source of a UIImageView in .NET MAUI. It takes an IImageSourcePart, an IImageSourceServiceProvider, and an optional CancellationToken as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_177\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ImageViewExtensions.UpdateSourceAsync(this UIKit.UIImageView! imageView, Microsoft.Maui.IImageSourcePart! image, Microsoft.Maui.IImageSourceServiceProvider! services, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\n```\n\n----------------------------------------\n\nTITLE: FontWeights Constants in MAUI Graphics\nDESCRIPTION: Defines standard font weight constants used in MAUI Graphics for text rendering. Values range from 100 (Thin) to 950 (UltraBlack).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.FontWeights.Light = 300\nconst Microsoft.Maui.Graphics.FontWeights.Medium = 500\nconst Microsoft.Maui.Graphics.FontWeights.Normal = 400\nconst Microsoft.Maui.Graphics.FontWeights.Regular = 400\nconst Microsoft.Maui.Graphics.FontWeights.SemiBold = 600\nconst Microsoft.Maui.Graphics.FontWeights.SemiLight = 400\nconst Microsoft.Maui.Graphics.FontWeights.Thin = 100\nconst Microsoft.Maui.Graphics.FontWeights.UltraBlack = 950\nconst Microsoft.Maui.Graphics.FontWeights.UltraBold = 800\nconst Microsoft.Maui.Graphics.FontWeights.UltraLight = 200\n```\n\n----------------------------------------\n\nTITLE: RectangleAdorner Contains Method in C#\nDESCRIPTION: Virtual method that determines if a point is contained within the rectangle adorner. Used for hit testing in UI interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_190\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool\n```\n\n----------------------------------------\n\nTITLE: Graphics Coordinate Conversion Extensions\nDESCRIPTION: Extensions for converting MAUI graphics points to Windows Foundation points. These methods handle coordinate system transformations with optional pixel density adjustments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.GraphicsExtensions.AsPoint(this Microsoft.Maui.Graphics.PointF target, float ppu) -> Windows.Foundation.Point\nstatic Microsoft.Maui.Platform.GraphicsExtensions.AsPoint(this Microsoft.Maui.Graphics.PointF target) -> Windows.Foundation.Point\n```\n\n----------------------------------------\n\nTITLE: Convert IImage to UIImage in MAUI\nDESCRIPTION: This method converts an IImage instance from MAUI to a UIKit UIImage. It is necessary for working with images in UIKit.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.ImageExtensions.AsUIImage(this Microsoft.Maui.Graphics.IImage image) -> UIKit.UIImage\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in MAUI Applications\nDESCRIPTION: Provides static properties and methods for tracking application versions, builds, and launch information. Useful for managing version-specific logic and user experiences.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.BuildHistory.get -> System.Collections.Generic.IEnumerable<string!>!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentBuild.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentVersion.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Default.get -> Microsoft.Maui.ApplicationModel.IVersionTracking!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledBuild.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledVersion.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchEver.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForBuild(string! build) -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForVersion(string! version) -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.PreviousBuild.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.PreviousVersion.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Track() -> void\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.VersionHistory.get -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Getting Window from Overlay\nDESCRIPTION: Retrieves the window associated with the overlay, which can be useful for coordinating actions between them.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.Window.get -> Microsoft.Maui.IWindow!\n```\n\n----------------------------------------\n\nTITLE: Property Mapper Interface Methods\nDESCRIPTION: Interface for mapping and updating properties across element handlers and virtual views\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IPropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Maui.IPropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?\nMicrosoft.Maui.IPropertyMapper.UpdateProperties(Microsoft.Maui.IElementHandler! elementHandler, Microsoft.Maui.IElement! virtualView) -> void\n```\n\n----------------------------------------\n\nTITLE: Starting Orientation Sensor Monitoring - C# .NET MAUI\nDESCRIPTION: Begins monitoring of orientation sensor data using a specified sensor speed. This method does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending IImageSourceService for Platform-Specific Image Loading in C#\nDESCRIPTION: This extension method allows asynchronous loading of platform-specific images using IImageSourceService. It takes an image source and MAUI context as parameters and returns a task that resolves to an IImageSourceServiceResult containing a UIImage.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSourceService! imageSourceService, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\n```\n\n----------------------------------------\n\nTITLE: Defining BatteryState Enum in C#\nDESCRIPTION: Enum representing different states of a device's battery in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Charging = 1 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Discharging = 2 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Full = 3 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.NotCharging = 4 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.NotPresent = 5 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Unknown = 0 -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: Defining TextToSpeech API in C#\nDESCRIPTION: Declares static methods for the TextToSpeech class in the Microsoft.Maui.Media namespace. Includes methods for speaking text and getting available locales.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!\nstatic Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: SizeF Structure Operators and Conversions in .NET MAUI Graphics\nDESCRIPTION: Defines operator overloads and type conversions for the SizeF structure in Microsoft.Maui.Graphics, including conversions to Vector2, arithmetic operations, and equality comparisons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Static Utility Constants in .NET MAUI\nDESCRIPTION: Static readonly fields for commonly used constants in MAUI applications, including font file extensions and grid layout properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.FontFile.Extensions -> string![]!\nstatic readonly Microsoft.Maui.GridLength.Auto -> Microsoft.Maui.GridLength\nstatic readonly Microsoft.Maui.GridLength.Star -> Microsoft.Maui.GridLength\nstatic readonly Microsoft.Maui.Layouts.FlexBasis.Auto -> Microsoft.Maui.Layouts.FlexBasis\n```\n\n----------------------------------------\n\nTITLE: Filling Rectangles with a Canvas in MAUI (C#)\nDESCRIPTION: This method fills a specified rectangle area on a canvas with a solid color. It is part of the CanvasExtensions class and is designed to be called on any instance of ICanvas. No external dependencies are required.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar Subtitle Property in C#\nDESCRIPTION: These code snippets represent accessing the Subtitle property of the TitleBar, allowing to get or set the subtitle text displayed in the title bar. The type is string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Subtitle.get -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Subtitle.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining IDeviceInfo Interface in C#\nDESCRIPTION: Defines the IDeviceInfo interface with properties for accessing various device information such as type, manufacturer, model, and platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceInfo\nMicrosoft.Maui.Devices.IDeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nMicrosoft.Maui.Devices.IDeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nMicrosoft.Maui.Devices.IDeviceInfo.Manufacturer.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Model.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Name.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nMicrosoft.Maui.Devices.IDeviceInfo.Version.get -> System.Version!\nMicrosoft.Maui.Devices.IDeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: IGyroscope Interface Definition in C#\nDESCRIPTION: Interface for the gyroscope sensor in .NET MAUI. Provides methods to start and stop monitoring, an event for reading changes, and properties to check support and monitoring status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGyroscope.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGyroscope.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.IGyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IGyroscope.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Stroke Styling and Clipping Operations in MAUI Graphics C#\nDESCRIPTION: Abstract methods for controlling stroke appearance, line caps, line joins, and clipping operations in the AbstractCanvas<TState> class. These methods allow for customizing how strokes appear and managing canvas clipping regions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineCap.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineJoin.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.SubtractFromClip(float x, float y, float width, float height) -> void\n~virtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.StateRestored(TState state) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Canvas Drawing Methods in Microsoft MAUI\nDESCRIPTION: This collection of overriding methods focuses on enhancing the drawing capabilities of the `PlatformCanvas` class within the MAUI framework, such as setting fill colors, drawing strings, and managing stroke dash patterns. These methods require dependencies on the `Microsoft.Maui.Graphics` namespace and assume graphical context availability.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Network Connection Profiles\nDESCRIPTION: Enum defining different types of network connection profiles in MAUI, including cellular, ethernet, WiFi, and unknown connections\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Networking.ConnectionProfile.Cellular = 2\nMicrosoft.Maui.Networking.ConnectionProfile.Ethernet = 3\nMicrosoft.Maui.Networking.ConnectionProfile.Unknown = 0\nMicrosoft.Maui.Networking.ConnectionProfile.WiFi = 4\n```\n\n----------------------------------------\n\nTITLE: UI Element Handlers in MAUI\nDESCRIPTION: Methods for UI element handlers that connect platform-specific views with MAUI virtual views, including command handling and property management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.CommandMapper.GetCommand(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?\nvirtual Microsoft.Maui.Handlers.ButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ElementHandler.Invoke(string! command, object? args) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.UpdateValue(string! property) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: AbsoluteLayoutFlags Enum in .NET MAUI\nDESCRIPTION: Enumeration for specifying how elements are positioned and sized in an AbsoluteLayout. These flags determine whether coordinates and dimensions are proportional to the container or absolute values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\n----------------------------------------\n\nTITLE: Implementing Connectivity Change Event Args in .NET MAUI\nDESCRIPTION: This snippet details the ConnectivityChangedEventArgs class, which provides event data related to changes in network connectivity. It includes properties such as NetworkAccess that indicate the current network status. This is essential for response handling in applications that rely on network connectivity.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Networking.ConnectivityChangedEventArgs\nMicrosoft.Maui.Networking.ConnectivityChangedEventArgs.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for SearchBar in .NET MAUI\nDESCRIPTION: This snippet describes the ISearchBarHandler interface definition, detailing platform and virtual view access for search bar components in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ISearchBarHandler.PlatformView.get -> AndroidX.AppCompat.Widget.SearchView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ISearchBarHandler.QueryEditor.get -> Android.Widget.EditText?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ISearchBarHandler.VirtualView.get -> Microsoft.Maui.ISearchBar!\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Extension (Lat/Lon) in MAUI\nDESCRIPTION: This extension method calculates the distance from a Location to another point specified by latitude and longitude. It's an extension on the Location class. The function takes latitude and longitude for the destination and a DistanceUnits enum, then returns the distance as a double.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.LocationExtensions.CalculateDistance(this Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\"\n```\n\n----------------------------------------\n\nTITLE: Setting Font Paint in Skia Canvas State\nDESCRIPTION: Provides the ability to configure the SKPaint used for font rendering, enabling detailed control over how text is drawn within the canvas, including brush and effect settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontPaint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Geolocation Static Methods in MAUI\nDESCRIPTION: Static extension methods for the IGeolocation interface to get device location with optional GeolocationRequest parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation, Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: Layout Extensions in MAUI C#\nDESCRIPTION: Extensions for handling layout operations in MAUI. Includes methods for measuring, arranging, and computing sizes for views and content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView view, double widthConstraint, double heightConstraint)\n```\n\n----------------------------------------\n\nTITLE: Mapping Entry Properties in C#\nDESCRIPTION: Static methods for mapping Entry properties in MAUI. Includes methods for mapping various text properties, keyboard settings, and defining property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapBackground(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollViewHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods for the ScrollViewHandler class that handle scrolling behaviors, including content, content size, scroll bar visibility, orientation, and programmatic scrolling requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContentSize(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Layout-related Enums in C#\nDESCRIPTION: Defines various enumerations related to layout management in MAUI, including AbsoluteLayoutFlags, FlexAlignContent, FlexAlignItems, and FlexAlignSelf.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional = 2 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n\nMicrosoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.End = 4 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.Layouts.FlexAlignContent.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignContent\n\nMicrosoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.End = 4 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.Layouts.FlexAlignItems.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignItems\n\nMicrosoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.Auto = 0 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint Shader in Skia Canvas\nDESCRIPTION: Sets a shader for filling operations in the SkiaCanvas, utilizing an SKShader to produce complex textures and effects on drawn shapes, enhancing visual outcome.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.SetFillPaintShader(SkiaSharp.SKShader shader) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Handling in .NET MAUI Canvas State\nDESCRIPTION: This segment contains the getter and setter for the font properties in the canvas state, allowing configuration of text properties in graphics rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.Font.get -> Microsoft.Maui.Graphics.IFont\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.Font.set -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Hot Reload Extensions\nDESCRIPTION: Extension methods supporting hot reload functionality in MAUI applications. These methods check handlers for views and retrieve methods marked for hot reload from a type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.HotReloadExtensions.CheckHandlers(this Microsoft.Maui.IView? view) -> void\nstatic Microsoft.Maui.HotReload.HotReloadExtensions.GetOnHotReloadMethods(this System.Type! type) -> System.Collections.Generic.List<System.Reflection.MethodInfo!>!\n```\n\n----------------------------------------\n\nTITLE: SearchBarHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the SearchBarHandler class in Microsoft.Maui that handle search bar properties like text styling, input control, and keyboard options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Extensions for .NET MAUI on Android\nDESCRIPTION: These extension methods provide color conversion utilities between .NET MAUI Color representations and Android-specific color types. They handle conversions to and from Android.Graphics.Color and ColorStateList.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_156\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ColorExtensions.ToColor(this Android.Graphics.Color color) -> Microsoft.Maui.Graphics.Color!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color! self) -> Android.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for IndicatorView in .NET MAUI\nDESCRIPTION: This snippet defines the Indicators for the IIndicatorViewHandler interface that manages indicator view properties and interactions in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IIndicatorViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiPageControl!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IIndicatorViewHandler.VirtualView.get -> Microsoft.Maui.IIndicatorView!\n```\n\n----------------------------------------\n\nTITLE: Converting IFont to CGFont in MAUI\nDESCRIPTION: This method converts a specified IFont to its corresponding CGFont. The output is an instance of CGFont.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.FontExtensions.ToCGFont(this Microsoft.Maui.Graphics.IFont font) -> CoreGraphics.CGFont\n```\n\n----------------------------------------\n\nTITLE: Configuring Lifecycle Events in .NET MAUI Application\nDESCRIPTION: These extension methods provide ways to configure lifecycle events for a .NET MAUI application. They allow adding platform-specific events and generic events to the application's lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_154\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.AndroidLifecycleExtensions.AddAndroid(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.IAndroidLifecycleBuilder!>! configureDelegate) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Getting Locale ID in .NET MAUI\nDESCRIPTION: This property retrieves the unique identifier for a Locale instance, which typically follows the language-country pattern such as 'en-US'.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Id.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for SearchBar Handler in .NET MAUI\nDESCRIPTION: Static methods for mapping SearchBar properties including text, styling, keyboard behavior and input validation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Picker Extensions\nDESCRIPTION: Extension methods for retrieving items from MAUI pickers in different collection formats. These methods convert the picker's items to arrays or lists for easier consumption.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.IPickerExtension.GetItemsAsArray(this Microsoft.Maui.IPicker! picker) -> string![]!\nstatic Microsoft.Maui.IPickerExtension.GetItemsAsList(this Microsoft.Maui.IPicker! picker) -> System.Collections.Generic.List<string!>!\n```\n\n----------------------------------------\n\nTITLE: SwipeItemViewHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods in the SwipeItemViewHandler class that map ISwipeItemView properties to platform implementations. These methods handle content rendering and visibility of custom swipe item views within a SwipeView container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Requests in .NET MAUI\nDESCRIPTION: Defines a navigation request with support for animated transitions and maintaining a navigation stack of views\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.NavigationRequest.NavigationRequest(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newNavigationStack, bool animated) -> void\n```\n\n----------------------------------------\n\nTITLE: Border Handler Mapping Methods in C#\nDESCRIPTION: Methods for mapping border-related properties to native controls. These handle various aspects of borders including shape, stroke properties, and content management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.BorderHandler!>!\nstatic Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.IBorderHandler!>!\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Stepper Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of the Stepper control to its handler in MAUI. These methods handle updating the minimum, maximum, increment, and value properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.Handlers.StepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMaximum(Microsoft.Maui.Handlers.StepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMinimum(Microsoft.Maui.Handlers.StepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.Handlers.StepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Working with Soft Input in MAUI\nDESCRIPTION: Extension method to display the soft keyboard for text input elements. Returns a boolean task indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SoftInputExtensions.ShowSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: MauiViewGroup Overrides for Android\nDESCRIPTION: Method overrides for the MauiViewGroup class that handle JNI integration and layout operations. These methods bridge MAUI's view management with Android's native ViewGroup functionality and layout system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.MauiViewGroup.JniPeerMembers.get -> Java.Interop.JniPeerMembers!\noverride Microsoft.Maui.MauiViewGroup.OnLayout(bool changed, int l, int t, int r, int b) -> void\noverride Microsoft.Maui.MauiViewGroup.ThresholdClass.get -> nint\noverride Microsoft.Maui.MauiViewGroup.ThresholdType.get -> System.Type!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Points from Path Segments in .NET MAUI\nDESCRIPTION: This snippet describes the GetPointsForSegment method within the PathF class, which retrieves points for a given segment index of a path.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.GetPointsForSegment(int segmentIndex) -> Microsoft.Maui.Graphics.PointF[]\n```\n\n----------------------------------------\n\nTITLE: MapPinHandler Static Methods - C#\nDESCRIPTION: Static methods for handling map pin properties including address, label, and location mapping. Includes a static property Mapper for property mapping configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapAddress(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapLabel(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapLocation(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.Maps.IMapPin!, Microsoft.Maui.Maps.Handlers.IMapPinHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Time Formatting Extensions for .NET MAUI\nDESCRIPTION: Extension methods for formatting TimeSpan values and ITimePicker time selections as strings. These methods support culture-specific formatting of time values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_177\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this Microsoft.Maui.ITimePicker! timePicker) -> string!\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this System.TimeSpan time, string! format, System.Globalization.CultureInfo? cultureInfo = null) -> string!\n```\n\n----------------------------------------\n\nTITLE: Browser Launch via IBrowser in MAUI\nDESCRIPTION: The 'IBrowser' interface contains methods to open URLs asynchronously within the MAUI application. These operations use launch options to specify browser behaviors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IBrowser\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IBrowser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Defining BlendMode Enum in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines the BlendMode enum in the Microsoft.Maui.Graphics namespace. It includes various blending modes that can be used in graphics operations to control how colors are combined.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Clear = 16 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Color = 14 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.ColorBurn = 7 -> Microsoft.Maui.Graphics.BlendMode\n// ... (more blend mode definitions)\n```\n\n----------------------------------------\n\nTITLE: Filling Paths in Microsoft.Maui.Graphics\nDESCRIPTION: This pair of methods allows filling paths defined by PathF objects. The path can be filled with a specified winding mode, giving control over the fill algorithm used. This enhances the capability to draw complex paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void\n```\n\n----------------------------------------\n\nTITLE: Transforming Path for Rotated Android Path\nDESCRIPTION: Static extension for adapting a Microsoft.Graphics.PathF to a rotated Skia SKPath, critical for managing complex path transformations across Android-specific rendering logic.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsRotatedAndroidPath(this Microsoft.Maui.Graphics.PathF target, Microsoft.Maui.Graphics.PointF center, float ppu, float zoom, float angle) -> SkiaSharp.SKPath\n```\n\n----------------------------------------\n\nTITLE: NavigationRequest Class in C#\nDESCRIPTION: Definition of NavigationRequest class which encapsulates navigation stack information and animation preferences for navigation operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.NavigationRequest\nMicrosoft.Maui.NavigationRequest.Animated.get -> bool\nMicrosoft.Maui.NavigationRequest.NavigationRequest(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newNavigationStack, bool animated) -> void\nMicrosoft.Maui.NavigationRequest.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!\n```\n\n----------------------------------------\n\nTITLE: Inserting Line to PathF in .NET MAUI\nDESCRIPTION: This method inserts a straight line to a PathF instance at a specified index.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.InsertLineTo(Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: GetPatternBitmap with SKGraphicsExtensions in C#\nDESCRIPTION: This method retrieves a bitmap representation of a pattern paint using SkiaSharp's SKBitmap. It takes a pattern paint and scaling factors for x and y as inputs, along with a current figure object. The dependencies include Microsoft.Maui.Graphics and SkiaSharp libraries. The function outputs a SKBitmap object and requires appropriate setup of inputs such as a PatternPaint.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scaleX, float scaleY, object currentFigure) -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: Gyroscope APIs in MAUI C#\nDESCRIPTION: Static methods for accessing and controlling the device gyroscope, including starting and stopping monitoring, checking support status, and handling gyroscope reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Default.get -> Microsoft.Maui.Devices.Sensors.IGyroscope!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Contact Management in .NET MAUI\nDESCRIPTION: Methods for accessing and picking contacts from the device's contact list.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IContacts!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\n```\n\n----------------------------------------\n\nTITLE: Image Processing Extensions\nDESCRIPTION: Extension methods for working with images, including conversion to different formats and image manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBase64(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> string\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBytes(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: System Font Creation Methods in C#\nDESCRIPTION: Methods for creating system fonts with various properties like size, weight, and slant. These methods allow customization of font appearance in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!\n```\n\n----------------------------------------\n\nTITLE: Updating UISearchBar Font in .NET MAUI for iOS\nDESCRIPTION: This extension method updates the font of a UISearchBar in .NET MAUI for iOS. It takes a UISearchBar, an ITextStyle interface, an IFontManager, and an optional UITextField as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_182\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SearchBarExtensions.UpdateFont(this UIKit.UISearchBar! uiSearchBar, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager, UIKit.UITextField? textField) -> void\n```\n\n----------------------------------------\n\nTITLE: TabbedViewHandler Mappers in MAUI\nDESCRIPTION: Static definitions for TabbedView command and property mappers in MAUI, providing the infrastructure for tabbed navigation interfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: WindowOverlay Initialize Method in C#\nDESCRIPTION: Virtual method that initializes the window overlay, setting up required resources. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_195\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.Initialize() -> bool\n```\n\n----------------------------------------\n\nTITLE: Mapping ImageButton Properties in Microsoft.Maui\nDESCRIPTION: Static methods from ImageButtonHandler class that map various IImageButton and IButtonStroke properties to platform-specific implementations. These methods handle corner radius, padding, stroke color, and stroke thickness for the ImageButton control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: SkiaSharp Graphics API Declarations\nDESCRIPTION: Public API surface for the Microsoft.Maui.Graphics.Skia namespace showing method signatures for graphics operations using SkiaSharp. Includes bitmap manipulation, canvas state management, text rendering, and color conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~Microsoft.Maui.Graphics.Skia.PlatformBitmapExportService.CreateContext(int width, int height, float displayScale = 1) -> Microsoft.Maui.Graphics.BitmapExportContext\n~Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.Bitmap.get -> SkiaSharp.SKBitmap\n~Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.SKImage.get -> SkiaSharp.SKImage\n~Microsoft.Maui.Graphics.Skia.SkiaCanvas.Canvas.get -> SkiaSharp.SKCanvas\n~Microsoft.Maui.Graphics.Skia.SkiaCanvas.Canvas.set -> void\n// ... additional method declarations omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: SwipeView and Time Extensions for MAUI\nDESCRIPTION: Extensions for handling SwipeView text colors and formatting time values for display.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SwipeViewExtensions.GetTextColor(this Microsoft.Maui.ISwipeItemMenuItem! swipeItemMenuItem) -> Microsoft.Maui.Graphics.Color?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this Microsoft.Maui.ITimePicker! timePicker) -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this System.TimeSpan time, string! format, System.Globalization.CultureInfo? cultureInfo = null) -> string!\n```\n\n----------------------------------------\n\nTITLE: Adding Runs to Mutable Attributed Text in C#\nDESCRIPTION: This snippet defines a method to add an attributed text run to a mutable attributed text instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.MutableAttributedText.AddRun(Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> void\n```\n\n----------------------------------------\n\nTITLE: Magnetometer Data - C# .NET MAUI\nDESCRIPTION: Defines the data structure for magnetometer readings, including methods for equating magnetometer data. It is necessary for manipulating and comparing magnetometer readings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.Equals(Microsoft.Maui.Devices.Sensors.MagnetometerData other) -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint in Skia Canvas\nDESCRIPTION: Applies or updates the fill paint with specific properties across a defined rectangle, impacting how colors and styles are used within skia graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\n```\n\n----------------------------------------\n\nTITLE: Stepper Extension Methods in MAUI\nDESCRIPTION: Extension methods for MauiStepper to update properties like background, interval, maximum, minimum and value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateBackground(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateInterval(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateMaximum(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateMinimum(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateValue(this Microsoft.Maui.Platform.MauiStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Type Converter Implementations\nDESCRIPTION: Abstract method declarations for various MAUI type converters handling Flex layout properties, easing, and thickness conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: MauiHandlersFactory Class Definition\nDESCRIPTION: Defines the MauiHandlersFactory class which inherits from MauiFactory and implements IMauiHandlersFactory interface, providing handler resolution capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/HandlerResolution.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MauiHandlersFactory : MauiFactory, IMauiHandlersFactory\n```\n\n----------------------------------------\n\nTITLE: Declaring OnPlatformExtension Properties in C#\nDESCRIPTION: This snippet declares platform-specific properties for the OnPlatformExtension class, including Android, iOS, MacCatalyst, and others, as well as a ProvideValue method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Android.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Android.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.iOS.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.iOS.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.MacCatalyst.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.MacCatalyst.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n```\n\n----------------------------------------\n\nTITLE: Override DetermineEmptyViewFrame Method (StructuredItemsViewController)\nDESCRIPTION: This code overrides the DetermineEmptyViewFrame method in StructuredItemsViewController2. It's probably for customizing the frame (position and size) of an empty view displayed when there are no items in a structured items view in a MAUI app on iOS, and it returns a CoreGraphics.CGRect struct.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2<TItemsView>.DetermineEmptyViewFrame() -> CoreGraphics.CGRect\"\n```\n\n----------------------------------------\n\nTITLE: Defining PictureCanvas Class Methods in C#\nDESCRIPTION: This snippet shows method definitions for the PictureCanvas class, which provides a canvas for drawing operations on a picture.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_154\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.Alpha.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Antialias.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.BlendMode.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ClipRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DisplayScale.get -> float\nMicrosoft.Maui.Graphics.PictureCanvas.DisplayScale.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Dispose() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawEllipse(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing EditorHandler in MAUI\nDESCRIPTION: Defines constructors for the `EditorHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. This handler is used to manage the platform-specific implementation of a MAUI Editor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.EditorHandler.EditorHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.EditorHandler.EditorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.EditorHandler.EditorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Mapping SearchBar Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of the SearchBar control to its handler in MAUI. These methods handle updating the placeholder, text color, and alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping GraphicsView Properties in C#\nDESCRIPTION: Static methods for mapping GraphicsView properties in MAUI. Includes methods for mapping drawable content and flow direction.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining IMap Interface in C# for MAUI Maps\nDESCRIPTION: Defines the IMap interface in the Microsoft.Maui.Maps namespace, specifying properties and methods for map functionality in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Maps.IMap.Clicked(Microsoft.Maui.Devices.Sensors.Location! position) -> void\nMicrosoft.Maui.Maps.IMap.Elements.get -> System.Collections.Generic.IList<Microsoft.Maui.Maps.IMapElement!>!\nMicrosoft.Maui.Maps.IMap.IsScrollEnabled.get -> bool\nMicrosoft.Maui.Maps.IMap.IsShowingUser.get -> bool\nMicrosoft.Maui.Maps.IMap.IsTrafficEnabled.get -> bool\nMicrosoft.Maui.Maps.IMap.IsZoomEnabled.get -> bool\nMicrosoft.Maui.Maps.IMap.MapType.get -> Microsoft.Maui.Maps.MapType\nMicrosoft.Maui.Maps.IMap.MoveToRegion(Microsoft.Maui.Maps.MapSpan! region) -> void\nMicrosoft.Maui.Maps.IMap.Pins.get -> System.Collections.Generic.IList<Microsoft.Maui.Maps.IMapPin!>!\nMicrosoft.Maui.Maps.IMap.VisibleRegion.get -> Microsoft.Maui.Maps.MapSpan?\nMicrosoft.Maui.Maps.IMap.VisibleRegion.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Editor Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of an Editor control, including character spacing, cursor position, font, formatting, text alignment, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFormatting(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Switch Properties in MAUI\nDESCRIPTION: Static method for mapping the IsOn property of the Switch control to its handler in MAUI. This method handles updating the switch state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Entry Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of an Entry control, including character spacing, clear button visibility, cursor position, font, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFormatting(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Saving Skia Image to Stream\nDESCRIPTION: Writes an image to a specified stream in a selected format and quality. This operation is crucial for persisting image data in various contexts, such as files or memory buffers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.Save(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Constants in .NET MAUI Graphics\nDESCRIPTION: Defines static readonly fields for various graphics-related structures including default values and zero constants for geometric types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF\nstatic readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF\nstatic readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size\nstatic readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Overriding ScrollView Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for ScrollViewHandler class that manage platform view creation, handler connection/disconnection, desired size calculation, and arrangement for scrollable content in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(UIKit.UIScrollView! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.CreatePlatformView() -> UIKit.UIScrollView!\noverride Microsoft.Maui.Handlers.ScrollViewHandler.DisconnectHandler(UIKit.UIScrollView! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ScrollViewHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ScrollViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting MAUI Visibility to Android ViewStates in C#\nDESCRIPTION: This method converts a MAUI Visibility enum to the corresponding Android ViewStates enum.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_183\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.ToPlatformVisibility(this Microsoft.Maui.Visibility visibility) -> Android.Views.ViewStates\n```\n\n----------------------------------------\n\nTITLE: RetrievePlatformValueRequest Class in C#\nDESCRIPTION: Definition of generic RetrievePlatformValueRequest class which facilitates retrieving platform-specific values in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.RetrievePlatformValueRequest<T>\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.Result.get -> T\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.RetrievePlatformValueRequest() -> void\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.SetResult(T result) -> void\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.TrySetResult(T result) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining MenuFlyoutSubItemHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static mapping methods for the MenuFlyoutSubItemHandler class that define how to handle adding, clearing, inserting, removing menu items, and controlling enabled state. The Mapper property provides the property mapping configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Page and Picker Properties in C#\nDESCRIPTION: These static methods map properties for Page and Picker elements, such as Title, CharacterSpacing, Font, and HorizontalTextAlignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SensorSpeed Enumeration in C#\nDESCRIPTION: Defines an enumeration value for UI sensor speed in the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.UI = 1 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\n```\n\n----------------------------------------\n\nTITLE: IndicatorViewHandler Static Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods for mapping IndicatorView properties such as indicator count, colors, shapes, sizes, and visibility settings. These methods handle the platform-specific implementations of indicator controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorShape(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorSize(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapMaximumVisible(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapPosition(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapSelectedIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: DrawCircle Extensions for ICanvas in .NET MAUI Graphics\nDESCRIPTION: These static extension methods `DrawCircle` extend the `ICanvas` interface in the Microsoft.Maui.Graphics library. They provide different overloads for drawing a circle using either center coordinates and radius as floats, a `Point` and radius as a double, or a `PointF` and radius as a float.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Building MAUI project to record AOT profiles (bash)\nDESCRIPTION: This script builds a MAUI project using the dotnet CLI, enabling the generation of AOT profiles. The `build.proj` file is used with parameters to specify the target application type. The `-bl` flag creates a binary log for diagnostics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./.dotnet/dotnet build src/ProfiledAot/build.proj -bl -p:App=maui\n./.dotnet/dotnet build src/ProfiledAot/build.proj -bl -p:App=maui-sc\n./.dotnet/dotnet build src/ProfiledAot/build.proj -bl -p:App=maui-blazor\n```\n\n----------------------------------------\n\nTITLE: Setting Text Attributes in C#\nDESCRIPTION: These methods extend Dictionary<TextAttribute, string> to set various text properties such as background color, bold, font name, and font size. They allow for easy modification of text styling attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBackgroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBold(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontName(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontSize(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, float value) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining CultureInfo Partial Class in C# for .NET MAUI\nDESCRIPTION: This snippet defines a partial class CultureInfo within the System.Globalization namespace. It includes constructors, properties, and methods for handling culture-specific information and operations in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n\nnamespace System.Globalization\n{\n\tpublic partial class CultureInfo : IFormatProvider\n\t{\n\t\tpublic CultureInfo(string name)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\n\t\tpublic CultureInfo(string name, bool useUserOverride)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\n\t\tpublic CultureInfo(int culture)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\n\t\tpublic CultureInfo(int culture, bool useUserOverride)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\n\t\tpublic virtual string DisplayName => throw new NotImplementedException();\n\n\t\tpublic virtual string EnglishName => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo InvariantCulture => throw new NotImplementedException();\n\n\t\tpublic bool IsNeutralCulture => throw new NotImplementedException();\n\n\t\tpublic virtual string Name => throw new NotImplementedException();\n\n\t\tpublic virtual string NativeName => throw new NotImplementedException();\n\n\t\tpublic virtual Calendar Calendar => throw new NotImplementedException();\n\n\t\tpublic virtual CompareInfo CompareInfo => throw new NotImplementedException();\n\n\t\tpublic virtual DateTimeFormatInfo DateTimeFormat\n\t\t{\n\t\t\tget => throw new NotImplementedException();\n\t\t\tset => throw new NotImplementedException();\n\t\t}\n\n\t\tpublic virtual NumberFormatInfo NumberFormat\n\t\t{\n\t\t\tget => throw new NotImplementedException();\n\t\t\tset => throw new NotImplementedException();\n\t\t}\n\n\t\tpublic virtual Calendar[] OptionalCalendars => throw new NotImplementedException();\n\n\t\tpublic virtual string TwoLetterISOLanguageName => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo CurrentCulture\n\t\t{\n\t\t\tget => throw new NotImplementedException();\n\t\t\tset => throw new NotImplementedException();\n\t\t}\n\n\t\tpublic static CultureInfo CurrentUICulture\n\t\t{\n\t\t\tget => throw new NotImplementedException();\n\t\t\tset => throw new NotImplementedException();\n\t\t}\n\n\t\tpublic static CultureInfo InstalledUICulture => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo CreateSpecificCulture(string name) => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo? GetCultureInfo(string name) => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo GetCultureInfo(int culture) => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo GetCultureInfo(string name, string altName) => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo GetCultureInfoByIetfLanguageTag(string name) => throw new NotImplementedException();\n\n\t\tpublic void ClearCachedData() => throw new NotImplementedException();\n\n\t\tpublic object? GetFormat(Type? formatType) => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo[] GetCultures(CultureTypes types) => throw new NotImplementedException();\n\n\t\tpublic static CultureInfo ReadOnly(CultureInfo ci) => throw new NotImplementedException();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Element Properties in C#\nDESCRIPTION: Static methods for mapping Element properties in MAUI. Includes methods for defining property and command mappers for elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Font Management Types in .NET MAUI\nDESCRIPTION: Defines font-related enumerations and utility classes for managing font styles, weights, and registrations in MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.FontSlant\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.FontWeight\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Label in .NET MAUI\nDESCRIPTION: This snippet details platform and virtual view accessors for the ILabelHandler interface, allowing for text display manipulation in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ILabelHandler.PlatformView.get -> AndroidX.AppCompat.Widget.AppCompatTextView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ILabelHandler.VirtualView.get -> Microsoft.Maui.ILabel!\n```\n\n----------------------------------------\n\nTITLE: Getting Window Overlays Collection\nDESCRIPTION: Provides access to a read-only collection of overlays applied to the window, useful for managing visual elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!\n```\n\n----------------------------------------\n\nTITLE: MapSpan Inequality Operator Overload\nDESCRIPTION: Static operator overload that compares two MapSpan instances for inequality. Returns a boolean indicating whether the two map regions are different.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: MAUI Internal Field Declarations (C#)\nDESCRIPTION: Read-only internal field declarations for MAUI classes that maintain state or configuration information. These fields define the backing storage for collections and property mappers used throughout the framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.LockableObservableListWrapper._list -> System.Collections.ObjectModel.ObservableCollection<string!>!\nreadonly Microsoft.Maui.PropertyMapper._mapper -> System.Collections.Generic.Dictionary<string!, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>!>!\n```\n\n----------------------------------------\n\nTITLE: Override Dispose Method (StructuredItemsViewController)\nDESCRIPTION: This code snippet presents an override of the Dispose method for StructuredItemsViewController2. This suggests a mechanism for releasing resources or performing cleanup when a structured items view is being disposed of in MAUI, within Microsoft.Maui.Controls.Handlers.Items2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2<TItemsView>.Dispose(bool disposing) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Property Mapper Implementation\nDESCRIPTION: Generic class for mapping and updating properties between virtual views and platform handlers in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]! chained) -> void\n```\n\n----------------------------------------\n\nTITLE: Opening Maps Async (Placemark) in MAUI\nDESCRIPTION: This extension method opens the device's map application to display the provided Placemark. It operates asynchronously. It is an extension method on Placemark. It takes a Placemark as a parameter and returns a Task representing the asynchronous operation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.PlacemarkExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Placemark placemark) -> System.Threading.Tasks.Task\"\n```\n\n----------------------------------------\n\nTITLE: Defining CornerRadius Structure\nDESCRIPTION: Structure definition for CornerRadius which represents border radius values for UI elements. Includes constructors and properties for accessing individual corner values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.CornerRadius.BottomLeft.get -> double\nMicrosoft.Maui.CornerRadius.BottomRight.get -> double\nMicrosoft.Maui.CornerRadius.CornerRadius() -> void\nMicrosoft.Maui.CornerRadius.CornerRadius(double topLeft, double topRight, double bottomLeft, double bottomRight) -> void\nMicrosoft.Maui.CornerRadius.CornerRadius(double uniformRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Connectivity API in C#\nDESCRIPTION: Declares static properties and events for the Connectivity class in the Microsoft.Maui.Networking namespace. Includes methods to check network access and connection profiles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!\nstatic Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!\nstatic Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!\nstatic Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Contact and Communication Operations in C#\nDESCRIPTION: Methods for accessing contacts, composing emails, dialing phone numbers, and sending SMS messages.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IContacts!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage! message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Static Readonly DisconnectPolicyProperty\nDESCRIPTION: This code snippet declares a static readonly field `DisconnectPolicyProperty` of type `BindableProperty`. This property is used to attach or associate a `HandlerDisconnectPolicy` to a `BindableObject`, enabling the framework to manage the lifecycle and disconnection behavior of handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.HandlerProperties.DisconnectPolicyProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Easing and Font Operations in MAUI (C#)\nDESCRIPTION: These static properties and operator overloads provide default instances and conversions for Easing and Font classes in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Easing.Default.get -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Easing.implicit operator Microsoft.Maui.Easing!(System.Func<double, double>! func) -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing LayoutHandler Class in C#\nDESCRIPTION: This snippet shows the implementation of the LayoutHandler class, which includes methods for adding, removing, and updating views in a layout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler\nMicrosoft.Maui.Handlers.LayoutHandler.Add(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Clear() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Insert(int index, Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler() -> void\nMicrosoft.Maui.Handlers.LayoutHandler.LayoutHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Remove(Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.Update(int index, Microsoft.Maui.IView! view) -> void\nMicrosoft.Maui.Handlers.LayoutHandler.UpdateZIndex(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Apple Sign-In Authentication in Microsoft.Maui\nDESCRIPTION: Facilitates Apple sign-in with options for scope inclusion like FullName. Implements interface methods to authenticate asynchronously using the AppleSignInAuthenticator.Options object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.IAppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for MAUI Project\nDESCRIPTION: This directive enables nullable reference types for the entire project. It helps developers catch potential null reference exceptions during compilation, improving code quality and reducing runtime errors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/WindowsForms/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Slider Control Extensions\nDESCRIPTION: Extension methods for Windows Slider control to implement MAUI Slider functionality, including value range, colors, and thumb properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateValue(this Microsoft.UI.Xaml.Controls.Slider! nativeSlider, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshView Mappers in C#\nDESCRIPTION: These static properties and methods define mappers and mapping functions for RefreshView components in MAUI, including content, refreshing state, refresh color, and background.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshViewBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Inserting Quadratic Curve to PathF in .NET MAUI\nDESCRIPTION: This method inserts a quadratic curve into the path at a specified index with control point.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.InsertQuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: MauiAppCompatActivity Lifecycle Overrides for Android\nDESCRIPTION: Method overrides for the MauiAppCompatActivity class that handle Android activity lifecycle events such as onCreate, onBackPressed, and permission handling. These methods bridge MAUI's cross-platform functionality with Android's native activity lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.MauiAppCompatActivity.DispatchTouchEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.MauiAppCompatActivity.OnActivityResult(int requestCode, Android.App.Result resultCode, Android.Content.Intent? data) -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnBackPressed() -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnConfigurationChanged(Android.Content.Res.Configuration! newConfig) -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnCreate(Android.OS.Bundle? savedInstanceState) -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnNewIntent(Android.Content.Intent? intent) -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnPostCreate(Android.OS.Bundle? savedInstanceState) -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnPostResume() -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnRequestPermissionsResult(int requestCode, string![]! permissions, Android.Content.PM.Permission[]! grantResults) -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnRestart() -> void\noverride Microsoft.Maui.MauiAppCompatActivity.OnRestoreInstanceState(Android.OS.Bundle! savedInstanceState) -> void\n```\n\n----------------------------------------\n\nTITLE: Reloading Web View\nDESCRIPTION: Reloads the current web view content. This action is performed without needing additional parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebView.Reload() -> void\n```\n\n----------------------------------------\n\nTITLE: StyleableElement Class Definition in .NET MAUI\nDESCRIPTION: Base class for styleable elements in MAUI that implements style and class list functionality. Provides properties for managing styles and style classes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement\nMicrosoft.Maui.Controls.StyleableElement.class.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.class.set -> void\nMicrosoft.Maui.Controls.StyleableElement.Style.set -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleableElement() -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Dispatchers in MAUI (C#)\nDESCRIPTION: These static methods and properties are part of the Dispatcher and DispatcherProvider classes, providing functionality to get and set the current dispatcher and dispatch actions asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.Dispatcher.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Action! action) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task!>! funcTask) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<System.Threading.Tasks.Task<T>!>! funcTask) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.DispatchAsync<T>(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.Func<T>! func) -> System.Threading.Tasks.Task<T>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.Current.get -> Microsoft.Maui.Dispatching.IDispatcherProvider!\nstatic Microsoft.Maui.Dispatching.DispatcherProvider.SetCurrent(Microsoft.Maui.Dispatching.IDispatcherProvider? provider) -> bool\n```\n\n----------------------------------------\n\nTITLE: Requesting Data Transfer via Microsoft MAUI ApplicationModel\nDESCRIPTION: This snippet enables sharing text or files using Microsoft MAUI's data transfer capabilities. The 'RequestAsync' method facilitates applications to interact for sharing content. It requires a share object and optional parameters 'text' and 'title'. Outputs a Task after the share request has been posted.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text, string! title) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions.RequestAsync(this Microsoft.Maui.ApplicationModel.DataTransfer.IShare! share, string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Control Handlers in MAUI\nDESCRIPTION: Handler implementations for standard UI controls like ProgressBar, RadioButton, RefreshView and ScrollView with their constructors and property mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler() -> void\nMicrosoft.Maui.Handlers.ProgressBarHandler.ProgressBarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler() -> void\nMicrosoft.Maui.Handlers.RadioButtonHandler.RadioButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Version Tracking API in MAUI\nDESCRIPTION: Static properties and methods for tracking application version information, including build history, version history, and first launch detection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.BuildHistory.get -> System.Collections.Generic.IEnumerable<string!>!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentBuild.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Image Rendering in Skia Canvas\nDESCRIPTION: Draws an image at specified coordinates and dimensions in the SkiaCanvas, supporting detailed placement and resizing for accurate graphical composition.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Magnetometer Sensor Access in .NET MAUI\nDESCRIPTION: Static methods for monitoring device magnetometer data in .NET MAUI applications. These methods allow checking support and monitoring status for magnetic field measurements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Default.get -> Microsoft.Maui.Devices.Sensors.IMagnetometer!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Orientation Sensor API in MAUI\nDESCRIPTION: Static methods for accessing device orientation sensor functionality, including monitoring device orientation, reading changes, and checking sensor status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Default.get -> Microsoft.Maui.Devices.Sensors.IOrientationSensor!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator !=(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator ==(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Mapping DatePicker Properties in C#\nDESCRIPTION: Static methods for mapping DatePicker properties in MAUI. Includes methods for mapping text color and defining property mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: FileBase Open Read Async in .NET MAUI\nDESCRIPTION: This method allows asynchronous reading of the file represented by the FileBase instance, returning a stream for reading the file contents.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.FileBase.OpenReadAsync() -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: Defining UI Element Handler Interfaces in C# for MAUI\nDESCRIPTION: This snippet defines interfaces for various UI element handlers such as IButtonHandler, IImageHandler, and ILabelHandler. These interfaces specify the contract for handling specific UI elements in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IButtonHandler\nMicrosoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nMicrosoft.Maui.Handlers.IButtonHandler.PlatformView.get -> UIKit.UIButton!\nMicrosoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!\n\nMicrosoft.Maui.Handlers.IImageHandler\nMicrosoft.Maui.Handlers.IImageHandler.OnWindowChanged() -> void\nMicrosoft.Maui.Handlers.IImageHandler.PlatformView.get -> UIKit.UIImageView!\nMicrosoft.Maui.Handlers.IImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nMicrosoft.Maui.Handlers.IImageHandler.VirtualView.get -> Microsoft.Maui.IImage!\n\nMicrosoft.Maui.Handlers.ILabelHandler\nMicrosoft.Maui.Handlers.ILabelHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiLabel!\nMicrosoft.Maui.Handlers.ILabelHandler.VirtualView.get -> Microsoft.Maui.ILabel!\n```\n\n----------------------------------------\n\nTITLE: Paint Transparency Property Implementations in C#\nDESCRIPTION: Override implementations of IsTransparent property for different paint types that determine whether a paint will have visual impact when applied.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.GradientPaint.IsTransparent.get -> bool\noverride Microsoft.Maui.Graphics.ImagePaint.IsTransparent.get -> bool\noverride Microsoft.Maui.Graphics.PatternPaint.IsTransparent.get -> bool\noverride Microsoft.Maui.Graphics.SolidPaint.IsTransparent.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Saving PDF Pages in .NET MAUI\nDESCRIPTION: This snippet defines methods for saving a PDF page to a stream, both synchronously and asynchronously, within the IPdfPage interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPdfPage.Save(System.IO.Stream stream) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPdfPage.SaveAsync(System.IO.Stream stream) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: PointF to Android Point Conversion Operators\nDESCRIPTION: Implicit operators to convert MAUI PointF to Android Point and PointF. These operators enable seamless conversion of floating-point coordinates between platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Android.Graphics.Point(Microsoft.Maui.Graphics.PointF size) -> Android.Graphics.Point\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Android.Graphics.PointF(Microsoft.Maui.Graphics.PointF size) -> Android.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.TryParse(string value, out Microsoft.Maui.Graphics.PointF pointF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaTextLayout with C#\nDESCRIPTION: This constructor initializes a new SkiaTextLayout instance. It requires a string value, a rectangle for layout bounds, and text attributes. Optional parameters include font and text flow settings, facilitating rich text handling in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Thickness Operators and Conversions\nDESCRIPTION: Operator overloads and implicit conversions for the Thickness struct. Supports arithmetic operations, equality comparisons, and conversions from numeric types and Size structs, along with a static Zero property for a zero-initialized Thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(double uniformSize) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator -(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator !=(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool\nstatic Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator ==(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool\nstatic Microsoft.Maui.Thickness.Zero -> Microsoft.Maui.Thickness\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow for .NET MAUI in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for building and testing .NET MAUI projects. It runs on Ubuntu and includes steps for setting up .NET, restoring dependencies, building the solution, and running tests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: .NET MAUI CI\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.0.x\n    - name: Install .NET MAUI\n      run: dotnet workload install maui\n    - name: Restore dependencies\n      run: dotnet restore\n    - name: Build\n      run: dotnet build --no-restore\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```\n\n----------------------------------------\n\nTITLE: Defining IAccelerometer Interface in C#\nDESCRIPTION: Defines the IAccelerometer interface with properties and methods for interacting with the device's accelerometer in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IAccelerometer\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.ShakeDetected -> System.EventHandler?\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Geolocation Classes in C#\nDESCRIPTION: Defines classes and enums related to geolocation functionality, including accuracy, error handling, and location data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Geocoding\nMicrosoft.Maui.Devices.Sensors.GeocodingExtensions\nMicrosoft.Maui.Devices.Sensors.Geolocation\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Best = 5 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Default = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.High = 4 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Low = 2 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Lowest = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Medium = 3 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationError\nMicrosoft.Maui.Devices.Sensors.GeolocationError.PositionUnavailable = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationError\nMicrosoft.Maui.Devices.Sensors.GeolocationError.Unauthorized = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationError\nMicrosoft.Maui.Devices.Sensors.GeolocationExtensions\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs.Error.get -> Microsoft.Maui.Devices.Sensors.GeolocationError\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs.GeolocationListeningFailedEventArgs(Microsoft.Maui.Devices.Sensors.GeolocationError geolocationError) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.DesiredAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest() -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan minimumTime) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.GeolocationListeningRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.get -> System.TimeSpan\nMicrosoft.Maui.Devices.Sensors.GeolocationListeningRequest.MinimumTime.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs\nMicrosoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs.GeolocationLocationChangedEventArgs(Microsoft.Maui.Devices.Sensors.Location! location) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.get -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.DesiredAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest() -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy, System.TimeSpan timeout) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.GeolocationRequest(Microsoft.Maui.Devices.Sensors.GeolocationAccuracy accuracy) -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.get -> bool\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.RequestFullAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.Timeout.get -> System.TimeSpan\nMicrosoft.Maui.Devices.Sensors.GeolocationRequest.Timeout.set -> void\n```\n\n----------------------------------------\n\nTITLE: Line Break Mode Configurations in .NET MAUI\nDESCRIPTION: Defines text wrapping and truncation strategies for handling text display across different layout contexts\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.LineBreakMode.NoWrap = 0\nMicrosoft.Maui.LineBreakMode.WordWrap = 1\nMicrosoft.Maui.LineBreakMode.CharacterWrap = 2\n```\n\n----------------------------------------\n\nTITLE: Map Navigation Handling in C#\nDESCRIPTION: This snippet set provides methods for map navigation and location launching using IMap and related classes. OpenAsync methods are responsible for opening map applications with specified locations or placemarks. The code is dependent on geolocation data such as latitude and longitude, or placemark objects. It includes TryOpenAsync methods to handle potential failures in opening the map.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Creating SkiaTextLayout in MAUI\nDESCRIPTION: The SkiaTextLayout constructor initializes a new instance with specified text, dimensions, and text attributes. It also supports optional parameters for text flow and font, making it flexible for various text rendering scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Getters Extensions in C#\nDESCRIPTION: Extensions for retrieving various text attributes like colors, font properties, and text decorations. These methods simplify accessing styling properties from text attribute collections.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBackgroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBold(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontName(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontSize(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, float? fontSize = null) -> float\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetForegroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetItalic(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetMarker(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> Microsoft.Maui.Graphics.Text.MarkerType\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetStrikethrough(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetSubscript(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetSuperscript(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetUnderline(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetUnorderedList(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\n```\n\n----------------------------------------\n\nTITLE: ActivityIndicatorHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the ActivityIndicatorHandler class, handling properties like Color and IsRunning.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing PropertyMapper and Window Overlay in C#\nDESCRIPTION: Virtual methods for PropertyMapper and WindowOverlay classes, handling property mapping and window overlay management in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void\nvirtual Microsoft.Maui.PropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!\nvirtual Microsoft.Maui.PropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?\nvirtual Microsoft.Maui.PropertyMapper.SetPropertyCore(string! key, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>! action) -> void\nvirtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!\nvirtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void\nvirtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool\nvirtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\nvirtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void\nvirtual Microsoft.Maui.WindowOverlay.Initialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Class in MAUI Maps\nDESCRIPTION: Defines the Circle class in the Microsoft.Maui.Controls.Maps namespace with properties for center, radius, and fill color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Circle\nMicrosoft.Maui.Controls.Maps.Circle.Center.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Circle.Center.set -> void\nMicrosoft.Maui.Controls.Maps.Circle.Circle() -> void\nMicrosoft.Maui.Controls.Maps.Circle.Fill.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.Controls.Maps.Circle.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.Circle.FillColor.set -> void\nMicrosoft.Maui.Controls.Maps.Circle.Radius.get -> Microsoft.Maui.Maps.Distance\nMicrosoft.Maui.Controls.Maps.Circle.Radius.set -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas Implementation Methods in .NET MAUI\nDESCRIPTION: Virtual methods for canvas implementations in Microsoft.Maui.Graphics. Includes state management methods for AbstractCanvas<TState>, disposal methods for BitmapExportContext and CanvasState, and property accessors for DisplayScale and PatternPhase.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\nvirtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void\nvirtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool\nvirtual Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.PatternPhase.get -> CoreGraphics.CGSize\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar Icon Property in C#\nDESCRIPTION: These code snippets represent accessing the Icon property of the TitleBar, allowing to get or set the icon displayed in the title bar. The image source is Microsoft.Maui.Controls.ImageSource.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Icon.get -> Microsoft.Maui.Controls.ImageSource!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Icon.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: MenuBarItem Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the MenuBarItemHandler class that map operations like adding, inserting, removing, and clearing items. These methods manage the lifecycle of menu items within a MenuBar control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Handler Extensions\nDESCRIPTION: Extension methods for IElementHandler interface providing service provider access and connection state checking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ElementHandlerExtensions.GetRequiredService<T>(this Microsoft.Maui.IElementHandler! handler, System.Type! type) -> T\nstatic Microsoft.Maui.ElementHandlerExtensions.GetService<T>(this Microsoft.Maui.IElementHandler! handler) -> T?\nstatic Microsoft.Maui.ElementHandlerExtensions.GetServiceProvider(this Microsoft.Maui.IElementHandler! handler) -> System.IServiceProvider!\nstatic Microsoft.Maui.ElementHandlerExtensions.IsConnected(this Microsoft.Maui.IElementHandler! handler) -> bool\n```\n\n----------------------------------------\n\nTITLE: Separating Path Segments in .NET MAUI\nDESCRIPTION: This snippet defines the Separate method in the PathF class, which separates a path into its constituent paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Separate() -> System.Collections.Generic.List<Microsoft.Maui.Graphics.PathF>\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API - Stroke Properties\nDESCRIPTION: Defines properties related to stroke rendering in AbstractCanvas<TState> including stroke size, limit, dash offset and limiting of stroke scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.StrokeSize.set -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLimit.set -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.StrokeDashOffset.set -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.LimitStrokeScaling.set -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.LimitStrokeScalingEnabled.get -> bool\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.AssignedStrokeLimit.get -> float\n```\n\n----------------------------------------\n\nTITLE: Building Samples with Workload\nDESCRIPTION: This dotnetcli snippet demonstrates how to build the samples using the workload instead of `<ProjectReference/>` by using the `-p:UseWorkload=true` parameter with the `dotnet build` command.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\n$ git clean -dxf src/Controls/samples/\n$ ./bin/dotnet/dotnet build ./eng/Microsoft.Maui.Samples.slnf -p:UseWorkload=true\n```\n\n----------------------------------------\n\nTITLE: Implementing TimeChangedEventArgs in C#\nDESCRIPTION: Defines the TimeChangedEventArgs class with properties and constructor for handling time change events in Microsoft.Maui.Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TimeChangedEventArgs\nMicrosoft.Maui.Controls.TimeChangedEventArgs.NewTime.get -> System.TimeSpan\nMicrosoft.Maui.Controls.TimeChangedEventArgs.OldTime.get -> System.TimeSpan\nMicrosoft.Maui.Controls.TimeChangedEventArgs.TimeChangedEventArgs(System.TimeSpan oldTime, System.TimeSpan newTime) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Extension Methods\nDESCRIPTION: Extension methods for manipulating text attributes like font size, color, and text decorations in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontSize(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, float value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetForegroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetItalic(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\n----------------------------------------\n\nTITLE: Rect and RectF Methods and Operators in C#\nDESCRIPTION: Static methods and operator overloads for Rect and RectF structures, including creation, intersection, union, and comparison operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Microsoft.Maui.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.FromLTRB(float left, float top, float right, float bottom) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Microsoft.Maui.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Abstract Graphics Canvas Methods in .NET MAUI\nDESCRIPTION: Declaration of abstract methods within an AbstractCanvas class to define graphics drawing capabilities such as filling shapes and setting canvas states. These methods must be implemented by derived classes to perform operations like filling rectangles and setting anti-aliasing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.StateRestored(TState state) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for NavigationView in .NET MAUI\nDESCRIPTION: This snippet details the IMenuFlyoutHandler interface providing the method to access platform-specific navigation views in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.INavigationViewHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.INavigationViewHandler.VirtualView.get -> Microsoft.Maui.IStackNavigationView!\n```\n\n----------------------------------------\n\nTITLE: ProgressBarHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the ProgressBarHandler class that map properties between the cross-platform IProgress interface and platform-specific progress bar implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawable Management in Skia Graphics View\nDESCRIPTION: Offers getter and setter for the Drawable property of SkiaGraphicsView, enabling the configuration of renderable items in Skia-based views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.Views.SkiaGraphicsView.Drawable.get -> Microsoft.Maui.Graphics.IDrawable\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.Views.SkiaGraphicsView.Drawable.set -> void\n```\n\n----------------------------------------\n\nTITLE: Browser Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for IBrowser interface providing alternative ways to open web content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.BrowserExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IBrowser! browser, System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Handler Property Mappings in C#\nDESCRIPTION: Static methods and mappers for handling ProgressBar control properties including Progress and ProgressColor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining UseMauiEmbeddedApp Extension Methods in C#\nDESCRIPTION: Declares two overloads of the UseMauiEmbeddedApp extension method for MauiAppBuilder. One takes an implementation factory, while the other is parameterless. Both methods are generic, accepting a type parameter TApp.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Mapping GraphicsViewHandler Properties in MAUI Framework\nDESCRIPTION: Static methods and properties for GraphicsViewHandler that map IGraphicsView properties to platform-specific implementations. These methods handle drawing operations, flow direction, and invalidation of the graphics view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Initialize TextAttributes from Dictionary\nDESCRIPTION: Creates a TextAttributes object using a provided dictionary mapping of TextAttributes with string values. Parameter 'dictionary' is required. This constructor does not return a value and depends on IDictionary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.TextAttributes.TextAttributes(System.Collections.Generic.IDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> dictionary) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual View for Picker Handler in C#\nDESCRIPTION: This property retrieves the virtual view associated with the picker handler, returning an instance of IPicker that represents the picker.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IPickerHandler.VirtualView.get -> Microsoft.Maui.IPicker!\n```\n\n----------------------------------------\n\nTITLE: Declaring ArrayExtension Properties in C#\nDESCRIPTION: This snippet declares properties for the ArrayExtension class, which is used to create arrays in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.ArrayExtension.Items.get -> System.Collections.IList\n~Microsoft.Maui.Controls.Xaml.ArrayExtension.ProvideValue(System.IServiceProvider serviceProvider) -> System.Array\n~Microsoft.Maui.Controls.Xaml.ArrayExtension.Type.get -> System.Type\n~Microsoft.Maui.Controls.Xaml.ArrayExtension.Type.set -> void\n```\n\n----------------------------------------\n\nTITLE: Handling Process Terminated Event in WebView C#\nDESCRIPTION: Defines an event handler for handling process termination in a WebView control using WebViewProcessTerminatedEventArgs. Essential for managing exceptions and errors when the web view process exits unexpectedly.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.WebView.ProcessTerminated -> System.EventHandler<Microsoft.Maui.Controls.WebViewProcessTerminatedEventArgs>\n```\n\n----------------------------------------\n\nTITLE: Handler Constructor for Label in C#\nDESCRIPTION: This snippet illustrates the constructor for the LabelHandler. It can optionally take a property mapper and a command mapper for configuring the handler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeTransitionMode enum in C#\nDESCRIPTION: Declares an enumeration for swipe transition modes, including Drag and Reveal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeTransitionMode\nMicrosoft.Maui.SwipeTransitionMode.Drag = 1 -> Microsoft.Maui.SwipeTransitionMode\nMicrosoft.Maui.SwipeTransitionMode.Reveal = 0 -> Microsoft.Maui.SwipeTransitionMode\n```\n\n----------------------------------------\n\nTITLE: Declaring AppThemeBindingExtension Properties in C#\nDESCRIPTION: This snippet declares properties for the AppThemeBindingExtension class, including Dark, Light, and Default themes, as well as a ProvideValue method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n```\n\n----------------------------------------\n\nTITLE: Defining Compass Classes in C#\nDESCRIPTION: Defines classes related to the compass sensor, including event arguments and data structures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Compass\nMicrosoft.Maui.Devices.Sensors.CompassChangedEventArgs\nMicrosoft.Maui.Devices.Sensors.CompassChangedEventArgs.CompassChangedEventArgs(Microsoft.Maui.Devices.Sensors.CompassData reading) -> void\nMicrosoft.Maui.Devices.Sensors.CompassChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.CompassData\nMicrosoft.Maui.Devices.Sensors.CompassData\nMicrosoft.Maui.Devices.Sensors.CompassData.CompassData() -> void\nMicrosoft.Maui.Devices.Sensors.CompassData.CompassData(double headingMagneticNorth) -> void\nMicrosoft.Maui.Devices.Sensors.CompassData.Equals(Microsoft.Maui.Devices.Sensors.CompassData other) -> bool\nMicrosoft.Maui.Devices.Sensors.CompassData.HeadingMagneticNorth.get -> double\nMicrosoft.Maui.Devices.Sensors.CompassExtensions\n```\n\n----------------------------------------\n\nTITLE: MAUI Keyboard Static Properties and Methods\nDESCRIPTION: Static properties and methods for creating and accessing predefined keyboard types in MAUI. These provide standard keyboard configurations for different input scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Keyboard.Chat.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Create(Microsoft.Maui.KeyboardFlags flags) -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Default.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Email.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Numeric.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Plain.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Telephone.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Text.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Url.get -> Microsoft.Maui.Keyboard!\n```\n\n----------------------------------------\n\nTITLE: Element Handler Extension Methods\nDESCRIPTION: Static extension methods for IElementHandler interface providing service provider functionality and connection status checking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ElementHandlerExtensions.GetRequiredService<T>(this Microsoft.Maui.IElementHandler! handler, System.Type! type) -> T\nstatic Microsoft.Maui.ElementHandlerExtensions.GetService<T>(this Microsoft.Maui.IElementHandler! handler) -> T?\nstatic Microsoft.Maui.ElementHandlerExtensions.IsConnected(this Microsoft.Maui.IElementHandler! handler) -> bool\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Streams with SkiaImage\nDESCRIPTION: Static method to create an IImage from a stream using Skia rendering. The method accepts an optional format hint parameter that defaults to PNG format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SkiaImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Defining Pin BindableProperties in C#\nDESCRIPTION: Static readonly property definitions for Pin control including Address, Label, Location and Type properties for map pin customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Setters Extensions in C#\nDESCRIPTION: Extensions for setting various text attributes in a Dictionary-based attribute collection. These methods provide a consistent way to modify styling properties for text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBackgroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBold(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontName(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontSize(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, float value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetForegroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetItalic(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetMarker(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, Microsoft.Maui.Graphics.Text.MarkerType value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetStrikethrough(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetSubscript(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetSuperscript(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetUnderline(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetUnorderedList(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Canvas State Management in C#\nDESCRIPTION: Platform-specific classes for canvas state management. PlatformCanvasState provides properties for tracking canvas state including shadow effects, while PlatformCanvasStateService offers state management services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.PlatformCanvasState() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.Shadowed.get -> bool\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.Shadowed.set -> void\n\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasStateService\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasStateService.PlatformCanvasStateService() -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Gradient Paint in .NET MAUI\nDESCRIPTION: These constructors create a LinearGradientPaint instance using specified gradient parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.GradientPaint gradientPaint) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops, Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops) -> void\n```\n\n----------------------------------------\n\nTITLE: Layout Children Override in ContentPage C#\nDESCRIPTION: This snippet overrides the LayoutChildren method in a ContentPage, allowing custom arrangements of child elements within specified positional and dimensional boundaries in a given page layout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.ContentPage.LayoutChildren(double x, double y, double width, double height) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SelectLayout for ItemsViewHandler2 in C#\nDESCRIPTION: Declares an abstract method SelectLayout for ItemsViewHandler2 class, returning a UICollectionViewLayout object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~abstract Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.SelectLayout() -> UIKit.UICollectionViewLayout\n```\n\n----------------------------------------\n\nTITLE: GyroscopeData Class Implementation in C#\nDESCRIPTION: Class representing gyroscope sensor data in .NET MAUI. Contains angular velocity vector data with constructors accepting double or float coordinates and an equality comparison method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.AngularVelocity.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.Equals(Microsoft.Maui.Devices.Sensors.GyroscopeData other) -> bool\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData() -> void\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData(float x, float y, float z) -> void\n```\n\n----------------------------------------\n\nTITLE: Size Operators and Conversions in Microsoft.Maui.Graphics\nDESCRIPTION: Static operators and conversion methods for the Size struct in Microsoft.Maui.Graphics. Includes arithmetic operations, equality comparison, and conversion to and from platform-specific types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_170\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Size.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.Size size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: PropertyMapper UpdatePropertyCore Method in C#\nDESCRIPTION: Virtual method that updates a property on a handler based on a key. It processes the property update between a virtual view and its handler implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_189\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void\n```\n\n----------------------------------------\n\nTITLE: ItemsView Handler Override Definitions for iOS\nDESCRIPTION: Method signatures for overriding ItemsViewController and ItemsViewHandler base functionality, including cell management, section handling, and platform view lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.GetCell(UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath) -> UIKit.UICollectionViewCell\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.GetItemsCount(UIKit.UICollectionView collectionView, nint section) -> nint\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.NumberOfSections(UIKit.UICollectionView collectionView) -> nint\n```\n\n----------------------------------------\n\nTITLE: DrawRectangle Extensions for ICanvas in .NET MAUI Graphics\nDESCRIPTION: These static extension methods `DrawRectangle` extend the `ICanvas` interface in the Microsoft.Maui.Graphics library. They allow drawing a rectangle defined by a `Rect` or `RectF` object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Saving Pictures to Stream in .NET MAUI\nDESCRIPTION: This snippet defines Save and SaveAsync methods in the IPictureWriter interface for saving pictures either synchronously or asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPictureWriter.Save(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPictureWriter.SaveAsync(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: AppThemeBinding Extension Properties in MAUI XAML\nDESCRIPTION: Property definitions for AppThemeBindingExtension class that handles theme-specific value bindings in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.set -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Font Descriptor Implementation\nDESCRIPTION: Font descriptor class for MAUI that encapsulates font metadata including filename, alias and assembly information. Used for font registration and management in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.FontDescriptor\nMicrosoft.Maui.Hosting.FontDescriptor.Alias.get -> string?\nMicrosoft.Maui.Hosting.FontDescriptor.Assembly.get -> System.Reflection.Assembly?\nMicrosoft.Maui.Hosting.FontDescriptor.Filename.get -> string!\nMicrosoft.Maui.Hosting.FontDescriptor.FontDescriptor(string! filename, string? alias, System.Reflection.Assembly? assembly) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IAppInfo Interface in C#\nDESCRIPTION: Defines the IAppInfo interface with properties and methods for retrieving application information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo\nMicrosoft.Maui.ApplicationModel.IAppInfo.BuildString.get -> string!\nMicrosoft.Maui.ApplicationModel.IAppInfo.Name.get -> string!\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackageName.get -> string!\nMicrosoft.Maui.ApplicationModel.IAppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\nMicrosoft.Maui.ApplicationModel.IAppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nMicrosoft.Maui.ApplicationModel.IAppInfo.ShowSettingsUI() -> void\nMicrosoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version!\nMicrosoft.Maui.ApplicationModel.IAppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Managing Handlers in MAUI Applications\nDESCRIPTION: Extension methods for adding and managing handlers in MAUI applications. These methods provide flexibility in registering handlers for different view types and scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Func<System.IServiceProvider!, Microsoft.Maui.IElementHandler!>! handlerImplementationFactory) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\n```\n\n----------------------------------------\n\nTITLE: Mapping ImageButtonHandler Properties in MAUI Framework\nDESCRIPTION: Static methods and properties for ImageButtonHandler that map IImageButton properties to platform implementations. These methods handle corner radius, padding, stroke color, and stroke thickness for image buttons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.ImageMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImageButton!, Microsoft.Maui.Handlers.IImageButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: FlyoutViewHandler Mapping in MAUI (C#)\nDESCRIPTION: Static properties that define command and property mappers for FlyoutViewHandler, connecting IFlyoutView interface to its handler implementation for managing flyout-based navigation views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing File Handling Classes in C#\nDESCRIPTION: Defines classes for file handling in MAUI applications. Includes FileBase, FilePicker, and FileResult classes for managing file operations and picking files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.FileBase\nMicrosoft.Maui.Storage.FileBase.ContentType.get -> string!\nMicrosoft.Maui.Storage.FileBase.ContentType.set -> void\nMicrosoft.Maui.Storage.FileBase.FileBase(Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.Storage.FileBase.FileName.get -> string!\nMicrosoft.Maui.Storage.FileBase.FileName.set -> void\nMicrosoft.Maui.Storage.FileBase.FullPath.get -> string!\nMicrosoft.Maui.Storage.FileBase.OpenReadAsync() -> System.Threading.Tasks.Task<System.IO.Stream!>!\n\nMicrosoft.Maui.Storage.FilePicker\nMicrosoft.Maui.Storage.FilePickerFileType\nMicrosoft.Maui.Storage.FilePickerFileType.FilePickerFileType() -> void\nMicrosoft.Maui.Storage.FilePickerFileType.FilePickerFileType(System.Collections.Generic.IDictionary<Microsoft.Maui.Devices.DevicePlatform, System.Collections.Generic.IEnumerable<string!>!>! fileTypes) -> void\nMicrosoft.Maui.Storage.FilePickerFileType.Value.get -> System.Collections.Generic.IEnumerable<string!>!\n\nMicrosoft.Maui.Storage.FileResult\nMicrosoft.Maui.Storage.FileResult.FileResult(Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.Storage.FileResult.FileResult(string! fullPath, string! contentType) -> void\nMicrosoft.Maui.Storage.FileResult.FileResult(string! fullPath) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Blur on Canvas - SkiaSharp - C#\nDESCRIPTION: This method sets the blur effect on the canvas using a specified radius. It allows for creating visually appealing graphics by adding soft edges to drawn elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvas.SetBlur(float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Class Method Overrides (C#)\nDESCRIPTION: Method overrides for various MAUI classes that implement common object behaviors like equality, hashing, and string conversion. Also includes specialized image loading and visual diagnostics overlay functionality that extend base class implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.SizeRequest.GetHashCode() -> int\noverride Microsoft.Maui.SizeRequest.ToString() -> string!\noverride Microsoft.Maui.StreamImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\noverride Microsoft.Maui.Thickness.Equals(object? obj) -> bool\noverride Microsoft.Maui.Thickness.GetHashCode() -> int\noverride Microsoft.Maui.UriImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\noverride Microsoft.Maui.VisualDiagnosticsOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.Deinitialize() -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElements() -> void\noverride sealed Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Command Mapper Extensions\nDESCRIPTION: Extension methods for command mapping functionality, allowing modification and extension of command behaviors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CommandMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?>! method) -> void\nstatic Microsoft.Maui.CommandMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.CommandMapper<TVirtualView, TViewHandler>! commandMapper, string! key, System.Action<TViewHandler, TVirtualView, object?, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!, object?>?>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IBrowser in MAUI\nDESCRIPTION: This snippet introduces the IBrowser interface that defines methods for opening a URI with specified launch options, facilitating web interactions within MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IBrowser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Creating Share File Requests in .NET MAUI\nDESCRIPTION: This constructor initializes ShareFileRequest objects needed for sharing files, taking a title and a ShareFile or FileBase as parameters. It supports multiple variants for flexibility.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\n----------------------------------------\n\nTITLE: Window Handler Initialization in .NET MAUI\nDESCRIPTION: This code snippet is part of the initialization process for a WindowHandler in .NET MAUI, specifying optional property and command mappers. The WindowHandler manages the lifecycle and properties of a window in the application. It requires the Microsoft.Maui.IPropertyMapper and Microsoft.Maui.CommandMapper interfaces to configure window properties and commands.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.WindowHandler.WindowHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\n```\n\n----------------------------------------\n\nTITLE: BlendMode Enumeration in C#\nDESCRIPTION: Defines the BlendMode enumeration values representing different blend modes for compositing operations in graphics rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode.Normal = 0 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Multiply = 1 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Screen = 2 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Overlay = 3 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Darken = 4 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Lighten = 5 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.ColorDodge = 6 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.ColorBurn = 7 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SoftLight = 8 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.HardLight = 9 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Difference = 10 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Exclusion = 11 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Hue = 12 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Saturation = 13 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Color = 14 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Luminosity = 15 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Clear = 16 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Copy = 17 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceIn = 18 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceOut = 19 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceAtop = 20 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationOver = 21 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationIn = 22 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationOut = 23 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.DestinationAtop = 24 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Xor = 25 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.PlusDarker = 26 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.PlusLighter = 27 -> Microsoft.Maui.Graphics.BlendMode\n```\n\n----------------------------------------\n\nTITLE: Device Sensor Method Overrides in .NET MAUI\nDESCRIPTION: Override method signatures for various device sensors including Accelerometer, Barometer, Compass, Gyroscope, and Magnetometer. These methods handle basic object operations like Equals, GetHashCode, and ToString.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Devices.Sensors.AccelerometerData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.AccelerometerData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.AccelerometerData.ToString() -> string!\n```\n\n----------------------------------------\n\nTITLE: Extending ICanvas with DrawCircle Method in C#\nDESCRIPTION: This extension method adds the ability to draw a circle on an ICanvas object using center coordinates and radius. It provides overloads for different parameter types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Point center, double radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PointF center, float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: Override Methods for Graphics Primitive Classes in Microsoft.Maui.Graphics\nDESCRIPTION: Override method signatures for primitive graphic classes including Point, PointF, Rect, RectF, Size, and SizeF. These methods primarily provide equality comparison and string representation functionality for the fundamental shape and position classes in MAUI graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Point.Equals(object o) -> bool\n~override Microsoft.Maui.Graphics.Point.ToString() -> string\n~override Microsoft.Maui.Graphics.PointF.Equals(object o) -> bool\n~override Microsoft.Maui.Graphics.PointF.ToString() -> string\n~override Microsoft.Maui.Graphics.Rect.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Rect.ToString() -> string\n~override Microsoft.Maui.Graphics.RectF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.RectF.ToString() -> string\n~override Microsoft.Maui.Graphics.Size.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Size.ToString() -> string\n~override Microsoft.Maui.Graphics.SizeF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.SizeF.ToString() -> string\n~override Microsoft.Maui.Graphics.SolidPaint.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: LayoutAlignment Enum Definition in C#\nDESCRIPTION: LayoutAlignment defines alignment options for positioning elements within a layout. It includes Fill, Start, Center, and End options to control how elements align within their containers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.Center = 2 -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.End = 3 -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.Fill = 0 -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.Start = 1 -> Microsoft.Maui.Primitives.LayoutAlignment\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions Flags getter in MAUI\nDESCRIPTION: This property getter retrieves the flags for browser launch options. The flags define how the browser is launched (e.g., adjacent, form sheet). This is a read/write property of type BrowserLaunchFlags.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags\"\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for ContentView in .NET MAUI\nDESCRIPTION: This snippet configures the IContentViewHandler interface, detailing the getters for platform-specific views and virtual views for content views in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IContentViewHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentViewGroup!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IContentViewHandler.VirtualView.get -> Microsoft.Maui.IContentView!\n```\n\n----------------------------------------\n\nTITLE: Converting IFont to Platform Font in MAUI\nDESCRIPTION: This method converts an IFont to a platform-specific UIFont. It supports an optional font size parameter for conversion. The result is a UIKit.UIFont.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.FontExtensions.ToPlatformFont(this Microsoft.Maui.Graphics.IFont font, System.Runtime.InteropServices.NFloat? size = null) -> UIKit.UIFont\n```\n\n----------------------------------------\n\nTITLE: Defining WindowOverlay class in C#\nDESCRIPTION: Declares a class for window overlays, including properties for density and disabling UI touch event passthrough.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.WindowOverlay\nMicrosoft.Maui.WindowOverlay.Density.get -> float\nMicrosoft.Maui.WindowOverlay.DisableUITouchEventPassthrough.get -> bool\nMicrosoft.Maui.WindowOverlay.DisableUITouchEventPassthrough.set -> void\n```\n\n----------------------------------------\n\nTITLE: View Handler Mappings in MAUI\nDESCRIPTION: Comprehensive set of static methods for mapping core View properties including layout, transformation, visibility and interaction properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Fetching Image Source Asynchronously in MAUI\nDESCRIPTION: This snippet defines an abstract method to fetch an image source asynchronously. It requires an image source object and supports optional parameters for scale and cancellation, returning a task that resolves with image source results.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.ImageSourceService.GetImageSourceAsync(Microsoft.Maui.IImageSource! imageSource, float scale = 1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.UI.Xaml.Media.ImageSource!>?>!\n```\n\n----------------------------------------\n\nTITLE: Platform Canvas State Management API Reference (C#)\nDESCRIPTION: Classes for managing canvas state in platform-specific implementations including PlatformCanvasState and PlatformCanvasStateService. These components support state management for drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_161\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.PlatformCanvasState() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.Shadowed.get -> bool\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasState.Shadowed.set -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasStateService\nMicrosoft.Maui.Graphics.Platform.PlatformCanvasStateService.PlatformCanvasStateService() -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Line in W2DCanvas\nDESCRIPTION: This snippet draws a line connecting two points in the W2DCanvas. It takes coordinates for both endpoints and does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformDrawLine(float x1, float y1, float x2, float y2) -> void\n```\n\n----------------------------------------\n\nTITLE: Visualizing View Measurement Handler Flow in MAUI\nDESCRIPTION: Mermaid sequence diagram demonstrating the measurement process flow between View, Handler and Native View components when measuring a specific view instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tparticipant V as View\n\tparticipant H as Handler\n\tparticipant NV as Native View\n\tNote over V: Adjust for margins\n\tV->>H: GetDesiredSize\n\tNote over H: Convert to native \n\tH->>NV: Measure\n\tNV->>H: Size\n\tNote over H: Convert to x-plat\n\tH->>V: Size\n\tNote over V: Adjust for margins, record DesiredSize\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Image in .NET MAUI\nDESCRIPTION: This snippet outlines the getters for platform and virtual views for image components using the IImageHandler interface, facilitating image handling in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IImageHandler.PlatformView.get -> Android.Widget.ImageView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IImageHandler.VirtualView.get -> Microsoft.Maui.IImage!\n```\n\n----------------------------------------\n\nTITLE: Get DateTimeOffset Value from MAUI Preferences\nDESCRIPTION: Static methods to retrieve a DateTimeOffset value from Preferences storage. Provides overloads with and without a shared storage name parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\n```\n\n----------------------------------------\n\nTITLE: Overriding IndicatorView, Label, and Layout Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for IndicatorViewHandler, LabelHandler, and LayoutHandler classes that manage platform view creation, handler connection/disconnection, and container needs for basic UI controls in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPageControl!\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void\noverride Microsoft.Maui.Handlers.LabelHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiLabel!\noverride Microsoft.Maui.Handlers.LabelHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.LayoutHandler.CreatePlatformView() -> Microsoft.Maui.Platform.LayoutView!\noverride Microsoft.Maui.Handlers.LayoutHandler.DisconnectHandler(Microsoft.Maui.Platform.LayoutView! platformView) -> void\noverride Microsoft.Maui.Handlers.LayoutHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining PictureCanvas Class in C#\nDESCRIPTION: Defines the PictureCanvas class with methods for drawing and transforming graphics in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas\nMicrosoft.Maui.Graphics.PictureCanvas.Alpha.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Antialias.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.BlendMode.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ClipRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DisplayScale.get -> float\nMicrosoft.Maui.Graphics.PictureCanvas.DisplayScale.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Dispose() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawEllipse(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas State Management API Reference (C#)\nDESCRIPTION: Method signatures for managing the state of the PictureCanvas, including property setters, state save/restore operations, and transformation methods for scaling, rotation, and translation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_156\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.FontSize.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.MiterLimit.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.PictureCanvas(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ResetState() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.RestoreState() -> bool\nMicrosoft.Maui.Graphics.PictureCanvas.SaveState() -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeDashOffset.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeLineCap.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeLineJoin.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeSize.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.SubtractFromClip(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Sensor Data Methods in C#\nDESCRIPTION: This snippet contains method overrides for various sensor data classes in MAUI, including barometer, compass, gyroscope, magnetometer, and orientation sensor. These methods provide custom implementations for equality comparisons, hash code generation, and string representations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Devices.Sensors.BarometerData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.BarometerData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.BarometerData.ToString() -> string!\noverride Microsoft.Maui.Devices.Sensors.CompassData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.CompassData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.CompassData.ToString() -> string!\noverride Microsoft.Maui.Devices.Sensors.GeolocationRequest.ToString() -> string!\noverride Microsoft.Maui.Devices.Sensors.GyroscopeData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.GyroscopeData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.GyroscopeData.ToString() -> string!\noverride Microsoft.Maui.Devices.Sensors.Location.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.MagnetometerData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.MagnetometerData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.MagnetometerData.ToString() -> string!\noverride Microsoft.Maui.Devices.Sensors.OrientationSensorData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.OrientationSensorData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.OrientationSensorData.ToString() -> string!\n```\n\n----------------------------------------\n\nTITLE: Convert CGPath to PathF in MAUI\nDESCRIPTION: This method converts a CoreGraphics CGPath back to a PathF object, making it usable within the MAUI graphics framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsPathF(this CoreGraphics.CGPath target) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Phone Dialer Functionality in .NET MAUI\nDESCRIPTION: Static methods to access and use the device's phone dialer. These methods allow checking if phone dialing is supported and opening the phone dialer with a specified number.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.IsSupported.get -> bool\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void\n```\n\n----------------------------------------\n\nTITLE: Email Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for IEmail interface providing alternative ways to compose emails.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email, string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Getting Pattern Bitmap - SkiaSharp - C#\nDESCRIPTION: This static extension method retrieves a bitmap from the provided PatternPaint, scaling it according to the specified x and y scale factors. The method also accepts the current figure context as a parameter, allowing for dynamic bitmap generation based on canvas state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scaleX, float scaleY, object currentFigure) -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: MAUI Color Constants\nDESCRIPTION: Predefined color constants for use in MAUI Graphics applications, including standard web colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.AliceBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.AntiqueWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Aqua -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Defining IScrollView Interface in C#\nDESCRIPTION: Defines the IScrollView interface with properties and methods for managing a scrollable view in MAUI. It includes properties for content size, scroll offsets, and scroll bar visibility, as well as methods for requesting scrolling and handling scroll completion.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IScrollView\nMicrosoft.Maui.IScrollView.ContentSize.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IScrollView.HorizontalOffset.get -> double\nMicrosoft.Maui.IScrollView.HorizontalOffset.set -> void\nMicrosoft.Maui.IScrollView.HorizontalScrollBarVisibility.get -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.IScrollView.Orientation.get -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.IScrollView.RequestScrollTo(double horizontalOffset, double verticalOffset, bool instant) -> void\nMicrosoft.Maui.IScrollView.ScrollFinished() -> void\nMicrosoft.Maui.IScrollView.VerticalOffset.get -> double\nMicrosoft.Maui.IScrollView.VerticalOffset.set -> void\nMicrosoft.Maui.IScrollView.VerticalScrollBarVisibility.get -> Microsoft.Maui.ScrollBarVisibility\n```\n\n----------------------------------------\n\nTITLE: Semantic Extensions and Size Operations in MAUI\nDESCRIPTION: Extensions for semantic accessibility features and operator overloads for SizeRequest struct in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SemanticExtensions.SetSemanticFocus(this Microsoft.Maui.IView! element) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.SizeRequest size) -> Microsoft.Maui.Graphics.Size\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SizeRequest.implicit operator Microsoft.Maui.SizeRequest(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.SizeRequest\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SizeRequest.operator !=(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SizeRequest.operator ==(Microsoft.Maui.SizeRequest left, Microsoft.Maui.SizeRequest right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Stepper Control Extensions for iOS in .NET MAUI\nDESCRIPTION: Extension methods for configuring UIStepper controls based on MAUI IStepper properties. These methods handle increment values, minimum/maximum bounds, and current values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_186\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateIncrement(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateMaximum(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateMinimum(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Platform.StepperExtensions.UpdateValue(this UIKit.UIStepper! platformStepper, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Line Join in W2DCanvasState\nDESCRIPTION: This code sets the stroke line join property in W2DCanvasState, which determines how corners are rendered when two lines meet. This method does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DCanvasState.StrokeLineJoin.set -> void\n```\n\n----------------------------------------\n\nTITLE: Application Handler Methods in MAUI\nDESCRIPTION: Static methods for ApplicationHandler that map application lifecycle events like opening/closing windows and termination between the MAUI application abstraction and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Pin Class in C# for MAUI Maps\nDESCRIPTION: This snippet defines the Pin class in the Microsoft.Maui.Controls.Maps namespace. It includes properties for Address, Label, Location, and Type, as well as methods for handling pin clicks and info window interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Pin\nMicrosoft.Maui.Controls.Maps.Pin.Address.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Address.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.InfoWindowClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.PinClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Pin.Label.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Label.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Pin.Location.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.MarkerClicked -> System.EventHandler<Microsoft.Maui.Controls.Maps.PinClickedEventArgs!>?\nMicrosoft.Maui.Controls.Maps.Pin.MarkerId.get -> object?\nMicrosoft.Maui.Controls.Maps.Pin.MarkerId.set -> void\nMicrosoft.Maui.Controls.Maps.Pin.Pin() -> void\nMicrosoft.Maui.Controls.Maps.Pin.SendInfoWindowClick() -> bool\nMicrosoft.Maui.Controls.Maps.Pin.SendMarkerClick() -> bool\nMicrosoft.Maui.Controls.Maps.Pin.Type.get -> Microsoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.Pin.Type.set -> void\n```\n\n----------------------------------------\n\nTITLE: Stepper Handler Management in .NET MAUI for Android\nDESCRIPTION: Static methods for creating and updating stepper buttons in the Android platform implementation. These methods manage button creation and property updates based on stepper control state changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_170\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StepperHandlerManager.CreateStepperButtons<TButton>(Microsoft.Maui.Platform.IAndroidStepperHandler! handler, out TButton? downButton, out TButton? upButton) -> void\nstatic Microsoft.Maui.Platform.StepperHandlerManager.UpdateButtons<TButton>(Microsoft.Maui.IStepper! stepper, TButton? downButton, TButton? upButton, System.ComponentModel.PropertyChangedEventArgs? e = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Registering Android Lifecycle Events in .NET MAUI\nDESCRIPTION: These extension methods allow developers to register callbacks for various Android lifecycle events in a .NET MAUI application. They extend the IAndroidLifecycleBuilder interface to provide a fluent API for event registration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.AndroidLifecycleBuilderExtensions.OnCreate(this Microsoft.Maui.LifecycleEvents.IAndroidLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.AndroidLifecycle.OnCreate! del) -> Microsoft.Maui.LifecycleEvents.IAndroidLifecycleBuilder!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.AndroidLifecycleBuilderExtensions.OnDestroy(this Microsoft.Maui.LifecycleEvents.IAndroidLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.AndroidLifecycle.OnDestroy! del) -> Microsoft.Maui.LifecycleEvents.IAndroidLifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Preferences API Definitions in .NET MAUI\nDESCRIPTION: Static API definitions for managing application preferences in MAUI applications. Includes methods for storing and retrieving various data types with optional shared name parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\n```\n\n----------------------------------------\n\nTITLE: Point to Android Point Conversion Operators\nDESCRIPTION: Implicit operators to convert MAUI Point to Android Point and PointF. These operators enable seamless conversion of coordinate points between platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.implicit operator Android.Graphics.Point(Microsoft.Maui.Graphics.Point size) -> Android.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.implicit operator Android.Graphics.PointF(Microsoft.Maui.Graphics.Point size) -> Android.Graphics.PointF\nstatic Microsoft.Maui.Graphics.Point.TryParse(string value, out Microsoft.Maui.Graphics.Point point) -> bool\n```\n\n----------------------------------------\n\nTITLE: Image Processing Extensions in .NET MAUI Graphics\nDESCRIPTION: Extension methods for the IImage interface to convert images to different formats (Base64, byte arrays, streams) and create Paint objects from images. Includes methods for image loading from byte arrays and setting images as fills for canvas operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBase64(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> string\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBytes(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> byte[]\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsPaint(this Microsoft.Maui.Graphics.IImage target) -> Microsoft.Maui.Graphics.Paint\nstatic Microsoft.Maui.Graphics.ImageExtensions.AsStream(this Microsoft.Maui.Graphics.IImage target, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.IO.Stream\nstatic Microsoft.Maui.Graphics.ImageExtensions.SetFillImage(this Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.IImage image) -> void\nstatic Microsoft.Maui.Graphics.ImageLoadingServiceExtensions.FromBytes(this Microsoft.Maui.Graphics.IImageLoadingService target, byte[] bytes) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Defining PathAspect Enumeration\nDESCRIPTION: Enumeration specifying aspect ratio behavior for paths and images\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PathAspect.None = 0\nMicrosoft.Maui.PathAspect.Center = 1\nMicrosoft.Maui.PathAspect.Stretch = 2\nMicrosoft.Maui.PathAspect.AspectFit = 3\nMicrosoft.Maui.PathAspect.AspectFill = 4\n```\n\n----------------------------------------\n\nTITLE: Testing Branch Against Project in .NET MAUI\nDESCRIPTION: Opens Visual Studio instance using local pack to test branch changes against a specific solution\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool restore\ndotnet cake --sln=\"<download_directory>\\MauiApp2\\MauiApp2.sln\" --target=VS\n```\n\n----------------------------------------\n\nTITLE: Window Overlay Tapped Event\nDESCRIPTION: Event handler for when the overlay gets tapped, enabling the application to react to user gestures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.Tapped -> System.EventHandler<Microsoft.Maui.WindowOverlayTappedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: EmailMessage Attachments getter in MAUI\nDESCRIPTION: This property getter retrieves the list of attachments for an email message.  It returns a List of EmailAttachment objects, which can be null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Attachments.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.Communication.EmailAttachment!>?\"\n```\n\n----------------------------------------\n\nTITLE: Scale UIImage to CGSize in MAUI\nDESCRIPTION: This method scales an image to specified CGSize dimensions with an option to dispose of the original UIImage.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIImageExtensions.ScaleImage(this UIKit.UIImage target, CoreGraphics.CGSize size, bool disposeOriginal = false) -> UIKit.UIImage\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIImageExtensions.ScaleImage(this UIKit.UIImage target, float maxWidth, float maxHeight, bool disposeOriginal = false) -> UIKit.UIImage\n```\n\n----------------------------------------\n\nTITLE: MAUI Contact Model Class Definition\nDESCRIPTION: Contact model class for handling contact information including name components, phone numbers and email addresses\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nContact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, IEnumerable<ContactPhone> phones, IEnumerable<ContactEmail> email, string displayName = null);\nstring DisplayName { get; }\nList<ContactEmail> Emails { get; set; }\nstring FamilyName { get; set; }\nstring GivenName { get; set; }\nstring Id { get; set; }\nstring MiddleName { get; set; }\nstring NamePrefix { get; set; }\nstring NameSuffix { get; set; }\nList<ContactPhone> Phones { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Defining FlexLayoutManager Class in C#\nDESCRIPTION: This snippet defines the FlexLayoutManager class for managing flex layouts in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexLayoutManager\nMicrosoft.Maui.Layouts.FlexLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.Layouts.FlexLayoutManager.FlexLayoutManager(Microsoft.Maui.IFlexLayout! flexLayout) -> void\nMicrosoft.Maui.Layouts.FlexLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Defining IAppActions in MAUI\nDESCRIPTION: This snippet outlines the IAppActions interface that provides methods for handling app actions, including activation events and querying available actions asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.AppActionActivated -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.IsSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Phone Dialer Functionality in .NET MAUI\nDESCRIPTION: Methods for making phone calls using the device's phone dialer.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.IsSupported.get -> bool\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Transformation Constants in C#\nDESCRIPTION: Constants in PictureCommand for transformation operations. These commands handle various transformations including translation, rotation, scaling, and matrix concatenation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.Scale = 60 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Translate = 61 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Rotate = 62 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RotateAtPoint = 63 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ConcatenateTransform = 64 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Defining XamlFilePathAttribute in Microsoft.Maui.Controls.Xaml\nDESCRIPTION: Defines the XamlFilePathAttribute class for specifying XAML file paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.XamlFilePathAttribute.FilePath.get -> string\n~Microsoft.Maui.Controls.Xaml.XamlFilePathAttribute.XamlFilePathAttribute(string filePath = \"\") -> void\n```\n\n----------------------------------------\n\nTITLE: MapSpan Inequality Operator\nDESCRIPTION: Static inequality operator that compares two MapSpan instances. Returns true if the MapSpan instances are not equal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Mappers and Factory Properties\nDESCRIPTION: Static properties for View command and property mappers in ViewHandler class, as well as PlatformViewFactory property for the generic ViewHandler. These mappers define how MAUI view properties map to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void\n```\n\n----------------------------------------\n\nTITLE: Inserting Quadratic Segment in PathF in .NET MAUI\nDESCRIPTION: This method creates a quadratic curve segment between a control point and an endpoint.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.QuadTo(float cx, float cy, float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.QuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Background Color from Text Attributes in MAUI\nDESCRIPTION: This method retrieves the background color attribute from given text attributes, returning it as a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBackgroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\n```\n\n----------------------------------------\n\nTITLE: Mapping SwipeItemMenuItem Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of the SwipeItemMenuItem control to its handler in MAUI. These methods handle updating the background, text, font, and visibility properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Version Tracking Implementation in MAUI\nDESCRIPTION: Static methods and properties for tracking application version and build information, including first launch detection and version history.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentVersion.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchEver.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Track() -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Points from PathF\nDESCRIPTION: This snippet defines the Points property in the PathF class, returning a collection of points for path operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Points.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PointF>\n```\n\n----------------------------------------\n\nTITLE: Toolbar and View Mapping Methods in MAUI (C#)\nDESCRIPTION: Static methods for mapping properties of Toolbar and base View elements to platform implementations. Includes toolbar title configuration and fundamental view properties like anchoring, automation IDs, and background.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Dispatcher Provider and Getting Current Thread Dispatcher - C#\nDESCRIPTION: Defines a constructor for the DispatcherProvider class and a method to retrieve the dispatcher for the current thread, essential for handling background processing in UI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.DispatcherProvider.DispatcherProvider() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.DispatcherProvider.GetForCurrentThread() -> Microsoft.Maui.Dispatching.IDispatcher?\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Rectangle in W2DCanvas\nDESCRIPTION: This method is utilized to draw a rounded rectangle in the W2DCanvas based on specified parameters including dimensions and corner radius without returning any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: XAML Extension Classes for MAUI Controls\nDESCRIPTION: Various XAML extension classes for MAUI Controls, including bindings, resources, and platform-specific adaptations. These classes provide functionality for use in XAML markup.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.AppThemeBindingExtension\nMicrosoft.Maui.Controls.Xaml.AppThemeBindingExtension.AppThemeBindingExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.ArrayExtension\nMicrosoft.Maui.Controls.Xaml.ArrayExtension.ArrayExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.BindingExtension\nMicrosoft.Maui.Controls.Xaml.BindingExtension.BindingExtension() -> void\nMicrosoft.Maui.Controls.Xaml.BindingExtension.Mode.get -> Microsoft.Maui.Controls.BindingMode\nMicrosoft.Maui.Controls.Xaml.BindingExtension.Mode.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.DataTemplateExtension\nMicrosoft.Maui.Controls.Xaml.DataTemplateExtension.DataTemplateExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.DynamicResourceExtension\nMicrosoft.Maui.Controls.Xaml.DynamicResourceExtension.DynamicResourceExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.FontImageExtension\nMicrosoft.Maui.Controls.Xaml.FontImageExtension.FontImageExtension() -> void\nMicrosoft.Maui.Controls.Xaml.FontImageExtension.Size.get -> double\nMicrosoft.Maui.Controls.Xaml.FontImageExtension.Size.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.NullExtension\nMicrosoft.Maui.Controls.Xaml.NullExtension.NullExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.OnIdiomExtension\nMicrosoft.Maui.Controls.Xaml.OnIdiomExtension.OnIdiomExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.OnPlatformExtension\nMicrosoft.Maui.Controls.Xaml.OnPlatformExtension.OnPlatformExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.ReferenceExtension\nMicrosoft.Maui.Controls.Xaml.ReferenceExtension.ReferenceExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.RelativeSourceExtension\nMicrosoft.Maui.Controls.Xaml.RelativeSourceExtension.AncestorLevel.get -> int\nMicrosoft.Maui.Controls.Xaml.RelativeSourceExtension.AncestorLevel.set -> void\nMicrosoft.Maui.Controls.Xaml.RelativeSourceExtension.Mode.get -> Microsoft.Maui.Controls.RelativeBindingSourceMode\nMicrosoft.Maui.Controls.Xaml.RelativeSourceExtension.Mode.set -> void\nMicrosoft.Maui.Controls.Xaml.RelativeSourceExtension.RelativeSourceExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.StaticExtension\nMicrosoft.Maui.Controls.Xaml.StaticExtension.StaticExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.StaticResourceExtension\nMicrosoft.Maui.Controls.Xaml.StaticResourceExtension.StaticResourceExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.StyleSheetExtension\nMicrosoft.Maui.Controls.Xaml.StyleSheetExtension.StyleSheetExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.TemplateBindingExtension\nMicrosoft.Maui.Controls.Xaml.TemplateBindingExtension.Mode.get -> Microsoft.Maui.Controls.BindingMode\nMicrosoft.Maui.Controls.Xaml.TemplateBindingExtension.Mode.set -> void\nMicrosoft.Maui.Controls.Xaml.TemplateBindingExtension.TemplateBindingExtension() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.TypeExtension\nMicrosoft.Maui.Controls.Xaml.TypeExtension.TypeExtension() -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Font Copy in Skia\nDESCRIPTION: Extension method to create a copy of an existing SkiaSharp font, handling potential null inputs safely with nullable support\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Connecting Points in Paths in .NET MAUI\nDESCRIPTION: This snippet provides methods to create lines in the PathF class, allowing lines to be drawn to specific coordinates or points, thus defining the shape.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.LineTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.LineTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: StyleableElement Base Class Definition\nDESCRIPTION: Base class for MAUI controls that support styling through Style and StyleClass properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.class.set -> void\nMicrosoft.Maui.Controls.StyleableElement.Style.set -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleableElement() -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.set -> void\n```\n\n----------------------------------------\n\nTITLE: Clipping Paths in PictureCanvas\nDESCRIPTION: This snippet contains the ClipPath method in the PictureCanvas class for clipping drawing operations to a specific path with a winding mode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Dispatcher Utility Methods in MAUI\nDESCRIPTION: Additional utility methods for the IDispatcher interface, including timer functionality and synchronization context retrieval.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.GetSynchronizationContextAsync(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher) -> System.Threading.Tasks.Task<System.Threading.SynchronizationContext!>!\nstatic Microsoft.Maui.Dispatching.DispatcherExtensions.StartTimer(this Microsoft.Maui.Dispatching.IDispatcher! dispatcher, System.TimeSpan interval, System.Func<bool>! callback) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Visual Diagnostics Overlay in MAUI (C#)\nDESCRIPTION: These methods are part of the VisualDiagnosticsOverlay class, handling the addition and removal of window elements for diagnostic purposes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.VisualDiagnosticsOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.Deinitialize() -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: Image and Navigation Handler Virtual Methods in Microsoft.Maui\nDESCRIPTION: Virtual methods for image handlers, navigation, and view handlers in the Microsoft.Maui framework. These methods handle image loading failures, source loading, navigation management, and view lifecycle events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Handlers.ImageButtonHandler.OnImageFailed(object! sender, Microsoft.UI.Xaml.ExceptionRoutedEventArgs! exceptionRoutedEventArgs) -> void\nvirtual Microsoft.Maui.Handlers.ImageButtonHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.NavigationViewHandler.CreateNavigationManager() -> Microsoft.Maui.Platform.StackNavigationManager!\nvirtual Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ViewHandler.NeedsContainer.get -> bool\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Handling App Actions in .NET MAUI\nDESCRIPTION: This snippet describes the IAppActions interface which allows for the registration and handling of app actions in a MAUI application, including methods to fetch, set, and check supported actions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions.IsSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Absolute Layout Flags in Microsoft MAUI\nDESCRIPTION: This snippet defines flags for absolute layout properties in Microsoft MAUI. These flags allow developers to specify how elements are positioned and scaled within an absolute layout, enhancing control over the UI layout behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional = 2 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\n----------------------------------------\n\nTITLE: MauiTextView Class Definition\nDESCRIPTION: Custom text view implementation for MAUI that supports placeholder text and text alignment\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.MauiTextView.AttributedPlaceholderText.get -> Foundation.NSAttributedString?\nMicrosoft.Maui.Platform.MauiTextView.MauiTextView() -> void\nMicrosoft.Maui.Platform.MauiTextView.PlaceholderText.get -> string?\nMicrosoft.Maui.Platform.MauiTextView.PlaceholderTextColor.get -> UIKit.UIColor?\nMicrosoft.Maui.Platform.MauiTextView.VerticalTextAlignment.get -> Microsoft.Maui.TextAlignment\n```\n\n----------------------------------------\n\nTITLE: Activate Window in Application C#\nDESCRIPTION: Virtual method ActivateWindow in Application is used to bring a Window to the foreground, ensuring it is prominently displayed to the user. A crucial method for window management in applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Controls.Application.ActivateWindow(Microsoft.Maui.Controls.Window! window) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI View Handler Abstractions\nDESCRIPTION: Abstract class declarations for view handlers that manage platform-specific view implementations. Includes methods for view creation, sizing, and arrangement.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Bitmap Manipulation Extensions for Android\nDESCRIPTION: Extension methods for resizing Android Bitmap objects. These methods provide options to downsize bitmaps to fit within specified constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.Downsize(this Android.Graphics.Bitmap target, int maxSize, bool dispose = true) -> Android.Graphics.Bitmap\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.Downsize(this Android.Graphics.Bitmap target, int maxWidth, int maxHeight, bool dispose = true) -> Android.Graphics.Bitmap\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Slider in .NET MAUI\nDESCRIPTION: This snippet describes the properties related to the ISliderHandler interface for managing slider UI components in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ISliderHandler.PlatformView.get -> Android.Widget.SeekBar!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ISliderHandler.VirtualView.get -> Microsoft.Maui.ISlider!\n```\n\n----------------------------------------\n\nTITLE: Implementing BlazorWebViewHandler in C# for .NET MAUI\nDESCRIPTION: Defines the BlazorWebViewHandler class for handling BlazorWebView instances in MAUI applications. Includes methods for creating and managing platform-specific views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.BlazorWebViewHandler() -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.BlazorWebViewHandler(Microsoft.Maui.PropertyMapper? mapper) -> void\noverride Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.CreatePlatformView() -> WebKit.WKWebView!\noverride Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.DisconnectHandler(WebKit.WKWebView! platformView) -> void\nstatic Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.BlazorWebViewMapper -> Microsoft.Maui.PropertyMapper<Microsoft.AspNetCore.Components.WebView.Maui.IBlazorWebView!, Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler!>!\nstatic Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.MapHostPage(Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler! handler, Microsoft.AspNetCore.Components.WebView.Maui.IBlazorWebView! webView) -> void\nstatic Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.MapRootComponents(Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler! handler, Microsoft.AspNetCore.Components.WebView.Maui.IBlazorWebView! webView) -> void\nvirtual Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebViewHandler.TryDispatchAsync(System.Action<System.IServiceProvider!>! workItem) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Handling TimeSelected Event in TimePicker C#\nDESCRIPTION: Describes an event handler for TimeSelected in the TimePicker that uses TimeChangedEventArgs to respond to changes in selected time values. It plays a key role in updating UI or logic based on time selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TimePicker.TimeSelected -> System.EventHandler<Microsoft.Maui.Controls.TimeChangedEventArgs>\n```\n\n----------------------------------------\n\nTITLE: Scaling in W2DCanvas\nDESCRIPTION: This method applies a scaling transformation to the W2DCanvas to resize shapes. It takes scaling factors along the x and y axes as parameters and does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformScale(float sx, float sy) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating MapSpan from Center and Radius in MAUI Maps\nDESCRIPTION: Static factory method that creates a MapSpan instance from a center location and radius. The center parameter defines the focal point while radius determines the visible area around it.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\n```\n\n----------------------------------------\n\nTITLE: Sensor Management APIs in MAUI\nDESCRIPTION: Static methods for managing device sensors including gyroscope, magnetometer, and orientation sensor with start/stop functionality and event handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SemanticHeadingLevel Enum in C# for MAUI\nDESCRIPTION: This snippet defines the SemanticHeadingLevel enum, which represents different levels of semantic headings from None to Level9. This is used for accessibility and document structure purposes in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level1 = 1 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level2 = 2 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level3 = 3 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level4 = 4 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level5 = 5 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level6 = 6 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level7 = 7 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level8 = 8 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level9 = 9 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.None = 0 -> Microsoft.Maui.SemanticHeadingLevel\n```\n\n----------------------------------------\n\nTITLE: SwipeViewHandler Mappings in MAUI\nDESCRIPTION: Static methods for handling SwipeView control properties in MAUI, including item positioning (top, bottom, left, right), transitions, and content management. Supports both property and command mapping for complete swipe functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive that enables nullable reference type checking for the current file scope. This helps catch potential null reference exceptions at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Creating Paint from Pattern in MAUI (C#)\nDESCRIPTION: These methods create a Brush/Paint based on patterns provided. They allow for representing complex textures and styles when drawing on a canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target, Microsoft.Maui.Graphics.Color foregroundColor) -> Microsoft.Maui.Graphics.Paint\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target) -> Microsoft.Maui.Graphics.Paint\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Handler Method Implementation\nDESCRIPTION: Override methods for handling WebView2 platform view creation, connection and disconnection in the HybridWebViewHandler class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.CreatePlatformView() -> Microsoft.UI.Xaml.Controls.WebView2!\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.WebView2! platformView) -> void\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.WebView2! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Subtracting from Canvas Clip in MAUI (C#)\nDESCRIPTION: This feature allows the user to subtract regions from the existing clipping area of the canvas. By specifying a rectangle, the canvas will exclude that area from being drawn on.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting String Size in PictureCanvas\nDESCRIPTION: This snippet defines the GetStringSize methods in the PictureCanvas class for retrieving the size of a string based on font properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Slider Handler Mappings in C#\nDESCRIPTION: Static methods for mapping slider properties including maximum/minimum values, track colors, thumb properties, and current value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Functions in MAUI (C#)\nDESCRIPTION: Provides a comprehensive set of static methods for various unit conversions, including temperature, pressure, distance, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToHertz(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesPerSecondToRadiansPerSecond(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.DegreesToRadians(double degrees) -> double\nstatic Microsoft.Maui.Media.UnitConverters.FahrenheitToCelsius(double fahrenheit) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HectopascalsToKilopascals(double hpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HectopascalsToPascals(double hpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HertzToDegreesPerSecond(double hertz) -> double\nstatic Microsoft.Maui.Media.UnitConverters.HertzToRadiansPerSecond(double hertz) -> double\nstatic Microsoft.Maui.Media.UnitConverters.InternationalFeetToMeters(double internationalFeet) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KelvinToCelsius(double kelvin) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilogramsToPounds(double kilograms) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilometersToMiles(double kilometers) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilopascalsToHectopascals(double kpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilopascalsToPascals(double kpa) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MetersToInternationalFeet(double meters) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MetersToUSSurveyFeet(double meters) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MilesToKilometers(double miles) -> double\nstatic Microsoft.Maui.Media.UnitConverters.MilesToMeters(double miles) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PascalsToAtmospheres(double pascals) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToKilograms(double pounds) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToStones(double pounds) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToDegreesPerSecond(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansPerSecondToHertz(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.RadiansToDegrees(double radians) -> double\nstatic Microsoft.Maui.Media.UnitConverters.StonesToPounds(double stones) -> double\nstatic Microsoft.Maui.Media.UnitConverters.USSurveyFeetToMeters(double usFeet) -> double\n```\n\n----------------------------------------\n\nTITLE: Point Conversion Extensions between MAUI and Android\nDESCRIPTION: Extension methods for converting point objects between MAUI and Android. These methods enable seamless conversion of coordinate points between platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsPoint(this Android.Graphics.PointF target) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsPointF(this Android.Graphics.PointF target) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.ToPointF(this Microsoft.Maui.Graphics.PointF target) -> Android.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Mapping CheckBox Properties in MAUI\nDESCRIPTION: Static methods for mapping properties of a CheckBox control in MAUI, including foreground color and checked state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing LayoutHandler in C#\nDESCRIPTION: Core handler class for managing layout containers in MAUI. Provides methods for adding, removing, inserting and updating child views within a layout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler {\n    void Add(Microsoft.Maui.IView! child);\n    void Clear();\n    void Insert(int index, Microsoft.Maui.IView! child);\n    void Remove(Microsoft.Maui.IView! child);\n    void Update(int index, Microsoft.Maui.IView! child);\n    void UpdateZIndex(Microsoft.Maui.IView! child);\n}\n```\n\n----------------------------------------\n\nTITLE: ReturnType Enumeration in C#\nDESCRIPTION: Definition of ReturnType enumeration which defines different return key types for keyboard input in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Default = 0 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Done = 1 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Go = 2 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Next = 3 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Search = 4 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Send = 5 -> Microsoft.Maui.ReturnType\n```\n\n----------------------------------------\n\nTITLE: Gradient Paint Implementation (C#)\nDESCRIPTION: Methods for handling gradient paints including color stops, blending, and gradient configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.GradientPaint.AddOffset(float offset, Microsoft.Maui.Graphics.Color color) -> void\n~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors() -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.SetGradientStops(float[] offsets, Microsoft.Maui.Graphics.Color[] colors) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending Canvas with Drawing Functions in Microsoft MAUI\nDESCRIPTION: The extension methods provide additional functionalities to the `ICanvas` interface in Microsoft MAUI, allowing for operations such as drawing and filling shapes like rectangles, circles, and ellipses. These methods rely on the `Microsoft.Maui.Graphics` namespace and use parameters such as dimensions, positions, and angles to define graphical elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawCircle(this Microsoft.Maui.Graphics.ICanvas target, float centerX, float centerY, float radius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.DrawRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Backgrounding Window State\nDESCRIPTION: Handles state persistence when the window goes into the background, necessary for restoring the state later.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Menu-Related Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for menu-related handlers including MenuBarHandler, MenuBarItemHandler, MenuFlyoutHandler, and related classes that create UIKit menu elements for iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.MenuBarHandler.CreatePlatformElement() -> UIKit.IUIMenuBuilder!\noverride Microsoft.Maui.Handlers.MenuBarHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\noverride Microsoft.Maui.Handlers.MenuBarItemHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.MenuFlyoutHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CreatePlatformElement() -> UIKit.UIMenuElement!\noverride Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CreatePlatformElement() -> UIKit.UIMenu!\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow in Skia Canvas\nDESCRIPTION: Configures shadow parameters such as offset, blur, and color, providing nuanced shadow effects in graphical rendering and enhancing image realism.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeViewHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the SwipeViewHandler class that handle mapping of swipe view attributes like items positioning, content, and transition modes to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: StyleableElement Class Definition\nDESCRIPTION: Defines the StyleableElement base class with style and class list handling capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement\nMicrosoft.Maui.Controls.StyleableElement.class.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.class.set -> void\nMicrosoft.Maui.Controls.StyleableElement.Style.set -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleableElement() -> void\n```\n\n----------------------------------------\n\nTITLE: Button Handler Property Mappings\nDESCRIPTION: Static methods for mapping button properties like stroke color, thickness, text and text color between the MAUI abstraction and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IButton!, Microsoft.Maui.Handlers.IButtonHandler!>!\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding PageHandler Methods for Tizen Platform\nDESCRIPTION: These methods override PageHandler functionality to create and arrange ContentViewGroup elements for the Tizen platform implementation of MAUI pages.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.PageHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentViewGroup!\noverride Microsoft.Maui.Handlers.PageHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\n```\n\n----------------------------------------\n\nTITLE: WindowOverlay RemoveWindowElements Method in C#\nDESCRIPTION: Virtual method that removes all drawable elements from the window overlay, clearing the overlay completely.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_197\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: Building .NET MAUI with Cake for VS and iOS\nDESCRIPTION: Builds .NET MAUI targeting Visual Studio with global workloads for Android and iOS platforms\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet cake --target=VS --workloads=global --android --ios\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Line Cap in W2DCanvasState\nDESCRIPTION: This snippet sets the stroke line cap for the W2DCanvasState, affecting how the end of shapes are rendered. It does not return a value, indicating an action method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DCanvasState.StrokeLineCap.set -> void\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions Constructor in MAUI\nDESCRIPTION: This constructor initializes a new instance of the BrowserLaunchOptions class with default values. It allows for customizing the browser launch behavior, such as flags and preferred colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.BrowserLaunchOptions() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Restoring State in Skia Canvas\nDESCRIPTION: Restores a SkiaCanvas to a previously saved state, crucial for undo or preservation functionalities during complex graphic manipulations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.StateRestored(Microsoft.Maui.Graphics.Skia.SkiaCanvasState state) -> void\n```\n\n----------------------------------------\n\nTITLE: Handler Collection Extensions in MAUI C#\nDESCRIPTION: Static extension methods for managing handlers in MAUI applications. Includes methods for adding and trying to add handlers with various type parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType>(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection, System.Func<System.IServiceProvider, Microsoft.Maui.IElementHandler> handlerImplementationFactory)\n```\n\n----------------------------------------\n\nTITLE: Picker and ProgressBar Extensions in MAUI for Android\nDESCRIPTION: Extension methods for working with pickers and progress bars in the Android implementation of MAUI. These methods handle updating various properties like selected index, text color, title, progress value, and progress color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_161\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.PickerExtensions.UpdateSelectedIndex(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Platform.PickerExtensions.UpdateTextColor(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker, Android.Content.Res.ColorStateList? defaultColor) -> void\nstatic Microsoft.Maui.Platform.PickerExtensions.UpdateTitle(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Platform.PickerExtensions.UpdateTitleColor(this Microsoft.Maui.Platform.MauiPicker! platformPicker, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Platform.ProgressBarExtensions.UpdateProgress(this Android.Widget.ProgressBar! platformProgressBar, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Platform.ProgressBarExtensions.UpdateProgressColor(this Android.Widget.ProgressBar! platformProgressBar, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable References in C# MAUI Project\nDESCRIPTION: Directive to enable nullable reference type checking at the file level. This pragma ensures more strict null-checking and helps prevent null reference exceptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Accessing platform-specific images in .NET MAUI\nDESCRIPTION: Example showing how to access a platform-specific image stored in the Assets/Images folder from shared XAML code. This pattern maintains consistent image access across all platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-multiproject/MauiApp.1.WinUI/Assets/Images/AboutWinUIImages.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/Assets/Images/my_image.png\n```\n\nLANGUAGE: XML\nCODE:\n```\n<Image Source=\"my_image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Window Overlay Management in .NET MAUI\nDESCRIPTION: Virtual method for the WindowOverlay class that enables adding drawable elements to a window overlay layer.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_159\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\n```\n\n----------------------------------------\n\nTITLE: TextView Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for customizing Android TextView appearance based on MAUI text styling properties. These methods handle text formatting, font styling, colors, decorations, and text content rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_175\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateCharacterSpacing(this Android.Widget.TextView! textView, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateFlowDirection(this Android.Widget.TextView! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateFont(this Android.Widget.TextView! textView, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateHorizontalTextAlignment(this Android.Widget.TextView! textView, Microsoft.Maui.ITextAlignment! text) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateLineHeight(this Android.Widget.TextView! textView, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdatePadding(this Android.Widget.TextView! textView, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateTextColor(this Android.Widget.TextView! textView, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateTextDecorations(this Android.Widget.TextView! textView, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateTextHtml(this Android.Widget.TextView! textView, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateTextPlainText(this Android.Widget.TextView! textView, Microsoft.Maui.IText! label) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateVerticalTextAlignment(this Android.Widget.TextView! textView, Microsoft.Maui.ITextAlignment! textAlignment) -> void\n```\n\n----------------------------------------\n\nTITLE: MauiMKMapView Virtual Method - C#\nDESCRIPTION: Virtual method for customizing overlay rendering in iOS MapKit integration. Handles the creation of overlay renderers for map annotations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Maps.Platform.MauiMKMapView.GetViewForOverlayDelegate(MapKit.MKMapView! mapview, MapKit.IMKOverlay! overlay) -> MapKit.MKOverlayRenderer!\n```\n\n----------------------------------------\n\nTITLE: Map Functionality in .NET MAUI\nDESCRIPTION: Static methods to open maps and navigation on the device. These methods allow opening maps at specific coordinates, locations, or placemarks with various launch options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.Default.get -> Microsoft.Maui.ApplicationModel.IMap!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Scaling Paths in MAUI (C#)\nDESCRIPTION: These methods scale a given path by specified factors. They allow for both uniform and non-uniform scaling which can be useful for adjusting the size of graphics dynamically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float scale) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float xScale, float yScale) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Binding Extension Properties in MAUI XAML\nDESCRIPTION: Property definitions for BindingExtension class that handles data binding functionality in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Converter.get -> Microsoft.Maui.Controls.IValueConverter\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Converter.set -> void\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Path.get -> string\n~Microsoft.Maui.Controls.Xaml.BindingExtension.Path.set -> void\n```\n\n----------------------------------------\n\nTITLE: MapSpan Inequality Operator in MAUI Maps\nDESCRIPTION: Static inequality operator that compares two MapSpan instances for inequality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: VisualDiagnosticsOverlay Method Overrides in .NET MAUI\nDESCRIPTION: Overridden methods for the VisualDiagnosticsOverlay class that manage window elements for diagnostic visualization. These methods handle adding, removing, and deinitializing window overlay elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.VisualDiagnosticsOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.Deinitialize() -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\noverride Microsoft.Maui.VisualDiagnosticsOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: FeatureNotSupportedException in MAUI\nDESCRIPTION: This exception class indicates that a requested feature is unsupported in the current application context on the MAUI platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.FeatureNotSupportedException\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.FeatureNotSupportedException.FeatureNotSupportedException() -> void\n```\n\n----------------------------------------\n\nTITLE: Navigating Web View\nDESCRIPTION: Handles navigation events in the web view, allowing the application to respond to navigation actions such as URL changes. The method takes a navigation event and a URL.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebView.Navigating(Microsoft.Maui.WebNavigationEvent evnt, string! url) -> bool\n```\n\n----------------------------------------\n\nTITLE: Convert Color from Type\nDESCRIPTION: Processes conversion from a specific type to a Color object using ConvertFrom. Parameters include 'context', 'culture', and 'fromValue'. This method returns an object and is reliant on CultureInfo.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object fromValue) -> object\n```\n\n----------------------------------------\n\nTITLE: Rotating Paths in .NET MAUI\nDESCRIPTION: This snippet specifies a method for rotating paths in the PathF class around a pivot point by a given angle in degrees.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Rotate(float angleAsDegrees, Microsoft.Maui.Graphics.PointF pivot) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Size Structure Operators and Conversions in .NET MAUI Graphics\nDESCRIPTION: Defines operator overloads and type conversions for the Size structure in Microsoft.Maui.Graphics, including arithmetic operations, comparisons, and conversions to other geometric types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Essentials Configuration Extensions (C#)\nDESCRIPTION: Extension methods for configuring Essentials in a MAUI application, including the ability to add app actions with associated metadata.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.ConfigureEssentials(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IEssentialsBuilder!>? configureDelegate = null) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Font Management API Signatures\nDESCRIPTION: Classes and interfaces for managing fonts including embedded fonts, font loading, and font properties\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Font {\n    public string? Family { get; }\n    public double Size { get; }\n    public FontSlant Slant { get; }\n    public FontWeight Weight { get; }\n    public bool AutoScalingEnabled { get; }\n    public bool IsDefault { get; }\n    \n    public Font WithSize(double size);\n    public Font WithWeight(FontWeight weight);\n    public Font WithSlant(FontSlant fontSlant);\n    public Font WithAutoScaling(bool enabled);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Images in PictureCanvas\nDESCRIPTION: This snippet defines the DrawImage method in the PictureCanvas class for drawing an image at specified coordinates and dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Interface Definition - IScrollView Properties\nDESCRIPTION: Core interface definition showing the main properties required for ScrollView implementation including scroll bar visibility, orientation, content size, and offset values.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/scrollview.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IScrollView : IContentView\n{\n    ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }\n    ScrollBarVisibility VerticalScrollBarVisibility { get; set; }\n    ScrollOrientation Orientation { get; set; }\n    Size ContentSize { get; }\n    double HorizontalOffset { get; }\n    double VerticalOffset { get; }\n    Task RequestScrollTo(double horizontalOffset, double verticalOffset, bool animated);\n    void ScrollFinished();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Handler Implementation in C#\nDESCRIPTION: Implementation of the LayoutHandler class that manages layout containers in MAUI. Provides methods for adding, removing, inserting and updating child views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LayoutHandler {\n    void Add(Microsoft.Maui.IView child);\n    void Clear();\n    void Insert(int index, Microsoft.Maui.IView child);\n    void Remove(Microsoft.Maui.IView child);\n    void Update(int index, Microsoft.Maui.IView child);\n    void UpdateZIndex(Microsoft.Maui.IView child);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Path on Canvas in .NET MAUI\nDESCRIPTION: This method draws a specified path onto the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void\n```\n\n----------------------------------------\n\nTITLE: ClipRectangle Extensions for ICanvas in .NET MAUI Graphics\nDESCRIPTION: These static extension methods `ClipRectangle` extend the `ICanvas` interface in the Microsoft.Maui.Graphics library. They take an `ICanvas` and a `Rect` or `RectF` object as input and clip the canvas to the specified rectangle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n~static Microsoft.Maui.Graphics.CanvasExtensions.ClipRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Pin Class Implementation\nDESCRIPTION: Represents a pin/marker on the map with properties for location, label, address and click handling. Includes equality comparison operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Pin.Pin() -> void\nMicrosoft.Maui.Controls.Maps.Pin.Location.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Pin.Label.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Address.get -> string!\nMicrosoft.Maui.Controls.Maps.Pin.Type.get -> Microsoft.Maui.Controls.Maps.PinType\n```\n\n----------------------------------------\n\nTITLE: Saving Images as Bytes Asynchronously in MAUI\nDESCRIPTION: This method saves a specified picture as a byte array in an asynchronous manner. It requires an IPictureWriter and an IPicture and returns a Task containing the byte array.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytesAsync(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.Threading.Tasks.Task<byte[]>\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAppBuilder in .NET MAUI\nDESCRIPTION: Defines a ConfigureContainer<TBuilder> method for the MauiAppBuilder, allowing developers to configure dependency injection containers using a provided factory. It accepts an IServiceProviderFactory and an optional configuration action, enabling advanced container configuration for application services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.MauiAppBuilder.ConfigureContainer<TBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TBuilder>! factory, System.Action<TBuilder>? configure = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Picker Interface Methods\nDESCRIPTION: Interface defining properties for picker component including selected index, title, and title color\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IPicker.SelectedIndex.set -> void\nMicrosoft.Maui.IPicker.Title.get -> string!\nMicrosoft.Maui.IPicker.TitleColor.get -> Microsoft.Maui.Graphics.Color!\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutSubItemHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the MenuFlyoutSubItemHandler class that map properties and operations between the cross-platform IMenuFlyoutSubItem interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapKeyboardAccelerators(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapSource(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapText(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Browser Static Methods in C#\nDESCRIPTION: Static method declarations for browser functionality including opening URLs with various options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Browser.Default.get -> Microsoft.Maui.ApplicationModel.IBrowser!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyMapper Generic Class\nDESCRIPTION: Generic class definition for PropertyMapper that allows mapping properties between virtual views and handlers in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]! chained) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for DatePicker in .NET MAUI\nDESCRIPTION: This snippet demonstrates the IDatePickerHandler interface and provides access to platform and virtual views for date selection components in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IDatePickerHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiDatePicker!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IDatePickerHandler.VirtualView.get -> Microsoft.Maui.IDatePicker!\n```\n\n----------------------------------------\n\nTITLE: Implementing Tizen-specific Lifecycle Events in C# for Microsoft.Maui.LifecycleEvents\nDESCRIPTION: This snippet defines extension methods for managing Tizen-specific lifecycle events in Microsoft.Maui applications. It includes methods for various Tizen lifecycle events such as OnCreate, OnPause, OnResume, etc.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnAppControlReceived(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnAppControlReceived! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnCreate(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnCreate! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnDeviceOrientationChanged(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnDeviceOrientationChanged! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnLocaleChanged(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnLocaleChanged! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnLowBattery(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnLowBattery! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnLowMemory(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnLowMemory! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnPause(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnPause! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnPreCreate(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnPreCreate! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnRegionFormatChanged(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnRegionFormatChanged! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnResume(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnResume! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleBuilderExtensions.OnTerminate(this Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.TizenLifecycle.OnTerminate! del) -> Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.TizenLifecycleExtensions.AddTizen(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ITizenLifecycleBuilder!>! configureDelegate) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining BlendMode Enumeration Values in C#\nDESCRIPTION: Enumeration values for different blend modes used in graphics operations, such as Normal, Multiply, Screen etc.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode.Normal = 0\nMicrosoft.Maui.Graphics.BlendMode.Multiply = 1\nMicrosoft.Maui.Graphics.BlendMode.Screen = 2\nMicrosoft.Maui.Graphics.BlendMode.Overlay = 3\n```\n\n----------------------------------------\n\nTITLE: Override RegisterViewTypes Method (StructuredItemsViewController)\nDESCRIPTION: This snippet overrides the RegisterViewTypes method in StructuredItemsViewController2. This likely involves registering custom view types for use within the structured items view, potentially influencing how items are rendered or handled in a MAUI iOS context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2<TItemsView>.RegisterViewTypes() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Targets in MAUI SDK\nDESCRIPTION: Shows how to append platform-specific target files to the MAUI SDK platform targets using the MicrosoftMauiSdkPlatformTargets property.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/NuGets.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <MicrosoftMauiSdkPlatformTargets>$(MicrosoftMauiSdkPlatformTargets);$(MSBuildThisFileDirectory)Microsoft.Maui.Sdk.[platform].targets</MicrosoftMauiSdkPlatformTargets>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Clipping Rectangle in W2DCanvas\nDESCRIPTION: This method clips the canvas to a specified rectangle, limiting drawing to that area. It takes float parameters for the rectangle's coordinates and dimensions without returning anything.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.ClipRectangle(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing OrientationSensor in MAUI (C#)\nDESCRIPTION: Defines static methods and properties for the OrientationSensor class, including checking support, handling reading changes, and starting/stopping the sensor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Path Manipulation and Drawing Extensions in .NET MAUI Graphics\nDESCRIPTION: Extension methods for PathF to draw arcs and handle SVG-style arc commands. Includes methods for scaling paths, converting paths to and from string definitions, and a path builder for creating paths from SVG-like path definition strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PathArcExtensions.DrawArc(this Microsoft.Maui.Graphics.PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation) -> void\nstatic Microsoft.Maui.Graphics.PathArcExtensions.SVGArcTo(this Microsoft.Maui.Graphics.PathF aTarget, float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY) -> void\nstatic Microsoft.Maui.Graphics.PathBuilder.Build(string definition) -> Microsoft.Maui.Graphics.PathF\nstatic Microsoft.Maui.Graphics.PathBuilder.ParseFloat(string value) -> float\nstatic Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float scale) -> Microsoft.Maui.Graphics.PathF\nstatic Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float xScale, float yScale) -> Microsoft.Maui.Graphics.PathF\nstatic Microsoft.Maui.Graphics.PathExtensions.ToDefinitionString(this Microsoft.Maui.Graphics.PathF path, float ppu = 1) -> string\n```\n\n----------------------------------------\n\nTITLE: Canvas Default Values in Microsoft.Maui.Graphics C#\nDESCRIPTION: Constants defining default values for canvas rendering, including miter limit and shadow blur. These constants provide standard values that are used when specific values aren't specified by the developer.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.CanvasDefaults.DefaultMiterLimit = 10 -> float\nconst Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowBlur = 5 -> float\n```\n\n----------------------------------------\n\nTITLE: Defining DistanceUnits Enum in C#\nDESCRIPTION: Defines the DistanceUnits enum with Kilometers and Miles options. This enum is used to specify distance units in geolocation-related operations in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.DistanceUnits\nMicrosoft.Maui.Devices.Sensors.DistanceUnits.Kilometers = 0 -> Microsoft.Maui.Devices.Sensors.DistanceUnits\nMicrosoft.Maui.Devices.Sensors.DistanceUnits.Miles = 1 -> Microsoft.Maui.Devices.Sensors.DistanceUnits\n```\n\n----------------------------------------\n\nTITLE: Get DateTimeOffset Value from MAUI Preferences\nDESCRIPTION: Static methods to retrieve DateTimeOffset values from preferences storage. Includes overloads with and without shared name parameter. Returns default value if key not found.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\n```\n\n----------------------------------------\n\nTITLE: Parsing Rect from String in MAUI\nDESCRIPTION: This method attempts to parse a string representation of a rectangle into a Microsoft MAUI Rect object. It returns a boolean indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Rect.TryParse(string value, out Microsoft.Maui.Graphics.Rect rectangle) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining FlexDirection Enum in .NET MAUI\nDESCRIPTION: This snippet defines the FlexDirection enumeration, which specifies the direction of a flex container's layout. It includes options for row and column orientations with associated integer values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexDirection.Column = 2 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexDirection.ColumnReverse = 3 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexDirection.Row = 0 -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.Layouts.FlexDirection.RowReverse = 1 -> Microsoft.Maui.Layouts.FlexDirection\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint in PictureCanvas in .NET MAUI\nDESCRIPTION: These methods set the fill paint for the PictureCanvas, allowing for point and rectangle specifications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\n```\n\n----------------------------------------\n\nTITLE: Embedding Extensions\nDESCRIPTION: Extension methods for embedding MAUI controls in platform-specific windows\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.CreateEmbeddedWindowContext(this Microsoft.Maui.Hosting.MauiApp! mauiApp, Microsoft.UI.Xaml.Window! platformWindow) -> Microsoft.Maui.IMauiContext!\nstatic Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.ToPlatformEmbedded(this Microsoft.Maui.IElement! element, Microsoft.Maui.Hosting.MauiApp! mauiApp, Microsoft.UI.Xaml.Window! platformWindow) -> Microsoft.UI.Xaml.FrameworkElement!\n```\n\n----------------------------------------\n\nTITLE: WindowOverlay AddWindowElement Method in C#\nDESCRIPTION: Virtual method that adds a drawable element to the window overlay. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_192\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\n```\n\n----------------------------------------\n\nTITLE: Location Services Method Signatures\nDESCRIPTION: Static method signatures for calculating distances between locations and opening maps in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Location.CalculateDistance(double latitudeStart, double longitudeStart, Location locationEnd, DistanceUnits units) -> double\nstatic Location.CalculateDistance(Location locationStart, double latitudeEnd, double longitudeEnd, DistanceUnits units) -> double\nstatic Location.CalculateDistance(Location locationStart, Location locationEnd, DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Adjusting Fill Color in Skia Canvas\nDESCRIPTION: Sets the fill color used for drawing operations, ensuring consistent application of colors in filled shapes or patterns across the SkiaCanvas rendering context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.FillColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI App Host Builder Extensions\nDESCRIPTION: Extension methods for MauiAppBuilder to configure MAUI applications and handlers. Includes methods for registering MAUI controls handlers and configuring the MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiControlsHandlers(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating CALayer from Various Paint Types in PaintExtensions Class\nDESCRIPTION: These static methods create CALayer objects from different types of Paint objects, including GradientPaint, ImagePaint, LinearGradientPaint, PatternPaint, RadialGradientPaint, and SolidPaint.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.GradientPaint! gradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.ImagePaint! imagePaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.PatternPaint! patternPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.SolidPaint! solidPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading Deployed Maui Asset in C#\nDESCRIPTION: This C# method demonstrates how to asynchronously load an asset named 'AboutAssets.txt' using the FileSystem API in .NET MAUI. The method opens the file from the application package, reads its contents using a StreamReader, and stores the contents in a string variable. This example requires the .NET MAUI Essentials library for file operations. The method expects no input parameters and outputs the contents of the file as a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-blazor-solution/MauiApp.1/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Android WebView Settings in C#\nDESCRIPTION: This method updates the settings of an Android WebView based on the properties of a MAUI IWebView, including JavaScript and DOM storage settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_184\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateSettings(this Android.Webkit.WebView! platformWebView, Microsoft.Maui.IWebView! webView, bool javaScriptEnabled, bool domStorageEnabled) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Arc in W2DCanvas\nDESCRIPTION: This method draws an arc on the W2DCanvas based on specified parameters including bounding box, angles, direction, and a closure indicator without returning any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in .NET MAUI Canvas State\nDESCRIPTION: This snippet illustrates the setter for the fill color property in the canvas state. It enables developers to set the color used for filling shapes on the canvas, which is vital for design.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.FillColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Switch Properties in C#\nDESCRIPTION: Static methods for mapping properties of Switch control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Convert UIColor to MAUI Color in MAUI\nDESCRIPTION: This method converts a UIColor instance to a corresponding Microsoft MAUI Color instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIKitExtensions.AsColor(this UIKit.UIColor color) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Rectangle Operations and Comparisons in MAUI Graphics\nDESCRIPTION: Static methods for rectangle comparison, union operations and constant definitions for Rect and RectF types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\n```\n\n----------------------------------------\n\nTITLE: String Rendering in Skia Canvas\nDESCRIPTION: Handles multi-parametered drawing of strings within rectangular bounds in SkiaCanvas, with advanced alignment and flow options to control text appearance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizAlignment, Microsoft.Maui.Graphics.VerticalAlignment vertAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizAlignment) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in C#\nDESCRIPTION: These static readonly fields define various color constants in the Microsoft.Maui.Graphics.Colors class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.AliceBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.AntiqueWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Aqua -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Aquamarine -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Azure -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Graphics View and Image Handling in C#\nDESCRIPTION: Platform-specific implementations for graphics view and image handling. These classes provide methods for invalidating drawable areas and accessing image properties like width and height.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.InvalidateDrawable() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.InvalidateDrawable(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Platform.PlatformGraphicsView.PlatformGraphicsView(nint aPtr) -> void\n\nMicrosoft.Maui.Graphics.Platform.PlatformImage\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Dispose() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Height.get -> float\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Width.get -> float\n\nMicrosoft.Maui.Graphics.Platform.PlatformImageLoadingService\nMicrosoft.Maui.Graphics.Platform.PlatformImageLoadingService.PlatformImageLoadingService() -> void\n```\n\n----------------------------------------\n\nTITLE: Disposing W2DCanvasState\nDESCRIPTION: This method is used to dispose of resources used by the W2DCanvasState, effectively cleaning up. It does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvasState.Dispose() -> void\n```\n\n----------------------------------------\n\nTITLE: Resource Dictionary Loading Method\nDESCRIPTION: Static helper method for loading resources from a source URI into a ResourceDictionary with assembly and line info parameters\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawing and Overriding Object Methods in MAUI (C#)\nDESCRIPTION: These overrides implement drawing for RectangleGridAdorner and provide custom implementations for ToString, Equals, and GetHashCode for various MAUI classes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.RectangleGridAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\noverride Microsoft.Maui.Semantics.ToString() -> string!\noverride Microsoft.Maui.SizeRequest.Equals(object? obj) -> bool\noverride Microsoft.Maui.SizeRequest.GetHashCode() -> int\noverride Microsoft.Maui.SizeRequest.ToString() -> string!\noverride Microsoft.Maui.Thickness.Equals(object? obj) -> bool\noverride Microsoft.Maui.Thickness.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Class for Android Resources in C#\nDESCRIPTION: This code snippet demonstrates the structure of the automatically generated Resource class in Android applications. It shows how resource IDs are mapped to constants within nested classes, allowing developers to reference resources programmatically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/samples/Controls.Sample.Embedding/Platforms/Android/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class Drawable {\n        public const int icon = 0x123;\n    }\n\n    public class Layout {\n        public const int main = 0x456;\n    }\n\n    public class Strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Attributed Text in Skia Canvas\nDESCRIPTION: Facilitates drawing attributed text objects that contain complex styles and formats in specified areas, enhancing text presentation within graphical user interfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Create Image from Stream with SkiaImage in C#\nDESCRIPTION: This function converts a stream into an image, leveraging the SkiaImage functionality. It takes a stream and an optional image format hint as inputs, defaulting to PNG, and produces an IImage object. This method requires access to System.IO.Stream and Microsoft.Maui.Graphics.ImageFormat.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SkiaImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Barometer Sensor API in .NET MAUI\nDESCRIPTION: Static methods for accessing and monitoring the device barometer. Provides methods to start and stop monitoring, check if the barometer is supported, and events for detecting changes in pressure.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Default.get -> Microsoft.Maui.Devices.Sensors.IBarometer!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator !=(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator ==(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshViewHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static properties and methods for the RefreshViewHandler class that map refresh-related properties such as background, content, enabled state, refresh color, and refresh state to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! view) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeItemViewHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the SwipeItemViewHandler class that handle mapping of swipe item view attributes like content and visibility to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: MapElement Base Class (C#)\nDESCRIPTION: The base class for all map elements like polygons, polylines, and circles. It provides common properties for stroke color, stroke width, and element identification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.MapElement\nMicrosoft.Maui.Controls.Maps.MapElement.MapElement() -> void\nMicrosoft.Maui.Controls.Maps.MapElement.MapElementId.get -> object?\nMicrosoft.Maui.Controls.Maps.MapElement.MapElementId.set -> void\nMicrosoft.Maui.Controls.Maps.MapElement.StrokeColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.MapElement.StrokeColor.set -> void\nMicrosoft.Maui.Controls.Maps.MapElement.StrokeWidth.get -> float\nMicrosoft.Maui.Controls.Maps.MapElement.StrokeWidth.set -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeView Extensions for Android in .NET MAUI\nDESCRIPTION: Extension method for retrieving text color from a MAUI SwipeItemMenuItem. This helps with proper styling of swipe menu items in the Android platform implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SwipeViewExtensions.GetTextColor(this Microsoft.Maui.ISwipeItemMenuItem! swipeItemMenuItem) -> Microsoft.Maui.Graphics.Color?\n```\n\n----------------------------------------\n\nTITLE: Abstract Pattern and Bitmap Export Context in Microsoft.Maui (C#)\nDESCRIPTION: This snippet includes constructors and property accessors for creating and manipulating patterns as well as context for bitmap exporting. It sets up dimensions and steps for patterns and properties for bitmap dimensions and resolution.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.AbstractPattern.AbstractPattern(float stepSize) -> void\nMicrosoft.Maui.Graphics.AbstractPattern.AbstractPattern(float width, float height, float stepX, float stepY) -> void\nMicrosoft.Maui.Graphics.BitmapExportContext.BitmapExportContext(int width, int height, float dpi) -> void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canvas from Skia Bitmap Export Context\nDESCRIPTION: An overridden method to get the ICanvas from SkiaBitmapExportContext, ensuring enhanced access and manipulation of drawing surfaces for image export tasks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.Canvas.get -> Microsoft.Maui.Graphics.ICanvas\n```\n\n----------------------------------------\n\nTITLE: Managing PictureCanvas Properties\nDESCRIPTION: This snippet includes properties for retrieving the current picture being drawn in the PictureCanvas class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.Picture.get -> Microsoft.Maui.Graphics.IPicture\n```\n\n----------------------------------------\n\nTITLE: Color Constants and Parsing\nDESCRIPTION: Standard color definitions and color parsing utilities for MAUI Graphics applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.ParseAsInts(this string color) -> int[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.StandardColors -> System.Collections.Generic.Dictionary<string, string>\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Transformation Methods API Reference (C#)\nDESCRIPTION: Method signatures for coordinate transformations in PictureCanvas, including rotation, scaling, and translation operations that affect how subsequent drawing operations are positioned.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Rotate(float degrees) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Translate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: RectangleAdorner Draw Method in C#\nDESCRIPTION: Virtual method responsible for drawing the rectangle adorner using the provided canvas within the specified dirty rectangle area.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_191\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Base Class Members\nDESCRIPTION: Core members of the Animation class in MAUI framework, providing animation functionality including timing, progress tracking, and child animation management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class Animation {\n    public IAnimationManager? animationManger { get; }\n    public List<Animation> childrenAnimations { get; }\n    public double CurrentTime { get; set; }\n    public double Duration { get; set; }\n    public Easing Easing { get; set; }\n    public Action? Finished { get; set; }\n    public bool HasFinished { get; set; }\n    public bool IsDisposed { get; }\n    public bool IsPaused { get; }\n    public string? Name { get; set; }\n    public double Progress { get; set; }\n    public bool Repeats { get; set; }\n    public double StartDelay { get; set; }\n    public Action<double>? Step { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IUriImageSource Interface in C#\nDESCRIPTION: This snippet defines the IUriImageSource interface in the Microsoft.Maui namespace. It includes properties for cache validity, caching enabled status, and the URI of the image source.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IUriImageSource\nMicrosoft.Maui.IUriImageSource.CacheValidity.get -> System.TimeSpan\nMicrosoft.Maui.IUriImageSource.CachingEnabled.get -> bool\nMicrosoft.Maui.IUriImageSource.Uri.get -> System.Uri!\n```\n\n----------------------------------------\n\nTITLE: Defining Semantics Class in C# for MAUI\nDESCRIPTION: This snippet defines the Semantics class, which provides properties for describing semantic information about UI elements. It includes properties for description, heading level, hint, and a flag indicating if the element is a heading.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Semantics\nMicrosoft.Maui.Semantics.Description.get -> string?\nMicrosoft.Maui.Semantics.Description.set -> void\nMicrosoft.Maui.Semantics.HeadingLevel.get -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.Semantics.HeadingLevel.set -> void\nMicrosoft.Maui.Semantics.Hint.get -> string?\nMicrosoft.Maui.Semantics.Hint.set -> void\nMicrosoft.Maui.Semantics.IsHeading.get -> bool\nMicrosoft.Maui.Semantics.Semantics() -> void\n```\n\n----------------------------------------\n\nTITLE: Converting System.Numerics.Matrix3x2 to SkiaSharp.SKMatrix\nDESCRIPTION: Extension method that converts a System.Numerics.Matrix3x2 to a SkiaSharp.SKMatrix. This facilitates interoperability between MAUI's platform-agnostic matrix type and Skia's native matrix type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsMatrix(this in System.Numerics.Matrix3x2 transform) -> SkiaSharp.SKMatrix\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for ProgressBar in .NET MAUI\nDESCRIPTION: This snippet covers the properties for the IProgressBarHandler interface, detailing the platform view for progress indication in the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IProgressBarHandler.PlatformView.get -> Android.Widget.ProgressBar!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IProgressBarHandler.VirtualView.get -> Microsoft.Maui.IProgress!\n```\n\n----------------------------------------\n\nTITLE: Initializing Skia Bitmap Export Context\nDESCRIPTION: Creates a bitmap export context with specified width, height, and optional display scale for graphics rendering and export operations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.PlatformBitmapExportService.CreateContext(int width, int height, float displayScale = 1)\n```\n\n----------------------------------------\n\nTITLE: Getting Platform Path in PathF Class in .NET MAUI\nDESCRIPTION: These properties allow getting and setting the platform-specific path representation for PathF instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.PlatformPath.get -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.PlatformPath.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Color Constants in Microsoft.Maui.Graphics for C#\nDESCRIPTION: This snippet demonstrates the pattern used to define static readonly color constants in the Microsoft.Maui.Graphics.Colors class. Each constant represents a specific named color and is of type Microsoft.Maui.Graphics.Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGoldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkGreen -> Microsoft.Maui.Graphics.Color\n// ... (additional color definitions follow the same pattern)\n```\n\n----------------------------------------\n\nTITLE: Setting Preferences with Various Data Types in .NET MAUI\nDESCRIPTION: Static methods from the Microsoft.Maui.Storage.Preferences class for storing different data types as preferences. Each method takes a key and value, with an optional sharedName parameter to specify the preference container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, float value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, int value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, long value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, string? value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTime value) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing SearchBarHandler in C#\nDESCRIPTION: Constructor for SearchBarHandler class with multiple overloads, taking optional IPropertyMapper and CommandMapper parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.SearchBarHandler.SearchBarHandler() -> void\nMicrosoft.Maui.Handlers.SearchBarHandler.SearchBarHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.SearchBarHandler.SearchBarHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IAppActions Interface in C#\nDESCRIPTION: Defines the IAppActions interface with methods for managing app actions and events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppActions\nMicrosoft.Maui.ApplicationModel.IAppActions.AppActionActivated -> System.EventHandler<Microsoft.Maui.ApplicationModel.AppActionEventArgs!>?\nMicrosoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\nMicrosoft.Maui.ApplicationModel.IAppActions.IsSupported.get -> bool\nMicrosoft.Maui.ApplicationModel.IAppActions.SetAsync(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>! actions) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Implementing Polyline Class in C# for MAUI Maps\nDESCRIPTION: This snippet defines the Polyline class in the Microsoft.Maui.Controls.Maps namespace. It includes methods for managing a collection of Location objects that form the polyline.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Polyline\nMicrosoft.Maui.Controls.Maps.Polyline.Add(Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Clear() -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Contains(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.CopyTo(Microsoft.Maui.Devices.Sensors.Location![]! array, int arrayIndex) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Count.get -> int\nMicrosoft.Maui.Controls.Maps.Polyline.Geopath.get -> System.Collections.Generic.IList<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polyline.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polyline.IndexOf(Microsoft.Maui.Devices.Sensors.Location! item) -> int\nMicrosoft.Maui.Controls.Maps.Polyline.Insert(int index, Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.IsReadOnly.get -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.Polyline() -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Remove(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.RemoveAt(int index) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.this[int index].get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Polyline.this[int index].set -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Platform-Specific UI Component Methods for Tizen\nDESCRIPTION: These methods override functionality in Tizen-specific UI components to handle events, enable/disable states, and UI operations in the MAUI platform implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.LayoutViewGroup.HitTest(Tizen.NUI.Touch! touch) -> bool\noverride Microsoft.Maui.Platform.MauiDateTimePicker.CreateContent() -> Tizen.NUI.BaseComponents.View!\noverride Microsoft.Maui.Platform.MauiPicker.OnEnabled(bool enabled) -> void\noverride Microsoft.Maui.Platform.MauiSearchBar.OnEnabled(bool enabled) -> void\noverride Microsoft.Maui.Platform.MauiStepper.OnEnabled(bool enabled) -> void\noverride Microsoft.Maui.Platform.PlatformTouchGraphicsView.OnResized() -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Arcs to Paths in .NET MAUI\nDESCRIPTION: This snippet outlines methods for adding arcs to paths in the PathF class, allowing developers to shape paths more dynamically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.AddArc(Microsoft.Maui.Graphics.PointF topLeft, Microsoft.Maui.Graphics.PointF bottomRight, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Simplified Window Handler Initialization in .NET MAUI\nDESCRIPTION: This overload of the WindowHandler constructor only requires the property mapper. It is used to manage properties of a window without specifying command mappings, simplifying window management when command customization is unnecessary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.WindowHandler.WindowHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Curving Paths in .NET MAUI\nDESCRIPTION: This snippet defines methods for creating curves within paths using control points to configure the curve's shape and direction with the CurveTo method in the PathF class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.CurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: LinearGradientPaint Constructors\nDESCRIPTION: Constructor signatures for the LinearGradientPaint class with various parameter combinations for creating gradient fills.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.GradientPaint gradientPaint) -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops, Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.PaintGradientStop[] gradientStops) -> void\n```\n\n----------------------------------------\n\nTITLE: WrapperView Implementation in C#\nDESCRIPTION: WrapperView serves as a container for MAUI views, adding platform-specific capabilities. It supports borders, clipping, and shadows to enhance visual rendering of contained elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.WrapperView\nMicrosoft.Maui.Platform.WrapperView.Border.get -> Microsoft.Maui.IBorderStroke?\nMicrosoft.Maui.Platform.WrapperView.Border.set -> void\nMicrosoft.Maui.Platform.WrapperView.Clip.get -> Microsoft.Maui.Graphics.IShape?\nMicrosoft.Maui.Platform.WrapperView.Clip.set -> void\nMicrosoft.Maui.Platform.WrapperView.Dispose() -> void\nMicrosoft.Maui.Platform.WrapperView.Shadow.get -> Microsoft.Maui.IShadow?\nMicrosoft.Maui.Platform.WrapperView.Shadow.set -> void\nMicrosoft.Maui.Platform.WrapperView.WrapperView() -> void\nMicrosoft.Maui.Platform.WrapperView.WrapperView(CoreGraphics.CGRect frame) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Map Control BindableProperties in C#\nDESCRIPTION: Static readonly property definitions for Map control including ItemTemplateSelector and MapType properties that enable data binding functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: CornerRadius Operators in .NET MAUI\nDESCRIPTION: Operator overloads for the CornerRadius type including equality, inequality, and implicit conversion from double. These operators simplify working with corner radius values in UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CornerRadius.implicit operator Microsoft.Maui.CornerRadius(double uniformRadius) -> Microsoft.Maui.CornerRadius\nstatic Microsoft.Maui.CornerRadius.operator !=(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\nstatic Microsoft.Maui.CornerRadius.operator ==(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: XML configuration that automatically handles the deployment of raw assets placed in the Resources/Raw directory. The LogicalName attribute maintains the relative path structure for accessing files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/samples/Controls.Sample.Embedding/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Defining LockableObservableListWrapper Class in C# for MAUI\nDESCRIPTION: Declares the LockableObservableListWrapper class, which implements a lockable observable list for string items in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.LockableObservableListWrapper\nMicrosoft.Maui.LockableObservableListWrapper.Add(string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Clear() -> void\nMicrosoft.Maui.LockableObservableListWrapper.Contains(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.CopyTo(string![]! array, int arrayIndex) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Count.get -> int\nMicrosoft.Maui.LockableObservableListWrapper.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!\nMicrosoft.Maui.LockableObservableListWrapper.IndexOf(string! item) -> int\nMicrosoft.Maui.LockableObservableListWrapper.Insert(int index, string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.IsLocked.get -> bool\nMicrosoft.Maui.LockableObservableListWrapper.IsLocked.set -> void\nMicrosoft.Maui.LockableObservableListWrapper.IsReadOnly.get -> bool\nMicrosoft.Maui.LockableObservableListWrapper.LockableObservableListWrapper() -> void\nMicrosoft.Maui.LockableObservableListWrapper.Remove(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.RemoveAt(int index) -> void\nMicrosoft.Maui.LockableObservableListWrapper.this[int index].get -> string!\nMicrosoft.Maui.LockableObservableListWrapper.this[int index].set -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Handler Abstract Definitions\nDESCRIPTION: Abstract handler class definitions for MAUI elements and views. Includes methods for platform-specific view creation and layout management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of ILabelHandler in MAUI\nDESCRIPTION: Defines properties for the `ILabelHandler` interface in MAUI to get the platform view and virtual view associated with the Label. The PlatformView exposes the underlying native platform control, while VirtualView represents the .NET MAUI Label.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ILabelHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ILabelHandler.VirtualView.get -> Microsoft.Maui.ILabel!\"\n```\n\n----------------------------------------\n\nTITLE: Path Conversion to Skia SKPath\nDESCRIPTION: Static extension that maps PathF object into SkiaSharp.SKPath with precision tailoring through parameters affecting scaling and offsets for accurate path rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSkiaPath(this Microsoft.Maui.Graphics.PathF path, float ppu, float ox, float oy, float fx, float fy) -> SkiaSharp.SKPath\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSkiaPath(this Microsoft.Maui.Graphics.PathF path, float ppu, float zoom) -> SkiaSharp.SKPath\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSkiaPath(this Microsoft.Maui.Graphics.PathF path, float ppu) -> SkiaSharp.SKPath\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSkiaPath(this Microsoft.Maui.Graphics.PathF target) -> SkiaSharp.SKPath\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for Stepper Handler in .NET MAUI\nDESCRIPTION: Static methods for mapping Stepper properties including value range, increment and enabled state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapIsEnabled(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Type Converters for Graphics Primitives\nDESCRIPTION: Collection of type converters for handling various graphics-related type conversions, including color, point, rectangle, and size conversions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Converters.ColorTypeConverter.ColorTypeConverter()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Converters.PointTypeConverter.PointTypeConverter()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Converters.RectTypeConverter.RectTypeConverter()\n```\n\n----------------------------------------\n\nTITLE: Geometric Primitive String Parsing Extensions in C#\nDESCRIPTION: Extensions for parsing string representations of geometric primitives like Point, PointF, Rect, RectF, Size, and SizeF. These methods enable conversion from string formats to structured geometric types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.TryParse(string value, out Microsoft.Maui.Graphics.Point point) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PointF.TryParse(string value, out Microsoft.Maui.Graphics.PointF pointF) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.TryParse(string value, out Microsoft.Maui.Graphics.Rect rectangle) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.RectF.TryParse(string value, out Microsoft.Maui.Graphics.RectF rectangleF) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.TryParse(string value, out Microsoft.Maui.Graphics.Size size) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.SizeF.TryParse(string value, out Microsoft.Maui.Graphics.SizeF sizeF) -> bool\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Class Definitions\nDESCRIPTION: Animation class definitions for handling UI animations in MAUI applications with support for timing, callbacks and easing functions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void\n```\n\n----------------------------------------\n\nTITLE: Picker Extensions for Item Retrieval in MAUI\nDESCRIPTION: These extension methods provide convenient ways to retrieve items from a MAUI Picker control. They allow getting the picker items as either an array or a list of strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_159\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.IPickerExtension.GetItemsAsArray(this Microsoft.Maui.IPicker! picker) -> string![]!\nstatic Microsoft.Maui.IPickerExtension.GetItemsAsList(this Microsoft.Maui.IPicker! picker) -> System.Collections.Generic.List<string!>!\n```\n\n----------------------------------------\n\nTITLE: PickerHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the PickerHandler class that map visual properties and operations between the cross-platform IPicker interface and platform-specific picker implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapBackground(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapFont(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapReload(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker, object? args) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! picker) -> void\n```\n\n----------------------------------------\n\nTITLE: Scaling Matrix Extension for W2D\nDESCRIPTION: This static method extends the Matrix3x2 structure to provide scaling functionality. It returns a modified matrix based on scaling factors provided as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Win2D.W2DExtensions.Scale(this System.Numerics.Matrix3x2 target, float sx, float sy) -> System.Numerics.Matrix3x2\n```\n\n----------------------------------------\n\nTITLE: MAUI Layout Interface Definitions\nDESCRIPTION: Interface definitions for MAUI layout components including FlexLayout, GridLayout and CrossPlatformLayout. These interfaces define measurement, arrangement and layout capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IFlexLayout\nMicrosoft.Maui.IFlexLayout.AlignContent.get -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.IFlexLayout.AlignItems.get -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.IFlexLayout.Direction.get -> Microsoft.Maui.Layouts.FlexDirection\n```\n\n----------------------------------------\n\nTITLE: IView Interface Definition in .NET MAUI\nDESCRIPTION: Core interface for visual elements in the MAUI framework. Defines properties and methods for layout, appearance, input handling, and accessibility. Provides the foundation for all UI components in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IView\nMicrosoft.Maui.IView.Arrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.AutomationId.get -> string!\nMicrosoft.Maui.IView.Background.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.IView.Clip.get -> Microsoft.Maui.Graphics.IShape?\nMicrosoft.Maui.IView.DesiredSize.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IView.Focus() -> bool\nMicrosoft.Maui.IView.Frame.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.IView.Frame.set -> void\nMicrosoft.Maui.IView.Handler.get -> Microsoft.Maui.IViewHandler?\nMicrosoft.Maui.IView.Handler.set -> void\nMicrosoft.Maui.IView.Height.get -> double\nMicrosoft.Maui.IView.HorizontalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.InputTransparent.get -> bool\nMicrosoft.Maui.IView.InvalidateArrange() -> void\nMicrosoft.Maui.IView.InvalidateMeasure() -> void\nMicrosoft.Maui.IView.IsEnabled.get -> bool\nMicrosoft.Maui.IView.IsFocused.get -> bool\nMicrosoft.Maui.IView.IsFocused.set -> void\nMicrosoft.Maui.IView.Margin.get -> Microsoft.Maui.Thickness\nMicrosoft.Maui.IView.MaximumHeight.get -> double\nMicrosoft.Maui.IView.MaximumWidth.get -> double\nMicrosoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.MinimumHeight.get -> double\nMicrosoft.Maui.IView.MinimumWidth.get -> double\nMicrosoft.Maui.IView.Opacity.get -> double\nMicrosoft.Maui.IView.Semantics.get -> Microsoft.Maui.Semantics?\nMicrosoft.Maui.IView.Shadow.get -> Microsoft.Maui.IShadow?\nMicrosoft.Maui.IView.Unfocus() -> void\nMicrosoft.Maui.IView.VerticalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.Visibility.get -> Microsoft.Maui.Visibility\nMicrosoft.Maui.IView.Width.get -> double\nMicrosoft.Maui.IView.ZIndex.get -> int\n```\n\n----------------------------------------\n\nTITLE: XAML Compilation Attributes for MAUI Controls\nDESCRIPTION: Attributes and enums for controlling XAML compilation in MAUI Controls. These allow specifying compilation options and file paths for XAML files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.XamlCompilationAttribute\nMicrosoft.Maui.Controls.Xaml.XamlCompilationAttribute.XamlCompilationAttribute(Microsoft.Maui.Controls.Xaml.XamlCompilationOptions xamlCompilationOptions) -> void\nMicrosoft.Maui.Controls.Xaml.XamlCompilationAttribute.XamlCompilationOptions.get -> Microsoft.Maui.Controls.Xaml.XamlCompilationOptions\nMicrosoft.Maui.Controls.Xaml.XamlCompilationAttribute.XamlCompilationOptions.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.XamlCompilationOptions\nMicrosoft.Maui.Controls.Xaml.XamlCompilationOptions.Compile = 2 -> Microsoft.Maui.Controls.Xaml.XamlCompilationOptions\nMicrosoft.Maui.Controls.Xaml.XamlCompilationOptions.Skip = 1 -> Microsoft.Maui.Controls.Xaml.XamlCompilationOptions\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.XamlFilePathAttribute\n```\n\n----------------------------------------\n\nTITLE: Size and SizeF Operators and Conversions in C#\nDESCRIPTION: Operator overloads and conversion methods for Size and SizeF structures, including arithmetic operations and conversions between Size, SizeF, and Vector2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator !=(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator /(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator ==(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Launcher Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for ILauncher interface providing alternative ways to open URIs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.LauncherExtensions.CanOpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.LauncherExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.LauncherExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeViewOpenRequest class in C#\nDESCRIPTION: Declares a class for SwipeView open requests, including Animated and OpenSwipeItem properties and a constructor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeViewOpenRequest\nMicrosoft.Maui.SwipeViewOpenRequest.Animated.get -> bool\nMicrosoft.Maui.SwipeViewOpenRequest.Animated.init -> void\nMicrosoft.Maui.SwipeViewOpenRequest.OpenSwipeItem.get -> Microsoft.Maui.OpenSwipeItem\nMicrosoft.Maui.SwipeViewOpenRequest.OpenSwipeItem.init -> void\nMicrosoft.Maui.SwipeViewOpenRequest.SwipeViewOpenRequest(Microsoft.Maui.OpenSwipeItem OpenSwipeItem, bool Animated) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Mapper and CommandMapper for LayoutHandler in C#\nDESCRIPTION: These static properties define a Mapper and CommandMapper for the LayoutHandler, which map properties and commands for ILayout to ILayoutHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Flattening PathF in .NET MAUI\nDESCRIPTION: This method returns a flattened version of the path, with options to include sub-paths.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.GetFlattenedPath(float flatness = 0.001, bool includeSubPaths = false) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Converting Color to Skia SKColor\nDESCRIPTION: This static method transforms a Maui.Graphics.Color to a SkiaSharp.SKColor, including animation of opacity levels through alpha parameter for rich color manipulations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKColorExtensions.ToColor(this Microsoft.Maui.Graphics.Color target, float alpha = 1) -> SkiaSharp.SKColor\n```\n\n----------------------------------------\n\nTITLE: Defining Base Permission Methods in C#\nDESCRIPTION: Abstract class defining core permission checking and requesting functionality in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\nabstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\n```\n\n----------------------------------------\n\nTITLE: Text Layout Extensions for Android\nDESCRIPTION: Extension methods for calculating text layout dimensions and offsets in Android. These methods support alignment and measurement of text rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.GetOffsetsToDrawText(this Android.Text.StaticLayout target, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.GetTextSizeAsSizeF(this Android.Text.StaticLayout target, bool hasBoundedWidth) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Analyzing Android app launch times using adb logcat (bash)\nDESCRIPTION: This script uses `adb logcat` to filter and display log messages related to activity display times on an Android device or emulator. It's used to measure and compare app launch performance before and after AOT profile updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat -d | grep Displayed\n02-22 15:50:50.502  1802  1962 I ActivityTaskManager: Displayed com.companyname.foo/crc64808a40cc7e533249.MainActivity: +477ms\n02-22 15:50:51.703  1802  1962 I ActivityTaskManager: Displayed com.companyname.foo/crc64808a40cc7e533249.MainActivity: +477ms\n02-22 15:50:52.926  1802  1962 I ActivityTaskManager: Displayed com.companyname.foo/crc64808a40cc7e533249.MainActivity: +477ms\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Attributes in C#\nDESCRIPTION: These extension methods retrieve various text attributes such as background color, bold, font name, font size, etc. from ITextAttributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBackgroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBold(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontName(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontSize(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, float? fontSize = null) -> float\n```\n\n----------------------------------------\n\nTITLE: Defining MapType Enum in C# for MAUI Maps\nDESCRIPTION: Defines the MapType enum in the Microsoft.Maui.Maps namespace, specifying different types of map views available in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Maps.MapType.Hybrid = 2 -> Microsoft.Maui.Maps.MapType\nMicrosoft.Maui.Maps.MapType.Satellite = 1 -> Microsoft.Maui.Maps.MapType\nMicrosoft.Maui.Maps.MapType.Street = 0 -> Microsoft.Maui.Maps.MapType\n```\n\n----------------------------------------\n\nTITLE: Display Orientation Enumeration in MAUI\nDESCRIPTION: Defines the possible screen orientations for MAUI applications, including Portrait and Landscape modes\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.DisplayOrientation.Unknown = 0\nMicrosoft.Maui.Devices.DisplayOrientation.Portrait = 1\nMicrosoft.Maui.Devices.DisplayOrientation.Landscape = 2\n```\n\n----------------------------------------\n\nTITLE: Converting AttributedText to NSAttributedString in MAUI\nDESCRIPTION: This method converts a specified attributed text into NSAttributedString format. It allows for optional font context parameters. The output is an NSAttributedString object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.AttributedTextExtensions.AsNSAttributedString(this Microsoft.Maui.Graphics.Text.IAttributedText target, Microsoft.Maui.Graphics.IFont contextFont = null, float contextFontSize = 12, string contextFontColor = null, bool coreTextCompatible = false) -> Foundation.NSAttributedString\n```\n\n----------------------------------------\n\nTITLE: Accessing StyleClass Property in C#\nDESCRIPTION: These lines define the get and set accessors for the StyleClass property in a StyleableElement. The get accessor returns a list of strings while the set accessor does not return a value. This property is used to manage style classes associated with a UI element.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.get -> System.Collections.Generic.IList<string!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.set -> void\n```\n\n----------------------------------------\n\nTITLE: RefreshView Handler Methods in .NET MAUI\nDESCRIPTION: Static API methods for the RefreshViewHandler class that provide refresh functionality. Includes property and command mappers for the RefreshView control implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Constructing CheckBoxHandler in MAUI\nDESCRIPTION: Defines constructors for the `CheckBoxHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. The handler manages the platform-specific implementation of a MAUI CheckBox.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Creating System Fonts in MAUI\nDESCRIPTION: Static methods for creating system fonts with specified size, weight, and slant. These methods allow customization of font properties and enable scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: WindingMode Enum Constants in MAUI Graphics\nDESCRIPTION: Enumeration constants for Microsoft.Maui.Graphics.WindingMode, defining path fill rules that determine how overlapping shapes are rendered.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.WindingMode.NonZero = 0 -> Microsoft.Maui.Graphics.WindingMode\nMicrosoft.Maui.Graphics.WindingMode.EvenOdd = 1 -> Microsoft.Maui.Graphics.WindingMode\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Management Extensions in C#\nDESCRIPTION: Extensions for working with attributed text, including creating blocks, paragraphs, and optimizing text runs. These methods provide rich text manipulation capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateBlocks(this Microsoft.Maui.Graphics.Text.IAttributedText text) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.AttributedTextBlock>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphRun(this Microsoft.Maui.Graphics.Text.IAttributedText text, int start, int length, System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int startIndexForSearch = 0) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphs(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedText>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.Optimize(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Property Setters in C#\nDESCRIPTION: Method signatures for setting various properties of the PictureCanvas. These setters control properties related to font size, stroke appearance including stroke size, dash offset, line cap, line join, and miter limit.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.FontSize.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeSize.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeDashOffset.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeLineCap.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeLineJoin.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.MiterLimit.set -> void\n```\n\n----------------------------------------\n\nTITLE: Layout Handler Method Declarations - .NET MAUI C#\nDESCRIPTION: Static method declarations for handling layout operations in MAUI applications. Includes methods for adding, removing, and manipulating layout elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapAdd(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapRemove(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.LayoutHandler.MapClear(Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Run Operations Extensions in C#\nDESCRIPTION: Extensions for manipulating text runs, checking intersections, and optimizing collections of text runs. These methods provide efficient text segment management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.CalculatedIntersections(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.GetEnd(this Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Optimize(this System.Collections.Generic.List<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int textLength) -> void\n```\n\n----------------------------------------\n\nTITLE: Control-Specific Overrides\nDESCRIPTION: Override implementations for specific MAUI controls like TextField, TextView, and WebView. These methods handle control-specific behaviors and properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.MauiTextField.Text.get -> string?\noverride Microsoft.Maui.Platform.MauiTextField.Text.set -> void\noverride Microsoft.Maui.Platform.MauiTextField.WillMoveToWindow(UIKit.UIWindow? window) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Classes in MAUI ApplicationModel\nDESCRIPTION: Defines various permission classes in the Microsoft.Maui.ApplicationModel.Permissions namespace, including Battery, Bluetooth, Camera, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Battery.Battery() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Bluetooth.Bluetooth() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarRead.CalendarRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarWrite.CalendarWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Camera.Camera() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsRead.ContactsRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsWrite.ContactsWrite() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining FlexJustify Enum in .NET MAUI\nDESCRIPTION: This snippet defines the FlexJustify enumeration, which specifies how space is distributed along the main axis of a flex container. Various alignment options are provided, each associated with an integer value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.Center = 2 -> Microsoft.Maui.Layouts.FlexJustify\nMicrosoft.Maui.Layouts.FlexJustify.End = 4 -> Microsoft.Maui.Layouts.FlexJustify\nMicrosoft.Maui.Layouts.FlexJustify.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexJustify\nMicrosoft.Maui.Layouts.FlexJustify.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexJustify\nMicrosoft.Maui.Layouts.FlexJustify.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexJustify\nMicrosoft.Maui.Layouts.FlexJustify.Start = 3 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\n----------------------------------------\n\nTITLE: Filling Ellipse in W2DCanvas\nDESCRIPTION: This method fills an ellipse shape defined by its bounding box on the W2DCanvas. It takes float parameters for x, y coordinates, width, and height without returning a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.FillEllipse(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Lifecycle Event Registration Methods in .NET MAUI\nDESCRIPTION: Extension methods for registering iOS application lifecycle event handlers such as entering foreground, terminating, and scene coordinate updates. These methods allow MAUI applications to hook into the iOS application lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_167\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.SceneWillEnterForeground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.SceneWillEnterForeground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillEnterForeground(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillEnterForeground! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillFinishLaunching(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillFinishLaunching! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WillTerminate(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WillTerminate! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleBuilderExtensions.WindowSceneDidUpdateCoordinateSpace(this Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder! lifecycle, Microsoft.Maui.LifecycleEvents.iOSLifecycle.WindowSceneDidUpdateCoordinateSpace! del) -> Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Create Bitmap Export Context\nDESCRIPTION: This method creates a bitmap export context with specified width, height, and display scale. Dependencies include Maui Graphics and SkiaSharp libraries. It returns a BitmapExportContext representing the current state of the graphics setup.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.PlatformBitmapExportService.CreateContext(int width, int height, float displayScale = 1) -> Microsoft.Maui.Graphics.BitmapExportContext\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Interface Definition\nDESCRIPTION: Interface defining the contract for hybrid web view functionality including JavaScript evaluation and message handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IHybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.IHybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.IHybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\n```\n\n----------------------------------------\n\nTITLE: Drawing and Filling Rounded Rectangles in Microsoft.Maui.Graphics\nDESCRIPTION: This category of methods offers functionality to draw and fill rounded rectangles with precision provided by specifying corner radii. Useful in creating complex UI shapes. It supports various overloads for different rectangle types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRoundedRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect, float xRadius, float yRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha in W2DCanvas\nDESCRIPTION: This code overrides the alpha property in W2DCanvas, influencing the transparency of drawn elements. The method does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.Alpha.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Thickness struct in C#\nDESCRIPTION: Declares a struct for representing thickness values, including properties and constructors for different thickness configurations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Thickness\nMicrosoft.Maui.Thickness.Bottom.get -> double\nMicrosoft.Maui.Thickness.Bottom.set -> void\nMicrosoft.Maui.Thickness.Deconstruct(out double left, out double top, out double right, out double bottom) -> void\nMicrosoft.Maui.Thickness.HorizontalThickness.get -> double\nMicrosoft.Maui.Thickness.IsEmpty.get -> bool\nMicrosoft.Maui.Thickness.IsNaN.get -> bool\nMicrosoft.Maui.Thickness.Left.get -> double\nMicrosoft.Maui.Thickness.Left.set -> void\nMicrosoft.Maui.Thickness.Right.get -> double\nMicrosoft.Maui.Thickness.Right.set -> void\nMicrosoft.Maui.Thickness.Thickness() -> void\nMicrosoft.Maui.Thickness.Thickness(double horizontalSize, double verticalSize) -> void\nMicrosoft.Maui.Thickness.Thickness(double left, double top, double right, double bottom) -> void\nMicrosoft.Maui.Thickness.Thickness(double uniformSize) -> void\nMicrosoft.Maui.Thickness.Top.get -> double\nMicrosoft.Maui.Thickness.Top.set -> void\nMicrosoft.Maui.Thickness.VerticalThickness.get -> double\n```\n\n----------------------------------------\n\nTITLE: Defining LabelHandler Class in C#\nDESCRIPTION: Defines the LabelHandler class with multiple constructors, allowing for optional property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.LabelHandler\nMicrosoft.Maui.Handlers.LabelHandler.LabelHandler() -> void\nMicrosoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.LabelHandler.LabelHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: ShareFile Operations in MAUI DataTransfer\nDESCRIPTION: The 'ShareFile' operations facilitate file sharing in MAUI applications, offering overloaded constructors to initialize sharing with a file, filepath, or content type. These constructors are part of the Microsoft.Maui.ApplicationModel.DataTransfer namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath, string! contentType) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Circle Element Implementation in C#\nDESCRIPTION: Implements circular map element with properties for center location, radius and fill color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Circle {\n    public Location Center { get; set; }\n    public Paint Fill { get; }\n    public Color FillColor { get; set; }\n    public Distance Radius { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Diagnostics Methods in C#\nDESCRIPTION: Methods for managing and inspecting the visual tree in MAUI applications, including source info and child element management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.VisualDiagnostics.GetSourceInfo(object! obj) -> Microsoft.Maui.SourceInfo?\nstatic Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child) -> void\nstatic Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement? parent, Microsoft.Maui.IVisualTreeElement! child, int newLogicalIndex) -> void\nstatic Microsoft.Maui.VisualDiagnostics.OnChildRemoved(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child, int oldLogicalIndex) -> void\nstatic Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(object! target, System.Uri! uri, int lineNumber, int linePosition) -> void\nstatic Microsoft.Maui.VisualDiagnostics.VisualTreeChanged -> System.EventHandler<Microsoft.Maui.VisualTreeChangeEventArgs!>?\n```\n\n----------------------------------------\n\nTITLE: Skia Text Layout Constructor\nDESCRIPTION: Constructor for creating a text layout with advanced rendering options. Supports custom text attributes, layout callbacks, text flow configuration, and optional font specification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Applying Patterns in Microsoft.Maui.Graphics\nDESCRIPTION: This method enables applying patterns to canvas fills, providing options for color and pattern choice. It enhances graphical customization by allowing the use of different patterns for effect creation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern, Microsoft.Maui.Graphics.Color foregroundColor) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining PictureCommand Enum Values in C#\nDESCRIPTION: This snippet defines enum values for the PictureCommand enum in the Microsoft.Maui.Graphics namespace. These values represent various drawing and state management commands.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.FontSize = 52 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.LimitStrokeScaling = 37 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ResetState = 102 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RestoreState = 101 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Rotate = 62 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RotateAtPoint = 63 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SaveState = 100 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Scale = 60 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Shadow = 70 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeBrush = 39 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeColor = 31 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeDashPattern = 32 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLimit = 38 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineCap = 33 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineJoin = 34 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLocation = 35 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeMiterLimit = 36 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeSize = 30 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractFromClip = 80 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractPathFromClip = 83 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SystemFont = 110 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Translate = 61 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Defining IVersionTracking Interface in C#\nDESCRIPTION: Defines the IVersionTracking interface with properties and methods for tracking application versions and builds.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking\nMicrosoft.Maui.ApplicationModel.IVersionTracking.BuildHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledVersion.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchEver.get -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForBuild(string! build) -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForVersion(string! version) -> bool\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousBuild.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.PreviousVersion.get -> string?\nMicrosoft.Maui.ApplicationModel.IVersionTracking.Track() -> void\nMicrosoft.Maui.ApplicationModel.IVersionTracking.VersionHistory.get -> System.Collections.Generic.IReadOnlyList<string!>!\n```\n\n----------------------------------------\n\nTITLE: Creating MAUI Application\nDESCRIPTION: This snippet defines an abstract method for creating a MAUI application, returning an instance of 'MauiApp'. This is the entry point for all MAUI applications and defines the app configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.MauiWinUIApplication.CreateMauiApp() -> Microsoft.Maui.Hosting.MauiApp!\n```\n\n----------------------------------------\n\nTITLE: Declaring ImageButtonHandler Class in C#\nDESCRIPTION: Defines the ImageButtonHandler class with multiple constructors for handling ImageButton controls in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: BasePermission EnsureDeclared abstract method in MAUI\nDESCRIPTION: This abstract method ensures that the necessary declarations for a permission are present. This method is designed to be implemented in derived classes to handle platform-specific declaration requirements. It takes no parameters and returns void.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n\"abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.EnsureDeclared() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Overriding ScrollViewHandler Methods for Tizen Platform\nDESCRIPTION: These methods override ScrollViewHandler functionality to create, connect, and disconnect Tizen.UIExtensions.NUI.ScrollView elements for the Tizen implementation of MAUI scroll views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(Tizen.UIExtensions.NUI.ScrollView! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.CreatePlatformView() -> Tizen.UIExtensions.NUI.ScrollView!\noverride Microsoft.Maui.Handlers.ScrollViewHandler.DisconnectHandler(Tizen.UIExtensions.NUI.ScrollView! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Maui Asset Deployment in XML\nDESCRIPTION: This XML directive uses the MauiAsset Build Action to ensure that all raw assets located in the Resources\\Raw directory and its subdirectories are included in the application package. The 'Include' attribute specifies the file pattern, and 'LogicalName' defines how these files are referenced within the application. This configuration is necessary for assets to be properly deployed with the application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-blazor-solution/MauiApp.1/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: MAUI Embedded App Extension Methods\nDESCRIPTION: Generic extension methods for configuring embedded MAUI applications with optional implementation factory\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Element Handler Extensions\nDESCRIPTION: Static extension methods for IElementHandler interface providing service resolution and connection state checking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ElementHandlerExtensions.GetRequiredService<T>(this Microsoft.Maui.IElementHandler! handler, System.Type! type) -> T\nstatic Microsoft.Maui.ElementHandlerExtensions.GetService<T>(this Microsoft.Maui.IElementHandler! handler) -> T?\nstatic Microsoft.Maui.ElementHandlerExtensions.IsConnected(this Microsoft.Maui.IElementHandler! handler) -> bool\n```\n\n----------------------------------------\n\nTITLE: Removing Menu Element in Menu Flyout Handler in C#\nDESCRIPTION: This snippet describes a method that removes a given menu element from the menu flyout. It takes a single parameter, 'view', which is the menu element to be removed from the handler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Separating PathF Segments in .NET MAUI\nDESCRIPTION: This method separates the path into distinct segments within a list.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Separate() -> System.Collections.Generic.List<Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting the TitleBar in Window C#\nDESCRIPTION: Get and set accessors for a TitleBar in a Window interface, facilitating adjustments and configurations of title bar elements and aesthetics within a window context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Window.TitleBar.get -> Microsoft.Maui.ITitleBar?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Window.TitleBar.set -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Platform View Implementation\nDESCRIPTION: Abstract and virtual method declarations for platform-specific view implementations including layout management and drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nabstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\nabstract Microsoft.Maui.PlatformContentViewGroup.GetClipPath(int p0, int p1) -> Android.Graphics.Path?\nabstract Microsoft.Maui.PlatformWrapperView.DrawShadow(Android.Graphics.Canvas! p0, int p1, int p2) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating XmlnsPrefixAttribute in C#\nDESCRIPTION: This snippet defines a constructor for XmlnsPrefixAttribute, initializing it with an XML namespace and a prefix.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.XmlnsPrefixAttribute(string xmlNamespace, string prefix) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Handling Classes\nDESCRIPTION: Classes and enums for handling text attributes including formatting, markers, and XML reading/writing capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.TextAttribute.FontName = 0 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Bold = 2 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Italic = 3 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.MarkerType.ClosedCircle = 0 -> Microsoft.Maui.Graphics.Text.MarkerType\n```\n\n----------------------------------------\n\nTITLE: Font Static Methods in MAUI Graphics\nDESCRIPTION: Static methods and properties for Microsoft.Maui.Graphics.Font, providing access to default fonts and equality comparisons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Font.Default.get -> Microsoft.Maui.Graphics.Font\nstatic Microsoft.Maui.Graphics.Font.DefaultBold.get -> Microsoft.Maui.Graphics.Font\nstatic Microsoft.Maui.Graphics.Font.operator ==(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool\nstatic Microsoft.Maui.Graphics.Font.operator !=(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Accessing Bitmap Export Context in C#\nDESCRIPTION: This snippet includes getter methods to access the canvas and image properties of the PlatformBitmapExportContext class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformBitmapExportContext.Canvas.get -> Microsoft.Maui.Graphics.ICanvas\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformBitmapExportContext.Image.get -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Navigation Modes with Microsoft.Maui\nDESCRIPTION: Enumerates navigation modes provided by Microsoft.Maui, including Walking and Driving. These modes are part of the NavigationMode enumeration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Bicycling = 2 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Default = 1 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Driving = 3 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.None = 0 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Transit = 4 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Walking = 5 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\n----------------------------------------\n\nTITLE: Converting Path to Definition String in MAUI (C#)\nDESCRIPTION: This method converts a PathF instance to its corresponding SVG definition string, allowing for easy serialization and further processing of the path.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.PathExtensions.ToDefinitionString(this Microsoft.Maui.Graphics.PathF path, float ppu = 1) -> string\n```\n\n----------------------------------------\n\nTITLE: Picture Extensions in Microsoft.Maui.Graphics\nDESCRIPTION: Methods for working with IPicture objects, including getting bounds and reading/writing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureExtensions.GetBounds(this Microsoft.Maui.Graphics.IPicture target) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.PictureReaderExtensions.Read(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> Microsoft.Maui.Graphics.IPicture\nstatic Microsoft.Maui.Graphics.PictureReaderExtensions.ReadAsync(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Graphics.IPicture>\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBase64(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> string\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytes(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> byte[]\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytesAsync(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsStream(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: Picture Extensions for Microsoft.Maui.Graphics.IPicture\nDESCRIPTION: Extension methods for IPicture interface to get bounds information. This extension provides geometry information about picture objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureExtensions.GetBounds(this Microsoft.Maui.Graphics.IPicture target) -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Font and Style Management in MAUI Graphics\nDESCRIPTION: Provides font-related types and enumerations for managing font styles, weights, and sources with flexible configuration options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Font.Font()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.FontStyleType.Normal = 0\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.FontSource.FontSource(string filename, int weight = 400, Microsoft.Maui.Graphics.FontStyleType fontStyleType = Microsoft.Maui.Graphics.FontStyleType.Normal)\n```\n\n----------------------------------------\n\nTITLE: Display Orientation Enumeration in MAUI\nDESCRIPTION: Enumeration defining the possible display orientations in MAUI applications. Includes Unknown, Portrait, and Landscape orientation values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.DisplayOrientation.Unknown = 0 -> Microsoft.Maui.Devices.DisplayOrientation\nMicrosoft.Maui.Devices.DisplayOrientation.Portrait = 1 -> Microsoft.Maui.Devices.DisplayOrientation\nMicrosoft.Maui.Devices.DisplayOrientation.Landscape = 2 -> Microsoft.Maui.Devices.DisplayOrientation\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for setting text alignment on Android EditText and TextView controls based on MAUI TextAlignment values. These methods handle both horizontal and vertical text positioning.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_174\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextAlignmentExtensions.UpdateTextAlignment(this Android.Widget.EditText! view, Microsoft.Maui.TextAlignment horizontal, Microsoft.Maui.TextAlignment vertical) -> void\nstatic Microsoft.Maui.Platform.TextAlignmentExtensions.UpdateVerticalAlignment(this Android.Widget.EditText! view, Microsoft.Maui.TextAlignment alignment, Android.Views.GravityFlags orMask = Android.Views.GravityFlags.AxisXShift) -> void\nstatic Microsoft.Maui.Platform.TextAlignmentExtensions.UpdateVerticalAlignment(this Android.Widget.TextView! view, Microsoft.Maui.TextAlignment alignment, Android.Views.GravityFlags orMask = Android.Views.GravityFlags.AxisXShift) -> void\n```\n\n----------------------------------------\n\nTITLE: Orientation Sensor Data - C# .NET MAUI\nDESCRIPTION: Defines the data structure for orientation sensor readings, including methods for equating orientation data. This functionality is essential for reading changes in device orientation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Equals(Microsoft.Maui.Devices.Sensors.OrientationSensorData other) -> bool\n```\n\n----------------------------------------\n\nTITLE: Picker Handler Property Mappings in C#\nDESCRIPTION: Static methods for mapping Picker control properties like SelectedIndex, TextColor, Title, TitleColor and VerticalTextAlignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.MapSelectedIndex(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTextColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitle(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapTitleColor(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\nstatic Microsoft.Maui.Handlers.PickerHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: SwitchHandler Mappings in MAUI\nDESCRIPTION: Static methods for handling Switch controls in MAUI, including state (on/off) and customization properties for thumb and track colors. Provides command and property mappers for complete switch functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapIsOn(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwitch!, Microsoft.Maui.Handlers.ISwitchHandler!>!\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: MapSpan Geographic Region Implementation\nDESCRIPTION: Class for defining map regions with center location and span distances\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MapSpan {\n    public MapSpan(Location center, double latitudeDegrees, double longitudeDegrees);\n    public Location Center { get; }\n    public double LatitudeDegrees { get; }\n    public double LongitudeDegrees { get; }\n    public Distance Radius { get; }\n    public MapSpan WithZoom(double zoomFactor);\n    public MapSpan ClampLatitude(double north, double south);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString Method for Graphics Objects in .NET MAUI\nDESCRIPTION: These overrides implement the `ToString` method for several Microsoft.Maui.Graphics objects including `GradientPaint`, `Insets`, `InsetsF`, `Point`, `PointF`, `Rect`, `RectF`, `Size`, `SizeF`, `SolidPaint`, `AttributedTextBlock`, and `AttributedTextRun`, and `CountingWriter`. These methods provide string representations of these objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.GradientPaint.ToString() -> string\n~override Microsoft.Maui.Graphics.Insets.ToString() -> string\n~override Microsoft.Maui.Graphics.InsetsF.ToString() -> string\n~override Microsoft.Maui.Graphics.Point.ToString() -> string\n~override Microsoft.Maui.Graphics.PointF.ToString() -> string\n~override Microsoft.Maui.Graphics.Rect.ToString() -> string\n~override Microsoft.Maui.Graphics.RectF.ToString() -> string\n~override Microsoft.Maui.Graphics.Size.ToString() -> string\n~override Microsoft.Maui.Graphics.SizeF.ToString() -> string\n~override Microsoft.Maui.Graphics.SolidPaint.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.AttributedTextBlock.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.AttributedTextRun.ToString() -> string\n~override Microsoft.Maui.Graphics.Text.CountingWriter.ToString() -> string\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Methods for Microsoft.Maui.Graphics.SizeF in C#\nDESCRIPTION: This snippet defines static methods for the SizeF struct, including type conversions, arithmetic operators, and equality comparisons. These methods provide functionality for manipulating and comparing SizeF objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceInfo Interface in C#\nDESCRIPTION: Defines the IDeviceInfo interface with properties for device information in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nMicrosoft.Maui.Devices.IDeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nMicrosoft.Maui.Devices.IDeviceInfo.Manufacturer.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Model.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Name.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nMicrosoft.Maui.Devices.IDeviceInfo.Version.get -> System.Version!\nMicrosoft.Maui.Devices.IDeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: FontWeights Constants in C#\nDESCRIPTION: Defines constants for font weight values in the Microsoft.Maui.Graphics.FontWeights class, providing standard weight values for text rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.FontWeights.Default = -1 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Thin = 100 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraLight = 200 -> int\nconst Microsoft.Maui.Graphics.FontWeights.UltraLight = 200 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Light = 300 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Normal = 400 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Regular = 400 -> int\nconst Microsoft.Maui.Graphics.FontWeights.SemiLight = 400 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Medium = 500 -> int\nconst Microsoft.Maui.Graphics.FontWeights.DemiBold = 600 -> int\nconst Microsoft.Maui.Graphics.FontWeights.SemiBold = 600 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraBold = 800 -> int\nconst Microsoft.Maui.Graphics.FontWeights.UltraBold = 800 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Heavy = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraBlack = 950 -> int\nconst Microsoft.Maui.Graphics.FontWeights.UltraBlack = 950 -> int\n```\n\n----------------------------------------\n\nTITLE: Mapping DatePicker Properties in Microsoft.Maui\nDESCRIPTION: Static methods from DatePickerHandler class that map various IDatePicker properties to platform-specific implementations. These methods handle font, format, maximum/minimum date, text color, and other properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMaximumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapMinimumDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapTextColor(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Running Asynchronous Operations in .NET MAUI\nDESCRIPTION: Defines methods for executing asynchronous tasks in the context of .NET MAUI graphics rendering, enabling non-blocking graphic operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Win2D.AsyncPump.Run(System.Func<System.Threading.Tasks.Task> func) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Win2D.AsyncPump.Run<T>(System.Func<System.Threading.Tasks.Task<T>> asyncMethod) -> T\n```\n\n----------------------------------------\n\nTITLE: Moving to Coordinate in PathF in .NET MAUI\nDESCRIPTION: These methods set the current position in the path to a specified coordinate or PointF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.MoveTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.MoveTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Defining Line Break Modes in Microsoft MAUI\nDESCRIPTION: This snippet defines various line break modes in Microsoft MAUI, which control text wrapping and truncation behaviors in UI elements. This is essential for managing how text appears within constrained spaces in user interfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.LineBreakMode.CharacterWrap = 2 -> Microsoft.Maui.LineBreakMode\nMicrosoft.Maui.LineBreakMode.HeadTruncation = 3 -> Microsoft.Maui.LineBreakMode\nMicrosoft.Maui.LineBreakMode.MiddleTruncation = 5 -> Microsoft.Maui.LineBreakMode\nMicrosoft.Maui.LineBreakMode.NoWrap = 0 -> Microsoft.Maui.LineBreakMode\nMicrosoft.Maui.LineBreakMode.TailTruncation = 4 -> Microsoft.Maui.LineBreakMode\nMicrosoft.Maui.LineBreakMode.WordWrap = 1 -> Microsoft.Maui.LineBreakMode\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Extension Methods\nDESCRIPTION: Collection of static extension methods for retrieving and setting various text attributes like font properties, colors, and text styles\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBackgroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\n```\n\n----------------------------------------\n\nTITLE: Menu Handlers Static Mappings - C#\nDESCRIPTION: Static methods for handling menu-related operations including MenuBar, MenuFlyout and their sub-components. Contains mappers for menu item management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Font and Paint Extension Methods\nDESCRIPTION: Static methods for handling font files and paint operations including gradient, pattern, and solid paint conversions to drawables.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.ImagePaint! imagePaint) -> Microsoft.Maui.MauiDrawable?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint) -> Microsoft.Maui.MauiDrawable?\n```\n\n----------------------------------------\n\nTITLE: Checking Dimension Properties in C#\nDESCRIPTION: These methods check if specific dimension properties (explicit, maximum, minimum) are set for a given value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_185\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.IsExplicitSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.IsMaximumSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.IsMinimumSet(double value) -> bool\n```\n\n----------------------------------------\n\nTITLE: Managing Canvas Properties in .NET MAUI\nDESCRIPTION: This collection of snippets shows how to manage various properties of canvas state, such as stroke color, canvas state restoration, and saving.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.StrokeColor.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Win2D.W2DCanvas.StateRestored(Microsoft.Maui.Graphics.Win2D.W2DCanvasState state) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Win2D.W2DCanvas.SaveRenderTargetState() -> void\n```\n\n----------------------------------------\n\nTITLE: Clip Management in Microsoft.Maui.Graphics\nDESCRIPTION: These methods subtract defined rectangle clips from the existing clip region on the canvas. Useful in complex graphic designs where part of the canvas needs to be excluded from drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SubtractFromClip(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Flex Layout Manager Operations\nDESCRIPTION: Methods for managing child layout arrangements within a Flex Layout and measuring their sizes according to specified constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexLayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexLayoutManager.FlexLayoutManager(Microsoft.Maui.IFlexLayout! flexLayout) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexLayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Implementing Polyline Class for Map Lines\nDESCRIPTION: Defines the Polyline class for representing line shapes on maps, including methods for managing geopath points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Polyline\nMicrosoft.Maui.Controls.Maps.Polyline.Add(Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Clear() -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Contains(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.CopyTo(Microsoft.Maui.Devices.Sensors.Location![]! array, int arrayIndex) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Count.get -> int\nMicrosoft.Maui.Controls.Maps.Polyline.Geopath.get -> System.Collections.Generic.IList<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polyline.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polyline.IndexOf(Microsoft.Maui.Devices.Sensors.Location! item) -> int\nMicrosoft.Maui.Controls.Maps.Polyline.Insert(int index, Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.IsReadOnly.get -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.Polyline() -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Remove(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.RemoveAt(int index) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.this[int index].get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Polyline.this[int index].set -> void\n```\n\n----------------------------------------\n\nTITLE: StepperHandler Static Properties in .NET MAUI\nDESCRIPTION: Static properties for the StepperHandler class that define mappers for stepper control customization, including CommandMapper for handling commands and Mapper for handling general properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\nstatic Microsoft.Maui.Handlers.StepperHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Setting Text Attributes Margin and Alignment in MAUI\nDESCRIPTION: This snippet outlines the property setters and getters for text attribute margins and vertical alignment within Microsoft MAUI graphics. The functionality allows developers to adjust text presentation within their applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ITextAttributes.Margin.set -> void\nMicrosoft.Maui.Graphics.ITextAttributes.VerticalAlignment.get -> Microsoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.ITextAttributes.VerticalAlignment.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Text from IAttributedText in C#\nDESCRIPTION: This snippet provides a getter for retrieving the text content from an IAttributedText instance, returning it as a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.IAttributedText.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: Managing Dispatch Timers - Microsoft MAUI - CSharp\nDESCRIPTION: This segment provides functionality for creating and managing dispatcher timers within the Microsoft MAUI framework. It includes methods to create timers and dispatch actions with potential delays. Key inputs include actions and time spans with outputs managing the execution of scheduled tasks. Dependencies are within Microsoft.Maui.Dispatching.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.Dispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.Dispatcher.Dispatch(System.Action! action) -> bool\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.Dispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Dispatching.Dispatcher.IsDispatchRequired.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Extending IImageSource for Asynchronous Image Loading with Callback in C#\nDESCRIPTION: This extension method provides a way to load images asynchronously using IImageSource. It takes a MAUI context and an optional callback action as parameters. The method doesn't return a value but invokes the callback with the loaded image result.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.LoadImage(this Microsoft.Maui.IImageSource? source, Microsoft.Maui.IMauiContext! mauiContext, System.Action<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>? finished = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Handling Display Density Change\nDESCRIPTION: Responds to changes in display density, which can affect UI layout and scaling to ensure proper appearance on devices.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing SetInvokeJavaScriptTarget for HybridWebView in C#\nDESCRIPTION: Defines a generic method SetInvokeJavaScriptTarget for the HybridWebView class in the Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.SetInvokeJavaScriptTarget<T>(T! target) -> void\n```\n\n----------------------------------------\n\nTITLE: Layout Text with SkiaTextLayout Utility in C#\nDESCRIPTION: The SkiaTextLayout constructor initializes text layout with specified attributes, including the text string, layout rectangle, text attributes, and flow control with optional font settings. It is designed for handling complex text styling and layout in Skia graphics. Inputs are detailed specifications for text rendering, and no outputs are returned.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Virtual GetVisibleItemsIndex Method (ItemsViewDelegator)\nDESCRIPTION: This code defines a virtual method `GetVisibleItemsIndex` within the `ItemsViewDelegator2` class.  This method likely retrieves the indices of the visible items in the `ItemsView`, providing information about the first, center, and last visible items, and returning a tuple with visibility status and indices.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewDelegator2<TItemsView, TViewController>.GetVisibleItemsIndex() -> (bool VisibleItems, int First, int Center, int Last)\"\n```\n\n----------------------------------------\n\nTITLE: Defining IVisualDiagnosticsOverlay Interface in C#\nDESCRIPTION: Defines the IVisualDiagnosticsOverlay interface with methods for managing adorners, scroll views, and element selection in visual diagnostics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToElement) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToElement) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! view) -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.get -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.EnableElementSelector.set -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners() -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.get -> bool\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollToElement.set -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void\nMicrosoft.Maui.IVisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!\n```\n\n----------------------------------------\n\nTITLE: Launcher and Map Static Methods in C#\nDESCRIPTION: Static method declarations for launching external applications and opening maps with locations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: MapSpan Equality Operator Overload\nDESCRIPTION: Static operator overload that compares two MapSpan instances for equality. Returns a boolean indicating whether the two map regions are identical.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining IndicatorViewHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the IndicatorViewHandler class, including property mappers and methods for handling various properties of an IndicatorView such as count, color, shape, size, and position.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapCount(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapHideSingle(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorShape(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapIndicatorSize(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapMaximumVisible(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IIndicatorView!, Microsoft.Maui.Handlers.IIndicatorViewHandler!>!\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapPosition(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapSelectedIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Lifecycle Event Configuration in .NET MAUI\nDESCRIPTION: Extension methods for configuring lifecycle events in a cross-platform manner. These methods provide a way to register and invoke platform-agnostic lifecycle events in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_168\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.iOSLifecycleExtensions.AddiOS(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.IiOSLifecycleBuilder!>! configureDelegate) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName, System.Action<TDelegate!>! action) -> void\nstatic Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a SkiaSharp Font in C#\nDESCRIPTION: This method extension creates a copy of a SkiaSharp SKFont object, allowing for easier manipulation and management of font properties within applications using the .NET MAUI framework. It requires SkiaSharp as a dependency.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable Attributed Text\nDESCRIPTION: Initializes MutableAttributedText with the provided string. The constructor accepts 'text' as a parameter. No output is provided, and it focuses on internal text setup.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.MutableAttributedText.MutableAttributedText(string text) -> void\n```\n\n----------------------------------------\n\nTITLE: Readonly Field Declarations in .NET MAUI\nDESCRIPTION: Readonly field declarations for the LockableObservableListWrapper and PropertyMapper classes. These fields store the underlying collection and property mapping dictionary respectively.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.LockableObservableListWrapper._list -> System.Collections.ObjectModel.ObservableCollection<string!>!\nreadonly Microsoft.Maui.PropertyMapper._mapper -> System.Collections.Generic.Dictionary<string!, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>!>!\n```\n\n----------------------------------------\n\nTITLE: Copying SKPaint - Skia\nDESCRIPTION: This snippet describes a static extension method 'CreateCopy' for the SKPaint class in SkiaSharp, allowing for the copying of paint settings. The copied paint can be modified without affecting the original.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKPaintExtensions.CreateCopy(this SkiaSharp.SKPaint paint) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for SizeFTypeConverter in C#\nDESCRIPTION: This snippet outlines methods for the SizeFTypeConverter to manage type conversions for size floating types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Export Context in .NET MAUI\nDESCRIPTION: This snippet defines the CreateContext method, which initializes a bitmap export context specified by the width and height parameters, with an optional display scale. It is essential for rendering graphics in the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DBitmapExportService.CreateContext(int width, int height, float displayScale = 1) -> Microsoft.Maui.Graphics.BitmapExportContext\n```\n\n----------------------------------------\n\nTITLE: Setting Text Attributes in C#\nDESCRIPTION: These extension methods set various text attributes such as background color, bold, font name, font size, etc. on a Dictionary<TextAttribute, string>.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBackgroundColor(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetBold(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, bool value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontName(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, string value) -> void\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.SetFontSize(this System.Collections.Generic.Dictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> attributes, float value) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Canvas Drawing Session in .NET MAUI\nDESCRIPTION: This snippet deals with accessing the drawing session of a W2DCanvas. It includes getter and setter methods for the drawing session, which is crucial for managing canvas operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvas.Session.get -> Microsoft.Graphics.Canvas.CanvasDrawingSession\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvas.Session.set -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Strings in PictureCanvas\nDESCRIPTION: This snippet outlines methods in the PictureCanvas class for drawing strings in various formats and alignment settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\n```\n\n----------------------------------------\n\nTITLE: Override OnApplyTemplate Method (TitleBar)\nDESCRIPTION: This code snippet presents an override of the OnApplyTemplate method within the TitleBar class. This likely involves customizing the application of a control template to the title bar, enabling modification of its visual structure or behavior within a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.TitleBar.OnApplyTemplate() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Convert PathF to UIBezierPath in MAUI\nDESCRIPTION: This method converts a PathF object to a UIKit UIBezierPath. This transformation is critical for utilizing MAUI graphics in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIKitExtensions.AsUIBezierPath(this Microsoft.Maui.Graphics.PathF target) -> UIKit.UIBezierPath\n```\n\n----------------------------------------\n\nTITLE: Defining IDeviceInfo Interface in C#\nDESCRIPTION: Interface for accessing device information in MAUI, including device type, idiom, manufacturer, model, name, platform, and version.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceInfo\nMicrosoft.Maui.Devices.IDeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nMicrosoft.Maui.Devices.IDeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nMicrosoft.Maui.Devices.IDeviceInfo.Manufacturer.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Model.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Name.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nMicrosoft.Maui.Devices.IDeviceInfo.Version.get -> System.Version!\nMicrosoft.Maui.Devices.IDeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining IPattern Interface in C#\nDESCRIPTION: Defines the IPattern interface with properties for Height, StepX, StepY, and Width in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPattern\nMicrosoft.Maui.Graphics.IPattern.Height.get -> float\nMicrosoft.Maui.Graphics.IPattern.StepX.get -> float\nMicrosoft.Maui.Graphics.IPattern.StepY.get -> float\nMicrosoft.Maui.Graphics.IPattern.Width.get -> float\n```\n\n----------------------------------------\n\nTITLE: Defining Equality Operators for CornerRadius in C#\nDESCRIPTION: Implements equality (==) and inequality (!=) operators for the Microsoft.Maui.CornerRadius struct. These operators allow for direct comparison of CornerRadius objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CornerRadius.operator !=(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\nstatic Microsoft.Maui.CornerRadius.operator ==(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\n```\n\n----------------------------------------\n\nTITLE: FontSource Properties in MAUI Graphics\nDESCRIPTION: Read-only property definitions for Microsoft.Maui.Graphics.FontSource, providing access to font name, weight, and style information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.Graphics.FontSource.Name -> string!\nreadonly Microsoft.Maui.Graphics.FontSource.Weight -> int\nreadonly Microsoft.Maui.Graphics.FontSource.FontStyleType -> Microsoft.Maui.Graphics.FontStyleType\n```\n\n----------------------------------------\n\nTITLE: Starting Gyroscope Monitoring - C# .NET MAUI\nDESCRIPTION: Initiates monitoring of gyroscope data with a specified sensor speed. This method does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeView Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for SwipeViewHandler responsible for mapping properties and handling events for the SwipeView control. Includes methods for handling open/close requests and configuration of swipe items.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Working with Paint Gradient Stops in .NET MAUI\nDESCRIPTION: This snippet covers the PaintGradientStop class, including properties for color and method for comparing gradient stops.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.Color.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.Color.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.CompareTo(Microsoft.Maui.Graphics.PaintGradientStop obj) -> int\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(float offset, Microsoft.Maui.Graphics.Color color) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(Microsoft.Maui.Graphics.PaintGradientStop source) -> void\n```\n\n----------------------------------------\n\nTITLE: RadioButton Extensions in MAUI for Android\nDESCRIPTION: Extension methods for Android RadioButton control implementation in MAUI. These methods handle updating various properties like background, content, corner radius, checked state, and stroke appearance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_162\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.RadioButtonExtensions.UpdateBackground(this AndroidX.AppCompat.Widget.AppCompatRadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Platform.RadioButtonExtensions.UpdateContent(this AndroidX.AppCompat.Widget.AppCompatRadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Platform.RadioButtonExtensions.UpdateCornerRadius(this AndroidX.AppCompat.Widget.AppCompatRadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Platform.RadioButtonExtensions.UpdateIsChecked(this AndroidX.AppCompat.Widget.AppCompatRadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Platform.RadioButtonExtensions.UpdateStrokeColor(this AndroidX.AppCompat.Widget.AppCompatRadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Platform.RadioButtonExtensions.UpdateStrokeThickness(this AndroidX.AppCompat.Widget.AppCompatRadioButton! platformRadioButton, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Properties in C# for Microsoft.Maui\nDESCRIPTION: This snippet defines static properties for different keyboard types in the Microsoft.Maui.Keyboard class. It includes properties for Telephone, Text, and URL keyboards.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Keyboard.Telephone.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Text.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Url.get -> Microsoft.Maui.Keyboard!\n```\n\n----------------------------------------\n\nTITLE: Share Functionality in .NET MAUI\nDESCRIPTION: Methods for sharing content with other apps, including text and files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IShare!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text, string! title) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Border Handler Platform Arrangement\nDESCRIPTION: Override method for handling platform-specific arrangement of border elements using rectangle coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.BorderHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Enumeration Definition in C#\nDESCRIPTION: Definition of TextAttribute enumeration in Microsoft.Maui.Graphics.Text namespace that defines various text formatting options like font properties, styling, and decoration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.FontName = 0 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.FontSize = 1 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Bold = 2 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Italic = 3 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Underline = 4 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Strikethrough = 5 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Subscript = 6 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Superscript = 7 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Color = 8 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Background = 9 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.UnorderedList = 10 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Marker = 11 -> Microsoft.Maui.Graphics.Text.TextAttribute\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Base Mappings in MAUI\nDESCRIPTION: Static methods for handling core View properties in MAUI, including positioning, sizing, automation, visual attributes, and input handling. These form the foundation for all visual elements in the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBorderView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapClip(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContainerView(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapContextFlyout(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFlowDirection(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFocus(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapFrame(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInputTransparent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapInvalidateMeasure(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view, object? args) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapIsEnabled(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMaximumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumHeight(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapMinimumWidth(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapOpacity(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapRotation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Clipping a Path on Canvas in .NET MAUI\nDESCRIPTION: This method clips the current path on the canvas using a specified winding mode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n```\n\n----------------------------------------\n\nTITLE: Handling Platform-Specific Functions and Permissions in Microsoft.Maui Application Model C#\nDESCRIPTION: This section defines several platform-specific methods in `Microsoft.Maui.ApplicationModel.Platform`, such as continuing user activity, getting the current UIViewController, and open URL functionality. It also includes permission-related methods such as setting `LocationTimeout`. Knowledge of UIKit and Foundation in iOS development is required.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Platform.ContinueUserActivity(UIKit.UIApplication! application, Foundation.NSUserActivity! userActivity, UIKit.UIApplicationRestorationHandler! completionHandler) -> bool\nstatic Microsoft.Maui.ApplicationModel.Platform.GetCurrentUIViewController() -> UIKit.UIViewController?\nstatic Microsoft.Maui.ApplicationModel.Platform.Init(System.Func<UIKit.UIViewController!>? getCurrentUIViewController) -> void\nstatic Microsoft.Maui.ApplicationModel.Platform.OpenUrl(UIKit.UIApplication! app, Foundation.NSUrl! url, Foundation.NSDictionary! options) -> bool\nstatic Microsoft.Maui.ApplicationModel.Platform.PerformActionForShortcutItem(UIKit.UIApplication! application, UIKit.UIApplicationShortcutItem! shortcutItem, UIKit.UIOperationHandler! completionHandler) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Permissions.LocationTimeout.get -> System.TimeSpan\nstatic Microsoft.Maui.ApplicationModel.Permissions.LocationTimeout.set -> void\n```\n\n----------------------------------------\n\nTITLE: Type Declarations in .NET MAUI for XAML and Embedding\nDESCRIPTION: A set of C# nullable-enabled type signatures for .NET MAUI, including TemplateBindingExtension properties, EmbeddingExtensions methods for embedded MAUI apps, resource dictionary helpers, and value target providers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\nMicrosoft.Maui.Controls.Embedding.EmbeddingExtensions\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\nMicrosoft.Maui.Controls.Xaml.ResourceDictionaryHelpers\n```\n\n----------------------------------------\n\nTITLE: Paint Class Properties\nDESCRIPTION: Property getter and setter signatures for background and foreground colors in the Paint class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Paint.BackgroundColor.get -> Microsoft.Maui.Graphics.Color\nMicrosoft.Maui.Graphics.Paint.BackgroundColor.set -> void\nMicrosoft.Maui.Graphics.Paint.ForegroundColor.get -> Microsoft.Maui.Graphics.Color\nMicrosoft.Maui.Graphics.Paint.ForegroundColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing IndicatorViewHandler in .NET MAUI\nDESCRIPTION: This snippet involves constructors for the IndicatorViewHandler, which manages indicators for UI elements. They allow configuration through property and command mappings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IndicatorViewHandler.IndicatorViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: DisplayInfo Equality Operators in MAUI C# API\nDESCRIPTION: Equality comparison operators for the DisplayInfo struct, allowing comparison between two DisplayInfo instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DisplayInfo.operator !=(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\nstatic Microsoft.Maui.Devices.DisplayInfo.operator ==(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting String Size in .NET MAUI\nDESCRIPTION: This method retrieves the size of a given string based on font parameters, including alignment options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: MAUI Core Interface Definitions in C#\nDESCRIPTION: Comprehensive collection of .NET MAUI interface definitions that define the core functionality and structure of MAUI applications. These interfaces cover UI controls, layouts, image handling, and application lifecycle management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IAbsoluteLayout.GetLayoutFlags(Microsoft.Maui.IView! view) -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.IActivationState\nMicrosoft.Maui.IActivationState.Context.get -> Microsoft.Maui.IMauiContext!\nMicrosoft.Maui.IActivationState.State.get -> Microsoft.Maui.IPersistedState!\nMicrosoft.Maui.IActivityIndicator\nMicrosoft.Maui.IActivityIndicator.Color.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.IActivityIndicator.IsRunning.get -> bool\n// ... additional interface definitions\n```\n\n----------------------------------------\n\nTITLE: RadioButtonHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the RadioButtonHandler class in Microsoft.Maui that handle various properties of a radio button such as text styling, checked state, and visual appearance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Pattern Extension Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Methods to convert IPattern objects to Paint objects, with options for foreground color specification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target, Microsoft.Maui.Graphics.Color foregroundColor) -> Microsoft.Maui.Graphics.Paint\nstatic Microsoft.Maui.Graphics.PatternExtensions.AsPaint(this Microsoft.Maui.Graphics.IPattern target) -> Microsoft.Maui.Graphics.Paint\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardAcceleratorModifiers Enumeration in C#\nDESCRIPTION: This snippet defines the KeyboardAcceleratorModifiers enumeration in the Microsoft.Maui namespace. It includes various keyboard modifier flags such as Alt, Cmd, Ctrl, Shift, and Windows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\n----------------------------------------\n\nTITLE: Getting Default CTFont in MAUI\nDESCRIPTION: This method retrieves the default Core Text font. It is optional to specify a size, else it returns a default size. The output is a CTFont object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.FontExtensions.GetDefaultCTFont(System.Runtime.InteropServices.NFloat? size = null) -> CoreText.CTFont\n```\n\n----------------------------------------\n\nTITLE: PageHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the PageHandler class in Microsoft.Maui that handle page properties like Background and Title.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapBackground(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Editor in .NET MAUI\nDESCRIPTION: In this section, we define the getters for platform and virtual views within the IEditorHandler interface, which deals with text input in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IEditorHandler.PlatformView.get -> AndroidX.AppCompat.Widget.AppCompatEditText!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IEditorHandler.VirtualView.get -> Microsoft.Maui.IEditor!\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance (Location, Location) in MAUI\nDESCRIPTION: This static method calculates the distance between two geographic locations.  It takes two Location objects and a DistanceUnits enum as input and returns the distance as a double. DistanceUnits specifies the unit of measurement (e.g., kilometers, miles).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\"\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for RadioButton in .NET MAUI\nDESCRIPTION: This snippet details the IRadioButtonHandler implementation, providing access to platform-specific radio button elements in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IRadioButtonHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IRadioButtonHandler.VirtualView.get -> Microsoft.Maui.IRadioButton!\n```\n\n----------------------------------------\n\nTITLE: Updating UILabel Font in .NET MAUI for iOS\nDESCRIPTION: This method updates the font of a UILabel in .NET MAUI for iOS. It takes a UILabel, an ITextStyle interface, an IFontManager, and an optional default size as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_179\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.LabelExtensions.UpdateFont(this UIKit.UILabel! platformLabel, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager, double defaultSize) -> void\n```\n\n----------------------------------------\n\nTITLE: File and Uri Launch via ILauncher in MAUI\nDESCRIPTION: The 'ILauncher' interface supports opening files and URIs through asynchronous methods, checking open capabilities and directly launching requested files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: ApplicationHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the ApplicationHandler class, handling application-level operations like closing windows, opening windows, and terminating the application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView Chrome Client Methods in MAUI Android\nDESCRIPTION: Method declarations for handling web browser chrome client functionality in MAUI Android implementation, including file choosing and result parsing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Platform.MauiWebChromeClient.ChooseFile(Android.Webkit.IValueCallback filePathCallback, Android.Content.Intent intent, string title) -> bool\n~Microsoft.Maui.Platform.MauiWebChromeClient.MauiWebChromeClient(Microsoft.Maui.Handlers.IWebViewHandler handler) -> void\n~override Microsoft.Maui.Platform.MauiWebChromeClient.OnShowFileChooser(Android.Webkit.WebView webView, Android.Webkit.IValueCallback filePathCallback, Android.Webkit.WebChromeClient.FileChooserParams fileChooserParams) -> bool\n~virtual Microsoft.Maui.Platform.MauiWebChromeClient.ParseResult(Android.App.Result resultCode, Android.Content.Intent data) -> Java.Lang.Object\n```\n\n----------------------------------------\n\nTITLE: Pattern Paint Extensions for Android\nDESCRIPTION: Extension methods for converting MAUI pattern paints to Android bitmaps. These methods generate bitmap patterns with optional scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scale = 1) -> Android.Graphics.Bitmap\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scaleX, float scaleY) -> Android.Graphics.Bitmap\n```\n\n----------------------------------------\n\nTITLE: Picture Reader Extensions for Loading Pictures\nDESCRIPTION: Extension methods for IPictureReader to read pictures from streams. These methods support loading picture data from streams with optional hash validation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureReaderExtensions.Read(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> Microsoft.Maui.Graphics.IPicture\nstatic Microsoft.Maui.Graphics.PictureReaderExtensions.ReadAsync(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Graphics.IPicture>\n```\n\n----------------------------------------\n\nTITLE: Geolocation Services in MAUI C# Applications\nDESCRIPTION: Static methods to access device geolocation in MAUI applications, providing access to location data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.Default.get -> Microsoft.Maui.Devices.Sensors.IGeolocation!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.Geolocation.IsListeningForeground.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ITransform Interface in C#\nDESCRIPTION: This snippet defines the ITransform interface with properties for rotation, scale, and translation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ITransform.Rotation.get -> double\nMicrosoft.Maui.ITransform.RotationX.get -> double\nMicrosoft.Maui.ITransform.RotationY.get -> double\nMicrosoft.Maui.ITransform.Scale.get -> double\nMicrosoft.Maui.ITransform.ScaleX.get -> double\nMicrosoft.Maui.ITransform.ScaleY.get -> double\nMicrosoft.Maui.ITransform.TranslationX.get -> double\nMicrosoft.Maui.ITransform.TranslationY.get -> double\n```\n\n----------------------------------------\n\nTITLE: Defining WindowOverlay Virtual Methods in C# for .NET MAUI\nDESCRIPTION: This code snippet defines five virtual methods for the WindowOverlay class in .NET MAUI. These methods handle initialization, deinitialization, UI changes, and management of window elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_160\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void\nvirtual Microsoft.Maui.WindowOverlay.Initialize() -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: Converting Font to Skia Typeface\nDESCRIPTION: Static extension method converting a font to SKTypeface, facilitating the alignment of typography both in custom drawing logic and Skia-specific environments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.FontExtensions.ToSKTypeface(this Microsoft.Maui.Graphics.IFont font) -> SkiaSharp.SKTypeface\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardFlags Enum in C#\nDESCRIPTION: This snippet defines the KeyboardFlags enum for specifying keyboard capitalization options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.All = -1 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeCharacter = 16 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeNone = 32 -> Microsoft.Maui.KeyboardFlags\nMicrosoft.Maui.KeyboardFlags.CapitalizeSentence = 1 -> Microsoft.Maui.KeyboardFlags\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Class in C# for MAUI Maps\nDESCRIPTION: This snippet defines the Circle class in the Microsoft.Maui.Controls.Maps namespace. It includes properties for Center, Fill, FillColor, and Radius, along with their respective getter and setter methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Circle\nMicrosoft.Maui.Controls.Maps.Circle.Center.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Circle.Center.set -> void\nMicrosoft.Maui.Controls.Maps.Circle.Circle() -> void\nMicrosoft.Maui.Controls.Maps.Circle.Fill.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.Controls.Maps.Circle.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.Circle.FillColor.set -> void\nMicrosoft.Maui.Controls.Maps.Circle.Radius.get -> Microsoft.Maui.Maps.Distance\nMicrosoft.Maui.Controls.Maps.Circle.Radius.set -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring IMenuBarHandler Interface in C#\nDESCRIPTION: Defines the IMenuBarHandler interface with methods for managing menu bar items and properties for accessing platform-specific views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarHandler\nMicrosoft.Maui.Handlers.IMenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.Clear() -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.PlatformView.get -> UIKit.IUIMenuBuilder!\nMicrosoft.Maui.Handlers.IMenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.IMenuBarHandler.VirtualView.get -> Microsoft.Maui.IMenuBar!\n```\n\n----------------------------------------\n\nTITLE: Configuring ViewHandler Factory in C#\nDESCRIPTION: Static property for setting and getting the PlatformViewFactory for ViewHandler<TVirtualView, TPlatformView>.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IShare Interface in C#\nDESCRIPTION: Defines the IShare interface with methods for sharing files and text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Converting Color Between Formats\nDESCRIPTION: Extension methods for converting colors between Microsoft.Maui.Graphics.Color and SkiaSharp.SKColor, with optional alpha manipulation\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSKGraphicsExtensions.AsSKColor(this Microsoft.Maui.Graphics.Color target)\n```\n\n----------------------------------------\n\nTITLE: Picker Control Extensions for Windows ComboBox\nDESCRIPTION: Extension methods for Windows ComboBox control to implement MAUI Picker functionality, including updates to text alignment, fonts, colors and selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.PickerExtensions.UpdateFont(this Microsoft.UI.Xaml.Controls.ComboBox! nativeComboBox, Microsoft.Maui.IPicker! picker, Microsoft.Maui.IFontManager! fontManager) -> void\n```\n\n----------------------------------------\n\nTITLE: IGeocoding Interface Definition in C#\nDESCRIPTION: Interface for geocoding services in .NET MAUI. Provides methods to convert between addresses and geographic coordinates, returning collections of locations or placemarks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeocoding.GetLocationsAsync(string! address) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Location!>!>!\nMicrosoft.Maui.Devices.Sensors.IGeocoding.GetPlacemarksAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Devices.Sensors.Placemark!>!>!\n```\n\n----------------------------------------\n\nTITLE: Getting Fill Paint with Alpha in Skia Canvas State\nDESCRIPTION: This property provides access to an SKPaint that includes alpha transparency settings, useful for nuanced rendering where layered transparency effects are required.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FillPaintWithAlpha.get -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Path Conversion and Transformation Extensions\nDESCRIPTION: Static extension methods for converting and transforming PathF objects to SkiaSharp SKPath with support for scaling, translation, and rotation\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSkiaPath(this Microsoft.Maui.Graphics.PathF path, float ppu) -> SkiaSharp.SKPath\n```\n\n----------------------------------------\n\nTITLE: Declaring Hot Reloadable View Interface\nDESCRIPTION: Interface definition for implementing hot reload functionality in MAUI views with methods for reloading and state transfer\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.HotReload.IHotReloadableView.Reload() -> void\nMicrosoft.Maui.HotReload.IHotReloadableView.ReloadHandler.get -> Microsoft.Maui.HotReload.IReloadHandler!\nMicrosoft.Maui.HotReload.IHotReloadableView.ReloadHandler.set -> void\nMicrosoft.Maui.HotReload.IHotReloadableView.TransferState(Microsoft.Maui.IView! newView) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing New Skia Canvas State\nDESCRIPTION: Generates a fresh SkiaCanvasState object using a provided context, setting up a new graphical state environment within the framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasStateService.CreateNew(object context) -> Microsoft.Maui.Graphics.Skia.SkiaCanvasState\n```\n\n----------------------------------------\n\nTITLE: Override Color Equality Check\nDESCRIPTION: Overrides Equals method in Color class to compare with another object, returning a boolean. The method requires 'obj' parameter and depends on overriding existing logic.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Color.Equals(object obj) -> bool\n```\n\n----------------------------------------\n\nTITLE: OrientationSensor APIs in MAUI C#\nDESCRIPTION: Static methods for accessing and controlling the device orientation sensor, including checking support status and monitoring capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Default.get -> Microsoft.Maui.Devices.Sensors.IOrientationSensor!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: GeometryUtil Methods in .NET MAUI\nDESCRIPTION: Static utility methods for geometry calculations, including angle conversions, distance calculations, and line intersections. These methods support complex drawing operations and geometric transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(float angle) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.EllipseAngleToPoint(float x, float y, float width, float height, float angleInDegrees) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetAngleAsDegrees(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetDistance(float x1, float y1, float x2, float y2) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetFactor(float aMin, float aMax, float aValue) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetLinearValue(float aMin, float aMax, float aFactor) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetOppositePoint(Microsoft.Maui.Graphics.PointF pivot, Microsoft.Maui.Graphics.PointF oppositePoint) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.GetSweep(float angle1, float angle2, bool clockwise) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.IsLineIntersectingLine(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3) -> bool\nstatic Microsoft.Maui.Graphics.GeometryUtil.PolarToPoint(float angleInRadians, float fx, float fy) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.RadiansToDegrees(float angle) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF center, Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.GeometryUtil.RotatePoint(Microsoft.Maui.Graphics.PointF point, float angle) -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Blazor WebView Windows Forms Class Definitions\nDESCRIPTION: Core class definitions and interfaces for implementing Blazor WebView in Windows Forms applications. Includes event arguments, initialization parameters, URL loading strategies, and component management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/WindowsForms/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n\nMicrosoft.AspNetCore.Components.WebView.WindowsForms.BlazorWebView {\n    public BlazorWebView();\n    public EventHandler<BlazorWebViewInitializedEventArgs>? BlazorWebViewInitialized;\n    public EventHandler<BlazorWebViewInitializingEventArgs>? BlazorWebViewInitializing;\n    public string? HostPage { get; set; }\n    public RootComponentsCollection RootComponents { get; }\n    public IServiceProvider Services { get; set; }\n    public string StartPath { get; set; }\n    public EventHandler<UrlLoadingEventArgs>? UrlLoading;\n    public WebView2 WebView { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: GridLength Operations in MAUI\nDESCRIPTION: Operator overloads and implicit conversions for GridLength in MAUI. These enable comparisons and conversions between GridLength and double values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Window Creation Event\nDESCRIPTION: Indicates when the window has been created, which serves as a trigger point for setting up components and initializing data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Created() -> void\n```\n\n----------------------------------------\n\nTITLE: Reading Pictures From Data in .NET MAUI\nDESCRIPTION: This snippet defines the Read method for the IPictureReader interface to allow reading a picture from a byte array.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPictureReader.Read(byte[] data) -> Microsoft.Maui.Graphics.IPicture\n```\n\n----------------------------------------\n\nTITLE: Template Binding Property Declarations in C#\nDESCRIPTION: Property declarations for TypedBinding in TemplateBindingExtension class that handles binding functionality in MAUI XAML\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions TitleMode setter in MAUI\nDESCRIPTION: This property setter sets the title mode for the browser. This controls whether the browser title is displayed. This is a read/write property of type BrowserTitleMode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.TitleMode.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Border Handler Platform Implementation\nDESCRIPTION: Platform-specific arrangement implementation for BorderHandler class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.BorderHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutSeparatorHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the MenuFlyoutSeparatorHandler class that define mappers between the cross-platform IMenuFlyoutSeparator interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Filling Rectangle in W2DCanvas\nDESCRIPTION: This method is used to fill a rectangular area in the W2DCanvas defined by its parameters. It takes coordinates and dimensions, and does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.FillRectangle(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in MAUI Applications\nDESCRIPTION: Static methods and properties for tracking application versions and builds in MAUI. These include methods to check for first launches, retrieve version history, and access current and previous version information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.BuildHistory.get -> System.Collections.Generic.IEnumerable<string!>!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentBuild.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.CurrentVersion.get -> string!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Default.get -> Microsoft.Maui.ApplicationModel.IVersionTracking!\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledBuild.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.FirstInstalledVersion.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchEver.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForBuild(string! build) -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForCurrentVersion.get -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.IsFirstLaunchForVersion(string! version) -> bool\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.PreviousBuild.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.PreviousVersion.get -> string?\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.Track() -> void\nstatic Microsoft.Maui.ApplicationModel.VersionTracking.VersionHistory.get -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar LeadingContent Property in C#\nDESCRIPTION: These code snippets represent accessing the LeadingContent property of the TitleBar, allowing to get or set the view displayed on the left side of the title bar. The view must implement IView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.LeadingContent.get -> Microsoft.Maui.IView?\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.LeadingContent.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Adding Path to CGContext in MAUI\nDESCRIPTION: This method adds a defined path to a CGContext. It requires a CGContext, a PathF object, and four coordinates to define the position and scale.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.CgContextExtensions.AddPath(this CoreGraphics.CGContext target, Microsoft.Maui.Graphics.PathF path, float ox, float oy, float fx, float fy) -> CoreGraphics.CGPath\n```\n\n----------------------------------------\n\nTITLE: MauiContext Class Definition in C#\nDESCRIPTION: Definition of MauiContext class which provides services and handlers for MAUI applications. It includes properties for accessing services and handler factories.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.MauiContext\nMicrosoft.Maui.MauiContext.Handlers.get -> Microsoft.Maui.IMauiHandlersFactory!\nMicrosoft.Maui.MauiContext.MauiContext(System.IServiceProvider! services) -> void\nMicrosoft.Maui.MauiContext.Services.get -> System.IServiceProvider!\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Paint Pattern in PaintPattern Class\nDESCRIPTION: These properties allow getting and setting the paint pattern in a PaintPattern instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Paint.get -> Microsoft.Maui.Graphics.Paint\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Paint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Override ViewDidLoad Method (ItemsViewController)\nDESCRIPTION: This code snippet represents an override of the ViewDidLoad method within the ItemsViewController2 class, likely related to handling view loading events in a MAUI application targeting iOS. The method is part of the Microsoft.Maui.Controls.Handlers.Items2 namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.ViewDidLoad() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Size in W2DCanvas\nDESCRIPTION: This snippet sets the stroke size property within the W2DCanvas, which influences the width of lines drawn. It does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformStrokeSize.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Font Weight Constants in C# for .NET MAUI Graphics\nDESCRIPTION: This snippet shows the declaration of constant integer values representing different font weights in the Microsoft.Maui.Graphics.FontWeights class. These constants can be used to specify font weights in text rendering operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Default = -1 -> int\n// ... more font weight constants\n```\n\n----------------------------------------\n\nTITLE: Defining Static Map Control Properties in C#\nDESCRIPTION: Static readonly property declarations for Microsoft.Maui.Controls.Maps namespace defining bindable properties for map controls including element styling, pin details, and polygon fill options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Launcher Functionality in .NET MAUI\nDESCRIPTION: Methods for launching external applications and URIs, including checking if a URI can be opened.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.Default.get -> Microsoft.Maui.ApplicationModel.ILauncher!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Drawing Pictures on Canvas in .NET MAUI\nDESCRIPTION: This snippet includes methods related to drawing operations for the IPicture interface within a canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPicture.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Information Methods in C#\nDESCRIPTION: Override implementations for device-related classes including DeviceIdiom, DevicePlatform and DisplayInfo, providing equality comparisons and string representations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Devices.DeviceIdiom.Equals(object obj) -> bool\noverride Microsoft.Maui.Devices.DeviceIdiom.ToString() -> string\noverride Microsoft.Maui.Devices.DevicePlatform.Equals(object obj) -> bool\noverride Microsoft.Maui.Devices.DevicePlatform.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Core UI Element Method Overrides in .NET MAUI\nDESCRIPTION: Overridden methods for core UI elements including RectangleGridAdorner, Semantics, SizeRequest, and Thickness. These methods handle drawing, equality comparison, hash code generation, and string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.RectangleGridAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\noverride Microsoft.Maui.Semantics.ToString() -> string!\noverride Microsoft.Maui.SizeRequest.Equals(object? obj) -> bool\noverride Microsoft.Maui.SizeRequest.GetHashCode() -> int\noverride Microsoft.Maui.SizeRequest.ToString() -> string!\noverride Microsoft.Maui.Thickness.Equals(object? obj) -> bool\noverride Microsoft.Maui.Thickness.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Generic PropertyMapper Implementation in C#\nDESCRIPTION: Generic PropertyMapper enables type-safe property mapping between virtual views and handlers. It provides methods to add and retrieve property mappings using a string key indexer.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper() -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.PropertyMapper(params Microsoft.Maui.IPropertyMapper![]! chained) -> void\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].get -> System.Action<TViewHandler, TVirtualView>!\nMicrosoft.Maui.PropertyMapper<TVirtualView, TViewHandler>.this[string! key].set -> void\n```\n\n----------------------------------------\n\nTITLE: Preferences Set in .NET MAUI\nDESCRIPTION: This method stores a value against a specified key in the application's preferences, including the optional shared name for scoping preferences.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.IPreferences.Set<T>(string! key, T value, string? sharedName = null) -> void\n```\n\n----------------------------------------\n\nTITLE: BlazorWebView Core Classes and Interfaces\nDESCRIPTION: Defines the core classes and interfaces for Blazor WebView functionality in MAUI, including BlazorWebView, BlazorWebViewHandler, and related event argument classes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlazorWebView : IBlazorWebView {\n    public string? HostPage { get; set; }\n    public string StartPath { get; set; }\n    public RootComponentsCollection RootComponents { get; }\n    public EventHandler<BlazorWebViewInitializedEventArgs>? BlazorWebViewInitialized;\n    public EventHandler<BlazorWebViewInitializingEventArgs>? BlazorWebViewInitializing;\n    public EventHandler<UrlLoadingEventArgs>? UrlLoading;\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollToRequest Implementation in C#\nDESCRIPTION: ScrollToRequest represents a request to scroll to a specific position. It contains horizontal and vertical offset parameters and an instant flag to control the scroll animation behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollToRequest\nMicrosoft.Maui.ScrollToRequest.HorizontalOffset.get -> double\nMicrosoft.Maui.ScrollToRequest.HorizontalOffset.init -> void\nMicrosoft.Maui.ScrollToRequest.Instant.get -> bool\nMicrosoft.Maui.ScrollToRequest.Instant.init -> void\nMicrosoft.Maui.ScrollToRequest.ScrollToRequest(double HorizontalOffset, double VerticalOffset, bool Instant) -> void\nMicrosoft.Maui.ScrollToRequest.VerticalOffset.get -> double\nMicrosoft.Maui.ScrollToRequest.VerticalOffset.init -> void\n```\n\n----------------------------------------\n\nTITLE: Resetting Skia Canvas State with Paint Objects\nDESCRIPTION: Method to reset a Skia canvas state by providing font and paint configurations. Allows comprehensive reset of rendering parameters including fonts and paint styles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining PathOperation Enum in C#\nDESCRIPTION: Defines the PathOperation enum with values for different path operations in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathOperation.Arc = 4 -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathOperation.Close = 5 -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathOperation.Cubic = 3 -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathOperation.Line = 1 -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathOperation.Move = 0 -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathOperation.Quad = 2 -> Microsoft.Maui.Graphics.PathOperation\n```\n\n----------------------------------------\n\nTITLE: Implementing Polygon Class for Map Shapes\nDESCRIPTION: Defines the Polygon class for representing polygonal shapes on maps, including methods for managing geopath points and fill color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Polygon\nMicrosoft.Maui.Controls.Maps.Polygon.Add(Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Clear() -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Contains(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.CopyTo(Microsoft.Maui.Devices.Sensors.Location![]! array, int arrayIndex) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Count.get -> int\nMicrosoft.Maui.Controls.Maps.Polygon.Fill.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.Controls.Maps.Polygon.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.Maps.Polygon.FillColor.set -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Geopath.get -> System.Collections.Generic.IList<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polygon.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polygon.IndexOf(Microsoft.Maui.Devices.Sensors.Location! item) -> int\nMicrosoft.Maui.Controls.Maps.Polygon.Insert(int index, Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.IsReadOnly.get -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.Polygon() -> void\nMicrosoft.Maui.Controls.Maps.Polygon.Remove(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polygon.RemoveAt(int index) -> void\nMicrosoft.Maui.Controls.Maps.Polygon.this[int index].get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Polygon.this[int index].set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing FlexBasis Operators in C#\nDESCRIPTION: This section defines implicit conversion and comparison operators for the FlexBasis struct used in MAUI layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.FlexBasis.implicit operator Microsoft.Maui.Layouts.FlexBasis(float length) -> Microsoft.Maui.Layouts.FlexBasis\nstatic Microsoft.Maui.Layouts.FlexBasis.operator !=(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\nstatic Microsoft.Maui.Layouts.FlexBasis.operator ==(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ShareRequestBase in MAUI\nDESCRIPTION: This snippet includes the ShareRequestBase class that serves as a base for share requests, defining properties like PresentationSourceBounds and Title, and its constructor, which sets up the share request configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.ShareRequestBase() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: SizeF Operators and Conversions in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Static operators and type conversions for Microsoft.Maui.Graphics.SizeF class, including arithmetic operations, equality comparison, and conversions to and from various graphics types including Vector2. Offers float-precision size operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.SizeF size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.SizeF size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Border Element Handler Implementation in MAUI\nDESCRIPTION: Handler implementation for Border UI elements, managing properties like stroke, background, and shape.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.BorderHandler!>!\nstatic Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapHeight(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.IBorderHandler!>!\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapWidth(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\n----------------------------------------\n\nTITLE: Insets Constructor in .NET MAUI\nDESCRIPTION: This constructor initializes an Insets instance using an existing Insets object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Insets.Insets(Microsoft.Maui.Graphics.Insets insets) -> void\n```\n\n----------------------------------------\n\nTITLE: Working with PatternPaint in .NET MAUI\nDESCRIPTION: This snippet describes getting and setting the paint property in the PatternPaint class for handling paint patterns.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PatternPaint.Pattern.get -> Microsoft.Maui.Graphics.IPattern\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PatternPaint.Pattern.set -> void\n```\n\n----------------------------------------\n\nTITLE: Resetting SkiaCanvasState with Paint and Font in C#\nDESCRIPTION: This method resets the SkiaCanvasState by applying the provided SKPaint and SKFont objects, useful for restoring the canvas to a known state in graphic rendering workflows. It is designed for use within SkiaSharp-based rendering tasks in .NET MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Font Characteristics in Microsoft's Graphics Library\nDESCRIPTION: This snippet outlines methods pertaining to font management within the Microsoft.Maui.Graphics.Font class. It includes methods for comparing fonts, retrieving font names, and creating font instances. These operations contribute to text rendering capabilities, allowing for specific stylistic implementations based on font attributes such as weight and style.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Font.Equals(Microsoft.Maui.Graphics.IFont other) -> bool\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Font.Name.get -> string\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Graphics.Font.Font(string name, int weight = 400, Microsoft.Maui.Graphics.FontStyleType styleType = Microsoft.Maui.Graphics.FontStyleType.Normal) -> void\"\n```\n\n----------------------------------------\n\nTITLE: SwipeView Handler Property Mapping in C#\nDESCRIPTION: Static methods for mapping SwipeView properties including swipe items, content, and visibility settings to platform-specific implementations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IDeviceDisplay Interface in C#\nDESCRIPTION: Defines the IDeviceDisplay interface with properties for controlling screen behavior and accessing display information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.get -> bool\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.set -> void\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Wrap\nDESCRIPTION: Specifies how flex items should wrap within their container, enabling a clear flow of items in various layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexWrap.NoWrap = 0 -> Microsoft.Maui.Layouts.FlexWrap\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexWrap.Reverse = 2 -> Microsoft.Maui.Layouts.FlexWrap\n```\n\n----------------------------------------\n\nTITLE: Defining Mapper and CommandMapper for Menu-related Handlers in C#\nDESCRIPTION: These static properties define Mappers and CommandMappers for MenuBar, MenuBarItem, MenuFlyout, MenuFlyoutItem, MenuFlyoutSeparator, and MenuFlyoutSubItem handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\n```\n\n----------------------------------------\n\nTITLE: PictureWriter Extensions for Saving Graphics in C#\nDESCRIPTION: Extension methods for IPictureWriter to save pictures as byte arrays or streams. Includes both synchronous and asynchronous versions for optimal performance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytes(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBytesAsync(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.Threading.Tasks.Task<byte[]>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsStream(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: Defining Mappers for Menu-related Handlers in C#\nDESCRIPTION: These static properties define Mappers and CommandMappers for various menu-related handlers such as MenuBarHandler, MenuBarItemHandler, MenuFlyoutHandler, and MenuFlyoutItemHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBarItem!, Microsoft.Maui.Handlers.IMenuBarItemHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\n```\n\n----------------------------------------\n\nTITLE: FrameworkElement View Extensions in MAUI for Windows UI\nDESCRIPTION: Extension methods for Microsoft.UI.Xaml.FrameworkElement that manage view properties like focus, measurement, background, and layout constraints in MAUI applications. These methods facilitate the mapping between MAUI cross-platform abstractions and Windows UI platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.Focus(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.FocusRequest! request) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.InvalidateMeasure(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.ToHandler(this Microsoft.Maui.IView! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IPlatformViewHandler!\nstatic Microsoft.Maui.Platform.ViewExtensions.TryMoveFocus(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.UI.Xaml.Input.FocusNavigationDirection direction) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.Unfocus(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateAutomationId(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Microsoft.Maui.Platform.ContentPanel! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackgroundImageSourceAsync(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBorder(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateClip(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateFlowDirection(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this Microsoft.Maui.Platform.LayoutPanel! layoutPanel, Microsoft.Maui.ILayoutHandler! handler, Microsoft.Maui.ILayout! layout) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this Microsoft.UI.Xaml.FrameworkElement! nativeView, Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateIsEnabled(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumHeight(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumWidth(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumHeight(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumWidth(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateOpacity(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateSemantics(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateShadow(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateToolTip(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.ToolTip? tooltip) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateVisibility(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this Microsoft.UI.Xaml.FrameworkElement! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Event Handling in MAUI\nDESCRIPTION: Extension methods for managing lifecycle events in MAUI applications. These methods allow for adding custom events and invoking them at specific points in the application lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessibility Delegate Overrides in .NET MAUI for Android\nDESCRIPTION: Method overrides for accessibility delegates that handle accessibility events and information in Android. These methods ensure that MAUI applications provide proper accessibility support for screen readers and other assistive technologies.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.DispatchPopulateAccessibilityEvent(Android.Views.View! host, Android.Views.Accessibility.AccessibilityEvent! e) -> bool\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.GetAccessibilityNodeProvider(Android.Views.View! host) -> AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat?\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.OnInitializeAccessibilityEvent(Android.Views.View! host, Android.Views.Accessibility.AccessibilityEvent! e) -> void\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.OnInitializeAccessibilityNodeInfo(Android.Views.View! host, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat! info) -> void\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.OnPopulateAccessibilityEvent(Android.Views.View! host, Android.Views.Accessibility.AccessibilityEvent! e) -> void\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.OnRequestSendAccessibilityEvent(Android.Views.ViewGroup! host, Android.Views.View! child, Android.Views.Accessibility.AccessibilityEvent! e) -> bool\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.PerformAccessibilityAction(Android.Views.View! host, int action, Android.OS.Bundle? args) -> bool\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.SendAccessibilityEvent(Android.Views.View! host, int eventType) -> void\noverride Microsoft.Maui.Platform.AccessibilityDelegateCompatWrapper.SendAccessibilityEventUnchecked(Android.Views.View! host, Android.Views.Accessibility.AccessibilityEvent! e) -> void\noverride Microsoft.Maui.Platform.MauiAccessibilityDelegateCompat.OnInitializeAccessibilityNodeInfo(Android.Views.View! host, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat! info) -> void\n```\n\n----------------------------------------\n\nTITLE: Handling Paint Surface Event in Skia Graphics View\nDESCRIPTION: Overrides the paint surface event in SkiaGraphicsView to define specific drawing operations when rendering Canvas on the surface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.Views.SkiaGraphicsView.OnPaintSurface(SkiaSharp.Views.iOS.SKPaintSurfaceEventArgs e) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining GradientPaint Class Methods in C#\nDESCRIPTION: This snippet shows the method and property definitions for the GradientPaint class, which handles gradient-based painting operations including color stops and blending.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.GradientPaint.AddOffset(float offset, Microsoft.Maui.Graphics.Color color) -> void\n~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors() -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors(Microsoft.Maui.Graphics.Color startColor, Microsoft.Maui.Graphics.Color endColor, float factor) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.EndColor.get -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.EndColor.set -> void\n~Microsoft.Maui.Graphics.GradientPaint.GetColorAt(float offset) -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.GetSortedStops() -> Microsoft.Maui.Graphics.PaintGradientStop[]\n~Microsoft.Maui.Graphics.GradientPaint.GradientPaint(Microsoft.Maui.Graphics.GradientPaint source) -> void\n~Microsoft.Maui.Graphics.GradientPaint.GradientStops.get -> Microsoft.Maui.Graphics.PaintGradientStop[]\n~Microsoft.Maui.Graphics.GradientPaint.GradientStops.set -> void\n~Microsoft.Maui.Graphics.GradientPaint.SetGradientStops(float[] offsets, Microsoft.Maui.Graphics.Color[] colors) -> void\n~Microsoft.Maui.Graphics.GradientPaint.StartColor.get -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.StartColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Run Intersection Methods\nDESCRIPTION: Static extension methods for checking intersections between attributed text runs, including exact and partial intersection detection\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\n```\n\n----------------------------------------\n\nTITLE: IsTransparent Property Overrides in MAUI Paint Types\nDESCRIPTION: Property overrides for the IsTransparent getter in various Microsoft.Maui.Graphics paint types, determining if a paint is fully transparent.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.GradientPaint.IsTransparent.get -> bool\noverride Microsoft.Maui.Graphics.ImagePaint.IsTransparent.get -> bool\noverride Microsoft.Maui.Graphics.PatternPaint.IsTransparent.get -> bool\noverride Microsoft.Maui.Graphics.SolidPaint.IsTransparent.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Basis\nDESCRIPTION: Introduces the FlexBasis class which manages how much space a flex item takes up, facilitating responsive design.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexBasis.Equals(Microsoft.Maui.Layouts.FlexBasis other) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexBasis.FlexBasis() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexBasis.FlexBasis(float length, bool isRelative = false) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexBasis.Length.get -> float\n```\n\n----------------------------------------\n\nTITLE: Map Pin Implementation in C#\nDESCRIPTION: Defines the Pin class for representing map markers with properties for location, label, and address. Includes events for marker and info window interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Pin {\n    public string Address { get; set; }\n    public string Label { get; set; }\n    public Location Location { get; set; }\n    public object MarkerId { get; set; }\n    public PinType Type { get; set; }\n    public event EventHandler<PinClickedEventArgs> MarkerClicked;\n    public event EventHandler<PinClickedEventArgs> InfoWindowClicked;\n}\n```\n\n----------------------------------------\n\nTITLE: View Transformation Extensions for Tizen Platform\nDESCRIPTION: Extension methods that handle view transformations in Tizen platform. These methods update various transformation properties of Tizen.NUI.BaseComponents.View elements based on MAUI view configurations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateTransformation(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView? view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateTranslate(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ISwitchHandler Interface in C#\nDESCRIPTION: Defines the ISwitchHandler interface with properties for PlatformView and VirtualView. The PlatformView is of type Microsoft.UI.Xaml.Controls.ToggleSwitch, while the VirtualView is of type Microsoft.Maui.ISwitch.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ISwitchHandler.PlatformView.get -> Microsoft.UI.Xaml.Controls.ToggleSwitch!\nMicrosoft.Maui.Handlers.ISwitchHandler.VirtualView.get -> Microsoft.Maui.ISwitch!\n```\n\n----------------------------------------\n\nTITLE: ICompass Interface Definition in C#\nDESCRIPTION: Interface for the compass sensor in .NET MAUI. Provides methods to start and stop monitoring with optional low pass filter, an event for reading changes, and properties to check support and monitoring status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.ICompass.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.ICompass.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.ICompass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.ICompass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\nMicrosoft.Maui.Devices.Sensors.ICompass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.ICompass.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: PathAspect Enumeration in C#\nDESCRIPTION: Definition of PathAspect enumeration which defines different aspect ratios and sizing behaviors for path-based elements in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PathAspect\nMicrosoft.Maui.PathAspect.AspectFill = 4 -> Microsoft.Maui.PathAspect\nMicrosoft.Maui.PathAspect.AspectFit = 3 -> Microsoft.Maui.PathAspect\nMicrosoft.Maui.PathAspect.Center = 1 -> Microsoft.Maui.PathAspect\nMicrosoft.Maui.PathAspect.None = 0 -> Microsoft.Maui.PathAspect\nMicrosoft.Maui.PathAspect.Stretch = 2 -> Microsoft.Maui.PathAspect\n```\n\n----------------------------------------\n\nTITLE: Handling Geolocation Services\nDESCRIPTION: Offers methods to get last known location, request current location, start and stop listening to location changes, and manage location-based events. Uses Microsoft.Maui.Devices.Sensors namespace components to interact with device GPS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLastKnownLocationAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.GetLocationAsync(Microsoft.Maui.Devices.Sensors.GeolocationRequest! request, System.Threading.CancellationToken cancelToken) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool\nMicrosoft.Maui.Devices.Sensors.IGeolocation.ListeningFailed -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.LocationChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StartListeningForegroundAsync(Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest! request) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: Filling Rounded Rectangle in W2DCanvas\nDESCRIPTION: This method fills a rounded rectangle in the W2DCanvas, where the corner radius can be specified. It accepts parameters for the rectangle's dimensions and corner radius without returning any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing InsetsF in .NET MAUI\nDESCRIPTION: This snippet defines constructors and methods for the InsetsF class, similar to Insets, facilitating initialization and string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.InsetsF.InsetsF(Microsoft.Maui.Graphics.InsetsF insets) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.InsetsF.ToParsableString() -> string\n```\n\n----------------------------------------\n\nTITLE: Removing Container in MAUI\nDESCRIPTION: This snippet defines an abstract method for removing a container from a view handler. It serves as a placeholder for implementations that need to handle the removal of UI components dynamically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ViewHandler.RemoveContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Rounded Rectangle to CGContext in MAUI\nDESCRIPTION: This method adds a rounded rectangle shape to a CGContext at specified coordinates with defined dimensions and corner radius.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AddRoundedRectangle(this CoreGraphics.CGContext context, float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: EmailMessage BodyFormat setter in MAUI\nDESCRIPTION: This property setter sets the body format of an email message. The body format specifies whether the body is plain text or HTML. This read/write property is of type EmailBodyFormat.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.BodyFormat.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Implementing VisualElement and Window Methods in C#\nDESCRIPTION: Defines methods for measuring VisualElements and setting TitleBar properties for Windows in Microsoft.Maui.Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.VisualElement.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.Controls.Window.TitleBar.get -> Microsoft.Maui.ITitleBar?\nMicrosoft.Maui.Controls.Window.TitleBar.set -> void\n```\n\n----------------------------------------\n\nTITLE: Insets Classes Constructor and Utility Methods\nDESCRIPTION: Constructor and utility method signatures for Insets and InsetsF classes for defining region offsets.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Insets.Insets(Microsoft.Maui.Graphics.Insets insets) -> void\nMicrosoft.Maui.Graphics.Insets.ToParsableString() -> string\nMicrosoft.Maui.Graphics.InsetsF.InsetsF(Microsoft.Maui.Graphics.InsetsF insets) -> void\nMicrosoft.Maui.Graphics.InsetsF.ToParsableString() -> string\n```\n\n----------------------------------------\n\nTITLE: MauiMKMapView Overlay Handler\nDESCRIPTION: Virtual method for handling MapKit overlay rendering in MAUI Maps. Returns an MKOverlayRenderer for a given map view and overlay.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Maps.Platform.MauiMKMapView.GetViewForOverlayDelegate(MapKit.MKMapView! mapview, MapKit.IMKOverlay! overlay) -> MapKit.MKOverlayRenderer!\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IContentViewHandler in MAUI\nDESCRIPTION: Defines properties for the `IContentViewHandler` interface in MAUI to get the platform view and virtual view associated with the ContentView. The PlatformView exposes the underlying native view, while VirtualView represents the .NET MAUI ContentView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IContentViewHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IContentViewHandler.VirtualView.get -> Microsoft.Maui.IContentView!\"\n```\n\n----------------------------------------\n\nTITLE: Saving Images as Stream in MAUI\nDESCRIPTION: This method saves a specified picture as a stream. It requires an IPictureWriter and an IPicture. It returns a stream object representing the image.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsStream(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: Visual Diagnostics and Tree Manipulation in MAUI\nDESCRIPTION: Methods to work with the visual tree, register source information, and handle visual element relationships. Useful for debugging and UI traversal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.VisualDiagnostics.GetSourceInfo(object! obj) -> Microsoft.Maui.SourceInfo?\nstatic Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child) -> void\nstatic Microsoft.Maui.VisualDiagnostics.OnChildAdded(Microsoft.Maui.IVisualTreeElement? parent, Microsoft.Maui.IVisualTreeElement! child, int newLogicalIndex) -> void\nstatic Microsoft.Maui.VisualDiagnostics.OnChildRemoved(Microsoft.Maui.IVisualTreeElement! parent, Microsoft.Maui.IVisualTreeElement! child, int oldLogicalIndex) -> void\nstatic Microsoft.Maui.VisualDiagnostics.RegisterSourceInfo(object! target, System.Uri! uri, int lineNumber, int linePosition) -> void\nstatic Microsoft.Maui.VisualDiagnostics.VisualTreeChanged -> System.EventHandler<Microsoft.Maui.VisualTreeChangeEventArgs!>?\n```\n\n----------------------------------------\n\nTITLE: Getting Points Collection in PathF Class in .NET MAUI\nDESCRIPTION: This property retrieves an enumerable collection of points defined by a PathF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Points.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PointF>\n```\n\n----------------------------------------\n\nTITLE: Mapping RadioButton Properties in C#\nDESCRIPTION: These static methods map various properties of a RadioButton component in MAUI, including background, character spacing, content, corner radius, font, checked state, stroke color, stroke thickness, and text color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapBackground(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing BitmapExportContext in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines the BitmapExportContext class in the Microsoft.Maui.Graphics namespace. It includes a constructor and properties for width, height, and DPI (dots per inch) of the bitmap context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BitmapExportContext\nMicrosoft.Maui.Graphics.BitmapExportContext.BitmapExportContext(int width, int height, float dpi) -> void\nMicrosoft.Maui.Graphics.BitmapExportContext.Dpi.get -> float\nMicrosoft.Maui.Graphics.BitmapExportContext.Height.get -> int\nMicrosoft.Maui.Graphics.BitmapExportContext.Width.get -> int\n```\n\n----------------------------------------\n\nTITLE: Downsizing Skia Image with Options\nDESCRIPTION: Optimizes an image to fit within specified dimensions, with an option to dispose of the original image. This operation enables efficient storage and rendering of images.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.Downsize(float maxWidth, float maxHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.Downsize(float maxWidthOrHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Device Platform and Idiom Utilities in .NET MAUI\nDESCRIPTION: Core device platform and idiom related method implementations including equality comparisons and string conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Devices.DeviceIdiom.Equals(object obj) -> bool\noverride Microsoft.Maui.Devices.DeviceIdiom.ToString() -> string\noverride Microsoft.Maui.Devices.DevicePlatform.Equals(object obj) -> bool\noverride Microsoft.Maui.Devices.DevicePlatform.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Picker in .NET MAUI\nDESCRIPTION: This snippet defines the IImageHandler interface providing access to platform views for picker UI components within MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IPickerHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiPicker!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IPickerHandler.VirtualView.get -> Microsoft.Maui.IPicker!\n```\n\n----------------------------------------\n\nTITLE: Grid Layout Utility Types\nDESCRIPTION: Provides enumeration and configuration for grid layout units and sizing in MAUI user interfaces\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.GridLength\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.GridUnitType\n```\n\n----------------------------------------\n\nTITLE: Browser Operations in .NET MAUI\nDESCRIPTION: Static methods for opening web content in the device's browser with various launch options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Browser.Default.get -> Microsoft.Maui.ApplicationModel.IBrowser!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color in CGContext in MAUI\nDESCRIPTION: This method sets the stroke color of a CGContext using a MAUI Color instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.SetStrokeColor(this CoreGraphics.CGContext context, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions TitleMode getter in MAUI\nDESCRIPTION: This property getter retrieves the title mode for the browser. This controls whether the browser title is displayed. This is a read/write property of type BrowserTitleMode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.TitleMode.get -> Microsoft.Maui.ApplicationModel.BrowserTitleMode\"\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Border in .NET MAUI\nDESCRIPTION: This code snippet defines the getters for the platform and virtual views for the IBorderHandler interface, which allows interaction with the underlying Android view for borders.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IBorderHandler.PlatformView.get -> Microsoft.Maui.Platform.ContentViewGroup!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IBorderHandler.VirtualView.get -> Microsoft.Maui.IBorderView!\n```\n\n----------------------------------------\n\nTITLE: Getting Segment Types in Paths in .NET MAUI\nDESCRIPTION: This snippet describes the SegmentTypes property in the PathF class, returning types of segments within the path.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.SegmentTypes.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PathOperation>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image from Skia Bitmap Export Context\nDESCRIPTION: Provides access to the IImage from SkiaBitmapExportContext, extending functionalities for retrieving rendered image objects for different graphical operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.Image.get -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions Flags setter in MAUI\nDESCRIPTION: This property setter sets the flags for browser launch options. The flags define how the browser is launched (e.g., adjacent, form sheet). This is a read/write property of type BrowserLaunchFlags.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Property Mapper Extensions for MAUI Handlers\nDESCRIPTION: Extension methods for Microsoft.Maui.IPropertyMapper that enhance property mapping functionality between MAUI virtual views and platform-specific handlers. These methods allow for appending, prepending, and modifying property mappings to customize handler behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Skia Canvas State Clone\nDESCRIPTION: Initializes a new SkiaCanvasState object derived from an existing state, facilitating state transfer and copying without direct modification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.SkiaCanvasState(Microsoft.Maui.Graphics.Skia.SkiaCanvasState prototype) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Image in ImagePaint\nDESCRIPTION: This snippet shows the Image property in the ImagePaint class, allowing for getting and setting an image instance associated with this paint.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ImagePaint.Image.get -> Microsoft.Maui.Graphics.IImage\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ImagePaint.Image.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WebNavigationEvent enum in C#\nDESCRIPTION: Declares an enumeration for web navigation events, including Back, Forward, NewPage, and Refresh.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.WebNavigationEvent\nMicrosoft.Maui.WebNavigationEvent.Back = 1 -> Microsoft.Maui.WebNavigationEvent\nMicrosoft.Maui.WebNavigationEvent.Forward = 2 -> Microsoft.Maui.WebNavigationEvent\nMicrosoft.Maui.WebNavigationEvent.NewPage = 3 -> Microsoft.Maui.WebNavigationEvent\nMicrosoft.Maui.WebNavigationEvent.Refresh = 4 -> Microsoft.Maui.WebNavigationEvent\n```\n\n----------------------------------------\n\nTITLE: Rectangle Conversion Extensions between MAUI and Android\nDESCRIPTION: Extension methods for converting rectangle objects between MAUI and Android. These methods facilitate cross-platform rectangle handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRectangle(this Android.Graphics.RectF target) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRectangleF(this Android.Graphics.RectF target) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRectF(this Android.Graphics.Rect target) -> Android.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsRectF(this Microsoft.Maui.Graphics.RectF target) -> Android.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Pages in .NET MAUI\nDESCRIPTION: This snippet defines the CreatePage method for the IPdfRenderService interface, which is responsible for creating a PDF page based on the stream and specified page number.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPdfRenderService.CreatePage(System.IO.Stream stream, int pageNumber = -1) -> Microsoft.Maui.Graphics.IPdfPage\n```\n\n----------------------------------------\n\nTITLE: Implementing View Handlers in MAUI (C#)\nDESCRIPTION: This override is part of the ViewHandler class, which is responsible for managing the connection between the virtual view and the platform-specific view implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\noverride sealed Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting Color to ARGB - SkiaSharp - C#\nDESCRIPTION: This method converts a Color object to its ARGB integer representation. The method can either take the alpha value explicitly or use the color's existing alpha value, enabling flexible color manipulation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToArgb(this Microsoft.Maui.Graphics.Color target, float alpha) -> int\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToArgb(this Microsoft.Maui.Graphics.Color target) -> int\n```\n\n----------------------------------------\n\nTITLE: Initializing Picture Pattern in MAUI Graphics\nDESCRIPTION: Creates a picture pattern with optional step dimensions for graphic rendering\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PicturePattern.PicturePattern(Microsoft.Maui.Graphics.IPicture picture, float stepX, float stepY)\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Extension (Location) in MAUI\nDESCRIPTION: This extension method calculates the distance from a Location to another Location. This is an extension on the Location class. The function accepts another Location object and a DistanceUnits enum, then returns the distance as a double.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.LocationExtensions.CalculateDistance(this Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\"\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Background Color in Paint Class in .NET MAUI\nDESCRIPTION: These properties allow getting and setting the background color for paint in a Paint instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.BackgroundColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.BackgroundColor.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.ForegroundColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.ForegroundColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Toolbar Handler Method Signatures in MAUI\nDESCRIPTION: Static method signatures for ToolbarHandler responsible for mapping properties and handling events for the Toolbar control. Includes methods for setting the toolbar title and mappers for general property and command binding.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void\n```\n\n----------------------------------------\n\nTITLE: CarouselView Handler Property Mapping\nDESCRIPTION: Static methods for mapping CarouselView properties like Loop, PeekAreaInsets, and Position in MAUI CarouselViewHandler2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.MapLoop(Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2 handler, Microsoft.Maui.Controls.CarouselView carouselView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.MapPeekAreaInsets(Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2 handler, Microsoft.Maui.Controls.CarouselView carouselView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.MapPosition(Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2 handler, Microsoft.Maui.Controls.CarouselView carouselView) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform Utility Classes in C#\nDESCRIPTION: Definitions of platform-specific utility classes and interfaces for handling platform-specific functionality in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.ElementExtensions\nMicrosoft.Maui.Platform.IImageSourcePartSetter\nMicrosoft.Maui.Platform.IImageSourcePartSetter.Handler.get -> Microsoft.Maui.IElementHandler?\nMicrosoft.Maui.Platform.IImageSourcePartSetter.ImageSourcePart.get -> Microsoft.Maui.IImageSourcePart?\nMicrosoft.Maui.Platform.IImageSourcePartSetter.SetImageSource(object? platformImage) -> void\nMicrosoft.Maui.Platform.ImageSourcePartLoader\nMicrosoft.Maui.Platform.ImageSourcePartLoader.ImageSourcePartLoader(Microsoft.Maui.IElementHandler! handler, System.Func<Microsoft.Maui.IImageSourcePart?>! imageSourcePart, System.Action<object?>! setImage) -> void\nMicrosoft.Maui.Platform.ImageSourcePartLoader.ImageSourcePartLoader(Microsoft.Maui.Platform.IImageSourcePartSetter! setter) -> void\nMicrosoft.Maui.Platform.ImageSourcePartLoader.Reset() -> void\nMicrosoft.Maui.Platform.ImageSourcePartLoader.UpdateImageSourceAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in PictureCanvas in .NET MAUI\nDESCRIPTION: This property allows setting the fill color for the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.FillColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Dash Pattern in Skia Canvas\nDESCRIPTION: This operation modifies stroke dash patterns, providing customization of line styles for path outlines with precise control of dash sequence and offsets.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.PlatformSetStrokeDashPattern(float[] strokePattern, float strokeDashOffset, float strokeSize) -> void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Font Paint in Skia Canvas State\nDESCRIPTION: This getter method returns the SKPaint instance applied to font rendering in the SkiaCanvas, allowing control over text appearance through SkiaSharp paint properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontPaint.get -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions PreferredToolbarColor setter in MAUI\nDESCRIPTION: This property setter sets the preferred toolbar color for the browser. This allows customizing the color of the browser's toolbar, if supported. It is a read/write nullable property of type Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredToolbarColor.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Class Definition\nDESCRIPTION: Defines the HybridWebView control class with methods for JavaScript interaction and file handling. Includes properties for default file and hybrid root configuration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.set -> void\nMicrosoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.set -> void\nMicrosoft.Maui.Controls.HybridWebView.HybridWebView() -> void\n```\n\n----------------------------------------\n\nTITLE: PickOptions Configuration in MAUI (C#)\nDESCRIPTION: Defines static properties for configuring file picking options, including default and image-specific settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.PickOptions.Default.get -> Microsoft.Maui.Storage.PickOptions!\nstatic Microsoft.Maui.Storage.PickOptions.Images.get -> Microsoft.Maui.Storage.PickOptions!\n```\n\n----------------------------------------\n\nTITLE: Abstract Element Handler Implementation - C#\nDESCRIPTION: Abstract handler class for creating and managing platform-specific UI elements in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nabstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\nabstract Microsoft.Maui.Handlers.ViewHandler.RemoveContainer() -> void\nabstract Microsoft.Maui.Handlers.ViewHandler.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: Semantic Extensions for Accessibility\nDESCRIPTION: Extension methods related to accessibility semantics. Currently provides the ability to set semantic focus on a view element.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SemanticExtensions.SetSemanticFocus(this Microsoft.Maui.IView! element) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Open File Request Class in .NET MAUI\nDESCRIPTION: The OpenFileRequest class defines properties for file opening operations, including file content, presentation bounds, and title.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.get -> Microsoft.Maui.Storage.ReadOnlyFile?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest() -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.ReadOnlyFile! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.get -> string?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing SecureStorage in MAUI (C#)\nDESCRIPTION: These methods provide access to the SecureStorage functionality in MAUI. They include retrieving the default instance, getting and setting the default accessibility, and performing secure storage operations asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\nstatic Microsoft.Maui.Storage.SecureStorage.DefaultAccessible.get -> Security.SecAccessible\nstatic Microsoft.Maui.Storage.SecureStorage.DefaultAccessible.set -> void\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value, Security.SecAccessible accessible) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Adding Overlay to a Window\nDESCRIPTION: Allows the addition of a specified overlay element to the window, enhancing the application’s UI capabilities. Returns a boolean to indicate success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\n```\n\n----------------------------------------\n\nTITLE: Optimizing Attributed Text Runs in C#\nDESCRIPTION: This method optimizes a list of attributed text runs for a given text length. It's an extension method for List<IAttributedTextRun>.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Optimize(this System.Collections.Generic.List<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int textLength) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraph Run in Attributed Text in MAUI\nDESCRIPTION: This method creates a paragraph run from a specified section of attributed text, along with runs and starting index for searches. It returns the length of the created paragraph.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphRun(this Microsoft.Maui.Graphics.Text.IAttributedText text, int start, int length, System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int startIndexForSearch = 0) -> int\n```\n\n----------------------------------------\n\nTITLE: WindowOverlay Deinitialize Method in C#\nDESCRIPTION: Virtual method that deinitializes the window overlay, cleaning up resources. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_193\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.Deinitialize() -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining IFlexLayout Interface in C#\nDESCRIPTION: The IFlexLayout interface provides properties for configuring the layout behavior of flex-based components in .NET MAUI, including alignment and spacing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IFlexLayout.AlignContent.get -> Microsoft.Maui.Layouts.FlexAlignContent\nMicrosoft.Maui.IFlexLayout.AlignItems.get -> Microsoft.Maui.Layouts.FlexAlignItems\nMicrosoft.Maui.IFlexLayout.Direction.get -> Microsoft.Maui.Layouts.FlexDirection\nMicrosoft.Maui.IFlexLayout.JustifyContent.get -> Microsoft.Maui.Layouts.FlexJustify\nMicrosoft.Maui.IFlexLayout.Layout(double width, double height) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing FlexBasis Operators in C# for Microsoft.Maui.Layouts\nDESCRIPTION: This snippet defines operators for the FlexBasis struct in the Microsoft.Maui.Layouts namespace. It includes an implicit conversion from float, and equality and inequality operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.FlexBasis.implicit operator Microsoft.Maui.Layouts.FlexBasis(float length) -> Microsoft.Maui.Layouts.FlexBasis\nstatic Microsoft.Maui.Layouts.FlexBasis.operator !=(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\nstatic Microsoft.Maui.Layouts.FlexBasis.operator ==(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Initializing Window Overlay\nDESCRIPTION: Initializes the window overlay, preparing it for use and ensuring that all necessary resources are allocated.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.Initialize() -> bool\n```\n\n----------------------------------------\n\nTITLE: Declaring Keyboard Flags\nDESCRIPTION: Defines various keyboard flags for indicating specific keyboard capabilities or requirements such as capitalization and suggestions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.All = -1 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.CapitalizeCharacter = 16 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.CapitalizeNone = 32 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.CapitalizeSentence = 1 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.CapitalizeWord = 8 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.None = 0 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.Spellcheck = 2 -> Microsoft.Maui.KeyboardFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardFlags.Suggestions = 4 -> Microsoft.Maui.KeyboardFlags\n```\n\n----------------------------------------\n\nTITLE: Property Mapper Extensions for MAUI Handlers\nDESCRIPTION: Extension methods that modify property mappers in the MAUI handler architecture. These methods support appending, prepending, modifying, and replacing mappings between view properties and their handlers, enabling customization of the handler pipeline.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\nstatic Microsoft.Maui.PropertyMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Resetting Skia Canvas State\nDESCRIPTION: This method resets the SkiaCanvasState to the provided SKPaint configurations for font, fill, and stroke, ensuring consistent initial state or restoring settings quickly.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: MapSpan Operations\nDESCRIPTION: Static methods for MapSpan creation and comparison operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Communication Static Methods in C#\nDESCRIPTION: Static method declarations for communication features including contacts, email, phone and SMS functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IContacts!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void\n```\n\n----------------------------------------\n\nTITLE: Virtual UpdateLayout Method (ItemsViewHandler)\nDESCRIPTION: This code defines a virtual method `UpdateLayout` within the `ItemsViewHandler2` class. This method is responsible for updating the layout of the items within an `ItemsView` control, likely triggered by changes in data or constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.UpdateLayout() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Copying PathF in .NET MAUI\nDESCRIPTION: This constructor creates a copy of an existing PathF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PathF path) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating a SkiaBitmapExportContext\nDESCRIPTION: Constructor for SkiaBitmapExportContext that initializes a bitmap rendering context with specified dimensions and properties. Parameters control width, height, display scale, DPI, bitmap disposal, and transparency.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaBitmapExportContext.SkiaBitmapExportContext(int width, int height, float displayScale, int dpi = 72, bool disposeBitmap = true, bool transparent = true) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Stroke Paint with Alpha\nDESCRIPTION: Retrieves an SKPaint used for strokes that includes alpha transparency, providing enhanced control over line transparency for graphic elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.StrokePaintWithAlpha.get -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Translating in W2DCanvas\nDESCRIPTION: This method translates the drawing context of the W2DCanvas by specified amounts along the x and y axes. It modifies future drawing operations but does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformTranslate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: NoCaretField Implementation in C#\nDESCRIPTION: NoCaretField is a specialized text field that doesn't display a text cursor, useful for read-only text fields or specialized input scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.NoCaretField\nMicrosoft.Maui.Platform.NoCaretField.NoCaretField() -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Attributes from IAttributedTextRun in C#\nDESCRIPTION: This snippet defines a getter method for accessing text attributes of an IAttributedTextRun interface, returning ITextAttributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.IAttributedTextRun.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes\n```\n\n----------------------------------------\n\nTITLE: Overriding ProgressBar, RadioButton, and RefreshView Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for ProgressBarHandler, RadioButtonHandler, and RefreshViewHandler classes that manage platform view creation, handler connection/disconnection for progress indicators, radio buttons, and pull-to-refresh functionality in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ProgressBarHandler.CreatePlatformView() -> UIKit.UIProgressView!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiRefreshView! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiRefreshView!\noverride Microsoft.Maui.Handlers.RefreshViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiRefreshView! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ValueTargetProvider Constructor in C#\nDESCRIPTION: Declares a constructor for the ValueTargetProvider class in the Microsoft.Maui.Controls.Xaml.Internals namespace. It takes two non-null parameters: targetObject and targetProperty.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\n```\n\n----------------------------------------\n\nTITLE: TitleBar Constants\nDESCRIPTION: String constants defining state names for TitleBar content and icon visibility states.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.ContentHiddenState = \"ContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.ContentVisibleState = \"ContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconHiddenState = \"IconCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconVisibleState = \"IconVisible\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Core View Extensions for Tizen Platform\nDESCRIPTION: Extension methods for Tizen.NUI.BaseComponents.View elements that handle common view operations like focus management, measurement invalidation, and view property updates. These methods bridge between MAUI abstractions and Tizen platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.Focus(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.FocusRequest! request) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.InvalidateMeasure(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.ToHandler(this Microsoft.Maui.IView! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IPlatformViewHandler!\nstatic Microsoft.Maui.Platform.ViewExtensions.ToPlatformVisibility(this Microsoft.Maui.Visibility visibility) -> bool\nstatic Microsoft.Maui.Platform.ViewExtensions.Unfocus(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for ColorTypeConverter in C#\nDESCRIPTION: This snippet overrides methods for the ColorTypeConverter to handle conversions from and to different types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object fromValue) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) -> System.ComponentModel.TypeConverter.StandardValuesCollection\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.ColorTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Shadow Paint in Skia Canvas State\nDESCRIPTION: This method returns an SKPaint configured for shadow rendering, dictating how shadows are applied with specified offsets, enhancing visual effects within a graphics context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.GetShadowPaint(float sx, float sy) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Implementing GtkSkiaDirectRenderer Class for MAUI Graphics\nDESCRIPTION: Implementation of the ISkiaGraphicsRenderer interface specifically for GTK platform. Provides direct rendering capabilities for Skia-based graphics in GTK applications with methods for handling lifecycle and drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia.GtkSharp/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Detached() -> void\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Dispose() -> void\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.GtkSkiaDirectRenderer() -> void\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Invalidate() -> void\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Invalidate(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.SizeChanged(int width, int height) -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.BackgroundColor.get -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.BackgroundColor.set -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Canvas.get -> Microsoft.Maui.Graphics.ICanvas\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Draw(SkiaSharp.SKCanvas skiaCanvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Drawable.get -> Microsoft.Maui.Graphics.IDrawable\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.Drawable.set -> void\n~Microsoft.Maui.Graphics.Skia.GtkSkiaDirectRenderer.GraphicsView.set -> void\n```\n\n----------------------------------------\n\nTITLE: Image Conversion Extensions for Android\nDESCRIPTION: Extension method to convert MAUI IImage to Android Bitmap. This enables cross-platform image handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.ImageExtensions.AsBitmap(this Microsoft.Maui.Graphics.IImage image) -> Android.Graphics.Bitmap\n```\n\n----------------------------------------\n\nTITLE: Setting DateTimeOffset Values in MAUI Preferences\nDESCRIPTION: Method signatures for storing DateTimeOffset values in preferences storage. Includes overloads with and without sharedName parameter for namespace isolation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining UI Element Handlers in C# for MAUI\nDESCRIPTION: This snippet defines various handler classes for UI elements such as ActivityIndicator, Button, CheckBox, and more. These handlers are responsible for managing the interaction between the virtual view and the platform-specific implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler() -> void\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ActivityIndicatorHandler.ActivityIndicatorHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n\nMicrosoft.Maui.Handlers.ButtonHandler\nMicrosoft.Maui.Handlers.ButtonHandler.ButtonHandler() -> void\nMicrosoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ButtonHandler.ButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n\nMicrosoft.Maui.Handlers.CheckBoxHandler\nMicrosoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler() -> void\nMicrosoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.CheckBoxHandler.CheckBoxHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: XML Text Handling Components in C#\nDESCRIPTION: Classes for reading and writing attributed text in XML format, providing serialization capabilities for rich text content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextReader\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextReader.ElementEnded() -> void\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextReader.ElementStarted() -> void\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextReader.XmlAttributedTextReader() -> void\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextWriter\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextWriter.XmlAttributedTextWriter() -> void\n```\n\n----------------------------------------\n\nTITLE: Path Building and Parsing Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Static methods for constructing paths from string definitions and parsing float values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PathBuilder.Build(string definition) -> Microsoft.Maui.Graphics.PathF\nstatic Microsoft.Maui.Graphics.PathBuilder.ParseFloat(string value) -> float\n```\n\n----------------------------------------\n\nTITLE: Element Handling Mapping Properties in MAUI (C#)\nDESCRIPTION: Static properties that define mappers for element handlers, including ElementCommandMapper and ElementMapper. These properties facilitate property and command mapping for MAUI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Gradient and Paint Configuration Methods\nDESCRIPTION: Methods for configuring linear gradients, paint colors, and gradient stops\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLinearGradientPaint.LinearGradientPaint(PaintGradientStop[] gradientStops, Point startPoint, Point endPoint)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nPaintGradientStop.PaintGradientStop(float offset, Color color)\n```\n\n----------------------------------------\n\nTITLE: GridLength Operators\nDESCRIPTION: Static operator overloads for GridLength type including equality comparisons and implicit conversion from double.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength\nstatic Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\nstatic Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Size Structure Implementation\nDESCRIPTION: Definition of Size and SizeF structures for representing dimensions in both double and float precision. Includes constructors and basic geometric operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Size.Size(double width, double height) -> void\nMicrosoft.Maui.Graphics.SizeF.SizeF(float width, float height) -> void\nMicrosoft.Maui.Graphics.SizeF.TransformNormalBy(in System.Numerics.Matrix3x2 transform) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for ImageButton in .NET MAUI\nDESCRIPTION: In this snippet, we define the property accessors for the IImageButtonHandler interface, enabling interaction with image buttons in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IImageButtonHandler.PlatformView.get -> Google.Android.Material.ImageView.ShapeableImageView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IImageButtonHandler.VirtualView.get -> Microsoft.Maui.IImageButton!\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for ShapeView in .NET MAUI\nDESCRIPTION: This snippet outlines the IShapeViewHandler interface, detailing properties for handling shape views within the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IShapeViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiShapeView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IShapeViewHandler.VirtualView.get -> Microsoft.Maui.IShapeView!\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of SKPaint\nDESCRIPTION: Extension method for SkiaSharp's SKPaint that creates a copy of the paint object. This is useful when you need to modify paint properties without affecting the original.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKPaintExtensions.CreateCopy(this SkiaSharp.SKPaint paint) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Background Image Source Management for WinUI Controls\nDESCRIPTION: Extension methods for asynchronously updating background image sources on Windows UI controls and panels. These methods enable MAUI applications to set cross-platform image sources on Windows platform controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateBackgroundImageSourceAsync(this Microsoft.UI.Xaml.Controls.Control! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.ControlExtensions.UpdateBackgroundImageSourceAsync(this Microsoft.UI.Xaml.Controls.Panel! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Text Input Extensions for Text Handling in MAUI\nDESCRIPTION: These extension methods provide functionality for text input controls in MAUI. They include methods for validating text length constraints and updating the text of a text input control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_160\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ITextInputExtensions.TextWithinMaxLength(this Microsoft.Maui.ITextInput! textInput, string? text, Foundation.NSRange range, string! replacementString) -> bool\nstatic Microsoft.Maui.ITextInputExtensions.UpdateText(this Microsoft.Maui.ITextInput! textInput, string? text) -> void\n```\n\n----------------------------------------\n\nTITLE: Stopping Magnetometer Monitoring - C# .NET MAUI\nDESCRIPTION: Stops the monitoring of the magnetometer data. This is a void method and does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: PersistedState Class in C#\nDESCRIPTION: Definition of PersistedState class which provides functionality for persisting application state across sessions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PersistedState\nMicrosoft.Maui.PersistedState.PersistedState() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Point Operations in MAUI Graphics\nDESCRIPTION: The Point class encapsulates coordinates in a 2D space, offering various methods for manipulation including offsetting, rounding, and calculating distances. These operations are crucial for positioning and transforming graphical elements within a UI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Point.Point() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Point.Point(double x, double y) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Point.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Point\n```\n\n----------------------------------------\n\nTITLE: Path Drawing and Manipulation Extensions\nDESCRIPTION: Extensions for creating and manipulating paths, including SVG path operations and scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PathArcExtensions.DrawArc(this Microsoft.Maui.Graphics.PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation) -> void\nstatic Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float scale) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Crc64 Hash Computation Methods in .NET MAUI\nDESCRIPTION: Static methods for calculating CRC64 hash values from byte arrays, streams, and strings. These methods are used for generating consistent hash values for data integrity verification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Crc64.ComputeHash(byte[]! input) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHash(System.IO.Stream! inputStream) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHashString(string! input) -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressBarHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the ProgressBarHandler class, including a command mapper, a property mapper, and methods for mapping progress and progress color properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Semantic Screen Reader in .NET MAUI\nDESCRIPTION: Provides access to the default implementation of ISemanticScreenReader for accessibility features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Accessibility.SemanticScreenReader.Default.get -> Microsoft.Maui.Accessibility.ISemanticScreenReader!\n```\n\n----------------------------------------\n\nTITLE: Mapping ProgressBar Color in C#\nDESCRIPTION: This static method maps the progress color for a ProgressBar component in MAUI. It takes an IProgressBarHandler and an IProgress object as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Core Interface Definitions\nDESCRIPTION: Interface definitions for core MAUI components including command mappers, element handlers, layouts, and UI controls. These interfaces define the contract for implementing key MAUI functionality across different platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ICommandMapper.Invoke(Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement? virtualView, string! property, object? args) -> void\nMicrosoft.Maui.ICommandMapper<TVirtualView, TViewHandler>\nMicrosoft.Maui.ICommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Extension Methods for SVG in .NET MAUI Graphics\nDESCRIPTION: Extension methods for the IFont interface to generate SVG-compatible style and weight attributes. These methods help when rendering fonts in SVG output formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.IFontExtensions.GetSvgStyle(this Microsoft.Maui.Graphics.IFont font) -> string\nstatic Microsoft.Maui.Graphics.IFontExtensions.GetSvgWeight(this Microsoft.Maui.Graphics.IFont font) -> string\n```\n\n----------------------------------------\n\nTITLE: Layout Management Interfaces in .NET MAUI\nDESCRIPTION: Interfaces and classes for managing layout arrangements, measurements, and stack-based layouts in MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.ILayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Mapping TimePicker Properties in C#\nDESCRIPTION: Static methods for mapping properties of TimePicker control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing EasingTypeConverter in MAUI - C#\nDESCRIPTION: Type converter implementation for handling Easing values in MAUI, including conversion and validation methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: XAML Loading Extensions\nDESCRIPTION: Extension methods for loading XAML content into views. Provides methods to load XAML from string or using a calling type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, string xaml) -> TXaml\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, System.Type callingType) -> TXaml\n```\n\n----------------------------------------\n\nTITLE: Converting IFont to CTFont in MAUI\nDESCRIPTION: This method converts an IFont instance into a CoreText CTFont. An optional font size can be specified. The result is a CTFont object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.FontExtensions.ToCTFont(this Microsoft.Maui.Graphics.IFont font, System.Runtime.InteropServices.NFloat? size = null) -> CoreText.CTFont\n```\n\n----------------------------------------\n\nTITLE: SwipeItemViewHandler Mappings in MAUI\nDESCRIPTION: Static methods for managing SwipeItemView controls, including content mapping and visibility. Provides both property and command mappers for handling SwipeItemView interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Removing Window Element from Overlay\nDESCRIPTION: Allows the removal of a specified window element from the overlay, helping manage the visual hierarchy dynamically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool\n```\n\n----------------------------------------\n\nTITLE: PDF Extensions for Converting Microsoft.Maui.Graphics.IPdfPage\nDESCRIPTION: Extension methods for IPdfPage interface to convert PDF pages to bytes or stream format. These methods facilitate PDF manipulation and sharing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IPdfPage target) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsStream(this Microsoft.Maui.Graphics.IPdfPage target) -> System.IO.Stream\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Compiler directive that enables nullable reference type checking for the subsequent code. This helps catch potential null reference exceptions at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Control Handlers for iOS\nDESCRIPTION: Method signatures for form input controls like Picker, ProgressBar, RadioButton, and RefreshView. These handlers create and manage iOS-specific implementations of common input controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPageControl!\noverride Microsoft.Maui.Handlers.IndicatorViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPageControl! platformView) -> void\noverride Microsoft.Maui.Handlers.LabelHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiLabel!\noverride Microsoft.Maui.Handlers.LabelHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.PageHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!\noverride Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPicker!\noverride Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerSource.GetComponentCount(UIKit.UIPickerView! picker) -> nint\noverride Microsoft.Maui.Handlers.PickerSource.GetRowsInComponent(UIKit.UIPickerView! pickerView, nint component) -> nint\noverride Microsoft.Maui.Handlers.PickerSource.GetTitle(UIKit.UIPickerView! picker, nint row, nint component) -> string!\noverride Microsoft.Maui.Handlers.PickerSource.Selected(UIKit.UIPickerView! picker, nint row, nint component) -> void\noverride Microsoft.Maui.Handlers.ProgressBarHandler.CreatePlatformView() -> UIKit.UIProgressView!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!\noverride Microsoft.Maui.Handlers.RadioButtonHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiRefreshView! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiRefreshView!\noverride Microsoft.Maui.Handlers.RefreshViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiRefreshView! platformView) -> void\noverride Microsoft.Maui.Handlers.RefreshViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining LineBreakMode Enumeration\nDESCRIPTION: Enumeration specifying text line break behavior including wrapping and truncation options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.LineBreakMode.NoWrap = 0\nMicrosoft.Maui.LineBreakMode.WordWrap = 1\nMicrosoft.Maui.LineBreakMode.CharacterWrap = 2\nMicrosoft.Maui.LineBreakMode.HeadTruncation = 3\nMicrosoft.Maui.LineBreakMode.TailTruncation = 4\nMicrosoft.Maui.LineBreakMode.MiddleTruncation = 5\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeViewSwipeChanging class in C#\nDESCRIPTION: Declares a class for SwipeView swipe changing events, including Offset and SwipeDirection properties and a constructor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeViewSwipeChanging\nMicrosoft.Maui.SwipeViewSwipeChanging.Offset.get -> double\nMicrosoft.Maui.SwipeViewSwipeChanging.Offset.init -> void\nMicrosoft.Maui.SwipeViewSwipeChanging.SwipeDirection.get -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeViewSwipeChanging.SwipeDirection.init -> void\nMicrosoft.Maui.SwipeViewSwipeChanging.SwipeViewSwipeChanging(Microsoft.Maui.SwipeDirection SwipeDirection, double Offset) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Window Width\nDESCRIPTION: Returns the width of the current window, which can be useful for responsive design implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Width.get -> double\n```\n\n----------------------------------------\n\nTITLE: RectF to Android Rect Conversion Operators\nDESCRIPTION: Implicit operators to convert MAUI RectF to Android Rect and RectF. These operators enable seamless conversion of floating-point rectangle coordinates between platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Android.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Android.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Android.Graphics.RectF(Microsoft.Maui.Graphics.RectF rect) -> Android.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.TryParse(string value, out Microsoft.Maui.Graphics.RectF rectangleF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthenticator Interface in C#\nDESCRIPTION: Defines the IWebAuthenticator interface with an AuthenticateAsync method for web authentication in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.IWebAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.WebAuthenticatorOptions! webAuthenticatorOptions) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: Overriding Draw Method for PicturePattern in .NET MAUI Graphics\nDESCRIPTION: This override implements the `Draw` method for the `PicturePattern` class in the Microsoft.Maui.Graphics library. The `Draw` method takes an `ICanvas` object as input and draws the picture pattern onto the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.PicturePattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining IButtonHandler Interface in C#\nDESCRIPTION: Interface definition for button handlers, including property getters for ImageSourceLoader, PlatformView, and VirtualView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IButtonHandler\nMicrosoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nMicrosoft.Maui.Handlers.IButtonHandler.PlatformView.get -> object!\nMicrosoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Color in PictureCanvas in .NET MAUI\nDESCRIPTION: This property allows setting the stroke color for drawing paths in the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.StrokeColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing W2DCanvasStateService\nDESCRIPTION: This snippet defines the constructor for the W2DCanvasStateService class, which is crucial for instantiating services that manage the state of the W2D canvas. The method does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DCanvasStateService.W2DCanvasStateService() -> void\n```\n\n----------------------------------------\n\nTITLE: Color Type Conversion in MAUI Graphics\nDESCRIPTION: Implements type conversion methods for color objects, supporting standard value retrieval and type conversion\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object fromValue)\n```\n\n----------------------------------------\n\nTITLE: OrientationSensorImplementation Class in C#\nDESCRIPTION: Implementation of the orientation sensor with methods for starting and stopping the sensor at a specified speed. It includes properties to check if the sensor is supported and currently monitoring, and an event for reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.OrientationSensorImplementation() -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>?\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorImplementation.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Shape Drawing API Signatures\nDESCRIPTION: Interfaces and classes for drawing and managing shapes in MAUI graphics system\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IShape {\n    PathF PathForBounds(Rect bounds);\n}\n\npublic class ShapeDrawable {\n    public ShapeDrawable();\n    public ShapeDrawable(IShapeView? shape);\n    public void Draw(ICanvas canvas, RectF dirtyRect);\n    public void UpdateShapeView(IShapeView? shape);\n    public void UpdateRenderTransform(Matrix3x2? renderTransform);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Image in ImagePaint Class in .NET MAUI\nDESCRIPTION: This property allows getting and setting the image in the ImagePaint class. The image is represented as an IImage instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ImagePaint.Image.get -> Microsoft.Maui.Graphics.IImage\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ImagePaint.Image.set -> void\n```\n\n----------------------------------------\n\nTITLE: MarkerType Enumeration Definition in C#\nDESCRIPTION: Definition of MarkerType enumeration in Microsoft.Maui.Graphics.Text namespace that defines different marker styles for lists and text markers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.MarkerType\nMicrosoft.Maui.Graphics.Text.MarkerType.ClosedCircle = 0 -> Microsoft.Maui.Graphics.Text.MarkerType\nMicrosoft.Maui.Graphics.Text.MarkerType.OpenCircle = 1 -> Microsoft.Maui.Graphics.Text.MarkerType\nMicrosoft.Maui.Graphics.Text.MarkerType.Hyphen = 2 -> Microsoft.Maui.Graphics.Text.MarkerType\n```\n\n----------------------------------------\n\nTITLE: Defining IEmail Interface in C#\nDESCRIPTION: Defines the IEmail interface with methods for composing emails and checking composition support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IEmail\nMicrosoft.Maui.ApplicationModel.Communication.IEmail.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage? message) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.ApplicationModel.Communication.IEmail.IsComposeSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Composing an SMS in .NET MAUI\nDESCRIPTION: This snippet allows the composition of an SMS message within a MAUI application by accepting an SmsMessage object. It returns a Task upon completion. The ISms interface is used here.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.ISms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Modifying Stroke Color in Skia Canvas\nDESCRIPTION: Sets the stroke color for drawing operations, ensuring lines and borders maintain desired aesthetics through adjustable color properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.StrokeColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Handler Configuration Extensions (C#)\nDESCRIPTION: Extension methods for configuring MAUI handlers in a MAUI application, allowing for registration of custom handlers for specific view types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Maui.Hosting.HandlerMauiAppBuilderExtensions.ConfigureMauiHandlers(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IMauiHandlersCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection, System.Type! viewType, System.Type! handlerType) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Hosting.MauiHandlersCollectionExtensions.AddHandler<TType, TTypeRender>(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\n```\n\n----------------------------------------\n\nTITLE: MAUI Corner Radius Structure\nDESCRIPTION: Structure defining corner radius properties for UI elements with rounded corners.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic struct CornerRadius {\n    public double BottomLeft { get; }\n    public double BottomRight { get; }\n    public CornerRadius();\n    public CornerRadius(double uniformRadius);\n    public CornerRadius(double topLeft, double topRight, double bottomLeft, double bottomRight);\n}\n```\n\n----------------------------------------\n\nTITLE: MAUI Text Input Extensions\nDESCRIPTION: Extension method for updating text in MAUI text input controls. This method provides a standardized way to update text content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ITextInputExtensions.UpdateText(this Microsoft.Maui.ITextInput! textInput, string? text) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Window Element to Overlay\nDESCRIPTION: Enables the addition of a specified window element to the current window overlay, facilitating layered UI designs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.AddWindowElement(Microsoft.Maui.IWindowOverlayElement! element) -> bool\n```\n\n----------------------------------------\n\nTITLE: PointF Static Methods and Operators in MAUI Graphics\nDESCRIPTION: Static methods and operator overloads for Microsoft.Maui.Graphics.PointF, providing conversion, equality, and arithmetic operations for floating-point based points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.PointF(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.PointF p) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.PointF p) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.PointF.explicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.PointF pt) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.operator +(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.operator ==(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic Microsoft.Maui.Graphics.PointF.operator !=(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\n```\n\n----------------------------------------\n\nTITLE: File System Operations in MAUI (C#)\nDESCRIPTION: Static properties and methods for file system operations. Includes methods to get app directories, check file existence, and open app package files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FileSystem.AppDataDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.AppPackageFileExistsAsync(string! filename) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Storage.FileSystem.CacheDirectory.get -> string!\nstatic Microsoft.Maui.Storage.FileSystem.Current.get -> Microsoft.Maui.Storage.IFileSystem!\nstatic Microsoft.Maui.Storage.FileSystem.OpenAppPackageFileAsync(string! filename) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: Optimizing Attributed Text in MAUI\nDESCRIPTION: This method optimizes the structure and performance of the provided attributed text, preparing it for more efficient rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextExtensions.Optimize(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: Size and SizeF Parsing Methods\nDESCRIPTION: Static methods to parse string representations of Size and SizeF objects. These methods provide string parsing capability for size values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.TryParse(string value, out Microsoft.Maui.Graphics.Size size) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.TryParse(string value, out Microsoft.Maui.Graphics.SizeF sizeF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Secure Storage Management\nDESCRIPTION: Interfaces and methods for securely storing and retrieving key-value data across different platforms\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nISecureStorage.SetAsync(string key, string value) -> Task\n```\n\n----------------------------------------\n\nTITLE: CompassData Class Implementation in C#\nDESCRIPTION: Class representing compass sensor data in .NET MAUI. Contains the heading relative to magnetic north with constructors and an equality comparison method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.CompassData.CompassData() -> void\nMicrosoft.Maui.Devices.Sensors.CompassData.CompassData(double headingMagneticNorth) -> void\nMicrosoft.Maui.Devices.Sensors.CompassData.Equals(Microsoft.Maui.Devices.Sensors.CompassData other) -> bool\nMicrosoft.Maui.Devices.Sensors.CompassData.HeadingMagneticNorth.get -> double\n```\n\n----------------------------------------\n\nTITLE: RectF Class Definition in MAUI Graphics\nDESCRIPTION: Class definitions and methods for handling rectangular shapes in single precision (float). Provides similar functionality to Rect but with float-based parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.RectF.Contains(float x, float y) -> bool\nMicrosoft.Maui.Graphics.RectF.Inflate(float width, float height) -> Microsoft.Maui.Graphics.RectF\nMicrosoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r) -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Defining ShareFileRequest Class in C#\nDESCRIPTION: Defines the ShareFileRequest class with properties and constructors for creating file sharing requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.File.get -> Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile?\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.File.set -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest() -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Mapper Properties in .NET MAUI\nDESCRIPTION: Static properties that provide access to the mapper and command mapper for IView implementations. These are used to connect MAUI view abstractions to platform-specific implementations through property and command mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void\n```\n\n----------------------------------------\n\nTITLE: Location Comparison Operators in C#\nDESCRIPTION: Equality and inequality operators for comparing Location objects in the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.operator !=(Microsoft.Maui.Devices.Sensors.Location left, Microsoft.Maui.Devices.Sensors.Location right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.Location.operator ==(Microsoft.Maui.Devices.Sensors.Location left, Microsoft.Maui.Devices.Sensors.Location right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals Method for Font Class in C#\nDESCRIPTION: This snippet overrides the Equals method in the Font class to allow for equality checks between font instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Font.Equals(object obj) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility enum in C#\nDESCRIPTION: Declares an enumeration for visibility options, including Collapsed, Hidden, and Visible.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Visibility\nMicrosoft.Maui.Visibility.Collapsed = 2 -> Microsoft.Maui.Visibility\nMicrosoft.Maui.Visibility.Hidden = 1 -> Microsoft.Maui.Visibility\nMicrosoft.Maui.Visibility.Visible = 0 -> Microsoft.Maui.Visibility\n```\n\n----------------------------------------\n\nTITLE: Defining IBattery Interface in C#\nDESCRIPTION: Interface for accessing battery information in MAUI, including charge level, power source, state, and energy saver status.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IBattery\nMicrosoft.Maui.Devices.IBattery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\nMicrosoft.Maui.Devices.IBattery.ChargeLevel.get -> double\nMicrosoft.Maui.Devices.IBattery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\nMicrosoft.Maui.Devices.IBattery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\nMicrosoft.Maui.Devices.IBattery.PowerSource.get -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.IBattery.State.get -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: Defining ITextAttributes Interface in C#\nDESCRIPTION: Defines the ITextAttributes interface with properties for font size, alignment, and margin in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ITextAttributes\nMicrosoft.Maui.Graphics.ITextAttributes.FontSize.get -> float\nMicrosoft.Maui.Graphics.ITextAttributes.FontSize.set -> void\nMicrosoft.Maui.Graphics.ITextAttributes.HorizontalAlignment.get -> Microsoft.Maui.Graphics.HorizontalAlignment\nMicrosoft.Maui.Graphics.ITextAttributes.HorizontalAlignment.set -> void\nMicrosoft.Maui.Graphics.ITextAttributes.Margin.get -> float\nMicrosoft.Maui.Graphics.ITextAttributes.Margin.set -> void\nMicrosoft.Maui.Graphics.ITextAttributes.VerticalAlignment.get -> Microsoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.ITextAttributes.VerticalAlignment.set -> void\n```\n\n----------------------------------------\n\nTITLE: Thickness Class Operators and Conversions in MAUI\nDESCRIPTION: Implicit conversions and mathematical operators for working with the Thickness class that represents padding or margin values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(double uniformSize) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.implicit operator Microsoft.Maui.Thickness(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator -(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator !=(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool\nstatic Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, double addend) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator +(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> Microsoft.Maui.Thickness\nstatic Microsoft.Maui.Thickness.operator ==(Microsoft.Maui.Thickness left, Microsoft.Maui.Thickness right) -> bool\nstatic Microsoft.Maui.Thickness.Zero -> Microsoft.Maui.Thickness\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Text Rendering Methods\nDESCRIPTION: Method signatures for drawing strings and text with various alignment options in the PictureCanvas class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform Representation of Skia Image\nDESCRIPTION: Provides access to the SKBitmap representation of a Skia image, bridging platform-specific image management with cross-platform operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.PlatformRepresentation.get -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Alignment Enumeration in .NET MAUI\nDESCRIPTION: Provides predefined alignment options for layout positioning including start, center, end, and fill modes\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Primitives.LayoutAlignment.Center = 2 -> Microsoft.Maui.Primitives.LayoutAlignment\n```\n\n----------------------------------------\n\nTITLE: Overriding SwitchHandler Methods for Tizen Platform\nDESCRIPTION: These methods override SwitchHandler functionality to create, connect, and disconnect Tizen.UIExtensions.NUI.GraphicsView.Switch elements for the Tizen implementation of MAUI switches.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SwitchHandler.ConnectHandler(Tizen.UIExtensions.NUI.GraphicsView.Switch! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.CreatePlatformView() -> Tizen.UIExtensions.NUI.GraphicsView.Switch!\noverride Microsoft.Maui.Handlers.SwitchHandler.DisconnectHandler(Tizen.UIExtensions.NUI.GraphicsView.Switch! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Requesting Navigation in NavigationViewHandler in C#\nDESCRIPTION: This static method requests navigation for a NavigationViewHandler, taking an INavigationViewHandler, IStackNavigation, and an optional argument.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.RequestNavigation(Microsoft.Maui.Handlers.INavigationViewHandler! arg1, Microsoft.Maui.IStackNavigation! arg2, object? arg3) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding SearchBarHandler Methods for Tizen Platform\nDESCRIPTION: These methods override SearchBarHandler functionality to create, connect, and disconnect MauiSearchBar elements for the Tizen implementation of MAUI search bars.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SearchBarHandler.ConnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSearchBar!\noverride Microsoft.Maui.Handlers.SearchBarHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: CheckBoxHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the CheckBoxHandler class, handling properties like foreground color and checked state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.CheckBoxHandler!>!\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapForeground(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.MapIsChecked(Microsoft.Maui.Handlers.ICheckBoxHandler! handler, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Handlers.CheckBoxHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ICheckBox!, Microsoft.Maui.Handlers.ICheckBoxHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Navigation Modes in Microsoft MAUI\nDESCRIPTION: This snippet defines the various navigation modes available in the MAUI framework, assigning each mode an integer value for identification. The modes include Bicycling, Default, Driving, None, Transit, and Walking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Bicycling = 2 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Default = 1 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Driving = 3 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.None = 0 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Transit = 4 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Walking = 5 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for Slider Handler in .NET MAUI\nDESCRIPTION: Static methods for mapping Slider properties including value range, colors and thumb attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Override PrepareForReuse Method (TemplatedCell)\nDESCRIPTION: This code snippet represents an override of the PrepareForReuse method in TemplatedCell2. This likely relates to resetting the state of a templated cell when it is reused in a MAUI ItemsView for performance optimization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.TemplatedCell2.PrepareForReuse() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Border Handler Methods in MAUI\nDESCRIPTION: Static methods for BorderHandler that map border-related properties like background, stroke attributes, and content between MAUI border view abstractions and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.BorderHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.IBorderHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing RootComponent Class for WPF Blazor WebView in C#\nDESCRIPTION: Defines the RootComponent class for specifying root components in WPF Blazor WebView, including properties for component type, parameters, and selector.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Wpf/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.ComponentType.get -> System.Type!\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.ComponentType.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.Parameters.get -> System.Collections.Generic.IDictionary<string!, object?>?\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.Parameters.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.RootComponent() -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.Selector.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Wpf.RootComponent.Selector.set -> void\n```\n\n----------------------------------------\n\nTITLE: View Handler Implementation Methods in .NET MAUI\nDESCRIPTION: Virtual methods specific to view handlers that manage view lifecycle, focus handling, measurement, and platform-specific view integration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Handlers.ViewHandler.NeedsContainer.get -> bool\nvirtual Microsoft.Maui.Handlers.ViewHandler.OnFocused() -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler.OnPlatformViewDeleted() -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler.OnUnfocused() -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.Measure(double availableWidth, double availableHeight) -> Microsoft.Maui.Graphics.Size\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IView! view) -> void\nvirtual Microsoft.Maui.Handlers.WebViewHandler.MinimumSize.get -> double\n```\n\n----------------------------------------\n\nTITLE: Initializing ImageButtonHandler in .NET MAUI\nDESCRIPTION: The snippet provides constructors for the ImageButtonHandler, which manages button controls that include images in MAUI. It allows configuration through property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting App Information in .NET MAUI\nDESCRIPTION: This interface provides access to application metadata such as the app name, version, and build string. It is crucial for retrieving information about the application environment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Name.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version!\n```\n\n----------------------------------------\n\nTITLE: Font Color Handling in Skia Canvas State\nDESCRIPTION: This getter and setter are used to manage the font color attribute, utilizing Microsoft.Maui.Graphics.Color to specify the color applied to text in the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Rect to Android Rect Conversion Operators\nDESCRIPTION: Implicit operators to convert MAUI Rect to Android Rect and RectF. These operators enable seamless conversion of rectangle coordinates between platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Android.Graphics.Rect(Microsoft.Maui.Graphics.Rect rect) -> Android.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Android.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Android.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Rect.TryParse(string value, out Microsoft.Maui.Graphics.Rect rectangle) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for GraphicsView in .NET MAUI\nDESCRIPTION: This snippet outlines the interface IGraphicsViewHandler, focusing on accessing platform and virtual views for graphical representations in a MAUI app.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IGraphicsViewHandler.PlatformView.get -> Microsoft.Maui.Platform.PlatformTouchGraphicsView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IGraphicsViewHandler.VirtualView.get -> Microsoft.Maui.IGraphicsView!\n```\n\n----------------------------------------\n\nTITLE: Defining Geolocation Error Enum in C#\nDESCRIPTION: Enum definition for GeolocationError that represents error conditions when accessing location services. Includes PositionUnavailable (0) and Unauthorized (1) options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GeolocationError.PositionUnavailable = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationError\nMicrosoft.Maui.Devices.Sensors.GeolocationError.Unauthorized = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationError\n```\n\n----------------------------------------\n\nTITLE: Point and PointF Operator Implementations in .NET MAUI\nDESCRIPTION: Operator implementations for Point and PointF classes, including conversion operators and arithmetic operations. These enable intuitive manipulation of point objects in drawing code.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Point.explicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.Point pt) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Point.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.Point size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Point.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.Point size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.Point(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.implicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.Point p) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.operator -(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Point.operator !=(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool\nstatic Microsoft.Maui.Graphics.Point.operator +(Microsoft.Maui.Graphics.Point pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Point.operator ==(Microsoft.Maui.Graphics.Point ptA, Microsoft.Maui.Graphics.Point ptB) -> bool\nstatic Microsoft.Maui.Graphics.Point.Zero -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.PointF.explicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.PointF pt) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Creating and building a new MAUI project (bash)\nDESCRIPTION: This script creates a new MAUI project in a directory named `foo`, then builds and runs it for Android using the dotnet CLI.  It specifies the Release configuration and targets net7.0-android.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir foo && cd foo\n../.dotnet/dotnet new maui\n../.dotnet/dotnet build -c Release -t:Run -f net7.0-android\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeDirection enum in C#\nDESCRIPTION: Declares an enumeration for swipe directions, including Down, Left, Right, and Up.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Down = 8 -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Left = 2 -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Right = 1 -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Up = 4 -> Microsoft.Maui.SwipeDirection\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for ActivityIndicator in .NET MAUI\nDESCRIPTION: This snippet provides getters for the platform and virtual views within the IActivityIndicatorHandler interface, facilitating access to the underlying platform-specific UI component.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IActivityIndicatorHandler.PlatformView.get -> Android.Widget.ProgressBar!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IActivityIndicatorHandler.VirtualView.get -> Microsoft.Maui.IActivityIndicator!\n```\n\n----------------------------------------\n\nTITLE: Resuming Window State\nDESCRIPTION: Signals that the window has resumed, typically used to refresh UI and reinitialize resources after being paused.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Resumed() -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Blur on SkiaCanvas\nDESCRIPTION: Method to apply a blur effect to a SkiaCanvas. The radius parameter controls the intensity of the blur effect.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvas.SetBlur(float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BlendMode Enum Values in C#\nDESCRIPTION: This snippet shows the definition of various BlendMode enum values in the Microsoft.Maui.Graphics namespace. These values represent different blending modes for graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BlendMode.SoftLight = 8 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceAtop = 20 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceIn = 18 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.SourceOut = 19 -> Microsoft.Maui.Graphics.BlendMode\nMicrosoft.Maui.Graphics.BlendMode.Xor = 25 -> Microsoft.Maui.Graphics.BlendMode\n```\n\n----------------------------------------\n\nTITLE: Defining FlexAlignSelf Enum in .NET MAUI\nDESCRIPTION: This snippet defines the FlexAlignSelf enumeration, which is used to specify the alignment of a child element within a flex container. Each value corresponds to a different alignment setting with an integer representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignSelf.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.End = 4 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignSelf\nMicrosoft.Maui.Layouts.FlexAlignSelf.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\n----------------------------------------\n\nTITLE: Constructing EntryHandler in MAUI\nDESCRIPTION: Defines constructors for the `EntryHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. The handler manages the platform-specific implementation of a MAUI Entry control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.EntryHandler.EntryHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.EntryHandler.EntryHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.EntryHandler.EntryHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Launcher and Map Operations in C#\nDESCRIPTION: Methods for launching external applications and opening map locations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.Default.get -> Microsoft.Maui.ApplicationModel.ILauncher!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.Default.get -> Microsoft.Maui.ApplicationModel.IMap!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: MagnetometerData Equality Operators in MAUI C#\nDESCRIPTION: Equality comparison operators for the MagnetometerData struct, allowing comparison between two MagnetometerData instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.MagnetometerData.operator !=(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.MagnetometerData.operator ==(Microsoft.Maui.Devices.Sensors.MagnetometerData left, Microsoft.Maui.Devices.Sensors.MagnetometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Constant Definitions in C#\nDESCRIPTION: Constant values defined in the PictureCommand enumeration. These constants represent various drawing operations, state management, and property settings that can be performed in the graphics system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.DrawLine = 0 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawRectangle = 1 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawRoundedRectangle = 2 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawEllipse = 3 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawPath = 4 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawImage = 5 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawArc = 6 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawPdfPage = 7 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringAtPoint = 20 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringInRect = 21 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringInPath = 22 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawTextInRect = 25 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: RectangleAdorner Implementation in C#\nDESCRIPTION: RectangleAdorner provides visual decoration for MAUI views by drawing rectangles around them. It supports customization through density, offset, fill color, and stroke color parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.RectangleAdorner\nMicrosoft.Maui.RectangleAdorner.Density.get -> float\nMicrosoft.Maui.RectangleAdorner.DrawnRectangle.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.RectangleAdorner.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.RectangleAdorner.Offset.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.RectangleAdorner.RectangleAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void\nMicrosoft.Maui.RectangleAdorner.StrokeColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.RectangleAdorner.VisualView.get -> Microsoft.Maui.IView!\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Class for MAUI in C#\nDESCRIPTION: This snippet defines the Animation class for MAUI, including its constructors, methods, and properties. It provides functionality for creating and managing animations within the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation\nMicrosoft.Maui.Animations.Animation.Add(double beginAt, double duration, Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.Animation.Animation() -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void\nMicrosoft.Maui.Animations.Animation.AnimationManager.get -> Microsoft.Maui.Animations.IAnimationManager?\nMicrosoft.Maui.Animations.Animation.animationManger -> Microsoft.Maui.Animations.IAnimationManager?\nMicrosoft.Maui.Animations.Animation.childrenAnimations -> System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>!\nMicrosoft.Maui.Animations.Animation.Commit(Microsoft.Maui.Animations.IAnimationManager! animationManger) -> void\nMicrosoft.Maui.Animations.Animation.CreateAutoReversing() -> Microsoft.Maui.Animations.Animation!\nMicrosoft.Maui.Animations.Animation.CurrentTime.get -> double\nMicrosoft.Maui.Animations.Animation.CurrentTime.set -> void\nMicrosoft.Maui.Animations.Animation.Dispose() -> void\nMicrosoft.Maui.Animations.Animation.Duration.get -> double\n```\n\n----------------------------------------\n\nTITLE: WriteToFile Extension for BitmapExportContext in .NET MAUI Graphics\nDESCRIPTION: This static extension method `WriteToFile` extends the `BitmapExportContext` in the Microsoft.Maui.Graphics library. It takes a `BitmapExportContext` and a filename as input and writes the bitmap to the specified file.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.BitmapExportContextExtensions.WriteToFile(this Microsoft.Maui.Graphics.BitmapExportContext exportContext, string filename) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Setting Font in PictureCanvas in .NET MAUI\nDESCRIPTION: This property allows setting the font for drawing text in the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.Font.set -> void\n```\n\n----------------------------------------\n\nTITLE: Battery Power Source Enumeration in MAUI\nDESCRIPTION: Enumeration representing the possible power sources for a device battery in MAUI applications. Includes Unknown, Battery, AC, USB, and Wireless charging options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.BatteryPowerSource.Unknown = 0 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Battery = 1 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.AC = 2 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Usb = 3 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Wireless = 4 -> Microsoft.Maui.Devices.BatteryPowerSource\n```\n\n----------------------------------------\n\nTITLE: Text Handling Components\nDESCRIPTION: Definitions for text-related classes and interfaces including attributed text support and text attributes handling. Provides functionality for rich text representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.AttributedTextRun.Length.get -> int\nMicrosoft.Maui.Graphics.Text.AttributedTextRun.Start.get -> int\nMicrosoft.Maui.Graphics.StandardTextAttributes.FontSize.get -> float\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Direction Enumeration in .NET MAUI\nDESCRIPTION: The LayoutDirection enumeration defines possible text and UI layout directions for internationalization support in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LayoutDirection.LeftToRight = 1 -> Microsoft.Maui.ApplicationModel.LayoutDirection\nMicrosoft.Maui.ApplicationModel.LayoutDirection.RightToLeft = 2 -> Microsoft.Maui.ApplicationModel.LayoutDirection\nMicrosoft.Maui.ApplicationModel.LayoutDirection.Unknown = 0 -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IActivityIndicatorHandler in MAUI\nDESCRIPTION: Defines properties for the `IActivityIndicatorHandler` interface in MAUI to get the platform view and virtual view associated with the ActivityIndicator. The PlatformView provides access to the underlying platform-specific control, while VirtualView exposes the .NET MAUI ActivityIndicator.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IActivityIndicatorHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IActivityIndicatorHandler.VirtualView.get -> Microsoft.Maui.IActivityIndicator!\"\n```\n\n----------------------------------------\n\nTITLE: Translating Matrix Extension for W2D\nDESCRIPTION: This static method extends the Matrix3x2 structure to include translation capability, returning a modified matrix based on the specified translation distances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Win2D.W2DExtensions.Translate(this System.Numerics.Matrix3x2 target, float dx, float dy) -> System.Numerics.Matrix3x2\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Dash Pattern in Skia Canvas\nDESCRIPTION: Applies a dash pattern to strokes in the SkiaCanvas, enabling dashed lines with specified offsets and sizes by setting SKPaint properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.SetStrokeDashPattern(float[] pattern, float strokeDashOffset, float strokeSize) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Gyroscope Classes in C#\nDESCRIPTION: Defines classes related to the gyroscope sensor, including event arguments and data structures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Gyroscope\nMicrosoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs\nMicrosoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs.GyroscopeChangedEventArgs(Microsoft.Maui.Devices.Sensors.GyroscopeData reading) -> void\nMicrosoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.GyroscopeData\nMicrosoft.Maui.Devices.Sensors.GyroscopeData\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.AngularVelocity.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.Equals(Microsoft.Maui.Devices.Sensors.GyroscopeData other) -> bool\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData() -> void\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.GyroscopeData.GyroscopeData(float x, float y, float z) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Font from SkiaCanvasState in MAUI\nDESCRIPTION: This property retrieves the current SKFont associated with the SkiaCanvasState, providing an interface for obtaining font information used in drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n```\n\n----------------------------------------\n\nTITLE: Saving Images as Base64 in MAUI\nDESCRIPTION: This method saves a specified picture as a Base64 encoded string. It requires an IPictureWriter and an IPicture as parameters. The output is a string representing the image in Base64 format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBase64(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> string\n```\n\n----------------------------------------\n\nTITLE: Convert PathF to CGPath in MAUI\nDESCRIPTION: This method converts a PathF object to a CoreGraphics CGPath. It can accommodate transformation with offsets or scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPath(this Microsoft.Maui.Graphics.PathF target, float ox, float oy, float fx, float fy) -> CoreGraphics.CGPath\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPath(this Microsoft.Maui.Graphics.PathF target, float scale, float zoom) -> CoreGraphics.CGPath\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPath(this Microsoft.Maui.Graphics.PathF target) -> CoreGraphics.CGPath\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPathFromSegment(this Microsoft.Maui.Graphics.PathF target, int segmentIndex, float ppu, float zoom) -> CoreGraphics.CGPath\n```\n\n----------------------------------------\n\nTITLE: Handling Device Battery Status with Microsoft MAUI\nDESCRIPTION: Leveraging this functionality, you can monitor changes to battery information and energy saver status in devices using MAUI. The methods provide access to event handlers and retrieve details regarding battery state and charge level. This is vital for applications that require power management features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.BatteryInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.BatteryInfoChangedEventArgs!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.ChargeLevel.get -> double\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatus.get -> Microsoft.Maui.Devices.EnergySaverStatus\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Battery.EnergySaverStatusChanged -> System.EventHandler<Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaCanvas\nDESCRIPTION: This constructor initializes a SkiaCanvas object, which is essential for drawing shapes and images on the canvas. It sets up the initial state of the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvas.SkiaCanvas() -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Enumeration Values\nDESCRIPTION: Enumeration values defining various drawing commands and operations for the graphics system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.DrawLine = 0\nMicrosoft.Maui.Graphics.PictureCommand.DrawRectangle = 1\nMicrosoft.Maui.Graphics.PictureCommand.FillColor = 40\n```\n\n----------------------------------------\n\nTITLE: MAUI Base Permission Abstract Methods\nDESCRIPTION: Abstract methods for checking and requesting permissions in MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Task<PermissionStatus> CheckStatusAsync();\nabstract Task<PermissionStatus> RequestAsync();\n```\n\n----------------------------------------\n\nTITLE: Contact Model Class Definition in C#\nDESCRIPTION: Class definition for handling contact information including personal details, phone numbers and email addresses.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.Contact.Contact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactPhone> phones, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactEmail> email, string displayName = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping SwipeView Properties in C#\nDESCRIPTION: Static methods for mapping properties and commands of SwipeView in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping ShapeView Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of the ShapeView control to its handler in MAUI. These methods handle updating the shape, fill, stroke, and other visual properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: PointF Static Operators and Conversions in .NET MAUI\nDESCRIPTION: Static methods for Microsoft.Maui.Graphics.PointF including type conversions to/from other geometric types and arithmetic operations. Includes explicit/implicit operators for Vector2 and CoreGraphics types, and arithmetic operations between PointF and SizeF instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PointF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.PointF p) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.PointF.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.PointF size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.PointF.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.PointF size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.PointF p) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.PointF.implicit operator Microsoft.Maui.Graphics.PointF(System.Numerics.Vector2 v) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.operator !=(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic Microsoft.Maui.Graphics.PointF.operator +(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator ==(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Embedding Extensions for Android Integration\nDESCRIPTION: Extension methods to enable MAUI controls embedding in Android applications through platform-specific contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.CreateEmbeddedWindowContext(this Microsoft.Maui.Hosting.MauiApp! mauiApp, Android.App.Activity! platformWindow) -> Microsoft.Maui.IMauiContext!\nstatic Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.ToPlatformEmbedded(this Microsoft.Maui.IElement! element, Microsoft.Maui.Hosting.MauiApp! mauiApp, Android.App.Activity! platformWindow) -> Android.Views.View!\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for RectFTypeConverter in C#\nDESCRIPTION: This snippet overrides methods for the RectFTypeConverter to manage conversions related to rectangle floating type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for FlyoutView in .NET MAUI\nDESCRIPTION: This code snippet defines the properties of the IFlyoutViewHandler interface, which manages flyout menus in MAUI applications by providing platform and virtual view access.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IFlyoutViewHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IFlyoutViewHandler.VirtualView.get -> Microsoft.Maui.IFlyoutView!\n```\n\n----------------------------------------\n\nTITLE: Adding Subscription for Automatic Updates\nDESCRIPTION: Command to configure automatic dependency updates using darc add-subscription. Sets up weekly updates from the installer repo to MAUI repo with standard automerge.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndarc add-subscription --channel \".NET 6\" --source-repo https://github.com/dotnet/installer --target-repo https://github.com/dotnet/maui --target-branch main --update-frequency everyWeek --standard-automerge\n```\n\n----------------------------------------\n\nTITLE: Declaring IFilePicker Interface Methods in C#\nDESCRIPTION: Defines methods for picking single and multiple files using the file picker interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.IFilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nMicrosoft.Maui.Storage.IFilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: Getting XML Namespace and Prefix in C#\nDESCRIPTION: This snippet provides getters for XML namespace and prefix attributes used in defining namespaces for visual elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.Prefix.get -> string\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.XmlNamespace.get -> string\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Font in SkiaCanvasState with C#\nDESCRIPTION: These properties allow for the retrieval and setting of the current font used in the SkiaCanvasState. The getter returns the current SKFont, while the setter is used to apply a new font to the canvas state, impacting subsequent drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Item in Menu Flyout Sub Item Handler in C#\nDESCRIPTION: This method allows a menu element to be added to the menu flyout sub-item handler. It accepts a 'view' parameter representing the menu element to be added.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI App Host Builder Extensions\nDESCRIPTION: Extension methods for configuring MAUI applications using the app host builder pattern, including handlers collection and app initialization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiControlsHandlers(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Defining RadioButton Command Mapper in C#\nDESCRIPTION: This static property defines a CommandMapper for RadioButton components in MAUI. It maps IRadioButton to IRadioButtonHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Class in C# for MAUI Maps\nDESCRIPTION: Defines the Distance class in the Microsoft.Maui.Maps namespace, providing constructors and properties for working with geographic distances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Maps.Distance.Distance() -> void\nMicrosoft.Maui.Maps.Distance.Distance(double meters) -> void\nMicrosoft.Maui.Maps.Distance.Equals(Microsoft.Maui.Maps.Distance other) -> bool\nMicrosoft.Maui.Maps.Distance.Kilometers.get -> double\nMicrosoft.Maui.Maps.Distance.Meters.get -> double\nMicrosoft.Maui.Maps.Distance.Miles.get -> double\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Descriptor Class\nDESCRIPTION: Class for describing font resources with properties for filename, alias and assembly references\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.FontDescriptor.Alias.get -> string?\nMicrosoft.Maui.Hosting.FontDescriptor.Assembly.get -> System.Reflection.Assembly?\nMicrosoft.Maui.Hosting.FontDescriptor.Filename.get -> string!\nMicrosoft.Maui.Hosting.FontDescriptor.FontDescriptor(string! filename, string? alias, System.Reflection.Assembly? assembly) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SystemFontOfWeight Method in Font Class\nDESCRIPTION: This static method creates a Font object with specified weight, slant, and scaling options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.SystemFontOfWeight(Microsoft.Maui.FontWeight weight, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: Application Model Static Methods in .NET MAUI\nDESCRIPTION: Static method signatures for handling app-level operations including app actions, info, browser operations, and settings. These methods provide core application functionality and platform interaction capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppActions.GetAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.AppAction!>!>!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Convert MAUI Color to UIColor in MAUI\nDESCRIPTION: This method converts a Microsoft MAUI Color instance to a UIColor, enabling its use within UIKit environments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIKitExtensions.AsUIColor(this Microsoft.Maui.Graphics.Color color) -> UIKit.UIColor\n```\n\n----------------------------------------\n\nTITLE: ItemsView Handler Generic Implementation in C#\nDESCRIPTION: Generic class implementation for ItemsView handlers including methods for managing item sources, templates, and scroll behavior. Contains virtual methods for UIKit integration on iOS platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.CreateDelegator() -> UIKit.UICollectionViewDelegateFlowLayout\nvirtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.CreateItemsViewSource() -> Microsoft.Maui.Controls.Handlers.Items.IItemsViewSource\nvirtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.DetermineCellReuseId(Foundation.NSIndexPath indexPath) -> string\n```\n\n----------------------------------------\n\nTITLE: Defining Static Readonly Properties for Microsoft.Maui.Graphics Classes in C#\nDESCRIPTION: This snippet defines static readonly properties for various Microsoft.Maui.Graphics classes, including CanvasDefaults, PointF, Size, and SizeF. These properties provide default or zero values for their respective types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF\nstatic readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF\nstatic readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size\nstatic readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutSubItem Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the MenuFlyoutSubItemHandler class that map operations like adding, inserting, removing, and clearing submenu items. These methods manage the lifecycle of items within a submenu.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of ICheckBoxHandler in MAUI\nDESCRIPTION: Defines properties for the `ICheckBoxHandler` interface in MAUI to get the platform view and virtual view associated with the CheckBox. The PlatformView property allows access to the underlying platform-specific control, while the VirtualView property represents the .NET MAUI CheckBox.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ICheckBoxHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ICheckBoxHandler.VirtualView.get -> Microsoft.Maui.ICheckBox!\"\n```\n\n----------------------------------------\n\nTITLE: RectangleAdorner and RectangleGridAdorner Classes in C#\nDESCRIPTION: Definitions of RectangleAdorner and RectangleGridAdorner classes which provide visual adornments for UI elements in the form of rectangles and rectangle grids.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.RectangleAdorner\nMicrosoft.Maui.RectangleAdorner.Density.get -> float\nMicrosoft.Maui.RectangleAdorner.DrawnRectangle.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.RectangleAdorner.FillColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.RectangleAdorner.Offset.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.RectangleAdorner.RectangleAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void\nMicrosoft.Maui.RectangleAdorner.StrokeColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.RectangleAdorner.VisualView.get -> Microsoft.Maui.IView!\nMicrosoft.Maui.RectangleGridAdorner\nMicrosoft.Maui.RectangleGridAdorner.RectangleGridAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Services via IMap in MAUI\nDESCRIPTION: The 'IMap' interface offers methods to open geographical coordinates or placemark-based map locations asynchronously, with the ability to check opening capabilities through 'TryOpenAsync'.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Overriding WebViewHandler Methods for Tizen Platform\nDESCRIPTION: These methods override WebViewHandler functionality to create, connect, and disconnect MauiWebView elements for the Tizen implementation of MAUI web views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.WebViewHandler.ConnectHandler(Microsoft.Maui.Platform.MauiWebView! platformView) -> void\noverride Microsoft.Maui.Handlers.WebViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiWebView!\noverride Microsoft.Maui.Handlers.WebViewHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiWebView! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Email Functionality in .NET MAUI\nDESCRIPTION: Static methods to compose and send emails from the device. Various overloads allow composing emails with different levels of detail including subject, body, and recipient information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage! message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IEmail!\n```\n\n----------------------------------------\n\nTITLE: Setting Display Scale on Canvas - SkiaSharp - C#\nDESCRIPTION: This method sets the display scale for the canvas, affecting how graphics are rendered in relation to the display resolution. This is important for creating responsive and high-quality graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvas.SetDisplayScale(float value) -> void\n```\n\n----------------------------------------\n\nTITLE: TimePicker Handler Mappings in MAUI\nDESCRIPTION: Static methods for mapping TimePicker properties including character spacing, font, format, text color and time value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: LockableObservableListWrapper Class Methods in C#\nDESCRIPTION: Definition of LockableObservableListWrapper class methods for managing a lockable observable collection of strings, including constructors and collection manipulation methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.LockableObservableListWrapper.LockableObservableListWrapper() -> void\nMicrosoft.Maui.LockableObservableListWrapper.Remove(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.RemoveAt(int index) -> void\nMicrosoft.Maui.LockableObservableListWrapper.this[int index].get -> string!\nMicrosoft.Maui.LockableObservableListWrapper.this[int index].set -> void\n```\n\n----------------------------------------\n\nTITLE: Stopping Window Events\nDESCRIPTION: Handles the stop event of the window, which may involve cleaning up resources that are no longer necessary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Stopped() -> void\n```\n\n----------------------------------------\n\nTITLE: Display Rotation Enumeration in MAUI\nDESCRIPTION: Enumeration defining the possible rotation angles of a display in MAUI applications. Includes Unknown, Rotation0, Rotation90, Rotation180, and Rotation270 values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.DisplayRotation.Unknown = 0 -> Microsoft.Maui.Devices.DisplayRotation\nMicrosoft.Maui.Devices.DisplayRotation.Rotation0 = 1 -> Microsoft.Maui.Devices.DisplayRotation\nMicrosoft.Maui.Devices.DisplayRotation.Rotation90 = 2 -> Microsoft.Maui.Devices.DisplayRotation\nMicrosoft.Maui.Devices.DisplayRotation.Rotation180 = 3 -> Microsoft.Maui.Devices.DisplayRotation\nMicrosoft.Maui.Devices.DisplayRotation.Rotation270 = 4 -> Microsoft.Maui.Devices.DisplayRotation\n```\n\n----------------------------------------\n\nTITLE: SkiaCanvasState Reset Method\nDESCRIPTION: Resets the canvas state with specified font and paint objects for rendering configuration\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Screenshot Result Actions in C#\nDESCRIPTION: Describes the IScreenshotResult interface, covering methods to copy data to streams and access image properties such as height and width. It also includes methods for reading screen data asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.IScreenshotResult.CopyToAsync(System.IO.Stream! destination, Microsoft.Maui.Media.ScreenshotFormat format = Microsoft.Maui.Media.ScreenshotFormat.Png, int quality = 100) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.Media.IScreenshotResult.Height.get -> int\nMicrosoft.Maui.Media.IScreenshotResult.OpenReadAsync(Microsoft.Maui.Media.ScreenshotFormat format = Microsoft.Maui.Media.ScreenshotFormat.Png, int quality = 100) -> System.Threading.Tasks.Task<System.IO.Stream!>!\nMicrosoft.Maui.Media.IScreenshotResult.Width.get -> int\n\n```\n\n----------------------------------------\n\nTITLE: Saving Picture to Stream in .NET MAUI\nDESCRIPTION: This method saves a picture to the specified stream.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPictureWriter.Save(Microsoft.Maui.Graphics.IPicture picture, System.IO.Stream stream) -> void\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for PointTypeConverter in C#\nDESCRIPTION: This snippet overrides methods for the PointTypeConverter to handle conversions between point types and other types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Defining HybridWebView Handler Constructor\nDESCRIPTION: Constructor definitions for HybridWebViewHandler class, allowing initialization with optional mapper and command mapper parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler() -> void\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive to enable nullable reference type checking, which helps catch potential null reference exceptions at compile time. This is a C# compiler directive that affects the scope of the file it appears in.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Wpf/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Enum in C# for MAUI\nDESCRIPTION: This snippet defines the Visibility enum, which represents different visibility states for UI elements in MAUI applications. It includes values for Visible, Hidden, and Collapsed states.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Visibility\nMicrosoft.Maui.Visibility.Collapsed = 2 -> Microsoft.Maui.Visibility\nMicrosoft.Maui.Visibility.Hidden = 1 -> Microsoft.Maui.Visibility\nMicrosoft.Maui.Visibility.Visible = 0 -> Microsoft.Maui.Visibility\n```\n\n----------------------------------------\n\nTITLE: ContactEmail Constructor in MAUI\nDESCRIPTION: This constructor initializes a new instance of the ContactEmail class. It is a parameterless constructor used to create an empty ContactEmail object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.ContactEmail.ContactEmail() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Layout Primitives in C#\nDESCRIPTION: Definitions of layout primitive types and enumerations used for UI layout in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Primitives.Dimension\nMicrosoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.Center = 2 -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.End = 3 -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.Fill = 0 -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.Primitives.LayoutAlignment.Start = 1 -> Microsoft.Maui.Primitives.LayoutAlignment\n```\n\n----------------------------------------\n\nTITLE: Defining MenuBarHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the MenuBarHandler class, including property mappers and methods for handling adding and clearing items in a MenuBar.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IPhoneDialer Interface in C#\nDESCRIPTION: Defines the IPhoneDialer interface with methods for checking support and opening phone numbers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IPhoneDialer\nMicrosoft.Maui.ApplicationModel.Communication.IPhoneDialer.IsSupported.get -> bool\nMicrosoft.Maui.ApplicationModel.Communication.IPhoneDialer.Open(string! number) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Position\nDESCRIPTION: Defines how flex items are positioned relative to their container, which can be absolute or relative based on layout design needs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexPosition.Absolute = 1 -> Microsoft.Maui.Layouts.FlexPosition\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexPosition.Relative = 0 -> Microsoft.Maui.Layouts.FlexPosition\n```\n\n----------------------------------------\n\nTITLE: Calculating Stack Layout Spacing in C#\nDESCRIPTION: This static method calculates the total spacing for a stack layout based on the spacing value and the number of child elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.StackLayoutManager.MeasureSpacing(double spacing, int childCount) -> double\n```\n\n----------------------------------------\n\nTITLE: Type Converters for Graphics Primitives\nDESCRIPTION: Override type conversion methods for various graphics primitives like Point, PointF, Rect, RectF, Size, and SizeF with support for type descriptor context and culture-specific conversions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\n----------------------------------------\n\nTITLE: Animation Class API Surface\nDESCRIPTION: Core animation class definition with properties and methods for managing animations including duration, easing, progress tracking and child animations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.animationManger -> Microsoft.Maui.Animations.IAnimationManager?\nMicrosoft.Maui.Animations.Animation.childrenAnimations -> System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>!\nMicrosoft.Maui.Animations.Animation.Commit(Microsoft.Maui.Animations.IAnimationManager! animationManger) -> void\nMicrosoft.Maui.Animations.Animation.CreateAutoReversing() -> Microsoft.Maui.Animations.Animation!\n```\n\n----------------------------------------\n\nTITLE: CarouselView iOS Implementation\nDESCRIPTION: Method declarations for CarouselView iOS implementation including view controllers and delegators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2.CarouselViewController2(Microsoft.Maui.Controls.CarouselView itemsView, UIKit.UICollectionViewLayout layout) -> void\n\n~Microsoft.Maui.Controls.Handlers.Items2.CarouselViewDelegator2.CarouselViewDelegator2(UIKit.UICollectionViewLayout itemsViewLayout, Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2 ItemsViewController2) -> void\n\n~Microsoft.Maui.Controls.Handlers.Items2.CarouselViewHandler2.CarouselViewHandler2(Microsoft.Maui.PropertyMapper mapper = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas and Paint-related Methods in C#\nDESCRIPTION: Methods and properties for AbstractCanvas, BitmapExportContext, CanvasState, and Paint classes, including state management and transformation operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF\nstatic readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF\nstatic readonly Microsoft.Maui.Graphics.Size.Zero -> Microsoft.Maui.Graphics.Size\nstatic readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\nvirtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void\nvirtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Window Height\nDESCRIPTION: Fetches the minimum height for the window, ensuring that it does not shrink below a certain limit.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.MinimumHeight.get -> double\n```\n\n----------------------------------------\n\nTITLE: Building Paths in .NET MAUI\nDESCRIPTION: This snippet provides methods for building paths using the PathBuilder and PathF classes, allowing for complex shape creation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathBuilder.BuildPath(string pathAsString) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PathF path) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual View Handler Commands\nDESCRIPTION: This snippet defines methods for adding command actions for a specific virtual view handler, which can streamline handling user interactions and commands in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView, object?>! action) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.CommandMapper<TVirtualView, TViewHandler>.Add(string! key, System.Action<TViewHandler, TVirtualView>! action) -> void\n```\n\n----------------------------------------\n\nTITLE: DatePickerHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the DatePickerHandler class, handling properties like character spacing, date, and flow direction.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapDate(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFlowDirection(Microsoft.Maui.Handlers.DatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler Mapping Methods for UI Elements in C#\nDESCRIPTION: Defines static mapping methods for various UI element handlers, including ActivityIndicator, Application, Border, and Button. These methods map properties and commands to their respective handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapBackground(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapHeight(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapWidth(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\n\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n\nstatic Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapBackground(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButton! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapFont(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Handlers.ButtonHandler.MapImageSource(Microsoft.Maui.Handlers.IButtonHandler! handler, Microsoft.Maui.IImage! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Canvas Operations\nDESCRIPTION: Platform-specific implementations of canvas operations including disposal and shape drawing methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillEllipse(float x, float y, float width, float height) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.Dispose() -> void\n```\n\n----------------------------------------\n\nTITLE: Checking SMS Compose Support in .NET MAUI\nDESCRIPTION: This property checks if the capability to compose an SMS message is available on the device. It's a boolean property of the ISms interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.ISms.IsComposeSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Attributed Text Block\nDESCRIPTION: This snippet retrieves a string from an AttributedTextBlock object. It does not require any dependencies or parameters. It simply outputs the attributed text associated with the given block.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextBlock.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: Distance Class Definition\nDESCRIPTION: Class for handling distance calculations in maps, supporting conversions between meters, kilometers, and miles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Distance\n{\n    public Distance();\n    public Distance(double meters);\n    public double Kilometers { get; }\n    public double Meters { get; }\n    public double Miles { get; }\n    public bool Equals(Distance other);\n    public static Distance FromKilometers(double kilometers);\n    public static Distance FromMeters(double meters);\n    public static Distance FromMiles(double miles);\n}\n```\n\n----------------------------------------\n\nTITLE: AppAction Title setter in MAUI\nDESCRIPTION: This property setter sets the title of the AppAction. The title is the primary label displayed for the action. This is a read/write property. The title is a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.Title.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Destroying Window Resources\nDESCRIPTION: Cleans up resources when the window is being destroyed, ensuring that memory and other resources are properly released.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Destroying() -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Handler Disconnection in .NET MAUI Android\nDESCRIPTION: These method signatures show the DisconnectHandler methods for various .NET MAUI handlers in Android. DisconnectHandler is called when a handler is disconnected from its platform view and is responsible for cleaning up resources, removing event handlers and preparing the view for disposal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.DatePickerHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiDatePicker! platformView) -> void\noverride Microsoft.Maui.Handlers.EditorHandler.DisconnectHandler(AndroidX.AppCompat.Widget.AppCompatEditText! platformView) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.DisconnectHandler(AndroidX.AppCompat.Widget.AppCompatEditText! platformView) -> void\noverride Microsoft.Maui.Handlers.FlyoutViewHandler.DisconnectHandler(Android.Views.View! platformView) -> void\noverride Microsoft.Maui.Handlers.GraphicsViewHandler.DisconnectHandler(Microsoft.Maui.Platform.PlatformTouchGraphicsView! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageButtonHandler.DisconnectHandler(Google.Android.Material.ImageView.ShapeableImageView! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageHandler.DisconnectHandler(Android.Widget.ImageView! platformView) -> void\noverride Microsoft.Maui.Handlers.LayoutHandler.DisconnectHandler(Microsoft.Maui.Platform.LayoutViewGroup! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void\noverride Microsoft.Maui.Handlers.RadioButtonHandler.DisconnectHandler(Android.Views.View! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Image source platform conversion extensions for iOS\nDESCRIPTION: Extensions for converting MAUI image sources to platform-specific UIImage objects for iOS. These methods handle asynchronous loading and conversion of various image source types to native UIKit images.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\nstatic Microsoft.Maui.ImageSourceExtensions.GetPlatformImageAsync(this Microsoft.Maui.IImageSourceService! imageSourceService, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IMauiContext! mauiContext) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<UIKit.UIImage!>?>!\n```\n\n----------------------------------------\n\nTITLE: Getting Font Color in .NET MAUI Canvas State\nDESCRIPTION: This snippet demonstrates the setter for font color within the canvas state, allowing for customization of text coloration during rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.FontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing W2DGraphicsView\nDESCRIPTION: This code snippet defines the constructor for the W2DGraphicsView class, creating a new instance of the view used for drawing. It does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DGraphicsView.W2DGraphicsView() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeViewSwipeStarted class in C#\nDESCRIPTION: Declares a class for SwipeView swipe started events, including a SwipeDirection property and a constructor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeViewSwipeStarted\nMicrosoft.Maui.SwipeViewSwipeStarted.SwipeDirection.get -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeViewSwipeStarted.SwipeDirection.init -> void\nMicrosoft.Maui.SwipeViewSwipeStarted.SwipeViewSwipeStarted(Microsoft.Maui.SwipeDirection SwipeDirection) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing Attributed Text in PictureCanvas\nDESCRIPTION: This snippet defines the DrawText method in the PictureCanvas class to draw attributed text at specified coordinates and dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Runs from Attributed Text in C#\nDESCRIPTION: This snippet defines a getter that returns a read-only list of attributed text runs from an attributed text object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.IAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n```\n\n----------------------------------------\n\nTITLE: Launcher Extensions in MAUI ApplicationModel\nDESCRIPTION: Contains utility extensions providing additional functionality to the existing Launcher features in the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LauncherExtensions\n```\n\n----------------------------------------\n\nTITLE: Overriding RectTypeConverter Methods in .NET MAUI Graphics\nDESCRIPTION: These overrides for `RectTypeConverter` in the Microsoft.Maui.Graphics library define how to convert from and to `Rect` types. The methods `CanConvertFrom`, `CanConvertTo`, `ConvertFrom`, and `ConvertTo` are overridden to provide custom conversion logic for `Rect` objects, representing rectangles with integer coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Paint Properties in PictureCanvas\nDESCRIPTION: This snippet includes properties for configuration settings such as fill and stroke colors, fonts, and shadow settings within the PictureCanvas class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.FillColor.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.Font.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.FontColor.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.StrokeColor.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.StrokeDashPattern.set -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attributes Collection Utilities in C#\nDESCRIPTION: Utility methods for working with text attribute collections, including combining attributes and retrieving attribute values. These methods facilitate management of text styling across multiple attribute collections.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.Union(this System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> Microsoft.Maui.Graphics.Text.ITextAttributes\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string defaultValue = null) -> string\n```\n\n----------------------------------------\n\nTITLE: MAUI Essentials Configuration Extensions\nDESCRIPTION: Static extension methods for configuring Essentials functionality in MAUI applications, including app actions. These methods enable platform-specific functionality through a unified cross-platform API.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.AddAppAction(this Microsoft.Maui.Hosting.IEssentialsBuilder! essentials, string! id, string! title, string? subtitle = null, string? icon = null) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nstatic Microsoft.Maui.Hosting.EssentialsExtensions.ConfigureEssentials(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IEssentialsBuilder!>? configureDelegate = null) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Placeholder Interface Properties\nDESCRIPTION: Interface providing methods to get and set placeholder text and color for UI elements\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IPlaceholder.Placeholder.get -> string!\nMicrosoft.Maui.IPlaceholder.PlaceholderColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.IPlaceholder.PlaceholderColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Create Copy of SKPaint with SKPaintExtensions in C#\nDESCRIPTION: This snippet creates a duplicate of a given SkiaSharp.SKPaint object, encapsulating its properties into a new object. It returns a new SKPaint object, facilitating the reusability of paint configurations. It depends on the SkiaSharp library.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKPaintExtensions.CreateCopy(this SkiaSharp.SKPaint paint) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Animation Extensions for MAUI\nDESCRIPTION: Linear interpolation (Lerp) extension methods for various types including colors, points, rectangles and thickness values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!\n```\n\n----------------------------------------\n\nTITLE: Accessing Value property in ImageSourceServiceResult\nDESCRIPTION: This code shows how to access the value property in the `ImageSourceServiceResult` class. This `Value` returns the object that resulted from loading the image. It must be cast to the correct type. \nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ImageSourceServiceResult.Value.get -> object!\"\n```\n\n----------------------------------------\n\nTITLE: UI Adorner Methods in .NET MAUI\nDESCRIPTION: Virtual methods for UI adorners that handle hit testing and drawing, specifically for the RectangleAdorner class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.RectangleAdorner.Contains(Microsoft.Maui.Graphics.Point point) -> bool\nvirtual Microsoft.Maui.RectangleAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform Touch Graphics View Implementation\nDESCRIPTION: Class definition for handling touch input in graphics views on Android platform. Includes methods for touch event handling and view lifecycle management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.TouchesBegan(Microsoft.Maui.Graphics.PointF[]! points) -> void\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.TouchesCanceled() -> void\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.TouchesEnded(Microsoft.Maui.Graphics.PointF[]! points) -> void\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.TouchesMoved(Microsoft.Maui.Graphics.PointF[]! points) -> void\n```\n\n----------------------------------------\n\nTITLE: Semantic Screen Reader Interface in C#\nDESCRIPTION: Interface definition for semantic screen reader functionality in the Microsoft.Maui.Accessibility namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Accessibility.ISemanticScreenReader\nMicrosoft.Maui.Accessibility.ISemanticScreenReader.Announce(string! text) -> void\n```\n\n----------------------------------------\n\nTITLE: Resource Dictionary Loading Implementation\nDESCRIPTION: Static helper method for loading resources from a source URI into a ResourceDictionary, including assembly and XML line information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding StepperHandler Methods for Tizen Platform\nDESCRIPTION: These methods override StepperHandler functionality to create, connect, and disconnect MauiStepper elements for the Tizen implementation of MAUI steppers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.StepperHandler.ConnectHandler(Microsoft.Maui.Platform.MauiStepper! platformView) -> void\noverride Microsoft.Maui.Handlers.StepperHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiStepper!\noverride Microsoft.Maui.Handlers.StepperHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiStepper! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Units Enum in C#\nDESCRIPTION: Enum definition for DistanceUnits that specifies measurement units for distance calculations. Provides options for Kilometers (0) and Miles (1).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.DistanceUnits.Kilometers = 0 -> Microsoft.Maui.Devices.Sensors.DistanceUnits\nMicrosoft.Maui.Devices.Sensors.DistanceUnits.Miles = 1 -> Microsoft.Maui.Devices.Sensors.DistanceUnits\n```\n\n----------------------------------------\n\nTITLE: Static SetDisconnectPolicy Method\nDESCRIPTION: This code defines a static method `SetDisconnectPolicy` which sets the `HandlerDisconnectPolicy` for a given `BindableObject`. This policy controls the handler lifecycle behavior and determines when handlers are disconnected in MAUI applications. It affects memory management and resource cleanup strategies.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.HandlerProperties.SetDisconnectPolicy(Microsoft.Maui.Controls.BindableObject! target, Microsoft.Maui.HandlerDisconnectPolicy value) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Platform Graphics Extensions\nDESCRIPTION: Extension methods for converting between MAUI graphics types and platform-specific CoreGraphics types. Includes conversions for points, rectangles and sizes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_166\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGPoint(this Microsoft.Maui.Graphics.Point target) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGRect(this Microsoft.Maui.Graphics.Rect target) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsCGSize(this Microsoft.Maui.Graphics.Size target) -> CoreGraphics.CGSize\n```\n\n----------------------------------------\n\nTITLE: MAUI Handler Abstract Definitions\nDESCRIPTION: Abstract base classes for MAUI element and view handlers that define core functionality for platform-specific view creation and layout management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nabstract Microsoft.Maui.Handlers.ViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Readonly TrailingContentProperty (TitleBar)\nDESCRIPTION: This code defines a static readonly `BindableProperty` called `TrailingContentProperty` for the `TitleBar` class.  This property likely represents the content positioned at the trailing edge (right in LTR, left in RTL) of the title bar, typically used for actions or controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.TrailingContentProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: MagnetometerData Class Implementation in C#\nDESCRIPTION: Implementation of the MagnetometerData class for representing magnetic field readings. It includes constructors for different numeric types and an Equals method for comparison, with the MagneticField property returning a Vector3 representation of the reading.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.MagnetometerData\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.Equals(Microsoft.Maui.Devices.Sensors.MagnetometerData other) -> bool\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagneticField.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData() -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(float x, float y, float z) -> void\n```\n\n----------------------------------------\n\nTITLE: Share Functionality in .NET MAUI\nDESCRIPTION: Static methods to share content with other applications on the device. These methods allow sharing text and files through the device's native sharing interface with various options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IShare!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text, string! title) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: TimeChangedEventArgs Implementation\nDESCRIPTION: Event arguments class for handling time change events in TimePicker control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class TimeChangedEventArgs\n{\n    public TimeSpan NewTime { get; }\n    public TimeSpan OldTime { get; }\n    public TimeChangedEventArgs(TimeSpan oldTime, TimeSpan newTime) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Color to RGB Components in C#\nDESCRIPTION: This method converts a Color object to its RGB components. It takes out parameters for red, green, and blue byte values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.ToRgb(out byte r, out byte g, out byte b) -> void\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for RectTypeConverter in C#\nDESCRIPTION: This snippet overrides methods for the RectTypeConverter to enable conversions between rectangle types and others.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: MAUI Template Binding Properties\nDESCRIPTION: Property definitions for TemplateBindingExtension class managing typed bindings within MAUI controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n```\n\n----------------------------------------\n\nTITLE: ContactPhone Constructor in MAUI\nDESCRIPTION: This constructor initializes a new instance of the ContactPhone class. It is a parameterless constructor used to create an empty ContactPhone object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.ContactPhone.ContactPhone() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Initializing MenuBarHandler in C#\nDESCRIPTION: Constructor for MenuBarHandler class. It takes an IPropertyMapper and an optional CommandMapper as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler.MenuBarHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Visualizing Triage Process Flow with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the flow of the triage process, including issue categorization, planning stages, and possible outcomes. It shows how issues are sorted into current work, planning for future .NET versions, backlog, or closed based on their nature and priority.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/TriageProcess.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Issue] --> B{Triage}\n    B -->|Bugs| C[Current]\n    B -->|Bugs, Features,<br/>Investigations, Docs| D[.NET <i>n</i> Planning]\n    B -->|Bugs, Features, Docs| E[Backlog]\n    B --> F[Close]\n    D --> H[Sprint Planning]\n    E --> G(Release Planning)\n    G --> H\n    H --> C\n    H --> E\n    G --> F\n```\n\n----------------------------------------\n\nTITLE: Launcher Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for the ILauncher interface to provide simpler ways to launch applications. These methods extend the ILauncher interface with convenience methods for checking and opening URIs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.LauncherExtensions.CanOpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.LauncherExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.LauncherExtensions.TryOpenAsync(this Microsoft.Maui.ApplicationModel.ILauncher! launcher, string! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Defining InsetsF Properties in C#\nDESCRIPTION: This snippet shows the property definitions for the InsetsF struct, which represents insets or padding values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.InsetsF.Left.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Right.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Right.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Top.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Top.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Vertical.get -> float\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar ForegroundColor Property in C#\nDESCRIPTION: These code snippets represent accessing the ForegroundColor property of the TitleBar, allowing to get or set the color of text and icons in the title bar. The type used is Microsoft.Maui.Graphics.Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.ForegroundColor.get -> Microsoft.Maui.Graphics.Color!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.ForegroundColor.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Element Properties in Microsoft.Maui\nDESCRIPTION: Static methods and mappers from ElementHandler class that define the base property and command mapping functionality for UI elements in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_117\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\nstatic Microsoft.Maui.Handlers.ElementHandler.ElementMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining LinearGradientPaint Class in C#\nDESCRIPTION: The LinearGradientPaint class represents a linear gradient paint. It provides properties for setting the start and end points of the gradient.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LinearGradientPaint\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.set -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint() -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint in Skia Canvas State\nDESCRIPTION: This setter assigns the SKPaint used for filling paths or shapes in the canvas, allowing detailed customization of paint characteristics such as texture and color blend.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FillPaint.set -> void\n```\n\n----------------------------------------\n\nTITLE: Graphics Image Handling Operations\nDESCRIPTION: Method signatures for image manipulation including resizing, saving, and converting images in different formats\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Downsize(float maxWidth, float maxHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Save(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> void\n```\n\n----------------------------------------\n\nTITLE: HapticFeedback APIs in MAUI C#\nDESCRIPTION: Static methods for triggering haptic feedback on supported devices, including accessing the default implementation and performing haptic feedback with specified feedback type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.HapticFeedback.Default.get -> Microsoft.Maui.Devices.IHapticFeedback!\nstatic Microsoft.Maui.Devices.HapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type = Microsoft.Maui.Devices.HapticFeedbackType.Click) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString Methods for Geometric Structures\nDESCRIPTION: These overrides implement custom string representations for various geometric structures like Point, Rect, and Size.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Point.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Rect.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Size.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Static Readonly ContentProperty (TitleBar)\nDESCRIPTION: This code defines a static readonly `BindableProperty` named `ContentProperty` within the `TitleBar` class. This property likely represents the main content displayed in the title bar of a MAUI application, allowing for customization of the title bar's primary UI element.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.ContentProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Drawing Ellipse in W2DCanvas\nDESCRIPTION: This method draws an ellipse in the W2DCanvas based on specified coordinates and dimensions, without any return value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformDrawEllipse(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Path and Drawing Manipulation Methods\nDESCRIPTION: Advanced path drawing and manipulation methods including curve, line, and arc generation\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nPathF.AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nPathF.LineTo(float x, float y)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nPathF.CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y)\n```\n\n----------------------------------------\n\nTITLE: Converting to Platform Image in .NET MAUI\nDESCRIPTION: This method converts an IImage instance to a platform specific image representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeMode enum in C#\nDESCRIPTION: Declares an enumeration for swipe modes, including Execute and Reveal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeMode\nMicrosoft.Maui.SwipeMode.Execute = 1 -> Microsoft.Maui.SwipeMode\nMicrosoft.Maui.SwipeMode.Reveal = 0 -> Microsoft.Maui.SwipeMode\n```\n\n----------------------------------------\n\nTITLE: Example API Diff Output\nDESCRIPTION: Sample diff output showing API changes between versions.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/PublicAPI/net/PublicAPI.Shipped.txt b/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt\nindex shashasha..shashasha\n--- a/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt\n+++ b/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt\n@@ -1,2 +1,4 @@\n #nullable enable\n-Microsoft.Maui.Controls.PointerEventArgs.PointerEventArgs() -> void\n+Microsoft.Maui.Controls.PointerEventArgs.PointerEventArgs(int clicks) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationHandler Constructor in C#\nDESCRIPTION: Constructor for the ApplicationHandler class, which takes an optional IPropertyMapper parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ApplicationHandler.ApplicationHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Title for Media Picker in .NET MAUI\nDESCRIPTION: This property allows getting and setting the title displayed in the media picker dialog, which guides the user.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.MediaPickerOptions.Title.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.MediaPickerOptions.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping FlyoutView Properties in Microsoft.Maui\nDESCRIPTION: Static mappers from FlyoutViewHandler class that define the property and command mapping for the FlyoutView control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Setting Font Color in PictureCanvas in .NET MAUI\nDESCRIPTION: This property allows setting the font color for drawing text in the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.FontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: PointF Structure Implementation\nDESCRIPTION: Defines a structure representing a point in 2D space with single precision (float) coordinates\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\npublic struct PointF\n{\n    public float X { get; set; }\n    public float Y { get; set; }\n    public PointF(float x, float y);\n    public PointF(SizeF sz);\n    public PointF(Vector2 v);\n    public bool IsEmpty { get; }\n    public void Deconstruct(out float x, out float y);\n    public float Distance(PointF other);\n    public PointF Offset(float dx, float dy);\n    public PointF Round();\n    public PointF TransformBy(in Matrix3x2 transform);\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas and GraphicsView Abstract Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Virtual methods for the AbstractCanvas<TState> class, BitmapExportContext, CanvasState, Paint, and PlatformGraphicsView classes in Microsoft.Maui.Graphics. Includes state management and platform-specific functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\nvirtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void\nvirtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool\nvirtual Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.PatternPhase.get -> CoreGraphics.CGSize\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions PreferredControlColor setter in MAUI\nDESCRIPTION: This property setter sets the preferred control color for the browser. This allows customizing the color of the browser's controls, if supported. It is a read/write nullable property of type Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredControlColor.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Platform Image Processing in MAUI Graphics\nDESCRIPTION: Provides methods for image manipulation including resizing, drawing, and saving images with various formats and options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false)\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Run Extensions in Microsoft.Maui.Graphics.Text\nDESCRIPTION: Methods for working with attributed text runs, including intersection calculations, position and range checking, and optimization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.CalculatedIntersections(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.GetEnd(this Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> int\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Optimize(this System.Collections.Generic.List<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int textLength) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Extension Methods for IMap Interface\nDESCRIPTION: Extension methods for the IMap interface providing additional functionality for opening maps with various parameters. These methods are part of the Microsoft.Maui.ApplicationModel namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, double latitude, double longitude) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.MapExtensions.OpenAsync(this Microsoft.Maui.ApplicationModel.IMap! map, Microsoft.Maui.Devices.Sensors.Placemark! placemark) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Saving PDF Page to Stream in .NET MAUI\nDESCRIPTION: This method saves the current PDF page to the provided stream.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPdfPage.Save(System.IO.Stream stream) -> void\n```\n\n----------------------------------------\n\nTITLE: Virtual DetermineEmptyViewFrame Method (ItemsViewController)\nDESCRIPTION: This code snippet represents a virtual method DetermineEmptyViewFrame within the ItemsViewController2 class. It is related to determining the frame (position and size) for the empty view that is displayed when there are no items in the ItemsView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.DetermineEmptyViewFrame() -> CoreGraphics.CGRect\"\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Enum in C#\nDESCRIPTION: Defines the PermissionStatus enum with values for different permission states.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Denied = 1 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Granted = 3 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Limited = 5 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for RefreshView in .NET MAUI\nDESCRIPTION: This snippet demonstrates the IRefreshViewHandler interface, providing access to refresh view handling in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IRefreshViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiSwipeRefreshLayout!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IRefreshViewHandler.VirtualView.get -> Microsoft.Maui.IRefreshView!\n```\n\n----------------------------------------\n\nTITLE: Location Inequality Operator in MAUI\nDESCRIPTION: This static operator overload defines the inequality (!=) operator for the Location struct. It compares two Location objects and returns true if they are not equal, and false otherwise. This likely compares latitude and longitude.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.Location.operator !=(Microsoft.Maui.Devices.Sensors.Location left, Microsoft.Maui.Devices.Sensors.Location right) -> bool\"\n```\n\n----------------------------------------\n\nTITLE: TitleBar Constants Definition\nDESCRIPTION: Defines constant string values for TitleBar states and template parts used in MAUI TitleBar control implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.ContentHiddenState = \"ContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.ContentVisibleState = \"ContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconHiddenState = \"IconCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconVisibleState = \"IconVisible\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Managing Fill Color in Skia Canvas State\nDESCRIPTION: This property getter and setter handle the fill color of the SkiaCanvas. It interacts with Microsoft.Maui.Graphics.Color to define the interior color used when drawing shapes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FillColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FillColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Language from Locale in .NET MAUI\nDESCRIPTION: This property returns the primary language associated with the Locale instance as a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Language.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Dimension Utilities for MAUI Layout System\nDESCRIPTION: Static methods for the Microsoft.Maui.Primitives.Dimension class that manage dimension values in the MAUI layout system. These utilities help interpret dimension values to determine if they represent explicit, minimum, or maximum constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.IsExplicitSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.IsMaximumSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.IsMinimumSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.ResolveMinimum(double value) -> double\n```\n\n----------------------------------------\n\nTITLE: Overriding TimePickerHandler Methods for Tizen Platform\nDESCRIPTION: These methods override TimePickerHandler functionality to create, connect, and disconnect Tizen.UIExtensions.NUI.Entry elements for the Tizen implementation of MAUI time pickers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.TimePickerHandler.ConnectHandler(Tizen.UIExtensions.NUI.Entry! platformView) -> void\noverride Microsoft.Maui.Handlers.TimePickerHandler.CreatePlatformView() -> Tizen.UIExtensions.NUI.Entry!\noverride Microsoft.Maui.Handlers.TimePickerHandler.DisconnectHandler(Tizen.UIExtensions.NUI.Entry! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MauiUIApplicationDelegate Class in C# for MAUI iOS Integration\nDESCRIPTION: Declares the MauiUIApplicationDelegate class for integrating MAUI applications with iOS UIApplicationDelegate.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.MauiUIApplicationDelegate\nMicrosoft.Maui.MauiUIApplicationDelegate.Application.get -> Microsoft.Maui.IApplication!\nMicrosoft.Maui.MauiUIApplicationDelegate.Application.set -> void\nMicrosoft.Maui.MauiUIApplicationDelegate.MauiUIApplicationDelegate() -> void\nMicrosoft.Maui.MauiUIApplicationDelegate.Services.get -> System.IServiceProvider!\nMicrosoft.Maui.MauiUIApplicationDelegate.Services.set -> void\n```\n\n----------------------------------------\n\nTITLE: Value Target Provider Constructor\nDESCRIPTION: Constructor implementation for ValueTargetProvider class that takes target object and property parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Class Definition in C#\nDESCRIPTION: Core animation class definition for MAUI with constructors and methods for managing animation timing and state. Provides functionality for creating and managing animations with callbacks, duration control and easing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation\nMicrosoft.Maui.Animations.Animation.Animation() -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Action<double>! callback, double start = 0, double duration = 1, Microsoft.Maui.Easing? easing = null, System.Action? finished = null) -> void\nMicrosoft.Maui.Animations.Animation.Animation(System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>! animations) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WebNavigationResult enum in C#\nDESCRIPTION: Declares an enumeration for web navigation results, including Cancel, Failure, Success, and Timeout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.WebNavigationResult\nMicrosoft.Maui.WebNavigationResult.Cancel = 2 -> Microsoft.Maui.WebNavigationResult\nMicrosoft.Maui.WebNavigationResult.Failure = 4 -> Microsoft.Maui.WebNavigationResult\nMicrosoft.Maui.WebNavigationResult.Success = 1 -> Microsoft.Maui.WebNavigationResult\nMicrosoft.Maui.WebNavigationResult.Timeout = 3 -> Microsoft.Maui.WebNavigationResult\n```\n\n----------------------------------------\n\nTITLE: Contacts Interface in C#\nDESCRIPTION: Interface definition for managing contacts in the Microsoft.Maui.ApplicationModel.Communication namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IContacts\nMicrosoft.Maui.ApplicationModel.Communication.IContacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!\n```\n\n----------------------------------------\n\nTITLE: Mapping Title for PageHandler in C#\nDESCRIPTION: This static method maps the Title property for a Page. It takes an IPageHandler and an IContentView as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IEntryHandler in MAUI\nDESCRIPTION: Defines properties for the `IEntryHandler` interface in MAUI to get the platform view and virtual view associated with the Entry.  PlatformView exposes the native platform control, and VirtualView exposes the MAUI Entry control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IEntryHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IEntryHandler.VirtualView.get -> Microsoft.Maui.IEntry!\"\n```\n\n----------------------------------------\n\nTITLE: Static GetDisconnectPolicy Method\nDESCRIPTION: This code defines a static method `GetDisconnectPolicy` which retrieves the `HandlerDisconnectPolicy` associated with a `BindableObject`.  This policy likely controls how handlers are disconnected and garbage collected within the MAUI framework, potentially affecting memory management and resource cleanup.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.HandlerProperties.GetDisconnectPolicy(Microsoft.Maui.Controls.BindableObject! target) -> Microsoft.Maui.HandlerDisconnectPolicy\"\n```\n\n----------------------------------------\n\nTITLE: Defining IPattern Interface in C#\nDESCRIPTION: This snippet defines the IPattern interface, which represents a repeating pattern in graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPattern\nMicrosoft.Maui.Graphics.IPattern.Height.get -> float\nMicrosoft.Maui.Graphics.IPattern.StepX.get -> float\nMicrosoft.Maui.Graphics.IPattern.StepY.get -> float\nMicrosoft.Maui.Graphics.IPattern.Width.get -> float\n```\n\n----------------------------------------\n\nTITLE: Picking a Contact in .NET MAUI\nDESCRIPTION: This snippet defines the method for asynchronously picking a contact from the user's device. It returns a Task that yields a Contact object when completed. No dependencies are indicated other than the MAUI framework itself.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IContacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for .NET MAUI\nDESCRIPTION: This directive enables nullable reference types for the entire project or file. It helps catch potential null reference exceptions at compile-time by making reference types non-nullable by default.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Image Loading Service Extensions in Microsoft.Maui.Graphics\nDESCRIPTION: Extensions for the IImageLoadingService interface to create images from byte arrays.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.ImageLoadingServiceExtensions.FromBytes(this Microsoft.Maui.Graphics.IImageLoadingService target, byte[] bytes) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Drawable Touch Handling\nDESCRIPTION: Controls whether drawable touch handling is enabled, which can affect user interaction with the overlay.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.EnableDrawableTouchHandling.set -> void\n```\n\n----------------------------------------\n\nTITLE: PatternPaint Properties and PictureCanvas Methods\nDESCRIPTION: Property signatures for PatternPaint and drawing method signatures for the PictureCanvas class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PatternPaint.Pattern.get -> Microsoft.Maui.Graphics.IPattern\nMicrosoft.Maui.Graphics.PatternPaint.Pattern.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawImage(Microsoft.Maui.Graphics.IImage image, float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawPath(Microsoft.Maui.Graphics.PathF path) -> void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Platform Path in PathF\nDESCRIPTION: This snippet defines properties for accessing and setting the platform-specific path representation for the PathF class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.PlatformPath.get -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.PlatformPath.set -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IButtonHandler in MAUI\nDESCRIPTION: Defines properties for the `IButtonHandler` interface in MAUI, providing access to the platform view, virtual view, and the ImageSourceLoader. The PlatformView allows interaction with the underlying native button, VirtualView represents the MAUI Button, and ImageSourceLoader handles image source loading.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IButtonHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!\"\n```\n\n----------------------------------------\n\nTITLE: FlexBasis Operators for Layout in MAUI\nDESCRIPTION: These operator overloads allow for convenient manipulation of FlexBasis values in MAUI layouts. They include an implicit conversion from float to FlexBasis and equality comparison operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_162\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.FlexBasis.implicit operator Microsoft.Maui.Layouts.FlexBasis(float length) -> Microsoft.Maui.Layouts.FlexBasis\nstatic Microsoft.Maui.Layouts.FlexBasis.operator !=(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\nstatic Microsoft.Maui.Layouts.FlexBasis.operator ==(Microsoft.Maui.Layouts.FlexBasis left, Microsoft.Maui.Layouts.FlexBasis right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Listening to Location Changes - C# .NET MAUI\nDESCRIPTION: Retrieves a boolean indicating whether location listening is active in the foreground. This property helps determine the state of location updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.IsListeningForeground.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Barometer APIs in MAUI C#\nDESCRIPTION: Static methods for accessing and controlling the device barometer, including starting and stopping monitoring, checking support status, and handling barometer reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Default.get -> Microsoft.Maui.Devices.Sensors.IBarometer!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Antialias in W2DCanvas\nDESCRIPTION: This code snippet sets the antialias property in the W2DCanvas, affecting rendering quality. This property setter does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.Antialias.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Types in Microsoft MAUI\nDESCRIPTION: This snippet defines various permission classes available in MAUI that manage access to features like battery status, bluetooth, calendar access, and more. Each permission type has its constructor, which is important for instantiation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.BasePermission.BasePermission() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Battery.Battery() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Bluetooth.Bluetooth() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarRead.CalendarRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarWrite.CalendarWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Camera.Camera() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsRead.ContactsRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsWrite.ContactsWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.EventPermissions.EventPermissions() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Flashlight.Flashlight() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LaunchApp.LaunchApp() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LocationAlways.LocationAlways() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LocationWhenInUse.LocationWhenInUse() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Maps.Maps() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Media.Media() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Microphone.Microphone() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices.NearbyWifiDevices() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.NetworkState.NetworkState() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Phone.Phone() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Photos.Photos() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.PhotosAddOnly.PhotosAddOnly() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.PostNotifications.PostNotifications() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Reminders.Reminders() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Sensors.Sensors() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Sms.Sms() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Speech.Speech() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.StorageRead.StorageRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.StorageWrite.StorageWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Vibrate.Vibrate() -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Toolbar Properties in C#\nDESCRIPTION: Static properties and method for mapping Toolbar control, defining CommandMapper, Mapper, and MapTitle for the ToolbarHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void\n```\n\n----------------------------------------\n\nTITLE: Web Authenticator Result Implementation in C#\nDESCRIPTION: Class handling web authentication results including tokens and callback URI processing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Collections.Generic.IDictionary<string, string> properties) -> void\nMicrosoft.Maui.Authentication.WebAuthenticatorResult.WebAuthenticatorResult(System.Uri uri, Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder responseDecoder) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeItemViewHandler Constructor in C#\nDESCRIPTION: Defines a constructor for SwipeItemViewHandler that takes an optional IPropertyMapper parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.SwipeItemViewHandler.SwipeItemViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Image Source Configuration Extensions (C#)\nDESCRIPTION: Extension methods for configuring image sources in a MAUI application, allowing for registration of custom image source services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource, TImageSourceService>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services, System.Func<System.IServiceProvider!, Microsoft.Maui.IImageSourceService<TImageSource>!>! implementationFactory) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IImageSourceServiceCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: GridLength Operators and Conversion Methods in C#\nDESCRIPTION: Operator overloads and implicit conversion for GridLength, enabling comparisons between GridLength instances and automatic conversion from double values to GridLength objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength\nstatic Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\nstatic Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect Ratios in MAUI\nDESCRIPTION: This snippet defines various aspect ratios as constants for rendering images in a MAUI application. These constants assist in maintaining the intended aspect ratio when displaying media.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Aspect.AspectFill = 1 -> Microsoft.Maui.Aspect\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Aspect.AspectFit = 0 -> Microsoft.Maui.Aspect\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Aspect.Center = 3 -> Microsoft.Maui.Aspect\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Aspect.Fill = 2 -> Microsoft.Maui.Aspect\n```\n\n----------------------------------------\n\nTITLE: Defining TypeExtension Class in C#\nDESCRIPTION: Defines the TypeExtension class with methods for providing values and managing type names in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TypeExtension.ProvideValue(System.IServiceProvider serviceProvider) -> System.Type\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.get -> string\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.set -> void\n```\n\n----------------------------------------\n\nTITLE: Clipboard and Share Operations in C#\nDESCRIPTION: Methods for interacting with the clipboard and sharing content across applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.ClipboardContentChanged -> System.EventHandler<System.EventArgs!>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.HasText.get -> bool\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.SetTextAsync(string? text) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.Default.get -> Microsoft.Maui.ApplicationModel.DataTransfer.IShare!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text, string! title) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Implementing Communication Features in C#\nDESCRIPTION: This snippet contains static methods for MAUI's communication-related classes including Contacts, Email, PhoneDialer, and SMS. It provides methods to access device contacts, compose emails, dial phone numbers, and send SMS messages. These methods enable cross-platform communication features in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IContacts!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!\nstatic Microsoft.Maui.ApplicationModel.Communication.Contacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.EmailMessage! message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.ComposeAsync(string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Email.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IEmail!\nstatic Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email, string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Default.get -> Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer!\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.IsSupported.get -> bool\nstatic Microsoft.Maui.ApplicationModel.Communication.PhoneDialer.Open(string! number) -> void\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.Sms.Default.get -> Microsoft.Maui.ApplicationModel.Communication.ISms!\n```\n\n----------------------------------------\n\nTITLE: Mapping EntryHandler Properties in MAUI Framework\nDESCRIPTION: Static methods and properties for EntryHandler that map IEntry properties to platform-specific implementations. These handle text input properties like character spacing, clear button visibility, cursor position, font, text alignment, password behavior, and keyboard settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EntryHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapClearButtonVisibility(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapFont(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsPassword(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapKeyboard(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapMaxLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEntry!, Microsoft.Maui.Handlers.IEntryHandler!>!\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapReturnType(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapText(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapTextColor(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Handlers.EntryHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEntryHandler! handler, Microsoft.Maui.IEntry! entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Keyboard Accelerator Conversion Extensions\nDESCRIPTION: Extensions for converting MAUI keyboard accelerators to WinUI keyboard accelerators and updating menu flyout items with keyboard shortcuts. These enable cross-platform keyboard shortcut definitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.KeyboardAcceleratorExtensions.ToPlatform(this Microsoft.Maui.IKeyboardAccelerator! keyboardAccelerator) -> Microsoft.UI.Xaml.Input.KeyboardAccelerator?\nstatic Microsoft.Maui.Platform.KeyboardAcceleratorExtensions.ToPlatform(this System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IKeyboardAccelerator!>! keyboardAccelerators) -> System.Collections.Generic.IList<Microsoft.UI.Xaml.Input.KeyboardAccelerator!>?\nstatic Microsoft.Maui.Platform.KeyboardAcceleratorExtensions.UpdateKeyboardAccelerators(this Microsoft.UI.Xaml.Controls.MenuFlyoutItemBase! platformView, Microsoft.Maui.IMenuFlyoutItem! menuFlyoutItem) -> void\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Handler Implementation\nDESCRIPTION: Core handler implementation for HybridWebView component with mapping and command configurations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler() -> void\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nstatic Microsoft.Maui.Handlers.HybridWebViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IHybridWebView!, Microsoft.Maui.Handlers.IHybridWebViewHandler!>!\nstatic Microsoft.Maui.Handlers.HybridWebViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IHybridWebView!, Microsoft.Maui.Handlers.IHybridWebViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Overriding StreamImageSourceService Method for Tizen Platform\nDESCRIPTION: This method overrides the GetImageAsync method in StreamImageSourceService to provide Tizen-specific image loading functionality for MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.StreamImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.Maui.Platform.MauiImageSource!>?>!\n```\n\n----------------------------------------\n\nTITLE: MapSpan Equality Operator\nDESCRIPTION: Static equality operator that compares two MapSpan instances. Returns true if the MapSpan instances are equal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: GridLength Operators and Implicit Conversion\nDESCRIPTION: These static methods define operators and implicit conversion for the GridLength struct, including equality and inequality operators, and conversion from double to GridLength.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength\nstatic Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\nstatic Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Utilizing Orientation Sensor\nDESCRIPTION: Enables management of orientation sensor functionalities such as checking monitoring status, starting and stopping monitoring, and handling data events. Part of the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.IsSupported.get -> bool\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Parsing PointF from String in MAUI\nDESCRIPTION: This method attempts to parse a string representation of a point (floating-point) into a Microsoft MAUI PointF object. It returns a boolean indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.PointF.TryParse(string value, out Microsoft.Maui.Graphics.PointF pointF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Map Location Operations in MAUI\nDESCRIPTION: Static methods for opening maps with various location parameters including coordinates, placemarks and launch options. All methods return Tasks to support asynchronous operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Get and Set Disconnect Policy in HandlerProperties C#\nDESCRIPTION: Static methods for getting and setting the DisconnectPolicy of a HandlerProperties, controlling how handlers manage disconnection behavior from a BindableObject.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.HandlerProperties.GetDisconnectPolicy(Microsoft.Maui.Controls.BindableObject! target) -> Microsoft.Maui.HandlerDisconnectPolicy\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.HandlerProperties.SetDisconnectPolicy(Microsoft.Maui.Controls.BindableObject! target, Microsoft.Maui.HandlerDisconnectPolicy value) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Interface Properties\nDESCRIPTION: Property getter and setter signatures for font and text color properties in the ITextAttributes interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ITextAttributes.Font.get -> Microsoft.Maui.Graphics.IFont\nMicrosoft.Maui.Graphics.ITextAttributes.Font.set -> void\nMicrosoft.Maui.Graphics.ITextAttributes.TextFontColor.get -> Microsoft.Maui.Graphics.Color\nMicrosoft.Maui.Graphics.ITextAttributes.TextFontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Creating TextAttributes Dictionary in C#\nDESCRIPTION: This snippet defines a constructor for the TextAttributes class that initializes it with a dictionary of text attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.TextAttributes.TextAttributes(System.Collections.Generic.IDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> dictionary) -> void\n```\n\n----------------------------------------\n\nTITLE: Animation Lerping Extensions in MAUI\nDESCRIPTION: Extension methods for linear interpolation (lerp) operations on various data types including primitives and graphics objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this double start, double end, double progress) -> double\nstatic Microsoft.Maui.Animations.AnimationLerpingExtensions.Lerp(this Microsoft.Maui.Graphics.Color! color, Microsoft.Maui.Graphics.Color! endColor, double progress) -> Microsoft.Maui.Graphics.Color!\n```\n\n----------------------------------------\n\nTITLE: Defining LinearGradientPaint Class in C#\nDESCRIPTION: Defines the LinearGradientPaint class with properties and constructors for creating linear gradient paints in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LinearGradientPaint\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.EndPoint.set -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint() -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.LinearGradientPaint(Microsoft.Maui.Graphics.Point startPoint, Microsoft.Maui.Graphics.Point endPoint) -> void\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.LinearGradientPaint.StartPoint.set -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractPattern Class in C#\nDESCRIPTION: Defines the AbstractPattern class for creating pattern fills in graphics operations, with constructors and properties for pattern dimensions and steps.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.AbstractPattern\nMicrosoft.Maui.Graphics.AbstractPattern.AbstractPattern(float stepSize) -> void\nMicrosoft.Maui.Graphics.AbstractPattern.AbstractPattern(float width, float height) -> void\nMicrosoft.Maui.Graphics.AbstractPattern.AbstractPattern(float width, float height, float stepX, float stepY) -> void\nMicrosoft.Maui.Graphics.AbstractPattern.Width.get -> float\nMicrosoft.Maui.Graphics.AbstractPattern.Height.get -> float\nMicrosoft.Maui.Graphics.AbstractPattern.StepX.get -> float\nMicrosoft.Maui.Graphics.AbstractPattern.StepY.get -> float\n```\n\n----------------------------------------\n\nTITLE: Mapping Shape View Properties in MAUI (C#)\nDESCRIPTION: Static methods for mapping stroke properties of shape views in MAUI. These methods handle transferring stroke miter limit and thickness properties from the cross-platform IShapeView interface to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Requesting Current Display Density\nDESCRIPTION: Requests the current display density of the window, which can be vital for rendering decisions and adapting layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.RequestDisplayDensity() -> float\n```\n\n----------------------------------------\n\nTITLE: Applying Keyboard Settings to UITextInput in .NET MAUI\nDESCRIPTION: This extension method applies keyboard settings to a UITextInput in .NET MAUI. It takes an IUITextInput and a Keyboard object as parameters to configure the input behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_178\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.KeyboardExtensions.ApplyKeyboard(this UIKit.IUITextInput! textInput, Microsoft.Maui.Keyboard! keyboard) -> void\n```\n\n----------------------------------------\n\nTITLE: UI Component Overrides in .NET MAUI for Android Platform\nDESCRIPTION: Method overrides for various UI components in MAUI's Android platform implementation, including BorderDrawable, ContentViewGroup, LayoutViewGroup, and various input controls. These methods handle rendering, layout, and user interaction for MAUI's cross-platform UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.BorderDrawable.Dispose(bool disposing) -> void\noverride Microsoft.Maui.Platform.BorderDrawable.OnBoundsChange(Android.Graphics.Rect! bounds) -> void\noverride Microsoft.Maui.Platform.BorderDrawable.OnDraw(Android.Graphics.Drawables.Shapes.Shape? shape, Android.Graphics.Canvas? canvas, Android.Graphics.Paint? paint) -> void\noverride Microsoft.Maui.Platform.ContentViewGroup.GetClipPath(int width, int height) -> Android.Graphics.Path?\noverride Microsoft.Maui.Platform.ContentViewGroup.OnLayout(bool changed, int left, int top, int right, int bottom) -> void\noverride Microsoft.Maui.Platform.ContentViewGroup.OnMeasure(int widthMeasureSpec, int heightMeasureSpec) -> void\noverride Microsoft.Maui.Platform.LayoutViewGroup.OnLayout(bool changed, int l, int t, int r, int b) -> void\noverride Microsoft.Maui.Platform.LayoutViewGroup.OnMeasure(int widthMeasureSpec, int heightMeasureSpec) -> void\noverride Microsoft.Maui.Platform.LayoutViewGroup.OnTouchEvent(Android.Views.MotionEvent? e) -> bool\noverride Microsoft.Maui.Platform.LocalizedDigitsKeyListener.FilterFormatted(Java.Lang.ICharSequence? source, int start, int end, Android.Text.ISpanned? dest, int dstart, int dend) -> Java.Lang.ICharSequence?\noverride Microsoft.Maui.Platform.LocalizedDigitsKeyListener.GetAcceptedChars() -> char[]!\noverride Microsoft.Maui.Platform.LocalizedDigitsKeyListener.InputType.get -> Android.Text.InputTypes\n```\n\n----------------------------------------\n\nTITLE: Base Permission Methods in C#\nDESCRIPTION: Abstract methods for handling permissions in the Microsoft.Maui.ApplicationModel.Permissions namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.EnsureDeclared() -> void\nabstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.ShouldShowRationale() -> bool\n```\n\n----------------------------------------\n\nTITLE: Declaring Absolute Layout Flags\nDESCRIPTION: Defines flags for absolute layouts that help control how elements are sized and positioned, enhancing layout flexibility.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional = 2 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\n----------------------------------------\n\nTITLE: Defining MauiContext in .NET MAUI Platform Services\nDESCRIPTION: Represents the core context for MAUI application, providing access to services and handlers for cross-platform UI rendering\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.MauiContext.MauiContext(System.IServiceProvider! services) -> void\n```\n\n----------------------------------------\n\nTITLE: WindowOverlay RemoveWindowElement Method in C#\nDESCRIPTION: Virtual method that removes a specific drawable element from the window overlay. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_196\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.RemoveWindowElement(Microsoft.Maui.IWindowOverlayElement! drawable) -> bool\n```\n\n----------------------------------------\n\nTITLE: Getting Overlay Density\nDESCRIPTION: Obtains the density setting of the window overlay, essential for rendering considerations and UI scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.Density.get -> float\n```\n\n----------------------------------------\n\nTITLE: Defining AltitudeReferenceSystem Enum in C#\nDESCRIPTION: Defines an enumeration for different altitude reference systems used in geolocation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Ellipsoid = 2 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Geoid = 3 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Surface = 4 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Terrain = 1 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Unspecified = 0 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\n```\n\n----------------------------------------\n\nTITLE: PageViewController Implementation in C#\nDESCRIPTION: PageViewController manages a MAUI page view within a native view controller context. It bridges between MAUI's page abstraction and the native platform's view controller system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.PageViewController\nMicrosoft.Maui.Platform.PageViewController.PageViewController(Microsoft.Maui.IView! page, Microsoft.Maui.IMauiContext! mauiContext) -> void\n```\n\n----------------------------------------\n\nTITLE: Method Signatures in Microsoft.Maui.Media Namespace\nDESCRIPTION: This section lists various method signatures for text-to-speech operations, locale retrieval, media picking, and screenshot handling. These methods are part of Microsoft Maui's media interaction capabilities, allowing for operations like playing text aloud and retrieving images from user inputs. Dependencies mostly include Maui media classes, relying on asynchronous operation management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ITextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ITextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options = null, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Getting Web View Source\nDESCRIPTION: Retrieves the source of the web view, providing access to the underlying web view content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebView.Source.get -> Microsoft.Maui.IWebViewSource!\n```\n\n----------------------------------------\n\nTITLE: Checking Intersection of Attributed Text Runs in MAUI\nDESCRIPTION: These methods check if two attributed text runs intersect either by the specified start and length or directly.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\n```\n\n----------------------------------------\n\nTITLE: CarouselView Handler Override Definitions for iOS\nDESCRIPTION: Method signatures for overriding CarouselViewController and CarouselViewHandler functionality, including scrolling, cell management, and layout selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2.DraggingStarted(UIKit.UIScrollView scrollView) -> void\noverride Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2.GetCell(UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath) -> UIKit.UICollectionViewCell\noverride Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2.GetItemsCount(UIKit.UICollectionView collectionView, nint section) -> nint\n```\n\n----------------------------------------\n\nTITLE: Static ToPlatformEmbedded Extension Method (IMauiContext)\nDESCRIPTION: This static extension method converts a MAUI `IElement` to a native UIKit `UIView` using an `IMauiContext`. This is crucial for embedding MAUI content into native iOS applications, bridging the gap between MAUI's cross-platform abstraction and native UI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.ToPlatformEmbedded(this Microsoft.Maui.IElement! element, Microsoft.Maui.IMauiContext! context) -> UIKit.UIView!\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IDatePickerHandler in MAUI\nDESCRIPTION: Defines properties for the `IDatePickerHandler` interface in MAUI, providing access to the platform view and virtual view for a DatePicker.  PlatformView exposes the underlying platform-specific control, while VirtualView represents the .NET MAUI DatePicker.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IDatePickerHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IDatePickerHandler.VirtualView.get -> Microsoft.Maui.IDatePicker!\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for .NET MAUI\nDESCRIPTION: This directive enables nullable reference types for the current file or project. It allows for more precise null-checking and helps prevent null reference exceptions by making nullability part of the type system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: SkiaTextLayout Constructor\nDESCRIPTION: Creates a text layout with advanced configuration options for text rendering in Skia\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: UIView Subclass Overrides\nDESCRIPTION: Method overrides for various UIView subclasses implementing MAUI controls. Includes lifecycle methods like MovedToWindow and layout methods like LayoutSubviews.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.MauiView.LayoutSubviews() -> void\noverride Microsoft.Maui.Platform.MauiView.MovedToWindow() -> void\noverride Microsoft.Maui.Platform.MauiView.SafeAreaInsetsDidChange() -> void\n```\n\n----------------------------------------\n\nTITLE: Handling UI Changes in Overlay\nDESCRIPTION: Method to respond to UI changes within the overlay, useful for dynamically updating the overlay appearance based on events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.HandleUIChange() -> void\n```\n\n----------------------------------------\n\nTITLE: WebView Client Implementation\nDESCRIPTION: Implementation of WebView client functionality including resource interception and process handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.MauiHybridWebViewClient.ShouldInterceptRequest(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request) -> Android.Webkit.WebResourceResponse?\noverride Microsoft.Maui.Platform.MauiWebViewClient.OnRenderProcessGone(Android.Webkit.WebView? view, Android.Webkit.RenderProcessGoneDetail? detail) -> bool\n```\n\n----------------------------------------\n\nTITLE: Reading Picture from Byte Array in .NET MAUI\nDESCRIPTION: This method reads a picture from a byte array and returns an IImage instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPictureReader.Read(byte[] data) -> Microsoft.Maui.Graphics.IPicture\n```\n\n----------------------------------------\n\nTITLE: Overriding LayoutHandler Methods for Windows UI in C#\nDESCRIPTION: These methods override the LayoutHandler class to manage layout panels in Windows UI. They handle creating the platform view, disconnecting handlers, and setting up the virtual view for layouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.LayoutHandler.CreatePlatformView() -> Microsoft.Maui.Platform.LayoutPanel!\noverride Microsoft.Maui.Handlers.LayoutHandler.DisconnectHandler(Microsoft.Maui.Platform.LayoutPanel! platformView) -> void\noverride Microsoft.Maui.Handlers.LayoutHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeViewCloseRequest class in C#\nDESCRIPTION: Declares a class for SwipeView close requests, including an Animated property and a constructor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeViewCloseRequest\nMicrosoft.Maui.SwipeViewCloseRequest.Animated.get -> bool\nMicrosoft.Maui.SwipeViewCloseRequest.Animated.init -> void\nMicrosoft.Maui.SwipeViewCloseRequest.SwipeViewCloseRequest(bool Animated) -> void\n```\n\n----------------------------------------\n\nTITLE: Building Samples with Workload (CI)\nDESCRIPTION: This dotnetcli snippet demonstrates how to build the samples using the workload in a CI environment, using `-p:UseWorkload=true`.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dotnetcli\nCODE:\n```\n$ ./bin/dotnet/dotnet build ./eng/Microsoft.Maui.Samples.slnf -p:UseWorkload=true\n```\n\n----------------------------------------\n\nTITLE: Defining TypedBinding Property in TemplateBindingExtension\nDESCRIPTION: Property declarations for TypedBinding in the TemplateBindingExtension class, providing get and set accessors for binding functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n```\n\n----------------------------------------\n\nTITLE: PointF Operator Overloads in Microsoft.Maui.Graphics\nDESCRIPTION: Static operator overloads for the PointF struct in Microsoft.Maui.Graphics. Includes subtraction, addition, and equality comparison operations between points and sizes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_167\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.operator !=(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic Microsoft.Maui.Graphics.PointF.operator +(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator ==(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Creating Copy of Paint - SkiaSharp - C#\nDESCRIPTION: This method creates a deep copy of an existing SKPaint object, ensuring that modifications to the copy do not affect the original. This is critical in graphic design applications where paint settings need to be preserved across different elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKPaintExtensions.CreateCopy(this SkiaSharp.SKPaint paint) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: Override MovedToWindow Method (VisualElementRenderer)\nDESCRIPTION: This code snippet represents an override of the MovedToWindow method in VisualElementRenderer.  It is likely used for handling view-related actions or adjustments when the view is attached to or detached from a window in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Compatibility.VisualElementRenderer<TElement>.MovedToWindow() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Pattern for Canvas in MAUI (C#)\nDESCRIPTION: These methods allow users to set a fill pattern for the canvas. Patterns can be provided with or without foreground color, affecting how shapes will be rendered.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern, Microsoft.Maui.Graphics.Color foregroundColor) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern) -> void\n```\n\n----------------------------------------\n\nTITLE: ScrollOrientation Enum Definition\nDESCRIPTION: Enumeration defining the possible scroll orientations for the ScrollView control.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/scrollview.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nenum ScrollOrientation\n{\n    Vertical,\n    Horizontal,\n    Both,\n    Neither\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IPlatformScreenshot Interface in C#\nDESCRIPTION: Declares methods for capturing screenshots of UI elements and windows in the IPlatformScreenshot interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.IPlatformScreenshot.CaptureAsync(Microsoft.UI.Xaml.UIElement! element) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nMicrosoft.Maui.Media.IPlatformScreenshot.CaptureAsync(Microsoft.UI.Xaml.Window! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutable Attributed Text Object in C#\nDESCRIPTION: This snippet provides a constructor for initializing a MutableAttributedText instance with a given text string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.MutableAttributedText.MutableAttributedText(string text) -> void\n```\n\n----------------------------------------\n\nTITLE: Removing API in PublicAPI.Unshipped.txt\nDESCRIPTION: Example of marking an API as removed in the unshipped API file by prefixing with *REMOVED*.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n*REMOVED*Microsoft.Maui.Controls.PointerEventArgs.PointerEventArgs() -> void\n```\n\n----------------------------------------\n\nTITLE: Creating FontFile from String in FontFile Class\nDESCRIPTION: This static method creates a FontFile object from a given string input.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!\n```\n\n----------------------------------------\n\nTITLE: Setting Stroke Dash Pattern in PictureCanvas in .NET MAUI\nDESCRIPTION: This property allows setting the dash pattern for strokes in the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.StrokeDashPattern.set -> void\n```\n\n----------------------------------------\n\nTITLE: MenuBar Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the MenuBarHandler class that map operations like inserting and removing items. These methods are used to connect the cross-platform MenuBar control with platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Canvas State and Context Management in .NET MAUI Graphics\nDESCRIPTION: Defines virtual methods for managing graphics contexts including disposal and state transformations across different canvas implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.BitmapExportContext.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.CanvasState.TransformChanged() -> void\nvirtual Microsoft.Maui.Graphics.Paint.IsTransparent.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for SizeTypeConverter in C#\nDESCRIPTION: This snippet implements methods for the SizeTypeConverter to facilitate conversions related to size types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Graphics Text Rendering Operations\nDESCRIPTION: Method signatures for text rendering and measurement operations including string sizing and attributed text handling\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ScalingCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\nMicrosoft.Maui.Graphics.Platform.PlatformStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float textSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Defining IEmbeddedFontLoader Interface in C#\nDESCRIPTION: The IEmbeddedFontLoader interface specifies a method to load embedded fonts within the .NET MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IEmbeddedFontLoader.LoadFont(Microsoft.Maui.EmbeddedFont! font) -> string?\n```\n\n----------------------------------------\n\nTITLE: Creating ImageSourceServiceLoadResult Instance\nDESCRIPTION: This code shows various ways to create an instance of the `ImageSourceServiceLoadResult` class. The constructor can be called with or without parameters. Parameters include a boolean indicating if the image loading result is resolution dependent and an optional dispose action.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult(bool resolutionDependent, System.Action? dispose = null) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ImageSourceServiceLoadResult.ImageSourceServiceLoadResult(System.Action? dispose = null) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Layout Direction in MAUI ApplicationModel\nDESCRIPTION: Defines the layout direction with enumerated values such as LeftToRight, RightToLeft, and Unknown for layout customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LayoutDirection\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LayoutDirection.LeftToRight = 1 -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LayoutDirection.RightToLeft = 2 -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LayoutDirection.Unknown = 0 -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\n----------------------------------------\n\nTITLE: Handling OpenFileRequest in Microsoft.Maui\nDESCRIPTION: Defines constructors and properties for handling open file requests using file and presentation bounds. It’s part of the Microsoft.Maui.ApplicationModel namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.ReadOnlyFile! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Object Equality and Hash Code Implementations in C#\nDESCRIPTION: Override implementations of GetHashCode and Equals methods for various graphics primitives to ensure proper equality comparison and hashing behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Color.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Font.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.FontSource.Equals(object? obj) -> bool\noverride Microsoft.Maui.Graphics.FontSource.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Insets.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.InsetsF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.PathF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Point.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.PointF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Rect.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.RectF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Size.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.SizeF.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Creating Quadratic Curves in Paths\nDESCRIPTION: This snippet provides the QuadTo method in the PathF class, allowing the addition of quadratic curves to paths using control points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.QuadTo(float cx, float cy, float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.QuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString() for Graphics Objects in C#\nDESCRIPTION: These overrides implement custom string representations for various graphics-related objects such as Point, PointF, Rect, RectF, Size, and SizeF.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Point.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.PointF.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Rect.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.RectF.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Size.ToString() -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.SizeF.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Canvas State Management Methods in .NET MAUI\nDESCRIPTION: Methods for managing the state of the canvas, including saving, restoring, and resetting. These methods enable the preservation of drawing contexts for complex rendering scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.ResetState() -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.RestoreState() -> bool\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.SaveState() -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.SubtractFromClip(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing IEssentialsBuilder Interface in C#\nDESCRIPTION: Defines an interface for configuring Essentials in a MAUI application, including methods for adding app actions, handling app actions, setting map service tokens, and using version tracking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.IEssentialsBuilder.AddAppAction(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nMicrosoft.Maui.Hosting.IEssentialsBuilder.OnAppAction(System.Action<Microsoft.Maui.ApplicationModel.AppAction!>! action) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nMicrosoft.Maui.Hosting.IEssentialsBuilder.UseMapServiceToken(string! token) -> Microsoft.Maui.Hosting.IEssentialsBuilder!\nMicrosoft.Maui.Hosting.IEssentialsBuilder.UseVersionTracking() -> Microsoft.Maui.Hosting.IEssentialsBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining Mapper and CommandMapper for LayoutHandler in C#\nDESCRIPTION: These static properties define a Mapper and CommandMapper for the LayoutHandler, which map properties and commands for ILayout to ILayoutHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LayoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\nstatic Microsoft.Maui.Handlers.LayoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ILayout!, Microsoft.Maui.ILayoutHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Comparing PaintGradientStop Instances in .NET MAUI\nDESCRIPTION: This method compares the current PaintGradientStop instance to another instance for equality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.CompareTo(Microsoft.Maui.Graphics.PaintGradientStop obj) -> int\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the MenuFlyoutHandler class that map operations between the cross-platform IMenuFlyout interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: ContentView Handler Methods in MAUI\nDESCRIPTION: Static methods for ContentViewHandler that map content properties between MAUI content view abstractions and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ContentViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ContentViewHandler.MapContent(Microsoft.Maui.Handlers.IContentViewHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ContentViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Initializing ApplicationHandler in MAUI\nDESCRIPTION: Initializes a new instance of the `ApplicationHandler` class, optionally accepting a property mapper. The property mapper is used to define how properties of the associated virtual view are mapped to the platform-specific view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ApplicationHandler.ApplicationHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Map Control Class Definition\nDESCRIPTION: Core Map control class with properties for configuring map behavior including zoom, scroll, traffic display and user location tracking. Includes collection support for pins and map elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Map.Map() -> void\nMicrosoft.Maui.Controls.Maps.Map.Map(Microsoft.Maui.Maps.MapSpan! region) -> void\nMicrosoft.Maui.Controls.Maps.Map.IsZoomEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsScrollEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsTrafficEnabled.get -> bool\nMicrosoft.Maui.Controls.Maps.Map.IsShowingUser.get -> bool\n```\n\n----------------------------------------\n\nTITLE: MAUI Handler Abstract Methods\nDESCRIPTION: Abstract method definitions for MAUI element and view handlers that manage platform-specific view creation and layout operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ElementHandler<TVirtualView, TPlatformView>.CreatePlatformElement() -> TPlatformView!\nabstract Microsoft.Maui.Handlers.ViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Declaring ITextToSpeech Interface Methods in C#\nDESCRIPTION: Defines methods for text-to-speech functionality, including getting locales and speaking text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.ITextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nMicrosoft.Maui.Media.ITextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options = null, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Centering a Label with Explicit Width in a VerticalStackLayout\nDESCRIPTION: This XAML snippet demonstrates how a Label with an explicit WidthRequest and HorizontalOptions set to Fill will be centered within a VerticalStackLayout. The Label's width will be 100 units, despite the Fill option.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<VerticalStackLayout WidthRequest=\"400\">\n    <Label Text=\"Hello\" WidthRequest=\"100\" HorizontalOptions=\"Fill\"/>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Network Connectivity APIs in MAUI (C#)\nDESCRIPTION: Methods and properties for monitoring network connectivity state, accessing connection profiles, and receiving notifications when connectivity status changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!\nstatic Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!\nstatic Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!\nstatic Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: UpdateSourceEventName Setter Finalizer\nDESCRIPTION: This code snippet shows the finalizer for setting `UpdateSourceEventName`. This snippet seems like a deconstructor used for safely releasing any resources that this class is holding\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\n\"~Microsoft.Maui.Controls.Internals.TypedBindingBase.UpdateSourceEventName.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: EmailAttachment Constructor (FullPath) in MAUI\nDESCRIPTION: This constructor initializes a new instance of the EmailAttachment class using a full file path. The fullPath specifies the location of the file to attach to an email message.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailAttachment.EmailAttachment(string! fullPath) -> void\"\n```\n\n----------------------------------------\n\nTITLE: VerticalAlignment Enum Constants in MAUI Graphics\nDESCRIPTION: Enumeration constants for Microsoft.Maui.Graphics.VerticalAlignment, defining vertical positioning options for elements within a container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.VerticalAlignment.Top = 0 -> Microsoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.VerticalAlignment.Center = 1 -> Microsoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.VerticalAlignment.Bottom = 2 -> Microsoft.Maui.Graphics.VerticalAlignment\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset in .NET MAUI - C#\nDESCRIPTION: This code snippet asynchronously loads a Maui asset from the application's package using .NET MAUI's file system APIs. It demonstrates how to open a file and read its contents into a string. The `FileSystem.OpenAppPackageFileAsync` method is used to access the asset, and a `StreamReader` is employed to read the file's content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-multiproject/MauiApp.1/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual UpdateVisibility Method (ItemsViewController)\nDESCRIPTION: This code snippet showcases a virtual method named UpdateVisibility in the ItemsViewController2 class. It most likely deals with updating the visibility state of items within the ItemsView, allowing to show or hide items based on certain conditions or data changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.UpdateVisibility() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining ShareRequestBase Class in C#\nDESCRIPTION: Defines the ShareRequestBase class with properties for presentation source bounds and title.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.set -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.ShareRequestBase() -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.get -> string?\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollBarVisibility Enumeration\nDESCRIPTION: Enumeration defining scroll bar visibility options in MAUI UI components.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Always = 1 -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Default = 0 -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Never = 2 -> Microsoft.Maui.ScrollBarVisibility\n```\n\n----------------------------------------\n\nTITLE: Defining ILauncher in MAUI\nDESCRIPTION: This snippet defines the ILauncher interface, which includes methods to check and open URIs and files, enabling functionalities like opening external applications within a MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.ILauncher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance (Location, Lat/Lon) in MAUI\nDESCRIPTION: This static method calculates the distance between two geographic locations, using a Location object for the start and latitude/longitude for the end. It takes a starting Location object, ending latitude and longitude, and a DistanceUnits enum. The function returns the distance as a double.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SetAndCreateSource for ResourceDictionary in C#\nDESCRIPTION: Defines a generic method SetAndCreateSource for the ResourceDictionary class, taking a Uri parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.ResourceDictionary.SetAndCreateSource<T>(System.Uri value) -> void\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Method Override in .NET MAUI\nDESCRIPTION: Sealed override method for the ViewHandler class that sets the virtual view. This method is crucial for connecting the platform-specific view implementation with the cross-platform virtual view.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\noverride sealed Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: BitmapExportContext Class in C#\nDESCRIPTION: Defines the BitmapExportContext class for exporting graphics to bitmap images, with constructor and properties for dimensions and DPI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.BitmapExportContext\nMicrosoft.Maui.Graphics.BitmapExportContext.BitmapExportContext(int width, int height, float dpi) -> void\nMicrosoft.Maui.Graphics.BitmapExportContext.Width.get -> int\nMicrosoft.Maui.Graphics.BitmapExportContext.Height.get -> int\nMicrosoft.Maui.Graphics.BitmapExportContext.Dpi.get -> float\n```\n\n----------------------------------------\n\nTITLE: Defining AnimationManager Class Implementation\nDESCRIPTION: AnimationManager class implementation that manages animation execution and timing. Handles adding/removing animations and controls animation speed and ticker behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.AnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.AnimationManager.AnimationManager(Microsoft.Maui.Animations.ITicker! ticker) -> void\nMicrosoft.Maui.Animations.AnimationManager.AutoStartTicker.get -> bool\nMicrosoft.Maui.Animations.AnimationManager.AutoStartTicker.set -> void\n```\n\n----------------------------------------\n\nTITLE: Filling Path in Skia Canvas\nDESCRIPTION: Executes a path fill operation according to specified winding rules, ensuring precise and complex shape fills in SkiaCanvas, relevant in UIs or graphical applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Reset Behavior\nDESCRIPTION: Code showing how to configure a test class to reset the application state after each test method execution.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/UITesting.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override bool ResetAfterEachTest => true;\n```\n\n----------------------------------------\n\nTITLE: Saving PDF Page Asynchronously in .NET MAUI\nDESCRIPTION: This asynchronous method saves the current PDF page to the provided stream.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPdfPage.SaveAsync(System.IO.Stream stream) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: CanvasState Scaling Utility in C#\nDESCRIPTION: Static utility method for CanvasState class that calculates the scaling factor from a transformation matrix, used for adjusting lengths in transformed contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasState.GetLengthScale(System.Numerics.Matrix3x2 matrix) -> float\n```\n\n----------------------------------------\n\nTITLE: Centering a Label with Maximum Width in a VerticalStackLayout\nDESCRIPTION: This XAML snippet shows how a Label with a MaximumWidthRequest and HorizontalOptions set to Fill will be centered within a VerticalStackLayout. The Label's width will be limited to 50 units.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<VerticalStackLayout WidthRequest=\"400\">\n    <Label Text=\"Hello\" MaximumWidthRequest=\"50\" HorizontalOptions=\"Fill\"/>\n</VerticalStackLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Management Functions in C# for Microsoft.Maui.Layouts\nDESCRIPTION: This snippet defines static methods for the LayoutManager and StackLayoutManager classes in Microsoft.Maui.Layouts. It includes methods for resolving constraints and measuring spacing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutManager.ResolveConstraints(double externalConstraint, double explicitLength, double measuredLength, double min = 0, double max = Infinity) -> double\nstatic Microsoft.Maui.Layouts.StackLayoutManager.MeasureSpacing(double spacing, int childCount) -> double\n```\n\n----------------------------------------\n\nTITLE: Distance Class Implementation in MAUI Maps\nDESCRIPTION: Defines the Distance class for handling geographic distances with methods for conversion between meters, kilometers, and miles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Distance\n{\n    public Distance();\n    public Distance(double meters);\n    public double Kilometers { get; }\n    public double Meters { get; }\n    public double Miles { get; }\n    public bool Equals(Distance other);\n    public static Distance FromKilometers(double kilometers);\n    public static Distance FromMeters(double meters);\n    public static Distance FromMiles(double miles);\n}\n```\n\n----------------------------------------\n\nTITLE: Device Information Interface in C#\nDESCRIPTION: Interface definition for accessing device-specific information like manufacturer, model, platform type, and version details.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nMicrosoft.Maui.Devices.IDeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nMicrosoft.Maui.Devices.IDeviceInfo.Manufacturer.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Model.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Name.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nMicrosoft.Maui.Devices.IDeviceInfo.Version.get -> System.Version!\nMicrosoft.Maui.Devices.IDeviceInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Enumeration Values in C#\nDESCRIPTION: Lists the enumeration values for Microsoft.Maui.Graphics.PictureCommand, which define graphics operations for a picture drawing context. Includes drawing, filling, state management, and transformation commands.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.BoldSystemFont = 111 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ClipPath = 81 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ClipRectangle = 82 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ConcatenateTransform = 64 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawArc = 6 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawEllipse = 3 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawImage = 5 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawLine = 0 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawPath = 4 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawPdfPage = 7 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawRectangle = 1 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawRoundedRectangle = 2 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringAtPoint = 20 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringInPath = 22 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawStringInRect = 21 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.DrawTextInRect = 25 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillArc = 14 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillColor = 40 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillEllipse = 12 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPaint = 41 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPath = 13 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPath2 = 15 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillRectangle = 10 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillRoundedRectangle = 11 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontColor = 50 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontName = 51 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontSize = 52 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.LimitStrokeScaling = 37 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ResetState = 102 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RestoreState = 101 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Rotate = 62 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RotateAtPoint = 63 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SaveState = 100 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Scale = 60 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Shadow = 70 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeBrush = 39 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeColor = 31 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeDashPattern = 32 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLimit = 38 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineCap = 33 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineJoin = 34 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLocation = 35 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeMiterLimit = 36 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeSize = 30 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractFromClip = 80 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractPathFromClip = 83 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SystemFont = 110 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Translate = 61 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Defining Resolve Method for IXamlTypeResolver in C#\nDESCRIPTION: Declares the Resolve method for IXamlTypeResolver interface in the Microsoft.Maui.Controls.Xaml namespace, resolving qualified type names.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.IXamlTypeResolver.Resolve(string qualifiedTypeName, System.IServiceProvider serviceProvider = null, bool expandToExtension = true) -> System.Type\n```\n\n----------------------------------------\n\nTITLE: Specifying MAUI Version\nDESCRIPTION: This XML snippet shows how to specify a specific version of the .NET MAUI workload in the `.csproj` file. This allows the project to build against newer MAUI assemblies, even if that version isn't installed system-wide.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<MauiVersion>8.0.100-preview.1.2345</MauiVersion>\n```\n\n----------------------------------------\n\nTITLE: MAUI Type Converter Implementations\nDESCRIPTION: Collection of type converter implementations for various MAUI types including Easing, FlexBox properties and Thickness. Each converter provides methods for checking conversion compatibility and performing conversions between types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\n----------------------------------------\n\nTITLE: Getting Platform View Initialization Status\nDESCRIPTION: Checks if the platform view for the overlay is initialized, which can be important for ensuring the correct rendering path is followed.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.IsPlatformViewInitialized.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ToolTip class in C#\nDESCRIPTION: Declares a class for representing tooltips, including a Content property and a constructor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ToolTip\nMicrosoft.Maui.ToolTip.Content.get -> object?\nMicrosoft.Maui.ToolTip.Content.set -> void\nMicrosoft.Maui.ToolTip.ToolTip() -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Methods for Drawing and Filling Shapes in C#\nDESCRIPTION: Method signatures for drawing and filling various shapes on a PictureCanvas. These methods provide functionality for rendering lines, rectangles, rounded rectangles, arcs, and ellipses with specified coordinates and dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Convert Font to SKTypeface\nDESCRIPTION: This static extension method converts a Maui IFont to a SkiaSharp SKTypeface, facilitating the integration of font handling between the two libraries.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.FontExtensions.ToSKTypeface(this Microsoft.Maui.Graphics.IFont font) -> SkiaSharp.SKTypeface\n```\n\n----------------------------------------\n\nTITLE: Overriding Navigation, Page, and Picker Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for NavigationViewHandler, PageHandler, and PickerHandler classes that manage platform view creation, handler connection/disconnection for navigation, page layouts, and picker controls in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.NavigationViewHandler.CreatePlatformView() -> UIKit.UIView!\noverride Microsoft.Maui.Handlers.PageHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!\noverride Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiPicker!\noverride Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiPicker! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI ImageSource Service Configuration Extensions\nDESCRIPTION: Static extension methods for configuring ImageSource services in MAUI applications. These methods enable the registration of custom image source services that handle different types of image sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource, TImageSourceService>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\nstatic Microsoft.Maui.Hosting.ImageSourceServiceCollectionExtensions.AddService<TImageSource>(this Microsoft.Maui.Hosting.IImageSourceServiceCollection! services, System.Func<System.IServiceProvider!, Microsoft.Maui.IImageSourceService<TImageSource>!>! implementationFactory) -> Microsoft.Maui.Hosting.IImageSourceServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Defining IMenuFlyoutHandler Interface in C#\nDESCRIPTION: This snippet defines the IMenuFlyoutHandler interface, which includes properties for accessing the platform view and virtual view, and a method for removing menu elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.PlatformView.get -> object!\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyout!\n```\n\n----------------------------------------\n\nTITLE: Type Converters for Graphics Types\nDESCRIPTION: Provides type conversion capabilities for various graphics-related types including Color, Point, Rectangle, and Size with support for standard values and conversion contexts\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Converters.ColorTypeConverter.ConvertFrom(...) -> object\noverride Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertTo(...) -> object\noverride Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertFrom(...) -> bool\n```\n\n----------------------------------------\n\nTITLE: Xmlns Prefix and Namespace Attributes\nDESCRIPTION: Retrieves the XmlNamespace and prefix associated with XmlnsPrefixAttribute class. It does not require any arguments and results in string outputs indicating the current XML settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.XmlnsPrefixAttribute.Prefix.get -> string\n```\n\n----------------------------------------\n\nTITLE: Size Operations and Type Conversions in MAUI Graphics\nDESCRIPTION: Static methods for size arithmetic operations, comparisons, and type conversions between Size, SizeF, and Vector2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.explicit operator Microsoft.Maui.Graphics.Point(Microsoft.Maui.Graphics.Size size) -> Microsoft.Maui.Graphics.Point\nstatic Microsoft.Maui.Graphics.Size.implicit operator Microsoft.Maui.Graphics.SizeF(Microsoft.Maui.Graphics.Size s) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Color in PaintGradientStop Class\nDESCRIPTION: These properties allow getting and setting the color in a PaintGradientStop instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.Color.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.Color.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing Maps functionality in .NET MAUI - Extension Methods (C#)\nDESCRIPTION: Extension methods to set up Maps functionality in a .NET MAUI application. These methods register the necessary handlers and services for mapping capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiMaps(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiMaps(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\n```\n\n----------------------------------------\n\nTITLE: EmailMessage Body getter in MAUI\nDESCRIPTION: This property getter retrieves the body of an email message. The body is a string containing the content of the email. The string can be null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Body.get -> string?\"\n```\n\n----------------------------------------\n\nTITLE: Secure Storage Interface Methods\nDESCRIPTION: Provides methods for securely storing and retrieving key-value pairs with platform-specific accessibility options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nISecureStorage.GetAsync(string key)\nISecureStorage.Remove(string key)\nISecureStorage.RemoveAll()\nISecureStorage.SetAsync(string key, string value)\n```\n\n----------------------------------------\n\nTITLE: Defining Text Line in Skia\nDESCRIPTION: Creates a TextLine object for managing single line text values with specified width, coordinating advanced text rendering and measurement operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.TextLine.TextLine(string value, float width) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding SizeTypeConverter Methods in .NET MAUI Graphics\nDESCRIPTION: These overrides for `SizeTypeConverter` in the Microsoft.Maui.Graphics library define how to convert from and to `Size` types. The methods `CanConvertFrom`, `CanConvertTo`, `ConvertFrom`, and `ConvertTo` are overridden to provide custom conversion logic for `Size` objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\"\n```\n\n----------------------------------------\n\nTITLE: Color Parsing and Standard Colors\nDESCRIPTION: Utility methods for parsing color strings and accessing standard color collections in the MAUI Graphics library\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]\n```\n\n----------------------------------------\n\nTITLE: ScrollBarVisibility Enumeration in C#\nDESCRIPTION: Definition of ScrollBarVisibility enumeration which defines different visibility states for scrollbars in scrollable UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Always = 1 -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Default = 0 -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Never = 2 -> Microsoft.Maui.ScrollBarVisibility\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Font in Text Attributes in .NET MAUI\nDESCRIPTION: These properties allow getting and setting the font attributes in an ITextAttributes instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.Font.get -> Microsoft.Maui.Graphics.IFont\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.Font.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation and Ticker Classes in C#\nDESCRIPTION: Virtual methods for Animation and Ticker classes, handling animation lifecycle and system-level animation settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Animations.Animation.CreateReverse() -> Microsoft.Maui.Animations.Animation!\nvirtual Microsoft.Maui.Animations.Animation.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Animations.Animation.OnTick(double millisecondsSinceLastUpdate) -> void\nvirtual Microsoft.Maui.Animations.Animation.Reset() -> void\nvirtual Microsoft.Maui.Animations.Animation.Update(double percent) -> void\nvirtual Microsoft.Maui.Animations.AnimationManager.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Animations.Ticker.IsRunning.get -> bool\nvirtual Microsoft.Maui.Animations.Ticker.MaxFps.get -> int\nvirtual Microsoft.Maui.Animations.Ticker.MaxFps.set -> void\nvirtual Microsoft.Maui.Animations.Ticker.OnSystemEnabledChanged() -> void\nvirtual Microsoft.Maui.Animations.Ticker.Start() -> void\nvirtual Microsoft.Maui.Animations.Ticker.Stop() -> void\nvirtual Microsoft.Maui.Animations.Ticker.SystemEnabled.get -> bool\nvirtual Microsoft.Maui.Animations.Ticker.SystemEnabled.set -> void\n```\n\n----------------------------------------\n\nTITLE: TimePicker Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for updating MauiTimePicker properties based on MAUI ITimePicker values. These methods handle time value and format synchronization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_178\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TimePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Platform.TimePickerExtensions.UpdateTime(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Override Methods for Microsoft.Maui.Graphics Type Converters\nDESCRIPTION: Overridden methods for various type converters in the Microsoft.Maui.Graphics.Converters namespace that handle conversion to and from different types. These methods support converting geometric types like Point, PointF, Rect, RectF, Size, and SizeF to other formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.RectTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.SizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Checking Exact Intersection of Attributed Text Runs in MAUI\nDESCRIPTION: These methods check if two attributed text runs intersect exactly by the specified start and length or directly.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining PageHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static properties and methods for the PageHandler class that manage page-specific behaviors such as background color and title settings. The class provides both command and property mappers for IContentView implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapBackground(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.PageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IPageHandler!>!\nstatic Microsoft.Maui.Handlers.PageHandler.MapTitle(Microsoft.Maui.Handlers.IPageHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: XML Attributed Text Reading and Writing\nDESCRIPTION: Handles reading and writing of attributed text using XML format, supporting both string and TextReader/TextWriter inputs and outputs\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(string text) -> Microsoft.Maui.Graphics.Text.IAttributedText\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(System.IO.TextReader reader) -> Microsoft.Maui.Graphics.Text.IAttributedText\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText attributedText, System.IO.TextWriter writer) -> void\nMicrosoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText text) -> string\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture in C# MAUI\nDESCRIPTION: Static methods for capturing screenshots on various platforms. Includes methods for capturing the entire screen and specific views on Android.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!\nstatic Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool\nstatic Microsoft.Maui.Media.ScreenshotExtensions.CaptureAsync(this Microsoft.Maui.Media.IScreenshot! screenshot, Android.App.Activity! activity) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.ScreenshotExtensions.CaptureAsync(this Microsoft.Maui.Media.IScreenshot! screenshot, Android.Views.View! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\n```\n\n----------------------------------------\n\nTITLE: Defining MauiApplication.Current Property in C# for Microsoft.Maui\nDESCRIPTION: This snippet defines a static property Current for the MauiApplication class in the Microsoft.Maui namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.MauiApplication.Current.get -> Microsoft.Maui.MauiApplication!\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals Method for Color Class in C#\nDESCRIPTION: This snippet overrides the Equals method in the Color class, providing a way to compare color instances for equality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Color.Equals(object obj) -> bool\n```\n\n----------------------------------------\n\nTITLE: Opening Maps Async (Placemark, Options) in MAUI\nDESCRIPTION: This extension method opens the device's map application to display the provided Placemark, with optional launch options. It operates asynchronously.  It is an extension method on Placemark. It accepts a Placemark and MapLaunchOptions and returns a Task.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.PlacemarkExtensions.OpenMapsAsync(this Microsoft.Maui.Devices.Sensors.Placemark placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions options) -> System.Threading.Tasks.Task\"\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar PassthroughElements Property in C#\nDESCRIPTION: These code snippets represent accessing the PassthroughElements property of the TitleBar, allowing to get the list of views that should allow touch events to pass through them. The type is a generic list of Microsoft.Maui.IView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.PassthroughElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IView!>!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PermissionStatus Enum in MAUI ApplicationModel\nDESCRIPTION: Defines the PermissionStatus enum in the Microsoft.Maui.ApplicationModel namespace, specifying different permission states such as Denied, Granted, and Limited.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Denied = 1 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Granted = 3 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Limited = 5 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4 -> Microsoft.Maui.ApplicationModel.PermissionStatus\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\n----------------------------------------\n\nTITLE: Magnetometer APIs in MAUI C#\nDESCRIPTION: Static methods for accessing and controlling the device magnetometer, including starting and stopping monitoring, checking support status, and handling magnetometer reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Default.get -> Microsoft.Maui.Devices.Sensors.IMagnetometer!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: CountingWriter Implementation in C#\nDESCRIPTION: A specialized writer implementation that counts characters written, useful for measuring text output size without storing the actual content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.CountingWriter\nMicrosoft.Maui.Graphics.Text.CountingWriter.Count.get -> int\noverride Microsoft.Maui.Graphics.Text.CountingWriter.Write(char value) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding LayoutSubviews for TemplatedCell in C#\nDESCRIPTION: Overrides the LayoutSubviews method for TemplatedCell and TemplatedCell2 classes in the Microsoft.Maui.Controls.Handlers.Items namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items.TemplatedCell.LayoutSubviews() -> void\noverride Microsoft.Maui.Controls.Handlers.Items2.TemplatedCell2.LayoutSubviews() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ISms Interface in C#\nDESCRIPTION: Defines the ISms interface with methods for composing SMS messages and checking composition support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.ISms\nMicrosoft.Maui.ApplicationModel.Communication.ISms.ComposeAsync(Microsoft.Maui.ApplicationModel.Communication.SmsMessage? message) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.ApplicationModel.Communication.ISms.IsComposeSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: EmailMessage Bcc setter in MAUI\nDESCRIPTION: This property setter sets the list of BCC (Blind Carbon Copy) recipients for an email message.  It accepts a List of strings representing email addresses, or null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Bcc.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining MenuBarHandler Class in C#\nDESCRIPTION: This snippet defines the MenuBarHandler class, which includes methods for manipulating menu bar items and constructors for initialization with property mappers and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler\nMicrosoft.Maui.Handlers.MenuBarHandler.Add(Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Clear() -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Insert(int index, Microsoft.Maui.IMenuBarItem! view) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.MenuBarHandler() -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.MenuBarHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing SwipeView and Related Handlers for iOS\nDESCRIPTION: Method signatures for SwipeView, SwipeItemButton, and related handlers that implement swipe gestures and actions in iOS. These create and manage platform-specific views for swipe interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SwipeItemButton.Frame.get -> CoreGraphics.CGRect\noverride Microsoft.Maui.Handlers.SwipeItemButton.Frame.set -> void\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.ConnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> UIKit.UIButton!\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.SwipeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSwipeView!\noverride Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint Filter Bitmap - SkiaCanvasState\nDESCRIPTION: This method allows setting a filter bitmap for the fill paint of the SkiaCanvasState, enhancing how shapes are filled when drawn on the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvasState.SetFillPaintFilterBitmap(bool value) -> void\n```\n\n----------------------------------------\n\nTITLE: Add Run to Mutable Attributed Text\nDESCRIPTION: Adds an attributed text run to a mutable attributed text instance. Dependencies include IAttributedTextRun. The 'run' is the primary parameter. The method does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.MutableAttributedText.AddRun(Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Line Cap Types in MAUI\nDESCRIPTION: This snippet defines different types of line caps used in graphics, assigning values to butt, round, and square styles. This allows developers to specify how the end of a line segment should appear.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.LineCap.Butt = 0 -> Microsoft.Maui.Graphics.LineCap\nMicrosoft.Maui.Graphics.LineCap.Round = 1 -> Microsoft.Maui.Graphics.LineCap\nMicrosoft.Maui.Graphics.LineCap.Square = 2 -> Microsoft.Maui.Graphics.LineCap\n```\n\n----------------------------------------\n\nTITLE: Image and View Handlers in MAUI\nDESCRIPTION: Methods for handling image loading and view management including specialized handlers for different UI elements that support image sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Handlers.ImageButtonHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ImageHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.SourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\nvirtual Microsoft.Maui.Handlers.ViewHandler.NeedsContainer.get -> bool\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ConnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.DisconnectHandler(TPlatformView! platformView) -> void\nvirtual Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformCanvas Class in C#\nDESCRIPTION: This snippet defines the PlatformCanvas class in the Microsoft.Maui.Graphics.Platform namespace. It includes properties and methods for managing canvas size, bitmap pattern fills, and blur effects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.BitmapPatternFills.get -> bool\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.BitmapPatternFills.set -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.CanvasSize.get -> Windows.Foundation.Size\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.CanvasSize.set -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.PlatformCanvas() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformCanvas.SetBlur(float blurRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Type Converter Implementations\nDESCRIPTION: Override implementations for various type converters used in MAUI including Flex layout and thickness converters\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\noverride Microsoft.Maui.Converters.FlexAlignContentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\noverride Microsoft.Maui.Converters.ThicknessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Defining FontDescriptor Class in C#\nDESCRIPTION: Implements a FontDescriptor class with properties for Alias, Assembly, and Filename, and a constructor that takes these parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Hosting.FontDescriptor.Alias.get -> string?\nMicrosoft.Maui.Hosting.FontDescriptor.Assembly.get -> System.Reflection.Assembly?\nMicrosoft.Maui.Hosting.FontDescriptor.Filename.get -> string!\nMicrosoft.Maui.Hosting.FontDescriptor.FontDescriptor(string! filename, string? alias, System.Reflection.Assembly? assembly) -> void\n```\n\n----------------------------------------\n\nTITLE: Location Extension Methods\nDESCRIPTION: Extension methods for Location class providing distance calculation and map opening functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic LocationExtensions.CalculateDistance(this Location locationStart, double latitudeEnd, double longitudeEnd, DistanceUnits units) -> double\nstatic LocationExtensions.OpenMapsAsync(this Location location, MapLaunchOptions options) -> Task\nstatic LocationExtensions.OpenMapsAsync(this Location location) -> Task\n```\n\n----------------------------------------\n\nTITLE: Convert Color to SKColor\nDESCRIPTION: This static extension method converts a Maui Microsoft.Graphics.Color to a SkiaSharp SKColor with optional alpha adjustment, aiding color manipulation across libraries.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKColorExtensions.ToColor(this Microsoft.Maui.Graphics.Color target, float alpha = 1) -> SkiaSharp.SKColor\n```\n\n----------------------------------------\n\nTITLE: Embedding Extensions for MAUI Applications\nDESCRIPTION: Generic extension methods for configuring embedded MAUI applications, providing both parameterized and parameter-less variants for app initialization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Setting a Skia Canvas in the Context\nDESCRIPTION: This setter allows for updating the SKCanvas used within the SkiaCanvas, providing flexibility in managing the drawing surface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvas.Canvas.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Image Paint in Skia Canvas State\nDESCRIPTION: Generates a new SKPaint object configured for painting images with specified scaling factors, allowing images to be rendered in a customized manner across the SkiaCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.GetImagePaint(float sx, float sy) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: GetPlatformFileType Method in FilePickerFileType (C#)\nDESCRIPTION: This virtual method retrieves the platform-specific file type for a given device platform. It returns an enumerable collection of strings representing the file types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Clearing Menu Items in Menu Flyout Sub Item Handler in C#\nDESCRIPTION: This method clears all items within the menu flyout sub-item handler, effectively removing all menu elements from it.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Clear() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining FlexWrap Layout Enumeration\nDESCRIPTION: Enumeration defining the wrap behavior for flex layouts in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexWrap.Wrap = 1\n```\n\n----------------------------------------\n\nTITLE: Removing Overlay from a Window\nDESCRIPTION: Enables the removal of a specified overlay from the window, allowing for dynamic UI changes based on user actions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\n```\n\n----------------------------------------\n\nTITLE: TextAttribute Enum Constants in MAUI Graphics\nDESCRIPTION: Enumeration constants for Microsoft.Maui.Graphics.Text.TextAttribute, defining various text formatting attributes such as font properties, styling options, and text decorations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.TextAttribute.FontName = 0 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.FontSize = 1 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Bold = 2 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Italic = 3 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Underline = 4 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Strikethrough = 5 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Subscript = 6 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Superscript = 7 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Color = 8 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Background = 9 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.UnorderedList = 10 -> Microsoft.Maui.Graphics.Text.TextAttribute\nMicrosoft.Maui.Graphics.Text.TextAttribute.Marker = 11 -> Microsoft.Maui.Graphics.Text.TextAttribute\n```\n\n----------------------------------------\n\nTITLE: Creating Font Files from Strings in MAUI\nDESCRIPTION: Static method to create a FontFile object from a string input. This allows dynamic font creation from string representations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!\n```\n\n----------------------------------------\n\nTITLE: PlatformGraphicsView Override Methods in .NET MAUI\nDESCRIPTION: Override methods for the PlatformGraphicsView class that handle drawing operations and view properties. These methods integrate with the native platform's drawing system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.DrawRect(CoreGraphics.CGRect dirtyRect) -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.IsFlipped.get -> bool\noverride Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.ViewWillDraw() -> void\n```\n\n----------------------------------------\n\nTITLE: ViewExtensions Invalidate Measure in C#\nDESCRIPTION: Static method InvalidateMeasure in ViewExtensions forces a re-measure of a VisualElement, which can be essential after a layout change or when dynamic data affects UI element size.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.ViewExtensions.InvalidateMeasure(this Microsoft.Maui.Controls.VisualElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Convert NSAttributedString to IAttributedText in MAUI\nDESCRIPTION: This method converts an NSAttributedString to an IAttributedText type, making it usable within the MAUI graphics text system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.NSAttributedStringExtension.AsAttributedText(this Foundation.NSAttributedString target) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: ViewHandler Mapper Properties (C#)\nDESCRIPTION: Static properties in the ViewHandler class that provide access to the property and command mappers, which are used to map MAUI view properties and commands to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewCommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler.ViewMapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IView!, Microsoft.Maui.IViewHandler!>!\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.get -> System.Func<Microsoft.Maui.Handlers.ViewHandler<TVirtualView!, TPlatformView!>!, TPlatformView!>?\nstatic Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformViewFactory.set -> void\n```\n\n----------------------------------------\n\nTITLE: Clipping Path in PlatformCanvas in C#\nDESCRIPTION: This snippet overrides the ClipPath method in PlatformCanvas to apply a clipping path based on a given WindingMode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode = Microsoft.Maui.Graphics.WindingMode.NonZero) -> void\n```\n\n----------------------------------------\n\nTITLE: Compass Sensor Access in .NET MAUI\nDESCRIPTION: Static methods for monitoring device compass (magnetometer) data in .NET MAUI applications. These methods allow starting/stopping monitoring and handling heading changes and calibration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Default.get -> Microsoft.Maui.Devices.Sensors.ICompass!\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Compass.ShouldDisplayHeadingCalibration.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.ShouldDisplayHeadingCalibration.set -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator !=(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator ==(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.CompassExtensions.SetShouldDisplayHeadingCalibration(this Microsoft.Maui.Devices.Sensors.ICompass! compass, bool shouldDisplay) -> void\n```\n\n----------------------------------------\n\nTITLE: TextView Extensions for iOS Editor Control\nDESCRIPTION: Extension methods for UITextView to handle text input functionality like predictions, keyboard, placeholders and text alignment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateIsTextPredictionEnabled(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Platform.TextViewExtensions.UpdateKeyboard(this UIKit.UITextView! textView, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: Determining Empty View Frame in StructuredItemsViewController2 in .NET MAUI\nDESCRIPTION: This method determines the frame of the empty view within StructuredItemsViewController2<TItemsView>. The return type is CGRect, which is used to represent rectangle dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2<TItemsView>.DetermineEmptyViewFrame() -> CoreGraphics.CGRect\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IFlyoutViewHandler in MAUI\nDESCRIPTION: Defines properties for the `IFlyoutViewHandler` interface in MAUI to get the platform view and virtual view associated with the FlyoutView. PlatformView exposes the underlying native platform-specific view, while VirtualView represents the .NET MAUI FlyoutView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IFlyoutViewHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IFlyoutViewHandler.VirtualView.get -> Microsoft.Maui.IFlyoutView!\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Line Value\nDESCRIPTION: Accesses the textual content of a TextLine object, allowing further manipulation or inspection within graphics rendering tasks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.TextLine.Value.get -> string\n```\n\n----------------------------------------\n\nTITLE: Overriding ToolbarHandler Methods for Tizen Platform\nDESCRIPTION: These methods override ToolbarHandler functionality to create, connect, and disconnect MauiToolbar elements for the Tizen implementation of MAUI toolbars.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ToolbarHandler.ConnectHandler(Microsoft.Maui.Platform.MauiToolbar! platformView) -> void\noverride Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> Microsoft.Maui.Platform.MauiToolbar!\noverride Microsoft.Maui.Handlers.ToolbarHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiToolbar! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting InsetsF to String in .NET MAUI\nDESCRIPTION: This method converts an InsetsF instance to a parsable string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.InsetsF.ToParsableString() -> string\n```\n\n----------------------------------------\n\nTITLE: Overriding PointFTypeConverter Methods in .NET MAUI Graphics\nDESCRIPTION: These overrides for `PointFTypeConverter` in the Microsoft.Maui.Graphics library define how to convert from and to `PointF` types. The methods `CanConvertFrom`, `CanConvertTo`, `ConvertFrom`, and `ConvertTo` are overridden to provide custom conversion logic for `PointF` objects, which are fundamental in 2D graphics representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\"\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Overlay Visibility\nDESCRIPTION: Controls the visibility of the overlay, allowing it to be shown or hidden based on application logic.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.IsVisible.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.IsVisible.set -> void\n```\n\n----------------------------------------\n\nTITLE: Rect and RectF Static Methods and Operators in .NET MAUI\nDESCRIPTION: Static methods for Microsoft.Maui.Graphics.Rect and RectF including constructors, conversions, comparison operators, and geometric operations. Includes methods for creating rectangles, converting between types, and performing intersection and union operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.FromLTRB(double left, double top, double right, double bottom) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator CoreGraphics.CGRect(Microsoft.Maui.Graphics.Rect rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.Rect.implicit operator Microsoft.Maui.Graphics.RectF(Microsoft.Maui.Graphics.Rect rect) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.Rect.Zero -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.FromLTRB(float left, float top, float right, float bottom) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.implicit operator CoreGraphics.CGRect(Microsoft.Maui.Graphics.RectF rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Microsoft.Maui.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Font and FontSource Static Operations in C#\nDESCRIPTION: Static properties and operator overloads for Font and FontSource classes that enable font comparison and provide default font instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Font.Default.get -> Microsoft.Maui.Graphics.Font\nstatic Microsoft.Maui.Graphics.Font.DefaultBold.get -> Microsoft.Maui.Graphics.Font\nstatic Microsoft.Maui.Graphics.Font.operator !=(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool\nstatic Microsoft.Maui.Graphics.Font.operator ==(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool\nstatic Microsoft.Maui.Graphics.FontSource.operator !=(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool\nstatic Microsoft.Maui.Graphics.FontSource.operator ==(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Type Extension Implementation\nDESCRIPTION: Implementation of the Type markup extension for XAML. Provides functionality to resolve and provide Type values in XAML markup.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TypeExtension.ProvideValue(System.IServiceProvider serviceProvider) -> System.Type\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.get -> string\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.set -> void\n```\n\n----------------------------------------\n\nTITLE: Resetting Canvas Stroke in MAUI (C#)\nDESCRIPTION: This method resets the stroke properties of the given ICanvas instance. It allows users to revert any previously set stroke styles, preparing the canvas for new drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.CanvasExtensions.ResetStroke(this Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: EmailAttachment Constructor (FullPath, ContentType) in MAUI\nDESCRIPTION: This constructor initializes a new instance of the EmailAttachment class using a full file path and content type. The fullPath specifies the location of the file, and contentType defines the type of file.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailAttachment.EmailAttachment(string! fullPath, string! contentType) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving an SKImage from Skia Bitmap Export Context\nDESCRIPTION: This method retrieves the SKImage associated with a SkiaBitmapExportContext, allowing access to image data for rendering or saving operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.SKImage.get -> SkiaSharp.SKImage\n```\n\n----------------------------------------\n\nTITLE: Getting Platform View for Menu Flyout Handler in C#\nDESCRIPTION: This snippet defines a property that retrieves the platform-specific view object for the IMenuFlyoutHandler interface. It is essential for implementing the handler within platform-specific code.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.PlatformView.get -> object!\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Compiler directive that enables nullable reference type checking for the current file scope. This helps catch potential null reference exceptions at compile time rather than runtime.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Static Readonly DefaultFileProperty\nDESCRIPTION: This code defines a static readonly `BindableProperty` named `DefaultFileProperty` within the `HybridWebView` class.  This property is likely used to specify the default HTML file or content displayed in the hybrid web view when it is first loaded in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Removing Values from Preferences in MAUI (C#)\nDESCRIPTION: These methods remove a value from the Preferences storage based on the provided key. An optional shared name can be specified to target a specific preferences container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IEditorHandler in MAUI\nDESCRIPTION: Defines properties for the `IEditorHandler` interface in MAUI to get the platform view and virtual view associated with the Editor. The PlatformView exposes the underlying native view, while VirtualView represents the .NET MAUI Editor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IEditorHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IEditorHandler.VirtualView.get -> Microsoft.Maui.IEditor!\"\n```\n\n----------------------------------------\n\nTITLE: Blazor WebView URL Loading Strategy Enumeration\nDESCRIPTION: Enumeration defining different strategies for handling URL navigation in Blazor WebView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/WindowsForms/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic enum UrlLoadingStrategy {\n    OpenExternally = 0,\n    OpenInWebView = 1,\n    CancelLoad = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geolocation Accuracy Enum in C#\nDESCRIPTION: Enum definition for GeolocationAccuracy specifying the accuracy levels for geolocation services. Ranges from Lowest (1) to Best (5) with Default (0) as the baseline option.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Default = 0 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Lowest = 1 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Low = 2 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Medium = 3 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.High = 4 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\nMicrosoft.Maui.Devices.Sensors.GeolocationAccuracy.Best = 5 -> Microsoft.Maui.Devices.Sensors.GeolocationAccuracy\n```\n\n----------------------------------------\n\nTITLE: MAUI Layout Extensions\nDESCRIPTION: Extension methods for handling layout calculations and arrangements in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Layouts.LayoutExtensions.ComputeDesiredSize(this Microsoft.Maui.IView! view, double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Interfacing with Platform Compass in C#\nDESCRIPTION: Defines properties for the platform-specific compass interface, particularly focusing on if the heading calibration should be displayed. This snippet provides information on accessing and setting these properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IPlatformCompass.ShouldDisplayHeadingCalibration.get -> bool\nMicrosoft.Maui.Devices.Sensors.IPlatformCompass.ShouldDisplayHeadingCalibration.set -> void\n\n```\n\n----------------------------------------\n\nTITLE: Implementing BlazorWebView Class for WPF in C#\nDESCRIPTION: Defines the BlazorWebView class for WPF, including properties, methods, and event handlers for Blazor WebView functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Wpf/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.BlazorWebView() -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.BlazorWebViewInitialized.get -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs!>!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.BlazorWebViewInitialized.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.BlazorWebViewInitializing.get -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializingEventArgs!>!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.BlazorWebViewInitializing.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.DisposeAsync() -> System.Threading.Tasks.ValueTask\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.HostPage.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.HostPage.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.RootComponents.get -> Microsoft.AspNetCore.Components.WebView.Wpf.RootComponentsCollection!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.Services.get -> System.IServiceProvider!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.Services.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.StartPath.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.StartPath.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.UrlLoading.get -> System.EventHandler<Microsoft.AspNetCore.Components.WebView.UrlLoadingEventArgs!>!\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.UrlLoading.set -> void\nMicrosoft.AspNetCore.Components.WebView.Wpf.BlazorWebView.WebView.get -> Microsoft.Web.WebView2.Wpf.WebView2!\n```\n\n----------------------------------------\n\nTITLE: Flashlight Control in .NET MAUI\nDESCRIPTION: Static methods for controlling the device flashlight. The API provides capability checking via IsSupportedAsync() and control methods to turn the flashlight on or off asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Flashlight.Default.get -> Microsoft.Maui.Devices.IFlashlight!\nstatic Microsoft.Maui.Devices.Flashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Devices.Flashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Managing Menu Flyout Separator in .NET MAUI\nDESCRIPTION: This snippet outlines the IMenuFlyoutSeparatorHandler interface, detailing the platform and virtual view getters for separator components in flyouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSeparatorHandler.PlatformView.get -> object!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSeparatorHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutSeparator!\n```\n\n----------------------------------------\n\nTITLE: StyleableElement Properties\nDESCRIPTION: Properties for StyleableElement class which provides styling capabilities to MAUI UI elements, including access to style classes and style objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.Style.get -> Microsoft.Maui.Controls.Style?\nMicrosoft.Maui.Controls.StyleableElement.class.get -> System.Collections.Generic.IList<string!>!\n```\n\n----------------------------------------\n\nTITLE: Path Extension Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Extension methods for PathF objects to scale paths and convert paths to definition strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float scale) -> Microsoft.Maui.Graphics.PathF\nstatic Microsoft.Maui.Graphics.PathExtensions.AsScaledPath(this Microsoft.Maui.Graphics.PathF target, float xScale, float yScale) -> Microsoft.Maui.Graphics.PathF\nstatic Microsoft.Maui.Graphics.PathExtensions.ToDefinitionString(this Microsoft.Maui.Graphics.PathF path, float ppu = 1) -> string\n```\n\n----------------------------------------\n\nTITLE: Accessing OrientationSensor in MAUI (C#)\nDESCRIPTION: Static methods and properties for accessing the device's orientation sensor. Includes methods to check support, start/stop monitoring, and an event handler for orientation changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator !=(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator ==(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: MAUI TextBox Attached Property Methods\nDESCRIPTION: Static methods for managing attached properties on MAUI-specific TextBox controls. These methods handle delete button visibility, text alignment, and property invalidation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.MauiTextBox.GetIsDeleteButtonEnabled(Microsoft.UI.Xaml.DependencyObject! obj) -> bool\nstatic Microsoft.Maui.Platform.MauiTextBox.GetVerticalTextAlignment(Microsoft.UI.Xaml.DependencyObject! obj) -> Microsoft.UI.Xaml.VerticalAlignment\nstatic Microsoft.Maui.Platform.MauiTextBox.InvalidateAttachedProperties(Microsoft.UI.Xaml.DependencyObject! obj) -> void\nstatic Microsoft.Maui.Platform.MauiTextBox.SetIsDeleteButtonEnabled(Microsoft.UI.Xaml.DependencyObject! obj, bool value) -> void\nstatic Microsoft.Maui.Platform.MauiTextBox.SetVerticalTextAlignment(Microsoft.UI.Xaml.DependencyObject! obj, Microsoft.UI.Xaml.VerticalAlignment value) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageButtonHandler Constructors in C#\nDESCRIPTION: Constructor definitions for ImageButtonHandler class that handles platform-specific implementation of image buttons. Supports initialization with property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ImageButtonHandler.ImageButtonHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating PaintGradientStop in .NET MAUI\nDESCRIPTION: These constructors create instances of PaintGradientStop using specified parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(float offset, Microsoft.Maui.Graphics.Color color) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintGradientStop.PaintGradientStop(Microsoft.Maui.Graphics.PaintGradientStop source) -> void\n```\n\n----------------------------------------\n\nTITLE: Override Selected Property Getter (TemplatedCell)\nDESCRIPTION: This snippet overrides the getter of the Selected property in TemplatedCell2. This indicates customized logic for determining whether a templated cell is selected, likely impacting visual states or behaviors in a MAUI ItemsView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.TemplatedCell2.Selected.get -> bool\"\n```\n\n----------------------------------------\n\nTITLE: Browser Launch Options and Enums in C#\nDESCRIPTION: Definitions for browser launch options and related enumerations in the Microsoft.Maui.ApplicationModel namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.BrowserLaunchOptions() -> void\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.set -> void\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchMode\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.set -> void\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredControlColor.get -> Microsoft.Maui.Graphics.Color?\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredControlColor.set -> void\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredToolbarColor.get -> Microsoft.Maui.Graphics.Color?\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredToolbarColor.set -> void\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.TitleMode.get -> Microsoft.Maui.ApplicationModel.BrowserTitleMode\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.TitleMode.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for ScrollView Handler in .NET MAUI\nDESCRIPTION: Static methods for mapping ScrollView properties including content, scroll bar visibility, orientation, and scroll commands.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Copy of Skia Canvas State\nDESCRIPTION: Creates a duplicate of a SkiaCanvasState, useful for preserving state at specific points without altering the original, aiding in state management during complex graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasStateService.CreateCopy(Microsoft.Maui.Graphics.Skia.SkiaCanvasState prototype) -> Microsoft.Maui.Graphics.Skia.SkiaCanvasState\n```\n\n----------------------------------------\n\nTITLE: Defining LoadFromSource Method for ResourceDictionaryHelpers in C#\nDESCRIPTION: Declares a static method LoadFromSource for the ResourceDictionaryHelpers class. It takes parameters for resource dictionary, source URI, resource path, assembly, and XML line info to load resources from a source.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: Resetting Current Skia Canvas State\nDESCRIPTION: Resets the given SkiaCanvasState to its initial or default state, ensuring consistent operation and removing applied customizations or transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasStateService.Reset(Microsoft.Maui.Graphics.Skia.SkiaCanvasState currentState) -> void\n```\n\n----------------------------------------\n\nTITLE: Checking Phone Dialer Support in .NET MAUI\nDESCRIPTION: This snippet checks if the phone dialer feature is supported on the device by accessing the IsSupported property of the IPhoneDialer interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IPhoneDialer.IsSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Android Lifecycle Builder Extensions in MAUI C#\nDESCRIPTION: Extensions for configuring Android application lifecycle events in MAUI. Provides methods for handling various activity and application lifecycle events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.AndroidLifecycleBuilderExtensions.OnApplicationCreate(this Microsoft.Maui.LifecycleEvents.IAndroidLifecycleBuilder lifecycle, Microsoft.Maui.LifecycleEvents.AndroidLifecycle.OnApplicationCreate del)\n```\n\n----------------------------------------\n\nTITLE: Gradient Paint Implementation\nDESCRIPTION: Methods for creating and manipulating gradient paints, including color stop management and color blending operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.GradientPaint.AddOffset(float offset, Microsoft.Maui.Graphics.Color color) -> void\n~Microsoft.Maui.Graphics.GradientPaint.BlendStartAndEndColors() -> Microsoft.Maui.Graphics.Color\n~Microsoft.Maui.Graphics.GradientPaint.SetGradientStops(float[] offsets, Microsoft.Maui.Graphics.Color[] colors) -> void\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Run Comparer Instance\nDESCRIPTION: Accesses a singleton instance of the AttributedTextRunComparer class for comparing runs of attributed text. This is useful in text layout processes where attributes such as font style or color must be accounted for alongside the text content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Instance -> Microsoft.Maui.Graphics.Text.AttributedTextRunComparer\n```\n\n----------------------------------------\n\nTITLE: Defining MapElement Properties in C# for MAUI\nDESCRIPTION: Declares static readonly BindableProperty fields for the MapElement class, including StrokeColor and StrokeWidth properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Classes Method Definitions\nDESCRIPTION: Virtual method definitions for MAUI Animation classes including basic animation controls and ticker functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Animations.Animation.CreateReverse() -> Microsoft.Maui.Animations.Animation!\nvirtual Microsoft.Maui.Animations.Animation.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Animations.Animation.OnTick(double millisecondsSinceLastUpdate) -> void\nvirtual Microsoft.Maui.Animations.Animation.Reset() -> void\nvirtual Microsoft.Maui.Animations.Animation.Update(double percent) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Colors from Various Parameters in MAUI (C#)\nDESCRIPTION: This group of methods enables the creation of colors using various formats like ARGB, hex strings, and HSV models. These methods are crucial for defining colors in MAUI graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromArgb(string colorAsHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHex(string colorAsArgbHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHsla(double h, double s, double l, double a = 1) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHsla(float h, float s, float l, float a = 1) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHsv(float h, float s, float v) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHsv(int h, int s, int v) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHsva(float h, float s, float v, float a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromHsva(int h, int s, int v, int a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromInt(int argb) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgb(byte red, byte green, byte blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgb(double red, double green, double blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgb(float red, float green, float blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgb(int red, int green, int blue) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgba(byte red, byte green, byte blue, byte alpha) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgba(double r, double g, double b, double a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgba(float r, float g, float b, float a) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgba(int red, int green, int blue, int alpha) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromRgba(string colorAsHex) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.FromUint(uint argb) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.implicit operator Microsoft.Maui.Graphics.Color(System.Numerics.Vector4 color) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.Parse(string value) -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Color.TryParse(string value, out Microsoft.Maui.Graphics.Color color) -> bool\n```\n\n----------------------------------------\n\nTITLE: Constructing BorderHandler in MAUI\nDESCRIPTION: Defines constructors for the `BorderHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. The handlers facilitate the mapping of properties and commands from a MAUI Border control to its native platform representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.BorderHandler.BorderHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Text Font Color in Text Attributes in .NET MAUI\nDESCRIPTION: These properties allow getting and setting the text font color in an ITextAttributes instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.TextFontColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.TextFontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing String on Canvas with Formatting in .NET MAUI\nDESCRIPTION: This method draws a string on the canvas, allowing for width, height, and alignment to be specified.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.DrawString(string value, float x, float y, float width, float height, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Get Pattern Bitmap\nDESCRIPTION: This static extension method retrieves a pattern bitmap from a PatternPaint with optional scaling, usable within the SkiaSharp framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scale = 1) -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: Adding MAUI Maps Extensions\nDESCRIPTION: Extension methods for configuring MAUI maps in the application builder pipeline.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiMaps(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiMaps(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\n```\n\n----------------------------------------\n\nTITLE: Defining VisualTreeChangeEventArgs class in C#\nDESCRIPTION: Declares a class for visual tree change event arguments, including properties for change type, child, child index, and parent.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.VisualTreeChangeEventArgs\nMicrosoft.Maui.VisualTreeChangeEventArgs.ChangeType.get -> Microsoft.Maui.VisualTreeChangeType\nMicrosoft.Maui.VisualTreeChangeEventArgs.Child.get -> object!\nMicrosoft.Maui.VisualTreeChangeEventArgs.ChildIndex.get -> int\nMicrosoft.Maui.VisualTreeChangeEventArgs.Parent.get -> object?\nMicrosoft.Maui.VisualTreeChangeEventArgs.VisualTreeChangeEventArgs(object? parent, object! child, int childIndex, Microsoft.Maui.VisualTreeChangeType changeType) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Mapper and CommandMapper for PickerHandler in C#\nDESCRIPTION: These static properties define a Mapper and CommandMapper for the PickerHandler, which map properties and commands for IPicker to IPickerHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Rectangle Comparison Operators in .NET MAUI Graphics\nDESCRIPTION: Defines equality and inequality comparison operators for Rect and RectF structures to enable direct comparison of rectangular regions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Rect.operator !=(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\nstatic Microsoft.Maui.Graphics.Rect.operator ==(Microsoft.Maui.Graphics.Rect r1, Microsoft.Maui.Graphics.Rect r2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Device Information Access in MAUI\nDESCRIPTION: Static properties and methods for accessing device information like platform type, manufacturer, model and version details.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DeviceInfo.Current.get -> Microsoft.Maui.Devices.IDeviceInfo!\nstatic Microsoft.Maui.Devices.DeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\nstatic Microsoft.Maui.Devices.DeviceInfo.Manufacturer.get -> string!\nstatic Microsoft.Maui.Devices.DeviceInfo.Model.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining StreamImageSourceService class in C#\nDESCRIPTION: Declares constructors for the StreamImageSourceService class, which is likely used for handling stream-based image sources in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.StreamImageSourceService.StreamImageSourceService() -> void\nMicrosoft.Maui.StreamImageSourceService.StreamImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.StreamImageSourceService!>? logger = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining StyleableElement.Style Property in C#\nDESCRIPTION: Declares a nullable Style property getter for the StyleableElement class in Microsoft.Maui.Controls namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.Style.get -> Microsoft.Maui.Controls.Style?\n```\n\n----------------------------------------\n\nTITLE: Barometer Sensor Access in .NET MAUI\nDESCRIPTION: Static methods for monitoring device barometer (air pressure) data in .NET MAUI applications. These methods allow starting/stopping monitoring and handling barometric pressure changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Default.get -> Microsoft.Maui.Devices.Sensors.IBarometer!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator !=(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator ==(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Overriding SwipeItem and SwipeView Handler Methods for Tizen Platform\nDESCRIPTION: These methods override the handlers for SwipeItemMenuItem, SwipeItemView, and SwipeView to create and manage platform-specific implementations for the Tizen platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> Tizen.UIExtensions.NUI.Button!\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentViewGroup!\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.Dispose(bool disposing) -> void\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.SwipeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSwipeView!\noverride Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Skia Text Layout Constructor\nDESCRIPTION: Constructor for creating a text layout with advanced configuration options including text attributes, flow control, and optional font specification\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaTextLayout.SkiaTextLayout(string value, Microsoft.Maui.Graphics.RectF rect, Microsoft.Maui.Graphics.ITextAttributes textAttributes, Microsoft.Maui.Graphics.LayoutLine callback, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, SkiaSharp.SKFont font = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Element Handler Extension Methods\nDESCRIPTION: Extension methods for IElementHandler interface providing service provider access and connection state checking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ElementHandlerExtensions.GetServiceProvider(this Microsoft.Maui.IElementHandler! handler) -> System.IServiceProvider!\nstatic Microsoft.Maui.ElementHandlerExtensions.IsConnected(this Microsoft.Maui.IElementHandler! handler) -> bool\n```\n\n----------------------------------------\n\nTITLE: Platform Extension Methods in C#\nDESCRIPTION: Definitions of various platform-specific extension methods for MAUI UI elements and components.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.StrokeExtensions\nMicrosoft.Maui.Platform.SwipeViewExtensions\nMicrosoft.Maui.Platform.TimeExtensions\nMicrosoft.Maui.Platform.ViewExtensions\nMicrosoft.Maui.Platform.WindowExtensions\n```\n\n----------------------------------------\n\nTITLE: StepperHandler Property Mapping Methods in .NET MAUI\nDESCRIPTION: Static methods in the StepperHandler class that map IStepper properties to platform-specific implementations. These methods handle properties like minimum/maximum values, increment step size, and current value of the stepper control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\nstatic Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMaximum(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMinimum(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\nstatic Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.Handlers.IStepperHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Menu-related Handler Methods for Windows UI in C#\nDESCRIPTION: These methods override various menu-related handlers to create and manage menu elements in Windows UI. They handle creating platform elements, connecting/disconnecting handlers, and setting up virtual views for menu bars, items, and flyouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.MenuBarHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuBar!\noverride Microsoft.Maui.Handlers.MenuBarHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\noverride Microsoft.Maui.Handlers.MenuBarItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuBarItem!\noverride Microsoft.Maui.Handlers.MenuBarItemHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyout!\noverride Microsoft.Maui.Handlers.MenuFlyoutHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyout! platformView) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutItemHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutItem! PlatformView) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyoutItem!\noverride Microsoft.Maui.Handlers.MenuFlyoutItemHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutItem! PlatformView) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyoutSeparator!\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.ConnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem! PlatformView) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CreatePlatformElement() -> Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem!\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.DisconnectHandler(Microsoft.UI.Xaml.Controls.MenuFlyoutSubItem! PlatformView) -> void\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ShareFile Class in C#\nDESCRIPTION: Defines the ShareFile class with constructors for creating shareable file objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath, string! contentType) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Controls Color Brush Definitions\nDESCRIPTION: Static property definitions for various grey-tone SolidColorBrush instances used in MAUI Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Brush.DarkGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\nstatic Microsoft.Maui.Controls.Brush.Grey.get -> Microsoft.Maui.Controls.SolidColorBrush\nstatic Microsoft.Maui.Controls.Brush.LightGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n```\n\n----------------------------------------\n\nTITLE: Mapping Editor Properties in C#\nDESCRIPTION: Static methods for mapping Editor properties in MAUI. Includes methods for mapping various text properties, keyboard settings, and defining property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.EditorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapBackground(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapCursorPosition(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.ITextInput! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapFont(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsReadOnly(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapKeyboard(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapMaxLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IEditor!, Microsoft.Maui.Handlers.IEditorHandler!>!\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholder(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapSelectionLength(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.ITextInput! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapText(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapTextColor(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\nstatic Microsoft.Maui.Handlers.EditorHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.IEditorHandler! handler, Microsoft.Maui.IEditor! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: AppAction Title getter in MAUI\nDESCRIPTION: This property getter retrieves the title of the AppAction. The title is the primary label displayed for the action. This is a read/write property. The title is a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.Title.get -> string!\"\n```\n\n----------------------------------------\n\nTITLE: Handling Back Button Click in Window\nDESCRIPTION: Processes the back button click event in the window, providing a way to manage navigation within the application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.BackButtonClicked() -> bool\n```\n\n----------------------------------------\n\nTITLE: Mapping to SKPoint from PointF\nDESCRIPTION: This static extension method maps a Microsoft.Maui.Graphics.PointF to a SkiaSharp.SKPoint, facilitating interoperability between the two graphics libraries.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToSKPoint(this Microsoft.Maui.Graphics.PointF target) -> SkiaSharp.SKPoint\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types with Directive\nDESCRIPTION: A C# compiler directive that enables nullable reference type checking for the entire source file. This helps catch potential null reference exceptions at compile time rather than runtime.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: MAUI Embedded App Extension Methods\nDESCRIPTION: Generic extension methods for configuring embedded MAUI applications through MauiAppBuilder.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Checking Capability Declaration in MAUI\nDESCRIPTION: This static method checks if a specific capability is declared in the application's manifest. It accepts the capability name as a string and returns a boolean value indicating whether it's declared. It's important for determining if the application has the necessary permissions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.ApplicationModel.Permissions.IsCapabilityDeclared(string capabilityName) -> bool\"\n```\n\n----------------------------------------\n\nTITLE: Managing Menu Bar Item in .NET MAUI\nDESCRIPTION: This snippet outlines the IMenuBarItemHandler interface responsible for managing individual menu items, including methods to add, remove, and clear menu element entries.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarItemHandler.Add(Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarItemHandler.Clear() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarItemHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarItemHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuBarItemHandler.VirtualView.get -> Microsoft.Maui.IMenuBarItem!\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString Method for Color Class in C#\nDESCRIPTION: This snippet overrides the ToString method in the Color class to return the string representation of the color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Color.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMode Enum in MAUI\nDESCRIPTION: Enum defining different navigation modes available in MAUI applications including Default, Driving, Transit, and Walking modes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Default = 1\nMicrosoft.Maui.ApplicationModel.NavigationMode.Driving = 3\nMicrosoft.Maui.ApplicationModel.NavigationMode.None = 0\nMicrosoft.Maui.ApplicationModel.NavigationMode.Transit = 4\nMicrosoft.Maui.ApplicationModel.NavigationMode.Walking = 5\n```\n\n----------------------------------------\n\nTITLE: MAUI Core Service Definitions\nDESCRIPTION: Core service interfaces and abstract classes for MAUI applications including image handling and layout management functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.ImageSourceService.GetImageAsync(Microsoft.Maui.IImageSource! imageSource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.Maui.Platform.MauiImageSource!>?>!\n```\n\n----------------------------------------\n\nTITLE: TitleBar Properties and Method in C#\nDESCRIPTION: Documenting multiple properties and the constructor for a TitleBar element, including content visibility, color, icon, and layout aspects. The OnApplyTemplate method helps in applying the template of the TitleBar.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Content.get -> Microsoft.Maui.IView?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Content.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.get -> Microsoft.Maui.Graphics.Color!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Icon.get -> Microsoft.Maui.Controls.ImageSource!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Icon.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.LeadingContent.get -> Microsoft.Maui.IView?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.LeadingContent.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.PassthroughElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IView!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Subtitle.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Subtitle.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Title.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Title.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.TitleBar() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.TrailingContent.get -> Microsoft.Maui.IView?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.TrailingContent.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.TitleBar.OnApplyTemplate() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Paint Gradient Stop Properties in MAUI\nDESCRIPTION: This snippet includes getters and setters for the Offset property of PaintGradientStop, allowing developers to define the position of gradient stops in paint gradients.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PaintGradientStop.Offset.get -> float\nMicrosoft.Maui.Graphics.PaintGradientStop.Offset.set -> void\n```\n\n----------------------------------------\n\nTITLE: Preferences Management in MAUI (C#)\nDESCRIPTION: Provides static methods for managing application preferences, including setting, getting, and removing key-value pairs with optional shared name support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\nstatic Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue, string? sharedName) -> double\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue) -> double\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue, string? sharedName) -> float\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, float defaultValue) -> float\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue, string? sharedName) -> int\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, int defaultValue) -> int\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue, string? sharedName) -> long\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, long defaultValue) -> long\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue, string? sharedName) -> string?\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, string? defaultValue) -> string?\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue, string? sharedName) -> System.DateTime\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTime defaultValue) -> System.DateTime\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Remove(string! key) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, bool value) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, double value, string? sharedName) -> void\n```\n\n----------------------------------------\n\nTITLE: PortHandlerAttribute Definition in C#\nDESCRIPTION: PortHandlerAttribute is used to mark handlers that are ported from another framework. It provides descriptive information about the porting process or implementation details.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PortHandlerAttribute\nMicrosoft.Maui.PortHandlerAttribute.Description.get -> string?\nMicrosoft.Maui.PortHandlerAttribute.Description.set -> void\nMicrosoft.Maui.PortHandlerAttribute.PortHandlerAttribute() -> void\nMicrosoft.Maui.PortHandlerAttribute.PortHandlerAttribute(string! description) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Dimension Constants\nDESCRIPTION: Defines constant values for dimension properties including maximum, minimum and unset values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Primitives.Dimension.Maximum = Infinity;\nconst Microsoft.Maui.Primitives.Dimension.Minimum = 0;\nconst Microsoft.Maui.Primitives.Dimension.Unset = NaN;\n```\n\n----------------------------------------\n\nTITLE: Resetting SkiaCanvasState in MAUI\nDESCRIPTION: This method resets the SkiaCanvasState with provided SKPaint and SKFont instances. It is essential for restoring the state of the graphics context before new drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Date and Culture Utilities for iOS in .NET MAUI\nDESCRIPTION: Extensions for handling date conversions between .NET DateTime and NSDate formats, and accessing the current culture. These methods facilitate working with dates and culture-specific information in iOS applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.Culture.CurrentCulture.get -> System.Globalization.CultureInfo!\nstatic Microsoft.Maui.Platform.DateExtensions.ToDateTime(this Foundation.NSDate! date) -> System.DateTime\nstatic Microsoft.Maui.Platform.DateExtensions.ToNSDate(this System.DateTime date) -> Foundation.NSDate!\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Microsoft.Maui.Platform.MauiDatePicker! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker, UIKit.UIDatePicker? picker) -> void\n```\n\n----------------------------------------\n\nTITLE: Orientation Sensor Data and Events in C#\nDESCRIPTION: Demonstrates how to manage orientation sensor readings and data in Microsoft Maui. It provides constructors for creating sensor data objects with quaternions and handling events associated with changes in orientation data.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs.OrientationSensorChangedEventArgs(Microsoft.Maui.Devices.Sensors.OrientationSensorData reading) -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.OrientationSensorData\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Equals(Microsoft.Maui.Devices.Sensors.OrientationSensorData other) -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Orientation.get -> System.Numerics.Quaternion\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData() -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(double x, double y, double z, double w) -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(float x, float y, float z, float w) -> void\n\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Class Definition in C#\nDESCRIPTION: Defines the HybridWebView class which extends web view functionality with JavaScript integration capabilities. It includes methods for evaluating JavaScript, handling messages between JavaScript and .NET, and configuring hybrid web content roots.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.DefaultFile.set -> void\nMicrosoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.get -> string?\nMicrosoft.Maui.Controls.HybridWebView.HybridRoot.set -> void\nMicrosoft.Maui.Controls.HybridWebView.HybridWebView() -> void\nMicrosoft.Maui.Controls.HybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\nMicrosoft.Maui.Controls.HybridWebView.RawMessageReceived -> System.EventHandler<Microsoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs!>?\nMicrosoft.Maui.Controls.HybridWebView.SendRawMessage(string! rawMessage) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining GridLength Class in C# for MAUI\nDESCRIPTION: This snippet defines the GridLength class in the Microsoft.Maui namespace. It includes constructors, property getters, and related enums for grid layout functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.GridLength\nMicrosoft.Maui.GridLength.GridLength() -> void\nMicrosoft.Maui.GridLength.GridLength(double value, Microsoft.Maui.GridUnitType type) -> void\nMicrosoft.Maui.GridLength.GridLength(double value) -> void\nMicrosoft.Maui.GridLength.GridUnitType.get -> Microsoft.Maui.GridUnitType\nMicrosoft.Maui.GridLength.IsAbsolute.get -> bool\nMicrosoft.Maui.GridLength.IsAuto.get -> bool\nMicrosoft.Maui.GridLength.IsStar.get -> bool\nMicrosoft.Maui.GridLength.Value.get -> double\nMicrosoft.Maui.GridUnitType\nMicrosoft.Maui.GridUnitType.Absolute = 0 -> Microsoft.Maui.GridUnitType\nMicrosoft.Maui.GridUnitType.Auto = 2 -> Microsoft.Maui.GridUnitType\nMicrosoft.Maui.GridUnitType.Star = 1 -> Microsoft.Maui.GridUnitType\n```\n\n----------------------------------------\n\nTITLE: Defining ImageSourceService Class in C#\nDESCRIPTION: Defines the ImageSourceService class with a constructor and a Logger property. This class is likely responsible for handling image source operations in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ImageSourceService\nMicrosoft.Maui.ImageSourceService.ImageSourceService(Microsoft.Extensions.Logging.ILogger? logger = null) -> void\nMicrosoft.Maui.ImageSourceService.Logger.get -> Microsoft.Extensions.Logging.ILogger?\n```\n\n----------------------------------------\n\nTITLE: FlyoutViewHandler Mappers in MAUI Framework\nDESCRIPTION: Static properties that define property and command mappers for FlyoutViewHandler, which handles the platform-specific implementation of flyout views in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Fetching Attributed Text\nDESCRIPTION: Retrieves a string of text from an IAttributedText object. No parameters are needed. The output is a string representing the text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.IAttributedText.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: Launcher Functionality in .NET MAUI\nDESCRIPTION: Static methods to launch external applications and URIs. These methods provide ways to check if a URI can be opened and to open files and URIs with the appropriate application on the device.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.Default.get -> Microsoft.Maui.ApplicationModel.ILauncher!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(Microsoft.Maui.ApplicationModel.OpenFileRequest! request) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Launcher.TryOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Mapping SwipeItemView Properties in C#\nDESCRIPTION: Static methods for mapping properties of SwipeItemView in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! page) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemView!, Microsoft.Maui.Handlers.ISwipeItemViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemViewHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemViewHandler! handler, Microsoft.Maui.ISwipeItemView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for .NET MAUI\nDESCRIPTION: This directive enables nullable reference type annotations in C#, which helps detect potential null reference exceptions at compile time rather than runtime.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Defining AppleSignInAuthenticator in C#\nDESCRIPTION: Defines the AppleSignInAuthenticator class and its nested Options class for Apple Sign-In authentication.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.get -> bool\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeEmailScope.set -> void\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.get -> bool\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.IncludeFullNameScope.set -> void\nMicrosoft.Maui.Authentication.AppleSignInAuthenticator.Options.Options() -> void\n```\n\n----------------------------------------\n\nTITLE: Managing a Lockable Observable List in Microsoft MAUI\nDESCRIPTION: This snippet demonstrates how to manage a lockable observable list wrapper in Microsoft MAUI, including methods to add, remove and check the presence of items. The implementation highlights the thread-safe nature of the list operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.LockableObservableListWrapper.Add(string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Clear() -> void\nMicrosoft.Maui.LockableObservableListWrapper.Contains(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.CopyTo(string![]! array, int arrayIndex) -> void\nMicrosoft.Maui.LockableObservableListWrapper.Count.get -> int\nMicrosoft.Maui.LockableObservableListWrapper.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!\nMicrosoft.Maui.LockableObservableListWrapper.IndexOf(string! item) -> int\nMicrosoft.Maui.LockableObservableListWrapper.Insert(int index, string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.InternalAdd(string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.InternalClear() -> void\nMicrosoft.Maui.LockableObservableListWrapper.InternalInsert(int index, string! item) -> void\nMicrosoft.Maui.LockableObservableListWrapper.InternalRemove(string! item) -> bool\nMicrosoft.Maui.LockableObservableListWrapper.InternalRemoveAt(int index) -> void\nMicrosoft.Maui.LockableObservableListWrapper.IsLocked.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Font in SkiaCanvasState in C#\nDESCRIPTION: These properties and methods allow getting and setting font-related states within the SkiaCanvasState class, which are essential for drawing and text processing tasks using SkiaSharp in a .NET MAUI environment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Color Class Constructors in C#\nDESCRIPTION: Constructor overloads for the Color class supporting different color space representations including RGB, RGBA, and grayscale\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.Color() -> void\nMicrosoft.Maui.Graphics.Color.Color(byte red, byte green, byte blue, byte alpha) -> void\nMicrosoft.Maui.Graphics.Color.Color(float red, float green, float blue) -> void\nMicrosoft.Maui.Graphics.Color.Color(float gray) -> void\n```\n\n----------------------------------------\n\nTITLE: Rect Structure Implementation in C#\nDESCRIPTION: Defines the Rect structure in Microsoft.Maui.Graphics for representing rectangular areas. Includes methods for rectangle manipulation, intersection testing, inflation/deflation, and accessing coordinate properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Bottom.get -> double\nMicrosoft.Maui.Graphics.Rect.Bottom.set -> void\nMicrosoft.Maui.Graphics.Rect.Center.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Rect.Contains(double x, double y) -> bool\nMicrosoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Point pt) -> bool\nMicrosoft.Maui.Graphics.Rect.Contains(Microsoft.Maui.Graphics.Rect rect) -> bool\nMicrosoft.Maui.Graphics.Rect.Deconstruct(out double x, out double y, out double width, out double height) -> void\nMicrosoft.Maui.Graphics.Rect.Equals(Microsoft.Maui.Graphics.Rect other) -> bool\nMicrosoft.Maui.Graphics.Rect.Height.get -> double\nMicrosoft.Maui.Graphics.Rect.Height.set -> void\nMicrosoft.Maui.Graphics.Rect.Inflate(double width, double height) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Inflate(Microsoft.Maui.Graphics.Size sz) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Intersect(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.IntersectsWith(Microsoft.Maui.Graphics.Rect r) -> bool\nMicrosoft.Maui.Graphics.Rect.IsEmpty.get -> bool\nMicrosoft.Maui.Graphics.Rect.Left.get -> double\nMicrosoft.Maui.Graphics.Rect.Left.set -> void\nMicrosoft.Maui.Graphics.Rect.Location.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Rect.Location.set -> void\nMicrosoft.Maui.Graphics.Rect.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Offset(Microsoft.Maui.Graphics.Point dr) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Rect() -> void\nMicrosoft.Maui.Graphics.Rect.Rect(double x, double y, double width, double height) -> void\nMicrosoft.Maui.Graphics.Rect.Rect(Microsoft.Maui.Graphics.Point loc, Microsoft.Maui.Graphics.Size sz) -> void\nMicrosoft.Maui.Graphics.Rect.Right.get -> double\nMicrosoft.Maui.Graphics.Rect.Right.set -> void\nMicrosoft.Maui.Graphics.Rect.Round() -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Size.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.Graphics.Rect.Size.set -> void\nMicrosoft.Maui.Graphics.Rect.Top.get -> double\nMicrosoft.Maui.Graphics.Rect.Top.set -> void\nMicrosoft.Maui.Graphics.Rect.Union(Microsoft.Maui.Graphics.Rect r) -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.Graphics.Rect.Width.get -> double\nMicrosoft.Maui.Graphics.Rect.Width.set -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing FlyoutViewHandler in MAUI\nDESCRIPTION: Defines constructors for the `FlyoutViewHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper.  The handler is responsible for handling platform-specific implementations of the FlyoutView control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals Method for InsetsF Class in C#\nDESCRIPTION: This snippet provides an override for the Equals method in the InsetsF class for comparing inset float instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.InsetsF.Equals(object obj) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining ShareTextRequest Class in C#\nDESCRIPTION: Defines the ShareTextRequest class with properties and constructors for creating text sharing requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest() -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text, string! title) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.ShareTextRequest(string! text) -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.get -> string?\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Subject.set -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.get -> string?\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Text.set -> void\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.get -> string?\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest.Uri.set -> void\n```\n\n----------------------------------------\n\nTITLE: Instantiating Type Converters - Microsoft MAUI - CSharp\nDESCRIPTION: This set of constructors initializes various type converters for use within the Microsoft MAUI framework. These converters, such as for corner radius and flex alignment, aid in the conversion of specific types for UI components. Dependencies include references to the Microsoft.Maui.Converters namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.CornerRadiusTypeConverter.CornerRadiusTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.EasingTypeConverter.EasingTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexAlignContentTypeConverter.FlexAlignContentTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexAlignItemsTypeConverter.FlexAlignItemsTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexAlignSelfTypeConverter.FlexAlignSelfTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexBasisTypeConverter.FlexBasisTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexDirectionTypeConverter.FlexDirectionTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexJustifyTypeConverter.FlexJustifyTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.FlexWrapTypeConverter.FlexWrapTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.KeyboardTypeConverter.KeyboardTypeConverter() -> void\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nMicrosoft.Maui.Converters.ThicknessTypeConverter.ThicknessTypeConverter() -> void\n```\n\n----------------------------------------\n\nTITLE: Creating SkiaBitmapExportContext\nDESCRIPTION: This constructor initializes a SkiaBitmapExportContext with parameters like width, height, display scale, and DPI. It sets up the context for exporting graphics as a bitmap.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaBitmapExportContext.SkiaBitmapExportContext(int width, int height, float displayScale, int dpi = 72, bool disposeBitmap = true, bool transparent = true) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating New MAUI App with Local Packs\nDESCRIPTION: Creates and builds a new MAUI application using locally packed changes\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool restore\ndotnet cake --pack\nmkdir MyMauiApp\ncd MyMauiApp\n..\\bin\\dotnet\\dotnet new maui\n..\\bin\\dotnet\\dotnet build -t:Run -f net[current_sdk_version]-android\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators for Size Manipulation in .NET MAUI Graphics\nDESCRIPTION: Defines arithmetic operators for performing mathematical operations on Size and SizeF structures, supporting addition, subtraction, multiplication, and division\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Size.operator +(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator -(Microsoft.Maui.Graphics.Size s1, Microsoft.Maui.Graphics.Size s2) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Size.operator *(Microsoft.Maui.Graphics.Size s1, double value) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Implementation\nDESCRIPTION: Implementation of HybridWebView class with methods for JavaScript evaluation and message handling between native and web content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Controls.HybridWebView.InvokeJavaScriptAsync<TReturnType>(string! methodName, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TReturnType>! returnTypeJsonTypeInfo, object?[]? paramValues = null, System.Text.Json.Serialization.Metadata.JsonTypeInfo?[]? paramJsonTypeInfos = null) -> System.Threading.Tasks.Task<TReturnType?>!\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets with MauiAsset in .csproj\nDESCRIPTION: This snippet shows how to configure the `.csproj` file to include raw assets for deployment with the application. The `MauiAsset` Include specifies the location of the raw assets and defines a `LogicalName` for accessing them. The `LogicalName` specifies that the assets should be accessible by their relative path within the `Resources\\Raw` directory.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-blazor/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: GeolocationExtensions in MAUI C#\nDESCRIPTION: Extension methods for the IGeolocation interface to provide simplified access to location services with default parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation, Microsoft.Maui.Devices.Sensors.GeolocationRequest! request) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\nstatic Microsoft.Maui.Devices.Sensors.GeolocationExtensions.GetLocationAsync(this Microsoft.Maui.Devices.Sensors.IGeolocation! geolocation) -> System.Threading.Tasks.Task<Microsoft.Maui.Devices.Sensors.Location?>!\n```\n\n----------------------------------------\n\nTITLE: Locale Properties and Accessors\nDESCRIPTION: This section defines accessor methods for properties of the Locale class, which include obtaining country code, locale ID, language, and name. These properties help in configuring locale-specific settings for applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Country.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Id.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Language.get -> string!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Name.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar State Constants in C#\nDESCRIPTION: These constants define the different states of elements within the TitleBar control, such as visibility and collapse states for the leading content, subtitle, title, and trailing content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.LeadingHiddenState = \\\"LeadingContentCollapsed\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.LeadingVisibleState = \\\"LeadingContentVisible\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.SubtitleHiddenState = \\\"SubtitleCollapsed\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.SubtitleVisibleState = \\\"SubtitleVisible\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TemplateRootName = \\\"PART_Root\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarActiveState = \\\"TitleBarTitleActive\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarContent = \\\"PART_Content\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarIcon = \\\"PART_Icon\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarInactiveState = \\\"TitleBarTitleInactive\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarLeading = \\\"PART_LeadingContent\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarSubtitle = \\\"PART_Subtitle\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarTitle = \\\"PART_Title\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleBarTrailing = \\\"PART_TrailingContent\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleHiddenState = \\\"TitleCollapsed\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TitleVisibleState = \\\"TitleVisible\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TrailingHiddenState = \\\"TrailingContentCollapsed\\\" -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"const Microsoft.Maui.Controls.TitleBar.TrailingVisibleState = \\\"TrailingContentVisible\\\" -> string!\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Encoding Property for CountingWriter\nDESCRIPTION: This overrides the `Encoding` property of the `CountingWriter` class in Microsoft.Maui.Graphics.Text. It provides access to the encoding used by the counting writer.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Text.CountingWriter.Encoding.get -> System.Text.Encoding\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Location Listening - C# .NET MAUI\nDESCRIPTION: Stops listening for location updates. This is a void method and does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGeolocation.StopListeningForeground() -> void\n```\n\n----------------------------------------\n\nTITLE: iOS Application and Window Management Extensions in .NET MAUI\nDESCRIPTION: Extension methods for managing iOS application windows and UI state. These methods provide the bridge between MAUI application abstractions and the native iOS window and scene system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_170\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, UIKit.UIApplication! uiApplication, Foundation.NSDictionary! launchOptions) -> void\nstatic Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this UIKit.IUIWindowSceneDelegate! sceneDelegate, Microsoft.Maui.IApplication! application, UIKit.UIScene! scene, UIKit.UISceneSession! session, UIKit.UISceneConnectionOptions! connectionOptions) -> void\nstatic Microsoft.Maui.Platform.ApplicationExtensions.RequestNewWindow(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.Handlers.OpenWindowRequest? args) -> void\nstatic Microsoft.Maui.Platform.ApplicationExtensions.ToUserActivity(this Microsoft.Maui.IPersistedState? state, string! userActivityType) -> Foundation.NSUserActivity!\nstatic Microsoft.Maui.Platform.ApplicationExtensions.UpdateUserInterfaceStyle(this Microsoft.Maui.IApplication! application) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing SkiaCanvas - SkiaSharp - C#\nDESCRIPTION: Constructor for the SkiaCanvas class. This initializes a new instance of the canvas, which will be used for drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvas.SkiaCanvas() -> void\n```\n\n----------------------------------------\n\nTITLE: Font Weight Constants in Microsoft.Maui.Graphics\nDESCRIPTION: Constant integer values representing different font weights in the Microsoft.Maui.Graphics.FontWeights class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Default = -1 -> int\nconst Microsoft.Maui.Graphics.FontWeights.DemiBold = 600 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraBlack = 950 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraBold = 800 -> int\nconst Microsoft.Maui.Graphics.FontWeights.ExtraLight = 200 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Heavy = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Light = 300 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Medium = 500 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Normal = 400 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Regular = 400 -> int\nconst Microsoft.Maui.Graphics.FontWeights.SemiBold = 600 -> int\nconst Microsoft.Maui.Graphics.FontWeights.SemiLight = 400 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Thin = 100 -> int\nconst Microsoft.Maui.Graphics.FontWeights.UltraBlack = 950 -> int\nconst Microsoft.Maui.Graphics.FontWeights.UltraBold = 800 -> int\nconst Microsoft.Maui.Graphics.FontWeights.UltraLight = 200 -> int\n```\n\n----------------------------------------\n\nTITLE: Getting Attributed Text Run Attributes\nDESCRIPTION: This method fetches the ITextAttributes from an AttributedTextRun. No dependencies or parameters are required. It returns the attributes associated with the specified run.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextRun.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes\n```\n\n----------------------------------------\n\nTITLE: Counting Writer for TextWriter\nDESCRIPTION: Initializes a CountingWriter which wraps around a TextWriter object to keep track of the written character count. Parameters include 'writer'. It operates without a return value and depends on System.IO.TextWriter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.CountingWriter.CountingWriter(System.IO.TextWriter writer) -> void\n```\n\n----------------------------------------\n\nTITLE: Measure VisualElement in C#\nDESCRIPTION: This snippet shows the method signature for measuring a VisualElement.  It takes width and height constraints as doubles and returns a Microsoft.Maui.Graphics.Size object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.VisualElement.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\"\n```\n\n----------------------------------------\n\nTITLE: Defining IMenuFlyoutHandler Interface in C#\nDESCRIPTION: This snippet defines the IMenuFlyoutHandler interface, which includes properties for accessing the platform view and virtual view, and a method for removing menu elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.PlatformView.get -> object!\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.Remove(Microsoft.Maui.IMenuElement! view) -> void\nMicrosoft.Maui.Handlers.IMenuFlyoutHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyout!\n```\n\n----------------------------------------\n\nTITLE: Window State Management via IWindowStateManager\nDESCRIPTION: The 'IWindowStateManager' interface offers initialization and retrieval of UIViewController/UIWindow instances, aiding in window state management in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IWindowStateManager\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.GetCurrentUIViewController() -> UIKit.UIViewController?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.GetCurrentUIWindow() -> UIKit.UIWindow?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IWindowStateManager.Init(System.Func<UIKit.UIViewController?>? getCurrentUIViewController) -> void\n```\n\n----------------------------------------\n\nTITLE: Email Message Class Definition\nDESCRIPTION: Class definition for composing email messages with attachments and recipients\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class EmailMessage {\n    public List<EmailAttachment> Attachments { get; set; }\n    public List<string> Bcc { get; set; }\n    public string Body { get; set; }\n    public EmailBodyFormat BodyFormat { get; set; }\n    public List<string> Cc { get; set; }\n    public string Subject { get; set; }\n    public List<string> To { get; set; }\n    public EmailMessage()\n    public EmailMessage(string subject, string body, params string[] to)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SensorSpeed Enumeration in C#\nDESCRIPTION: Enumeration defining the different speeds at which sensors can operate. It includes Default (0), Fastest (3), and Game (2) speeds, which affect the frequency of sensor readings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Default = 0 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Fastest = 3 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Game = 2 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\n```\n\n----------------------------------------\n\nTITLE: Setting Mono Thread Suspension Mode\nDESCRIPTION: Environment variable configuration that sets Mono's thread suspension mode to preemptive. This setting affects how Mono handles thread suspension operations in the application runtime.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/tests/DeviceTests/Platforms/Android/environment.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nMONO_THREADS_SUSPEND=preemptive\n```\n\n----------------------------------------\n\nTITLE: Color Constants in MAUI Graphics\nDESCRIPTION: Predefined color constants representing standard web colors. Each constant is a static readonly field returning a Color object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Color AliceBlue\nstatic readonly Color AntiqueWhite\nstatic readonly Color Aqua\nstatic readonly Color Aquamarine\nstatic readonly Color Azure\nstatic readonly Color Black\nstatic readonly Color Blue\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMode Enum in MAUI ApplicationModel\nDESCRIPTION: Defines the NavigationMode enum in the Microsoft.Maui.ApplicationModel namespace, specifying different navigation modes such as Bicycling, Driving, and Walking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode.Bicycling = 2 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Default = 1 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Driving = 3 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.None = 0 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Transit = 4 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Walking = 5 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\n----------------------------------------\n\nTITLE: System Integration APIs\nDESCRIPTION: Interfaces for launching external applications, browser and maps\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IBrowser.OpenAsync(Uri uri, BrowserLaunchOptions options) -> System.Threading.Tasks.Task<bool>\nMicrosoft.Maui.ApplicationModel.ILauncher.OpenAsync(Uri uri) -> System.Threading.Tasks.Task<bool>\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, MapLaunchOptions options) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Initializing ContextFlyoutItemHandlerUpdate in MAUI\nDESCRIPTION: Initializes a new instance of the `ContextFlyoutItemHandlerUpdate` struct, storing the index and the menu element associated with the update. This struct is used to update context flyout menu items in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.ContextFlyoutItemHandlerUpdate(int Index, Microsoft.Maui.IMenuElement! MenuElement) -> void\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Index.get -> int\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.Index.init -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.MenuElement.get -> Microsoft.Maui.IMenuElement!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContextFlyoutItemHandlerUpdate.MenuElement.init -> void\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Gyroscope Monitoring - C# .NET MAUI\nDESCRIPTION: Stops the monitoring of the gyroscope data. This is a void method and does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IGyroscope.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Platform UI Control Overrides\nDESCRIPTION: Override implementations for various Android platform UI controls including EditText, WebView, and SwipeView layout handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Platform.MauiAppCompatEditText.OnSelectionChanged(int selStart, int selEnd) -> void\noverride Microsoft.Maui.Platform.MauiSwipeView.OnLayout(bool changed, int left, int top, int right, int bottom) -> void\noverride Microsoft.Maui.Platform.MauiTextView.OnMeasure(int widthMeasureSpec, int heightMeasureSpec) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Constants Declaration in Microsoft.Maui.Graphics.Colors for .NET MAUI\nDESCRIPTION: Static readonly color property declarations for the Microsoft.Maui.Graphics.Colors class. Each property returns a Microsoft.Maui.Graphics.Color object that represents a specific named color, providing a convenient way to access standard colors in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkKhaki -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkMagenta -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOliveGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOrange -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkOrchid -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSalmon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSeaGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSlateBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSlateGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkSlateGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkTurquoise -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DarkViolet -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DeepPink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DeepSkyBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DimGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DimGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.DodgerBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Firebrick -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.FloralWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.ForestGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Fuchsia -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gainsboro -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.GhostWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gold -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Goldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Green -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.GreenYellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Grey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Honeydew -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.HotPink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.IndianRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Indigo -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Ivory -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Khaki -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Lavender -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LavenderBlush -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LawnGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LemonChiffon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightCoral -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightCyan -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGoldenrodYellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightPink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSalmon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSeaGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSkyBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSlateGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSlateGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightSteelBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LightYellow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Lime -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.LimeGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Linen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Magenta -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Maroon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumAquamarine -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumOrchid -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumPurple -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumSeaGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumSlateBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumSpringGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumTurquoise -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MediumVioletRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MidnightBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MintCream -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.MistyRose -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Moccasin -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.NavajoWhite -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Navy -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.OldLace -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Olive -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.OliveDrab -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Orange -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.OrangeRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Orchid -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PaleGoldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PaleGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PaleTurquoise -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PaleVioletRed -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PapayaWhip -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PeachPuff -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Peru -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Pink -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Plum -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.PowderBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Purple -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Red -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.RosyBrown -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.RoyalBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SaddleBrown -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Salmon -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SandyBrown -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SeaGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SeaShell -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Sienna -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Silver -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SkyBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SlateBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SlateGray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SlateGrey -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Snow -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SpringGreen -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.SteelBlue -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: DevicePlatform Property Accessors in MAUI C# API\nDESCRIPTION: Static property getters for the DevicePlatform enumeration in MAUI, providing access to platform identifiers including tvOS, Unknown, UWP, watchOS, and WinUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.tvOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.Unknown.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.UWP.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.watchOS.get -> Microsoft.Maui.Devices.DevicePlatform\nstatic Microsoft.Maui.Devices.DevicePlatform.WinUI.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\n----------------------------------------\n\nTITLE: Creating a Font Object in C#\nDESCRIPTION: This constructor creates a new Font object. It can be used to initialize a font with default properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Font.Font() -> void\n```\n\n----------------------------------------\n\nTITLE: Dimension Utilities for MAUI Primitives\nDESCRIPTION: Static utility methods for working with dimension values in MAUI, determining if dimensions are explicitly set, or checking minimum and maximum constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.IsExplicitSet(double value) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.IsMaximumSet(double value) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.IsMinimumSet(double value) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.ResolveMinimum(double value) -> double\n```\n\n----------------------------------------\n\nTITLE: Mapping Slider Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of the Slider control to its handler in MAUI. These methods handle updating the minimum, maximum, value, and appearance properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: BorderHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the BorderHandler class, handling various properties of a border view such as background, stroke, and content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.BorderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.BorderHandler!>!\nstatic Microsoft.Maui.Handlers.BorderHandler.MapBackground(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapContent(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IBorderView!, Microsoft.Maui.Handlers.IBorderHandler!>!\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStroke(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeShape(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Handlers.BorderHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IBorderHandler! handler, Microsoft.Maui.IBorderView! border) -> void\n```\n\n----------------------------------------\n\nTITLE: ImagePaint Properties in Microsoft.Maui.Graphics\nDESCRIPTION: Property getter and setter signatures for the Image property in the ImagePaint class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ImagePaint.Image.get -> Microsoft.Maui.Graphics.IImage\nMicrosoft.Maui.Graphics.ImagePaint.Image.set -> void\n```\n\n----------------------------------------\n\nTITLE: Bitmap Export Extensions\nDESCRIPTION: Static extension method for exporting bitmap context to a file, providing a convenient way to save graphics content to disk\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.BitmapExportContextExtensions.WriteToFile(this Microsoft.Maui.Graphics.BitmapExportContext exportContext, string filename) -> void\n```\n\n----------------------------------------\n\nTITLE: Convert Color to ARGB with SKGraphicsExtensions in C#\nDESCRIPTION: This method converts a Microsoft.Maui.Graphics.Color object to an ARGB integer. An optional alpha value can be provided for transparency control. It returns an integer representing the color in ARGB format. Dependencies include Microsoft.Maui.Graphics and SkiaSharp.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToArgb(this Microsoft.Maui.Graphics.Color target, float alpha) -> int\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToArgb(this Microsoft.Maui.Graphics.Color target) -> int\n```\n\n----------------------------------------\n\nTITLE: Canvas Property Setters in .NET MAUI\nDESCRIPTION: Property setter methods for controlling various aspects of the canvas drawing style, such as font size, stroke size, and line join types. These properties affect how shapes are drawn on the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.FontSize.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.MiterLimit.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformStrokeSize.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.StrokeLineCap.set -> void\noverride Microsoft.Maui.Graphics.Platform.PlatformCanvas.StrokeLineJoin.set -> void\n```\n\n----------------------------------------\n\nTITLE: InsetsF Constructor in .NET MAUI\nDESCRIPTION: This constructor initializes an InsetsF instance using an existing InsetsF object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.InsetsF.InsetsF(Microsoft.Maui.Graphics.InsetsF insets) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Toolbar Properties in C#\nDESCRIPTION: Static methods for mapping properties of Toolbar in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ToolbarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IToolbar!, Microsoft.Maui.Handlers.IToolbarHandler!>!\nstatic Microsoft.Maui.Handlers.ToolbarHandler.MapTitle(Microsoft.Maui.Handlers.IToolbarHandler! arg1, Microsoft.Maui.IToolbar! arg2) -> void\n```\n\n----------------------------------------\n\nTITLE: View Property Update Extensions for Tizen Platform\nDESCRIPTION: Extension methods that update specific properties of Tizen platform views based on MAUI view specifications. These methods handle visual properties like background, border, clipping, sizing, opacity, and accessibility features.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateAutomationId(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Microsoft.Maui.Platform.ContentViewGroup! platformView, Microsoft.Maui.IBorderView! border) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.Graphics.Paint? paint) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackground(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBackgroundImageSourceAsync(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IImageSource? imageSource, Microsoft.Maui.IImageSourceServiceProvider? provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateBorder(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateClip(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateHeight(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateInputTransparent(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateIsEnabled(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumHeight(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMaximumWidth(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumHeight(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateMinimumWidth(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateOpacity(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateSemantics(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateShadow(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateSize(Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateToolTip(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.ToolTip? tooltip) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateVisibility(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.ViewExtensions.UpdateWidth(this Tizen.NUI.BaseComponents.View! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Swipe View Handler Mappings in C#\nDESCRIPTION: Static methods for handling swipe view functionality including item management, content mapping, and swipe transitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_88\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeView!, Microsoft.Maui.Handlers.ISwipeViewHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring ISecureStorage Interface Methods in C#\nDESCRIPTION: Defines methods for securely storing and retrieving data using the secure storage interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Storage.ISecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.Storage.ISecureStorage.Remove(string! key) -> bool\nMicrosoft.Maui.Storage.ISecureStorage.RemoveAll() -> void\nMicrosoft.Maui.Storage.ISecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: GridLength Operators and Conversions in MAUI\nDESCRIPTION: Implicit operators and comparison methods for GridLength, enabling easy creation and comparison of grid dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.GridLength.implicit operator Microsoft.Maui.GridLength(double absoluteValue) -> Microsoft.Maui.GridLength\nstatic Microsoft.Maui.GridLength.operator !=(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\nstatic Microsoft.Maui.GridLength.operator ==(Microsoft.Maui.GridLength left, Microsoft.Maui.GridLength right) -> bool\n```\n\n----------------------------------------\n\nTITLE: MapSpan Static Methods - C#\nDESCRIPTION: Static methods for creating and comparing MapSpan objects. Includes factory method for creating MapSpan from center location and radius, and equality comparison operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.FromCenterAndRadius(Microsoft.Maui.Devices.Sensors.Location! center, Microsoft.Maui.Maps.Distance radius) -> Microsoft.Maui.Maps.MapSpan!\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining BlazorWebViewInitializedEventArgs Class in C#\nDESCRIPTION: Defines the BlazorWebViewInitializedEventArgs class for handling initialization events in Blazor WebView for WPF.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Wpf/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs\nMicrosoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs.BlazorWebViewInitializedEventArgs() -> void\n```\n\n----------------------------------------\n\nTITLE: Parsing Insets in MAUI (C#)\nDESCRIPTION: These methods are related to parsing insets from string values, which can be used in layout adjustments in MAUI applications. They convert string representations of insets to Insets or InsetsF types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.Insets.Parse(string value) -> Microsoft.Maui.Graphics.Insets\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~static Microsoft.Maui.Graphics.InsetsF.Parse(string value) -> Microsoft.Maui.Graphics.InsetsF\n```\n\n----------------------------------------\n\nTITLE: Mapping ShapeView Properties in C#\nDESCRIPTION: Static methods for mapping stroke properties of ShapeView in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Arcade Template Directory Structure\nDESCRIPTION: Directory structure showing the organization of template files in Arcade, including templates and templates-official directories with their respective shim, logic, and redirect files.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/common/template-guidance.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\neng\\common\\\n    [templates || templates-official]\\\n        job\\\n            job.yml                          (shim + artifact publishing logic)\n            onelocbuild.yml                  (shim)\n            publish-build-assets.yml         (shim)\n            source-build.yml                 (shim)\n            source-index-stage1.yml          (shim)\n        jobs\\\n            codeql-build.yml                 (shim)\n            jobs.yml                         (shim)\n            source-build.yml                 (shim)\n        post-build\\\n            post-build.yml                   (shim)\n            common-variabls.yml              (shim)\n            setup-maestro-vars.yml           (shim)\n        steps\\\n            publish-build-artifacts.yml      (logic)\n            publish-pipeline-artifacts.yml   (logic)\n            component-governance.yml         (shim)\n            generate-sbom.yml                (shim)\n            publish-logs.yml                 (shim)\n            retain-build.yml                 (shim)\n            send-to-helix.yml                (shim)\n            source-build.yml                 (shim)\n        variables\\\n            pool-providers.yml               (logic + redirect)\n            sdl-variables.yml                (logic)\n    core-templates\\\n        job\\\n            job.yml                          (logic)\n            onelocbuild.yml                  (logic)\n            publish-build-assets.yml         (logic)\n            source-build.yml                 (logic)\n            source-index-stage1.yml          (logic)\n        jobs\\\n            codeql-build.yml                 (logic)\n            jobs.yml                         (logic)\n            source-build.yml                 (logic)\n        post-build\\\n            common-variabls.yml              (logic)\n            post-build.yml                   (logic)\n            setup-maestro-vars.yml           (logic)\n        steps\\\n            component-governance.yml         (logic)\n            generate-sbom.yml                (logic)\n            publish-build-artifacts.yml      (redirect)\n            publish-logs.yml                 (logic)\n            publish-pipeline-artifacts.yml   (redirect)\n            retain-build.yml                 (logic)\n            send-to-helix.yml                (logic)\n            source-build.yml                 (logic)\n        variables\\\n            pool-providers.yml               (redirect)\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Class Methods and Properties\nDESCRIPTION: Core animation class definition showing methods and properties for managing animations in MAUI applications. Includes functionality for timing, pausing, resuming and handling animation lifecycle.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.animationManger -> Microsoft.Maui.Animations.IAnimationManager?\nMicrosoft.Maui.Animations.Animation.childrenAnimations -> System.Collections.Generic.List<Microsoft.Maui.Animations.Animation!>!\nMicrosoft.Maui.Animations.Animation.Commit(Microsoft.Maui.Animations.IAnimationManager! animationManger) -> void\nMicrosoft.Maui.Animations.Animation.CreateAutoReversing() -> Microsoft.Maui.Animations.Animation!\n```\n\n----------------------------------------\n\nTITLE: Initial Content for PublicAPI Files\nDESCRIPTION: The initial content to add when manually creating PublicAPI.Shipped.txt or PublicAPI.Unshipped.txt files.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n#nullable enable\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for .NET MAUI\nDESCRIPTION: Main README documentation explaining the .NET MAUI framework, its capabilities, getting started resources, and contribution guidelines. Includes build status badges, installation links, and recent news updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# .NET Multi-platform App UI (.NET MAUI)\n\n[![Build Status](https://dev.azure.com/xamarin/public/_apis/build/status/MAUI-public?repoName=dotnet%2Fmaui&branchName=main&label=Public)](https://dev.azure.com/xamarin/public/_build/latest?definitionId=57&repoName=dotnet%2Fmaui&branchName=main) [![Build Status](https://devdiv.visualstudio.com/DevDiv/_apis/build/status/MAUI?repoName=dotnet%2Fmaui&branchName=main&label=Private)](https://devdiv.visualstudio.com/DevDiv/_build/latest?definitionId=13330&repoName=dotnet%2Fmaui&branchName=main)\n\n[.NET Multi-platform App UI (.NET MAUI)](https://dotnet.microsoft.com/en-us/apps/maui) is a cross-platform framework for creating mobile and desktop apps with C# and XAML. Using .NET MAUI, you can develop apps that can run on Android, iOS, iPadOS, macOS, and Windows from a single shared codebase.\n```\n\n----------------------------------------\n\nTITLE: Getting Name from Locale in .NET MAUI\nDESCRIPTION: This property retrieves the full name of the Locale, which might be represented in a human-readable format like 'American English'.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Name.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressBarHandler Mappers and Methods in MAUI (C#)\nDESCRIPTION: Static properties and methods for the ProgressBarHandler, including command and property mappers, and methods for mapping progress and progress color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Device Platform Information in .NET MAUI - C#\nDESCRIPTION: This snippet provides properties to get specific device platform information such as macOS, tvOS, and UWP from the Microsoft.Maui.Devices.DevicePlatform class. It allows developers to differentiate functionalities across various device platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.MacCatalyst.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.macOS.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.operator !=(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.operator ==(Microsoft.Maui.Devices.DevicePlatform left, Microsoft.Maui.Devices.DevicePlatform right) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.Tizen.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.tvOS.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.Unknown.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.UWP.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.watchOS.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.DevicePlatform.WinUI.get -> Microsoft.Maui.Devices.DevicePlatform\n```\n\n----------------------------------------\n\nTITLE: Drawing Picture on Canvas in .NET MAUI\nDESCRIPTION: This method allows drawing a picture on the specified canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPicture.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: OpenSwipeItem Enumeration in C#\nDESCRIPTION: Definition of OpenSwipeItem enumeration which defines constants for different swipe item positions (Left, Top, Right, Bottom) in swipe-enabled UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.OpenSwipeItem\nMicrosoft.Maui.OpenSwipeItem.BottomItems = 3 -> Microsoft.Maui.OpenSwipeItem\nMicrosoft.Maui.OpenSwipeItem.LeftItems = 0 -> Microsoft.Maui.OpenSwipeItem\nMicrosoft.Maui.OpenSwipeItem.RightItems = 2 -> Microsoft.Maui.OpenSwipeItem\nMicrosoft.Maui.OpenSwipeItem.TopItems = 1 -> Microsoft.Maui.OpenSwipeItem\n```\n\n----------------------------------------\n\nTITLE: Declaring Keyboard Accelerator Modifiers\nDESCRIPTION: Declares several keyboard accelerator modifiers such as Alt, Cmd, Ctrl, and others, abstracting their integer representations for easy use.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\n----------------------------------------\n\nTITLE: TitleBar Constants Definition in C#\nDESCRIPTION: Constants defining various states and template parts for MAUI TitleBar control. These constants are used for state management and template element identification.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.LeadingHiddenState = \"LeadingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingVisibleState = \"LeadingContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleHiddenState = \"SubtitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleVisibleState = \"SubtitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TemplateRootName = \"PART_Root\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Size and SizeF Struct Definitions\nDESCRIPTION: Definitions for Size and SizeF structs that represent dimensions in both double and float precision respectively.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Size.Size(double width, double height) -> void\nMicrosoft.Maui.Graphics.SizeF.SizeF(float width, float height) -> void\nMicrosoft.Maui.Graphics.Size.IsZero.get -> bool\nMicrosoft.Maui.Graphics.SizeF.IsZero.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Stopping Orientation Sensor Monitoring - C# .NET MAUI\nDESCRIPTION: Stops the monitoring of orientation sensor data. This is a void method and does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IOrientationSensor.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Getting End of Attributed Text Run in MAUI\nDESCRIPTION: This method retrieves the end index of the specified attributed text run.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.GetEnd(this Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> int\n```\n\n----------------------------------------\n\nTITLE: Picker Handler Static Mappings - C#\nDESCRIPTION: Static methods for handling picker control operations including character spacing, font settings, and text alignment. Contains property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.PickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IPicker!, Microsoft.Maui.Handlers.IPickerHandler!>!\nstatic Microsoft.Maui.Handlers.PickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IPickerHandler! handler, Microsoft.Maui.IPicker! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BorderHandler Constructors in C#\nDESCRIPTION: Multiple constructor overloads for the BorderHandler class, allowing initialization with different combinations of IPropertyMapper and CommandMapper parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.BorderHandler.BorderHandler() -> void\nMicrosoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.BorderHandler.BorderHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Window Content\nDESCRIPTION: Retrieves the current content view within the window, allowing developers to access and manipulate the displayed UI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!\n```\n\n----------------------------------------\n\nTITLE: Virtual RegisterViewTypes Method (ItemsViewController)\nDESCRIPTION: This code snippet showcases a virtual method RegisterViewTypes within the ItemsViewController2 class. It likely deals with registering view types for items within the ItemsView, possibly customizing how different types of items are rendered or handled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.RegisterViewTypes() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Initializing NavigationViewHandler in C#\nDESCRIPTION: Constructor for NavigationViewHandler class with multiple overloads, taking optional IPropertyMapper and CommandMapper parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler() -> void\nMicrosoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.NavigationViewHandler.NavigationViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Attributed Text Run with Attributes in C#\nDESCRIPTION: This snippet defines a constructor for the AttributedTextRun class, initializing it with a character range and text attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextRun.AttributedTextRun(int start, int length, Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Polygon Property in C# for MAUI\nDESCRIPTION: Declares a static readonly BindableProperty field for the Polygon class, specifically the FillColor property.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: AccelerometerData Equality Operators in MAUI C#\nDESCRIPTION: Equality comparison operators for the AccelerometerData struct, allowing comparison between two AccelerometerData instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator !=(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.AccelerometerData.operator ==(Microsoft.Maui.Devices.Sensors.AccelerometerData left, Microsoft.Maui.Devices.Sensors.AccelerometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Battery Power Source Enumeration in MAUI\nDESCRIPTION: Defines the possible power sources for device battery in MAUI applications, including AC, Battery, USB, and Wireless charging options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.BatteryPowerSource.Unknown = 0\nMicrosoft.Maui.Devices.BatteryPowerSource.Battery = 1\nMicrosoft.Maui.Devices.BatteryPowerSource.AC = 2\nMicrosoft.Maui.Devices.BatteryPowerSource.Usb = 3\nMicrosoft.Maui.Devices.BatteryPowerSource.Wireless = 4\n```\n\n----------------------------------------\n\nTITLE: Contact Constructor in MAUI\nDESCRIPTION: This constructor initializes a new instance of the Contact class. It is a parameterless constructor used to create an empty Contact object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.Contact.Contact() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateController for ItemsViewHandler2 in C#\nDESCRIPTION: Declares an abstract method CreateController for ItemsViewHandler2 class, creating an ItemsViewController2 based on a new element and layout.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~abstract Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.CreateController(TItemsView newElement, UIKit.UICollectionViewLayout layout) -> Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>\n```\n\n----------------------------------------\n\nTITLE: Override IsHorizontal Property Getter (StructuredItemsViewController)\nDESCRIPTION: This code presents an override of the `IsHorizontal` property's getter within the `StructuredItemsViewController2` class. This indicates custom logic for determining whether the layout of a structured items view is horizontal in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.StructuredItemsViewController2<TItemsView>.IsHorizontal.get -> bool\"\n```\n\n----------------------------------------\n\nTITLE: Managing Paint Properties in PaintPattern\nDESCRIPTION: This snippet defines properties for accessing and setting the paint and its wrapped pattern within the PaintPattern class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Paint.get -> Microsoft.Maui.Graphics.Paint\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Paint.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Wrapped.get -> Microsoft.Maui.Graphics.IPattern\n```\n\n----------------------------------------\n\nTITLE: Utilizing SensorSpeed Enum in C#\nDESCRIPTION: Enumerates the SensorSpeed options available for adjusting the reading intervals in sensor functionality, from default to fastest speeds.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Default = 0 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Fastest = 3 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Game = 2 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.UI = 1 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\n\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString Method for InsetsF Class in C#\nDESCRIPTION: This snippet overrides the ToString method for the InsetsF class to generate a string from inset float values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.InsetsF.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Value Target Provider Constructor\nDESCRIPTION: Constructor implementation for ValueTargetProvider class that handles target object and property pairs in XAML processing\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Styling and Fill Methods\nDESCRIPTION: Method signatures for setting fill colors, paints, and styling options in the PictureCanvas class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.FillColor.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.Font.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.FontColor.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\nMicrosoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\nMicrosoft.Maui.Graphics.PictureCanvas.Picture.get -> Microsoft.Maui.Graphics.IPicture\nMicrosoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeColor.set -> void\nMicrosoft.Maui.Graphics.PictureCanvas.StrokeDashPattern.set -> void\n```\n\n----------------------------------------\n\nTITLE: Connectivity Management in MAUI (C#)\nDESCRIPTION: Provides static properties and events for managing and monitoring network connectivity, including connection profiles and network access.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Networking.Connectivity.ConnectionProfiles.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Networking.ConnectionProfile>!\nstatic Microsoft.Maui.Networking.Connectivity.ConnectivityChanged -> System.EventHandler<Microsoft.Maui.Networking.ConnectivityChangedEventArgs!>!\nstatic Microsoft.Maui.Networking.Connectivity.Current.get -> Microsoft.Maui.Networking.IConnectivity!\nstatic Microsoft.Maui.Networking.Connectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: HybridWebView and ResourceDictionary Extensions\nDESCRIPTION: Generic method declarations for HybridWebView JavaScript invocation and ResourceDictionary source management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebView.SetInvokeJavaScriptTarget<T>(T! target) -> void\n\n~Microsoft.Maui.Controls.ResourceDictionary.SetAndCreateSource<T>(System.Uri value) -> void\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Project Reference in Core.csproj\nDESCRIPTION: XML element that declares the Android Gradle project reference which handles creation and packaging of maui.aar during the build process.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/AndroidNative/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n@(AndroidGradleProject)\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for Button in .NET MAUI\nDESCRIPTION: In this snippet, we obtain the platform-specific and virtual views for the IButtonHandler, allowing for interaction with a button in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IButtonHandler.ImageSourceLoader.get -> Microsoft.Maui.Platform.ImageSourcePartLoader!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IButtonHandler.PlatformView.get -> Google.Android.Material.Button.MaterialButton!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IButtonHandler.VirtualView.get -> Microsoft.Maui.IButton!\n```\n\n----------------------------------------\n\nTITLE: AttributedTextRunComparer Instance in Microsoft.Maui.Graphics.Text (C#)\nDESCRIPTION: Static instance of the AttributedTextRunComparer class used for comparing text run attributes. This singleton instance provides consistent comparison functionality for attributed text runs in MAUI graphics text rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Instance -> Microsoft.Maui.Graphics.Text.AttributedTextRunComparer\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Interfaces for Extendable Animations\nDESCRIPTION: Interfaces like IAnimationManager and IAnimator in the MAUI library specify standard methods for adding and managing animations. These interfaces support varying implementations for animation handling, coupled with dependency on Microsoft.Maui.Animations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.IAnimationManager\nMicrosoft.Maui.Animations.IAnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.IAnimationManager.AutoStartTicker.get -> bool\nMicrosoft.Maui.Animations.IAnimationManager.AutoStartTicker.set -> void\nMicrosoft.Maui.Animations.IAnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.IAnimationManager.SpeedModifier.get -> double\nMicrosoft.Maui.Animations.IAnimationManager.SpeedModifier.set -> void\nMicrosoft.Maui.Animations.IAnimationManager.Ticker.get -> Microsoft.Maui.Animations.ITicker!\nMicrosoft.Maui.Animations.IAnimator\nMicrosoft.Maui.Animations.IAnimator.AddAnimation(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.IAnimator.RemoveAnimation(Microsoft.Maui.Animations.Animation! animation) -> void\n\n```\n\n----------------------------------------\n\nTITLE: Defining XAML Extension Methods in Microsoft.Maui.Controls.Xaml\nDESCRIPTION: Defines extension methods for loading XAML content in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, string xaml) -> TXaml\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, System.Type callingType) -> TXaml\n```\n\n----------------------------------------\n\nTITLE: Creating Font Copy in Skia Extensions\nDESCRIPTION: Extension method to create a copy of a SkiaSharp font with nullable support. Allows safe font duplication while handling potential null references.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Canvas Extensions for Shape Fill Operations\nDESCRIPTION: Extension methods for ICanvas interface to fill various shapes including paths, rectangles and rounded rectangles with different parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic void FillPath(this ICanvas target, PathF path, WindingMode windingMode);\nstatic void FillRectangle(this ICanvas target, RectF rect);\nstatic void FillRoundedRectangle(this ICanvas target, RectF rect, float cornerRadius);\n```\n\n----------------------------------------\n\nTITLE: Set DateTimeOffset Value in MAUI Preferences\nDESCRIPTION: Static methods to store a DateTimeOffset value in Preferences storage. Provides overloads with and without a shared storage name parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding New Dependency with Darc\nDESCRIPTION: Command to add a new dependency to the repository using darc add-dependency. This example adds Microsoft.Dotnet.Sdk.Internal as a product dependency.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndarc add-dependency -n Microsoft.Dotnet.Sdk.Internal -t product -v 6.0.0-preview.2.21154.6 -r https://github.com/dotnet/installer\n```\n\n----------------------------------------\n\nTITLE: Getting Wrapped Pattern in PaintPattern Class\nDESCRIPTION: This property allows getting the wrapped pattern from a PaintPattern instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Wrapped.get -> Microsoft.Maui.Graphics.IPattern\n```\n\n----------------------------------------\n\nTITLE: ScrollViewHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the ScrollViewHandler class in Microsoft.Maui that handle scroll view properties like content, scrollbar visibility, orientation and scroll operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Rounded Rectangle to CGContext in MAUI\nDESCRIPTION: This method adds a rounded rectangle shape to a CGContext. It can take either a CGRect structure or use individual parameters for position and dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.CgContextExtensions.AddRoundedRectangle(this CoreGraphics.CGContext target, CoreGraphics.CGRect rect, float cornerRadius) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.CgContextExtensions.AddRoundedRectangle(this CoreGraphics.CGContext target, System.Runtime.InteropServices.NFloat x, System.Runtime.InteropServices.NFloat y, System.Runtime.InteropServices.NFloat width, System.Runtime.InteropServices.NFloat height, System.Runtime.InteropServices.NFloat cornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: Analyzing AOT compilation status using adb logcat (bash)\nDESCRIPTION: This script uses `adb logcat` to filter and display log messages related to AOT compilation. It allows verification that specific methods are AOT'd and identifying any methods that are not being AOT compiled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat -d | grep AOT\n02-23 09:03:46.327 10401 10401 D Mono    : AOT: FOUND method Microsoft.AspNetCore.Components.WebView.Maui.BlazorWebView:.ctor () [0x6f9efd0150 - 0x6f9efd0340 0x6f9efd260c]\n```\n\n----------------------------------------\n\nTITLE: Initializing FlyoutViewHandler in .NET MAUI\nDESCRIPTION: This snippet shows the constructor for the FlyoutViewHandler, responsible for handling flyout menus in a .NET MAUI application. The constructor takes an optional property mapper to configure the handler's properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.FlyoutViewHandler.FlyoutViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Barometer Classes in C#\nDESCRIPTION: Defines classes related to the barometer sensor, including event arguments and data structures.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Barometer\nMicrosoft.Maui.Devices.Sensors.BarometerChangedEventArgs\nMicrosoft.Maui.Devices.Sensors.BarometerChangedEventArgs.BarometerChangedEventArgs(Microsoft.Maui.Devices.Sensors.BarometerData reading) -> void\nMicrosoft.Maui.Devices.Sensors.BarometerChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.BarometerData\nMicrosoft.Maui.Devices.Sensors.BarometerData\nMicrosoft.Maui.Devices.Sensors.BarometerData.BarometerData() -> void\nMicrosoft.Maui.Devices.Sensors.BarometerData.BarometerData(double pressure) -> void\nMicrosoft.Maui.Devices.Sensors.BarometerData.Equals(Microsoft.Maui.Devices.Sensors.BarometerData other) -> bool\nMicrosoft.Maui.Devices.Sensors.BarometerData.PressureInHectopascals.get -> double\n```\n\n----------------------------------------\n\nTITLE: Comparing Paths in .NET MAUI\nDESCRIPTION: This snippet specifies the Equals method in the PathF class, allowing comparison of two path objects for equality based on a threshold (epsilon) for floating-point precision.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Equals(object obj, float epsilon) -> bool\n```\n\n----------------------------------------\n\nTITLE: Formatting Code in XML Documentation\nDESCRIPTION: Example of using the c tag to format text as code within XML documentation.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/CodeDocumentationGuidelines.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<c></c>\n```\n\n----------------------------------------\n\nTITLE: Parsing Size from String in MAUI\nDESCRIPTION: This method attempts to parse a string representation of a size into a Microsoft MAUI Size object. It returns a boolean indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Size.TryParse(string value, out Microsoft.Maui.Graphics.Size size) -> bool\n```\n\n----------------------------------------\n\nTITLE: Converting Insets to String in .NET MAUI\nDESCRIPTION: This method converts an Insets instance to a parsable string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Insets.ToParsableString() -> string\n```\n\n----------------------------------------\n\nTITLE: Drawing Skia Images on Canvas\nDESCRIPTION: Executes the drawing operation on a specified canvas area using an existing Skia image, facilitating image rendering within defined rectangular areas of the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.Draw(Microsoft.Maui.Graphics.ICanvas canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\n```\n\n----------------------------------------\n\nTITLE: Sensor Speed Configuration\nDESCRIPTION: Enumerates sensor speed configurations essential for tuneable sensor application performance, mapped to specific integer values in the Microsoft.Maui.Devices.Sensors namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Default = 0 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Fastest = 3 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\nMicrosoft.Maui.Devices.Sensors.SensorSpeed.Game = 2 -> Microsoft.Maui.Devices.Sensors.SensorSpeed\n```\n\n----------------------------------------\n\nTITLE: Defining UnitConverters API in C#\nDESCRIPTION: Declares static methods for the UnitConverters class in the Microsoft.Maui.Media namespace. Includes various unit conversion methods for temperature, distance, pressure, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double\n// ... (more conversion methods)\n```\n\n----------------------------------------\n\nTITLE: GyroscopeData Equality Operators in MAUI C#\nDESCRIPTION: Equality comparison operators for the GyroscopeData struct, allowing comparison between two GyroscopeData instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator !=(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator ==(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Requesting Share Operation in .NET MAUI\nDESCRIPTION: This method requests to share files or text using the IShare interface. It takes a ShareFileRequest, ShareTextRequest, or ShareMultipleFilesRequest as input and returns a Task. Useful for sharing content directly from the app.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest! request) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.IShare.RequestAsync(Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest! request) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationMode Enum in C#\nDESCRIPTION: Defines the NavigationMode enum with values for different navigation modes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Bicycling = 2 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Default = 1 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Driving = 3 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.None = 0 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Transit = 4 -> Microsoft.Maui.ApplicationModel.NavigationMode\nMicrosoft.Maui.ApplicationModel.NavigationMode.Walking = 5 -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar Constants for UI State Management\nDESCRIPTION: Defines string constants used by the TitleBar component for managing visibility states and element naming in templates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.ContentHiddenState = \"ContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.ContentVisibleState = \"ContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconHiddenState = \"IconCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconVisibleState = \"IconVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingHiddenState = \"LeadingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingVisibleState = \"LeadingContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleHiddenState = \"SubtitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleVisibleState = \"SubtitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TemplateRootName = \"PART_Root\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarActiveState = \"TitleBarTitleActive\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarContent = \"PART_Content\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarIcon = \"PART_Icon\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarInactiveState = \"TitleBarTitleInactive\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarLeading = \"PART_LeadingContent\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarSubtitle = \"PART_Subtitle\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarTitle = \"PART_Title\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarTrailing = \"PART_TrailingContent\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleHiddenState = \"TitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleVisibleState = \"TitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TrailingHiddenState = \"TrailingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TrailingVisibleState = \"TrailingContentVisible\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardAcceleratorModifiers Enum in C#\nDESCRIPTION: This snippet defines the KeyboardAcceleratorModifiers enum for specifying keyboard modifier keys.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\n----------------------------------------\n\nTITLE: Touch-Enabled Graphics View Implementation in C#\nDESCRIPTION: PlatformTouchGraphicsView adds touch capabilities to MAUI graphics views. It provides connection and disconnection methods to manage the binding between the graphics view and touch events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.Connect(Microsoft.Maui.IGraphicsView! graphicsView) -> void\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.Disconnect() -> void\nMicrosoft.Maui.Platform.PlatformTouchGraphicsView.PlatformTouchGraphicsView() -> void\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions LaunchMode getter in MAUI\nDESCRIPTION: This property getter retrieves the launch mode for the browser. The launch mode determines whether to use an external browser or the system-preferred browser. This is a read/write property of type BrowserLaunchMode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchMode\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Compiled Binding in C#\nDESCRIPTION: Shows how to use compiled binding in C# code for a MAUI application. This approach uses a lambda expression to define the binding, which can be more performant and allows for better static analysis.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/FeatureSwitches.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nlabel.SetBinding<PageViewModel, string>(Label.TextProperty, static vm => vm.Customer.Name);\n// or with type inference:\nlabel.SetBinding(Label.TextProperty, static (PageViewModel vm) => vm.Customer.Name);\n```\n\n----------------------------------------\n\nTITLE: Defining ImageFormat Enum in C#\nDESCRIPTION: Enumeration defining supported image formats in MAUI graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ImageFormat\nMicrosoft.Maui.Graphics.ImageFormat.Bmp = 4 -> Microsoft.Maui.Graphics.ImageFormat\nMicrosoft.Maui.Graphics.ImageFormat.Gif = 2 -> Microsoft.Maui.Graphics.ImageFormat\nMicrosoft.Maui.Graphics.ImageFormat.Jpeg = 1 -> Microsoft.Maui.Graphics.ImageFormat\nMicrosoft.Maui.Graphics.ImageFormat.Png = 0 -> Microsoft.Maui.Graphics.ImageFormat\nMicrosoft.Maui.Graphics.ImageFormat.Tiff = 3 -> Microsoft.Maui.Graphics.ImageFormat\n```\n\n----------------------------------------\n\nTITLE: Managing Menu Flyout Item in .NET MAUI\nDESCRIPTION: This snippet defines the IMenuFlyoutItemHandler interface handling menu items within a flyout, providing platform and virtual view properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutItemHandler.PlatformView.get -> Android.Views.View!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutItemHandler.VirtualView.get -> Microsoft.Maui.IMenuFlyoutItem!\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Classes in C#\nDESCRIPTION: Defines various permission classes for different device features and capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Battery\nMicrosoft.Maui.ApplicationModel.Permissions.Battery.Battery() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Bluetooth\nMicrosoft.Maui.ApplicationModel.Permissions.Bluetooth.Bluetooth() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarRead\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarRead.CalendarRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarWrite\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarWrite.CalendarWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Camera\nMicrosoft.Maui.ApplicationModel.Permissions.Camera.Camera() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsRead\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsRead.ContactsRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsWrite\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsWrite.ContactsWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Flashlight\nMicrosoft.Maui.ApplicationModel.Permissions.Flashlight.Flashlight() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LaunchApp\nMicrosoft.Maui.ApplicationModel.Permissions.LaunchApp.LaunchApp() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LocationAlways\nMicrosoft.Maui.ApplicationModel.Permissions.LocationAlways.LocationAlways() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LocationWhenInUse\nMicrosoft.Maui.ApplicationModel.Permissions.LocationWhenInUse.LocationWhenInUse() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Maps\nMicrosoft.Maui.ApplicationModel.Permissions.Maps.Maps() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Media\nMicrosoft.Maui.ApplicationModel.Permissions.Media.Media() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Microphone\nMicrosoft.Maui.ApplicationModel.Permissions.Microphone.Microphone() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices\nMicrosoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices.NearbyWifiDevices() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.NetworkState\nMicrosoft.Maui.ApplicationModel.Permissions.NetworkState.NetworkState() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Phone\nMicrosoft.Maui.ApplicationModel.Permissions.Phone.Phone() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Photos\nMicrosoft.Maui.ApplicationModel.Permissions.Photos.Photos() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.PhotosAddOnly\nMicrosoft.Maui.ApplicationModel.Permissions.PhotosAddOnly.PhotosAddOnly() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.PostNotifications\nMicrosoft.Maui.ApplicationModel.Permissions.PostNotifications.PostNotifications() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Reminders\nMicrosoft.Maui.ApplicationModel.Permissions.Reminders.Reminders() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Sensors\nMicrosoft.Maui.ApplicationModel.Permissions.Sensors.Sensors() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Sms\nMicrosoft.Maui.ApplicationModel.Permissions.Sms.Sms() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Speech\nMicrosoft.Maui.ApplicationModel.Permissions.Speech.Speech() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.StorageRead\nMicrosoft.Maui.ApplicationModel.Permissions.StorageRead.StorageRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.StorageWrite\nMicrosoft.Maui.ApplicationModel.Permissions.StorageWrite.StorageWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Vibrate\nMicrosoft.Maui.ApplicationModel.Permissions.Vibrate.Vibrate() -> void\n```\n\n----------------------------------------\n\nTITLE: Base Permission Methods in C#\nDESCRIPTION: Abstract methods for checking and requesting permissions in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Task<PermissionStatus> CheckStatusAsync();\nabstract Task<PermissionStatus> RequestAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing XamlFilePathAttribute in C#\nDESCRIPTION: Defines the XamlFilePathAttribute class with a constructor and getter for the FilePath property.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.XamlFilePathAttribute.FilePath.get -> string\n~Microsoft.Maui.Controls.Xaml.XamlFilePathAttribute.XamlFilePathAttribute(string filePath = \"\") -> void\n```\n\n----------------------------------------\n\nTITLE: Permission Status Enumeration in Microsoft.Maui\nDESCRIPTION: Defines state values for permissions, indicating status like Denied or Granted. Part of the Microsoft.Maui.ApplicationModel.PermissionStatus enumeration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Denied = 1 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Granted = 3 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Limited = 5 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0 -> Microsoft.Maui.ApplicationModel.PermissionStatus\n```\n\n----------------------------------------\n\nTITLE: Getting Text from Attributed Text Block in C#\nDESCRIPTION: This snippet provides a getter method to retrieve the text of an attributed text block, returning a string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextBlock.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: Static Readonly TitleBarProperty (Window)\nDESCRIPTION: This code declares a static readonly `BindableProperty` named `TitleBarProperty` within the `Window` class. This property provides a way to access and bind to the TitleBar associated with a window in a MAUI application, enabling customization and control of the title bar's appearance and behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.Window.TitleBarProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Creating DevicePlatform in MAUI\nDESCRIPTION: This static method creates a DevicePlatform object from a string representation. DevicePlatform represents the operating system (e.g., iOS, Android). The input string specifies the device platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.DevicePlatform.Create(string devicePlatform) -> Microsoft.Maui.Devices.DevicePlatform\"\n```\n\n----------------------------------------\n\nTITLE: Service Collection Extensions\nDESCRIPTION: Extension methods for configuring Blazor WebView services in the dependency injection container.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BlazorWebViewServiceCollectionExtensions {\n    public static IServiceCollection AddBlazorWebViewDeveloperTools(this IServiceCollection services);\n    public static IMauiBlazorWebViewBuilder AddMauiBlazorWebView(this IServiceCollection services);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IMap in MAUI\nDESCRIPTION: This snippet details the IMap interface, defining methods for opening maps using coordinates or placemarks, allowing for location-based functionalities in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: PointF Operators in Microsoft.Maui.Graphics (C#)\nDESCRIPTION: Static operators for Microsoft.Maui.Graphics.PointF class that enable mathematical operations and equality comparisons between points, including subtraction, addition with size, and equality operators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PointF.operator -(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.PointF.operator !=(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic Microsoft.Maui.Graphics.PointF.operator +(Microsoft.Maui.Graphics.PointF pt, Microsoft.Maui.Graphics.SizeF sz) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.PointF.operator ==(Microsoft.Maui.Graphics.PointF ptA, Microsoft.Maui.Graphics.PointF ptB) -> bool\nstatic readonly Microsoft.Maui.Graphics.PointF.Zero -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: EmailMessage BodyFormat getter in MAUI\nDESCRIPTION: This property getter retrieves the body format of an email message. The body format specifies whether the body is plain text or HTML. This read/write property is of type EmailBodyFormat.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.BodyFormat.get -> Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat\"\n```\n\n----------------------------------------\n\nTITLE: App Information APIs in .NET MAUI\nDESCRIPTION: Static methods to access application information such as name, version, package details, and theme settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppInfo.BuildString.get -> string!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Current.get -> Microsoft.Maui.ApplicationModel.IAppInfo!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Name.get -> string!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.PackageName.get -> string!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nstatic Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Overriding SizeFTypeConverter Methods in .NET MAUI Graphics\nDESCRIPTION: These overrides for `SizeFTypeConverter` in the Microsoft.Maui.Graphics library define how to convert from and to `SizeF` types. The methods `CanConvertFrom`, `CanConvertTo`, `ConvertFrom`, and `ConvertTo` are overridden to provide custom conversion logic for `SizeF` objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\"\n```\n\n----------------------------------------\n\nTITLE: Overriding PointTypeConverter Methods in .NET MAUI Graphics\nDESCRIPTION: These overrides for `PointTypeConverter` in the Microsoft.Maui.Graphics library define how to convert from and to `Point` types. The methods `CanConvertFrom`, `CanConvertTo`, `ConvertFrom`, and `ConvertTo` are overridden to provide custom conversion logic for `Point` objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.PointTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Methods for ShapeView Handler in .NET MAUI\nDESCRIPTION: Static methods for mapping ShapeView properties including shape type, fill, stroke attributes and geometry.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing DatePickerHandler in MAUI\nDESCRIPTION: Defines constructors for the `DatePickerHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper.  The handler is responsible for handling platform-specific implementations of the DatePicker control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.DatePickerHandler.DatePickerHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Media Capture and Screenshot APIs in MAUI\nDESCRIPTION: Static methods for capturing photos, videos, and screenshots using MAUI's media capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.MediaPicker.CapturePhotoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.MediaPicker.CaptureVideoAsync(Microsoft.Maui.Media.MediaPickerOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\n```\n\n----------------------------------------\n\nTITLE: Starting Magnetometer Monitoring - C# .NET MAUI\nDESCRIPTION: Initiates monitoring of magnetometer data using a specified sensor speed. This method does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IMagnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\n```\n\n----------------------------------------\n\nTITLE: Font and Image Extension Methods for MAUI Graphics\nDESCRIPTION: Utility methods for font styling in SVG context and image conversion operations. Includes methods for converting images to base64 strings and byte arrays.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic string GetSvgStyle(this IFont font);\nstatic string GetSvgWeight(this IFont font);\nstatic string AsBase64(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\nstatic byte[] AsBytes(this IImage target, ImageFormat format = ImageFormat.Png, float quality = 1);\n```\n\n----------------------------------------\n\nTITLE: Defining PathF Class Methods in C#\nDESCRIPTION: This snippet shows various method definitions for the PathF class, which represents a path consisting of lines and curves.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF.AppendCircle(float cx, float cy, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendCircle(Microsoft.Maui.Graphics.PointF center, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(Microsoft.Maui.Graphics.RectF rect) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(float x, float y, float w, float h, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(Microsoft.Maui.Graphics.RectF rect, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float xCornerRadius, float yCornerRadius) -> void\n```\n\n----------------------------------------\n\nTITLE: ItemsView Handler Generic Implementation\nDESCRIPTION: Generic handler implementation for ItemsView with methods for mapping common properties like EmptyView, FlowDirection, and ScrollBarVisibility.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.MapEmptyView(Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView> handler, Microsoft.Maui.Controls.ItemsView itemsView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.MapFlowDirection(Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView> handler, Microsoft.Maui.Controls.ItemsView itemsView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.MapHorizontalScrollBarVisibility(Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView> handler, Microsoft.Maui.Controls.ItemsView itemsView) -> void\n```\n\n----------------------------------------\n\nTITLE: Get SKCanvas from SkiaCanvas\nDESCRIPTION: This property retrieves the SkiaSharp SKCanvas from a SkiaCanvas instance, facilitating drawing operations on the canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvas.Canvas.get -> SkiaSharp.SKCanvas\n```\n\n----------------------------------------\n\nTITLE: MAUI Hot Reload Helpers\nDESCRIPTION: Static methods for managing hot reload functionality in MAUI applications, including view registration and cache management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.HotReload.MauiHotReloadHelper.RegisterReplacedView(string! oldViewType, System.Type! newViewType) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining TextAlignment enum in C#\nDESCRIPTION: Declares an enumeration for text alignment options, including Center, End, and Start.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.TextAlignment\nMicrosoft.Maui.TextAlignment.Center = 1 -> Microsoft.Maui.TextAlignment\nMicrosoft.Maui.TextAlignment.End = 2 -> Microsoft.Maui.TextAlignment\nMicrosoft.Maui.TextAlignment.Start = 0 -> Microsoft.Maui.TextAlignment\n```\n\n----------------------------------------\n\nTITLE: Building Paths in .NET MAUI\nDESCRIPTION: This method builds a path based on a given string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathBuilder.BuildPath(string pathAsString) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting User Agent in Web View\nDESCRIPTION: Allows retrieval and modification of the user agent string used by the web view. The user agent can be customized based on application requirements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebView.UserAgent.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebView.UserAgent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Paint Utility Extensions in MAUI\nDESCRIPTION: Utility extension methods for Paint objects, including validation, color conversion, and drawable creation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToDrawable(this Microsoft.Maui.Graphics.Paint? paint, Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?\n```\n\n----------------------------------------\n\nTITLE: Map Extensions in MAUI ApplicationModel\nDESCRIPTION: Provides additional extensions to the existing map functionalities in the Microsoft MAUI framework for enhanced location services.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapExtensions\n```\n\n----------------------------------------\n\nTITLE: Canvas Drawing and Filling Methods in Microsoft.Maui.Graphics\nDESCRIPTION: Method signatures for drawing and filling various shapes on a canvas, including rectangles, circles, ellipses, arcs, and paths. These methods are part of the Microsoft.Maui.Graphics namespace used in .NET MAUI applications for cross-platform drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawString(string value, float x, float y, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.DrawText(Microsoft.Maui.Graphics.Text.IAttributedText value, float x, float y, float width, float height) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillColor.set -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.Font.set -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.FontColor.set -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformDrawPath(Microsoft.Maui.Graphics.PathF path) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.PlatformSetStrokeDashPattern(float[] strokePattern, float strokeDashOffset, float strokeSize) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformCanvas.StrokeColor.set -> void\n~override Microsoft.Maui.Graphics.Platform.PlatformGraphicsView.WillMoveToSuperview(UIKit.UIView newSuperview) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Menu Operations in Menu-related Handlers in C#\nDESCRIPTION: These static methods map various operations for Menu-related elements, such as Add, Clear, Insert, and Remove for MenuBar, MenuBarItem, MenuFlyout, and MenuFlyoutSubItem handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarItemHandler! handler, Microsoft.Maui.IMenuBarItem! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutHandler! handler, Microsoft.Maui.IMenuFlyout! menuElement, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Country from Locale in .NET MAUI\nDESCRIPTION: This property retrieves the country associated with a Locale instance, returning a string representing the country's identifier.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.Locale.Country.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Getting DateTimeOffset Values from MAUI Preferences\nDESCRIPTION: Static methods for retrieving DateTimeOffset values from preferences storage with optional shared name parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\n```\n\n----------------------------------------\n\nTITLE: Virtual ActivateWindow Method\nDESCRIPTION: This code snippet presents a virtual method `ActivateWindow` within the `Application` class. It likely serves as a hook or point of customization for handling window activation events within a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Application.ActivateWindow(Microsoft.Maui.Controls.Window! window) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining PathF Class in C#\nDESCRIPTION: Defines the PathF class with methods for creating and manipulating paths in the Microsoft.Maui.Graphics namespace. Includes methods for appending shapes, getting bounds, and transforming the path.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_69\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.AppendCircle(float cx, float cy, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendCircle(Microsoft.Maui.Graphics.PointF center, float r) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.PathF.AppendEllipse(Microsoft.Maui.Graphics.RectF rect) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(float x, float y, float w, float h, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRectangle(Microsoft.Maui.Graphics.RectF rect, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(float x, float y, float w, float h, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float cornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast = false) -> void\nMicrosoft.Maui.Graphics.PathF.AppendRoundedRectangle(Microsoft.Maui.Graphics.RectF rect, float xCornerRadius, float yCornerRadius) -> void\nMicrosoft.Maui.Graphics.PathF.Bounds.get -> Microsoft.Maui.Graphics.RectF\nMicrosoft.Maui.Graphics.PathF.Close() -> void\nMicrosoft.Maui.Graphics.PathF.Closed.get -> bool\nMicrosoft.Maui.Graphics.PathF.Count.get -> int\nMicrosoft.Maui.Graphics.PathF.Dispose() -> void\nMicrosoft.Maui.Graphics.PathF.FirstPoint.get -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.GetArcAngle(int aIndex) -> float\nMicrosoft.Maui.Graphics.PathF.GetArcClockwise(int aIndex) -> bool\nMicrosoft.Maui.Graphics.PathF.GetBoundsByFlattening(float flatness = 0.001) -> Microsoft.Maui.Graphics.RectF\nMicrosoft.Maui.Graphics.PathF.GetRotatedPoint(int pointIndex, Microsoft.Maui.Graphics.PointF pivotPoint, float angle) -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.GetSegmentForPoint(int pointIndex) -> int\nMicrosoft.Maui.Graphics.PathF.GetSegmentInfo(int segmentIndex, out int pointIndex, out int arcAngleIndex, out int arcClockwiseIndex) -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathF.GetSegmentPointIndex(int index) -> int\nMicrosoft.Maui.Graphics.PathF.GetSegmentType(int aIndex) -> Microsoft.Maui.Graphics.PathOperation\nMicrosoft.Maui.Graphics.PathF.Invalidate() -> void\nMicrosoft.Maui.Graphics.PathF.IsSubPathClosed(int subPathIndex) -> bool\nMicrosoft.Maui.Graphics.PathF.LastPoint.get -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.LastPointIndex.get -> int\nMicrosoft.Maui.Graphics.PathF.Move(float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.MovePoint(int index, float dx, float dy) -> void\nMicrosoft.Maui.Graphics.PathF.Open() -> void\nMicrosoft.Maui.Graphics.PathF.OperationCount.get -> int\nMicrosoft.Maui.Graphics.PathF.PathF() -> void\nMicrosoft.Maui.Graphics.PathF.PathF(float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.PathF(Microsoft.Maui.Graphics.PointF point) -> void\nMicrosoft.Maui.Graphics.PathF.RemoveAllSegmentsAfter(int segmentIndex) -> void\nMicrosoft.Maui.Graphics.PathF.RemoveSegment(int segmentIndex) -> void\nMicrosoft.Maui.Graphics.PathF.SegmentCountExcludingOpenAndClose.get -> int\nMicrosoft.Maui.Graphics.PathF.SetArcAngle(int aIndex, float aValue) -> void\nMicrosoft.Maui.Graphics.PathF.SetArcClockwise(int aIndex, bool aValue) -> void\nMicrosoft.Maui.Graphics.PathF.SetPoint(int index, float x, float y) -> void\nMicrosoft.Maui.Graphics.PathF.SetPoint(int index, Microsoft.Maui.Graphics.PointF point) -> void\nMicrosoft.Maui.Graphics.PathF.SubPathCount.get -> int\nMicrosoft.Maui.Graphics.PathF.this[int index].get -> Microsoft.Maui.Graphics.PointF\nMicrosoft.Maui.Graphics.PathF.Transform(System.Numerics.Matrix3x2 transform) -> void\n```\n\n----------------------------------------\n\nTITLE: NuGet Central Package Management Package References\nDESCRIPTION: This XML snippet shows how to reference packages in a .NET MAUI application's `.csproj` file when using NuGet's central package management (CPM). The `Version` attribute is intentionally left blank, as the package versions are managed centrally in the `Directory.Packages.props` file.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.Maui.Core\" />\n<PackageReference Include=\"Microsoft.Maui.Controls\" />\n<PackageReference Include=\"Microsoft.Maui.Essentials\" />\n<PackageReference Include=\"Microsoft.Maui.Resizetizer\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" />\n```\n\n----------------------------------------\n\nTITLE: ShareFileRequest Operations in MAUI DataTransfer\nDESCRIPTION: The 'ShareFileRequest' class operations enable initiating file-sharing requests, allowing specifications of files and titles. These provide a structured approach to handle file transfers within the MAUI platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.File.get -> Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.File.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile! file) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest.ShareFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing HybridWebView Handler Constructor\nDESCRIPTION: Constructor definitions for HybridWebViewHandler class that accepts optional property and command mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler() -> void\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Volume from Speech Options in .NET MAUI\nDESCRIPTION: Similar to pitch, this property allows getting or setting the volume level for the speech output, controlling how loud the synthesized speech will be.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.SpeechOptions.Volume.get -> float?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.SpeechOptions.Volume.set -> void\n```\n\n----------------------------------------\n\nTITLE: Property Mapping Virtual Methods in Microsoft.Maui\nDESCRIPTION: Virtual methods for property mapping in the Microsoft.Maui framework. These methods manage property caching, retrieval, and updates between handlers and views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_154\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.PropertyMapper.ClearKeyCache() -> void\nvirtual Microsoft.Maui.PropertyMapper.GetKeys() -> System.Collections.Generic.IEnumerable<string!>!\nvirtual Microsoft.Maui.PropertyMapper.GetProperty(string! key) -> System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?\nvirtual Microsoft.Maui.PropertyMapper.SetPropertyCore(string! key, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>! action) -> void\nvirtual Microsoft.Maui.PropertyMapper.UpdateKeys.get -> System.Collections.Generic.IReadOnlyCollection<string!>!\nvirtual Microsoft.Maui.PropertyMapper.UpdatePropertyCore(string! key, Microsoft.Maui.IElementHandler! viewHandler, Microsoft.Maui.IElement! virtualView) -> void\n```\n\n----------------------------------------\n\nTITLE: Email Extension Methods in .NET MAUI\nDESCRIPTION: Extension methods for the IEmail interface to provide simpler ways to compose emails. These methods extend the IEmail interface with convenience methods for composing emails with various parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email, string! subject, string! body, params string![]! to) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Communication.EmailExtensions.ComposeAsync(this Microsoft.Maui.ApplicationModel.Communication.IEmail! email) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Removing All Window Elements from Overlay\nDESCRIPTION: Clears all elements from the window overlay, allowing a fresh state for UI updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.RemoveWindowElements() -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Attributes from an Attributed Text Run in C#\nDESCRIPTION: This snippet provides a getter for retrieving the text attributes associated with an attributed text run, returning an ITextAttributes interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextRun.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes\n```\n\n----------------------------------------\n\nTITLE: Setting Font Size in W2DCanvas\nDESCRIPTION: This code sets the font size property in W2DCanvas, which affects text rendering size. It does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.FontSize.set -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar Content Property in C#\nDESCRIPTION: These code snippets represent accessing the Content property of the TitleBar, allowing to get or set the view displayed as content in the title bar. This can be any IView implementing class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Content.get -> Microsoft.Maui.IView?\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Content.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Font Color in Skia Canvas\nDESCRIPTION: Sets the font color for all subsequent text rendering, contributing to flexible and adaptive user interface design through color customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.FontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: RectangleGridAdorner Implementation in C#\nDESCRIPTION: RectangleGridAdorner extends RectangleAdorner to create grid-like visual decorations. It helps visualize grid layouts or provide grid-like visual guides for MAUI views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.RectangleGridAdorner\nMicrosoft.Maui.RectangleGridAdorner.RectangleGridAdorner(Microsoft.Maui.IView! view, float density = 1, Microsoft.Maui.Graphics.Point? offset = null, Microsoft.Maui.Graphics.Color? fillColor = null, Microsoft.Maui.Graphics.Color? strokeColor = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive that enables nullable reference type checking, making the compiler warn about potential null reference issues. This setting affects the scope of the file it appears in.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Getting Shadow Offset from W2DCanvasState\nDESCRIPTION: This snippet provides access to the shadow offset property, which returns a System.Numerics.Vector2 type. This is important for determining the displacement of shadows in graphical objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DCanvasState.ShadowOffset.get -> System.Numerics.Vector2\n```\n\n----------------------------------------\n\nTITLE: Platform Type Conversion Extensions\nDESCRIPTION: Extension methods for converting between MAUI primitive types and their Windows platform equivalents, such as Point, Thickness, and Size conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.PrimitiveExtensions.ToPlatform(this Microsoft.Maui.Graphics.Point point) -> Windows.Foundation.Point\n```\n\n----------------------------------------\n\nTITLE: Defining WeakEventManager class in C#\nDESCRIPTION: Declares a class for managing weak events, including methods for adding and removing event handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.WeakEventManager\nMicrosoft.Maui.WeakEventManager.AddEventHandler(System.Delegate? handler, string! eventName = \"\") -> void\nMicrosoft.Maui.WeakEventManager.AddEventHandler<TEventArgs>(System.EventHandler<TEventArgs!>! handler, string! eventName = \"\") -> void\nMicrosoft.Maui.WeakEventManager.HandleEvent(object? sender, object? args, string! eventName) -> void\nMicrosoft.Maui.WeakEventManager.RemoveEventHandler(System.Delegate? handler, string! eventName = \"\") -> void\nMicrosoft.Maui.WeakEventManager.RemoveEventHandler<TEventArgs>(System.EventHandler<TEventArgs!>! handler, string! eventName = \"\") -> void\nMicrosoft.Maui.WeakEventManager.WeakEventManager() -> void\n```\n\n----------------------------------------\n\nTITLE: CollectionView Handler Property Mapping\nDESCRIPTION: Static methods for mapping CollectionView properties including reordering, templates, grouping, and selection in MAUI CollectionViewHandler2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.MapCanReorderItems(Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2 handler, Microsoft.Maui.Controls.ReorderableItemsView itemsView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.MapFooterTemplate(Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2 handler, Microsoft.Maui.Controls.StructuredItemsView itemsView) -> void\nstatic Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2.MapHeaderTemplate(Microsoft.Maui.Controls.Handlers.Items2.CollectionViewHandler2 handler, Microsoft.Maui.Controls.StructuredItemsView itemsView) -> void\n```\n\n----------------------------------------\n\nTITLE: Size Conversion Extensions between MAUI and Android\nDESCRIPTION: Extension methods for converting size objects between MAUI and Android. These methods enable consistent size representations across platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsSize(this Android.Util.SizeF target) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.Platform.GraphicsExtensions.AsSizeF(this Android.Util.SizeF target) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshViewHandler Mappers and Methods in MAUI (C#)\nDESCRIPTION: Static properties and methods for the RefreshViewHandler, including command and property mappers, and methods for mapping content, refresh state, color, and background.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshViewBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Style Property for StyleableElement\nDESCRIPTION: Defines the get accessor for the Style property in StyleableElement, allowing retrieval of the style applied to the element.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.Style.get -> Microsoft.Maui.Controls.Style?\n```\n\n----------------------------------------\n\nTITLE: SolidColorBrush Getters for Grey Tones in C#\nDESCRIPTION: Static property getters that return predefined SolidColorBrush objects for various shades of grey. These provide convenient access to commonly used grey colors in the application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Brush.DarkGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n~static Microsoft.Maui.Controls.Brush.DarkSlateGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n~static Microsoft.Maui.Controls.Brush.DimGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n~static Microsoft.Maui.Controls.Brush.Grey.get -> Microsoft.Maui.Controls.SolidColorBrush\n~static Microsoft.Maui.Controls.Brush.LightGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n~static Microsoft.Maui.Controls.Brush.LightSlateGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n~static Microsoft.Maui.Controls.Brush.SlateGrey.get -> Microsoft.Maui.Controls.SolidColorBrush\n```\n\n----------------------------------------\n\nTITLE: Defining IPdfPage Interface in C#\nDESCRIPTION: Defines the IPdfPage interface with properties for Height, PageNumber, and Width in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPdfPage\nMicrosoft.Maui.Graphics.IPdfPage.Height.get -> float\nMicrosoft.Maui.Graphics.IPdfPage.PageNumber.get -> int\nMicrosoft.Maui.Graphics.IPdfPage.Width.get -> float\n```\n\n----------------------------------------\n\nTITLE: Accessing TitleBar Title Property in C#\nDESCRIPTION: These code snippets represent accessing the Title property of the TitleBar, allowing to get or set the main title text displayed in the title bar. The type is string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Title.get -> string!\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.TitleBar.Title.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: AppAction Id setter in MAUI\nDESCRIPTION: This property setter sets the unique identifier of the AppAction. This is a read/write property. The identifier is a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.Id.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Blazor WebView Root Components and Collections\nDESCRIPTION: Definitions for managing root components in a Blazor WebView, including component registration and parameter handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/WindowsForms/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class RootComponent {\n    public Type ComponentType { get; }\n    public IDictionary<string, object?>? Parameters { get; }\n    public string Selector { get; }\n    public RootComponent(string selector, Type componentType, IDictionary<string, object?>? parameters);\n}\n\npublic class RootComponentsCollection {\n    public JSComponentConfigurationStore JSComponents { get; }\n    public RootComponentsCollection();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Converters for MAUI Components in C#\nDESCRIPTION: This snippet shows the method signatures for various type converters used in MAUI. These converters handle conversion between different types for components like Easing, FlexAlign, and Thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Implementing MauiEmbeddedApp Extension Methods\nDESCRIPTION: Extension methods for configuring embedded MAUI applications, providing both parameterized and parameter-less overloads for app initialization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Network Connectivity Access in .NET MAUI\nDESCRIPTION: This property retrieves the current network access status, indicating whether the device is connected to the internet or is facing connectivity issues.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Networking.Connectivity.IConnectivity.NetworkAccess.get -> Microsoft.Maui.Networking.NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Color Manipulation Methods\nDESCRIPTION: Extension methods for color manipulation including alpha, luminosity, saturation and hex conversion operations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Color {\n    Color AddLuminosity(float delta);\n    Color WithAlpha(float alpha);\n    Color WithHue(float hue);\n    Color WithSaturation(float saturation);\n    string ToHex(bool includeAlpha = false);\n    string ToArgbHex(bool includeAlpha = false);\n}\n```\n\n----------------------------------------\n\nTITLE: App Action Classes and Event Arguments in C#\nDESCRIPTION: Definitions for AppAction class and related event arguments in the Microsoft.Maui.ApplicationModel namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.AppAction\nMicrosoft.Maui.ApplicationModel.AppAction.AppAction(string! id, string! title, string? subtitle = null, string? icon = null) -> void\nMicrosoft.Maui.ApplicationModel.AppAction.Id.get -> string!\nMicrosoft.Maui.ApplicationModel.AppAction.Id.set -> void\nMicrosoft.Maui.ApplicationModel.AppAction.Subtitle.get -> string?\nMicrosoft.Maui.ApplicationModel.AppAction.Subtitle.set -> void\nMicrosoft.Maui.ApplicationModel.AppAction.Title.get -> string!\nMicrosoft.Maui.ApplicationModel.AppAction.Title.set -> void\nMicrosoft.Maui.ApplicationModel.AppActionEventArgs\nMicrosoft.Maui.ApplicationModel.AppActionEventArgs.AppAction.get -> Microsoft.Maui.ApplicationModel.AppAction!\nMicrosoft.Maui.ApplicationModel.AppActionEventArgs.AppActionEventArgs(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding MauiApplication Lifecycle Methods for Tizen Platform\nDESCRIPTION: These methods override the MauiApplication lifecycle methods to handle Tizen-specific application events and states, including creation, pausing, resuming, and termination.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.MauiApplication.OnAppControlReceived(Tizen.Applications.AppControlReceivedEventArgs! e) -> void\noverride Microsoft.Maui.MauiApplication.OnCreate() -> void\noverride Microsoft.Maui.MauiApplication.OnDeviceOrientationChanged(Tizen.Applications.DeviceOrientationEventArgs! e) -> void\noverride Microsoft.Maui.MauiApplication.OnLocaleChanged(Tizen.Applications.LocaleChangedEventArgs! e) -> void\noverride Microsoft.Maui.MauiApplication.OnLowBattery(Tizen.Applications.LowBatteryEventArgs! e) -> void\noverride Microsoft.Maui.MauiApplication.OnLowMemory(Tizen.Applications.LowMemoryEventArgs! e) -> void\noverride Microsoft.Maui.MauiApplication.OnPause() -> void\noverride Microsoft.Maui.MauiApplication.OnPreCreate() -> void\noverride Microsoft.Maui.MauiApplication.OnRegionFormatChanged(Tizen.Applications.RegionFormatChangedEventArgs! e) -> void\noverride Microsoft.Maui.MauiApplication.OnResume() -> void\noverride Microsoft.Maui.MauiApplication.OnTerminate() -> void\n```\n\n----------------------------------------\n\nTITLE: Dimension Utility Methods\nDESCRIPTION: Static utility methods for handling dimension values in MAUI. These methods check if dimension values are explicitly set, determine minimum/maximum constraints, and resolve minimum values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Primitives.Dimension.IsExplicitSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.IsMaximumSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.IsMinimumSet(double value) -> bool\nstatic Microsoft.Maui.Primitives.Dimension.ResolveMinimum(double value) -> double\n```\n\n----------------------------------------\n\nTITLE: Implementing XAML Loading Extensions in C#\nDESCRIPTION: Defines extension methods for loading XAML content from strings or types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, string xaml) -> TXaml\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, System.Type callingType) -> TXaml\n```\n\n----------------------------------------\n\nTITLE: Template Binding Extension Properties in MAUI\nDESCRIPTION: Property accessors for TypedBinding in TemplateBindingExtension class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n```\n\n----------------------------------------\n\nTITLE: TextColors Parsing Methods and Standards in Microsoft.Maui.Graphics\nDESCRIPTION: Extension methods for color string parsing and a static dictionary of standard colors. These utilities convert color strings to float or integer arrays for use in graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.ParseAsInts(this string color) -> int[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.StandardColors -> System.Collections.Generic.Dictionary<string, string>\n```\n\n----------------------------------------\n\nTITLE: BlazorWebView Handler Implementation\nDESCRIPTION: Handler class for managing platform-specific implementation of BlazorWebView, including creation and disposal of WKWebView for iOS/macOS platforms.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class BlazorWebViewHandler {\n    protected override WKWebView CreatePlatformView();\n    protected override void DisconnectHandler(WKWebView platformView);\n    public static PropertyMapper<IBlazorWebView, BlazorWebViewHandler> BlazorWebViewMapper;\n    public static void MapHostPage(BlazorWebViewHandler handler, IBlazorWebView webView);\n    public static void MapRootComponents(BlazorWebViewHandler handler, IBlazorWebView webView);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing C# Keywords in XML Documentation\nDESCRIPTION: Example of using the see langword tag to reference C# keywords in XML documentation.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/CodeDocumentationGuidelines.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<see langword=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining ITransform Interface in C#\nDESCRIPTION: This snippet defines the ITransform interface in the Microsoft.Maui namespace. It includes properties for scaling and translation transformations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ITransform.Scale.get -> double\nMicrosoft.Maui.ITransform.ScaleX.get -> double\nMicrosoft.Maui.ITransform.ScaleY.get -> double\nMicrosoft.Maui.ITransform.TranslationX.get -> double\nMicrosoft.Maui.ITransform.TranslationY.get -> double\n```\n\n----------------------------------------\n\nTITLE: Mapping Stepper Properties in C#\nDESCRIPTION: Static methods for mapping properties of Stepper control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.StepperHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\nstatic Microsoft.Maui.Handlers.StepperHandler.MapIncrement(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMaximum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.MapMinimum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\nstatic Microsoft.Maui.Handlers.StepperHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStepper!, Microsoft.Maui.Handlers.IStepperHandler!>!\nstatic Microsoft.Maui.Handlers.StepperHandler.MapValue(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IStepper! stepper) -> void\n```\n\n----------------------------------------\n\nTITLE: Measuring String Size with Attributes\nDESCRIPTION: Calculates the rendered size of a string with specified font attributes and alignment, assisting in layout calculations and dynamic positioning of text in graphics contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: MapSpan Equality Operator in MAUI Maps\nDESCRIPTION: Static equality operator that compares two MapSpan instances for equality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Overriding Switch, TabbedView, and TimePicker Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for SwitchHandler, TabbedViewHandler, and TimePickerHandler classes that manage platform view creation, handler connection/disconnection, and container needs for switches, tabbed layouts, and time pickers in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SwitchHandler.ConnectHandler(UIKit.UISwitch! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.CreatePlatformView() -> UIKit.UISwitch!\noverride Microsoft.Maui.Handlers.SwitchHandler.DisconnectHandler(UIKit.UISwitch! platformView) -> void\noverride Microsoft.Maui.Handlers.SwitchHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.TabbedViewHandler.CreatePlatformView() -> UIKit.UIView!\noverride Microsoft.Maui.Handlers.TimePickerHandler.ConnectHandler(UIKit.UIDatePicker! platformView) -> void\noverride Microsoft.Maui.Handlers.TimePickerHandler.CreatePlatformView() -> UIKit.UIDatePicker!\noverride Microsoft.Maui.Handlers.TimePickerHandler.DisconnectHandler(UIKit.UIDatePicker! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Pitch from Speech Options in .NET MAUI\nDESCRIPTION: This property retrieves the pitch setting for speech synthesis, which can be adjusted to vary the tone of the spoken text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.SpeechOptions.Pitch.get -> float?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.SpeechOptions.Pitch.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing ShareMultipleFilesRequest in MAUI\nDESCRIPTION: This snippet defines the ShareMultipleFilesRequest class and various constructors that facilitate sharing multiple files with optional titles. It allows the handling of collections of files for sharing in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Using FileSystem API\nDESCRIPTION: C# code demonstrating how to access deployed assets at runtime using the FileSystem API. The example shows opening a file asynchronously, reading its contents with a StreamReader, and storing the content in a string variable.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/samples/Controls.Sample.Embedding/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: EmbeddedFont Class Methods - C#\nDESCRIPTION: Outlines the methods for the EmbeddedFont class to manage font properties such as name and resource stream, enabling custom font handling in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.EmbeddedFont.EmbeddedFont() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.EmbeddedFont.FontName.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.EmbeddedFont.FontName.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.EmbeddedFont.ResourceStream.get -> System.IO.Stream?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.EmbeddedFont.ResourceStream.set -> void\n```\n\n----------------------------------------\n\nTITLE: Platform View Creation Override\nDESCRIPTION: Override method for creating the platform-specific view implementation in HybridWebViewHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.CreatePlatformView() -> object!\n```\n\n----------------------------------------\n\nTITLE: Transformation Extensions for Android Views in .NET MAUI\nDESCRIPTION: Extension methods for applying transformations to Android Views based on MAUI IView properties. These methods handle rotation, scaling, translation, and transform anchor point positioning.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_179\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateAnchorX(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateAnchorY(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateRotation(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateRotationX(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateRotationY(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateScale(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateScaleX(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateScaleY(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateTranslationX(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Platform.TransformationExtensions.UpdateTranslationY(this Android.Views.View! platformView, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Handler Class Method Definitions\nDESCRIPTION: Virtual method definitions for MAUI element and view handlers that manage platform-specific view implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Handlers.ElementHandler.Invoke(string! command, object? args) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetMauiContext(Microsoft.Maui.IMauiContext! mauiContext) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\nvirtual Microsoft.Maui.Handlers.ElementHandler.UpdateValue(string! property) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Type Converter Declarations\nDESCRIPTION: Type converter class method declarations for handling various MAUI types including Easing, FlexLayout properties, and Thickness. Each converter implements standard TypeConverter methods for type conversion and validation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining IView Interface in C#\nDESCRIPTION: This snippet defines the IView interface with properties and methods for UI element manipulation, including layout, focus, and styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IView\nMicrosoft.Maui.IView.Arrange(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.AutomationId.get -> string!\nMicrosoft.Maui.IView.Background.get -> Microsoft.Maui.Graphics.Paint?\nMicrosoft.Maui.IView.Clip.get -> Microsoft.Maui.Graphics.IShape?\nMicrosoft.Maui.IView.DesiredSize.get -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IView.Focus() -> bool\nMicrosoft.Maui.IView.Frame.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.IView.Frame.set -> void\nMicrosoft.Maui.IView.Handler.get -> Microsoft.Maui.IViewHandler?\nMicrosoft.Maui.IView.Handler.set -> void\nMicrosoft.Maui.IView.Height.get -> double\nMicrosoft.Maui.IView.HorizontalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.InputTransparent.get -> bool\nMicrosoft.Maui.IView.InvalidateArrange() -> void\nMicrosoft.Maui.IView.InvalidateMeasure() -> void\nMicrosoft.Maui.IView.IsEnabled.get -> bool\nMicrosoft.Maui.IView.IsFocused.get -> bool\nMicrosoft.Maui.IView.IsFocused.set -> void\nMicrosoft.Maui.IView.Margin.get -> Microsoft.Maui.Thickness\nMicrosoft.Maui.IView.MaximumHeight.get -> double\nMicrosoft.Maui.IView.MaximumWidth.get -> double\nMicrosoft.Maui.IView.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IView.MinimumHeight.get -> double\nMicrosoft.Maui.IView.MinimumWidth.get -> double\nMicrosoft.Maui.IView.Opacity.get -> double\nMicrosoft.Maui.IView.Semantics.get -> Microsoft.Maui.Semantics?\nMicrosoft.Maui.IView.Shadow.get -> Microsoft.Maui.IShadow?\nMicrosoft.Maui.IView.Unfocus() -> void\nMicrosoft.Maui.IView.VerticalLayoutAlignment.get -> Microsoft.Maui.Primitives.LayoutAlignment\nMicrosoft.Maui.IView.Visibility.get -> Microsoft.Maui.Visibility\nMicrosoft.Maui.IView.Width.get -> double\nMicrosoft.Maui.IView.ZIndex.get -> int\n```\n\n----------------------------------------\n\nTITLE: Clearing Tizen Image in MAUI\nDESCRIPTION: This extension method clears the content of a Tizen Image control. It's used to reset or remove the image displayed in a MAUI application on the Tizen platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ImageExtensions.Clear(this Tizen.UIExtensions.NUI.Image! platformImage) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IAppleSignInAuthenticator Interface in C#\nDESCRIPTION: Defines the IAppleSignInAuthenticator interface with a method for authenticating with Apple Sign-In.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Authentication.IAppleSignInAuthenticator\nMicrosoft.Maui.Authentication.IAppleSignInAuthenticator.AuthenticateAsync(Microsoft.Maui.Authentication.AppleSignInAuthenticator.Options? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Authentication.WebAuthenticatorResult!>!\n```\n\n----------------------------------------\n\nTITLE: AttributedTextRunComparer Instance in MAUI Graphics\nDESCRIPTION: A static readonly instance of the AttributedTextRunComparer class in the Microsoft.Maui.Graphics.Text namespace. This comparer is likely used for comparing text runs with attributes for text layout and rendering operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n~static readonly Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Instance -> Microsoft.Maui.Graphics.Text.AttributedTextRunComparer\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Extension Properties in MAUI XAML\nDESCRIPTION: Property definitions for OnPlatformExtension class that handles platform-specific value assignments in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Android.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.Android.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.iOS.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.iOS.set -> void\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.WinUI.get -> object\n~Microsoft.Maui.Controls.Xaml.OnPlatformExtension.WinUI.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping GraphicsView Properties in Microsoft.Maui\nDESCRIPTION: Static methods from GraphicsViewHandler class that map various IGraphicsView properties to platform-specific implementations. These methods handle drawing, flow direction, and redrawing (invalidation) for the GraphicsView control.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing CRC64 Hash Computation in MAUI (C#)\nDESCRIPTION: These static methods of the Crc64 class provide functionality to compute CRC64 hashes for byte arrays, streams, and strings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Crc64.ComputeHash(byte[]! input) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHash(System.IO.Stream! inputStream) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHashString(string! input) -> string!\n```\n\n----------------------------------------\n\nTITLE: Creating Font Copy in Skia Extensions\nDESCRIPTION: Extension method to create a copy of a SkiaSharp font with null safety handling\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive to enable nullable reference type checking at the file level. This enforces compile-time null-safety checks for reference types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Energy Saver Status Enumeration in MAUI\nDESCRIPTION: Enumeration representing the device's energy saver mode status in MAUI applications. Includes Unknown, On, and Off states.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.EnergySaverStatus.Unknown = 0 -> Microsoft.Maui.Devices.EnergySaverStatus\nMicrosoft.Maui.Devices.EnergySaverStatus.On = 1 -> Microsoft.Maui.Devices.EnergySaverStatus\nMicrosoft.Maui.Devices.EnergySaverStatus.Off = 2 -> Microsoft.Maui.Devices.EnergySaverStatus\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Window Overlay\nDESCRIPTION: Handles the deinitialization process of a window overlay, typically used to clean up state or resources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.Deinitialize() -> bool\n```\n\n----------------------------------------\n\nTITLE: Get SKBitmap from SkiaBitmapExportContext\nDESCRIPTION: This property gets the underlying SkiaSharp SKBitmap from a SkiaBitmapExportContext. It provides direct access to the bitmap, which is useful for rendering operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaBitmapExportContext.Bitmap.get -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters in XML Documentation\nDESCRIPTION: Example of using the paramref tag to reference parameters in XML documentation, which creates links in IntelliSense and online API docs.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/CodeDocumentationGuidelines.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<paramref name=\"parameterName\"/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IIndicatorViewHandler in MAUI\nDESCRIPTION: Defines properties for the `IIndicatorViewHandler` interface in MAUI, providing access to the platform view and virtual view for an IndicatorView. The PlatformView exposes the underlying platform-specific view, while VirtualView represents the .NET MAUI IndicatorView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IIndicatorViewHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IIndicatorViewHandler.VirtualView.get -> Microsoft.Maui.IIndicatorView!\"\n```\n\n----------------------------------------\n\nTITLE: Defining HybridWebViewRawMessageReceivedEventArgs Class\nDESCRIPTION: Defines event arguments for the RawMessageReceived event in HybridWebView that exposes the raw message content received from JavaScript.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs.HybridWebViewRawMessageReceivedEventArgs(string? message) -> void\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs.Message.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Filling Paths in PictureCanvas\nDESCRIPTION: This snippet outlines the FillPath method in the PictureCanvas class for filling a specified path with the current paint's settings and a winding mode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n```\n\n----------------------------------------\n\nTITLE: PlatformImage Implementation in C#\nDESCRIPTION: Defines the PlatformImage class in Microsoft.Maui.Graphics.Platform for platform-specific image handling. Provides properties for image dimensions and disposal method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.PlatformImage\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Dispose() -> void\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Height.get -> float\nMicrosoft.Maui.Graphics.Platform.PlatformImage.Width.get -> float\n```\n\n----------------------------------------\n\nTITLE: Initializing SwipeItemButton in C#\nDESCRIPTION: Constructor for SwipeItemButton class and declaration of FrameChanged event.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.SwipeItemButton.FrameChanged -> System.EventHandler?\nMicrosoft.Maui.Handlers.SwipeItemButton.SwipeItemButton() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ILayoutManager Interface in C# for MAUI Layouts\nDESCRIPTION: Declares the ILayoutManager interface with methods for arranging children and measuring layout constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.ILayoutManager\nMicrosoft.Maui.Layouts.ILayoutManager.ArrangeChildren(Microsoft.Maui.Graphics.Rect bounds) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.Layouts.ILayoutManager.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Defining ICanvas Interface Methods in C#\nDESCRIPTION: Interface definition for canvas operations in MAUI graphics, including drawing shapes, transformations, and state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.ICanvas\nMicrosoft.Maui.Graphics.ICanvas.Alpha.set -> void\nMicrosoft.Maui.Graphics.ICanvas.Antialias.set -> void\nMicrosoft.Maui.Graphics.ICanvas.BlendMode.set -> void\nMicrosoft.Maui.Graphics.ICanvas.ClipRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\nMicrosoft.Maui.Graphics.ICanvas.DisplayScale.get -> float\nMicrosoft.Maui.Graphics.ICanvas.DisplayScale.set -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillEllipse(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.ICanvas.FontSize.set -> void\nMicrosoft.Maui.Graphics.ICanvas.MiterLimit.set -> void\nMicrosoft.Maui.Graphics.ICanvas.ResetState() -> void\nMicrosoft.Maui.Graphics.ICanvas.RestoreState() -> bool\nMicrosoft.Maui.Graphics.ICanvas.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.ICanvas.Rotate(float degrees) -> void\nMicrosoft.Maui.Graphics.ICanvas.SaveState() -> void\nMicrosoft.Maui.Graphics.ICanvas.Scale(float sx, float sy) -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeDashOffset.set -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeLineCap.set -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeLineJoin.set -> void\nMicrosoft.Maui.Graphics.ICanvas.StrokeSize.set -> void\nMicrosoft.Maui.Graphics.ICanvas.SubtractFromClip(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.ICanvas.Translate(float tx, float ty) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for .NET MAUI\nDESCRIPTION: This directive enables nullable reference types for the entire project or file scope. It allows the compiler to perform static analysis to help prevent null reference exceptions by distinguishing between nullable and non-nullable reference types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Support for PointFTypeConverter in C#\nDESCRIPTION: This snippet overrides methods for the PointFTypeConverter to handle conversions related to point floating type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\n```\n\n----------------------------------------\n\nTITLE: Loading Image from Stream with Format Hint\nDESCRIPTION: Generates an image from a given stream, optionally using a format hint for more accurate conversion, ensuring flexible image import within applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImageLoadingService.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Location Equality Operator in MAUI\nDESCRIPTION: This static operator overload defines the equality (==) operator for the Location struct. It compares two Location objects and returns true if they are equal, and false otherwise. This likely compares the latitude and longitude values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.Sensors.Location.operator ==(Microsoft.Maui.Devices.Sensors.Location left, Microsoft.Maui.Devices.Sensors.Location right) -> bool\"\n```\n\n----------------------------------------\n\nTITLE: EmailMessage Bcc getter in MAUI\nDESCRIPTION: This property getter retrieves the list of BCC (Blind Carbon Copy) recipients for an email message.  It returns a List of strings, each representing an email address. The list can be null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Bcc.get -> System.Collections.Generic.List<string!>?\"\n```\n\n----------------------------------------\n\nTITLE: MapSpan Inequality Operator Overload\nDESCRIPTION: Static operator overload for inequality comparison between two MapSpan instances, allowing null values\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator !=(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API - Transformation Implementation Methods\nDESCRIPTION: Implements concrete transformation methods for AbstractCanvas<TState> that call the abstract platform methods defined earlier.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.Translate(float tx, float ty) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.Rotate(float degrees) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.Rotate(float degrees, float x, float y) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.Scale(float fx, float fy) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.ConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Feature Permission Classes in .NET MAUI\nDESCRIPTION: Various permission classes for device features and capabilities, each representing a specific permission type that can be requested from users.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.Battery.Battery() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Bluetooth.Bluetooth() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarRead.CalendarRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.CalendarWrite.CalendarWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Camera.Camera() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsRead.ContactsRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.ContactsWrite.ContactsWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Flashlight.Flashlight() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LaunchApp.LaunchApp() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LocationAlways.LocationAlways() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.LocationWhenInUse.LocationWhenInUse() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Maps.Maps() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Media.Media() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Microphone.Microphone() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.NearbyWifiDevices.NearbyWifiDevices() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.NetworkState.NetworkState() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Phone.Phone() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Photos.Photos() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.PhotosAddOnly.PhotosAddOnly() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.PostNotifications.PostNotifications() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Reminders.Reminders() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Sensors.Sensors() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Sms.Sms() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Speech.Speech() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.StorageRead.StorageRead() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.StorageWrite.StorageWrite() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.Vibrate.Vibrate() -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Shadow in PictureCanvas in .NET MAUI\nDESCRIPTION: This method sets a shadow effect for drawing in the PictureCanvas with defined offset and color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.SetShadow(Microsoft.Maui.Graphics.SizeF offset, float blur, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: Utilizing Barometer Sensor in .NET MAUI - C#\nDESCRIPTION: This snippet accesses functionalities of the barometer sensor within .NET MAUI. Provided methods allow the developer to start and stop monitoring of pressure changes and check if the sensor is supported.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Default.get -> Microsoft.Maui.Devices.Sensors.IBarometer!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsMonitoring.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsSupported.get -> bool\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing on Canvas with Paint Pattern in .NET MAUI\nDESCRIPTION: This method allows drawing a specified paint pattern on a given canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Type Converter Method Signatures\nDESCRIPTION: Method signatures for various MAUI type converters including EasingTypeConverter, FlexTypeConverters, and ThicknessTypeConverter. These converters handle data type conversions for MAUI UI properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Converters.EasingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Converters.EasingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n```\n\n----------------------------------------\n\nTITLE: Mapping ImageButton Properties in MAUI\nDESCRIPTION: Static methods for mapping properties of an ImageButton control, including corner radius, padding, stroke color, and stroke thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_90\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapPadding(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Handlers.ImageButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IImageButtonHandler! handler, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Font in SkiaCanvasState in C#\nDESCRIPTION: These methods provide getters and setters for the font within a SkiaCanvasState. They allow for accessing the current font and assigning new fonts to the canvas state. The expected input is a SkiaSharp.SKFont, and the setter does not return a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Location Comparison Operators\nDESCRIPTION: Operator overloads for comparing Location objects in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Location.operator !=(Location left, Location right) -> bool\nstatic Location.operator ==(Location left, Location right) -> bool\n```\n\n----------------------------------------\n\nTITLE: TimePicker Extensions for iOS\nDESCRIPTION: Extension methods for handling time picker formatting and updates in iOS platform implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TimeExtensions.ToFormattedString(this Microsoft.Maui.ITimePicker! timePicker) -> string!\nstatic Microsoft.Maui.Platform.TimePickerExtensions.UpdateFormat(this Microsoft.Maui.Platform.MauiTimePicker! mauiTimePicker, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: WinUI Panel Children Access\nDESCRIPTION: Deprecated Panel.Children property access due to performance concerns. Use MauiPanel.CachedChildren for better performance when accessing panel children.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/BannedSymbols.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.UI.Xaml.Controls.Panel.Children\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutDirection Enum in C#\nDESCRIPTION: Defines the LayoutDirection enum with values for different layout directions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.LayoutDirection\nMicrosoft.Maui.ApplicationModel.LayoutDirection.LeftToRight = 1 -> Microsoft.Maui.ApplicationModel.LayoutDirection\nMicrosoft.Maui.ApplicationModel.LayoutDirection.RightToLeft = 2 -> Microsoft.Maui.ApplicationModel.LayoutDirection\nMicrosoft.Maui.ApplicationModel.LayoutDirection.Unknown = 0 -> Microsoft.Maui.ApplicationModel.LayoutDirection\n```\n\n----------------------------------------\n\nTITLE: Handling Window Deactivation\nDESCRIPTION: Interface method invoked when the window is deactivated, which can be used for cleanup or state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Deactivated() -> void\n```\n\n----------------------------------------\n\nTITLE: Saving State in W2DCanvas\nDESCRIPTION: This method saves the current canvas state in W2DCanvas, allowing restoration later. It does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.SaveState() -> void\n```\n\n----------------------------------------\n\nTITLE: Permission Management API\nDESCRIPTION: Static methods for checking and requesting permissions in MAUI applications, including status checks and rationale display.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Permissions.CheckStatusAsync<TPermission>() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\nstatic Microsoft.Maui.ApplicationModel.Permissions.RequestAsync<TPermission>() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\nstatic Microsoft.Maui.ApplicationModel.Permissions.ShouldShowRationale<TPermission>() -> bool\n```\n\n----------------------------------------\n\nTITLE: FilePickerFileType Constants and Methods in .NET MAUI\nDESCRIPTION: Static readonly fields and methods from the Microsoft.Maui.Storage.FilePickerFileType class for handling common file types in file pickers. Includes predefined file types and a method to get platform-specific file type representations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!\nvirtual Microsoft.Maui.Storage.FilePickerFileType.GetPlatformFileType(Microsoft.Maui.Devices.DevicePlatform platform) -> System.Collections.Generic.IEnumerable<string!>!\n```\n\n----------------------------------------\n\nTITLE: Defining IPattern Interface in C#\nDESCRIPTION: The IPattern interface defines properties for pattern dimensions and step sizes in graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPattern\nMicrosoft.Maui.Graphics.IPattern.Height.get -> float\nMicrosoft.Maui.Graphics.IPattern.StepX.get -> float\nMicrosoft.Maui.Graphics.IPattern.StepY.get -> float\nMicrosoft.Maui.Graphics.IPattern.Width.get -> float\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions PreferredControlColor getter in MAUI\nDESCRIPTION: This property getter retrieves the preferred control color for the browser. This allows customizing the color of the browser's controls, if supported. It is a read/write nullable property of type Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredControlColor.get -> Microsoft.Maui.Graphics.Color?\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Layout Measurement Flow in MAUI\nDESCRIPTION: Mermaid sequence diagram illustrating the measurement process for layouts with multiple child views, showing interaction between Platform, Layout Backing View, Cross-Platform Layout and Child Views.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant P as Platform\n    participant BV as Layout Backing View\n    participant XV as Cross-Platform Layout\n    participant C as Child View\n    P->>BV: Measure\n    BV->>XV: Cross-Platform Measure\n    loop Each Child\n        XV->>C: Measure\n        C->>XV: DesiredSize\n    end\n    Note over XV: Update DesiredSize\n    XV->>BV: DesiredSize\n    Note over BV: Internal bookkeeping (e.g. SetMeasuredDimension())\n    BV->>P: Size\n```\n\n----------------------------------------\n\nTITLE: Defining UrlLoadingStrategy Enum in C#\nDESCRIPTION: Defines the UrlLoadingStrategy enum for specifying how URLs should be loaded in Blazor WebView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Wpf/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.CancelLoad = 2 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.OpenExternally = 0 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.OpenInWebView = 1 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\n```\n\n----------------------------------------\n\nTITLE: Mapping View Properties in C#\nDESCRIPTION: Static methods for mapping common properties of View in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorX(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAnchorY(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapAutomationId(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\nstatic Microsoft.Maui.Handlers.ViewHandler.MapBackground(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Launch Options in Microsoft.Maui\nDESCRIPTION: Describes launch options for maps, including navigation mode settings, which require the Microsoft.Maui.ApplicationModel namespace. Specifies navigation modes like Driving and Walking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.MapLaunchOptions() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.get -> Microsoft.Maui.ApplicationModel.NavigationMode\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.MapLaunchOptions.NavigationMode.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for CheckBox in .NET MAUI\nDESCRIPTION: This snippet defines the getters for platform and virtual views associated with the ICheckBoxHandler interface, facilitating the definition and manipulation of checkboxes within a MAUI app.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ICheckBoxHandler.PlatformView.get -> AndroidX.AppCompat.Widget.AppCompatCheckBox!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.ICheckBoxHandler.VirtualView.get -> Microsoft.Maui.ICheckBox!\n```\n\n----------------------------------------\n\nTITLE: Defining Magnetometer API in C#\nDESCRIPTION: Declares static methods and events for the Magnetometer class in the Microsoft.Maui.Devices.Sensors namespace. Includes methods to start and stop the magnetometer, and an event for reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Magnetometer.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Text Attributes Manipulation Methods\nDESCRIPTION: Extension methods for working with text attributes, including getting and setting various attribute types with support for default values\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string defaultValue = null) -> string\n```\n\n----------------------------------------\n\nTITLE: Creating Image from Stream - Skia\nDESCRIPTION: This snippet defines a static method 'FromStream' that creates a Skia image from a given stream with an optional image format hint, defaulting to PNG. The method is part of the SkiaImage class and returns an image object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SkiaImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat formatHint = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Compass APIs in MAUI C#\nDESCRIPTION: Static methods for accessing and controlling the device compass, including starting and stopping monitoring with optional low-pass filtering, checking support status, and handling compass reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Default.get -> Microsoft.Maui.Devices.Sensors.ICompass!\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Checking URI Compatibility with MAUI's Launcher\nDESCRIPTION: This method determines whether the specified URI can be opened using MAUI's launcher. It takes a URI as a parameter and returns a Task with a boolean result indicating the ability to launch the URI. This is useful in scenarios where conditional navigation paths are implemented within applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Launcher.CanOpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Font Modification in Skia Canvas\nDESCRIPTION: Provides functionality to set or change the current font used for rendering text, enabling varied typography and enhancements within graphical contexts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Skia.SkiaCanvas.Font.set -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Stroke Property Constants in C#\nDESCRIPTION: Constants in PictureCommand for stroke-related properties. These commands control the appearance of strokes including color, size, dash pattern, line cap, line join, and other stroke characteristics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.StrokeSize = 30 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeColor = 31 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeDashPattern = 32 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineCap = 33 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLineJoin = 34 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLocation = 35 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeMiterLimit = 36 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.LimitStrokeScaling = 37 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeLimit = 38 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.StrokeBrush = 39 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions PreferredToolbarColor getter in MAUI\nDESCRIPTION: This property getter retrieves the preferred toolbar color for the browser. This allows customizing the color of the browser's toolbar, if supported. It is a read/write nullable property of type Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.PreferredToolbarColor.get -> Microsoft.Maui.Graphics.Color?\"\n```\n\n----------------------------------------\n\nTITLE: Defining Point Struct in C#\nDESCRIPTION: This snippet defines the Point struct in the Microsoft.Maui.Graphics namespace. It includes properties and methods for manipulating 2D points with double precision.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.Deconstruct(out double x, out double y) -> void\nMicrosoft.Maui.Graphics.Point.Distance(Microsoft.Maui.Graphics.Point other) -> double\nMicrosoft.Maui.Graphics.Point.IsEmpty.get -> bool\nMicrosoft.Maui.Graphics.Point.Offset(double dx, double dy) -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.Point() -> void\nMicrosoft.Maui.Graphics.Point.Point(double x, double y) -> void\nMicrosoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.Size sz) -> void\nMicrosoft.Maui.Graphics.Point.Point(Microsoft.Maui.Graphics.SizeF sz) -> void\nMicrosoft.Maui.Graphics.Point.Point(System.Numerics.Vector2 v) -> void\nMicrosoft.Maui.Graphics.Point.Round() -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.Point.X.get -> double\nMicrosoft.Maui.Graphics.Point.X.set -> void\nMicrosoft.Maui.Graphics.Point.Y.get -> double\nMicrosoft.Maui.Graphics.Point.Y.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionProfile Enumeration in C#\nDESCRIPTION: Declares an enumeration for different types of network connection profiles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Networking.ConnectionProfile.Bluetooth = 1 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.Cellular = 2 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.Ethernet = 3 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.Unknown = 0 -> Microsoft.Maui.Networking.ConnectionProfile\nMicrosoft.Maui.Networking.ConnectionProfile.WiFi = 4 -> Microsoft.Maui.Networking.ConnectionProfile\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeViewSwipeEnded class in C#\nDESCRIPTION: Declares a class for SwipeView swipe ended events, including IsOpen and SwipeDirection properties and a constructor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeViewSwipeEnded\nMicrosoft.Maui.SwipeViewSwipeEnded.IsOpen.get -> bool\nMicrosoft.Maui.SwipeViewSwipeEnded.IsOpen.init -> void\nMicrosoft.Maui.SwipeViewSwipeEnded.SwipeDirection.get -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeViewSwipeEnded.SwipeDirection.init -> void\nMicrosoft.Maui.SwipeViewSwipeEnded.SwipeViewSwipeEnded(Microsoft.Maui.SwipeDirection SwipeDirection, bool IsOpen) -> void\n```\n\n----------------------------------------\n\nTITLE: Barometer Data Class Implementation in MAUI\nDESCRIPTION: Class for handling barometer sensor data in MAUI applications. Contains a property for pressure in hectopascals, constructors, and an equality comparison method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.BarometerData.PressureInHectopascals.get -> double\nMicrosoft.Maui.Devices.Sensors.BarometerData.BarometerData() -> void\nMicrosoft.Maui.Devices.Sensors.BarometerData.BarometerData(double pressure) -> void\nMicrosoft.Maui.Devices.Sensors.BarometerData.Equals(Microsoft.Maui.Devices.Sensors.BarometerData other) -> bool\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals Method for Graphics Objects in .NET MAUI\nDESCRIPTION: These overrides implement the `Equals` method for several Microsoft.Maui.Graphics objects including `Font`, `Insets`, `InsetsF`, `PathF`, `Point`, `PointF`, `Rect`, `RectF`, `Size`, and `SizeF`.  These methods allow for checking the equality of instances of these graphic types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Font.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Insets.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.InsetsF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.PathF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Point.Equals(object o) -> bool\n~override Microsoft.Maui.Graphics.PointF.Equals(object o) -> bool\n~override Microsoft.Maui.Graphics.Rect.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.RectF.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.Size.Equals(object obj) -> bool\n~override Microsoft.Maui.Graphics.SizeF.Equals(object obj) -> bool\"\n```\n\n----------------------------------------\n\nTITLE: Defining CompassChangedEventArgs Class in C#\nDESCRIPTION: Defines the CompassChangedEventArgs class with a constructor and a Reading property. This class is used to represent compass data changes in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.CompassChangedEventArgs\nMicrosoft.Maui.Devices.Sensors.CompassChangedEventArgs.CompassChangedEventArgs(Microsoft.Maui.Devices.Sensors.CompassData reading) -> void\nMicrosoft.Maui.Devices.Sensors.CompassChangedEventArgs.Reading.get -> Microsoft.Maui.Devices.Sensors.CompassData\n```\n\n----------------------------------------\n\nTITLE: Getting Platform View for Picker Handler in C#\nDESCRIPTION: This property retrieves the platform-specific view for the IPickerHandler, crucial for implementing picker functionality in different platform environments.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IPickerHandler.PlatformView.get -> object!\n```\n\n----------------------------------------\n\nTITLE: Defining VisualDiagnosticsOverlay class in C#\nDESCRIPTION: Declares a class for visual diagnostics overlay functionality, including methods for managing adorners and scrollable elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.VisualDiagnosticsOverlay\nMicrosoft.Maui.VisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IAdorner! adorner, bool scrollToView = false) -> bool\nMicrosoft.Maui.VisualDiagnosticsOverlay.AddAdorner(Microsoft.Maui.IVisualTreeElement! visualElement, bool scrollToView = false) -> bool\nMicrosoft.Maui.VisualDiagnosticsOverlay.AddScrollableElementHandler(Microsoft.Maui.IScrollView! scrollBar) -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.AddScrollableElementHandlers() -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.EnableElementSelector.get -> bool\nMicrosoft.Maui.VisualDiagnosticsOverlay.EnableElementSelector.set -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.Offset.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.VisualDiagnosticsOverlay.RemoveAdorner(Microsoft.Maui.IAdorner! adorner) -> bool\nMicrosoft.Maui.VisualDiagnosticsOverlay.RemoveAdorners() -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.RemoveAdorners(Microsoft.Maui.IVisualTreeElement! visualElement) -> bool\nMicrosoft.Maui.VisualDiagnosticsOverlay.RemoveScrollableElementHandler() -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.ScrollToElement.get -> bool\nMicrosoft.Maui.VisualDiagnosticsOverlay.ScrollToElement.set -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.ScrollToView(Microsoft.Maui.IVisualTreeElement! element) -> void\nMicrosoft.Maui.VisualDiagnosticsOverlay.ScrollViews.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IScrollView!>!\nMicrosoft.Maui.VisualDiagnosticsOverlay.VisualDiagnosticsOverlay(Microsoft.Maui.IWindow! window) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Readonly StyleProperty\nDESCRIPTION: This code defines a static readonly `BindableProperty` named `StyleProperty` within the `StyleableElement` class. This property allows applying styles to elements within a MAUI application, providing a mechanism for visual customization and theming.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.StyleableElement.StyleProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Accessing the Logger in ImageSourceService\nDESCRIPTION: This code shows how to access the logger instance within the `ImageSourceService` class. The logger is of type `Microsoft.Extensions.Logging.ILogger` and can be used to log information, warnings, or errors related to the image source service. This snippet provides access to the logger that may have been optionally provided when the instance was created.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ImageSourceService.Logger.get -> Microsoft.Extensions.Logging.ILogger?\"\n```\n\n----------------------------------------\n\nTITLE: Overriding WindowHandler Method for Tizen Platform\nDESCRIPTION: This method overrides WindowHandler to create a Tizen-specific Window implementation for MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> Tizen.NUI.Window!\n```\n\n----------------------------------------\n\nTITLE: Adding New API to PublicAPI.Unshipped.txt\nDESCRIPTION: Example of adding a new constructor to PointerEventArgs in the unshipped API file.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMicrosoft.Maui.Controls.PointerEventArgs.PointerEventArgs(int clicks) -> void\n```\n\n----------------------------------------\n\nTITLE: Weak Event Manager Methods in .NET MAUI\nDESCRIPTION: Provides methods for removing event handlers with weak references, supporting delegate removal with optional event name specification\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.WeakEventManager.RemoveEventHandler(System.Delegate? handler, string! eventName = \"\")\n```\n\n----------------------------------------\n\nTITLE: BarometerData Equality Operators in MAUI C#\nDESCRIPTION: Equality comparison operators for the BarometerData struct, allowing comparison between two BarometerData instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator !=(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator ==(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Location Distance Calculation in .NET MAUI\nDESCRIPTION: Static method for calculating the distance between two geographic coordinates in .NET MAUI. This allows determining the distance between locations with specified units.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: HybridWebView: Send Raw Message in C#\nDESCRIPTION: This method sends a raw message to the HybridWebView's underlying web view. The message is passed as a string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.HybridWebView.SendRawMessage(string! rawMessage) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenFileRequest Class in Microsoft MAUI\nDESCRIPTION: This snippet outlines the properties and constructors of the OpenFileRequest class used for file selection in MAUI applications. It includes methods for getting and setting the file and its presentation bounds.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.get -> Microsoft.Maui.Storage.ReadOnlyFile?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest() -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.ReadOnlyFile! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.get -> string?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Map Type Enumeration\nDESCRIPTION: Enumeration defining different types of map views available in MAUI Maps.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic enum MapType\n{\n    Street = 0,\n    Satellite = 1,\n    Hybrid = 2\n}\n```\n\n----------------------------------------\n\nTITLE: PortHandlerAttribute Class in C#\nDESCRIPTION: Definition of PortHandlerAttribute class used to annotate handlers that need to be ported to different platforms. It includes constructors and properties for providing port descriptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.PortHandlerAttribute\nMicrosoft.Maui.PortHandlerAttribute.Description.get -> string?\nMicrosoft.Maui.PortHandlerAttribute.Description.set -> void\nMicrosoft.Maui.PortHandlerAttribute.PortHandlerAttribute() -> void\nMicrosoft.Maui.PortHandlerAttribute.PortHandlerAttribute(string! description) -> void\n```\n\n----------------------------------------\n\nTITLE: Disposing SkiaCanvas\nDESCRIPTION: This override method defines the disposal behavior of the SkiaCanvas, ensuring that resources are properly released when the canvas is no longer needed.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Skia.SkiaCanvas.Dispose() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IHapticFeedback Interface in C#\nDESCRIPTION: Defines the IHapticFeedback interface for providing haptic feedback on supported devices.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IHapticFeedback\nMicrosoft.Maui.Devices.IHapticFeedback.IsSupported.get -> bool\nMicrosoft.Maui.Devices.IHapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type) -> void\n```\n\n----------------------------------------\n\nTITLE: Loading Font Asset with Typeface in C#\nDESCRIPTION: This C# snippet shows how to load a font asset file (e.g., \"fonts/samplefont.ttf\") and create a `Typeface` object. The `Typeface.CreateFromAsset()` method is used, requiring the `Context.Assets` and the asset's path as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/samples/GraphicsTester.Android/Assets/AboutAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Pattern Paint in .NET MAUI\nDESCRIPTION: These properties allow getting and setting the pattern paint in a PatternPaint instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PatternPaint.Pattern.get -> Microsoft.Maui.Graphics.IPattern\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PatternPaint.Pattern.set -> void\n```\n\n----------------------------------------\n\nTITLE: Normalize UIImage Orientation in MAUI\nDESCRIPTION: This method normalizes the orientation of a UIImage, with an option to dispose of the original. This is useful for fixing image rotation issues.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIImageExtensions.NormalizeOrientation(this UIKit.UIImage target, bool disposeOriginal = false) -> UIKit.UIImage\n```\n\n----------------------------------------\n\nTITLE: Defining CompassData Struct in C#\nDESCRIPTION: Defines the CompassData struct with constructors, an Equals method, and a HeadingMagneticNorth property. This struct represents compass data in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.CompassData\nMicrosoft.Maui.Devices.Sensors.CompassData.CompassData() -> void\nMicrosoft.Maui.Devices.Sensors.CompassData.CompassData(double headingMagneticNorth) -> void\nMicrosoft.Maui.Devices.Sensors.CompassData.Equals(Microsoft.Maui.Devices.Sensors.CompassData other) -> bool\nMicrosoft.Maui.Devices.Sensors.CompassData.HeadingMagneticNorth.get -> double\n```\n\n----------------------------------------\n\nTITLE: Copying SkiaSharp Paint Objects\nDESCRIPTION: This extension method allows creating a duplicate of an SKPaint object in SkiaSharp, enabling modifications without altering the original object. It requires SkiaSharp library support.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKPaintExtensions.CreateCopy(this SkiaSharp.SKPaint paint) -> SkiaSharp.SKPaint\n```\n\n----------------------------------------\n\nTITLE: TimePickerHandler Static Methods and Properties in .NET MAUI\nDESCRIPTION: Static methods and properties for the TimePickerHandler class that handle mapping of time picker attributes like formatting, text color, font, and time value to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TimePickerHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFont(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapFormat(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITimePicker!, Microsoft.Maui.Handlers.ITimePickerHandler!>!\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTextColor(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\nstatic Microsoft.Maui.Handlers.TimePickerHandler.MapTime(Microsoft.Maui.Handlers.ITimePickerHandler! handler, Microsoft.Maui.ITimePicker! timePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateBindingExtension TypedBinding Property in C#\nDESCRIPTION: Declares getter and setter for the TypedBinding property in the TemplateBindingExtension class. The property type is TypedBindingBase from the Microsoft.Maui.Controls.Internals namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n```\n\n----------------------------------------\n\nTITLE: MediaPicker Options Initialization in .NET MAUI\nDESCRIPTION: This constructor initializes a new instance of MediaPickerOptions, allowing customization of media picker settings like title.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Media.MediaPickerOptions.MediaPickerOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Main Thread Operations in C#\nDESCRIPTION: Static methods for executing operations on the main thread asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Task InvokeOnMainThreadAsync(Action action);\nstatic Task<T> InvokeOnMainThreadAsync<T>(Func<T> func);\nstatic void BeginInvokeOnMainThread(Action action);\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Colors in C#\nDESCRIPTION: This static property defines a dictionary of standard color names and their corresponding color values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.StandardColors -> System.Collections.Generic.Dictionary<string, string>\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu and Navigation Handlers for iOS\nDESCRIPTION: Method signatures for menu-related handlers in iOS, including MenuBar, MenuFlyout and NavigationView. These handlers create UIMenu, UIMenuElement, and other iOS-specific UI elements for navigation and context menus.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.MenuBarHandler.CreatePlatformElement() -> UIKit.IUIMenuBuilder!\noverride Microsoft.Maui.Handlers.MenuBarHandler.SetVirtualView(Microsoft.Maui.IElement! view) -> void\noverride Microsoft.Maui.Handlers.MenuBarItemHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.MenuFlyoutHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CreatePlatformElement() -> UIKit.UIMenuElement!\noverride Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CreatePlatformElement() -> UIKit.UIMenu!\noverride Microsoft.Maui.Handlers.NavigationViewHandler.CreatePlatformView() -> UIKit.UIView!\n```\n\n----------------------------------------\n\nTITLE: Defining HandlerProperties Methods in C#\nDESCRIPTION: Specifies static methods for getting and setting DisconnectPolicy for BindableObjects in Microsoft.Maui.Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.HandlerProperties.GetDisconnectPolicy(Microsoft.Maui.Controls.BindableObject! target) -> Microsoft.Maui.HandlerDisconnectPolicy\nstatic Microsoft.Maui.Controls.HandlerProperties.SetDisconnectPolicy(Microsoft.Maui.Controls.BindableObject! target, Microsoft.Maui.HandlerDisconnectPolicy value) -> void\n```\n\n----------------------------------------\n\nTITLE: Altitude Reference System Enumeration in MAUI\nDESCRIPTION: Enumeration defining the altitude reference systems used in MAUI location services. Includes Unspecified, Terrain, Ellipsoid, Geoid, and Surface reference systems.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Unspecified = 0 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Terrain = 1 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Ellipsoid = 2 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Geoid = 3 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.AltitudeReferenceSystem.Surface = 4 -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\n```\n\n----------------------------------------\n\nTITLE: Implementing Compiled Binding in XAML\nDESCRIPTION: Demonstrates how to use compiled binding in XAML for a MAUI application. This approach uses the x:DataType attribute to enable compile-time checking of the binding expression.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/FeatureSwitches.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Label Text=\"{Binding Customer.Name}\" x:DataType=\"local:PageViewModel\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Insets Struct in C#\nDESCRIPTION: Structure for representing insets (padding) in MAUI graphics, with properties for top, left, bottom, and right values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Insets\nMicrosoft.Maui.Graphics.Insets.AllValuesAreEqualTo(double value) -> bool\nMicrosoft.Maui.Graphics.Insets.Bottom.get -> double\nMicrosoft.Maui.Graphics.Insets.Bottom.set -> void\nMicrosoft.Maui.Graphics.Insets.Horizontal.get -> double\nMicrosoft.Maui.Graphics.Insets.Insets(double top, double left, double bottom, double right) -> void\nMicrosoft.Maui.Graphics.Insets.Left.get -> double\nMicrosoft.Maui.Graphics.Insets.Left.set -> void\nMicrosoft.Maui.Graphics.Insets.Right.get -> double\nMicrosoft.Maui.Graphics.Insets.Right.set -> void\nMicrosoft.Maui.Graphics.Insets.Top.get -> double\nMicrosoft.Maui.Graphics.Insets.Top.set -> void\nMicrosoft.Maui.Graphics.Insets.Vertical.get -> double\n```\n\n----------------------------------------\n\nTITLE: Location Distance Calculation Methods in C#\nDESCRIPTION: Static methods for calculating distances between geographic locations with support for different distance units and multiple parameter combinations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(double latitudeStart, double longitudeStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, double latitudeEnd, double longitudeEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\nstatic Microsoft.Maui.Devices.Sensors.Location.CalculateDistance(Microsoft.Maui.Devices.Sensors.Location locationStart, Microsoft.Maui.Devices.Sensors.Location locationEnd, Microsoft.Maui.Devices.Sensors.DistanceUnits units) -> double\n```\n\n----------------------------------------\n\nTITLE: Filling Path in PictureCanvas in .NET MAUI\nDESCRIPTION: This method fills the specified path on the canvas using a defined winding mode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.FillPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating a FontSource Object in C#\nDESCRIPTION: This constructor creates a new FontSource object with specified filename, weight, and style type. It allows for custom font loading.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.FontSource.FontSource(string! filename, int weight = 400, Microsoft.Maui.Graphics.FontStyleType fontStyleType = Microsoft.Maui.Graphics.FontStyleType.Normal) -> void\n```\n\n----------------------------------------\n\nTITLE: NuGet Central Package Management Configuration\nDESCRIPTION: This XML snippet illustrates how to configure NuGet's central package management (CPM) in a `Directory.Packages.props` file. This includes setting the `ManagePackageVersionsCentrally` property to `true`, defining properties for version numbers (like `MauiVersion` and `MicrosoftExtensionsVersion`), and declaring `PackageVersion` items with their respective versions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n    <MauiVersion>8.0.3</MauiVersion>\n    <MicrosoftExtensionsVersion>8.0.0</MicrosoftExtensionsVersion>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageVersion Include=\"Microsoft.Maui.Core\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Maui.Controls\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Maui.Controls.Core\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Maui.Controls.Build.Tasks\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Maui.Controls.Xaml\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Maui.Essentials\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Maui.Resizetizer\" Version=\"$(MauiVersion)\" />\n    <PackageVersion Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"$(MicrosoftExtensionsVersion)\" />\n  </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Building with dotnet cake\nDESCRIPTION: This dotnetcli snippet demonstrates how to build the project using `dotnet cake`, producing `artifacts/*.nupkg` files and copying files to `./bin/dotnet`.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\n$ dotnet cake\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Font from Assets\nDESCRIPTION: Illustrates how to load a custom typeface directly from the assets folder using Android's Typeface creation method. Shows accessing font files deployed with the application package.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-multiproject/MauiApp.1.Droid/Assets/AboutAndroidAssets.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```\n\n----------------------------------------\n\nTITLE: Defining ValueTargetProvider Constructor in MAUI Framework\nDESCRIPTION: Constructor definition for ValueTargetProvider class that takes target object and property parameters. Both parameters are non-nullable as indicated by the ! operator.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\n```\n\n----------------------------------------\n\nTITLE: Registering a Handler in .NET MAUI\nDESCRIPTION: Shows how to register a Button handler with its respective View type using the ConfigureMauiHandlers method on the MAUI builder.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/HandlerResolution.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.ConfigureMauiHandlers(handlers =>\n       {\n          handlers.AddHandler(typeof(Button), typeof(ButtonHandler));\n       }\n```\n\n----------------------------------------\n\nTITLE: Implementing String-based Binding in C#\nDESCRIPTION: Demonstrates how to set up a string-based binding in C# code for a MAUI application. This example binds a Label's Text property to a nested property 'Customer.Name' of the BindingContext.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/FeatureSwitches.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nlabel.BindingContext = new PageViewModel { Customer = new CustomerViewModel { Name = \"John\" } };\nlabel.SetBinding(Label.TextProperty, \"Customer.Name\");\n```\n\n----------------------------------------\n\nTITLE: AppAction Subtitle setter in MAUI\nDESCRIPTION: This property setter sets the subtitle of the AppAction. The subtitle provides additional context or description for the action. The subtitle is nullable string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.Subtitle.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Attributed Text Runs in MAUI\nDESCRIPTION: This method optimizes a list of attributed text runs based on the specified text length to enhance rendering performance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Optimize(this System.Collections.Generic.List<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int textLength) -> void\n```\n\n----------------------------------------\n\nTITLE: ShareMultipleFilesRequest in MAUI DataTransfer\nDESCRIPTION: The 'ShareMultipleFilesRequest' functionalities support multiple file transfers, providing methods to initialize such requests with file lists and optional titles. Useful for applications needing to share more than one file in a streamlined process.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.Files.get -> System.Collections.Generic.List<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.Files.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\n----------------------------------------\n\nTITLE: DrawPath Extension for ICanvas in .NET MAUI Graphics\nDESCRIPTION: This static extension method `DrawPath` extends the `ICanvas` interface in the Microsoft.Maui.Graphics library. It draws a path defined by a `PathF` object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\n\"~static Microsoft.Maui.Graphics.CanvasExtensions.DrawPath(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.PathF path) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining TitleBar Properties and Methods in C#\nDESCRIPTION: Specifies properties and methods for the TitleBar class in Microsoft.Maui.Controls, including content, colors, and layout elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar\nMicrosoft.Maui.Controls.TitleBar.Content.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Controls.TitleBar.Content.set -> void\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.set -> void\nMicrosoft.Maui.Controls.TitleBar.Icon.get -> Microsoft.Maui.Controls.ImageSource!\nMicrosoft.Maui.Controls.TitleBar.Icon.set -> void\nMicrosoft.Maui.Controls.TitleBar.LeadingContent.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Controls.TitleBar.LeadingContent.set -> void\nMicrosoft.Maui.Controls.TitleBar.PassthroughElements.get -> System.Collections.Generic.IList<Microsoft.Maui.IView!>!\nMicrosoft.Maui.Controls.TitleBar.Subtitle.get -> string!\nMicrosoft.Maui.Controls.TitleBar.Subtitle.set -> void\nMicrosoft.Maui.Controls.TitleBar.Title.get -> string!\nMicrosoft.Maui.Controls.TitleBar.Title.set -> void\nMicrosoft.Maui.Controls.TitleBar.TitleBar() -> void\nMicrosoft.Maui.Controls.TitleBar.TrailingContent.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Controls.TitleBar.TrailingContent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Battery State Enumeration in MAUI\nDESCRIPTION: Enumeration defining the possible states of a device's battery in MAUI applications. Includes Unknown, Charging, Discharging, Full, NotCharging, and NotPresent states.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.BatteryState.Unknown = 0 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Charging = 1 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Discharging = 2 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.Full = 3 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.NotCharging = 4 -> Microsoft.Maui.Devices.BatteryState\nMicrosoft.Maui.Devices.BatteryState.NotPresent = 5 -> Microsoft.Maui.Devices.BatteryState\n```\n\n----------------------------------------\n\nTITLE: Skia Canvas State Font Property\nDESCRIPTION: Getter and setter methods for managing the current font in a Skia canvas state, allowing dynamic font manipulation during rendering\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing Attributed Text Run\nDESCRIPTION: Initializes an AttributedTextRun with a specified range and text attributes. Dependencies include ITextAttributes. Parameters include 'start', 'length', and 'attributes'. This constructor does not have a return value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextRun.AttributedTextRun(int start, int length, Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> void\n```\n\n----------------------------------------\n\nTITLE: Bitmap Brush Management in .NET MAUI Canvas State\nDESCRIPTION: Defines the method to set a bitmap brush in the canvas state, which is essential for applying bitmap textures to drawings in a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.SetBitmapBrush(Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush bitmapBrush) -> void\n```\n\n----------------------------------------\n\nTITLE: Invalidating Window Overlay\nDESCRIPTION: Triggers an invalidation of the window overlay, prompting a redraw or layout update as necessary.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.Invalidate() -> void\n```\n\n----------------------------------------\n\nTITLE: Stroke Extensions for Android Views in .NET MAUI\nDESCRIPTION: Extension methods for updating stroke properties on Android Views based on MAUI IBorderStroke interface. These methods handle stroke appearance, dash patterns, line styles, and shape rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_171\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.StrokeExtensions.InvalidateBorderStrokeBounds(this Android.Views.View! platformView) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateBorderStroke(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStroke(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashOffset(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeDashPattern(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineCap(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeLineJoin(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeMiterLimit(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeShape(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\nstatic Microsoft.Maui.Platform.StrokeExtensions.UpdateStrokeThickness(this Android.Views.View! platformView, Microsoft.Maui.IBorderStroke! border) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining BatteryPowerSource Enum in C#\nDESCRIPTION: Enum representing different power sources for a device's battery in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.AC = 2 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Battery = 1 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Unknown = 0 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Usb = 3 -> Microsoft.Maui.Devices.BatteryPowerSource\nMicrosoft.Maui.Devices.BatteryPowerSource.Wireless = 4 -> Microsoft.Maui.Devices.BatteryPowerSource\n```\n\n----------------------------------------\n\nTITLE: Image Manipulation Interface\nDESCRIPTION: Interface methods for image resizing and saving operations with various format options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.IImage.Downsize(float maxWidth, float maxHeight, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n~Microsoft.Maui.Graphics.IImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n~Microsoft.Maui.Graphics.IImage.Save(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> void\n```\n\n----------------------------------------\n\nTITLE: Static InvalidateMeasure Extension Method\nDESCRIPTION: This code defines a static extension method `InvalidateMeasure` for `VisualElement` in MAUI. This method forces a remeasurement of the view, ensuring that the layout is updated to reflect any changes in content or constraints. This is crucial for dynamic UI updates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.ViewExtensions.InvalidateMeasure(this Microsoft.Maui.Controls.VisualElement! view) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenSwipeItem Enumeration\nDESCRIPTION: Enumeration defining swipe directions for swipeable items in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.OpenSwipeItem.LeftItems = 0\nMicrosoft.Maui.OpenSwipeItem.TopItems = 1\nMicrosoft.Maui.OpenSwipeItem.RightItems = 2\nMicrosoft.Maui.OpenSwipeItem.BottomItems = 3\n```\n\n----------------------------------------\n\nTITLE: FontFile and FontSize Utilities in MAUI\nDESCRIPTION: Methods for creating FontFile objects from strings and comparing FontSize objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_93\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.FontFile.FromString(string! input) -> Microsoft.Maui.FontFile!\nstatic Microsoft.Maui.FontSize.operator !=(Microsoft.Maui.FontSize left, Microsoft.Maui.FontSize right) -> bool\nstatic Microsoft.Maui.FontSize.operator ==(Microsoft.Maui.FontSize left, Microsoft.Maui.FontSize right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Static Readonly IconProperty (TitleBar)\nDESCRIPTION: This code defines a static readonly `BindableProperty` named `IconProperty` within the `TitleBar` class. This property allows to set and bind an icon for the title bar in a MAUI application, providing visual identification and branding for the window.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.IconProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CRC64 Hash Computation in C#\nDESCRIPTION: Provides static methods for computing CRC64 hash from byte arrays, streams, and strings. These methods are useful for data integrity checks and hashing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Crc64.ComputeHash(byte[]! input) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHash(System.IO.Stream! inputStream) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHashString(string! input) -> string!\n```\n\n----------------------------------------\n\nTITLE: Configuring ProGuard Rules for Glide in MAUI Android\nDESCRIPTION: ProGuard rules to prevent obfuscation and removal of essential Glide image loading classes and modules. These rules ensure the Glide library continues to function correctly after ProGuard optimization by keeping the AppGlideModule, LibraryGlideModule, GeneratedAppGlideModuleImpl, and MAUI's custom GlideModule implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/AndroidNative/maui/lib-proguard-rules.txt#2025-04-21_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keep public class * extends com.bumptech.glide.module.AppGlideModule\n-keep public class * extends com.bumptech.glide.module.LibraryGlideModule\n-keep class com.bumptech.glide.GeneratedAppGlideModuleImpl\n-keep class com.microsoft.maui.MauiGlideModule\n```\n\n----------------------------------------\n\nTITLE: Override InvalidateMeasureOverride in C#\nDESCRIPTION: This snippet indicates an override of the `InvalidateMeasureOverride` method, likely within a custom layout or view, signaling the need for a remeasure of the element. The return type is void, indicating that this method triggers an internal process.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n\"*REMOVED*override Microsoft.Maui.Controls.Compatibility.Layout.InvalidateMeasureOverride() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Writing Attributed Text to Stream in C#\nDESCRIPTION: This snippet defines methods for writing attributed text to a TextWriter, making it possible to serialize the IAttributedText into XML format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText attributedText, System.IO.TextWriter writer) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText text) -> string\n```\n\n----------------------------------------\n\nTITLE: Using inheritdoc with Interface Reference in C#\nDESCRIPTION: Example of explicitly referencing an interface when using the inheritdoc tag in a class that implements the interface, even if the class only implements one interface.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/CodeDocumentationGuidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<inheritdoc cref=\"IEntry\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading Maui Asset Asynchronously - C#\nDESCRIPTION: This code snippet defines an asynchronous method to load a raw asset from the application package using the .NET MAUI framework. It uses the FileSystem API to open the specified file and reads its contents into memory.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-mobile/Resources/Raw/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Share Multiple Files Requests in .NET MAUI\nDESCRIPTION: This constructor initializes ShareMultipleFilesRequest objects for sharing multiple files, allowing for flexible inputs including title and files as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(string! title, System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile!>! files) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.ShareMultipleFilesRequest(System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileBase!>! files) -> void\n```\n\n----------------------------------------\n\nTITLE: Set DateTimeOffset in Preferences\nDESCRIPTION: Static methods to store DateTimeOffset values in MAUI Preferences storage. Includes overloads with and without sharedName parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing IBlazorWebView Interface in C# for .NET MAUI\nDESCRIPTION: Defines the IBlazorWebView interface with methods and properties for BlazorWebView implementation. Includes event handlers and configuration options for Blazor integration in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.BlazorWebViewInitialized(Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializedEventArgs! args) -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.BlazorWebViewInitializing(Microsoft.AspNetCore.Components.WebView.BlazorWebViewInitializingEventArgs! args) -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.CreateFileProvider(string! contentRootDir) -> Microsoft.Extensions.FileProviders.IFileProvider!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.HostPage.get -> string?\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.JSComponents.get -> Microsoft.AspNetCore.Components.Web.JSComponentConfigurationStore!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.RootComponents.get -> Microsoft.AspNetCore.Components.WebView.Maui.RootComponentsCollection!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.StartPath.get -> string!\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.StartPath.set -> void\nMicrosoft.AspNetCore.Components.WebView.Maui.IBlazorWebView.UrlLoading(Microsoft.AspNetCore.Components.WebView.UrlLoadingEventArgs! args) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: C# compiler directive to enable nullable reference type checks for this file\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Extensions for .NET MAUI\nDESCRIPTION: Extension method for converting point values to em units. This helps with consistent text sizing and layout across different device resolutions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_180\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.UnitExtensions.ToEm(this double pt) -> float\n```\n\n----------------------------------------\n\nTITLE: Soft Input Extensions for Text Input Controls\nDESCRIPTION: Extensions for managing software keyboard input for text input controls. Provides methods to show/hide the software keyboard and check its current display state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.SoftInputExtensions.HideSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.SoftInputExtensions.IsSoftInputShowing(this Microsoft.Maui.ITextInput! targetView) -> bool\nstatic Microsoft.Maui.SoftInputExtensions.ShowSoftInputAsync(this Microsoft.Maui.ITextInput! targetView, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IImageButtonHandler in MAUI\nDESCRIPTION: Defines properties for the `IImageButtonHandler` interface in MAUI, providing access to the platform view and virtual view for an ImageButton. The PlatformView exposes the underlying platform-specific view, while VirtualView represents the .NET MAUI ImageButton.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IImageButtonHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IImageButtonHandler.VirtualView.get -> Microsoft.Maui.IImageButton!\"\n```\n\n----------------------------------------\n\nTITLE: Mapping ContentView Properties in MAUI\nDESCRIPTION: Static method for mapping the content of a ContentView control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ContentViewHandler.MapContent(Microsoft.Maui.Handlers.IContentViewHandler! handler, Microsoft.Maui.IContentView! page) -> void\n```\n\n----------------------------------------\n\nTITLE: TitleBar Visual States Constants\nDESCRIPTION: Constants defining the visual states and template part names for the TitleBar control in MAUI. These constants are used for managing the visibility and state of different parts of the title bar.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.ContentHiddenState = \"ContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.ContentVisibleState = \"ContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconHiddenState = \"IconCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconVisibleState = \"IconVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingHiddenState = \"LeadingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingVisibleState = \"LeadingContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleHiddenState = \"SubtitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleVisibleState = \"SubtitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TemplateRootName = \"PART_Root\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarActiveState = \"TitleBarTitleActive\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarContent = \"PART_Content\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarIcon = \"PART_Icon\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarInactiveState = \"TitleBarTitleInactive\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarLeading = \"PART_LeadingContent\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarSubtitle = \"PART_Subtitle\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarTitle = \"PART_Title\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarTrailing = \"PART_TrailingContent\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleHiddenState = \"TitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleVisibleState = \"TitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TrailingHiddenState = \"TrailingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TrailingVisibleState = \"TrailingContentVisible\" -> string!\n```\n\n----------------------------------------\n\nTITLE: ReturnType Enum Definition in C#\nDESCRIPTION: ReturnType defines different keyboard return types for text input controls. It includes options like Default, Done, Go, Next, Search, and Send to customize the return key behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Default = 0 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Done = 1 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Go = 2 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Next = 3 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Search = 4 -> Microsoft.Maui.ReturnType\nMicrosoft.Maui.ReturnType.Send = 5 -> Microsoft.Maui.ReturnType\n```\n\n----------------------------------------\n\nTITLE: Launching VS Code with Cake for .NET MAUI Development\nDESCRIPTION: Bootstrap .NET SDK and launch VS Code for MAUI development\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool restore\ndotnet cake --target=VSCode\n```\n\n----------------------------------------\n\nTITLE: MAUI Data Structure Operators and Utility Methods (C#)\nDESCRIPTION: Operator overloads and utility methods for MAUI data structures like CornerRadius, Font, and Easing. These operators enable equality comparison and implicit conversions, while utility methods handle hash computation and object initialization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CornerRadius.implicit operator Microsoft.Maui.CornerRadius(double uniformRadius) -> Microsoft.Maui.CornerRadius\nstatic Microsoft.Maui.CornerRadius.operator !=(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\nstatic Microsoft.Maui.CornerRadius.operator ==(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\nstatic Microsoft.Maui.Crc64.ComputeHash(byte[]! input) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHash(System.IO.Stream! inputStream) -> byte[]!\nstatic Microsoft.Maui.Crc64.ComputeHashString(string! input) -> string!\nstatic Microsoft.Maui.Easing.Default.get -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Easing.implicit operator Microsoft.Maui.Easing!(System.Func<double, double>! func) -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Font.Default.get -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.operator !=(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\nstatic Microsoft.Maui.Font.operator ==(Microsoft.Maui.Font left, Microsoft.Maui.Font right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Enabling AOT logging for method verification (bash)\nDESCRIPTION: These commands use `adb` to clear the Android log, set a property to enable detailed AOT logging, and then restart the app to capture AOT-related messages. This allows verification of which methods are being AOT compiled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nadb logcat -c\nadb shell setprop debug.mono.log default,timing=bare,assembly,mono_log_level=debug,mono_log_mask=aot\n```\n\n----------------------------------------\n\nTITLE: ResourceDictionary Loading Implementation\nDESCRIPTION: Static helper method for loading resource dictionaries from a source URI with assembly and line information context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Fill Operation Constants in C#\nDESCRIPTION: Constants in PictureCommand for fill operations. These constants represent commands for filling various shapes and setting fill properties like color and paint.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.FillRectangle = 10 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillRoundedRectangle = 11 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillEllipse = 12 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPath = 13 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillArc = 14 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPath2 = 15 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillColor = 40 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FillPaint = 41 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Configuration Object for .NET MAUI\nDESCRIPTION: This JSON snippet defines a configuration object with two key-value pairs. It can be used to store settings or configuration data for a .NET MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/samples/Controls.Sample/Resources/Raw/HybridSamplePage/asyncdata.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: IViewHandler Interface Definition in .NET MAUI\nDESCRIPTION: Interface for handling platform-specific implementation of IView components. Provides methods for measuring, arranging, and managing the native platform representation of MAUI visual elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IViewHandler\nMicrosoft.Maui.IViewHandler.ContainerView.get -> object?\nMicrosoft.Maui.IViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\nMicrosoft.Maui.IViewHandler.HasContainer.get -> bool\nMicrosoft.Maui.IViewHandler.HasContainer.set -> void\nMicrosoft.Maui.IViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\nMicrosoft.Maui.IViewHandler.VirtualView.get -> Microsoft.Maui.IView?\n```\n\n----------------------------------------\n\nTITLE: Insets Parsing in .NET MAUI Graphics\nDESCRIPTION: Static methods for parsing string representations of Insets and InsetsF structures. These methods convert string values into Insets objects for use in layout and drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Insets.Parse(string value) -> Microsoft.Maui.Graphics.Insets\nstatic Microsoft.Maui.Graphics.InsetsF.Parse(string value) -> Microsoft.Maui.Graphics.InsetsF\n```\n\n----------------------------------------\n\nTITLE: Checking Rationale Display in MAUI\nDESCRIPTION: This static method determines if a rationale should be displayed to the user before requesting a specified permission. It returns a boolean value. Displaying a rationale can improve the user experience by explaining why the app needs the permission.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.ApplicationModel.Permissions.ShouldShowRationale<TPermission>() -> bool\"\n```\n\n----------------------------------------\n\nTITLE: Event Arguments for HybridWebView\nDESCRIPTION: Event argument classes used by the HybridWebView for handling communication events and platform-specific process termination.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs.HybridWebViewRawMessageReceivedEventArgs(string? message) -> void\nMicrosoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs.Message.get -> string?\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs.RenderProcessGoneDetail.get -> Android.Webkit.RenderProcessGoneDetail?\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs.Sender.get -> Android.Views.View?\n```\n\n----------------------------------------\n\nTITLE: OrientationSensorData Class Implementation in C#\nDESCRIPTION: Implementation of the OrientationSensorData class for representing device orientation. It includes constructors for different numeric types, an Equals method, and an Orientation property that returns the orientation as a Quaternion.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Equals(Microsoft.Maui.Devices.Sensors.OrientationSensorData other) -> bool\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.Orientation.get -> System.Numerics.Quaternion\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData() -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(double x, double y, double z, double w) -> void\nMicrosoft.Maui.Devices.Sensors.OrientationSensorData.OrientationSensorData(float x, float y, float z, float w) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Generic ViewHandler Methods for Tizen Platform\nDESCRIPTION: These methods override ViewHandler<TVirtualView, TPlatformView> to provide common functionality for Tizen platform views, including sizing, container management, and arrangement.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.OnPlatformViewDeleted() -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformArrange(Microsoft.Maui.Graphics.Rect frame) -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.RemoveContainer() -> void\noverride Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: Adding After-SDK Targets in MSBuild\nDESCRIPTION: Example of how to append additional target files to run after the Microsoft .NET SDK targets using the AfterMicrosoftNETSdkTargets property.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/NuGets.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <AfterMicrosoftNETSdkTargets>$(AfterMicrosoftNETSdkTargets);$(MSBuildThisFileDirectory)Microsoft.Maui.[something].After.targets</AfterMicrosoftNETSdkTargets>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Utilities in MAUI\nDESCRIPTION: Static methods for converting between different units of measurement including temperature, distance, pressure, and weight.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.KilometersToMiles(double kilometers) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PascalsToAtmospheres(double pascals) -> double\nstatic Microsoft.Maui.Media.UnitConverters.PoundsToKilograms(double pounds) -> double\n```\n\n----------------------------------------\n\nTITLE: Defining Screenshot API in C#\nDESCRIPTION: Declares static methods and properties for the Screenshot class in the Microsoft.Maui.Media namespace. Includes methods for capturing screenshots and checking if capture is supported.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.Screenshot.CaptureAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult!>!\nstatic Microsoft.Maui.Media.Screenshot.Default.get -> Microsoft.Maui.Media.IScreenshot!\nstatic Microsoft.Maui.Media.Screenshot.IsCaptureSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Run Utility Extensions\nDESCRIPTION: Extension methods for analyzing and manipulating attributed text runs. These methods provide utilities for handling run intersections and boundaries.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.CalculatedIntersections(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.GetEnd(this Microsoft.Maui.Graphics.Text.IAttributedTextRun run) -> int\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.Intersects(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, int start, int length) -> bool\nstatic Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions.IntersectsExactly(this Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> bool\n```\n\n----------------------------------------\n\nTITLE: PinType Enumeration for Map Marker Types (C#)\nDESCRIPTION: Enumeration defining different types of pins that can be displayed on a map, including Generic, Place, SavedPin, and SearchResult.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.PinType.Generic = 0 -> Microsoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.PinType.Place = 1 -> Microsoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.PinType.SavedPin = 2 -> Microsoft.Maui.Controls.Maps.PinType\nMicrosoft.Maui.Controls.Maps.PinType.SearchResult = 3 -> Microsoft.Maui.Controls.Maps.PinType\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Output Format\nDESCRIPTION: Sample benchmark output showing performance metrics for various UI components including Border, ContentView, ActivityIndicator, Label, and Entry. Displays execution time, error margins, standard deviation, garbage collection metrics, and memory allocation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/tests/Benchmarks.Droid/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI/DOTNET  : // * Summary *\nI/DOTNET  :\nI/DOTNET  : BenchmarkDotNet=v0.13.1, OS=Unknown\nI/DOTNET  : Unknown processor\nI/DOTNET  :   [Host] : .NET 6.0.0 (6.0.21.52210), Arm64 RyuJIT\nI/DOTNET  :\nI/DOTNET  : Toolchain=InProcessEmitToolchain\nI/DOTNET  :\nI/DOTNET  : |            Method |       Mean |    Error |   StdDev |  Gen 0 | Allocated |\nI/DOTNET  : |------------------ |-----------:|---------:|---------:|-------:|----------:|\nI/DOTNET  : |            Border |   242.3 µs |  1.34 µs |  1.25 µs | 0.9766 |      5 KB |\nI/DOTNET  : |       ContentView |   258.3 µs |  0.49 µs |  0.43 µs | 1.4648 |      6 KB |\nI/DOTNET  : | ActivityIndicator |   380.3 µs |  1.40 µs |  1.31 µs | 0.9766 |      5 KB |\nI/DOTNET  : |             Label |   542.2 µs |  2.56 µs |  2.40 µs | 0.9766 |      5 KB |\nI/DOTNET  : |             Entry | 1,998.2 µs | 17.01 µs | 15.07 µs |      - |     12 KB |\n```\n\n----------------------------------------\n\nTITLE: Managing TimeChangedEventArgs in MAUI C#\nDESCRIPTION: TimeChangedEventArgs is used to track changes in a TimePicker. NewTime and OldTime properties represent the new and previous time values. The constructor initializes this data with given TimeSpans.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TimeChangedEventArgs\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TimeChangedEventArgs.NewTime.get -> System.TimeSpan\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TimeChangedEventArgs.OldTime.get -> System.TimeSpan\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TimeChangedEventArgs.TimeChangedEventArgs(System.TimeSpan oldTime, System.TimeSpan newTime) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping SelectedIndicatorColor for IndicatorViewHandler in C#\nDESCRIPTION: This static method maps the SelectedIndicatorColor property for an IndicatorView. It takes an IIndicatorViewHandler and an IIndicatorView as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapSelectedIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: ValueTargetProvider Constructor Implementation\nDESCRIPTION: Constructor implementation for ValueTargetProvider class, requiring target object and property parameters with null checks enabled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCanvas Constructor in C#\nDESCRIPTION: Constructor signature for the PictureCanvas class. This constructor initializes a new PictureCanvas with specified position and dimensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCanvas.PictureCanvas(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: GetHashCode Method Overrides in MAUI Graphics Types\nDESCRIPTION: Method overrides for GetHashCode() in various Microsoft.Maui.Graphics types including Color, Font, and geometric primitives like Point, Rect, and Size.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Graphics.Color.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Font.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.FontSource.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Insets.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.InsetsF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.PathF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Point.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.PointF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Rect.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.RectF.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.Size.GetHashCode() -> int\noverride Microsoft.Maui.Graphics.SizeF.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Inserting Background Layer in UIView for .NET MAUI\nDESCRIPTION: This extension method inserts a background layer into a UIView in .NET MAUI. It takes a UIView, a CALayer for the background, and an optional index as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_180\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.LayerExtensions.InsertBackgroundLayer(this UIKit.UIView! control, CoreAnimation.CALayer! backgroundLayer, int index = -1) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring AppThemeBindingExtension Properties in C#\nDESCRIPTION: This snippet declares properties for the AppThemeBindingExtension class, which allows binding to different values based on the current app theme (light or dark).\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Dark.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Default.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.get -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Light.set -> void\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.ProvideValue(System.IServiceProvider serviceProvider) -> object\n~Microsoft.Maui.Controls.Xaml.AppThemeBindingExtension.Value.get -> object\n```\n\n----------------------------------------\n\nTITLE: DateTimeOffset Get/Set Methods in MAUI Preferences\nDESCRIPTION: Static method declarations for getting and setting DateTimeOffset values in MAUI Preferences storage. Methods include overloads with optional sharedName parameter for shared preferences access.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping Slider Properties in C#\nDESCRIPTION: Static methods for mapping various properties of Slider control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimumTrackColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbColor(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapThumbImageSource(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Handlers.SliderHandler.MapValue(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding NavigationViewHandler Methods for Tizen Platform\nDESCRIPTION: These methods override the base NavigationViewHandler functionality to create and disconnect platform-specific implementations of navigation views using StackNavigationManager for the Tizen platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.NavigationViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.StackNavigationManager!\noverride Microsoft.Maui.Handlers.NavigationViewHandler.DisconnectHandler(Microsoft.Maui.Platform.StackNavigationManager! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Removing stale NuGet packages (powershell)\nDESCRIPTION: This PowerShell command removes directories containing `-dev` suffixes within the NuGet packages directory. It is used to ensure that stale builds of MAUI do not interfere with testing AOT profiles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nrm -r ~\\.nuget\\packages\\*\\*-dev\\\n```\n\n----------------------------------------\n\nTITLE: Defining AppHostBuilderExtensions in Microsoft.Maui.Controls.Hosting\nDESCRIPTION: Defines extension methods for configuring MAUI applications and adding handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiControlsHandlers(this Microsoft.Maui.Hosting.IMauiHandlersCollection handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Haptic Feedback Type Enumeration in MAUI\nDESCRIPTION: Enumeration defining types of haptic feedback that can be triggered in MAUI applications. Includes Click and LongPress feedback types.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.HapticFeedbackType.Click = 0 -> Microsoft.Maui.Devices.HapticFeedbackType\nMicrosoft.Maui.Devices.HapticFeedbackType.LongPress = 1 -> Microsoft.Maui.Devices.HapticFeedbackType\n```\n\n----------------------------------------\n\nTITLE: Initializing W2DStringSizeService\nDESCRIPTION: This snippet provides the constructor for the W2DStringSizeService class, designed to handle string sizing operations in the W2D graphics environment. It does not have a return value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DStringSizeService.W2DStringSizeService() -> void\n```\n\n----------------------------------------\n\nTITLE: Building Android Benchmarks with MSBuild\nDESCRIPTION: Command to build and run benchmarks using a custom MSBuild target for Android instrumentation. Should be executed with Release configuration for accurate timing on physical devices.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/tests/Benchmarks.Droid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/dotnet/dotnet build src/Core/tests/Benchmarks.Droid/Benchmarks.Droid.csproj -t:Benchmark -c Release\n```\n\n----------------------------------------\n\nTITLE: Color Conversion to ARGB in SkiaSharp\nDESCRIPTION: These methods convert a Microsoft.Maui.Graphics.Color object to an integer representing an ARGB (Alpha Red Green Blue) value using SkiaSharp. It supports optional alpha adjustment, and uses dependencies from Microsoft.Maui.Graphics and SkiaSharp.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToArgb(this Microsoft.Maui.Graphics.Color target, float alpha) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.ToArgb(this Microsoft.Maui.Graphics.Color target) -> int\n```\n\n----------------------------------------\n\nTITLE: Reading XML Text into IAttributedText in C#\nDESCRIPTION: This snippet provides methods for reading text from a string or a TextReader to produce an IAttributedText object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(string text) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.XmlAttributedTextReader.Read(System.IO.TextReader reader) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: Referencing Types in XML Documentation\nDESCRIPTION: Example of using the see tag to reference other types in XML documentation, which creates links in IntelliSense and online API docs.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/CodeDocumentationGuidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<see cref=\"YourType\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shipped Analyzer Releases Comment Block\nDESCRIPTION: Comment block indicating the purpose of the file for tracking shipped analyzer releases with a reference link to detailed documentation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/SourceGen/AnalyzerReleases.Shipped.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; Shipped analyzer releases\n; https://github.com/dotnet/roslyn-analyzers/blob/master/src/Microsoft.CodeAnalysis.Analyzers/ReleaseTrackingAnalyzers.Help.md\n```\n\n----------------------------------------\n\nTITLE: Configuring DOTNET Diagnostic Ports for MAUI\nDESCRIPTION: This configuration sets up the diagnostic ports for a .NET MAUI application. It specifies the IP address and port number for diagnostics, and includes a suspend option.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/samples/Controls.Sample.Profiling/Platforms/Android/environment.device.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDOTNET_DiagnosticPorts=127.0.0.1:9000,suspend\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollView and SearchBar Handlers for iOS\nDESCRIPTION: Method signatures for ScrollView and SearchBar handlers that manage UIScrollView and MauiSearchBar platform views. These handlers include layout, sizing, and connection methods for scroll-related functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ScrollViewHandler.ConnectHandler(UIKit.UIScrollView! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.CreatePlatformView() -> UIKit.UIScrollView!\noverride Microsoft.Maui.Handlers.ScrollViewHandler.DisconnectHandler(UIKit.UIScrollView! platformView) -> void\noverride Microsoft.Maui.Handlers.ScrollViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.ScrollViewHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ScrollViewHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.ConnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSearchBar!\noverride Microsoft.Maui.Handlers.SearchBarHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiSearchBar! platformView) -> void\noverride Microsoft.Maui.Handlers.SearchBarHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Enabling C# Nullable Reference Types\nDESCRIPTION: A C# compiler directive that enables nullable reference type checking. This enforces more strict null checking and helps prevent null reference exceptions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: ShareMultipleFilesRequest Operator in .NET MAUI\nDESCRIPTION: Explicit operator to convert from ShareFileRequest to ShareMultipleFilesRequest. This allows a single file request to be used in contexts expecting multiple file requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.explicit operator Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest!(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest!\n```\n\n----------------------------------------\n\nTITLE: Getting Visual Diagnostics Overlay\nDESCRIPTION: Retrieves the visual diagnostics overlay for the window, useful for debugging and enhancing UI consistency during development.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!\n```\n\n----------------------------------------\n\nTITLE: Location Class Implementation in C#\nDESCRIPTION: Implementation of the Location class that represents geographical coordinates with additional metadata. It includes properties for coordinates, altitude, accuracy, speed, and timestamp, along with multiple constructors for different initialization scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Location\nMicrosoft.Maui.Devices.Sensors.Location.Accuracy.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Accuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Altitude.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Altitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.get -> Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem\nMicrosoft.Maui.Devices.Sensors.Location.AltitudeReferenceSystem.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Course.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Course.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.IsFromMockProvider.get -> bool\nMicrosoft.Maui.Devices.Sensors.Location.IsFromMockProvider.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Latitude.get -> double\nMicrosoft.Maui.Devices.Sensors.Location.Latitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location() -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, double altitude) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude, System.DateTimeOffset timestamp) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Location(double latitude, double longitude) -> void\nMicrosoft.Maui.Devices.Sensors.Location.Longitude.get -> double\nMicrosoft.Maui.Devices.Sensors.Location.Longitude.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.ReducedAccuracy.get -> bool\nMicrosoft.Maui.Devices.Sensors.Location.ReducedAccuracy.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Speed.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.Speed.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.Timestamp.get -> System.DateTimeOffset\nMicrosoft.Maui.Devices.Sensors.Location.Timestamp.set -> void\nMicrosoft.Maui.Devices.Sensors.Location.VerticalAccuracy.get -> double?\nMicrosoft.Maui.Devices.Sensors.Location.VerticalAccuracy.set -> void\n```\n\n----------------------------------------\n\nTITLE: Label Handler Static Mappings - C#\nDESCRIPTION: Static methods for mapping various Label properties like text, alignment, spacing and decorations. Includes command and property mapper definitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\nstatic Microsoft.Maui.Handlers.LabelHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Maps Extension Methods - C#\nDESCRIPTION: Extension methods for adding and using MAUI Maps functionality in an application\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiMaps(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiMaps(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: AppAction Subtitle getter in MAUI\nDESCRIPTION: This property getter retrieves the subtitle of the AppAction. The subtitle provides additional context or description for the action.  The subtitle is nullable string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppAction.Subtitle.get -> string?\"\n```\n\n----------------------------------------\n\nTITLE: Font Management in Skia Canvas State\nDESCRIPTION: These properties manage the IFont object used in SkiaCanvas, including getter and setter operations, facilitating textual customizations such as typeface changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Font.get -> Microsoft.Maui.Graphics.IFont\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Font.set -> void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attributed Text Runs\nDESCRIPTION: Gets a read-only list of attributed text runs from an IAttributedText instance. It does not require additional parameters. The method returns a list of IAttributedTextRun objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.IAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n```\n\n----------------------------------------\n\nTITLE: Static Readonly SubtitleProperty (TitleBar)\nDESCRIPTION: This code defines a static readonly `BindableProperty` named `SubtitleProperty` within the `TitleBar` class. This property allows setting and binding a subtitle to the title bar in MAUI applications, providing additional context or information below the main title.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\n\"static readonly Microsoft.Maui.Controls.TitleBar.SubtitleProperty -> Microsoft.Maui.Controls.BindableProperty!\"\n```\n\n----------------------------------------\n\nTITLE: Extracting from .nupkg (CI)\nDESCRIPTION: This dotnetcli snippet demonstrates how to extract from `artifacts/*.nupkg` using the new `Install` target within a CI environment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\n$ ./bin/dotnet/dotnet build src/DotNet/DotNet.csproj -t:Install\n```\n\n----------------------------------------\n\nTITLE: MauiWinUIApplication Instance Access\nDESCRIPTION: Deprecated Application property access. Use IPlatformApplication.Current.Application for consistent application instance access.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/BannedSymbols.txt#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.MauiWinUIApplication.Application\n```\n\n----------------------------------------\n\nTITLE: Individual Build Commands for .NET MAUI\nDESCRIPTION: Series of individual commands to build MAUI components and launch Visual Studio\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool restore\ndotnet build src\\DotNet\\DotNet.csproj\n.\\bin\\dotnet\\dotnet build Microsoft.Maui.BuildTasks.slnf\n.\\bin\\dotnet\\dotnet build Microsoft.Maui.sln\ndotnet cake --target=VS\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Text Attributes in .NET MAUI\nDESCRIPTION: This snippet covers the Font and TextFontColor properties in the ITextAttributes interface, allowing for getting and setting font types and colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.Font.get -> Microsoft.Maui.Graphics.IFont\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.Font.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.TextFontColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.ITextAttributes.TextFontColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: BasePermission ShouldShowRationale abstract method in MAUI\nDESCRIPTION: This abstract method determines whether a rationale should be shown to the user before requesting a permission. This method is designed to be implemented in derived classes. It takes no parameters and returns a boolean value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n\"abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.ShouldShowRationale() -> bool\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Key-Value Pairs\nDESCRIPTION: This JSON snippet defines an object with two key-value pairs. It can be used for configuration settings, data storage, or as a response format in API communications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/tests/DeviceTests/Resources/Raw/HybridTestRoot/asyncdata.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SmsMessage Class in C#\nDESCRIPTION: Defines the SmsMessage class with properties for Body and Recipients. Includes constructors for creating SMS messages.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.Body.get -> string?\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.Body.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.Recipients.get -> System.Collections.Generic.List<string!>!\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.Recipients.set -> void\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.SmsMessage() -> void\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.SmsMessage(string! body, string? recipient) -> void\nMicrosoft.Maui.ApplicationModel.Communication.SmsMessage.SmsMessage(string! body, System.Collections.Generic.IEnumerable<string!>? recipients) -> void\n```\n\n----------------------------------------\n\nTITLE: SizeF Operators and Conversions in Microsoft.Maui.Graphics\nDESCRIPTION: Static operators and conversion methods for the SizeF struct in Microsoft.Maui.Graphics. Includes arithmetic operations, equality comparison, and conversion to and from various types including Vector2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_171\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.PointF(Microsoft.Maui.Graphics.SizeF size) -> Microsoft.Maui.Graphics.PointF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator Microsoft.Maui.Graphics.SizeF(System.Numerics.Vector2 size) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.explicit operator System.Numerics.Vector2(Microsoft.Maui.Graphics.SizeF size) -> System.Numerics.Vector2\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator CoreGraphics.CGPoint(Microsoft.Maui.Graphics.SizeF size) -> CoreGraphics.CGPoint\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator CoreGraphics.CGSize(Microsoft.Maui.Graphics.SizeF size) -> CoreGraphics.CGSize\nstatic Microsoft.Maui.Graphics.SizeF.implicit operator Microsoft.Maui.Graphics.Size(Microsoft.Maui.Graphics.SizeF s) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Graphics.SizeF.operator -(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator !=(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic Microsoft.Maui.Graphics.SizeF.operator *(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator /(Microsoft.Maui.Graphics.SizeF s1, float value) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator +(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> Microsoft.Maui.Graphics.SizeF\nstatic Microsoft.Maui.Graphics.SizeF.operator ==(Microsoft.Maui.Graphics.SizeF s1, Microsoft.Maui.Graphics.SizeF s2) -> bool\nstatic readonly Microsoft.Maui.Graphics.SizeF.Zero -> Microsoft.Maui.Graphics.SizeF\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowOffset -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: OrientationSensorData Comparison Operators in MAUI (C#)\nDESCRIPTION: Defines equality and inequality operators for comparing OrientationSensorData instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator !=(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensorData.operator ==(Microsoft.Maui.Devices.Sensors.OrientationSensorData left, Microsoft.Maui.Devices.Sensors.OrientationSensorData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Window Activation in Maui\nDESCRIPTION: Interface method for handling the activation event of a window, which can be used for initializing or updating the UI upon activation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Activated() -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: This line enables nullable reference types in the C# project.  This helps catch potential null reference exceptions at compile time.  No dependencies are directly associated with this directive other than using a compatible C# compiler and setting.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Text.Markdig/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"#nullable enable\"\n```\n\n----------------------------------------\n\nTITLE: Element Handler Extensions\nDESCRIPTION: Extension methods for handling element services and connection states in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ElementHandlerExtensions.GetRequiredService<T>(this Microsoft.Maui.IElementHandler! handler, System.Type! type) -> T\nstatic Microsoft.Maui.ElementHandlerExtensions.GetService<T>(this Microsoft.Maui.IElementHandler! handler) -> T?\nstatic Microsoft.Maui.ElementHandlerExtensions.GetServiceProvider(this Microsoft.Maui.IElementHandler! handler) -> System.IServiceProvider!\nstatic Microsoft.Maui.ElementHandlerExtensions.IsConnected(this Microsoft.Maui.IElementHandler! handler) -> bool\n```\n\n----------------------------------------\n\nTITLE: Packing and Testing Project in .NET MAUI\nDESCRIPTION: Creates MAUI packs and tests against a specific solution with changes\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool restore\ndotnet cake --target=VS --pack --sln=\"<download_directory>\\MauiApp2\\MauiApp2.sln\"\n```\n\n----------------------------------------\n\nTITLE: Getting Picture from PictureCanvas in .NET MAUI\nDESCRIPTION: This property retrieves the current IPicture instance being managed by the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.Picture.get -> Microsoft.Maui.Graphics.IPicture\n```\n\n----------------------------------------\n\nTITLE: Property Mapper Extensions for MAUI Handlers\nDESCRIPTION: Extensions for modifying property mappings between virtual views and their handlers, allowing for appending, prepending, or replacing mapping actions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.AppendToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.ModifyMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView, System.Action<Microsoft.Maui.IElementHandler!, Microsoft.Maui.IElement!>?>! method) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.PrependToMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<TVirtualView, TViewHandler>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.PropertyMapperExtensions.ReplaceMapping<TVirtualView, TViewHandler>(this Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IElement!, Microsoft.Maui.IElementHandler!>! propertyMapper, string! key, System.Action<TViewHandler, TVirtualView>! method) -> void\n```\n\n----------------------------------------\n\nTITLE: Override Dispose Method (ReorderableItemsViewController)\nDESCRIPTION: This snippet showcases an override of the Dispose method within the ReorderableItemsViewController2 class.  It is likely intended for releasing resources and cleaning up memory in MAUI when dealing with reorderable items in a view, part of Microsoft.Maui.Controls.Handlers.Items2.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n\"override Microsoft.Maui.Controls.Handlers.Items2.ReorderableItemsViewController2<TItemsView>.Dispose(bool disposing) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Slider and Stepper Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for SliderHandler and StepperHandler classes that manage platform view creation, handler connection/disconnection for sliders and steppers in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SliderHandler.ConnectHandler(UIKit.UISlider! platformView) -> void\noverride Microsoft.Maui.Handlers.SliderHandler.CreatePlatformView() -> UIKit.UISlider!\noverride Microsoft.Maui.Handlers.SliderHandler.DisconnectHandler(UIKit.UISlider! platformView) -> void\noverride Microsoft.Maui.Handlers.StepperHandler.ConnectHandler(UIKit.UIStepper! platformView) -> void\noverride Microsoft.Maui.Handlers.StepperHandler.CreatePlatformView() -> UIKit.UIStepper!\noverride Microsoft.Maui.Handlers.StepperHandler.DisconnectHandler(UIKit.UIStepper! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewHandler Generic Class in C#\nDESCRIPTION: Defines a generic ViewHandler class with virtual view and platform view type parameters, including properties for ContainerView, PlatformView, ViewController, and VirtualView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ContainerView.get -> Microsoft.Maui.Platform.WrapperView?\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ContainerView.set -> void\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.PlatformView.get -> TPlatformView!\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewController.get -> UIKit.UIViewController?\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewController.set -> void\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.ViewHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.VirtualView.get -> TVirtualView!\n```\n\n----------------------------------------\n\nTITLE: Network Access Levels Enumeration\nDESCRIPTION: Defines different levels of network access in MAUI, ranging from no access to full internet connectivity\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Networking.NetworkAccess.ConstrainedInternet = 3\nMicrosoft.Maui.Networking.NetworkAccess.Internet = 4\nMicrosoft.Maui.Networking.NetworkAccess.Local = 2\nMicrosoft.Maui.Networking.NetworkAccess.None = 1\nMicrosoft.Maui.Networking.NetworkAccess.Unknown = 0\n```\n\n----------------------------------------\n\nTITLE: Launching VS with Cake for .NET MAUI Development\nDESCRIPTION: Bootstrap .NET SDK and launch Visual Studio for MAUI development\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool restore\ndotnet cake --target=VS\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of IBorderHandler in MAUI\nDESCRIPTION: Defines properties for the `IBorderHandler` interface in MAUI to get the platform view and virtual view associated with the Border. The PlatformView property exposes the underlying platform-specific view, while VirtualView represents the .NET MAUI Border.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IBorderHandler.PlatformView.get -> object!\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.IBorderHandler.VirtualView.get -> Microsoft.Maui.IBorderView!\"\n```\n\n----------------------------------------\n\nTITLE: SkiaCanvasState Font Property Management\nDESCRIPTION: Provides getter and setter for font property in SkiaCanvasState, managing font state for Skia rendering contexts\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping SelectedIndicatorColor for IndicatorViewHandler in C#\nDESCRIPTION: This static method maps the SelectedIndicatorColor property for an IndicatorView. It takes an IIndicatorViewHandler and an IIndicatorView as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.IndicatorViewHandler.MapSelectedIndicatorColor(Microsoft.Maui.Handlers.IIndicatorViewHandler! handler, Microsoft.Maui.IIndicatorView! indicator) -> void\n```\n\n----------------------------------------\n\nTITLE: Element Measurement Function in MAUI C#\nDESCRIPTION: This snippet defines the Measure method for VisualElement, which calculates and returns the size constraints for an element. It is vital for defining component layout within specified width and height constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.VisualElement.Measure(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Overriding Dispose Method in ReorderableItemsViewController2 in .NET MAUI\nDESCRIPTION: The Dispose method in ReorderableItemsViewController2<TItemsView> is overridden to handle resource cleanup. This method accepts a boolean parameter 'disposing' to determine if the cleanup is for managed resources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ReorderableItemsViewController2<TItemsView>.Dispose(bool disposing) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing on Canvas with Pattern in .NET MAUI\nDESCRIPTION: This method draws a specified pattern on a given canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: ShareRequestBase in MAUI DataTransfer\nDESCRIPTION: The 'ShareRequestBase' class provides foundational properties for structuring share requests, including presentation bounds and a general title property. It serves as a base for more specific sharing requests within the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.PresentationSourceBounds.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.ShareRequestBase() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Package Version Dependency\nDESCRIPTION: Command showing how other products can consume MAUI package version information using darc add-dependency.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndarc add-dependency -n Microsoft.Maui.Sdk -t product -r https://github.com/dotnet/maui -v 1.2.3\n```\n\n----------------------------------------\n\nTITLE: FeatureNotEnabledException in MAUI\nDESCRIPTION: This exception class is raised when a specific feature is not enabled in the MAUI application environment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.FeatureNotEnabledException\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.FeatureNotEnabledException.FeatureNotEnabledException() -> void\n```\n\n----------------------------------------\n\nTITLE: Wrapping Pattern in PaintPattern Class\nDESCRIPTION: This constructor initializes a PaintPattern instance with a specified pattern.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.PaintPattern(Microsoft.Maui.Graphics.IPattern pattern) -> void\n```\n\n----------------------------------------\n\nTITLE: Inserting Menu Element in Menu Flyout Sub Item Handler in C#\nDESCRIPTION: This method allows for the insertion of a menu element at a specified index in the menu flyout sub-item handler. It requires 'index' and 'view' parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IMenuFlyoutSubItemHandler.Insert(int index, Microsoft.Maui.IMenuElement! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Drawing on Canvas in .NET MAUI\nDESCRIPTION: This snippet describes the Draw method in the IPattern interface for drawing a pattern on a given canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to MAUI Roadmap\nDESCRIPTION: Simple markdown link directing users to the .NET MAUI roadmap documentation on GitHub wiki\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/ReleasePlanning.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Roadmap](https://github.com/dotnet/maui/wiki/Roadmap)\n```\n\n----------------------------------------\n\nTITLE: Enabling API Tracking in Project File\nDESCRIPTION: XML snippet to add to the project file (.csproj) to enable API tracking.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Import Project=\"$(MauiSrcDirectory)PublicAPI.targets\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Default Channel for Build Asset Manifest\nDESCRIPTION: Commands to configure default channel associations for build asset manifest promotion using darc add-default-channel.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndarc add-default-channel --channel \".NET 9.0.1xx SDK\" --branch \"net9.0\" --repo https://github.com/dotnet/maui\n```\n\nLANGUAGE: bash\nCODE:\n```\ndarc add-default-channel --channel \".NET 9.0.1xx SDK Preview 1\" --branch \"release/9.0.1xx-preview1\" --repo https://github.com/dotnet/maui\n```\n\n----------------------------------------\n\nTITLE: Map Pin Handler Static Methods\nDESCRIPTION: Static methods for handling map pin properties including address, label, and location mapping. Includes a static Mapper property for property mapping between IMapPin and IMapPinHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapAddress(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapLabel(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapLocation(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.Maps.IMapPin!, Microsoft.Maui.Maps.Handlers.IMapPinHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Outputs in 1ES Pipeline Template\nDESCRIPTION: Example showing how to configure a 1ES pipeline with multiple outputs using MicroBuild template. Demonstrates proper artifact staging and publishing setup to reduce security scan overhead.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/common/template-guidance.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate\n  parameters:\n    stages:\n    - stage: build\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          # 1ES makes use of outputs to reduce security task injection overhead\n          templateContext:\n            outputs:\n            - output: pipelineArtifact\n              displayName: 'Publish logs from source'\n              continueOnError: true\n              condition: always()\n              targetPath: $(Build.ArtifactStagingDirectory)/artifacts/log\n              artifactName: Logs\n          jobs:\n          - job: Windows\n            steps:\n            - script: echo \"friendly neighborhood\" > artifacts/marvel/spiderman.txt\n          # copy build outputs to artifact staging directory for publishing\n          - task: CopyFiles@2\n              displayName: Gather build output\n              inputs:\n                SourceFolder: '$(Build.SourcesDirectory)/artifacts/marvel'\n                Contents: '**'\n                TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/marvel'\n```\n\n----------------------------------------\n\nTITLE: Creating Combined TextAttributes Dictionary in C#\nDESCRIPTION: This snippet defines a constructor for the TextAttributes class that combines two read-only dictionaries for text attributes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.TextAttributes.TextAttributes(System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> first, System.Collections.Generic.IReadOnlyDictionary<Microsoft.Maui.Graphics.Text.TextAttribute, string> second) -> void\n```\n\n----------------------------------------\n\nTITLE: Display Information Comparison in .NET MAUI\nDESCRIPTION: Operator overloads for comparing DisplayInfo instances, enabling equality checks between display information objects. These operators support comparing screen dimensions, density, orientation, and other display characteristics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DisplayInfo.operator !=(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\nstatic Microsoft.Maui.Devices.DisplayInfo.operator ==(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Adding Line to PathF in .NET MAUI\nDESCRIPTION: These methods add a line to the end of the path, defined by x and y coordinates or a PointF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.LineTo(float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.LineTo(Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Defining IActivityStateManager in MAUI\nDESCRIPTION: This snippet defines the IActivityStateManager interface, which includes methods for managing activity states and obtaining the current activity within a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IActivityStateManager.GetCurrentActivity() -> Android.App.Activity?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IActivityStateManager.Init(Android.App.Activity! activity, Android.OS.Bundle? bundle) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IActivityStateManager.Init(Android.App.Application! application) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IActivityStateManager.WaitForActivityAsync(System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Android.App.Activity!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IActivityStateManager.ActivityStateChanged -> System.EventHandler<Microsoft.Maui.ApplicationModel.ActivityStateChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with Darc\nDESCRIPTION: Command to update all dependencies from a specific channel using darc update-dependencies.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndarc update-dependencies --channel \".NET 6\"\n```\n\n----------------------------------------\n\nTITLE: WrapperView Class in C#\nDESCRIPTION: Definition of WrapperView class which provides functionality to wrap UI elements with additional visual features like borders, clips, and shadows.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Platform.WrapperView\nMicrosoft.Maui.Platform.WrapperView.Border.get -> Microsoft.Maui.IBorderStroke?\nMicrosoft.Maui.Platform.WrapperView.Border.set -> void\nMicrosoft.Maui.Platform.WrapperView.Clip.get -> Microsoft.Maui.Graphics.IShape?\nMicrosoft.Maui.Platform.WrapperView.Clip.set -> void\nMicrosoft.Maui.Platform.WrapperView.Shadow.get -> Microsoft.Maui.IShadow?\nMicrosoft.Maui.Platform.WrapperView.Shadow.set -> void\nMicrosoft.Maui.Platform.WrapperView.WrapperView() -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping SwipeView Properties in MAUI\nDESCRIPTION: Static methods for mapping various properties of the SwipeView control to its handler in MAUI. These methods handle updating the swipe items, content, and swipe behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapBottomItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapContent(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapLeftItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestClose(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRequestOpen(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView, object? args) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapRightItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapSwipeTransitionMode(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! swipeView) -> void\nstatic Microsoft.Maui.Handlers.SwipeViewHandler.MapTopItems(Microsoft.Maui.Handlers.ISwipeViewHandler! handler, Microsoft.Maui.ISwipeView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive to enable nullable reference type checking, which helps catch potential null reference exceptions at compile time. This is commonly used in modern C# projects to improve type safety.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Managing Layout Events in Microsoft MAUI\nDESCRIPTION: This snippet demonstrates the definition of an event service for managing lifecycle events in Microsoft MAUI, including the ability to add, check, and retrieve delegates for events, enabling developers to handle application lifecycle events efficiently.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.LifecycleEvents.ILifecycleBuilder.AddEvent<TDelegate>(string! eventName, TDelegate! action) -> void\nMicrosoft.Maui.LifecycleEvents.ILifecycleEventService.ContainsEvent(string! eventName) -> bool\nMicrosoft.Maui.LifecycleEvents.ILifecycleEventService.GetEventDelegates<TDelegate>(string! eventName) -> System.Collections.Generic.IEnumerable<TDelegate!>!\n```\n\n----------------------------------------\n\nTITLE: Application Handler Mapping Methods in C#\nDESCRIPTION: Methods for handling application-level events like window management and application termination. These methods map cross-platform application operations to platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ApplicationHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapCloseWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapOpenWindow(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\nstatic Microsoft.Maui.Handlers.ApplicationHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IApplication!, Microsoft.Maui.Handlers.ApplicationHandler!>!\nstatic Microsoft.Maui.Handlers.ApplicationHandler.MapTerminate(Microsoft.Maui.Handlers.ApplicationHandler! handler, Microsoft.Maui.IApplication! application, object? args) -> void\n```\n\n----------------------------------------\n\nTITLE: ItemsView Handler Method Declarations for iOS\nDESCRIPTION: Collection of method and property declarations for handling ItemsView components in MAUI iOS implementation. Includes controllers, delegates, and cell implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n\n~abstract Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.CreateController(TItemsView newElement, UIKit.UICollectionViewLayout layout) -> Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>\n\n~abstract Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.SelectLayout() -> UIKit.UICollectionViewLayout\n```\n\n----------------------------------------\n\nTITLE: BasePlatformPermission Required Declarations getter in MAUI\nDESCRIPTION: This virtual property getter retrieves a function that returns a collection of strings representing the required declarations for a platform permission.  The function returns an IEnumerable of strings, allowing for dynamic determination of the required declarations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n\"~virtual Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.RequiredDeclarations.get -> System.Func<System.Collections.Generic.IEnumerable<string>>\"\n```\n\n----------------------------------------\n\nTITLE: GraphicsView, ImageButton, and ImageView Extensions in MAUI for Android\nDESCRIPTION: Extension methods for handling graphics views, image buttons and image views in MAUI Android implementation. These methods manage updating properties like drawable, corner radius, padding, stroke color/thickness, and image aspect ratio.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.GraphicsViewExtensions.UpdateDrawable(this Microsoft.Maui.Graphics.Platform.PlatformGraphicsView! PlatformGraphicsView, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Platform.ImageButtonExtensions.UpdateCornerRadius(this Google.Android.Material.ImageView.ShapeableImageView! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ImageButtonExtensions.UpdatePadding(this Google.Android.Material.ImageView.ShapeableImageView! platformButton, Microsoft.Maui.IImageButton! imageButton) -> void\nstatic Microsoft.Maui.Platform.ImageButtonExtensions.UpdateStrokeColor(this Google.Android.Material.ImageView.ShapeableImageView! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ImageButtonExtensions.UpdateStrokeThickness(this Google.Android.Material.ImageView.ShapeableImageView! platformButton, Microsoft.Maui.IButtonStroke! buttonStroke) -> void\nstatic Microsoft.Maui.Platform.ImageViewExtensions.Clear(this Android.Widget.ImageView! imageView) -> void\nstatic Microsoft.Maui.Platform.ImageViewExtensions.UpdateAspect(this Android.Widget.ImageView! imageView, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Platform.ImageViewExtensions.UpdateIsAnimationPlaying(this Android.Graphics.Drawables.Drawable? drawable, Microsoft.Maui.IImageSourcePart! image) -> void\nstatic Microsoft.Maui.Platform.ImageViewExtensions.UpdateIsAnimationPlaying(this Android.Widget.ImageView! imageView, Microsoft.Maui.IImageSourcePart! image) -> void\n```\n\n----------------------------------------\n\nTITLE: Border Handler Platform Arrangement\nDESCRIPTION: Override method for arranging border elements in the platform-specific implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.BorderHandler.PlatformArrange(Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Android ColorStateList Constructor\nDESCRIPTION: Deprecated ColorStateList constructor. Use Microsoft.Maui.PlatformInterop.Get*ColorStateList() Java methods for better platform integration.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/BannedSymbols.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAndroid.Content.Res.ColorStateList.ColorStateList(int[][] states, int[] colors)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Basic View Measurement Flow in MAUI\nDESCRIPTION: Mermaid sequence diagram showing the measurement process flow between Platform, Backing View and Cross-Platform View components when measuring a basic view.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/layout.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant P as Platform\n    participant BV as Backing View\n    participant XV as Cross-Platform View\n    P->>BV: Measure\n    BV->>XV: Cross-Platform Measure\n    Note over XV: Update DesiredSize\n    XV->>BV: DesiredSize\n    Note over BV: Internal bookkeeping (e.g. SetMeasuredDimension())\n    BV->>P: Size\n```\n\n----------------------------------------\n\nTITLE: Service Collection Singleton Registration\nDESCRIPTION: Deprecated singleton registration method. Use a Factory method to create the service instead of direct registration.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/BannedSymbols.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<T1,T2>(IServiceCollection)\n```\n\n----------------------------------------\n\nTITLE: Measurement and Layout Extensions in MAUI for Android\nDESCRIPTION: Extensions for handling measurement specifications in Android views. These methods provide utilities to work with Android's MeasureSpec system, converting between Android-specific measurement values and MAUI's layout system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_160\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.MeasureSpecExtensions.GetMode(this int measureSpec) -> Android.Views.MeasureSpecMode\nstatic Microsoft.Maui.Platform.MeasureSpecExtensions.GetSize(this int measureSpec) -> int\nstatic Microsoft.Maui.Platform.MeasureSpecExtensions.MakeMeasureSpec(this Android.Views.MeasureSpecMode mode, int size) -> int\nstatic Microsoft.Maui.Platform.MeasureSpecExtensions.ToDouble(this int measureSpec, Android.Content.Context! context) -> double\n```\n\n----------------------------------------\n\nTITLE: Creating a Share File in .NET MAUI\nDESCRIPTION: This constructor initializes a ShareFile object. It can take a FileBase object, a string path, and an optional content type. Essential for file sharing functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(Microsoft.Maui.Storage.FileBase! file) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath, string! contentType) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.DataTransfer.ShareFile.ShareFile(string! fullPath) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting DateTimeOffset Values in MAUI Preferences\nDESCRIPTION: Static methods for storing DateTimeOffset values in preferences storage with optional shared name parameter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: A compiler directive that enables nullable reference type checking for improved null safety. This feature helps catch potential null reference exceptions at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Setting Miter Limit in W2DCanvas\nDESCRIPTION: This snippet sets the miter limit for the W2DCanvas, affecting how the corners of sharp shapes are rendered. No return value is expected.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.MiterLimit.set -> void\n```\n\n----------------------------------------\n\nTITLE: Reversing Paths in .NET MAUI\nDESCRIPTION: This snippet defines the Reverse method in the PathF class, which returns a new path that is the reverse of the original.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Reverse() -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Enables C# nullable reference type annotations for the file, allowing for better null safety checking at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Constructing Insets in .NET MAUI\nDESCRIPTION: This snippet defines constructors and methods for the Insets class, enabling the initialization of insets and converting them to a parsable string format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Insets.Insets(Microsoft.Maui.Graphics.Insets insets) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Insets.ToParsableString() -> string\n```\n\n----------------------------------------\n\nTITLE: Defining CommandMapper for LabelHandler in C#\nDESCRIPTION: This static property defines a CommandMapper for the LabelHandler, which maps commands for ILabel to ILabelHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a Font in MAUI with C#\nDESCRIPTION: This method allows the creation of a copy of a given SKFont object. It takes an optional SKFont parameter and returns a new SKFont instance. This utility is useful when you want to modify or reuse font settings without altering the original font.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKFontExtensions.CreateCopy(this SkiaSharp.SKFont? font) -> SkiaSharp.SKFont?\n```\n\n----------------------------------------\n\nTITLE: Slider Extension Methods for iOS UIKit\nDESCRIPTION: Extension methods for UISlider that handle updates to minimum/maximum values, track colors, thumb properties and value changes. These methods synchronize MAUI Slider control properties with UIKit slider implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMaximum(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateMinimum(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateValue(this UIKit.UISlider! uiSlider, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Color Conversion Methods in MAUI Graphics\nDESCRIPTION: Provides methods for converting color representations, including RGB and RGBA conversion and converting colors to unsigned integers\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.ToRgb(out byte r, out byte g, out byte b)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.ToRgba(out byte r, out byte g, out byte b, out byte a)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.ToUint()\n```\n\n----------------------------------------\n\nTITLE: Comparing Attributed Text Runs in C#\nDESCRIPTION: This snippet defines a comparison method for comparing two attributed text runs, returning an integer representing their order.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Compare(Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> int\n```\n\n----------------------------------------\n\nTITLE: Implementing GetDesiredSize for ItemsViewHandler2 in C#\nDESCRIPTION: Overrides the GetDesiredSize method for ItemsViewHandler2 class, taking width and height constraints and returning a Size object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.ItemsViewHandler2<TItemsView>.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\n```\n\n----------------------------------------\n\nTITLE: Overriding Permission and Device Information Methods in C#\nDESCRIPTION: This snippet shows method overrides for various MAUI classes related to permissions, battery info, device characteristics, and sensor data. These methods typically provide custom implementations for equality comparisons, hash code generation, and string representations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.ShouldShowRationale() -> bool\noverride Microsoft.Maui.Devices.BatteryInfoChangedEventArgs.ToString() -> string!\noverride Microsoft.Maui.Devices.DeviceIdiom.GetHashCode() -> int\noverride Microsoft.Maui.Devices.DevicePlatform.GetHashCode() -> int\noverride Microsoft.Maui.Devices.DisplayInfo.GetHashCode() -> int\noverride Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs.ToString() -> string!\noverride Microsoft.Maui.Devices.Sensors.AccelerometerData.Equals(object? obj) -> bool\noverride Microsoft.Maui.Devices.Sensors.AccelerometerData.GetHashCode() -> int\noverride Microsoft.Maui.Devices.Sensors.AccelerometerData.ToString() -> string!\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for .NET MAUI\nDESCRIPTION: Executes integration tests with specific filters and logging options\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/DevelopmentTips.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test src/TestUtils/src/Microsoft.Maui.IntegrationTests --logger \"console;verbosity=diagnostic\" --filter \"Name=Build\\(%22maui%22,%22net7.0%22,%22Debug%22,False\\)\"\n```\n\n----------------------------------------\n\nTITLE: Getting PlatformView for ScrollView in .NET MAUI\nDESCRIPTION: This snippet captures the properties related to the IScrollViewHandler interface, which manages scrolling views in MAUI apps.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IScrollViewHandler.PlatformView.get -> Microsoft.Maui.Platform.MauiScrollView!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Handlers.IScrollViewHandler.VirtualView.get -> Microsoft.Maui.IScrollView!\n```\n\n----------------------------------------\n\nTITLE: AppActionEventArgs Constructor in MAUI\nDESCRIPTION: This constructor initializes a new instance of the AppActionEventArgs class.  It takes an AppAction as input, which represents the action that was triggered.  This is used to pass information about the triggered AppAction.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppActionEventArgs.AppActionEventArgs(Microsoft.Maui.ApplicationModel.AppAction! appAction) -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining Map Interface Methods for Location Navigation in .NET MAUI\nDESCRIPTION: The IMap interface provides methods to open the device's map application with specific coordinates or placemarks and customizable navigation options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.ApplicationModel.IMap.OpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task!\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Installing Workload System-Wide (macOS)\nDESCRIPTION: This dotnetcli snippet shows how to install the workload system-wide on macOS by building the `DotNet.csproj` project with the `Install` target. This installs the workload in the instance of `dotnet` that is being run.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\n$ sudo dotnet build src/DotNet/DotNet.csproj -t:Install\n```\n\n----------------------------------------\n\nTITLE: SwipeItemMenuItemHandler Property Mappings in MAUI\nDESCRIPTION: Static methods for mapping properties of SwipeItemMenuItem controls in MAUI, including background, text styling, content source, and visibility management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Stroke Color Management in Skia Canvas State\nDESCRIPTION: These properties manage the stroke color in SkiaCanvasState, allowing modification and retrieval of line and border colors applied to graphic elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.StrokeColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.StrokeColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Virtual UpdateFlowDirection Method (ItemsViewController)\nDESCRIPTION: This code represents a virtual method named UpdateFlowDirection in the ItemsViewController2 class. This method is designed to handle updates to the flow direction of the items within the ItemsView, which affects how content is laid out based on the user's locale or preference.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\n\"virtual Microsoft.Maui.Controls.Handlers.Items2.ItemsViewController2<TItemsView>.UpdateFlowDirection() -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining Polygon BindableProperties in C#\nDESCRIPTION: Static readonly property definition for Polygon control's fill color property for polygon styling on maps.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Defining IWindow Interface in C#\nDESCRIPTION: Defines the IWindow interface with properties and methods for managing window functionality, including lifecycle events, overlays, and frame management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IWindow.Activated() -> void\nMicrosoft.Maui.IWindow.AddOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.BackButtonClicked() -> bool\nMicrosoft.Maui.IWindow.Backgrounding(Microsoft.Maui.IPersistedState! state) -> void\nMicrosoft.Maui.IWindow.Content.get -> Microsoft.Maui.IView!\nMicrosoft.Maui.IWindow.Created() -> void\nMicrosoft.Maui.IWindow.Deactivated() -> void\nMicrosoft.Maui.IWindow.Destroying() -> void\nMicrosoft.Maui.IWindow.DisplayDensityChanged(float displayDensity) -> void\nMicrosoft.Maui.IWindow.FlowDirection.get -> Microsoft.Maui.FlowDirection\nMicrosoft.Maui.IWindow.FrameChanged(Microsoft.Maui.Graphics.Rect frame) -> void\nMicrosoft.Maui.IWindow.Height.get -> double\nMicrosoft.Maui.IWindow.MaximumHeight.get -> double\nMicrosoft.Maui.IWindow.MaximumWidth.get -> double\nMicrosoft.Maui.IWindow.MinimumHeight.get -> double\nMicrosoft.Maui.IWindow.MinimumWidth.get -> double\nMicrosoft.Maui.IWindow.Overlays.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlay!>!\nMicrosoft.Maui.IWindow.RemoveOverlay(Microsoft.Maui.IWindowOverlay! overlay) -> bool\nMicrosoft.Maui.IWindow.RequestDisplayDensity() -> float\nMicrosoft.Maui.IWindow.Resumed() -> void\nMicrosoft.Maui.IWindow.Stopped() -> void\nMicrosoft.Maui.IWindow.TitleBarDragRectangles.get -> Microsoft.Maui.Graphics.Rect[]?\nMicrosoft.Maui.IWindow.VisualDiagnosticsOverlay.get -> Microsoft.Maui.IVisualDiagnosticsOverlay!\nMicrosoft.Maui.IWindow.Width.get -> double\nMicrosoft.Maui.IWindow.X.get -> double\nMicrosoft.Maui.IWindow.Y.get -> double\n```\n\n----------------------------------------\n\nTITLE: Clipping Path in .NET MAUI Canvas State\nDESCRIPTION: Defines the ClipPath method within the canvas state, allowing the specification of a path and its winding mode to clip the drawing area. This is fundamental for creating complex graphics shapes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Win2D.W2DCanvasState.ClipPath(Microsoft.Maui.Graphics.PathF path, Microsoft.Maui.Graphics.WindingMode windingMode) -> void\n```\n\n----------------------------------------\n\nTITLE: WebView Extensions for Windows WebView2 Control in MAUI\nDESCRIPTION: Extension methods for Microsoft.UI.Xaml.Controls.WebView2 that handle web navigation, script evaluation, and source updates in MAUI WebView implementations. These methods enable cross-platform web functionality while leveraging Windows-specific WebView2 capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.WebViewExtensions.Eval(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView, string! script) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.EvaluateJavaScript(this Microsoft.UI.Xaml.Controls.WebView2! webView, Microsoft.Maui.EvaluateJavaScriptAsyncRequest! request) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateGoBack(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateGoForward(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateReload(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView, Microsoft.Maui.IWebViewDelegate? webViewDelegate) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateSource(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void\nstatic Microsoft.Maui.Platform.WebViewExtensions.UpdateUserAgent(this Microsoft.UI.Xaml.Controls.WebView2! platformWebView, Microsoft.Maui.IWebView! webView) -> void\n```\n\n----------------------------------------\n\nTITLE: XAML Extension Methods\nDESCRIPTION: Helper methods for loading XAML content into views. Provides generic methods to load XAML from string content or using a calling type.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, string xaml) -> TXaml\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, System.Type callingType) -> TXaml\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeBehaviorOnInvoked enum in C#\nDESCRIPTION: Declares an enumeration for swipe behavior options when invoked, including Auto, Close, and RemainOpen.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeBehaviorOnInvoked\nMicrosoft.Maui.SwipeBehaviorOnInvoked.Auto = 0 -> Microsoft.Maui.SwipeBehaviorOnInvoked\nMicrosoft.Maui.SwipeBehaviorOnInvoked.Close = 1 -> Microsoft.Maui.SwipeBehaviorOnInvoked\nMicrosoft.Maui.SwipeBehaviorOnInvoked.RemainOpen = 2 -> Microsoft.Maui.SwipeBehaviorOnInvoked\n```\n\n----------------------------------------\n\nTITLE: Overriding PickerHandler Methods for Tizen Platform\nDESCRIPTION: These methods override PickerHandler functionality to create, connect, and disconnect Tizen.UIExtensions.NUI.Entry elements for the Tizen implementation of MAUI pickers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.PickerHandler.ConnectHandler(Tizen.UIExtensions.NUI.Entry! platformView) -> void\noverride Microsoft.Maui.Handlers.PickerHandler.CreatePlatformView() -> Tizen.UIExtensions.NUI.Entry!\noverride Microsoft.Maui.Handlers.PickerHandler.DisconnectHandler(Tizen.UIExtensions.NUI.Entry! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Value Target Provider Constructor\nDESCRIPTION: Constructor implementation for ValueTargetProvider class handling target objects and properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.Internals.ValueTargetProvider.ValueTargetProvider(object! targetObject, object! targetProperty) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining TextDecorations enum in C#\nDESCRIPTION: Declares an enumeration for text decoration options, including None, Strikethrough, and Underline.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.TextDecorations\nMicrosoft.Maui.TextDecorations.None = 0 -> Microsoft.Maui.TextDecorations\nMicrosoft.Maui.TextDecorations.Strikethrough = 2 -> Microsoft.Maui.TextDecorations\nMicrosoft.Maui.TextDecorations.Underline = 1 -> Microsoft.Maui.TextDecorations\n```\n\n----------------------------------------\n\nTITLE: WebAuthenticator Result Constructor Implementation in C#\nDESCRIPTION: Constructor overloads for WebAuthenticatorResult class handling OAuth/OpenID authentication responses.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nWebAuthenticatorResult(IDictionary<string, string> properties);\nWebAuthenticatorResult(Uri uri, IWebAuthenticatorResponseDecoder responseDecoder);\nWebAuthenticatorResult(Uri uri);\n```\n\n----------------------------------------\n\nTITLE: Filling Rectangles with Microsoft.Maui.Graphics\nDESCRIPTION: These extension methods allow rectangle fills on a canvas using Rect or RectF objects. Applicable for creating filled-base rectangular shapes in Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Rect rect) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.FillRectangle(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.RectF rect) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Blend Mode in W2DCanvas\nDESCRIPTION: This snippet sets the blend mode for the W2DCanvas, determining how colors from overlapping objects are combined. It does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.BlendMode.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining DiagnosticsOptions Class for MAUI in C#\nDESCRIPTION: This snippet defines a DiagnosticsOptions class with properties for configuring various diagnostic settings in a MAUI application. It includes options for controlling logging, tracing, and performance monitoring.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia.WPF/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n\nnamespace Microsoft.Maui.Hosting;\n\npublic class DiagnosticsOptions\n{\n\tpublic bool IsPerformanceBoundaryEnabled { get; set; } = false;\n\n\tpublic bool IsLoggingEnabled { get; set; } = false;\n\n\tpublic bool IsDebuggerTraceEnabled { get; set; } = false;\n\n\tpublic bool IsRoslynHotReloadEnabled { get; set; } = false;\n\n\tpublic bool IsHotReloadLogEnabled { get; set; } = false;\n\n\tpublic bool IsDeveloperGesturesEnabled { get; set; } = false;\n\n\tpublic bool IsStartupTraceEnabled { get; set; } = false;\n\n\tpublic bool IsAotProfilerEnabled { get; set; } = false;\n\n\tpublic bool IsHotReload2Enabled { get; set; } = false;\n\n\tpublic string? DeferralExecutionMode { get; set; }\n\n\tpublic string? VisualDiagnosticsOverlay { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: FilePickerFileType Static Fields in MAUI (C#)\nDESCRIPTION: These static readonly fields define common file types for use with the FilePicker in MAUI. They include predefined types for images, JPEG, PDF, PNG, and videos.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Images -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Jpeg -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Pdf -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Png -> Microsoft.Maui.Storage.FilePickerFileType!\nstatic readonly Microsoft.Maui.Storage.FilePickerFileType.Videos -> Microsoft.Maui.Storage.FilePickerFileType!\n```\n\n----------------------------------------\n\nTITLE: Gyroscope Sensor Access in .NET MAUI\nDESCRIPTION: Static methods for monitoring device gyroscope data in .NET MAUI applications. These methods allow starting/stopping monitoring and handling rotation rate changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Default.get -> Microsoft.Maui.Devices.Sensors.IGyroscope!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Gyroscope.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator !=(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.GyroscopeData.operator ==(Microsoft.Maui.Devices.Sensors.GyroscopeData left, Microsoft.Maui.Devices.Sensors.GyroscopeData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionStatus Enum in MAUI\nDESCRIPTION: Enum defining different permission states in MAUI applications including Denied, Disabled, Granted, Limited, Restricted and Unknown statuses.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Denied = 1\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Disabled = 2\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Granted = 3\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Limited = 5\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Restricted = 4\nMicrosoft.Maui.ApplicationModel.PermissionStatus.Unknown = 0\n```\n\n----------------------------------------\n\nTITLE: MAUI Lifecycle Configuration Extension Method\nDESCRIPTION: Extension method for configuring lifecycle events in a MAUI application builder. Takes a builder instance and configuration delegate to set up application lifecycle handling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: PathF Utility and Manipulation Methods\nDESCRIPTION: Method signatures for comparing, flattening, and accessing points in paths in the PathF class.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathF.Equals(object obj, float epsilon) -> bool\nMicrosoft.Maui.Graphics.PathF.GetFlattenedPath(float flatness = 0.001, bool includeSubPaths = false) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.GetPointsForSegment(int segmentIndex) -> Microsoft.Maui.Graphics.PointF[]\nMicrosoft.Maui.Graphics.PathF.InsertCurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.InsertLineTo(Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.InsertQuadTo(Microsoft.Maui.Graphics.PointF controlPoint, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Defining Graphics Enumerations in C#\nDESCRIPTION: Enumeration definitions for VerticalAlignment, WindingMode, and TextFlow in the Microsoft.Maui.Graphics namespace that define alignment options and rendering behaviors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.VerticalAlignment.Top = 0 -> Microsoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.VerticalAlignment.Center = 1 -> Microsoft.Maui.Graphics.VerticalAlignment\nMicrosoft.Maui.Graphics.VerticalAlignment.Bottom = 2 -> Microsoft.Maui.Graphics.VerticalAlignment\n\nMicrosoft.Maui.Graphics.WindingMode\nMicrosoft.Maui.Graphics.WindingMode.NonZero = 0 -> Microsoft.Maui.Graphics.WindingMode\nMicrosoft.Maui.Graphics.WindingMode.EvenOdd = 1 -> Microsoft.Maui.Graphics.WindingMode\n\nMicrosoft.Maui.Graphics.TextFlow\nMicrosoft.Maui.Graphics.TextFlow.ClipBounds = 0 -> Microsoft.Maui.Graphics.TextFlow\nMicrosoft.Maui.Graphics.TextFlow.OverflowBounds = 1 -> Microsoft.Maui.Graphics.TextFlow\n```\n\n----------------------------------------\n\nTITLE: Constants for Canvas Defaults and Font Weights in Microsoft.Maui (C#)\nDESCRIPTION: This section provides constants related to default settings and font weights, which are crucial for consistent rendering across the application. It includes values for miter limits, shadow blurs, and a range of font weights from thin to ultra-black.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.CanvasDefaults.DefaultMiterLimit = 10 -> float\nconst Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowBlur = 5 -> float\nconst Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int\n// Additional font weight constants\nconst Microsoft.Maui.Graphics.FontWeights.UltraLight = 200 -> int\n\n```\n\n----------------------------------------\n\nTITLE: Enabling BlazorWebView in MAUI\nDESCRIPTION: This XML snippet demonstrates how to opt-in to `BlazorWebView` in a MAUI project by changing the `Sdk` attribute to `Microsoft.NET.Sdk.Razor`. This triggers the inclusion of the `Microsoft.AspNetCore.Components.WebView.Maui` workload.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk.Razor\">\n```\n\n----------------------------------------\n\nTITLE: BrowserLaunchOptions LaunchMode setter in MAUI\nDESCRIPTION: This property setter sets the launch mode for the browser. The launch mode determines whether to use an external browser or the system-preferred browser. This is a read/write property of type BrowserLaunchMode.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: XAML Type Provider Methods\nDESCRIPTION: Method definitions for handling XAML type information and namespace definitions in MAUI Core\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(string fullName) -> Microsoft.UI.Xaml.Markup.IXamlType\nMicrosoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type type) -> Microsoft.UI.Xaml.Markup.IXamlType\nMicrosoft.Maui.Core_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions() -> Microsoft.UI.Xaml.Markup.XmlnsDefinition[]\n```\n\n----------------------------------------\n\nTITLE: Contact Class Constructor Implementation in C#\nDESCRIPTION: Constructor definition for the Contact class handling contact information with various name components and communication details.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nContact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, IEnumerable<ContactPhone> phones, IEnumerable<ContactEmail> email, string displayName = null)\n```\n\n----------------------------------------\n\nTITLE: EmailAttachment Constructor (FileBase) in MAUI\nDESCRIPTION: This constructor initializes a new instance of the EmailAttachment class using a FileBase object. The file is used as the attachment for an email message.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailAttachment.EmailAttachment(Microsoft.Maui.Storage.FileBase! file) -> void\"\n```\n\n----------------------------------------\n\nTITLE: XAML Loading Extensions\nDESCRIPTION: Extension methods for loading XAML content into views, supporting both string-based XAML and type-based XAML loading.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, string xaml) -> TXaml\n~static Microsoft.Maui.Controls.Xaml.Extensions.LoadFromXaml<TXaml>(this TXaml view, System.Type callingType) -> TXaml\n```\n\n----------------------------------------\n\nTITLE: Label Handler Method Declarations - .NET MAUI C#\nDESCRIPTION: Static method declarations for handling label properties in MAUI applications. Includes mappings for text properties, styling, alignment, and formatting.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\nstatic Microsoft.Maui.Handlers.LabelHandler.MapText(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapTextColor(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\nstatic Microsoft.Maui.Handlers.LabelHandler.MapFont(Microsoft.Maui.Handlers.ILabelHandler! handler, Microsoft.Maui.ILabel! label) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Main Page Override in MAUI\nDESCRIPTION: Code snippet showing how to override the main page of a MAUI app for testing purposes by creating a MauiProgram.user.cs file. This allows developers to focus on testing specific issue pages.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/UITesting.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Controls.TestCases.HostApp.Issues;\n\nnamespace Maui.Controls.Sample;\n\npublic partial class MauiProgram\n{\n\tstatic partial void OverrideMainPage(ref Page mainPage)\n\t{\n\t\tmainPage = new Issue99999(); // My issue number here\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for .NET MAUI\nDESCRIPTION: This directive enables C# nullable reference type checking feature. When enabled, reference types are non-nullable by default and must be explicitly marked with '?' to indicate nullable intent. This improves code quality by catching potential null reference exceptions at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Theme Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for resolving Android theme attributes to their actual values. These methods support retrieving boolean and float values from theme definitions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_176\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ThemeExtensions.TryResolveAttribute(this Android.Content.Res.Resources.Theme? theme, int id, out bool? value) -> bool\nstatic Microsoft.Maui.Platform.ThemeExtensions.TryResolveAttribute(this Android.Content.Res.Resources.Theme? theme, int id, out float? value) -> bool\nstatic Microsoft.Maui.Platform.ThemeExtensions.TryResolveAttribute(this Android.Content.Res.Resources.Theme? theme, int id) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceDisplay Interface in C#\nDESCRIPTION: Defines the IDeviceDisplay interface with properties and events for device display information in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.get -> bool\nMicrosoft.Maui.Devices.IDeviceDisplay.KeepScreenOn.set -> void\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfo.get -> Microsoft.Maui.Devices.DisplayInfo\nMicrosoft.Maui.Devices.IDeviceDisplay.MainDisplayInfoChanged -> System.EventHandler<Microsoft.Maui.Devices.DisplayInfoChangedEventArgs!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Pin Properties in C# for MAUI\nDESCRIPTION: Declares static readonly BindableProperty fields for the Pin class, including Address, Label, Location, and Type properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: EmailMessage Attachments setter in MAUI\nDESCRIPTION: This property setter sets the list of attachments for an email message. It is a read/write property and accepts a List of EmailAttachment objects or null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Attachments.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Working with Placemarks in C#\nDESCRIPTION: Defines the Placemark class constructor within the Microsoft Maui framework along with hints at utilities for extending placemark functionalities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.Placemark.Placemark() -> void\n\n```\n\n----------------------------------------\n\nTITLE: Tizen Window Extensions in .NET MAUI\nDESCRIPTION: Extensions for Tizen.NUI.Window that provide platform-specific functionality for managing window content, handling back button presses, and initializing window properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.WindowExtensions.GetDisplayDensity(this Tizen.NUI.Window! platformWindow) -> float\nstatic Microsoft.Maui.WindowExtensions.GetModalStack(this Tizen.NUI.Window! platformWindow) -> Tizen.UIExtensions.NUI.NavigationStack?\nstatic Microsoft.Maui.WindowExtensions.Initialize(this Tizen.NUI.Window! platformWindow) -> void\nstatic Microsoft.Maui.WindowExtensions.SetBackButtonPressedHandler(this Tizen.NUI.Window! platformWindow, System.Func<bool>! handler) -> void\nstatic Microsoft.Maui.WindowExtensions.SetContent(this Tizen.NUI.Window! platformWindow, Tizen.NUI.BaseComponents.View! content) -> void\nstatic Microsoft.Maui.WindowExtensions.SetWindowCloseRequestHandler(this Tizen.NUI.Window! platformWindow, System.Action! handler) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding ProgressBarHandler Method for Tizen Platform\nDESCRIPTION: This method overrides the ProgressBarHandler to create a Tizen-specific ProgressBar implementation for MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ProgressBarHandler.CreatePlatformView() -> Tizen.UIExtensions.NUI.GraphicsView.ProgressBar!\n```\n\n----------------------------------------\n\nTITLE: Defining IContacts Interface in C#\nDESCRIPTION: Defines the IContacts interface with methods for retrieving and picking contacts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Communication.IContacts\nMicrosoft.Maui.ApplicationModel.Communication.IContacts.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.Contact!>!>!\nMicrosoft.Maui.ApplicationModel.Communication.IContacts.PickContactAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.Communication.Contact?>!\n```\n\n----------------------------------------\n\nTITLE: Merging API Files with PowerShell Script\nDESCRIPTION: PowerShell command to merge unshipped API changes into the shipped API file.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/APIChangeTracking.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\eng\\scripts\\mark-shipped.ps1\n```\n\n----------------------------------------\n\nTITLE: StyleableElement.Style Getter Method in C#\nDESCRIPTION: Defines the Style property getter for StyleableElement class. Returns the Style object that defines the visual appearance of the element.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.Style.get -> Microsoft.Maui.Controls.Style?\n```\n\n----------------------------------------\n\nTITLE: Comparing Attributed Text Runs\nDESCRIPTION: Compares two IAttributedTextRun objects and returns an integer indicating their order. Dependencies include IAttributedTextRun. Parameters include 'first' and 'second'. It outputs an integer based on comparison.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Compare(Microsoft.Maui.Graphics.Text.IAttributedTextRun first, Microsoft.Maui.Graphics.Text.IAttributedTextRun second) -> int\n```\n\n----------------------------------------\n\nTITLE: Implementing Special Purpose UI Handlers for iOS\nDESCRIPTION: Method signatures for specialized UI controls like TabbedView, TimePicker, WebView, and Window handlers. These create platform-specific implementations for complex UI elements like tabs, date pickers, and web views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.TabbedViewHandler.CreatePlatformView() -> UIKit.UIView!\noverride Microsoft.Maui.Handlers.TimePickerHandler.ConnectHandler(Microsoft.Maui.Platform.MauiTimePicker! platformView) -> void\noverride Microsoft.Maui.Handlers.TimePickerHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiTimePicker!\noverride Microsoft.Maui.Handlers.TimePickerHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiTimePicker! platformView) -> void\noverride Microsoft.Maui.Handlers.ToolbarHandler.CreatePlatformElement() -> UIKit.UINavigationBar!\noverride Microsoft.Maui.Handlers.WebViewHandler.CreatePlatformView() -> WebKit.WKWebView!\noverride Microsoft.Maui.Handlers.WebViewHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.WindowHandler.ConnectHandler(UIKit.UIWindow! platformView) -> void\noverride Microsoft.Maui.Handlers.WindowHandler.CreatePlatformElement() -> UIKit.UIWindow!\n```\n\n----------------------------------------\n\nTITLE: Browser Launch Configuration\nDESCRIPTION: Class definition for configuring browser launch options including launch mode, flags, and appearance customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.BrowserLaunchOptions() -> void\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.LaunchMode.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchMode\nMicrosoft.Maui.ApplicationModel.BrowserLaunchOptions.Flags.get -> Microsoft.Maui.ApplicationModel.BrowserLaunchFlags\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Page in .NET MAUI\nDESCRIPTION: This method creates a new PDF page and writes it to a stream. It accepts an optional page number.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IPdfRenderService.CreatePage(System.IO.Stream stream, int pageNumber = -1) -> Microsoft.Maui.Graphics.IPdfPage\n```\n\n----------------------------------------\n\nTITLE: Canvas Extensions for Stroke and Fill Management in .NET MAUI Graphics\nDESCRIPTION: Extension methods for the ICanvas interface to manage strokes and fills. Includes methods to reset stroke settings and apply various fill paints and patterns with different parameter options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.ResetStroke(this Microsoft.Maui.Graphics.ICanvas canvas) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Point point1, Microsoft.Maui.Graphics.Point point2) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.Rect rectangle) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPaint(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern, Microsoft.Maui.Graphics.Color foregroundColor) -> void\nstatic Microsoft.Maui.Graphics.CanvasExtensions.SetFillPattern(this Microsoft.Maui.Graphics.ICanvas target, Microsoft.Maui.Graphics.IPattern pattern) -> void\n```\n\n----------------------------------------\n\nTITLE: Rotating Matrix Extension for W2D\nDESCRIPTION: This static method extends the Matrix3x2 structure to support rotation transformations, returning a modified matrix. It takes a float parameter for radians.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Win2D.W2DExtensions.Rotate(this System.Numerics.Matrix3x2 target, float radians) -> System.Numerics.Matrix3x2\n```\n\n----------------------------------------\n\nTITLE: Defining Static Properties for MAUI Maps Controls in C#\nDESCRIPTION: Declares static readonly BindableProperty fields for various MAUI Maps controls. These properties define attributes such as item template selector, map type, stroke color and width for map elements, address, label, location, and type for pins, and fill color for polygons.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.AddressProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LabelProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.LocationProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Pin.TypeProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Polygon.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Defining FlexWrap Enum in C# for MAUI Layouts\nDESCRIPTION: Defines the FlexWrap enum within the Microsoft.Maui.Layouts namespace, specifying the Wrap value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexWrap.Wrap = 1 -> Microsoft.Maui.Layouts.FlexWrap\n```\n\n----------------------------------------\n\nTITLE: Setting Font in SkiaCanvasState in MAUI\nDESCRIPTION: This property allows for setting the SKFont in SkiaCanvasState, enabling developers to modify the font used for rendering graphics dynamically.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring ShapeView Mapper and Handler in C# for MAUI\nDESCRIPTION: Static properties and methods for configuring the command mapper, property mapper, and mapping various properties of a ShapeView control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapAspect(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapBackground(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapFill(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IShapeView!, Microsoft.Maui.Handlers.IShapeViewHandler!>!\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapShape(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStroke(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashOffset(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeDashPattern(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineCap(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: PaintPattern Methods and Properties\nDESCRIPTION: Signatures for drawing methods and properties in the PaintPattern class for pattern-based fills.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PaintPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\nMicrosoft.Maui.Graphics.PaintPattern.Paint.get -> Microsoft.Maui.Graphics.Paint\nMicrosoft.Maui.Graphics.PaintPattern.Paint.set -> void\nMicrosoft.Maui.Graphics.PaintPattern.PaintPattern(Microsoft.Maui.Graphics.IPattern pattern) -> void\nMicrosoft.Maui.Graphics.PaintPattern.Wrapped.get -> Microsoft.Maui.Graphics.IPattern\n```\n\n----------------------------------------\n\nTITLE: Parsing RectF from String in MAUI\nDESCRIPTION: This method attempts to parse a string representation of a rectangle (floating-point) into a Microsoft MAUI RectF object. It returns a boolean indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.RectF.TryParse(string value, out Microsoft.Maui.Graphics.RectF rectangleF) -> bool\n```\n\n----------------------------------------\n\nTITLE: Analyzing AOT NOT FOUND messages (bash)\nDESCRIPTION: This script uses `adb logcat` to filter and display log messages related to AOT compilation, specifically looking for `AOT NOT FOUND` messages.  This helps identify methods that are not being AOT compiled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n02-23 09:03:46.327 10401 10401 D Mono    : AOT NOT FOUND: (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr).\n02-23 09:03:46.334 10401 10401 D Mono    : AOT NOT FOUND: (wrapper managed-to-native) System.Diagnostics.Debugger:IsAttached_internal ().\n02-23 09:03:46.367 10401 10401 D Mono    : AOT NOT FOUND: (wrapper native-to-managed) Android.Runtime.JNINativeWrapper:Wrap_JniMarshal_PPL_V (intptr,intptr,intptr).\n```\n\n----------------------------------------\n\nTITLE: Vibration Control in MAUI (C#)\nDESCRIPTION: Static methods for controlling device vibration. Includes methods to start vibration with or without duration, and to cancel ongoing vibration.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Vibration.Cancel() -> void\nstatic Microsoft.Maui.Devices.Vibration.Default.get -> Microsoft.Maui.Devices.IVibration!\nstatic Microsoft.Maui.Devices.Vibration.Vibrate() -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(double duration) -> void\nstatic Microsoft.Maui.Devices.Vibration.Vibrate(System.TimeSpan duration) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing MAUI Editor and Entry Handlers for iOS\nDESCRIPTION: These method signatures show how Editor and Entry handlers are implemented for iOS. They handle creating MauiTextField controls, connecting/disconnecting handlers, and managing virtual view relationships.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.EditorHandler.GetDesiredSize(double widthConstraint, double heightConstraint) -> Microsoft.Maui.Graphics.Size\noverride Microsoft.Maui.Handlers.EditorHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.ConnectHandler(Microsoft.Maui.Platform.MauiTextField! platformView) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiTextField!\noverride Microsoft.Maui.Handlers.EntryHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiTextField! platformView) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining NavigationRequest Class\nDESCRIPTION: Class for handling navigation requests with animation support in MAUI navigation system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.NavigationRequest\nMicrosoft.Maui.NavigationRequest.Animated.get -> bool\nMicrosoft.Maui.NavigationRequest.NavigationRequest(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newNavigationStack, bool animated) -> void\nMicrosoft.Maui.NavigationRequest.NavigationStack.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>!\n```\n\n----------------------------------------\n\nTITLE: Resource Dictionary Loading Helper Method\nDESCRIPTION: Static helper method for loading resources from a source URI into a ResourceDictionary instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining TextType enum in C#\nDESCRIPTION: Declares an enumeration for text types, including Html and Text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.TextType\nMicrosoft.Maui.TextType.Html = 1 -> Microsoft.Maui.TextType\nMicrosoft.Maui.TextType.Text = 0 -> Microsoft.Maui.TextType\n```\n\n----------------------------------------\n\nTITLE: Drawing with PicturePattern in C#\nDESCRIPTION: This snippet provides the Draw method for the PicturePattern class, allowing it to paint a pattern onto a canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.PicturePattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: Segment Path Conversion in Skia\nDESCRIPTION: Static extension method handles converting segments of PathF to a SkiaSharp.SKPath, enhancing path manipulations by allowing partial or zoomed conversions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSkiaPathFromSegment(this Microsoft.Maui.Graphics.PathF target, int segmentIndex, float ppu, float zoom) -> SkiaSharp.SKPath\n```\n\n----------------------------------------\n\nTITLE: MAUI Platform Extensions for Element Handling\nDESCRIPTION: Extension methods for converting MAUI elements to platform-specific handlers and managing application/window handlers. Includes methods for handler creation and platform conversion.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.SetApplicationHandler(this object! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.ElementExtensions.SetWindowHandler(this object! platformWindow, Microsoft.Maui.IWindow! window, Microsoft.Maui.IMauiContext! context) -> void\nstatic Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!\nstatic Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> object!\n```\n\n----------------------------------------\n\nTITLE: Defining UriImageSourceService class in C#\nDESCRIPTION: Declares a class for handling URI-based image sources, including a method for getting images asynchronously and constructors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.UriImageSourceService\nMicrosoft.Maui.UriImageSourceService.GetImageAsync(Microsoft.Maui.IUriImageSource! imageSource, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.Maui.IImageSourceServiceResult<Microsoft.Maui.Platform.MauiImageSource!>?>!\nMicrosoft.Maui.UriImageSourceService.UriImageSourceService() -> void\nMicrosoft.Maui.UriImageSourceService.UriImageSourceService(Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.UriImageSourceService!>? logger = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Methods for Microsoft.Maui.Graphics.RectF in C#\nDESCRIPTION: This snippet defines static methods for the RectF struct, including creation from coordinates, implicit conversion to Rect, intersection, equality operators, union, and a Zero property. These methods facilitate operations on RectF objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.RectF.FromLTRB(float left, float top, float right, float bottom) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Microsoft.Maui.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Type Converters Implementation\nDESCRIPTION: Collection of type converters for converting between string representations and MAUI specific types like CornerRadius, Thickness, and Flex properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Converters.CornerRadiusTypeConverter\nMicrosoft.Maui.Converters.ThicknessTypeConverter\nMicrosoft.Maui.Converters.FlexBasisTypeConverter\nMicrosoft.Maui.Converters.FlexDirectionTypeConverter\nMicrosoft.Maui.Converters.FlexJustifyTypeConverter\n```\n\n----------------------------------------\n\nTITLE: Text Rendering Component in Microsoft.Maui.Graphics C#\nDESCRIPTION: Static instance property for the AttributedTextRunComparer in the Microsoft.Maui.Graphics.Text namespace. This component is used for comparing and sorting attributed text runs when rendering rich text in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\n~static readonly Microsoft.Maui.Graphics.Text.AttributedTextRunComparer.Instance -> Microsoft.Maui.Graphics.Text.AttributedTextRunComparer\n```\n\n----------------------------------------\n\nTITLE: Defining IPicture Interface in C#\nDESCRIPTION: Defines the IPicture interface with properties for Height, Width, X, and Y in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPicture\nMicrosoft.Maui.Graphics.IPicture.Height.get -> float\nMicrosoft.Maui.Graphics.IPicture.Width.get -> float\nMicrosoft.Maui.Graphics.IPicture.X.get -> float\nMicrosoft.Maui.Graphics.IPicture.Y.get -> float\n```\n\n----------------------------------------\n\nTITLE: Easing Functions and Operators in MAUI\nDESCRIPTION: Methods for accessing default easing functions and implementing implicit conversion from Func<double, double> to Easing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_91\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Easing.Default.get -> Microsoft.Maui.Easing!\nstatic Microsoft.Maui.Easing.implicit operator Microsoft.Maui.Easing!(System.Func<double, double>! func) -> Microsoft.Maui.Easing!\n```\n\n----------------------------------------\n\nTITLE: Overriding Swipe-Related Handler Methods in MAUI for iOS\nDESCRIPTION: Override methods for SwipeItemButton, SwipeItemMenuItemHandler, SwipeItemViewHandler, and SwipeViewHandler classes that manage platform view creation, handler connection/disconnection, and virtual view handling for swipe gestures and related UI in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_95\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SwipeItemButton.Frame.get -> CoreGraphics.CGRect\noverride Microsoft.Maui.Handlers.SwipeItemButton.Frame.set -> void\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.ConnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CreatePlatformElement() -> UIKit.UIButton!\noverride Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.ContentView!\noverride Microsoft.Maui.Handlers.SwipeItemViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.SwipeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiSwipeView!\noverride Microsoft.Maui.Handlers.SwipeViewHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining RadioButtonHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the RadioButtonHandler class, including a command mapper, a property mapper, and methods for mapping various properties such as character spacing, content, corner radius, font, and colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapContent(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapCornerRadius(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapFont(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapIsChecked(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRadioButton!, Microsoft.Maui.Handlers.IRadioButtonHandler!>!\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.IRadioButton! radioButton) -> void\nstatic Microsoft.Maui.Handlers.RadioButtonHandler.MapTextColor(Microsoft.Maui.Handlers.IRadioButtonHandler! handler, Microsoft.Maui.ITextStyle! textStyle) -> void\n```\n\n----------------------------------------\n\nTITLE: Static Font and FontSource Methods in .NET MAUI\nDESCRIPTION: Static methods and properties for Font and FontSource classes, including default font properties and equality operator implementations. These facilitate font management and comparison.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Font.Default.get -> Microsoft.Maui.Graphics.Font\nstatic Microsoft.Maui.Graphics.Font.DefaultBold.get -> Microsoft.Maui.Graphics.Font\nstatic Microsoft.Maui.Graphics.Font.operator !=(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool\nstatic Microsoft.Maui.Graphics.Font.operator ==(Microsoft.Maui.Graphics.Font left, Microsoft.Maui.Graphics.Font right) -> bool\nstatic Microsoft.Maui.Graphics.FontSource.operator !=(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool\nstatic Microsoft.Maui.Graphics.FontSource.operator ==(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Multiplying Alpha in Color Conversion\nDESCRIPTION: Static method that produces an SKColor by applying an alpha value during conversion process, crucial for achieving consistent transparency levels across composite graphic layers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsSKColorMultiplyAlpha(this Microsoft.Maui.Graphics.Color target, float alpha) -> SkiaSharp.SKColor\n```\n\n----------------------------------------\n\nTITLE: MauiWinUIApplication Services Access\nDESCRIPTION: Deprecated Services property access. Use IPlatformApplication.Current.Services for consistent service access across the platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/BannedSymbols.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.MauiWinUIApplication.Services\n```\n\n----------------------------------------\n\nTITLE: IMauiHandlersFactory Interface Definition\nDESCRIPTION: Defines the IMauiHandlersFactory interface which extends IMauiFactory and provides methods for handler resolution and collection access.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/HandlerResolution.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMauiHandlersFactory : IMauiFactory\n{\n    Type? GetHandlerType(Type iview);\n    IElementHandler? GetHandler(Type type);\n    IElementHandler? GetHandler<T>() where T : IElement;\n    IMauiHandlersCollection GetCollection();\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Lifecycle Events in C# for Microsoft.Maui.LifecycleEvents\nDESCRIPTION: This snippet defines extension methods for managing lifecycle events in Microsoft.Maui applications. It includes methods for adding events, invoking events, and configuring lifecycle events for the MauiAppBuilder.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, TDelegate! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName) -> void\nstatic Microsoft.Maui.LifecycleEvents.LifecycleEventServiceExtensions.InvokeEvents<TDelegate>(this Microsoft.Maui.LifecycleEvents.ILifecycleEventService! lifecycleService, string! eventName, System.Action<TDelegate!>! action) -> void\nstatic Microsoft.Maui.LifecycleEvents.MauiAppHostBuilderExtensions.ConfigureLifecycleEvents(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Parsing Point from String in MAUI\nDESCRIPTION: This method attempts to parse a string representation of a point into a Microsoft MAUI Point object. It returns a boolean indicating success.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Point.TryParse(string value, out Microsoft.Maui.Graphics.Point point) -> bool\n```\n\n----------------------------------------\n\nTITLE: RectF Methods and Operators in Microsoft.Maui.Graphics\nDESCRIPTION: Static methods and operator overloads for the RectF struct in Microsoft.Maui.Graphics. Includes floating-point rectangle creation, conversion, comparison, and geometric operations like intersection and union.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_169\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.RectF.FromLTRB(float left, float top, float right, float bottom) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.implicit operator CoreGraphics.CGRect(Microsoft.Maui.Graphics.RectF rect) -> CoreGraphics.CGRect\nstatic Microsoft.Maui.Graphics.RectF.implicit operator Microsoft.Maui.Graphics.Rect(Microsoft.Maui.Graphics.RectF rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Graphics.RectF.Intersect(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.operator !=(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.operator ==(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> bool\nstatic Microsoft.Maui.Graphics.RectF.Union(Microsoft.Maui.Graphics.RectF r1, Microsoft.Maui.Graphics.RectF r2) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.RectF.Zero -> Microsoft.Maui.Graphics.RectF\n```\n\n----------------------------------------\n\nTITLE: Overriding Object Methods in MAUI Core Classes\nDESCRIPTION: These methods override basic Object methods like Equals, GetHashCode, and ToString for various MAUI core classes including RectangleGridAdorner, Semantics, SizeRequest, and Thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.RectangleGridAdorner.Draw(Microsoft.Maui.Graphics.ICanvas! canvas, Microsoft.Maui.Graphics.RectF dirtyRect) -> void\noverride Microsoft.Maui.Semantics.ToString() -> string!\noverride Microsoft.Maui.SizeRequest.Equals(object? obj) -> bool\noverride Microsoft.Maui.SizeRequest.GetHashCode() -> int\noverride Microsoft.Maui.SizeRequest.ToString() -> string!\noverride Microsoft.Maui.Thickness.Equals(object? obj) -> bool\noverride Microsoft.Maui.Thickness.GetHashCode() -> int\n```\n\n----------------------------------------\n\nTITLE: Color Property Accessors in C#\nDESCRIPTION: Read-only property accessors for Color class that provide access to the RGBA components of a color value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.Graphics.Color.Alpha -> float\nreadonly Microsoft.Maui.Graphics.Color.Blue -> float\nreadonly Microsoft.Maui.Graphics.Color.Green -> float\nreadonly Microsoft.Maui.Graphics.Color.Red -> float\n```\n\n----------------------------------------\n\nTITLE: Static Method for Setting Bindings in .NET MAUI\nDESCRIPTION: This static method allows setting bindings for a BindableObject, utilizing various parameters to configure the binding, including converter options and fallback values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding<TSource, TProperty>(this Microsoft.Maui.Controls.BindableObject! self, Microsoft.Maui.Controls.BindableProperty! targetProperty, System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Loading HTML in Web View Delegate\nDESCRIPTION: Loads HTML content into the web view delegate from a specified base URL. Supports optional parameters for flexibility in content rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWebViewDelegate.LoadHtml(string? html, string? baseUrl) -> void\n```\n\n----------------------------------------\n\nTITLE: Font Management in MAUI\nDESCRIPTION: Static methods and operators for font creation and comparison in the MAUI framework.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\nstatic Microsoft.Maui.Font.SystemFontOfSize(double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: Dispatcher Class API Definition in C#\nDESCRIPTION: Public API surface for the Microsoft.Maui.Dispatching.Dispatcher class, providing thread dispatching functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Dispatching.Dispatcher.CreateTimer() -> Microsoft.Maui.Dispatching.IDispatcherTimer!\nMicrosoft.Maui.Dispatching.Dispatcher.Dispatch(System.Action! action) -> bool\nMicrosoft.Maui.Dispatching.Dispatcher.DispatchDelayed(System.TimeSpan delay, System.Action! action) -> bool\nMicrosoft.Maui.Dispatching.Dispatcher.IsDispatchRequired.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Generating Pattern Bitmap in Skia\nDESCRIPTION: This static method creates an SKBitmap from a PatternPaint, enabling the generation of textured fills or effects within Skia rendering workflows with a specified scaling factor.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scale = 1) -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: PDF and Picture Handling Extensions in .NET MAUI Graphics\nDESCRIPTION: Extension methods for working with PDF pages and picture objects. Includes methods to convert PDF pages to different formats, get picture bounds, and read/write pictures from streams both synchronously and asynchronously.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBase64(this Microsoft.Maui.Graphics.IPdfPage target) -> string\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBytes(this Microsoft.Maui.Graphics.IPdfPage target) -> byte[]\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsBytesAsync(this Microsoft.Maui.Graphics.IPdfPage target) -> System.Threading.Tasks.Task<byte[]>\nstatic Microsoft.Maui.Graphics.PdfPageExtensions.AsStream(this Microsoft.Maui.Graphics.IPdfPage target) -> System.IO.Stream\nstatic Microsoft.Maui.Graphics.PictureExtensions.GetBounds(this Microsoft.Maui.Graphics.IPicture target) -> Microsoft.Maui.Graphics.RectF\nstatic Microsoft.Maui.Graphics.PictureReaderExtensions.Read(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> Microsoft.Maui.Graphics.IPicture\nstatic Microsoft.Maui.Graphics.PictureReaderExtensions.ReadAsync(this Microsoft.Maui.Graphics.IPictureReader target, System.IO.Stream stream, string hash = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Graphics.IPicture>\nstatic Microsoft.Maui.Graphics.PictureWriterExtensions.SaveAsBase64(this Microsoft.Maui.Graphics.IPictureWriter target, Microsoft.Maui.Graphics.IPicture picture) -> string\n```\n\n----------------------------------------\n\nTITLE: Updating Tizen Editor Properties in MAUI\nDESCRIPTION: These extension methods update various properties of a Tizen Editor control to match the corresponding MAUI ITextInput properties. They handle text formatting, input behavior, and visual styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.EditorExtensions.UpdateCharacterSpacing(this Tizen.UIExtensions.NUI.Editor! platformEditor, Microsoft.Maui.ITextInput! editor) -> void\nstatic Microsoft.Maui.Platform.EditorExtensions.UpdateCursorPosition(this Tizen.UIExtensions.NUI.Editor! platformEditor, Microsoft.Maui.ITextInput! entry) -> void\nstatic Microsoft.Maui.Platform.EditorExtensions.UpdateFont(this Tizen.UIExtensions.NUI.Editor! platformEditor, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.EditorExtensions.UpdateHorizontalTextAlignment(this Tizen.UIExtensions.NUI.Editor! platformEditor, Microsoft.Maui.ITextAlignment! editor) -> void\n```\n\n----------------------------------------\n\nTITLE: RefreshViewHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the RefreshViewHandler class in Microsoft.Maui that handle refresh view properties like background, content, refresh state and color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapBackground(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! view) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapContent(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapIsRefreshing(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IRefreshView!, Microsoft.Maui.Handlers.IRefreshViewHandler!>!\nstatic Microsoft.Maui.Handlers.RefreshViewHandler.MapRefreshColor(Microsoft.Maui.Handlers.IRefreshViewHandler! handler, Microsoft.Maui.IRefreshView! refreshView) -> void\n```\n\n----------------------------------------\n\nTITLE: Constructing ContentViewHandler in MAUI\nDESCRIPTION: Defines constructors for the `ContentViewHandler` class in MAUI, allowing instantiation with or without a property mapper and command mapper. This handler manages the platform-specific implementation of a MAUI ContentView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler() -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\"\n\n```\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.Handlers.ContentViewHandler.ContentViewHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\"\n```\n\n----------------------------------------\n\nTITLE: ScrollOrientation Enum Definition in C#\nDESCRIPTION: ScrollOrientation defines the allowed directions for scrolling in scrollable containers. It includes Vertical, Horizontal, Both, and Neither options to control scroll behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Both = 2 -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Horizontal = 1 -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Neither = 3 -> Microsoft.Maui.ScrollOrientation\nMicrosoft.Maui.ScrollOrientation.Vertical = 0 -> Microsoft.Maui.ScrollOrientation\n```\n\n----------------------------------------\n\nTITLE: Mapping TabbedView Properties in C#\nDESCRIPTION: Static properties for mapping TabbedView control, defining CommandMapper and Mapper for the TabbedViewHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Resetting SkiaCanvasState with Font and Paint Parameters in C#\nDESCRIPTION: This method resets the SkiaCanvasState with new font and paint parameters, including font paint, fill paint, and stroke paint. It ensures that the canvas operations are based on the updated drawing attributes. It takes various SkiaSharp painting and font objects as input, and no value is returned.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform Renderer API Reference (C#)\nDESCRIPTION: Interfaces and classes for platform-specific rendering implementation including IGraphicsRenderer interface and DirectRenderer class. These components enable platform-specific graphics operations in .NET MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_159\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Platform.DirectRenderer\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Detached() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.DirectRenderer() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Dispose() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Invalidate() -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.Invalidate(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Platform.DirectRenderer.SizeChanged(float width, float height) -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.Detached() -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.Invalidate() -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.Invalidate(float x, float y, float w, float h) -> void\nMicrosoft.Maui.Graphics.Platform.IGraphicsRenderer.SizeChanged(float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Paint Utility Methods in MAUI Graphics\nDESCRIPTION: Utility methods for working with Paint objects in MAUI Graphics. These include checking for null or empty paints, converting to CALayers, and extracting colors.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.IsNullOrEmpty(this Microsoft.Maui.Graphics.Paint? paint) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToCALayer(this Microsoft.Maui.Graphics.Paint! paint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.ToColor(this Microsoft.Maui.Graphics.Paint? paint) -> Microsoft.Maui.Graphics.Color?\n```\n\n----------------------------------------\n\nTITLE: Converting Float Array to CGColor in MAUI\nDESCRIPTION: This method converts a float array representing colors into a CGColor object. It takes a float array as input and returns a CGColor instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.CGColorExtensions.ToCGColor(this float[] color) -> CoreGraphics.CGColor\n```\n\n----------------------------------------\n\nTITLE: Utilizing WebViewProcessTerminatedEventArgs in C#\nDESCRIPTION: Defines a constructor for the WebViewProcessTerminatedEventArgs class, used for initializing instances involved in process termination management within a WebView, assisting in handling termination scenarios effectively.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.WebViewProcessTerminatedEventArgs\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.WebViewProcessTerminatedEventArgs.WebViewProcessTerminatedEventArgs() -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding SliderHandler Methods for Tizen Platform\nDESCRIPTION: These methods override SliderHandler functionality to create, connect, and disconnect Tizen.NUI.Components.Slider elements for the Tizen implementation of MAUI sliders.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.SliderHandler.ConnectHandler(Tizen.NUI.Components.Slider! platformView) -> void\noverride Microsoft.Maui.Handlers.SliderHandler.CreatePlatformView() -> Tizen.NUI.Components.Slider!\noverride Microsoft.Maui.Handlers.SliderHandler.DisconnectHandler(Tizen.NUI.Components.Slider! platformView) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Lifecycle Event Extensions\nDESCRIPTION: Extensions for managing application lifecycle events in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.LifecycleEvents.LifecycleBuilderExtensions.AddEvent(this Microsoft.Maui.LifecycleEvents.ILifecycleBuilder! builder, string! eventName, System.Action! action) -> Microsoft.Maui.LifecycleEvents.ILifecycleBuilder!\n```\n\n----------------------------------------\n\nTITLE: Updating Tizen Entry Properties in MAUI\nDESCRIPTION: These extension methods update various properties of a Tizen Entry control to match the corresponding MAUI IEntry and ITextInput properties. They handle text input behavior, styling, and keyboard interactions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.EntryExtensions.UpdateCharacterSpacing(this Tizen.UIExtensions.NUI.Entry! platformEntry, Microsoft.Maui.ITextStyle! entry) -> void\nstatic Microsoft.Maui.Platform.EntryExtensions.UpdateCursorPosition(this Tizen.UIExtensions.NUI.Entry! platformEntry, Microsoft.Maui.IEntry! entry) -> void\nstatic Microsoft.Maui.Platform.EntryExtensions.UpdateFont(this Tizen.UIExtensions.NUI.Entry! platformEntry, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining AbsoluteLayoutFlags Enum in C#\nDESCRIPTION: This snippet defines the AbsoluteLayoutFlags enum for specifying layout options in AbsoluteLayout for MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.All = -1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional = 8 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.None = 0 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.PositionProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.SizeProportional = Microsoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional | Microsoft.Maui.Layouts.AbsoluteLayoutFlags.HeightProportional -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.WidthProportional = 4 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.XProportional = 1 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\nMicrosoft.Maui.Layouts.AbsoluteLayoutFlags.YProportional = 2 -> Microsoft.Maui.Layouts.AbsoluteLayoutFlags\n```\n\n----------------------------------------\n\nTITLE: Writing Attributed Text to XML\nDESCRIPTION: Writes attributed text to a TextWriter through XmlAttributedTextWriter. It requires 'attributedText' and 'writer' as parameters, outputs nothing, and depends on IAttributedText and System.IO.TextWriter.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_78\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter.Write(Microsoft.Maui.Graphics.Text.IAttributedText attributedText, System.IO.TextWriter writer) -> void\n```\n\n----------------------------------------\n\nTITLE: PictureCommand State Management and Effects Constants in C#\nDESCRIPTION: Constants in PictureCommand for state management and visual effects. These commands handle state saving/restoring, clipping, shadowing, alpha/transparency, and blend mode effects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.Shadow = 70 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.Alpha = 71 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.BlendMode = 72 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractFromClip = 80 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ClipPath = 81 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ClipRectangle = 82 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SubtractPathFromClip = 83 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SaveState = 100 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.RestoreState = 101 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.ResetState = 102 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Window Width\nDESCRIPTION: Retrieves the maximum width of the window, limiting the size of the window's UI elements accordingly.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.MaximumWidth.get -> double\n```\n\n----------------------------------------\n\nTITLE: TitleBar Implementation\nDESCRIPTION: Methods and properties for the TitleBar class that implements window title bar functionality in MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.TitleBar.Content.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Controls.TitleBar.Content.set -> void\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.get -> Microsoft.Maui.Graphics.Color!\nMicrosoft.Maui.Controls.TitleBar.ForegroundColor.set -> void\nMicrosoft.Maui.Controls.TitleBar.Icon.get -> Microsoft.Maui.Controls.ImageSource!\nMicrosoft.Maui.Controls.TitleBar.Icon.set -> void\nMicrosoft.Maui.Controls.TitleBar.LeadingContent.get -> Microsoft.Maui.IView?\nMicrosoft.Maui.Controls.TitleBar.LeadingContent.set -> void\n```\n\n----------------------------------------\n\nTITLE: Map Operations API Methods in MAUI\nDESCRIPTION: Static methods for opening maps and handling map operations in MAUI applications. Includes methods for opening locations by coordinates, placemarks and handling map launch options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.OpenAsync(Microsoft.Maui.Devices.Sensors.Location! location) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.ApplicationModel.Map.TryOpenAsync(double latitude, double longitude) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Implementing Image and Button Handlers for iOS\nDESCRIPTION: Method signatures for ImageButton and Image handlers that create and manage UIButton and UIImageView platform implementations. These handlers include methods to determine container requirements and connect/disconnect handlers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ImageButtonHandler.ConnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageButtonHandler.CreatePlatformView() -> UIKit.UIButton!\noverride Microsoft.Maui.Handlers.ImageButtonHandler.DisconnectHandler(UIKit.UIButton! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageButtonHandler.NeedsContainer.get -> bool\noverride Microsoft.Maui.Handlers.ImageHandler.CreatePlatformView() -> UIKit.UIImageView!\noverride Microsoft.Maui.Handlers.ImageHandler.DisconnectHandler(UIKit.UIImageView! platformView) -> void\noverride Microsoft.Maui.Handlers.ImageHandler.NeedsContainer.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining OrientationSensor API in C#\nDESCRIPTION: Declares static properties, methods, and events for the OrientationSensor class in the Microsoft.Maui.Devices.Sensors namespace. Includes methods to start and stop the sensor, check its status, and an event for reading changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Default.get -> Microsoft.Maui.Devices.Sensors.IOrientationSensor!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.OrientationSensor.Stop() -> void\n```\n\n----------------------------------------\n\nTITLE: Android Resource Class Structure in C#\nDESCRIPTION: Shows the auto-generated Resource class structure that provides access to Android resources via integer constants. The class contains nested classes for different resource types (Drawable, Layout, Strings) with constants representing resource IDs that are generated during the build process.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-multiproject/MauiApp.1.Droid/Resources/AboutAndroidResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class Drawable {\n        public const int icon = 0x123;\n    }\n\n    public class Layout {\n        public const int main = 0x456;\n    }\n\n    public class Strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Virtual Methods in .NET MAUI\nDESCRIPTION: Virtual methods for the Animation and AnimationManager classes that handle animation lifecycle, updates, and resource management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Animations.Animation.CreateReverse() -> Microsoft.Maui.Animations.Animation!\nvirtual Microsoft.Maui.Animations.Animation.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Animations.Animation.OnTick(double millisecondsSinceLastUpdate) -> void\nvirtual Microsoft.Maui.Animations.Animation.Reset() -> void\nvirtual Microsoft.Maui.Animations.Animation.Update(double percent) -> void\nvirtual Microsoft.Maui.Animations.AnimationManager.Dispose(bool disposing) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Compass Sensor in MAUI C# Applications\nDESCRIPTION: Static methods to access and monitor the device compass in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Compass.Default.get -> Microsoft.Maui.Devices.Sensors.ICompass!\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Compass.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed, bool applyLowPassFilter) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Compass.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator !=(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator ==(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Switch Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for customizing SwitchCompat controls based on MAUI ISwitch properties. These methods handle switch state, track and thumb appearance styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_173\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SwitchExtensions.GetDefaultSwitchThumbDrawable(this AndroidX.AppCompat.Widget.SwitchCompat! aSwitch) -> Android.Graphics.Drawables.Drawable?\nstatic Microsoft.Maui.Platform.SwitchExtensions.GetDefaultSwitchTrackDrawable(this AndroidX.AppCompat.Widget.SwitchCompat! aSwitch) -> Android.Graphics.Drawables.Drawable?\nstatic Microsoft.Maui.Platform.SwitchExtensions.UpdateIsOn(this AndroidX.AppCompat.Widget.SwitchCompat! aSwitch, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Platform.SwitchExtensions.UpdateThumbColor(this AndroidX.AppCompat.Widget.SwitchCompat! aSwitch, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Platform.SwitchExtensions.UpdateTrackColor(this AndroidX.AppCompat.Widget.SwitchCompat! aSwitch, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining StyleableElement Properties in C#\nDESCRIPTION: Defines getter and setter methods for the StyleClass property of the StyleableElement class in Microsoft.Maui.Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.set -> void\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Handler Mapping Methods in .NET MAUI\nDESCRIPTION: Static API methods for the ProgressBarHandler class that map properties like progress value and color. These methods connect the cross-platform ProgressBar control with platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IProgress!, Microsoft.Maui.Handlers.IProgressBarHandler!>!\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgress(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\nstatic Microsoft.Maui.Handlers.ProgressBarHandler.MapProgressColor(Microsoft.Maui.Handlers.IProgressBarHandler! handler, Microsoft.Maui.IProgress! progress) -> void\n```\n\n----------------------------------------\n\nTITLE: Slider Extensions for Android in .NET MAUI\nDESCRIPTION: Extension methods for updating Android SeekBar properties based on MAUI ISlider values. These methods handle thumb image loading and value synchronization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_168\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateThumbImageSourceAsync(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider, Microsoft.Maui.IImageSourceServiceProvider! provider) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Platform.SliderExtensions.UpdateValue(this Android.Widget.SeekBar! seekBar, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI AutoSuggestBox Attached Property Methods\nDESCRIPTION: Static methods for managing attached properties on the MAUI-specific AutoSuggestBox implementation. These methods handle read-only state and property invalidation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.MauiAutoSuggestBox.GetIsReadOnly(Microsoft.UI.Xaml.DependencyObject! obj) -> bool\nstatic Microsoft.Maui.Platform.MauiAutoSuggestBox.InvalidateAttachedProperties(Microsoft.UI.Xaml.DependencyObject! obj) -> void\nstatic Microsoft.Maui.Platform.MauiAutoSuggestBox.SetIsReadOnly(Microsoft.UI.Xaml.DependencyObject! obj, bool value) -> void\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Processing Extensions\nDESCRIPTION: Extension methods for working with attributed text in MAUI. These methods provide functionality for creating blocks, paragraphs, and optimizing attributed text.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateBlocks(this Microsoft.Maui.Graphics.Text.IAttributedText text) -> System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.AttributedTextBlock>\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphRun(this Microsoft.Maui.Graphics.Text.IAttributedText text, int start, int length, System.Collections.Generic.IList<Microsoft.Maui.Graphics.Text.IAttributedTextRun> runs, int startIndexForSearch = 0) -> int\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.CreateParagraphs(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedText>\nstatic Microsoft.Maui.Graphics.Text.AttributedTextExtensions.Optimize(this Microsoft.Maui.Graphics.Text.IAttributedText attributedText) -> Microsoft.Maui.Graphics.Text.IAttributedText\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API - Clipping and Implementation Methods\nDESCRIPTION: Defines additional methods for AbstractCanvas<TState> including clipping operations and concrete implementations of the abstract platform methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.SubtractFromClip(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawLine(float x1, float y1, float x2, float y2) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawRectangle(float x, float y, float width, float height) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed) -> void\nMicrosoft.Maui.Graphics.AbstractCanvas<TState>.DrawEllipse(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Flashlight Interface in C#\nDESCRIPTION: Defines the IFlashlight interface with methods for controlling the device flashlight in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IFlashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.IFlashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nMicrosoft.Maui.Devices.IFlashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining SwipeDirection Enum in C# for MAUI\nDESCRIPTION: This snippet defines the SwipeDirection enum, which represents different directions for swipe gestures in MAUI applications. It includes values for Left, Right, Up, and Down directions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Down = 8 -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Left = 2 -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Right = 1 -> Microsoft.Maui.SwipeDirection\nMicrosoft.Maui.SwipeDirection.Up = 4 -> Microsoft.Maui.SwipeDirection\n```\n\n----------------------------------------\n\nTITLE: ShareMultipleFilesRequest Operators in .NET MAUI\nDESCRIPTION: Operator for converting a ShareFileRequest to a ShareMultipleFilesRequest.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest.explicit operator Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest!(Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest! request) -> Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest!\n```\n\n----------------------------------------\n\nTITLE: Overriding EditorHandler and EntryHandler Methods in MAUI for iOS\nDESCRIPTION: Override methods for the EditorHandler and EntryHandler classes that manage virtual view setting, handler connection/disconnection, and platform view creation for text input controls in iOS.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.EditorHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.ConnectHandler(Microsoft.Maui.Platform.MauiTextField! platformView) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiTextField!\noverride Microsoft.Maui.Handlers.EntryHandler.DisconnectHandler(Microsoft.Maui.Platform.MauiTextField! platformView) -> void\noverride Microsoft.Maui.Handlers.EntryHandler.SetVirtualView(Microsoft.Maui.IView! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Static Keyboard Properties in C#\nDESCRIPTION: This section defines static properties for various keyboard types in MAUI, including Chat, Default, Email, Numeric, Plain, Telephone, Text, and URL keyboards.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Keyboard.Chat.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Create(Microsoft.Maui.KeyboardFlags flags) -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Default.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Email.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Numeric.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Plain.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Telephone.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Text.get -> Microsoft.Maui.Keyboard!\nstatic Microsoft.Maui.Keyboard.Url.get -> Microsoft.Maui.Keyboard!\n```\n\n----------------------------------------\n\nTITLE: Capturing UI Elements as Screenshots in .NET MAUI\nDESCRIPTION: Methods for capturing UI elements (Views and Windows) as screenshots in different formats (PNG, JPEG) or as IScreenshotResult objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ViewExtensions.CaptureAsync(this Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IView! view, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsJpegAsync(Microsoft.Maui.IWindow! window, int quality = 80) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IView! view) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.VisualDiagnostics.CaptureAsPngAsync(Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<byte[]?>!\nstatic Microsoft.Maui.WindowExtensions.CaptureAsync(this Microsoft.Maui.IWindow! window) -> System.Threading.Tasks.Task<Microsoft.Maui.Media.IScreenshotResult?>!\n```\n\n----------------------------------------\n\nTITLE: Get/Set Window TitleBar in C#\nDESCRIPTION: These snippets show getting and setting the `TitleBar` property of a `Window`.  The property is of type `Microsoft.Maui.ITitleBar?`\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.Window.TitleBar.get -> Microsoft.Maui.ITitleBar?\"\n\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"Microsoft.Maui.Controls.Window.TitleBar.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: Defining ImageHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the ImageHandler class, including property mappers and methods for handling aspect ratio, background, animation, and source of an Image.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ImageHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapAspect(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapBackground(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapIsAnimationPlaying(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IImage!, Microsoft.Maui.Handlers.IImageHandler!>!\nstatic Microsoft.Maui.Handlers.ImageHandler.MapSource(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> void\nstatic Microsoft.Maui.Handlers.ImageHandler.MapSourceAsync(Microsoft.Maui.Handlers.IImageHandler! handler, Microsoft.Maui.IImage! image) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Point Structure Implementation\nDESCRIPTION: Defines a structure representing a point in 2D space with double precision coordinates\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\npublic struct Point\n{\n    public double X { get; set; }\n    public double Y { get; set; }\n    public Point(double x, double y);\n    public Point(Size sz);\n    public Point(SizeF sz);\n    public Point(Vector2 v);\n    public bool IsEmpty { get; }\n    public void Deconstruct(out double x, out double y);\n    public double Distance(Point other);\n    public Point Offset(double dx, double dy);\n    public Point Round();\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Geometric Types between MAUI and Tizen\nDESCRIPTION: These extension methods convert geometric types like Point, Rect, and Size between MAUI and Tizen representations. They handle the necessary unit conversions and scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.DPExtensions.ToDP(this Tizen.UIExtensions.Common.Rect rect) -> Microsoft.Maui.Graphics.Rect\nstatic Microsoft.Maui.Platform.DPExtensions.ToDP(this Tizen.UIExtensions.Common.Size size) -> Microsoft.Maui.Graphics.Size\nstatic Microsoft.Maui.Platform.DPExtensions.ToPixel(this Microsoft.Maui.Graphics.Point point) -> Tizen.UIExtensions.Common.Point\nstatic Microsoft.Maui.Platform.DPExtensions.ToPixel(this Microsoft.Maui.Graphics.Rect rect) -> Tizen.UIExtensions.Common.Rect\nstatic Microsoft.Maui.Platform.DPExtensions.ToPixel(this Microsoft.Maui.Graphics.Size size) -> Tizen.UIExtensions.Common.Size\n```\n\n----------------------------------------\n\nTITLE: Secure Storage Handling in Microsoft MAUI\nDESCRIPTION: These static and extension methods offer asynchronous access to secure data storage with Microsoft MAUI. They support setting, retrieving, and removing secure storage entries. Operations can specify security access levels, and they rely on MAUI's secure storage mechanisms. Asynchronous methods return Task objects.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Default.get -> Microsoft.Maui.Storage.ISecureStorage!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.DefaultAccessible.get -> Security.SecAccessible\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.DefaultAccessible.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.GetAsync(string! key) -> System.Threading.Tasks.Task<string?>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.Remove(string! key) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.RemoveAll() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value, Security.SecAccessible accessible) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorage.SetAsync(string! key, string! value) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorageExtensions.GetDefaultAccessible(this Microsoft.Maui.Storage.ISecureStorage! secureStorage) -> Security.SecAccessible\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorageExtensions.SetAsync(this Microsoft.Maui.Storage.ISecureStorage! secureStorage, string! key, string! value, Security.SecAccessible accessible) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.SecureStorageExtensions.SetDefaultAccessible(this Microsoft.Maui.Storage.ISecureStorage! secureStorage, Security.SecAccessible accessible) -> void\n```\n\n----------------------------------------\n\nTITLE: Accessing Barometer Sensor in MAUI C# Applications\nDESCRIPTION: Static methods to access and monitor the device barometer in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Default.get -> Microsoft.Maui.Devices.Sensors.IBarometer!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsMonitoring.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.IsSupported.get -> bool\nstatic Microsoft.Maui.Devices.Sensors.Barometer.ReadingChanged -> System.EventHandler<Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs!>!\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Start(Microsoft.Maui.Devices.Sensors.SensorSpeed sensorSpeed) -> void\nstatic Microsoft.Maui.Devices.Sensors.Barometer.Stop() -> void\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator !=(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.BarometerData.operator ==(Microsoft.Maui.Devices.Sensors.BarometerData left, Microsoft.Maui.Devices.Sensors.BarometerData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Binding Setup in SetBinding Extension C#\nDESCRIPTION: Static method SetBinding in BindableObjectExtensions sets up data bindings between target properties and source objects using a getter function. Supports custom conversion and fallback scenarios.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding<TSource, TProperty>(this Microsoft.Maui.Controls.BindableObject! self, Microsoft.Maui.Controls.BindableProperty! targetProperty, System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding RectFTypeConverter Methods in .NET MAUI Graphics\nDESCRIPTION: These overrides for `RectFTypeConverter` in the Microsoft.Maui.Graphics library define how to convert from and to `RectF` types. The methods `CanConvertFrom`, `CanConvertTo`, `ConvertFrom`, and `ConvertTo` are overridden to provide custom conversion logic for `RectF` objects, representing rectangles with floating-point coordinates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object\n~override Microsoft.Maui.Graphics.Converters.RectFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object\"\n```\n\n----------------------------------------\n\nTITLE: Element Handler Extensions for MAUI Platform\nDESCRIPTION: Extension methods for converting MAUI elements to platform-specific handlers and objects. Includes methods for handling applications, windows and general elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ElementExtensions.ToHandler(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IElementHandler!\nstatic Microsoft.Maui.Platform.ElementExtensions.ToPlatform(this Microsoft.Maui.IElement! view, Microsoft.Maui.IMauiContext! context) -> object!\n```\n\n----------------------------------------\n\nTITLE: Color and Font Properties in .NET MAUI Graphics\nDESCRIPTION: Read-only properties for Color components and Font sources. These properties provide access to color channels and font characteristics for use in graphic operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.Maui.Graphics.Color.Alpha -> float\nreadonly Microsoft.Maui.Graphics.Color.Blue -> float\nreadonly Microsoft.Maui.Graphics.Color.Green -> float\nreadonly Microsoft.Maui.Graphics.Color.Red -> float\nreadonly Microsoft.Maui.Graphics.FontSource.FontStyleType -> Microsoft.Maui.Graphics.FontStyleType\nreadonly Microsoft.Maui.Graphics.FontSource.Name -> string!\nreadonly Microsoft.Maui.Graphics.FontSource.Weight -> int\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenFileRequest Class in MAUI ApplicationModel\nDESCRIPTION: Defines the OpenFileRequest class in the Microsoft.Maui.ApplicationModel namespace, providing properties and constructors for file opening requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.get -> Microsoft.Maui.Storage.ReadOnlyFile?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest() -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.ReadOnlyFile! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.get -> string?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: ScrollBarVisibility Enum Definition in C#\nDESCRIPTION: ScrollBarVisibility defines options for displaying scrollbars in scrollable containers. It provides Default, Always, and Never options to control scrollbar visibility behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Always = 1 -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Default = 0 -> Microsoft.Maui.ScrollBarVisibility\nMicrosoft.Maui.ScrollBarVisibility.Never = 2 -> Microsoft.Maui.ScrollBarVisibility\n```\n\n----------------------------------------\n\nTITLE: Graphics Paint Extensions for Android in MAUI\nDESCRIPTION: Extension methods for converting different types of Paint objects to Android Drawables, enabling cross-platform rendering of graphics elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.ImagePaint! imagePaint, Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint, Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.PatternPaint! patternPaint, Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint, Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateDrawable(this Microsoft.Maui.Graphics.SolidPaint! solidPaint, Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?\n```\n\n----------------------------------------\n\nTITLE: Device Info Interface Definition in MAUI\nDESCRIPTION: Interface for accessing device information in MAUI applications. Provides properties for device model, manufacturer, name, platform, idiom, type, and version information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IDeviceInfo.Model.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Manufacturer.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Name.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.VersionString.get -> string!\nMicrosoft.Maui.Devices.IDeviceInfo.Version.get -> System.Version!\nMicrosoft.Maui.Devices.IDeviceInfo.Platform.get -> Microsoft.Maui.Devices.DevicePlatform\nMicrosoft.Maui.Devices.IDeviceInfo.Idiom.get -> Microsoft.Maui.Devices.DeviceIdiom\nMicrosoft.Maui.Devices.IDeviceInfo.DeviceType.get -> Microsoft.Maui.Devices.DeviceType\n```\n\n----------------------------------------\n\nTITLE: Magnetometer Data Structures\nDESCRIPTION: Provides a structure to encapsulate magnetometer data readings, supporting constructors and methods to manipulate and compare magnetometer data objects within the Microsoft.Maui.Devices.Sensors context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.Equals(Microsoft.Maui.Devices.Sensors.MagnetometerData other) -> bool\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagneticField.get -> System.Numerics.Vector3\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData() -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.MagnetometerData.MagnetometerData(float x, float y, float z) -> void\n```\n\n----------------------------------------\n\nTITLE: Installing Workload System-Wide (Windows)\nDESCRIPTION: This dotnetcli snippet shows how to install the workload system-wide on Windows using an Administrator command prompt, by building the `DotNet.csproj` project with the `Install` target. This installs the workload in the instance of `dotnet` that is being run.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\n> dotnet build src/DotNet/DotNet.csproj -t:Install\n```\n\n----------------------------------------\n\nTITLE: MAUI Platform API Method Signatures\nDESCRIPTION: Collection of C# method and property signatures defining the MAUI platform API surface. Includes definitions for permissions, contacts, device sensors, authentication and networking interfaces.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n~abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.CheckStatusAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\n~abstract Microsoft.Maui.ApplicationModel.Permissions.BasePermission.RequestAsync() -> System.Threading.Tasks.Task<Microsoft.Maui.ApplicationModel.PermissionStatus>\n~Microsoft.Maui.ApplicationModel.Communication.Contact.Contact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactPhone> phones, System.Collections.Generic.IEnumerable<Microsoft.Maui.ApplicationModel.Communication.ContactEmail> email, string displayName = null) -> void\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Color in CGContext in MAUI\nDESCRIPTION: This method sets the fill color for the specified CGContext using a MAUI Color instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_118\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.GraphicsExtensions.SetFillColor(this CoreGraphics.CGContext context, Microsoft.Maui.Graphics.Color color) -> void\n```\n\n----------------------------------------\n\nTITLE: PathBuilder and PathF Path Construction Methods\nDESCRIPTION: Method signatures for building and manipulating paths in the PathBuilder and PathF classes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PathBuilder.BuildPath(string pathAsString) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.AddArc(Microsoft.Maui.Graphics.PointF topLeft, Microsoft.Maui.Graphics.PointF bottomRight, float startAngle, float endAngle, bool clockwise) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y) -> Microsoft.Maui.Graphics.PathF\nMicrosoft.Maui.Graphics.PathF.CurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Saving Images Asynchronously in .NET MAUI\nDESCRIPTION: This snippet defines the SaveAsync method for the IImage interface, which allows saving an image to a stream with a specified format and quality. The method returns a Task to indicate the completion of the save operation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Defining OpenFileRequest Class in C#\nDESCRIPTION: Defines the OpenFileRequest class with properties and constructors for handling file opening requests.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.OpenFileRequest\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.get -> Microsoft.Maui.Storage.ReadOnlyFile?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.File.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest() -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.FileBase! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.OpenFileRequest(string! title, Microsoft.Maui.Storage.ReadOnlyFile! file) -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.get -> Microsoft.Maui.Graphics.Rect\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.PresentationSourceBounds.set -> void\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.get -> string?\nMicrosoft.Maui.ApplicationModel.OpenFileRequest.Title.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MapSpan Class in C# for MAUI Maps\nDESCRIPTION: Defines the MapSpan class in the Microsoft.Maui.Maps namespace, representing a geographic region with properties for center, latitude, and longitude.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Maps.MapSpan.Center.get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Maps.MapSpan.ClampLatitude(double north, double south) -> Microsoft.Maui.Maps.MapSpan!\nMicrosoft.Maui.Maps.MapSpan.LatitudeDegrees.get -> double\nMicrosoft.Maui.Maps.MapSpan.LongitudeDegrees.get -> double\nMicrosoft.Maui.Maps.MapSpan.MapSpan(Microsoft.Maui.Devices.Sensors.Location! center, double latitudeDegrees, double longitudeDegrees) -> void\nMicrosoft.Maui.Maps.MapSpan.Radius.get -> Microsoft.Maui.Maps.Distance\nMicrosoft.Maui.Maps.MapSpan.WithZoom(double zoomFactor) -> Microsoft.Maui.Maps.MapSpan!\n```\n\n----------------------------------------\n\nTITLE: BlazorWebView Package References\nDESCRIPTION: This XML snippet lists the package references that are automatically added when using BlazorWebView in a MAUI project. These packages provide the necessary components for integrating Blazor applications within a MAUI environment.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.AspNetCore.Authorization\" />\n<PackageReference Include=\"Microsoft.AspNetCore.Components.WebView\" />\n<PackageReference Include=\"Microsoft.AspNetCore.Components.WebView.Maui\" />\n<PackageReference Include=\"Microsoft.JSInterop\" />\n```\n\n----------------------------------------\n\nTITLE: Resetting Fonts and Paints in SkiaCanvasState with C#\nDESCRIPTION: This method resets the font and paint settings of the SkiaCanvasState. It takes SKPaint and SKFont parameters for fonts and paint characteristics, allowing full customization of the drawing environment before rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Skia Canvas State Font Management\nDESCRIPTION: Provides getter and setter methods for managing font properties within a Skia canvas state. Allows retrieving and setting the current font used in rendering.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-macos/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: PlatformValueRequest Generic Class in C#\nDESCRIPTION: RetrievePlatformValueRequest provides a mechanism to request and retrieve values from the platform. It offers methods to set results and check if a result has already been set.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.RetrievePlatformValueRequest<T>\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.Result.get -> T\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.RetrievePlatformValueRequest() -> void\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.SetResult(T result) -> void\nMicrosoft.Maui.RetrievePlatformValueRequest<T>.TrySetResult(T result) -> bool\n```\n\n----------------------------------------\n\nTITLE: FontSource Static Operators in MAUI Graphics\nDESCRIPTION: Static equality operator overloads for Microsoft.Maui.Graphics.FontSource, enabling comparison between font source instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.FontSource.operator ==(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool\nstatic Microsoft.Maui.Graphics.FontSource.operator !=(Microsoft.Maui.Graphics.FontSource left, Microsoft.Maui.Graphics.FontSource right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Using Triple Slash Comment for XML Documentation in C#\nDESCRIPTION: Example of using the triple slash (///) pattern to initiate XML documentation comments in C#. Visual Studio will suggest appropriate XML tags based on the code being documented.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/CodeDocumentationGuidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n///\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform App Actions Interface in .NET MAUI\nDESCRIPTION: The IPlatformAppActions interface defines methods for handling application launch events specific to the Windows platform.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_77\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IPlatformAppActions.OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs! e) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Text Attributes Utility Methods\nDESCRIPTION: Utility methods for getting and setting text attributes with type-specific handling for bool, enum, float, and integer values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, string defaultValue = null) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetBoolAttribute(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, bool defaultValue = false) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributesExtensions.GetEnumAttribute<T>(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, Microsoft.Maui.Graphics.Text.TextAttribute type, T defaultValue) -> T\n```\n\n----------------------------------------\n\nTITLE: Map Pin Handler Methods\nDESCRIPTION: Static methods for handling map pin functionality including address, label, and location management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapAddress(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapLabel(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.MapLocation(Microsoft.Maui.Maps.Handlers.IMapPinHandler! handler, Microsoft.Maui.Maps.IMapPin! mapPin) -> void\nstatic Microsoft.Maui.Maps.Handlers.MapPinHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.Maps.IMapPin!, Microsoft.Maui.Maps.Handlers.IMapPinHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Canvas Methods in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines abstract methods for the AbstractCanvas<TState> class in the Microsoft.Maui.Graphics namespace. These methods include operations for drawing shapes, applying transformations, and setting various canvas properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Alpha.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.Antialias.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.BlendMode.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.ClipRectangle(float x, float y, float width, float height) -> void\n// ... (more abstract method definitions)\n```\n\n----------------------------------------\n\nTITLE: Copying AOT profiles (powershell)\nDESCRIPTION: This PowerShell command copies AOT profile files from a source directory to the NuGet packages directory.  This is used to override existing AOT profiles for testing purposes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/ProfiledAot/README.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncp -Verbose src\\Controls\\src\\Build.Tasks\\nuget\\buildTransitive\\netstandard2.0\\*.aotprofile ~\\.nuget\\packages\\microsoft.maui.controls.build.tasks\\9.0.100-preview.2-dev\\buildTransitive\\netstandard2.0\\\n```\n\n----------------------------------------\n\nTITLE: Shape View Handler Mappings in C#\nDESCRIPTION: Static methods for mapping stroke-related properties of shape views including line join, miter limit, and thickness.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeLineJoin(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeMiterLimit(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\nstatic Microsoft.Maui.Handlers.ShapeViewHandler.MapStrokeThickness(Microsoft.Maui.Handlers.IShapeViewHandler! handler, Microsoft.Maui.IShapeView! shapeView) -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API - Transformation Methods\nDESCRIPTION: Defines abstract transformation operations for the AbstractCanvas<TState> class, including methods for translation, rotation, scaling, and transformation concatenation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformTranslate(float tx, float ty) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformRotate(float degrees, float radians, float x, float y) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformScale(float fx, float fy) -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining FilePicker API in C#\nDESCRIPTION: Declares static methods for the FilePicker class in the Microsoft.Maui.Storage namespace. Includes methods for picking single and multiple files with optional customization.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.FilePicker.Default.get -> Microsoft.Maui.Storage.IFilePicker!\nstatic Microsoft.Maui.Storage.FilePicker.PickAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<Microsoft.Maui.Storage.FileResult?>!\nstatic Microsoft.Maui.Storage.FilePicker.PickMultipleAsync(Microsoft.Maui.Storage.PickOptions? options = null) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Storage.FileResult!>!>!\n```\n\n----------------------------------------\n\nTITLE: Defining PictureCommand Enum Values in C#\nDESCRIPTION: This snippet defines various enum values for the PictureCommand enum, which represent different drawing and state management operations in Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.DrawLine = 0\nMicrosoft.Maui.Graphics.PictureCommand.DrawRectangle = 1\nMicrosoft.Maui.Graphics.PictureCommand.DrawRoundedRectangle = 2\nMicrosoft.Maui.Graphics.PictureCommand.DrawEllipse = 3\nMicrosoft.Maui.Graphics.PictureCommand.DrawPath = 4\nMicrosoft.Maui.Graphics.PictureCommand.DrawImage = 5\nMicrosoft.Maui.Graphics.PictureCommand.DrawArc = 6\nMicrosoft.Maui.Graphics.PictureCommand.DrawPdfPage = 7\n// ... (more enum values)\n```\n\n----------------------------------------\n\nTITLE: Abstract Canvas Methods in .NET MAUI Graphics\nDESCRIPTION: Defines virtual methods and properties for the AbstractCanvas<TState> class providing functionality for state management, scaling, and resource disposal in the graphics system.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_74\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.get -> float\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.DisplayScale.set -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.Dispose() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.ResetState() -> void\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.RestoreState() -> bool\nvirtual Microsoft.Maui.Graphics.AbstractCanvas<TState>.SaveState() -> void\n```\n\n----------------------------------------\n\nTITLE: Color Parsing and Standard Colors in C#\nDESCRIPTION: These methods and properties are related to color parsing and defining standard colors. They provide functionality to parse color strings and access predefined color constants.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.ParseAsInts(this string color) -> int[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.StandardColors -> System.Collections.Generic.Dictionary<string, string>\nstatic readonly Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowColor -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.AliceBlue -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.AntiqueWhite -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Defining Font Weight Constants in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines constant integer values for various font weights in the Microsoft.Maui.Graphics.FontWeights class. These constants can be used to specify font weights in graphics operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.FontWeights.Black = 900 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Bold = 700 -> int\nconst Microsoft.Maui.Graphics.FontWeights.Default = -1 -> int\n// ... (more font weight constants)\n```\n\n----------------------------------------\n\nTITLE: Graphics Default Constants in C#\nDESCRIPTION: Defines default constant values for graphics operations including miter limits, shadow blur, and font size that are used throughout the MAUI Graphics implementation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Graphics.CanvasDefaults.DefaultMiterLimit = 10 -> float\nconst Microsoft.Maui.Graphics.CanvasDefaults.DefaultShadowBlur = 5 -> float\nconst Microsoft.Maui.Graphics.GeometryUtil.Epsilon = 1E-10 -> float\nconst Microsoft.Maui.Graphics.Text.TextAttributeExtensions.DefaultFontSize = 12 -> float\n```\n\n----------------------------------------\n\nTITLE: Sensor APIs Implementation in C#\nDESCRIPTION: Implementation of various device sensors including accelerometer, barometer, compass, and gyroscope with their respective data structures and event args.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsSupported.get -> bool\n\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData() -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.AccelerometerData(double x, double y, double z) -> void\nMicrosoft.Maui.Devices.Sensors.AccelerometerData.Acceleration.get -> System.Numerics.Vector3\n```\n\n----------------------------------------\n\nTITLE: Initializing MAUI Maps Extension Methods\nDESCRIPTION: Extension methods for configuring MAUI Maps in the application builder pipeline. Includes methods for adding map handlers and using maps functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.AddMauiMaps(this Microsoft.Maui.Hosting.IMauiHandlersCollection! handlersCollection) -> Microsoft.Maui.Hosting.IMauiHandlersCollection!\nstatic Microsoft.Maui.Controls.Hosting.AppHostBuilderExtensions.UseMauiMaps(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining ImageHandler Class in C#\nDESCRIPTION: Declares the ImageHandler class with multiple constructors and a method for handling Image controls in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.ImageHandler\nMicrosoft.Maui.Handlers.ImageHandler.ImageHandler() -> void\nMicrosoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper, Microsoft.Maui.CommandMapper? commandMapper) -> void\nMicrosoft.Maui.Handlers.ImageHandler.ImageHandler(Microsoft.Maui.IPropertyMapper? mapper) -> void\nMicrosoft.Maui.Handlers.ImageHandler.OnWindowChanged() -> void\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech in MAUI (C#)\nDESCRIPTION: Defines static methods for text-to-speech functionality, including getting available locales and speaking text with optional settings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.TextToSpeech.Default.get -> Microsoft.Maui.Media.ITextToSpeech!\nstatic Microsoft.Maui.Media.TextToSpeech.GetLocalesAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Maui.Media.Locale!>!>!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, Microsoft.Maui.Media.SpeechOptions? options, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Media.TextToSpeech.SpeakAsync(string! text, System.Threading.CancellationToken cancelToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: DateTimeOffset Preferences API Signatures\nDESCRIPTION: Static method signatures for getting and setting DateTimeOffset values in MAUI's Preferences storage. Includes overloads with and without sharedName parameter for storage isolation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue, string? sharedName) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, System.DateTimeOffset defaultValue) -> System.DateTimeOffset\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value, string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.Set(string! key, System.DateTimeOffset value) -> void\n```\n\n----------------------------------------\n\nTITLE: Concatenating Transform in W2DCanvas\nDESCRIPTION: This method concatenates a transformation matrix to the current drawing state of the W2DCanvas, altering how shapes are rendered. It requires a System.Numerics.Matrix3x2 type for transformation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformConcatenateTransform(System.Numerics.Matrix3x2 transform) -> void\n```\n\n----------------------------------------\n\nTITLE: Menu Handler Method Declarations - .NET MAUI C#\nDESCRIPTION: Static method declarations for handling menu components in MAUI applications. Includes handlers for menu bars, menu items, and menu flyouts.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyout!, Microsoft.Maui.Handlers.IMenuFlyoutHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Opening Asset File Using Android AssetManager\nDESCRIPTION: Demonstrates how to open and read an asset file from the application's assets directory using Android's AssetManager in a custom Activity class. Shows accessing a text file through InputStream.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/src/templates/maui-multiproject/MauiApp.1.Droid/Assets/AboutAndroidAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ReadAsset : Activity\n{\n    protected override void OnCreate (Bundle bundle)\n    {\n        base.OnCreate (bundle);\n\n        InputStream input = Assets.Open (\"my_asset.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Color Constants in Microsoft.Maui.Graphics.Colors (C#)\nDESCRIPTION: Static readonly color constants provided by Microsoft.Maui.Graphics.Colors class. These constants represent standard colors that can be used across MAUI applications for consistent coloring of UI elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_94\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Graphics.Colors.Gold -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Goldenrod -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Gray -> Microsoft.Maui.Graphics.Color\nstatic readonly Microsoft.Maui.Graphics.Colors.Green -> Microsoft.Maui.Graphics.Color\n// ... and many more color constants\n```\n\n----------------------------------------\n\nTITLE: Layout and Font Utilities in MAUI\nDESCRIPTION: Static properties and fields for working with layouts, grid measurements, and font files including predefined values and extensions.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_86\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.FontFile.Extensions -> string![]!\nstatic readonly Microsoft.Maui.GridLength.Auto -> Microsoft.Maui.GridLength\nstatic readonly Microsoft.Maui.GridLength.Star -> Microsoft.Maui.GridLength\nstatic readonly Microsoft.Maui.Layouts.FlexBasis.Auto -> Microsoft.Maui.Layouts.FlexBasis\n```\n\n----------------------------------------\n\nTITLE: Browser Functionality in .NET MAUI\nDESCRIPTION: Static methods to open web content in the device browser. Provides various overloads to open URIs with different launch modes and options. These methods enable applications to launch web content in the system browser.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.Browser.Default.get -> Microsoft.Maui.ApplicationModel.IBrowser!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(string! uri) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchMode launchMode) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri, Microsoft.Maui.ApplicationModel.BrowserLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nstatic Microsoft.Maui.ApplicationModel.Browser.OpenAsync(System.Uri! uri) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: File Picker Options in MAUI (C#)\nDESCRIPTION: Predefined options for file picking operations, providing default settings and specialized settings for image picking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.PickOptions.Default.get -> Microsoft.Maui.Storage.PickOptions!\nstatic Microsoft.Maui.Storage.PickOptions.Images.get -> Microsoft.Maui.Storage.PickOptions!\n```\n\n----------------------------------------\n\nTITLE: Defining UrlLoadingStrategy Enum in C# for Blazor WebView\nDESCRIPTION: Defines the UrlLoadingStrategy enum for specifying URL loading behavior in Blazor WebView. Includes options for opening externally, in WebView, or canceling the load.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.CancelLoad = 2 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.OpenExternally = 0 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\nMicrosoft.AspNetCore.Components.WebView.UrlLoadingStrategy.OpenInWebView = 1 -> Microsoft.AspNetCore.Components.WebView.UrlLoadingStrategy\n```\n\n----------------------------------------\n\nTITLE: Creating Platform View in Generic ViewHandler\nDESCRIPTION: This snippet defines a generic abstract method for creating a platform-specific view. It enables the use of type parameters that can vary, leading to more flexible view creation in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nabstract Microsoft.Maui.Handlers.ViewHandler<TVirtualView, TPlatformView>.CreatePlatformView() -> TPlatformView!\n```\n\n----------------------------------------\n\nTITLE: Calculating String Size in .NET MAUI\nDESCRIPTION: This snippet describes the GetStringSize methods in the IStringSizeService interface, which are used to calculate the size of a given string based on font properties and alignment options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IStringSizeService.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Methods in MAUI (C#)\nDESCRIPTION: Static methods for various unit conversions including temperature, pressure, distance, and more.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Media.UnitConverters.AtmospheresToPascals(double atm) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToFahrenheit(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CelsiusToKelvin(double celsius) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2) -> double\nstatic Microsoft.Maui.Media.UnitConverters.CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2) -> double\n// ... (more conversion methods)\n```\n\n----------------------------------------\n\nTITLE: PictureCommand Font Property Constants in C#\nDESCRIPTION: Constants in PictureCommand for font-related properties. These commands control font appearance including color, name, size, and font family selection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_79\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.PictureCommand.FontColor = 50 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontName = 51 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.FontSize = 52 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.SystemFont = 110 -> Microsoft.Maui.Graphics.PictureCommand\nMicrosoft.Maui.Graphics.PictureCommand.BoldSystemFont = 111 -> Microsoft.Maui.Graphics.PictureCommand\n```\n\n----------------------------------------\n\nTITLE: Defining SearchBar Mappers in C#\nDESCRIPTION: These static properties and methods define mappers and mapping functions for SearchBar components in MAUI, including various visual and functional properties such as background, text alignment, and keyboard options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_83\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapBackground(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCancelButtonColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapFont(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapHorizontalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsReadOnly(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsSpellCheckEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapIsTextPredictionEnabled(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapKeyboard(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapMaxLength(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISearchBar!, Microsoft.Maui.Handlers.ISearchBarHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholder(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapPlaceholderColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapText(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapTextColor(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SearchBarHandler.MapVerticalTextAlignment(Microsoft.Maui.Handlers.ISearchBarHandler! handler, Microsoft.Maui.ISearchBar! searchBar) -> void\n```\n\n----------------------------------------\n\nTITLE: Platform Implementation Methods in .NET MAUI\nDESCRIPTION: Virtual methods for platform-specific implementations, including image source handling, navigation management, and property mapping.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_156\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Platform.MauiImageSource.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Platform.StackNavigationManager.Connect(Microsoft.Maui.IView! navigationView) -> void\nvirtual Microsoft.Maui.Platform.StackNavigationManager.Disconnect() -> void\nvirtual Microsoft.Maui.Platform.StackNavigationManager.InitializeStack(System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IView!>! newStack, bool animated) -> System.Threading.Tasks.Task!\nvirtual Microsoft.Maui.Platform.StackNavigationManager.RequestNavigation(Microsoft.Maui.NavigationRequest! e) -> void\n```\n\n----------------------------------------\n\nTITLE: ActivityIndicator Handler Methods in MAUI\nDESCRIPTION: Static methods for the ActivityIndicatorHandler class that manage property mapping between the MAUI ActivityIndicator abstraction and platform implementations, handling properties like color and running state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapColor(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.MapIsRunning(Microsoft.Maui.Handlers.IActivityIndicatorHandler! handler, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ActivityIndicatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IActivityIndicator!, Microsoft.Maui.Handlers.IActivityIndicatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining KeyboardAcceleratorModifiers Enum in C#\nDESCRIPTION: This snippet defines the KeyboardAcceleratorModifiers enum for keyboard modifier keys in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Alt = 4 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Cmd = 8 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Ctrl = 2 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.None = 0 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Shift = 1 -> Microsoft.Maui.KeyboardAcceleratorModifiers\nMicrosoft.Maui.KeyboardAcceleratorModifiers.Windows = 16 -> Microsoft.Maui.KeyboardAcceleratorModifiers\n```\n\n----------------------------------------\n\nTITLE: Initializing Bitmap Export Context - SkiaSharp - C#\nDESCRIPTION: Constructor for the SkiaBitmapExportContext, allowing for the creation of a bitmap export context with specified dimensions, display scale, DPI, and additional options for bitmap transparency and disposal.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaBitmapExportContext.SkiaBitmapExportContext(int width, int height, float displayScale, int dpi = 72, bool disposeBitmap = true, bool transparent = true) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IApplication Interface in C#\nDESCRIPTION: Implements an interface for MAUI applications, including methods for managing windows, handling theme changes, and accessing application properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IApplication.CloseWindow(Microsoft.Maui.IWindow! window) -> void\nMicrosoft.Maui.IApplication.CreateWindow(Microsoft.Maui.IActivationState? activationState) -> Microsoft.Maui.IWindow!\nMicrosoft.Maui.IApplication.OpenWindow(Microsoft.Maui.IWindow! window) -> void\nMicrosoft.Maui.IApplication.ThemeChanged() -> void\nMicrosoft.Maui.IApplication.UserAppTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nMicrosoft.Maui.IApplication.Windows.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.IWindow!>!\n```\n\n----------------------------------------\n\nTITLE: Getting Shadow Color from W2DCanvasState\nDESCRIPTION: This code snippet retrieves the shadow color property from the W2DCanvasState class, returning a Windows.UI.Color type. It is essential for managing visual aspects of rendering shadows in the graphics canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DCanvasState.ShadowColor.get -> Windows.UI.Color\n```\n\n----------------------------------------\n\nTITLE: Interface Method Signatures for Microsoft.Maui.Graphics\nDESCRIPTION: Collection of method signatures for various graphics interfaces in the Microsoft.Maui.Graphics namespace, including IImage, IPdfPage, IPattern, and ICanvas implementations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task\nMicrosoft.Maui.Graphics.IImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage\nMicrosoft.Maui.Graphics.IImageLoadingService.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Align Self\nDESCRIPTION: Defines enums for overriding the default alignment of individual flex items, enabling detailed control over layout behavior.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignSelf.Auto = 0 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignSelf.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignSelf.End = 4 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignSelf.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignSelf.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignSelf\n```\n\n----------------------------------------\n\nTITLE: Mapping GraphicsView Properties in MAUI\nDESCRIPTION: Static methods for mapping properties of a GraphicsView control, including drawable, flow direction, and invalidation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Rotating in W2DCanvas\nDESCRIPTION: This snippet applies a rotation transformation to the W2DCanvas around a specified point. It is overloaded to support both direct point and origin-centered transformations without returning a value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformRotate(float degrees, float radians, float x, float y) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformRotate(float degrees, float radians) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Mapper and CommandMapper for NavigationViewHandler in C#\nDESCRIPTION: These static properties define a Mapper and CommandMapper for the NavigationViewHandler, which map properties and commands for IStackNavigationView to INavigationViewHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\nstatic Microsoft.Maui.Handlers.NavigationViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IStackNavigationView!, Microsoft.Maui.Handlers.INavigationViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Resize SkiaImage\nDESCRIPTION: This method resizes a SkiaImage based on specifying width, height, and an optional resize mode. It requires the Maui Graphics library. The resized image is returned as an IImage.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.Resize(float width, float height, Microsoft.Maui.Graphics.ResizeMode resizeMode = Microsoft.Maui.Graphics.ResizeMode.Fit, bool disposeOriginal = false) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Defining IMap Interface in C#\nDESCRIPTION: Defines the IMap interface with methods for opening maps using coordinates or placemarks.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(double latitude, double longitude, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.ApplicationModel.IMap.TryOpenAsync(Microsoft.Maui.Devices.Sensors.Placemark! placemark, Microsoft.Maui.ApplicationModel.MapLaunchOptions! options) -> System.Threading.Tasks.Task<bool>!\n```\n\n----------------------------------------\n\nTITLE: Convert UIColor to Hex in MAUI\nDESCRIPTION: This method converts a UIColor to its hexadecimal representation. It returns a string that represents the color in hex format.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIColorExtensions.ToHex(this UIKit.UIColor color) -> string\n```\n\n----------------------------------------\n\nTITLE: Defining CommandMapper for LabelHandler in C#\nDESCRIPTION: This static property defines a CommandMapper for the LabelHandler, which maps commands for ILabel to ILabelHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.LabelHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ILabel!, Microsoft.Maui.Handlers.ILabelHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining IPlatformFonts Interface in C#\nDESCRIPTION: Defines the IPlatformFonts interface with methods for getting and registering fonts in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.IPlatformFonts\nMicrosoft.Maui.Graphics.IPlatformFonts.Default.get -> Microsoft.Maui.Graphics.IFont!\nMicrosoft.Maui.Graphics.IPlatformFonts.DefaultBold.get -> Microsoft.Maui.Graphics.IFont!\nMicrosoft.Maui.Graphics.IPlatformFonts.Get(Microsoft.Maui.Graphics.IFont! font) -> object!\nMicrosoft.Maui.Graphics.IPlatformFonts.Get(string! alias, int weight = 400, Microsoft.Maui.Graphics.FontStyleType fontStyleType = Microsoft.Maui.Graphics.FontStyleType.Normal) -> object!\nMicrosoft.Maui.Graphics.IPlatformFonts.Register(string! alias, params Microsoft.Maui.Graphics.FontSource[]! sources) -> void\n```\n\n----------------------------------------\n\nTITLE: AppInfo Static Methods in C#\nDESCRIPTION: Static method declarations for accessing application information like version, theme and settings\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.AppInfo.PackagingModel.get -> Microsoft.Maui.ApplicationModel.AppPackagingModel\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedLayoutDirection.get -> Microsoft.Maui.ApplicationModel.LayoutDirection\nstatic Microsoft.Maui.ApplicationModel.AppInfo.RequestedTheme.get -> Microsoft.Maui.ApplicationModel.AppTheme\nstatic Microsoft.Maui.ApplicationModel.AppInfo.ShowSettingsUI() -> void\nstatic Microsoft.Maui.ApplicationModel.AppInfo.Version.get -> System.Version!\nstatic Microsoft.Maui.ApplicationModel.AppInfo.VersionString.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Device Type Enumeration in MAUI\nDESCRIPTION: Enumeration representing the type of device in MAUI applications. Includes Unknown, Physical, and Virtual types to distinguish between physical hardware and virtual/emulated devices.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.DeviceType.Unknown = 0 -> Microsoft.Maui.Devices.DeviceType\nMicrosoft.Maui.Devices.DeviceType.Physical = 1 -> Microsoft.Maui.Devices.DeviceType\nMicrosoft.Maui.Devices.DeviceType.Virtual = 2 -> Microsoft.Maui.Devices.DeviceType\n```\n\n----------------------------------------\n\nTITLE: Save SkiaImage Asynchronously\nDESCRIPTION: This asynchronous method saves a SkiaImage to a specified stream in a given format and quality. It uses the System.IO.Stream and awaits a Task on completion.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.SaveAsync(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png, float quality = 1) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Defining IVersionTracking in MAUI\nDESCRIPTION: This snippet defines the IVersionTracking interface which provides properties and methods for tracking app versions and build history, assisting in version management within a MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.Track() -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentBuild.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.CurrentVersion.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.FirstInstalledBuild.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IVersionTracking.IsFirstLaunchForCurrentBuild.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Text Attribute Handling Extensions\nDESCRIPTION: Extension methods for managing text attributes including font properties, colors, and text decorations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic string GetBackgroundColor(this ITextAttributes attributes)\nstatic bool GetBold(this ITextAttributes attributes)\nstatic string GetFontName(this ITextAttributes attributes)\nstatic float GetFontSize(this ITextAttributes attributes, float? fontSize = null)\nstatic void SetBackgroundColor(this Dictionary<TextAttribute, string> attributes, string value)\nstatic void SetBold(this Dictionary<TextAttribute, string> attributes, bool value)\n```\n\n----------------------------------------\n\nTITLE: Animation Manager Interface Definition\nDESCRIPTION: Interface defining the contract for animation management including adding/removing animations and controlling the animation ticker.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.IAnimationManager\nMicrosoft.Maui.Animations.IAnimationManager.Add(Microsoft.Maui.Animations.Animation! animation) -> void\nMicrosoft.Maui.Animations.IAnimationManager.AutoStartTicker.get -> bool\nMicrosoft.Maui.Animations.IAnimationManager.AutoStartTicker.set -> void\nMicrosoft.Maui.Animations.IAnimationManager.Remove(Microsoft.Maui.Animations.Animation! animation) -> void\n```\n\n----------------------------------------\n\nTITLE: Triggering Haptic Feedback in .NET MAUI\nDESCRIPTION: Static methods for generating haptic feedback on devices that support it. This allows triggering vibration patterns for user interaction feedback.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_89\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.HapticFeedback.Default.get -> Microsoft.Maui.Devices.IHapticFeedback!\nstatic Microsoft.Maui.Devices.HapticFeedback.Perform(Microsoft.Maui.Devices.HapticFeedbackType type = Microsoft.Maui.Devices.HapticFeedbackType.Click) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating DeviceIdiom in MAUI\nDESCRIPTION: This static method creates a DeviceIdiom object from a string representation. DeviceIdiom represents the type of device (e.g., Phone, Tablet). The input string specifies the device idiom.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n\"~static Microsoft.Maui.Devices.DeviceIdiom.Create(string deviceIdiom) -> Microsoft.Maui.Devices.DeviceIdiom\"\n```\n\n----------------------------------------\n\nTITLE: DisplayInfo Equality Operations in .NET MAUI\nDESCRIPTION: Operator overloads for comparing DisplayInfo objects in .NET MAUI. These allow for equality checks between different display information instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DisplayInfo.operator !=(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\nstatic Microsoft.Maui.Devices.DisplayInfo.operator ==(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating CALayers from Paint Objects in MAUI Graphics\nDESCRIPTION: Extension methods for creating CoreAnimation layers from various paint types in MAUI Graphics. These methods enable conversion of MAUI paint objects to platform-specific layers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_82\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.GradientPaint! gradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.ImagePaint! imagePaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.LinearGradientPaint! linearGradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.PatternPaint! patternPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.RadialGradientPaint! radialGradientPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PaintExtensions.CreateCALayer(this Microsoft.Maui.Graphics.SolidPaint! solidPaint, CoreGraphics.CGRect frame = default(CoreGraphics.CGRect)) -> CoreAnimation.CALayer?\n```\n\n----------------------------------------\n\nTITLE: Drawing Rectangle in W2DCanvas\nDESCRIPTION: This method draws a rectangle in the W2DCanvas using specified coordinates and dimensions without any return value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Maui.Graphics.Win2D.W2DCanvas.PlatformDrawRectangle(float x, float y, float width, float height) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing W2DImageLoadingService\nDESCRIPTION: This snippet defines the constructor for the W2DImageLoadingService class, which is tasked with managing image loading operations for the W2D graphics framework. The method does not return any value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DImageLoadingService.W2DImageLoadingService() -> void\n```\n\n----------------------------------------\n\nTITLE: Updating UIScrollView Content in .NET MAUI\nDESCRIPTION: This method updates the content of a UIScrollView in .NET MAUI. It takes a UIScrollView, an optional IView for content, and an IMauiContext as parameters.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_181\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ScrollViewExtensions.UpdateContent(this UIKit.UIScrollView! scrollView, Microsoft.Maui.IView? content, Microsoft.Maui.IMauiContext! context) -> void\n```\n\n----------------------------------------\n\nTITLE: Map Circle Properties - C#\nDESCRIPTION: Static readonly property declarations for the Circle map element defining bindable properties for center location, fill color and radius\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Circle.CenterProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Circle.FillColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Circle.RadiusProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Mappers in C#\nDESCRIPTION: These static properties and methods define mappers and mapping functions for Slider components in MAUI, including maximum and minimum values, and maximum track color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_85\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISlider!, Microsoft.Maui.Handlers.ISliderHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMaximumTrackColor(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SliderHandler.MapMinimum(Microsoft.Maui.Handlers.ISliderHandler! handler, Microsoft.Maui.ISlider! slider) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Static Color Constants in C# for Microsoft.Maui.Graphics\nDESCRIPTION: This snippet defines a series of static readonly color constants for the Microsoft.Maui.Graphics.Colors class. Each constant represents a specific color and is of type Microsoft.Maui.Graphics.Color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n~static readonly Microsoft.Maui.Graphics.Colors.SeaShell -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Sienna -> Microsoft.Maui.Graphics.Color\n~static readonly Microsoft.Maui.Graphics.Colors.Silver -> Microsoft.Maui.Graphics.Color\n// ... (more color definitions)\n```\n\n----------------------------------------\n\nTITLE: Converting to Platform Image in .NET MAUI\nDESCRIPTION: This snippet defines the ToPlatformImage method for the IImage interface, which converts the current image instance to a platform-specific image type and returns it.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.IImage.ToPlatformImage() -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Animation Class Methods in MAUI\nDESCRIPTION: Virtual methods for the Animation class that provide core functionality for creating, updating, and managing animations in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_87\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.Animations.Animation.CreateReverse() -> Microsoft.Maui.Animations.Animation!\nvirtual Microsoft.Maui.Animations.Animation.Dispose(bool disposing) -> void\nvirtual Microsoft.Maui.Animations.Animation.OnTick(double millisecondsSinceLastUpdate) -> void\nvirtual Microsoft.Maui.Animations.Animation.Reset() -> void\nvirtual Microsoft.Maui.Animations.Animation.Update(double percent) -> void\n```\n\n----------------------------------------\n\nTITLE: CarouselView Handler Method Signatures - C#\nDESCRIPTION: Override method signatures for CarouselView controller and delegator implementations, handling scrolling, dragging, and cell management in iOS UICollectionView context.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2.DraggingStarted(UIKit.UIScrollView scrollView) -> void\noverride Microsoft.Maui.Controls.Handlers.Items2.CarouselViewController2.GetCell(UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath) -> UIKit.UICollectionViewCell\n```\n\n----------------------------------------\n\nTITLE: Canvas Shadow Management in Microsoft.Maui.Graphics\nDESCRIPTION: This method enables default shadow effects on the canvas using a specified zoom level to control the shadow intensity. It enhances visual elements by adding a shadow. Requires Microsoft.Maui.Graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_76\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.EnableDefaultShadow(this Microsoft.Maui.Graphics.ICanvas canvas, float zoom = 1) -> void\n```\n\n----------------------------------------\n\nTITLE: Disabling Binding Compilation for Specific Bindings in XAML\nDESCRIPTION: Shows how to disable binding compilation for specific bindings in XAML when the MauiEnableXamlCBindingWithSourceCompilation feature is enabled. This is useful for bindings that should not be compiled.\nSOURCE: https://github.com/dotnet/maui/blob/main/docs/design/FeatureSwitches.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n{Binding MyProperty, Source={x:Reference MyTarget}, x:DataType={x:Null}}\n```\n\n----------------------------------------\n\nTITLE: SemanticHeadingLevel Enum Definition in C#\nDESCRIPTION: SemanticHeadingLevel defines heading levels for semantic accessibility. It provides Level1, Level2, and Level3 options to create properly structured content hierarchy for screen readers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level1 = 1 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level2 = 2 -> Microsoft.Maui.SemanticHeadingLevel\nMicrosoft.Maui.SemanticHeadingLevel.Level3 = 3 -> Microsoft.Maui.SemanticHeadingLevel\n```\n\n----------------------------------------\n\nTITLE: Static ToPlatformEmbedded Extension Method (MauiApp, UIWindow)\nDESCRIPTION: This code provides a static extension method to embed a MAUI element into a native UIKit UIView using a MauiApp and UIWindow. This is important for integrating MAUI components within existing native iOS applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\n\"static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.ToPlatformEmbedded(this Microsoft.Maui.IElement! element, Microsoft.Maui.Hosting.MauiApp! mauiApp, UIKit.UIWindow! platformWindow) -> UIKit.UIView!\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# for MAUI\nDESCRIPTION: This directive enables nullable reference types, a feature introduced in C# 8.0. It helps developers catch potential null reference exceptions at compile-time by making reference type variables non-nullable by default.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Map Handlers Interface Definitions\nDESCRIPTION: Core interfaces defining map element, pin and main map handlers for platform-specific implementations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMapHandler\n{\n    MauiMKMapView PlatformView { get; }\n    IMap VirtualView { get; }\n    void UpdateMapElement(IMapElement element);\n}\n\npublic interface IMapElementHandler\n{\n    MKOverlayRenderer PlatformView { get; }\n    IMapElement VirtualView { get; }\n}\n\npublic interface IMapPinHandler\n{\n    IMKAnnotation PlatformView { get; }\n    IMapPin VirtualView { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying RequireServiceAttribute in XAML C#\nDESCRIPTION: Defines the use of RequireServiceAttribute, a specialized attribute used in MAUI XAML to ensure required services are available for elements. This provides a way to enforce dependencies within an application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Xaml.RequireServiceAttribute\n```\n\n----------------------------------------\n\nTITLE: Converting SKColor to Microsoft Color\nDESCRIPTION: Static extension for converting a SkiaSharp.SKColor back to a Microsoft.Maui.Graphics.Color, integrating seamlessly with color management routines across different applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.AsColor(this SkiaSharp.SKColor target) -> Microsoft.Maui.Graphics.Color\n```\n\n----------------------------------------\n\nTITLE: Defining HybridWebView Handler Class\nDESCRIPTION: Declares the HybridWebViewHandler class with constructors and override methods for handling web view lifecycle in MAUI applications\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler() -> void\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Inserting Curve to PathF in .NET MAUI\nDESCRIPTION: This method inserts a curve into the path at a specified index using control points and end point.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.InsertCurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point, int index) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: Defining InsetsF Properties in C#\nDESCRIPTION: Defines get and set properties for Left, Right, Top, and Vertical components of the InsetsF struct in the Microsoft.Maui.Graphics namespace.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.InsetsF.Left.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Right.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Right.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Top.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Top.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Vertical.get -> float\n```\n\n----------------------------------------\n\nTITLE: Extending IServiceCollection for Blazor WebView in C# for .NET MAUI\nDESCRIPTION: Defines extension methods for IServiceCollection to add Blazor WebView services and developer tools to a .NET MAUI application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/BlazorWebView/src/Maui/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Extensions.DependencyInjection.BlazorWebViewServiceCollectionExtensions\nstatic Microsoft.Extensions.DependencyInjection.BlazorWebViewServiceCollectionExtensions.AddBlazorWebViewDeveloperTools(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Extensions.DependencyInjection.BlazorWebViewServiceCollectionExtensions.AddMauiBlazorWebView(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Components.WebView.Maui.IMauiBlazorWebViewBuilder!\n```\n\n----------------------------------------\n\nTITLE: SkiaCanvasState Reset Method\nDESCRIPTION: Resets the canvas state by updating multiple paint and font objects, providing a comprehensive state reset for Skia rendering\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: CompassData Equality Operators in MAUI C#\nDESCRIPTION: Equality comparison operators for the CompassData struct, allowing comparison between two CompassData instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator !=(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\nstatic Microsoft.Maui.Devices.Sensors.CompassData.operator ==(Microsoft.Maui.Devices.Sensors.CompassData left, Microsoft.Maui.Devices.Sensors.CompassData right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Mapping TabbedView Properties in C#\nDESCRIPTION: Static methods for mapping properties of TabbedView in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\nstatic Microsoft.Maui.Handlers.TabbedViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ITabbedView!, Microsoft.Maui.Handlers.ITabbedViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining GraphicsViewHandler Static Members in C#\nDESCRIPTION: This snippet defines static members for the GraphicsViewHandler class, including property mappers and methods for handling drawable content, flow direction, and invalidation of a GraphicsView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapDrawable(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapFlowDirection(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.MapInvalidate(Microsoft.Maui.Handlers.IGraphicsViewHandler! handler, Microsoft.Maui.IGraphicsView! graphicsView, object? arg) -> void\nstatic Microsoft.Maui.Handlers.GraphicsViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IGraphicsView!, Microsoft.Maui.Handlers.IGraphicsViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: A preprocessor directive that enables nullable reference type checking, requiring explicit handling of null values in C# code. This helps catch potential null reference exceptions at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Animation Class API Definition in C#\nDESCRIPTION: Public API surface for the Microsoft.Maui.Animations.Animation class, including properties and methods for controlling animations\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation.Duration.set -> void\nMicrosoft.Maui.Animations.Animation.Easing.get -> Microsoft.Maui.Easing!\nMicrosoft.Maui.Animations.Animation.Easing.set -> void\nMicrosoft.Maui.Animations.Animation.Finished.get -> System.Action?\nMicrosoft.Maui.Animations.Animation.Finished.set -> void\n```\n\n----------------------------------------\n\nTITLE: Path Drawing and Manipulation Extensions\nDESCRIPTION: Methods for drawing and manipulating paths including arc operations, SVG path parsing and path scaling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic void DrawArc(this PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation);\nstatic PathF AsScaledPath(this PathF target, float scale);\nstatic string ToDefinitionString(this PathF path, float ppu = 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Ignore Patterns for .NET MAUI\nDESCRIPTION: Defines ignore patterns for specific file types in a .NET MAUI project. Targets unsigned XML files and CAB files matching specific naming patterns.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/automation/SignVerifyIgnore.txt#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n**\\*.xml,ignore unsigned .xml\n**\\cab*.cab.cab,ignore unsigned .cab\n```\n\n----------------------------------------\n\nTITLE: Defining ILifecycleEventService Interface in C# for MAUI Lifecycle Events\nDESCRIPTION: Declares the ILifecycleEventService interface with methods for managing lifecycle events in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_81\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.LifecycleEvents.ILifecycleEventService\nMicrosoft.Maui.LifecycleEvents.ILifecycleEventService.ContainsEvent(string! eventName) -> bool\nMicrosoft.Maui.LifecycleEvents.ILifecycleEventService.GetEventDelegates<TDelegate>(string! eventName) -> System.Collections.Generic.IEnumerable<TDelegate!>!\n```\n\n----------------------------------------\n\nTITLE: Setting Blur Radius on Canvas - Skia\nDESCRIPTION: This method sets the blur effect radius on the SkiaCanvas, enabling softening of drawn shapes. The radius parameter defines the intensity of the blur.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Skia.SkiaCanvas.SetBlur(float radius) -> void\n```\n\n----------------------------------------\n\nTITLE: Binding Extensions\nDESCRIPTION: Extension methods for creating and managing data bindings in MAUI controls\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.BindableObjectExtensions.SetBinding<TSource, TProperty>(this Microsoft.Maui.Controls.BindableObject! self, Microsoft.Maui.Controls.BindableProperty! targetProperty, System.Func<TSource, TProperty>! getter, Microsoft.Maui.Controls.BindingMode mode = Microsoft.Maui.Controls.BindingMode.Default, Microsoft.Maui.Controls.IValueConverter? converter = null, object? converterParameter = null, string? stringFormat = null, object? source = null, object? fallbackValue = null, object? targetNullValue = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Convert Color to String\nDESCRIPTION: Overrides ToString in the Color class to provide string representation. This operation does not require parameters or produce extra dependencies and outputs a formatted string.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_80\n\nLANGUAGE: C#\nCODE:\n```\n~override Microsoft.Maui.Graphics.Color.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Event Registration in .NET MAUI\nDESCRIPTION: Services and interfaces for registering and managing application lifecycle events across different platforms, with specific support for Tizen platform events\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.LifecycleEvents.ILifecycleBuilder.AddEvent<TDelegate>(string! eventName, TDelegate! action) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Window Height\nDESCRIPTION: Returns the height of the current window, allowing developers to make decisions based on the window size.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Height.get -> double\n```\n\n----------------------------------------\n\nTITLE: Declaring Template Binding Properties in MAUI Controls\nDESCRIPTION: Declaration of TypedBinding property accessors in the TemplateBindingExtension class, allowing get and set operations for template bindings.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.get -> Microsoft.Maui.Controls.Internals.TypedBindingBase\n~Microsoft.Maui.Controls.Xaml.TemplateBindingExtension.TypedBinding.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining TypeExtension Class in Microsoft.Maui.Controls.Xaml\nDESCRIPTION: Defines the TypeExtension class with methods for providing values and managing type names in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TypeExtension.ProvideValue(System.IServiceProvider serviceProvider) -> System.Type\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.get -> string\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.set -> void\n```\n\n----------------------------------------\n\nTITLE: FontImageSourceService Constructor - C#\nDESCRIPTION: Defines constructors for the FontImageSourceService class, which allows for managing fonts in images and supports logging capabilities.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager, Microsoft.Extensions.Logging.ILogger<Microsoft.Maui.FontImageSourceService!>? logger = null) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.FontImageSourceService.FontImageSourceService(Microsoft.Maui.IFontManager! fontManager) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: A compiler directive that enables nullable reference type checking for the current file. This helps detect potential null reference exceptions during compilation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Defining Map Properties in C# for MAUI\nDESCRIPTION: Declares static readonly BindableProperty fields for the Map class, including ItemTemplateSelector and MapType properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.Map.ItemTemplateSelectorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.Map.MapTypeProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Handling Activation States in MAUI\nDESCRIPTION: This snippet defines constructors and properties for managing activation states in a MAUI application. It helps in handling application lifecycle events effectively.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context, Microsoft.Maui.IPersistedState! state) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context, Microsoft.UI.Xaml.LaunchActivatedEventArgs? launchActivatedEventArgs) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ActivationState.ActivationState(Microsoft.Maui.IMauiContext! context) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ActivationState.Context.get -> Microsoft.Maui.IMauiContext!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ActivationState.LaunchActivatedEventArgs.get -> Microsoft.UI.Xaml.LaunchActivatedEventArgs?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ActivationState.State.get -> Microsoft.Maui.IPersistedState!\n```\n\n----------------------------------------\n\nTITLE: Switch Handler Mappings in MAUI\nDESCRIPTION: Static methods for mapping Switch control properties like thumb color and track color.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapThumbColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\nstatic Microsoft.Maui.Handlers.SwitchHandler.MapTrackColor(Microsoft.Maui.Handlers.ISwitchHandler! handler, Microsoft.Maui.ISwitch! view) -> void\n```\n\n----------------------------------------\n\nTITLE: HybridWebView Handler Implementation\nDESCRIPTION: Implementation of the HybridWebViewHandler class with constructor definitions and platform-specific view creation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler() -> void\nMicrosoft.Maui.Handlers.HybridWebViewHandler.HybridWebViewHandler(Microsoft.Maui.IPropertyMapper? mapper = null, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\noverride Microsoft.Maui.Handlers.HybridWebViewHandler.CreatePlatformView() -> Tizen.NUI.BaseComponents.View!\n```\n\n----------------------------------------\n\nTITLE: Determining Point Containment in Overlay Element\nDESCRIPTION: Checks if a specified point is contained within the overlay element's boundaries, invaluable for touch and interaction detection.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlayElement.Contains(Microsoft.Maui.Graphics.Point point) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining MapElement BindableProperties in C#\nDESCRIPTION: Static readonly property definitions for MapElement including stroke color and width properties for map element styling.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Maps.MapElement.StrokeWidthProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on ICanvas\nDESCRIPTION: This extension method allows drawing a string on an ICanvas with various alignment and flow options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasExtensions.DrawString(this Microsoft.Maui.Graphics.ICanvas target, string value, Microsoft.Maui.Graphics.RectF bounds, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment, Microsoft.Maui.Graphics.TextFlow textFlow = Microsoft.Maui.Graphics.TextFlow.ClipBounds, float lineSpacingAdjustment = 0) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing CornerRadius Operations in MAUI (C#)\nDESCRIPTION: These operator overloads and implicit conversion for the CornerRadius struct provide equality comparison and conversion from double to CornerRadius.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.CornerRadius.implicit operator Microsoft.Maui.CornerRadius(double uniformRadius) -> Microsoft.Maui.CornerRadius\nstatic Microsoft.Maui.CornerRadius.operator !=(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\nstatic Microsoft.Maui.CornerRadius.operator ==(Microsoft.Maui.CornerRadius left, Microsoft.Maui.CornerRadius right) -> bool\n```\n\n----------------------------------------\n\nTITLE: XAML Type Extension Interface\nDESCRIPTION: Interface declarations for the TypeExtension class that enables type references in XAML. Includes property accessors for TypeName and ProvideValue method.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.TypeExtension.ProvideValue(System.IServiceProvider serviceProvider) -> System.Type\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.get -> string\n~Microsoft.Maui.Controls.Xaml.TypeExtension.TypeName.set -> void\n```\n\n----------------------------------------\n\nTITLE: SwipeItemMenuItem Mapping Methods in MAUI (C#)\nDESCRIPTION: Static methods for SwipeItemMenuItemHandler that map properties of swipe item menu items to platform-specific implementations. Handles appearance aspects like background, text formatting, font properties, image source, and visibility.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Justify\nDESCRIPTION: Establishes justification options for flex items, providing control over alignment along the main axis.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_75\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.Center = 2 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.End = 4 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexJustify.Start = 3 -> Microsoft.Maui.Layouts.FlexJustify\n```\n\n----------------------------------------\n\nTITLE: Drawing Paint Patterns in .NET MAUI\nDESCRIPTION: This snippet defines the Draw method in the PaintPattern interface for rendering a specific paint pattern onto a canvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PaintPattern.Draw(Microsoft.Maui.Graphics.ICanvas canvas) -> void\n```\n\n----------------------------------------\n\nTITLE: Bitmap and Pattern Utility Extensions\nDESCRIPTION: Extension methods for generating pattern bitmaps and retrieving platform-specific image representations with optional scaling\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Skia.SKGraphicsExtensions.GetPatternBitmap(this Microsoft.Maui.Graphics.PatternPaint patternPaint, float scale = 1) -> SkiaSharp.SKBitmap\n```\n\n----------------------------------------\n\nTITLE: MAUI Embedded App Extension Methods\nDESCRIPTION: Generic extension methods for configuring embedded MAUI applications using MauiAppBuilder.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Func<System.IServiceProvider, TApp> implementationFactory) -> Microsoft.Maui.Hosting.MauiAppBuilder\n~static Microsoft.Maui.Controls.Embedding.EmbeddingExtensions.UseMauiEmbeddedApp<TApp>(this Microsoft.Maui.Hosting.MauiAppBuilder builder) -> Microsoft.Maui.Hosting.MauiAppBuilder\n```\n\n----------------------------------------\n\nTITLE: Curving PathF in .NET MAUI\nDESCRIPTION: These methods curve the path to specified control points and final destination points.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y) -> Microsoft.Maui.Graphics.PathF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.CurveTo(Microsoft.Maui.Graphics.PointF controlPoint1, Microsoft.Maui.Graphics.PointF controlPoint2, Microsoft.Maui.Graphics.PointF point) -> Microsoft.Maui.Graphics.PathF\n```\n\n----------------------------------------\n\nTITLE: FlyoutItemIsVisibleProperty Definition in C#\nDESCRIPTION: Static readonly field defining the BindableProperty for controlling the visibility of a FlyoutItem in a Shell application. Used for binding visibility properties in XAML.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n~static readonly Microsoft.Maui.Controls.BaseShellItem.FlyoutItemIsVisibleProperty -> Microsoft.Maui.Controls.BindableProperty\n```\n\n----------------------------------------\n\nTITLE: Mapping SwipeItemMenuItem Properties in C#\nDESCRIPTION: Static methods for mapping properties of SwipeItemMenuItem in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapBackground(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapCharacterSpacing(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapFont(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.ISwipeItemMenuItem!, Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler!>!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSource(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapSourceAsync(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! image) -> System.Threading.Tasks.Task!\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapText(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapTextColor(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ITextStyle! view) -> void\nstatic Microsoft.Maui.Handlers.SwipeItemMenuItemHandler.MapVisibility(Microsoft.Maui.Handlers.ISwipeItemMenuItemHandler! handler, Microsoft.Maui.ISwipeItemMenuItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: ItemDelegateList<T> Class Definition in .NET MAUI\nDESCRIPTION: Generic collection class that implements a list interface backed by an IItemDelegate<T>. It provides access to items through indexing and enumeration while delegating the actual item storage and retrieval to the underlying delegate.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ItemDelegateList<T>\nMicrosoft.Maui.ItemDelegateList<T>.Count.get -> int\nMicrosoft.Maui.ItemDelegateList<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!\nMicrosoft.Maui.ItemDelegateList<T>.ItemDelegate.get -> Microsoft.Maui.IItemDelegate<T>!\nMicrosoft.Maui.ItemDelegateList<T>.ItemDelegateList(Microsoft.Maui.IItemDelegate<T>! itemDelegate) -> void\nMicrosoft.Maui.ItemDelegateList<T>.this[int index].get -> T\n```\n\n----------------------------------------\n\nTITLE: Attributed Text Block Property Accessors\nDESCRIPTION: Provides getter methods for retrieving text attributes and text content from an AttributedTextBlock\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-macos/PublicAPI.Shipped.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Text.AttributedTextBlock.Attributes.get -> Microsoft.Maui.Graphics.Text.ITextAttributes\nMicrosoft.Maui.Graphics.Text.AttributedTextBlock.Text.get -> string\n```\n\n----------------------------------------\n\nTITLE: EmailMessage Body setter in MAUI\nDESCRIPTION: This property setter sets the body of an email message. The body is a string containing the content of the email. The string can be null.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_56\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.Communication.EmailMessage.Body.set -> void\"\n```\n\n----------------------------------------\n\nTITLE: XAML File Path Attribute Implementation\nDESCRIPTION: Attribute class for specifying XAML file paths. Used to associate XAML files with their code-behind files.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Controls.Xaml.XamlFilePathAttribute.FilePath.get -> string\n~Microsoft.Maui.Controls.Xaml.XamlFilePathAttribute.XamlFilePathAttribute(string filePath = \"\") -> void\n```\n\n----------------------------------------\n\nTITLE: AppActionEventArgs AppAction getter in MAUI\nDESCRIPTION: This property getter retrieves the AppAction associated with the AppActionEventArgs. This read-only property returns the triggered AppAction.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n\"Microsoft.Maui.ApplicationModel.AppActionEventArgs.AppAction.get -> Microsoft.Maui.ApplicationModel.AppAction!\"\n```\n\n----------------------------------------\n\nTITLE: Image Saving and Conversion Methods\nDESCRIPTION: Methods for saving and converting images with various format and quality options\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIImage.SaveAsync(Stream stream, ImageFormat format = ImageFormat.Png, float quality = 1)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIImage.ToPlatformImage()\n```\n\n----------------------------------------\n\nTITLE: TextFlow Enum Constants in MAUI Graphics\nDESCRIPTION: Enumeration constants for Microsoft.Maui.Graphics.TextFlow, defining text overflow behaviors for rendering text in bounded areas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.TextFlow.ClipBounds = 0 -> Microsoft.Maui.Graphics.TextFlow\nMicrosoft.Maui.Graphics.TextFlow.OverflowBounds = 1 -> Microsoft.Maui.Graphics.TextFlow\n```\n\n----------------------------------------\n\nTITLE: Geometry Utility Methods in C#\nDESCRIPTION: Static utility methods in GeometryUtil class for mathematical operations related to graphics, including angle conversions and ellipse calculations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(double angle) -> double\nstatic Microsoft.Maui.Graphics.GeometryUtil.DegreesToRadians(float angle) -> float\nstatic Microsoft.Maui.Graphics.GeometryUtil.EllipseAngleToPoint(float x, float y, float width, float height, float angleInDegrees) -> Microsoft.Maui.Graphics.PointF\n```\n\n----------------------------------------\n\nTITLE: Implementing BatteryInfoChangedEventArgs in MAUI Devices\nDESCRIPTION: Defines the BatteryInfoChangedEventArgs class in the Microsoft.Maui.Devices namespace, providing properties and constructor for battery information changes.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.BatteryInfoChangedEventArgs.BatteryInfoChangedEventArgs(double level, Microsoft.Maui.Devices.BatteryState state, Microsoft.Maui.Devices.BatteryPowerSource source) -> void\nMicrosoft.Maui.Devices.BatteryInfoChangedEventArgs.ChargeLevel.get -> double\n```\n\n----------------------------------------\n\nTITLE: Display Information Comparison in MAUI C# Applications\nDESCRIPTION: Equality operators for comparing DisplayInfo instances in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Devices.DisplayInfo.operator !=(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\nstatic Microsoft.Maui.Devices.DisplayInfo.operator ==(Microsoft.Maui.Devices.DisplayInfo left, Microsoft.Maui.Devices.DisplayInfo right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Element Handler Extensions\nDESCRIPTION: Extension methods for handling element services and connection states in MAUI applications.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ElementHandlerExtensions {\n    public static T GetRequiredService<T>(this IElementHandler handler, Type type);\n    public static T GetRequiredService<T>(this IElementHandler handler);\n    public static T? GetService<T>(this IElementHandler handler);\n    public static bool IsConnected(this IElementHandler handler);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting MAUI View to Platform Handler in C#\nDESCRIPTION: This method converts a MAUI IView to its corresponding IPlatformViewHandler using the provided IMauiContext.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_182\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ViewExtensions.ToHandler(this Microsoft.Maui.IView! view, Microsoft.Maui.IMauiContext! context) -> Microsoft.Maui.IPlatformViewHandler!\n```\n\n----------------------------------------\n\nTITLE: Getting Segment Types in PathF Class in .NET MAUI\nDESCRIPTION: This property retrieves the types of segments that make up the path in a PathF instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.SegmentTypes.get -> System.Collections.Generic.IEnumerable<Microsoft.Maui.Graphics.PathOperation>\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive to enable nullable reference type checking at the file level. This helps catch potential null reference exceptions at compile time.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Swipe View Interface Definitions in .NET MAUI\nDESCRIPTION: Interface methods and properties for implementing swipe interactions and managing swipe items in .NET MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.ISwipeView.RequestClose(Microsoft.Maui.SwipeViewCloseRequest! swipeCloseRequest) -> void\n```\n\n----------------------------------------\n\nTITLE: Get Points from UIView Touch Set in MAUI\nDESCRIPTION: These methods retrieve points from touches in a UIView, either from an NSSet of touches or from a UIEvent.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIViewExtensions.GetPointsInView(this UIKit.UIView target, Foundation.NSSet touchSet) -> Microsoft.Maui.Graphics.PointF[]\n```\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Graphics.Platform.UIViewExtensions.GetPointsInView(this UIKit.UIView target, UIKit.UIEvent touchEvent) -> Microsoft.Maui.Graphics.PointF[]\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Window Height\nDESCRIPTION: Provides the maximum allowable height for the window, which can be useful for layout constraints.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.MaximumHeight.get -> double\n```\n\n----------------------------------------\n\nTITLE: Android Color Conversion Extensions\nDESCRIPTION: Extension methods for converting between color formats. This method converts an integer array to an Android Color object.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.ColorExtensions.ToColor(this int[] color) -> Android.Graphics.Color?\n```\n\n----------------------------------------\n\nTITLE: Getting Window Y Coordinate\nDESCRIPTION: Retrieves the Y coordinate of the window, which can aid in aligning elements within the application.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.Y.get -> double\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Sources in MAUI App Builder\nDESCRIPTION: Extension methods for configuring image sources in a MAUI application builder. These methods allow for customization of image source services and their integration into the app.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_73\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder, System.Action<Microsoft.Maui.Hosting.IImageSourceServiceCollection!>? configureDelegate) -> Microsoft.Maui.Hosting.MauiAppBuilder!\nstatic Microsoft.Maui.Hosting.ImageSourcesMauiAppBuilderExtensions.ConfigureImageSources(this Microsoft.Maui.Hosting.MauiAppBuilder! builder) -> Microsoft.Maui.Hosting.MauiAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Base Classes in .NET MAUI\nDESCRIPTION: The base permission classes provide the foundation for the MAUI permissions system, allowing for platform-specific permission implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_84\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.Permissions.BasePermission.BasePermission() -> void\nMicrosoft.Maui.ApplicationModel.Permissions.BasePlatformPermission.BasePlatformPermission() -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific WebView Handler\nDESCRIPTION: Platform-specific implementation of the hybrid web view handler for iOS/macOS using WKWebView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MauiHybridWebView {\n    public MauiHybridWebView(HybridWebViewHandler handler, CGRect frame, WKWebViewConfiguration configuration);\n    public void SendRawMessage(string rawMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Color Strings in C#\nDESCRIPTION: These extension methods parse color strings into float or int arrays representing RGB values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextColors.Parse(this string color) -> float[]\nstatic Microsoft.Maui.Graphics.Text.TextColors.ParseAsInts(this string color) -> int[]\n```\n\n----------------------------------------\n\nTITLE: Comparing PathF Instances in .NET MAUI\nDESCRIPTION: This method checks if two PathF instances are equal based on a specified epsilon value.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PathF.Equals(object obj, float epsilon) -> bool\n```\n\n----------------------------------------\n\nTITLE: MapSpan Equality Operator Overload\nDESCRIPTION: Static operator overload for equality comparison between two MapSpan instances, allowing null values\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/maps/src/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Maps.MapSpan.operator ==(Microsoft.Maui.Maps.MapSpan? left, Microsoft.Maui.Maps.MapSpan? right) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining InsetsF Structure in C#\nDESCRIPTION: The InsetsF structure represents insets with float values for top, left, bottom, and right. It provides properties and methods to manipulate these insets.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.InsetsF\nMicrosoft.Maui.Graphics.InsetsF.AllValuesAreEqualTo(float value) -> bool\nMicrosoft.Maui.Graphics.InsetsF.Bottom.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Bottom.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Horizontal.get -> float\nMicrosoft.Maui.Graphics.InsetsF.InsetsF(float top, float left, float bottom, float right) -> void\nMicrosoft.Maui.Graphics.InsetsF.Left.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Left.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Right.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Right.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Top.get -> float\nMicrosoft.Maui.Graphics.InsetsF.Top.set -> void\nMicrosoft.Maui.Graphics.InsetsF.Vertical.get -> float\n```\n\n----------------------------------------\n\nTITLE: Defining IFlashlight Interface in C#\nDESCRIPTION: Defines the IFlashlight interface with methods for controlling the device's flashlight functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.IFlashlight\nMicrosoft.Maui.Devices.IFlashlight.IsSupportedAsync() -> System.Threading.Tasks.Task<bool>!\nMicrosoft.Maui.Devices.IFlashlight.TurnOffAsync() -> System.Threading.Tasks.Task!\nMicrosoft.Maui.Devices.IFlashlight.TurnOnAsync() -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Overriding TabbedViewHandler Method for Tizen Platform\nDESCRIPTION: This method overrides TabbedViewHandler to create a Tizen-specific View implementation for MAUI tabbed views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_71\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.TabbedViewHandler.CreatePlatformView() -> Tizen.NUI.BaseComponents.View!\n```\n\n----------------------------------------\n\nTITLE: Defining HorizontalAlignment Enum in C#\nDESCRIPTION: Enumeration defining horizontal alignment options for text and other elements in MAUI graphics.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.HorizontalAlignment\nMicrosoft.Maui.Graphics.HorizontalAlignment.Center = 1 -> Microsoft.Maui.Graphics.HorizontalAlignment\nMicrosoft.Maui.Graphics.HorizontalAlignment.Justified = 3 -> Microsoft.Maui.Graphics.HorizontalAlignment\nMicrosoft.Maui.Graphics.HorizontalAlignment.Left = 0 -> Microsoft.Maui.Graphics.HorizontalAlignment\nMicrosoft.Maui.Graphics.HorizontalAlignment.Right = 2 -> Microsoft.Maui.Graphics.HorizontalAlignment\n```\n\n----------------------------------------\n\nTITLE: CanvasState Utility Method in MAUI Graphics\nDESCRIPTION: Static utility method in Microsoft.Maui.Graphics.CanvasState to calculate the scale factor from a transformation matrix.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.CanvasState.GetLengthScale(System.Numerics.Matrix3x2 matrix) -> float\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString Method for Insets Class in C#\nDESCRIPTION: This snippet overrides the ToString method for the Insets class to produce a string representation of the inset values.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Insets.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Media Picker Interfaces\nDESCRIPTION: Interfaces and methods for capturing and selecting media files across different platforms in .NET MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nIMediaPicker.CapturePhotoAsync(MediaPickerOptions? options = null) -> Task<FileResult?>\n```\n\n----------------------------------------\n\nTITLE: Overriding Equals Method for Insets Class in C#\nDESCRIPTION: This snippet provides an override for the Equals method in the Insets class to compare inset instances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.Insets.Equals(object obj) -> bool\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive to enable nullable reference type checking in C#, which helps catch potential null reference errors at compile time. This is commonly used at the top of C# files to enforce stricter null checking.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Directive to enable nullable reference type checking in C#. This helps catch potential null reference errors at compile time by making all reference types non-nullable by default.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Setting Fill Paint in PictureCanvas\nDESCRIPTION: This snippet covers methods for setting fill paint in the PictureCanvas class, allowing for multiple configurations based on points or rectangles.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.PointF point1, Microsoft.Maui.Graphics.PointF point2) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.SetFillPaint(Microsoft.Maui.Graphics.Paint paint, Microsoft.Maui.Graphics.RectF rectangle) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Overlay Elements Collection\nDESCRIPTION: Provides access to a read-only collection of elements within the overlay, useful for managing UI complexity.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_65\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindowOverlay.WindowElements.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Maui.IWindowOverlayElement!>!\n```\n\n----------------------------------------\n\nTITLE: Overriding ToString Method for GradientPaint Class in C#\nDESCRIPTION: This snippet overrides the ToString method in the GradientPaint class for returning a string representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n~override Microsoft.Maui.Graphics.GradientPaint.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: Compiler directive that enables nullable reference type checks for the current file scope. This improves null safety by making reference types non-nullable by default.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Invalidating W2DGraphicsView\nDESCRIPTION: This method is responsible for requesting a redraw of the W2D graphics view. It plays a vital role in refreshing the visual output based on updated properties.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Win2D/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Graphics.Win2D.W2DGraphicsView.Invalidate() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IDatePicker Interface in C#\nDESCRIPTION: The IDatePicker interface allows the user to select dates, providing properties for maximum and minimum date constraints, as well as date formatting options.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IDatePicker.Date.get -> System.DateTime\nMicrosoft.Maui.IDatePicker.Date.set -> void\nMicrosoft.Maui.IDatePicker.Format.get -> string!\nMicrosoft.Maui.IDatePicker.Format.set -> void\nMicrosoft.Maui.IDatePicker.MaximumDate.get -> System.DateTime\nMicrosoft.Maui.IDatePicker.MinimumDate.get -> System.DateTime\n```\n\n----------------------------------------\n\nTITLE: Building without Workload Packs (CI)\nDESCRIPTION: This dotnetcli snippet shows how to build the project without installing workload packs in a CI environment. This is done by using the `-p:InstallWorkloadPacks=false` parameter with the `dotnet build` command.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Workload/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\n$ dotnet build src/DotNet/DotNet.csproj -p:InstallWorkloadPacks=false\n```\n\n----------------------------------------\n\nTITLE: Connectivity Network Access\nDESCRIPTION: Enumeration and interfaces for tracking network connectivity and connection profiles in .NET MAUI\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nNetworkAccess.Internet = 4 -> NetworkAccess\n```\n\n----------------------------------------\n\nTITLE: Defining Core MAUI Enums\nDESCRIPTION: Enumeration definitions for core MAUI types including Aspect and ClearButtonVisibility. These enums control UI element behavior and appearance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Aspect.AspectFill = 1 -> Microsoft.Maui.Aspect\nMicrosoft.Maui.Aspect.AspectFit = 0 -> Microsoft.Maui.Aspect\nMicrosoft.Maui.Aspect.Center = 3 -> Microsoft.Maui.Aspect\nMicrosoft.Maui.Aspect.Fill = 2 -> Microsoft.Maui.Aspect\n\nMicrosoft.Maui.ClearButtonVisibility.Never = 0 -> Microsoft.Maui.ClearButtonVisibility\nMicrosoft.Maui.ClearButtonVisibility.WhileEditing = 1 -> Microsoft.Maui.ClearButtonVisibility\n```\n\n----------------------------------------\n\nTITLE: StyleableElement Class Methods\nDESCRIPTION: Core methods and properties for the StyleableElement class that provides styling capabilities to MAUI controls\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.StyleableElement.class.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.class.set -> void\nMicrosoft.Maui.Controls.StyleableElement.Style.set -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleableElement() -> void\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.get -> System.Collections.Generic.IList<string!>!\nMicrosoft.Maui.Controls.StyleableElement.StyleClass.set -> void\n```\n\n----------------------------------------\n\nTITLE: Removing MenuBarItem in C#\nDESCRIPTION: Method to remove a MenuBarItem from the MenuBarHandler.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: Mapping FlyoutView Properties in C#\nDESCRIPTION: Static methods for mapping FlyoutView properties in MAUI. Includes methods for mapping flyout behavior, width, and presentation state.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_92\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapDetail(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyout(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyoutBehavior(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapFlyoutWidth(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapIsGestureEnabled(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapIsPresented(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IFlyoutView!, Microsoft.Maui.Handlers.IFlyoutViewHandler!>!\nstatic Microsoft.Maui.Handlers.FlyoutViewHandler.MapToolbar(Microsoft.Maui.Handlers.IFlyoutViewHandler! handler, Microsoft.Maui.IFlyoutView! flyoutView) -> void\n```\n\n----------------------------------------\n\nTITLE: MenuBarHandler Static Methods in .NET MAUI\nDESCRIPTION: Static methods for the MenuBarHandler class that map operations and properties between the cross-platform IMenuBar interface and platform-specific implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_68\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapAdd(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapClear(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapInsert(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! view) -> void\nstatic Microsoft.Maui.Handlers.MenuBarHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuBar!, Microsoft.Maui.Handlers.IMenuBarHandler!>!\nstatic Microsoft.Maui.Handlers.MenuBarHandler.MapRemove(Microsoft.Maui.Handlers.IMenuBarHandler! handler, Microsoft.Maui.IMenuBar! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Image Loading from Stream in C#\nDESCRIPTION: Static method to create an IImage from a stream with specified format. This utility method helps with loading images in different formats.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Platform.PlatformImage.FromStream(System.IO.Stream stream, Microsoft.Maui.Graphics.ImageFormat format = Microsoft.Maui.Graphics.ImageFormat.Png) -> Microsoft.Maui.Graphics.IImage\n```\n\n----------------------------------------\n\nTITLE: Getting Window X Coordinate\nDESCRIPTION: Fetches the X coordinate of the window, useful for positioning UI elements relative to the window.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.IWindow.X.get -> double\n```\n\n----------------------------------------\n\nTITLE: Converting Color to Unsigned Integer in C#\nDESCRIPTION: This method converts a Color object to an unsigned integer representation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.Color.ToUint() -> uint\n```\n\n----------------------------------------\n\nTITLE: Default Template for TitleBar in C#\nDESCRIPTION: Static property DefaultTemplate in TitleBar provides a ControlTemplate that specifies the default design and layout structure for a TitleBar component, aiding consistent appearances.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Controls.TitleBar.DefaultTemplate.get -> Microsoft.Maui.Controls.ControlTemplate!\n```\n\n----------------------------------------\n\nTITLE: Using build.ps1 for .NET MAUI Template Operations\nDESCRIPTION: The build.ps1 script is used for managing .NET MAUI templates including building the source project, packing it into a .nupkg file, uninstalling previous template installations, and creating a new project based on the updated template. It provides parameters like projectType, templateVersion, templatesProjectPath, and startVsAfterBuild, each with default values allowing for customization of the build and deploy process. Expected inputs include different parameter values to tailor the execution, and outputs consist of a ready .NET MAUI project and updated templates installed locally.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Templates/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1 -projectType maui-blazor\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1 -templateVersion 1.2.3\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1 -templatesProjectPath src\\Microsoft.Maui.Templates-new.csproj\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1 -startVsAfterBuild $false\n```\n\n----------------------------------------\n\nTITLE: Constructing Skia Image from SKBitmap\nDESCRIPTION: Initializes a new Skia image object from an existing SKBitmap, facilitating connections between raw bitmap data and higher-level graphics representations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaImage.SkiaImage(SkiaSharp.SKBitmap image) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Text Attributes in C#\nDESCRIPTION: These methods extend ITextAttributes to retrieve various text properties such as bold, font name, font size, and colors. They provide a convenient way to access text styling information.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetBold(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> bool\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontName(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetFontSize(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes, float? fontSize = null) -> float\nstatic Microsoft.Maui.Graphics.Text.TextAttributeExtensions.GetForegroundColor(this Microsoft.Maui.Graphics.Text.ITextAttributes attributes) -> string\n```\n\n----------------------------------------\n\nTITLE: Application Information and Actions API\nDESCRIPTION: Interfaces for accessing application information and handling app actions\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.ApplicationModel.IAppInfo.Name.get -> string\nMicrosoft.Maui.ApplicationModel.IAppInfo.Version.get -> System.Version\nMicrosoft.Maui.ApplicationModel.IAppActions.GetAsync() -> System.Threading.Tasks.Task<IEnumerable<AppAction>>\nMicrosoft.Maui.ApplicationModel.IAppActions.SetAsync(IEnumerable<AppAction> actions) -> System.Threading.Tasks.Task\n```\n\n----------------------------------------\n\nTITLE: Counting Writer for Text in C#\nDESCRIPTION: This snippet provides a constructor for the CountingWriter class that wraps a TextWriter, potentially to count characters written.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Text.CountingWriter.CountingWriter(System.IO.TextWriter writer) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Flex Align Content\nDESCRIPTION: Defines enums related to aligning content within a flex layout, facilitating flexible and responsive UI designs.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.Center = 2 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.End = 4 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceAround = 6 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceBetween = 5 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.SpaceEvenly = 7 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.Start = 3 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Maui.Layouts.FlexAlignContent.Stretch = 1 -> Microsoft.Maui.Layouts.FlexAlignContent\n```\n\n----------------------------------------\n\nTITLE: MissingMapperAttribute Class in C#\nDESCRIPTION: Definition of MissingMapperAttribute class used to annotate missing mappers in the codebase. It includes constructors and properties for providing descriptions of missing mappers.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.MissingMapperAttribute\nMicrosoft.Maui.MissingMapperAttribute.Description.get -> string?\nMicrosoft.Maui.MissingMapperAttribute.Description.set -> void\nMicrosoft.Maui.MissingMapperAttribute.MissingMapperAttribute() -> void\nMicrosoft.Maui.MissingMapperAttribute.MissingMapperAttribute(string! description) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Animation Class Definition\nDESCRIPTION: Core animation class implementation with properties and methods for managing animations including duration, easing, progress tracking and lifecycle management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Animations.Animation {\n    Animation();\n    Animation(Action<double> callback, double start = 0, double duration = 1, Easing? easing = null, Action? finished = null);\n    double Duration { get; set; }\n    Easing Easing { get; set; }\n    double Progress { get; set; }\n    bool IsPaused { get; }\n    void Pause();\n    void Resume();\n    void Tick(double milliseconds);\n}\n```\n\n----------------------------------------\n\nTITLE: Android Resource ID Class Generation in C#\nDESCRIPTION: Example of an automatically generated R class that contains resource ID constants for Android resources. This class provides programmatic access to application resources like drawables, layouts, and strings through compile-time constants.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/samples/GraphicsTester.Android/Resources/AboutResources.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MenuBar Handler Classes in C#\nDESCRIPTION: Core class definitions for MenuBar-related handlers including MenuBarHandler, MenuBarItemHandler and MenuFlyoutHandler with their constructors and collection manipulation methods.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Handlers.MenuBarHandler.MenuBarHandler(Microsoft.Maui.IPropertyMapper! mapper, Microsoft.Maui.CommandMapper? commandMapper = null) -> void\nMicrosoft.Maui.Handlers.MenuBarHandler.Remove(Microsoft.Maui.IMenuBarItem! view) -> void\n```\n\n----------------------------------------\n\nTITLE: AbstractCanvas<TState> API - Styling Properties\nDESCRIPTION: Defines abstract styling properties for the AbstractCanvas<TState> class, including properties for setting stroke size, font size, line caps, and line joins.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.FontSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.PlatformStrokeSize.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineCap.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.StrokeLineJoin.set -> void\nabstract Microsoft.Maui.Graphics.AbstractCanvas<TState>.MiterLimit.set -> void\n```\n\n----------------------------------------\n\nTITLE: Extending UI Components for Tizen Platform in C# for Microsoft.Maui.Platform\nDESCRIPTION: This snippet defines extension methods for various UI components such as ActivityIndicator, Button, CheckBox, DatePicker, and Color for the Tizen platform in Microsoft.Maui.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateColor(this Tizen.UIExtensions.NUI.GraphicsView.ActivityIndicator! platformView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Platform.ActivityIndicatorExtensions.UpdateIsRunning(this Tizen.UIExtensions.NUI.GraphicsView.ActivityIndicator! platformView, Microsoft.Maui.IActivityIndicator! activityIndicator) -> void\nstatic Microsoft.Maui.Platform.AspectExtensions.ToPlatform(this Microsoft.Maui.Aspect aspect) -> Tizen.UIExtensions.Common.Aspect\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateCharacterSpacing(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateCornerRadius(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.IButtonStroke! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateFont(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.ITextStyle! label, Microsoft.Maui.IFontManager! fontManager) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeColor(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.IButtonStroke! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateStrokeThickness(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.IButtonStroke! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateText(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.IText! button) -> void\nstatic Microsoft.Maui.Platform.ButtonExtensions.UpdateTextColor(this Tizen.UIExtensions.NUI.Button! platformButton, Microsoft.Maui.ITextStyle! button) -> void\nstatic Microsoft.Maui.Platform.CheckBoxExtensions.UpdateForeground(this Tizen.UIExtensions.NUI.GraphicsView.CheckBox! platformCheck, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Platform.CheckBoxExtensions.UpdateIsChecked(this Tizen.UIExtensions.NUI.GraphicsView.CheckBox! platformCheck, Microsoft.Maui.ICheckBox! check) -> void\nstatic Microsoft.Maui.Platform.ColorExtensions.GetAccentColor(this Microsoft.Maui.Graphics.Color! color) -> Microsoft.Maui.Graphics.Color!\nstatic Microsoft.Maui.Platform.ColorExtensions.ToNUIColor(this Microsoft.Maui.Graphics.Color! c) -> Tizen.NUI.Color?\nstatic Microsoft.Maui.Platform.ColorExtensions.ToPlatform(this Microsoft.Maui.Graphics.Color! c) -> Tizen.UIExtensions.Common.Color\nstatic Microsoft.Maui.Platform.ColorExtensions.WithAlpha(this Microsoft.Maui.Graphics.Color! color, double alpha) -> Microsoft.Maui.Graphics.Color!\nstatic Microsoft.Maui.Platform.ColorExtensions.WithPremultiplied(this Microsoft.Maui.Graphics.Color! color, double alpha) -> Microsoft.Maui.Graphics.Color!\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateDate(this Tizen.UIExtensions.NUI.Entry! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DatePickerExtensions.UpdateFormat(this Tizen.UIExtensions.NUI.Entry! platformDatePicker, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Platform.DPExtensions.ConvertToDPFont(int pt) -> double\n```\n\n----------------------------------------\n\nTITLE: Path Arc Extensions for PathF in Microsoft.Maui.Graphics\nDESCRIPTION: Methods extending PathF to draw arcs and handle SVG arc drawing operations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Graphics.PathArcExtensions.DrawArc(this Microsoft.Maui.Graphics.PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation) -> void\nstatic Microsoft.Maui.Graphics.PathArcExtensions.SVGArcTo(this Microsoft.Maui.Graphics.PathF aTarget, float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding ShapeViewHandler Methods for Tizen Platform\nDESCRIPTION: These methods override ShapeViewHandler functionality to create platform views and set up containers for the Tizen implementation of MAUI shape views.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Maui.Handlers.ShapeViewHandler.CreatePlatformView() -> Microsoft.Maui.Platform.MauiShapeView!\noverride Microsoft.Maui.Handlers.ShapeViewHandler.SetupContainer() -> void\n```\n\n----------------------------------------\n\nTITLE: SkiaCanvasState Font Property Management\nDESCRIPTION: Provides getter and setter methods for managing the font property in a Skia canvas state, allowing font retrieval and assignment\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.get -> SkiaSharp.SKFont\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.FontFont.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing IHybridWebView Interface\nDESCRIPTION: Defines the interface for hybrid web view functionality including JavaScript evaluation and message handling\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IHybridWebView.EvaluateJavaScriptAsync(string! script) -> System.Threading.Tasks.Task<string?>!\nMicrosoft.Maui.IHybridWebView.SendRawMessage(string! rawMessage) -> void\nMicrosoft.Maui.IHybridWebView.SetInvokeJavaScriptTarget<T>(T! target) -> void\n```\n\n----------------------------------------\n\nTITLE: Text Input Extension Methods for iOS UIKit\nDESCRIPTION: Extension methods for UITextField and UITextView that manage text input properties like character spacing, cursor position, font settings, and keyboard behavior. These methods ensure consistent text input behavior between MAUI and iOS native controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateCharacterSpacing(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle) -> void\nstatic Microsoft.Maui.Platform.TextFieldExtensions.UpdateFont(this UIKit.UITextField! textField, Microsoft.Maui.ITextStyle! textStyle, Microsoft.Maui.IFontManager! fontManager) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding Accessors for AttributedText Properties in .NET MAUI\nDESCRIPTION: These overrides define accessors for the `Runs` (a list of `IAttributedTextRun` objects) and `Text` (a string) properties of the `AttributedText` and `MutableAttributedText` classes in Microsoft.Maui.Graphics.Text.  These are read-only accessors, indicated by `.get`.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\n\"~override Microsoft.Maui.Graphics.Text.AttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n~override Microsoft.Maui.Graphics.Text.AttributedText.Text.get -> string\n~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Runs.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Maui.Graphics.Text.IAttributedTextRun>\n~override Microsoft.Maui.Graphics.Text.MutableAttributedText.Text.get -> string\"\n```\n\n----------------------------------------\n\nTITLE: Font Handling in MAUI\nDESCRIPTION: Static methods and operators for font manipulation including system fonts and custom font creation.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Font.OfSize(string? name, double size, Microsoft.Maui.FontWeight weight = Microsoft.Maui.FontWeight.Regular, Microsoft.Maui.FontSlant fontSlant = Microsoft.Maui.FontSlant.Default, bool enableScaling = true) -> Microsoft.Maui.Font\n```\n\n----------------------------------------\n\nTITLE: Getting String Size in PictureCanvas in .NET MAUI\nDESCRIPTION: This method retrieves the size of a given string based on font parameters in the PictureCanvas.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_61\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize, Microsoft.Maui.Graphics.HorizontalAlignment horizontalAlignment, Microsoft.Maui.Graphics.VerticalAlignment verticalAlignment) -> Microsoft.Maui.Graphics.SizeF\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.PictureCanvas.GetStringSize(string value, Microsoft.Maui.Graphics.IFont font, float fontSize) -> Microsoft.Maui.Graphics.SizeF\n```\n\n----------------------------------------\n\nTITLE: Resetting Skia Canvas State with Paint Objects\nDESCRIPTION: Method to reset the canvas state by providing font and paint configurations, enabling comprehensive graphics context management\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics.Skia/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Skia.SkiaCanvasState.Reset(SkiaSharp.SKPaint fontPaint, SkiaSharp.SKFont fontFont, SkiaSharp.SKPaint fillPaint, SkiaSharp.SKPaint strokePaint) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformWebViewProcessTerminatedEventArgs Class\nDESCRIPTION: Defines event arguments for WebView process termination events, providing access to the underlying WebView2 components and events.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-windows/PublicAPI.Unshipped.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs.CoreWebView2ProcessFailedEventArgs.get -> Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs!\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs.Sender.get -> Microsoft.Web.WebView2.Core.CoreWebView2!\n```\n\n----------------------------------------\n\nTITLE: Defining HybridWebView Handler Interface\nDESCRIPTION: Interface definition for handling hybrid web views in MAUI, including core functionality for JavaScript interaction and message passing.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Unshipped.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IHybridWebView {\n    string? DefaultFile { get; }\n    string? HybridRoot { get; }\n    Task<string?> EvaluateJavaScriptAsync(string script);\n    Task<TReturnType?> InvokeJavaScriptAsync<TReturnType>(string methodName, JsonTypeInfo<TReturnType> returnTypeJsonTypeInfo, object?[]? paramValues = null, JsonTypeInfo?[]? paramJsonTypeInfos = null);\n    void SendRawMessage(string rawMessage);\n    void RawMessageReceived(string rawMessage);\n}\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutItem and MenuFlyoutSeparator Handler Methods in .NET MAUI\nDESCRIPTION: Static API methods for the MenuFlyoutItemHandler and MenuFlyoutSeparatorHandler classes. These handlers define the property mappers and command mappers for menu flyout items and separators.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_116\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutItem!, Microsoft.Maui.Handlers.IMenuFlyoutItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSeparatorHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSeparator!, Microsoft.Maui.Handlers.IMenuFlyoutSeparatorHandler!>!\n```\n\n----------------------------------------\n\nTITLE: Defining Static Properties for MAUI Controls in C#\nDESCRIPTION: Declares static readonly properties for various MAUI controls including TitleBar, HybridWebView, and Window in Microsoft.Maui.Controls.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/netstandard/PublicAPI.Unshipped.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.Maui.Controls.HandlerProperties.DisconnectPolicyProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.HybridWebView.HybridRootProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.StyleableElement.StyleProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.ContentProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.ForegroundColorProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.IconProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.LeadingContentProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.SubtitleProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.TitleProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.TitleBar.TrailingContentProperty -> Microsoft.Maui.Controls.BindableProperty!\nstatic readonly Microsoft.Maui.Controls.Window.TitleBarProperty -> Microsoft.Maui.Controls.BindableProperty!\n```\n\n----------------------------------------\n\nTITLE: DatePicker Handler Property Mappings\nDESCRIPTION: Static methods for mapping date picker properties like background, font, format, date ranges and text color between the MAUI abstraction and platform implementations.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.DatePickerHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IDatePicker!, Microsoft.Maui.Handlers.IDatePickerHandler!>!\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapBackground(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFont(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\nstatic Microsoft.Maui.Handlers.DatePickerHandler.MapFormat(Microsoft.Maui.Handlers.IDatePickerHandler! handler, Microsoft.Maui.IDatePicker! datePicker) -> void\n```\n\n----------------------------------------\n\nTITLE: Data Transfer Static Methods in C#\nDESCRIPTION: Static method declarations for data transfer capabilities including clipboard and share functionality\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard.GetTextAsync() -> System.Threading.Tasks.Task<string?>!\nstatic Microsoft.Maui.ApplicationModel.DataTransfer.Share.RequestAsync(string! text) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Setting Background and Foreground Colors in Paint\nDESCRIPTION: This snippet describes the BackgroundColor and ForegroundColor properties in the Paint class, which allow for the configuration of the paint's appearance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.BackgroundColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.BackgroundColor.set -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.ForegroundColor.get -> Microsoft.Maui.Graphics.Color\n```\n\nLANGUAGE: csharp\nCODE:\n```\n~Microsoft.Maui.Graphics.Paint.ForegroundColor.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining VisualTreeChangeType enum in C#\nDESCRIPTION: Declares an enumeration for visual tree change types, including Add and Remove.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.VisualTreeChangeType\nMicrosoft.Maui.VisualTreeChangeType.Add = 0 -> Microsoft.Maui.VisualTreeChangeType\nMicrosoft.Maui.VisualTreeChangeType.Remove = 1 -> Microsoft.Maui.VisualTreeChangeType\n```\n\n----------------------------------------\n\nTITLE: IStreamImageSource Interface Definition in .NET MAUI\nDESCRIPTION: Interface for image sources that provide content via a stream. Defines a method to obtain a stream asynchronously with cancellation support, allowing for dynamic image loading from various sources.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-windows/PublicAPI.Shipped.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.IStreamImageSource\nMicrosoft.Maui.IStreamImageSource.GetStreamAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!\n```\n\n----------------------------------------\n\nTITLE: PlatformWebViewProcessTerminatedEventArgs Class Definition in C#\nDESCRIPTION: Event arguments class for handling WebView process termination events. Used to provide platform-specific information when a WebView process terminates.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs\nMicrosoft.Maui.Controls.PlatformWebViewProcessTerminatedEventArgs.PlatformWebViewProcessTerminatedEventArgs() -> void\n```\n\n----------------------------------------\n\nTITLE: WinUI Window AppWindow Access\nDESCRIPTION: Deprecated direct AppWindow property access due to null safety concerns. Use GetAppWindow() method and implement null checks for safer access.\nSOURCE: https://github.com/dotnet/maui/blob/main/eng/BannedSymbols.txt#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.UI.Xaml.Window.AppWindow\n```\n\n----------------------------------------\n\nTITLE: ContentViewHandler Static Members\nDESCRIPTION: These static members define mappers and mapping methods for the ContentViewHandler class, handling the content of a ContentView.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ContentViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!\nstatic Microsoft.Maui.Handlers.ContentViewHandler.MapContent(Microsoft.Maui.Handlers.IContentViewHandler! handler, Microsoft.Maui.IContentView! page) -> void\nstatic Microsoft.Maui.Handlers.ContentViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IContentView!, Microsoft.Maui.Handlers.IContentViewHandler!>!\n```\n\n----------------------------------------\n\nTITLE: iOS Application and Window Management Extensions in .NET MAUI\nDESCRIPTION: Extensions for iOS application delegates to manage platform windows, user activities, and UI styling. These methods bridge between MAUI's cross-platform abstractions and iOS-specific functionality for window creation and management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.MauiUIApplicationDelegate.Current.get -> Microsoft.Maui.MauiUIApplicationDelegate!\nstatic Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, UIKit.UIApplication! uiApplication, Foundation.NSDictionary! launchOptions) -> void\nstatic Microsoft.Maui.Platform.ApplicationExtensions.CreatePlatformWindow(this UIKit.IUIWindowSceneDelegate! sceneDelegate, Microsoft.Maui.IApplication! application, UIKit.UIScene! scene, UIKit.UISceneSession! session, UIKit.UISceneConnectionOptions! connectionOptions) -> void\nstatic Microsoft.Maui.Platform.ApplicationExtensions.RequestNewWindow(this UIKit.IUIApplicationDelegate! platformApplication, Microsoft.Maui.IApplication! application, Microsoft.Maui.Handlers.OpenWindowRequest? args) -> void\nstatic Microsoft.Maui.Platform.ApplicationExtensions.ToUserActivity(this Microsoft.Maui.IPersistedState? state, string! userActivityType) -> Foundation.NSUserActivity!\nstatic Microsoft.Maui.Platform.ApplicationExtensions.UpdateUserInterfaceStyle(this Microsoft.Maui.IApplication! application) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IAccelerometer Interface in C#\nDESCRIPTION: Defines the IAccelerometer interface for accessing accelerometer functionality.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Devices.Sensors.IAccelerometer\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsMonitoring.get -> bool\nMicrosoft.Maui.Devices.Sensors.IAccelerometer.IsSupported.get -> bool\n```\n\n----------------------------------------\n\nTITLE: MenuFlyoutSubItemHandler Static Methods and Mappers in .NET MAUI\nDESCRIPTION: Static methods and property mappers for the MenuFlyoutSubItemHandler class in Microsoft.Maui that handle menu element operations like Add, Remove, Insert, and Clear.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-tizen/PublicAPI.Shipped.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining MenuFlyoutSubItemHandler Mappers and Commands in C#\nDESCRIPTION: This snippet declares static properties and methods for the MenuFlyoutSubItemHandler class, including mappers for various actions like Add, Clear, Insert, and Remove. It also defines a property mapper and a command mapper for MenuFlyoutSubItem elements.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-ios/PublicAPI.Shipped.txt#2025-04-21_snippet_96\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapAdd(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapClear(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapInsert(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapIsEnabled(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuFlyoutSubItem! view) -> void\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IMenuFlyoutSubItem!, Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler!>!\nstatic Microsoft.Maui.Handlers.MenuFlyoutSubItemHandler.MapRemove(Microsoft.Maui.Handlers.IMenuFlyoutSubItemHandler! handler, Microsoft.Maui.IMenuElement! layout, object? arg) -> void\n```\n\n----------------------------------------\n\nTITLE: MAUI Resource Dictionary Helper Method\nDESCRIPTION: Static helper method for loading resources from a source URI into a ResourceDictionary instance.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Xaml/PublicAPI/net-maccatalyst/PublicAPI.Unshipped.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n~static Microsoft.Maui.Controls.Xaml.ResourceDictionaryHelpers.LoadFromSource(Microsoft.Maui.Controls.ResourceDictionary rd, System.Uri source, string resourcePath, System.Reflection.Assembly assembly, System.Xml.IXmlLineInfo lineInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting DOTNET_DiagnosticPorts for .NET MAUI Debugging\nDESCRIPTION: This configuration specifies the diagnostic ports for a .NET MAUI application. It sets the DOTNET_DiagnosticPorts environment variable to use the IP address 10.0.2.2 on port 9001, with the 'suspend' option enabled.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/samples/Controls.Sample.Profiling/Platforms/Android/environment.emulator.txt#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nDOTNET_DiagnosticPorts=10.0.2.2:9001,suspend\n```\n\n----------------------------------------\n\nTITLE: TitleBar Constants Definition in C#\nDESCRIPTION: Defines constant string values used by the TitleBar component for identifying states and parts in the visual tree. These constants are used for template binding and visual state management.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/src/Core/PublicAPI/net-tizen/PublicAPI.Unshipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Maui.Controls.TitleBar.ContentHiddenState = \"ContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.ContentVisibleState = \"ContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconHiddenState = \"IconCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.IconVisibleState = \"IconVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingHiddenState = \"LeadingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.LeadingVisibleState = \"LeadingContentVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleHiddenState = \"SubtitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.SubtitleVisibleState = \"SubtitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TemplateRootName = \"PART_Root\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarActiveState = \"TitleBarTitleActive\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarContent = \"PART_Content\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarIcon = \"PART_Icon\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarInactiveState = \"TitleBarTitleInactive\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarLeading = \"PART_LeadingContent\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarSubtitle = \"PART_Subtitle\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarTitle = \"PART_Title\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleBarTrailing = \"PART_TrailingContent\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleHiddenState = \"TitleCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TitleVisibleState = \"TitleVisible\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TrailingHiddenState = \"TrailingContentCollapsed\" -> string!\nconst Microsoft.Maui.Controls.TitleBar.TrailingVisibleState = \"TrailingContentVisible\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining Preferences API in C#\nDESCRIPTION: Declares static methods for the Preferences class in the Microsoft.Maui.Storage namespace. Includes methods for storing, retrieving, and managing key-value pairs in app preferences.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Essentials/src/PublicAPI/net-maccatalyst/PublicAPI.Shipped.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Storage.Preferences.Clear() -> void\nstatic Microsoft.Maui.Storage.Preferences.Clear(string? sharedName) -> void\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.ContainsKey(string! key) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Default.get -> Microsoft.Maui.Storage.IPreferences!\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue, string? sharedName) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, bool defaultValue) -> bool\nstatic Microsoft.Maui.Storage.Preferences.Get(string! key, double defaultValue, string? sharedName) -> double\n```\n\n----------------------------------------\n\nTITLE: Reading Android Asset using AssetManager in C#\nDESCRIPTION: This C# code snippet demonstrates how to access and open an asset file named \"my_asset.txt\" that has been included in the Android application package. It utilizes the `Assets.Open()` method to obtain an `InputStream` for reading the asset's content.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/samples/GraphicsTester.Android/Assets/AboutAssets.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReadAsset : Activity\n{\n\tprotected override void OnCreate (Bundle bundle)\n\t{\n\t\tbase.OnCreate (bundle);\n\n\t\tInputStream input = Assets.Open (\"my_asset.txt\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: WindowOverlay HandleUIChange Method in C#\nDESCRIPTION: Virtual method that processes UI changes within the window overlay, typically triggering a refresh or redraw.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/net-android/PublicAPI.Shipped.txt#2025-04-21_snippet_194\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Maui.WindowOverlay.HandleUIChange() -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring ScrollView Mapper and Handler in C# for MAUI\nDESCRIPTION: Static properties and methods for configuring the command mapper, property mapper, and mapping various properties of a ScrollView control in MAUI.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Core/src/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.CommandMapper -> Microsoft.Maui.CommandMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContent(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapContentSize(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapHorizontalScrollBarVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapOrientation(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.Mapper -> Microsoft.Maui.IPropertyMapper<Microsoft.Maui.IScrollView!, Microsoft.Maui.Handlers.IScrollViewHandler!>!\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapRequestScrollTo(Microsoft.Maui.Handlers.IScrollViewHandler! handler, Microsoft.Maui.IScrollView! scrollView, object? args) -> void\nstatic Microsoft.Maui.Handlers.ScrollViewHandler.MapVerticalScrollBarVisibility(Microsoft.Maui.IViewHandler! handler, Microsoft.Maui.IScrollView! scrollView) -> void\n```\n\n----------------------------------------\n\nTITLE: Polyline Map Element Class (C#)\nDESCRIPTION: The Polyline class represents a line on a map defined by a collection of locations. It implements IList<Location> for managing the points that make up the line.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Controls/Maps/src/PublicAPI/net/PublicAPI.Shipped.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Controls.Maps.Polyline\nMicrosoft.Maui.Controls.Maps.Polyline.Polyline() -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Geopath.get -> System.Collections.Generic.IList<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polyline.Count.get -> int\nMicrosoft.Maui.Controls.Maps.Polyline.IsReadOnly.get -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.this[int index].get -> Microsoft.Maui.Devices.Sensors.Location!\nMicrosoft.Maui.Controls.Maps.Polyline.this[int index].set -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Add(Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Clear() -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Contains(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.CopyTo(Microsoft.Maui.Devices.Sensors.Location![]! array, int arrayIndex) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Maui.Devices.Sensors.Location!>!\nMicrosoft.Maui.Controls.Maps.Polyline.IndexOf(Microsoft.Maui.Devices.Sensors.Location! item) -> int\nMicrosoft.Maui.Controls.Maps.Polyline.Insert(int index, Microsoft.Maui.Devices.Sensors.Location! item) -> void\nMicrosoft.Maui.Controls.Maps.Polyline.Remove(Microsoft.Maui.Devices.Sensors.Location! item) -> bool\nMicrosoft.Maui.Controls.Maps.Polyline.RemoveAt(int index) -> void\n```\n\n----------------------------------------\n\nTITLE: RadialGradientPaint Class Implementation in C#\nDESCRIPTION: Defines the RadialGradientPaint class in Microsoft.Maui.Graphics for creating radial gradient fills. Provides constructors and properties to specify the center point and radius of the gradient.\nSOURCE: https://github.com/dotnet/maui/blob/main/src/Graphics/src/Graphics/PublicAPI/netstandard/PublicAPI.Shipped.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Maui.Graphics.RadialGradientPaint\nMicrosoft.Maui.Graphics.RadialGradientPaint.Center.get -> Microsoft.Maui.Graphics.Point\nMicrosoft.Maui.Graphics.RadialGradientPaint.Center.set -> void\nMicrosoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint() -> void\nMicrosoft.Maui.Graphics.RadialGradientPaint.RadialGradientPaint(Microsoft.Maui.Graphics.Point center, double radius) -> void\nMicrosoft.Maui.Graphics.RadialGradientPaint.Radius.get -> double\nMicrosoft.Maui.Graphics.RadialGradientPaint.Radius.set -> void\n```"
  }
]