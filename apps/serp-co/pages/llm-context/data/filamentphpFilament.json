[
  {
    "owner": "filamentphp",
    "repo": "filament",
    "content": "TITLE: Storing Table State in Query String - PHP\nDESCRIPTION: This snippet demonstrates how to use Livewire attributes to store the table's filters, sorting, search, and pagination state in the URL query string. This allows users to access the same table state across requests. It requires the `Livewire\\Attributes\\Url` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Attributes\\Url;\n\n#[Url]\npublic bool $isTableReordering = false;\n\n/**\n * @var array<string, mixed> | null\n */\n#[Url]\npublic ?array $tableFilters = null;\n\n#[Url]\npublic ?string $tableGrouping = null;\n\n#[Url]\npublic ?string $tableGroupingDirection = null;\n\n/**\n * @var ?string\n */\n#[Url]\npublic $tableSearch = '';\n\n#[Url]\npublic ?string $tableSortColumn = null;\n\n#[Url]\npublic ?string $tableSortDirection = null;\n```\n\n----------------------------------------\n\nTITLE: Defining a Filament Form in Livewire (PHP)\nDESCRIPTION: This snippet shows how to define a Filament form within a Livewire component.  It implements the `HasForms` interface, uses the `InteractsWithForms` trait, defines a `$data` property to store the form's state, and uses the `form()` method to define the form's schema.  It also demonstrates how to initialize the form in `mount()` and access the validated data in `create()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse App\\Models\\Post;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Filament\\Forms\\Form;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass CreatePost extends Component implements HasForms\n{\n    use InteractsWithForms;\n    \n    public ?array $data = [];\n    \n    public function mount(): void\n    {\n        $this->form->fill();\n    }\n    \n    public function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                TextInput::make('title')\n                    ->required(),\n                MarkdownEditor::make('content'),\n                // ...\n            ])\n            ->statePath('data');\n    }\n    \n    public function create(): void\n    {\n        dd($this->form->getState());\n    }\n    \n    public function render(): View\n    {\n        return view('livewire.create-post');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Record Creation - Filament - PHP\nDESCRIPTION: This code snippet shows how to customize the record creation process in Filament by overriding the `handleRecordCreation()` method.  This method allows you to control exactly how the model is created. It receives the validated form data and returns a new model instance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nprotected function handleRecordCreation(array $data): Model\n{\n    return static::getModel()::create($data);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Deletes to a Filament Table (PHP)\nDESCRIPTION: This code snippet shows how to add soft deleting functionality to an existing Filament table. It includes adding a trashed filter and actions for deleting, force deleting, and restoring records.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/06-deleting-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->filters([\n            Tables\\Filters\\TrashedFilter::make(),\n            // ...\n        ])\n        ->actions([\n            // You may add these actions to your table if you're using a simple\n            // resource, or you just want to be able to delete records without\n            // leaving the table.\n            Tables\\Actions\\DeleteAction::make(),\n            Tables\\Actions\\ForceDeleteAction::make(),\n            Tables\\Actions\\RestoreAction::make(),\n            // ...\n        ])\n        ->bulkActions([\n            Tables\\Actions\\BulkActionGroup::make([\n                Tables\\Actions\\DeleteBulkAction::make(),\n                Tables\\Actions\\ForceDeleteBulkAction::make(),\n                Tables\\Actions\\RestoreBulkAction::make(),\n                // ...\n            ]),\n        ]);\n}\n\npublic static function getEloquentQuery(): Builder\n{\n    return parent::getEloquentQuery()\n        ->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form-Based Action in Filament PHP\nDESCRIPTION: This code snippet shows how to create a Filament action 'sendEmail' that opens a modal with a form to collect email subject and body. Upon form submission, the action sends an email to the client using the provided subject and body. It utilizes Filament's form components and the Illuminate Mail facade.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/02-overview.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Mail;\n\nAction::make('sendEmail')\n    ->form([\n        TextInput::make('subject')->required(),\n        RichEditor::make('body')->required(),\n    ])\n    ->action(function (array $data) {\n        Mail::to($this->client)\n            ->send(new GenericEmail(\n                subject: $data['subject'],\n                body: $data['body'],\n            ));\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing a Wizard Component with Steps in PHP\nDESCRIPTION: This snippet initializes a Wizard component in Filament forms, defining three steps: 'Order', 'Delivery', and 'Billing'. Each step contains a schema defining the form fields for that step. This provides a structured approach to breaking down complex forms into manageable steps.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    Wizard\\Step::make('Order')\n        ->schema([\n            // ...\n        ]),\n    Wizard\\Step::make('Delivery')\n        ->schema([\n            // ...\n        ]),\n    Wizard\\Step::make('Billing')\n        ->schema([\n            // ...\n        ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Input Field in Filament Form\nDESCRIPTION: This code snippet demonstrates how to create a basic text input field in a Filament form using the `TextInput` component.  The `make()` method is used to define the field's name, which corresponds to a property on the Livewire component.  The field will be rendered within the form schema.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n```\n\n----------------------------------------\n\nTITLE: Setting Tenant Label in Filament with PHP\nDESCRIPTION: This code snippet demonstrates how to implement the `HasCurrentTenantLabel` interface on a tenant model (e.g., `Team`) to display a custom label in the tenant switcher. The `getCurrentTenantLabel()` method should return the desired label string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\HasCurrentTenantLabel;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Team extends Model implements HasCurrentTenantLabel\n{\n    // ...\n\n    public function getCurrentTenantLabel(): string\n    {\n        return 'Active team';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saving Form Data to a Model (PHP)\nDESCRIPTION: This shows how to save the form's data to a model using Eloquent.  It utilizes the `Post::create()` method to create a new post record in the database using the validated form data retrieved by `$this->form->getState()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\npublic function create(): void\n{\n    Post::create($this->form->getState());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a field based on another field's value\nDESCRIPTION: This code snippet demonstrates how to automatically update a field's value based on changes to another field using the `afterStateUpdated()` method and a closure. The dependent field must be set to `live()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Set;\nuse Illuminate\\Support\\Str;\n\n[\n    TextInput::make('title')\n        ->required()\n        ->maxLength(255)\n        ->live()\n        ->afterStateUpdated(function (Set $set, $state) {\n            $set('slug', Str::slug($state));\n        }),\n    TextInput::make('slug')\n        ->required()\n        ->maxLength(255),\n]\n```\n\n----------------------------------------\n\nTITLE: Discovering Clusters in Filament Panel Configuration (PHP)\nDESCRIPTION: This code snippet demonstrates how to register the location of cluster classes within a Filament panel's configuration. It uses the `discoverClusters()` method to specify the directory and namespace where cluster classes are located, allowing Filament to automatically load and manage them. This is a crucial step before creating and using clusters in your Filament panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/10-clusters.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\\\Filament\\\\Resources')\n        ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\\\Filament\\\\Pages')\n        ->discoverClusters(in: app_path('Filament/Clusters'), for: 'App\\\\Filament\\\\Clusters');\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating with a HasMany Relationship - PHP\nDESCRIPTION: This code snippet shows how to integrate a repeater with a `HasMany` Eloquent relationship using the `relationship()` method. Filament will automatically load and save data from/to the relationship. If no relationship name is passed to `relationship()`, Filament will use the field name as the relationship name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files\nDESCRIPTION: This snippet demonstrates how to enable multiple file uploads using the `multiple()` method. This allows users to select and upload multiple files at once. The URLs of the uploaded files are stored as a JSON array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n```\n\n----------------------------------------\n\nTITLE: Creating Observer for Setting Team ID on Model Creation\nDESCRIPTION: This code snippet shows how to create an observer to automatically set the `team_id` on a model when it's being created. It checks if a user is authenticated and then assigns the user's `team_id` to the model's `team_id` attribute. This requires a `team_id` column in the model's table or a `team` relationship.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostObserver\n{\n    public function creating(Post $post): void\n    {\n        if (auth()->hasUser()) {\n            $post->team_id = auth()->user()->team_id;\n            // or with a `team` relationship defined:\n            $post->team()->associate(auth()->user()->team);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Relation Manager in Resource (Filament)\nDESCRIPTION: This code snippet registers the newly created relation manager within the `getRelations()` method of the PatientResource. It is essential for the relation manager to be displayed on the edit page of the PatientResource. The relation manager is accessed through its class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\PatientResource\\RelationManagers;\n\npublic static function getRelations(): array\n{\n    return [\n        RelationManagers\\TreatmentsRelationManager::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Confirmation Modal for Delete Action (PHP)\nDESCRIPTION: This snippet demonstrates how to require confirmation before executing a delete action in Filament PHP. It uses the `requiresConfirmation()` method to display a modal asking the user to confirm the action.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n```\n\n----------------------------------------\n\nTITLE: Setting up Tenancy: Specifying the Tenant Model in Filament\nDESCRIPTION: This snippet demonstrates how to specify the tenant model (e.g., `Team`) in the Filament configuration. This is a crucial step in setting up Filament's tenancy system, enabling the application to distinguish between different tenants.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Export Chunk Size (PHP)\nDESCRIPTION: This code shows how to change the chunk size for exporting CSV files using the `chunkSize()` method on the `ExportAction`. This can be useful for managing memory usage and preventing timeout issues when exporting large files.  The default is 100.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->chunkSize(250)\n```\n\n----------------------------------------\n\nTITLE: Customize Relation Manager Form (Filament)\nDESCRIPTION: This snippet customizes the form within the relation manager, defining the fields that can be edited for related records. It uses Filament's form builder to create a text input field for the 'description' attribute.  The form expects a Filament\\Forms\\Form instance as input and returns a configured Form instance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            Forms\\Components\\TextInput::make('description')\n                ->required()\n                ->maxLength(255),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Register New Tenant Menu Items in Filament\nDESCRIPTION: This code shows how to register new items to the tenant menu in Filament using the `tenantMenuItems()` method in the panel configuration. It includes defining the label, URL, and icon for the menu item.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\nuse Filament\\Navigation\\MenuItem;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            MenuItem::make()\n                ->label('Settings')\n                ->url(fn (): string => Settings::getUrl())\n                ->icon('heroicon-m-cog-8-tooth'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency in a Text Column using Filament PHP\nDESCRIPTION: These code snippets demonstrate how to format monetary values in a TextColumn using the `money()` method. You can specify the currency, divide the value before formatting, and customize the locale. The final example shows setting a default locale in a service provider.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR', divideBy: 100)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->money('EUR', locale: 'nl')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\nTable::$defaultNumberLocale = 'nl';\n```\n\n----------------------------------------\n\nTITLE: Editing Selected Option in Modal - Filament PHP\nDESCRIPTION: This code illustrates how to define a custom form that can be used to edit the selected record and save it back to the `BelongsTo` relationship. The `editOptionForm()` method opens a modal containing the form, allowing the user to modify the related record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->editOptionForm([\n        Forms\\Components\\TextInput::make('name')\n            ->required(),\n        Forms\\Components\\TextInput::make('email')\n            ->required()\n            ->email(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Input Type for Text Input\nDESCRIPTION: This snippet showcases how to set the HTML input type for a text input field using methods like `email()`, `numeric()`, `integer()`, `password()`, `tel()`, or `url()`. These methods also often provide built-in validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('text')\n    ->email() // or\n    ->numeric() // or\n    ->integer() // or\n    ->password() // or\n    ->tel() // or\n    ->url()\n```\n\n----------------------------------------\n\nTITLE: Adding a Datalist for Autocomplete Suggestions\nDESCRIPTION: This code snippet demonstrates adding a datalist to a text input to provide autocomplete suggestions to the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nTextInput::make('manufacturer')\n    ->datalist([\n        'BMW',\n        'Ford',\n        'Mercedes-Benz',\n        'Porsche',\n        'Toyota',\n        'Tesla',\n        'Volkswagen',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Integrating with Eloquent Relationship - PHP\nDESCRIPTION: This code snippet demonstrates how to automatically retrieve options from a BelongsTo relationship using the `relationship()` method. The `titleAttribute` specifies the column to be used for the label of each option. Assumes the form's model is properly set up.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n```\n\n----------------------------------------\n\nTITLE: Saving Form Data to Individual Properties (PHP)\nDESCRIPTION: This shows how to save the form data directly to individual properties on the Livewire component, instead of storing them in a `$data` array. This is done by not passing a `statePath()` to the form and ensuring each field has a corresponding public property on the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Form;\n\npublic ?string $title = null;\n\npublic ?string $content = null;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            TextInput::make('title')\n                ->required(),\n            MarkdownEditor::make('content'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Option Labels - PHP\nDESCRIPTION: This snippet shows how to customize the label of each option by concatenating the first and last names using `getOptionLabelFromRecordUsing()` and ordering by first and last name. Includes searching across both first and last name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nSelect::make('author_id')\n    ->relationship(\n        name: 'author',\n        modifyQueryUsing: fn (Builder $query) => $query->orderBy('first_name')->orderBy('last_name'),\n    )\n    ->getOptionLabelFromRecordUsing(fn (Model $record) => \"{$record->first_name} {$record->last_name}\")\n    ->searchable(['first_name', 'last_name'])\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Action to Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to add a delete action to a Filament table.  This allows users to delete individual records directly from the table view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/06-deleting-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->actions([\n            // ...\n            Tables\\Actions\\DeleteAction::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Filament Cluster Breadcrumb with Method (PHP)\nDESCRIPTION: This snippet demonstrates customizing the breadcrumb name for a Filament cluster using the `getClusterBreadcrumb()` method.  This method allows for dynamic breadcrumb names, such as translating the breadcrumb text using a language file. It provides flexibility in customizing the user interface for localization or other dynamic content requirements.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/10-clusters.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic static function getClusterBreadcrumb(): string\n{\n    return __('filament/clusters/cluster.name');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Blade View Example (Blade)\nDESCRIPTION: This code provides a basic example of a custom Blade view for a Filament resource page. It includes the Filament page layout, form, and form actions components, binding the wire:submit event to the create method and passing the form actions to the `x-filament-panels::form.actions` component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_21\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-panels::page>\n    <x-filament-panels::form wire:submit=\"create\">\n        {{ $this->form }}\n\n        <x-filament-panels::form.actions\n            :actions=\"$this->getCachedFormActions()\"\n            :full-width=\"$this->hasFullWidthFormActions()\"\n        />\n    </x-filament-panels::form>\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Defining a Repeater Schema - PHP\nDESCRIPTION: This snippet shows how to define the schema of a repeater component using the `schema()` method.  It includes a `TextInput` component for the 'name' field, illustrating how to add fields to the repeater.  The 'name' field is set as required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\n\nRepeater::make('members')\n    ->schema([\n        TextInput::make('name')->required(),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Bulk Actions (PHP)\nDESCRIPTION: This snippet shows how to create a bulk action with specific behavior, in this case, deleting selected records. It uses `BulkAction::make()` to create a 'delete' action. It also utilizes the `requiresConfirmation()` method to ensure the user confirms before executing and then performs a delete for each of the selected records in the action callback using `action()`. The dependencies include BulkAction and Collection facades.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkAction;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nBulkAction::make('delete')\n    ->requiresConfirmation()\n    ->action(fn (Collection $records) => $records->each->delete())\n```\n\n----------------------------------------\n\nTITLE: Implementing the HasTenants Interface on the User Model\nDESCRIPTION: This snippet illustrates how to implement the `HasTenants` interface on the `User` model. This involves defining a `teams()` relationship, implementing the `getTenants()` method to return the user's tenants, and implementing the `canAccessTenant()` method to ensure proper tenant access control.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasTenants;\nuse Filament\\Panel;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Support\\Collection;\n\nclass User extends Authenticatable implements FilamentUser, HasTenants\n{\n    // ...\n\n    public function teams(): BelongsToMany\n    {\n        return $this->belongsToMany(Team::class);\n    }\n\n    public function getTenants(Panel $panel): Collection\n    {\n        return $this->teams;\n    }\n\n    public function canAccessTenant(Model $tenant): bool\n    {\n        return $this->teams()->whereKey($tenant)->exists();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Affix Action to a Field - PHP\nDESCRIPTION: This snippet shows how to add a suffix action to a text input field in a Filament form. The `suffixAction()` method is used to define the action, which copies the cost value to the price field. The `Set` utility is injected into the action function to update the price field's state. This example also shows how to add a prefix.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Set;\n\nTextInput::make('cost')\n    ->prefix('€')\n    ->suffixAction(\n        Action::make('copyCostToPrice')\n            ->icon('heroicon-m-clipboard')\n            ->requiresConfirmation()\n            ->action(function (Set $set, $state) {\n                $set('price', $state);\n            })\n    )\n```\n\n----------------------------------------\n\nTITLE: Using a Wizard for Creation\nDESCRIPTION: This snippet illustrates how to transform the creation process into a multistep wizard using the `steps()` method and `Step` objects. It defines multiple steps, each with a schema of form components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Forms\\Components\\Wizard\\Step;\n\nCreateAction::make()\n    ->steps([\n        Step::make('Name')\n            ->description('Give the category a unique name')\n            ->schema([\n                TextInput::make('name')\n                    ->required()\n                    ->live()\n                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),\n                TextInput::make('slug')\n                    ->disabled()\n                    ->required()\n                    ->unique(Category::class, 'slug'),\n            ])\n            ->columns(2),\n        Step::make('Description')\n            ->description('Add some extra details')\n            ->schema([\n                MarkdownEditor::make('description'),\n            ]),\n        Step::make('Visibility')\n            ->description('Control who can view it')\n            ->schema([\n                Toggle::make('is_visible')\n                    ->label('Visible to customers.')\n                    ->default(true),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Integrating CheckboxList with Eloquent Relationship - PHP\nDESCRIPTION: This code snippet shows how to integrate the CheckboxList with an Eloquent `BelongsToMany` relationship using the `relationship()` method. Filament will load the options from the relationship and save them back to the pivot table when the form is submitted.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->relationship(titleAttribute: 'name')\n```\n\n----------------------------------------\n\nTITLE: Using Infolist for View Page (Filament)\nDESCRIPTION: This snippet demonstrates how to define an `infolist()` method on a Filament resource class to display record data in an infolist instead of a disabled form. It utilizes the `Filament\\Infolists` namespace and the `Infolist` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists;\nuse Filament\\Infolists\\Infolist;\n\npublic static function infolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->schema([\n            Infolists\\Components\\TextEntry::make('name'),\n            Infolists\\Components\\TextEntry::make('email'),\n            Infolists\\Components\\TextEntry::make('notes')\n                ->columnSpanFull(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating CSV Data\nDESCRIPTION: This snippet demonstrates how to add validation rules to an import column using the `rules()` method. These rules check the data in each row from the CSV before it is saved to the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->rules(['required', 'max:32'])\n```\n\n----------------------------------------\n\nTITLE: Customize Relation Manager Table (Filament)\nDESCRIPTION: This snippet configures the table within the relation manager, specifying the columns to display for related records. It uses Filament's table builder to create a text column for the 'description' attribute. The table expects a Filament\\Tables\\Table instance as input and returns a configured Table instance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Tables\\Columns\\TextColumn::make('description'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom File Names\nDESCRIPTION: This snippet shows how to customize file name generation using the `getUploadedFileNameForStorageUsing()` method.  It provides a closure that receives the uploaded file object and returns a string for the new file name.  Security implications should be considered.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Livewire\\Features\\SupportFileUploads\\TemporaryUploadedFile;\n\nFileUpload::make('attachment')\n    ->getUploadedFileNameForStorageUsing(\n        fn (TemporaryUploadedFile $file): string => (string) str($file->getClientOriginalName())\n            ->prepend('custom-prefix-'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating New Option in Modal - Filament PHP\nDESCRIPTION: This snippet shows how to define a custom form that can be used to create a new record and attach it to a `BelongsTo` relationship using the `createOptionForm()` method in Filament. A modal will open with the specified form, allowing the user to create a new related record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->createOptionForm([\n        Forms\\Components\\TextInput::make('name')\n            ->required(),\n        Forms\\Components\\TextInput::make('email')\n            ->required()\n            ->email(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Restricting Accepted File Types in Filament\nDESCRIPTION: This snippet demonstrates how to restrict the types of files that may be uploaded using the `acceptedFileTypes()` method, passing an array of MIME types. The second snippet shows shorthand to allow all image MIME types using the `image()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('document')\n    ->acceptedFileTypes(['application/pdf'])\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n```\n\n----------------------------------------\n\nTITLE: Searching Relationship Options Across Multiple Columns - PHP\nDESCRIPTION: This snippet demonstrates how to enable searching across multiple columns in a relationship using the `searchable()` method with an array of columns.  It searches the `name` and `email` columns of the related `author`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable(['name', 'email'])\n```\n\n----------------------------------------\n\nTITLE: Closure Rule with Utility Injection in Filament\nDESCRIPTION: Demonstrates using a closure-based validation rule with utility injection (Get) in a Filament form. Allows referencing other field values in the form's validation logic. The `slug` field depends on the value of `other_field`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Forms\\Get;\n\nTextInput::make('slug')->rules([\n    fn (Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {\n        if ($get('other_field') === 'foo' && $value !== 'bar') {\n            $fail(\"The {$attribute} is invalid.\");\n        }\n    },\n])\n```\n\n----------------------------------------\n\nTITLE: Required Unless Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredUnless` validation rule in a Filament form. The 'name' field is required unless the 'field' has the value 'value'.  This example highlights Filament's usage of Laravel validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredUnless('field', 'value')\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Label for a Filament Form Field\nDESCRIPTION: This code snippet shows how to set a custom label for a Filament form field using the `label()` method. This is useful when you want to override the automatically generated label, especially for localization purposes, using Laravel's translation strings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->label(__('fields.name'))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Rule Object in Filament\nDESCRIPTION: Demonstrates using a custom validation rule object (e.g., `Uppercase`) in a Filament form. This relies on Laravel's custom validation rule implementation. The `slug` field of a TextInput component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nTextInput::make('slug')->rules([new Uppercase()])\n```\n\n----------------------------------------\n\nTITLE: Deferring Filament Filters\nDESCRIPTION: This code demonstrates how to defer filter changes from affecting the table until the user clicks an 'Apply' button using the `deferFilters()` method. This improves performance and user experience, especially with complex filters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->deferFilters();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Edit Action with Form\nDESCRIPTION: Demonstrates how to create a basic EditAction with a form containing a text input field. This action opens a modal with the form when triggered, allowing users to edit the associated record. It requires Filament and Laravel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\EditAction;\nuse Filament\\Forms\\Components\\TextInput;\n\nEditAction::make()\n    ->record($this->post)\n    ->form([\n        TextInput::make('title')\n            ->required()\n            ->maxLength(255),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Binding Field State with wire:model - Blade\nDESCRIPTION: This snippet demonstrates how to bind a field's state to a Livewire component property using the `wire:model` directive in Blade. The `getStatePath()` function returns the name of the property to bind to.  This is the standard way to create two way data binding for fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<input wire:model=\"{{ $getStatePath() }}\" />\n```\n\n----------------------------------------\n\nTITLE: Autosizing Textarea (Filament/PHP)\nDESCRIPTION: This snippet demonstrates how to enable autosizing for the textarea. When `autosize()` is enabled, the textarea will automatically adjust its height to fit the content. This requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/15-textarea.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->autosize()\n```\n\n----------------------------------------\n\nTITLE: Grouping by Relationship Attribute - PHP\nDESCRIPTION: This snippet demonstrates how to group a Filament table by an attribute of a relationship. In this example, it groups by the 'name' attribute of the 'author' relationship (e.g., 'author.name').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            'author.name',\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: After Date Validation - Filament\nDESCRIPTION: Validates that the field contains a date after a specified date string or another field's value. It utilizes the `after()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')->after('tomorrow')\n```\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')\nField::make('end_date')->after('start_date')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Summary in Filament Table (PHP)\nDESCRIPTION: Demonstrates how to create a custom summary for a Filament table column using the `Summarizer::make()->using()` method. The callback function receives a database query builder instance to perform calculations and returns the value to display.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Summarizer;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Query\\Builder;\n\nTextColumn::make('name')\n    ->summarize(Summarizer::make()\n        ->label('First last name')\n        ->using(fn (Builder $query): string => $query->min('last_name')))\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Domain in Filament with PHP\nDESCRIPTION: This code snippet illustrates how to configure domain or subdomain routing for tenants using the `tenantDomain()` method. The `tenant()` method specifies the tenant model and slug attribute, while `tenantDomain()` defines the domain pattern.  When using a domain parameter, a global route parameter pattern is registered.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, slugAttribute: 'slug')\n        ->tenantDomain('{tenant:slug}.example.com');\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, slugAttribute: 'domain')\n        ->tenantDomain('{tenant:domain}');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disable Created Notification - Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to disable the success notification after a record is created in Filament. By returning `null` from the `getCreatedNotification()` method, you can prevent the notification from being displayed to the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nprotected function getCreatedNotification(): ?Notification\n{\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Row Actions (PHP)\nDESCRIPTION: This snippet shows how to create individual row actions with specific behaviors. It uses `Action::make()` to create actions like 'edit' and 'delete'. The 'edit' action opens a URL in a new tab using `url()` and `openUrlInNewTab()`, while the 'delete' action requires confirmation using `requiresConfirmation()` and then executes the deletion logic using `action()`.  The Post model and Action facade dependencies are required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Tables\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (Post $record): string => route('posts.edit', $record))\n    ->openUrlInNewTab()\n\nAction::make('delete')\n    ->requiresConfirmation()\n    ->action(fn (Post $record) => $record->delete())\n```\n\n----------------------------------------\n\nTITLE: Global Validation Notification in Filament Panel Builder\nDESCRIPTION: Demonstrates sending validation notifications globally in a Filament Panel Builder application. This adds the validation reporting inside the boot() method of the AppServiceProvider.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\nuse Filament\\Pages\\Page;\nuse Illuminate\\Validation\\ValidationException;\n\nPage::$reportValidationErrorUsing = function (ValidationException $exception) {\n    Notification::make()\n        ->title($exception->getMessage())\n        ->danger()\n        ->send();\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Storage Format for DatePicker in Filament\nDESCRIPTION: This snippet shows how to customize the format in which a date is stored in the database using the `format()` method. The method accepts a string representing the desired date format using PHP date formatting tokens.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->format('d/m/Y')\n```\n\n----------------------------------------\n\nTITLE: Grouping Bulk Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to group multiple bulk actions together in a dropdown using `BulkActionGroup`. It creates two bulk actions ('delete' and 'forceDelete') within the group and renders an 'export' bulk action separately. The dependencies include Table, BulkAction, and BulkActionGroup facades.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkAction;\nuse Filament\\Tables\\Actions\\BulkActionGroup;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            BulkActionGroup::make([\n                BulkAction::make('delete')\n                    ->requiresConfirmation()\n                    ->action(fn (Collection $records) => $records->each->delete()),\n                BulkAction::make('forceDelete')\n                    ->requiresConfirmation()\n                    ->action(fn (Collection $records) => $records->each->forceDelete()),\n            ]),\n            BulkAction::make('export')->button()->action(fn (Collection $records) => ...),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Distinct State Validation in Repeater - Filament/PHP\nDESCRIPTION: This snippet demonstrates how to enforce uniqueness between repeater items using the `distinct()` method.  For checkbox fields, it ensures only one item can be true at a time. For select/radio fields, it ensures that each option can only be selected once across all items.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('answers')\n    ->schema([\n        // ...\n        Checkbox::make('is_correct')\n            ->distinct(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Success Notification\nDESCRIPTION: This snippet demonstrates how to customize the entire success notification after record creation using the `successNotification()` method, leveraging the Filament\\Notifications\\Notification class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nCreateAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User registered')\n            ->body('The user has been created successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Form Schema (Filament, PHP)\nDESCRIPTION: This code demonstrates how to customize the form schema of the filter form using the `filtersFormSchema()` method.  This allows you to use Filament's form components to rearrange and style the filters.  It uses a closure to receive an array of `$filters` and then defines a new form schema with sections and columns.  Dependencies include `Filament\\Forms\\Components\\Section` and `Filament\\Tables\\Filters\\Filter`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            Filter::make('is_featured'),\n            Filter::make('published_at'),\n            Filter::make('author'),\n        ])\n        ->filtersFormColumns(2)\n        ->filtersFormSchema(fn (array $filters): array => [\n            Section::make('Visibility')\n                ->description('These filters affect the visibility of the records in the table.')\n                ->schema([\n                    $filters['is_featured'],\n                    $filters['published_at'],\n                ])\n                    ->columns(2)\n                ->columnSpanFull(),\n            $filters['author'],\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Static Access to Plugin Configuration (PHP)\nDESCRIPTION: This code shows a better way to access plugin configurations using a static method, allowing for better type safety and IDE auto-completion.  Requires the Filament\\Contracts\\Plugin interface.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Contracts\\Plugin;\n\nclass BlogPlugin implements Plugin\n{\n    public static function get(): static\n    {\n        return filament(app(static::class)->getId());\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Distributing a Panel in a Plugin (PHP)\nDESCRIPTION: Shows how to distribute an entire Filament panel within a Laravel package. It extends the `PanelProvider` class to configure the panel and registers it as a service provider.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace DanHarrin\\FilamentBlog;\n\nuse Filament\\Panel;\nuse Filament\\PanelProvider;\n\nclass BlogPanelProvider extends PanelProvider\n{\n    public function panel(Panel $panel): Panel\n    {\n        return $panel\n            ->id('blog')\n            ->path('blog')\n            ->resources([\n                // ...\n            ])\n            ->pages([\n                // ...\n            ])\n            ->widgets([\n                // ...\n            ])\n            ->middleware([\n                // ...\n            ])\n            ->authMiddleware([\n                // ...\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a View Page in Resource (Filament)\nDESCRIPTION: This snippet shows how to register a new View page in a Filament resource's `getPages()` method.  The route defines the URL structure for accessing the View page, with `{record}` representing the model ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => Pages\\ListUsers::route('/'),\n        'create' => Pages\\CreateUser::route('/create'),\n        'view' => Pages\\ViewUser::route('/{record}'),\n        'edit' => Pages\\EditUser::route('/{record}/edit'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Create Action with Form\nDESCRIPTION: This snippet demonstrates how to create a basic CreateAction, specifying the model and the form fields to be used in the modal. It utilizes TextInput for the 'title' field, making it required and setting a maximum length.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\CreateAction;\nuse Filament\\Forms\\Components\\TextInput;\n\nCreateAction::make()\n    ->model(Post::class)\n    ->form([\n        TextInput::make('title')\n            ->required()\n            ->maxLength(255),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Text Below a Filament Form Field\nDESCRIPTION: This code snippet shows how to add helper text below a Filament form field using the `helperText()` method.  The helper text provides extra information to the user.  The method accepts a plain text string, an `HtmlString`, or an `Htmlable` instance, allowing for HTML or markdown rendering.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->helperText('Your full name here, including any middle names.')\n```\n\n----------------------------------------\n\nTITLE: Mutating Related Item Data Before Creating - Filament/PHP\nDESCRIPTION: This snippet illustrates how to modify the data of a new related item before it is created in the database using the `mutateRelationshipDataBeforeCreateUsing()` method. The closure receives the current item's data in the `$data` variable. You can either return the modified data array or `null` to prevent the item from being created. This example sets the 'user_id' to the currently authenticated user's ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n    ->mutateRelationshipDataBeforeCreateUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Default and User-Selectable Groupings - PHP\nDESCRIPTION: This example combines setting a default grouping ('status') with allowing users to choose between other groupings ('status' and 'category').  The table will initially group by 'status', but users can change to 'category'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            'status',\n            'category',\n        ])\n        ->defaultGroup('status');\n}\n```\n\n----------------------------------------\n\nTITLE: Define 'Date of birth' Date Picker in Filament Form\nDESCRIPTION: This code adds a date picker field for the `date_of_birth` attribute to the Filament form, allowing users to select a date.  The `maxDate` validation is set to `now()`, ensuring that the selected date is not in the future. The field is required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Forms\\Form;\n\npublic static function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            Forms\\Components\\TextInput::make('name')\n                ->required()\n                ->maxLength(255),\n            Forms\\Components\\Select::make('type')\n                ->options([\n                    'cat' => 'Cat',\n                    'dog' => 'Dog',\n                    'rabbit' => 'Rabbit',\n                ])\n                ->required(),\n            Forms\\Components\\DatePicker::make('date_of_birth')\n                ->required()\n                ->maxDate(now()),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Edit Form\nDESCRIPTION: Generates a Filament edit form for a specific Eloquent model. This command creates a Livewire component that renders a form pre-filled with data from an existing record. The `--edit` flag indicates that it's an edit form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire-form Products/EditProduct --edit\n```\n\n----------------------------------------\n\nTITLE: Formatting Export Column Value\nDESCRIPTION: This PHP code shows how to format the value of an export column using a callback function passed to `formatStateUsing()`. This allows customization of the output string based on the cell's `$state` and the Eloquent `$record`, enabling localization and other transformations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('status')\n    ->formatStateUsing(fn (string $state): string => __(\"statuses.{$state}\"))\n```\n\n----------------------------------------\n\nTITLE: Custom List Page View - PHP\nDESCRIPTION: Shows how to override the default list page view by setting the static `$view` property on the page class to a custom view in your application. This allows for complete control over the page's layout and content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $view = 'filament.resources.users.pages.list-users';\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Rules in Filament\nDESCRIPTION: Demonstrates adding custom validation rules to a Filament form field. It uses Laravel's array-based rule definition to apply the `alpha_dash` rule to the 'slug' field of a TextInput component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nTextInput::make('slug')->rules(['alpha_dash'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Section - PHP\nDESCRIPTION: This snippet demonstrates how to create a basic section in a Filament form, including setting a title and description.  The section visually groups related form elements. It requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Storing Original File Names Independently\nDESCRIPTION: This snippet shows how to store original file names in a separate database column while using randomly generated file names for storage. The `storeFileNamesIn()` method specifies the column where the original file names should be stored.  If uploading multiple files, ensure you add an array cast to the Eloquent model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->storeFileNamesIn('attachment_file_names')\n```\n\n----------------------------------------\n\nTITLE: Grid Layout for Repeater Items - Filament/PHP\nDESCRIPTION: This snippet shows how to arrange repeater items into a grid layout using the `grid()` method. This example configures a 2-column grid for the repeater items. The method accepts the same options as the `columns()` method, enabling responsive customization of grid columns at various breakpoints.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->schema([\n        // ...\n    ])\n    ->grid(2)\n```\n\n----------------------------------------\n\nTITLE: Applying Global Tenant Scopes with Middleware in PHP\nDESCRIPTION: This code demonstrates how to create a middleware to apply global scopes to Eloquent models, automatically scoping queries to the current tenant. This middleware is then registered for tenant-aware routes and made persistent to apply to all requests.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse App\\Models\\Author;\nuse Closure;\nuse Filament\\Facades\\Filament;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Http\\Request;\n\nclass ApplyTenantScopes\n{\n    public function handle(Request $request, Closure $next)\n    {\n        Author::addGlobalScope(\n            fn (Builder $query) => $query->whereBelongsTo(Filament::getTenant()),\n        );\n\n        return $next($request);\n    }\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMiddleware([\n            ApplyTenantScopes::class,\n        ], isPersistent: true);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Builder State in Filament\nDESCRIPTION: This code snippet demonstrates how to access and modify the raw data for the entire builder, for example, to add, remove or modify items.  It uses `$component->getState()` to get the data, and `$component->state($state)` to set it again.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n// Get the raw data for the entire builder\n$state = $component->getState();\n\n// Add an item, with a random UUID as the key\n$state[Str::uuid()] = [\n    'type' => 'contactDetails',\n    'data' => [\n        'email' => auth()->user()->email,\n    ],\n];\n\n// Set the new data for the builder\n$component->state($state);\n```\n\n----------------------------------------\n\nTITLE: Required Without Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredWithout` validation rule in a Filament form. The 'name' field is required only when any of the 'field' or 'another_field' are empty. This example highlights Filament's usage of Laravel validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredWithout('field,another_field')\n```\n\n----------------------------------------\n\nTITLE: Positioning Row Actions Before Checkbox Column (PHP)\nDESCRIPTION: This snippet demonstrates how to position row actions before the checkbox column in a Filament table, enabling selection of rows. The `ActionsPosition` enum is used to specify where the actions will render. The `Table` and `ActionsPosition` dependencies need to be imported.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\ActionsPosition;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            // ...\n        ], position: ActionsPosition::BeforeCells);\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Validation Ignoring a Model in Filament\nDESCRIPTION: Demonstrates using the `unique` validation rule in a Filament form, ignoring a specific model instance. This prevents validation errors when updating the same record. `$ignoredUser` is a variable containing the user object to ignore.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nField::make('email')->unique(ignorable: $ignoredUser)\n```\n\n----------------------------------------\n\nTITLE: Required If Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredIf` validation rule in a Filament form.  The 'name' field is required only if the 'field' has the value 'value'. This utilizes Laravel's validation rules within the Filament framework.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredIf('field', 'value')\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Rule Modification in Filament\nDESCRIPTION: Demonstrates customizing the `unique` validation rule using `modifyRuleUsing` in a Filament form. It adds a `where` clause to the unique rule to only check against active users.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rules\\Unique;\n\nField::make('email')\n    ->unique(modifyRuleUsing: function (Unique $rule) {\n        return $rule->where('is_active', 1);\n    })\n```\n\n----------------------------------------\n\nTITLE: Prohibited If Validation - Filament\nDESCRIPTION: Validates that the field must be empty only if another field has a specific value. It uses the `prohibitedIf()` method, taking the other field's name and the value as arguments.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->prohibitedIf('field', 'value')\n```\n\n----------------------------------------\n\nTITLE: Customize Created Notification Title - Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to customize the title of the success notification displayed after a record is created in Filament. By defining the `getCreatedNotificationTitle()` method, you can specify a custom title for the notification.  The example sets the title to 'User registered'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function getCreatedNotificationTitle(): ?string\n{\n    return 'User registered';\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Custom Table in Filament\nDESCRIPTION: Demonstrates using the `unique` validation rule in a Filament form, specifying a custom table.  It uses `App\\Models\\User` as the table to check for uniqueness of the 'email' field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\n\nField::make('email')->unique(table: User::class)\n```\n\n----------------------------------------\n\nTITLE: Making Columns Searchable in Patient Table - PHP\nDESCRIPTION: This snippet demonstrates how to enable searching for patients within the Filament table by making the 'name' and 'owner.name' columns searchable. The `searchable()` method is chained to the `TextColumn` component for each of these columns, allowing users to filter the table entries based on the search criteria entered in the search input field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Tables\\Columns\\TextColumn::make('name')\n                ->searchable(),\n            Tables\\Columns\\TextColumn::make('type'),\n            Tables\\Columns\\TextColumn::make('date_of_birth'),\n            Tables\\Columns\\TextColumn::make('owner.name')\n                ->searchable(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Panel Font - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to change the default font used in a FilamentPHP panel using the `font()` method. It sets the font to 'Poppins', assuming it is available in Google Fonts.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->font('Poppins');\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Foreign Key to Custom Table for User ID (PHP)\nDESCRIPTION: This code snippet shows how to constrain the `user_id` foreign key in the `imports` table to a custom table, such as `admins`, instead of the default `users` table. This is necessary when using a custom authenticatable model with a different table name. It utilizes Laravel's schema builder to define the foreign key constraint with cascade on delete.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$table->foreignId('user_id')->constrained('admins')->cascadeOnDelete();\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Values in Filament\nDESCRIPTION: This code snippet demonstrates how to automatically display a check or cross icon based on a boolean database column.  By calling the `boolean()` method, the column will display a green check for `true` and a red cross for `false`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('is_featured')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Customize Redirect URL - Filament - PHP\nDESCRIPTION: This code snippet illustrates how to customize the redirect URL after a record is created in Filament. By overriding the `getRedirectUrl()` method, you can specify a custom URL to redirect the user to after successful form submission.  The example redirects to the resource's index page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function getRedirectUrl(): string\n{\n    return $this->getResource()::getUrl('index');\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Markdown Editor Output (Blade)\nDESCRIPTION: This snippet shows how to sanitize the HTML output from a Markdown editor when displaying it in a Blade view.  It uses Filament's `sanitizeHtml()` helper to remove any potentially dangerous JavaScript to prevent XSS vulnerabilities.  It assumes the 'content' field is on the $record object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/11-markdown-editor.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n{!! str($record->content)->markdown()->sanitizeHtml() !!}\n```\n\n----------------------------------------\n\nTITLE: Filtering Patient Table by Type - PHP\nDESCRIPTION: This snippet demonstrates how to add a filter to the Filament table, allowing users to reduce the number of records displayed based on patient type. The `SelectFilter` component is used to create a select menu with a list of patient types ('cat', 'dog', 'rabbit'). When a type is selected, the table will only display patients of that type.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->filters([\n            Tables\\Filters\\SelectFilter::make('type')\n                ->options([\n                    'cat' => 'Cat',\n                    'dog' => 'Dog',\n                    'rabbit' => 'Rabbit',\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: In Validation - Filament\nDESCRIPTION: Validates that the field is included in the given list of values. It uses the `in()` method, accepting an array of allowed values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nField::make('status')->in(['pending', 'completed'])\n```\n\n----------------------------------------\n\nTITLE: Rendering Livewire Component (Blade)\nDESCRIPTION: This Blade directive renders the `CreatePost` Livewire component within a view. It's the typical way to include a Livewire component in a Blade template.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@livewire('create-post')\n```\n\n----------------------------------------\n\nTITLE: Customizing Select Action Objects - Filament Select\nDESCRIPTION: This snippet illustrates how to customize the create option action in a Filament select component using the `createOptionAction()` method. It modifies the modal width of the action to '3xl'. This allows customization of the create or edit actions, or both.  The `author_id` is linked to the `author` relationship, displaying the `name` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->createOptionAction(\n        fn (Action $action) => $action->modalWidth('3xl'),\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Cropping and Resizing Images without Editor in Filament\nDESCRIPTION: This example shows how to crop and resize images using Filepond (integrated into Filament) before uploading, without the need for a separate editor. It uses `imageCropAspectRatio()`, `imageResizeTargetHeight()`, and `imageResizeTargetWidth()` methods, along with `imageResizeMode('cover')`, to define the desired cropping and resizing behavior.  The `imageResizeMode` must be set for the crop and resize functions to work.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->imageResizeMode('cover')\n    ->imageCropAspectRatio('16:9')\n    ->imageResizeTargetWidth('1920')\n    ->imageResizeTargetHeight('1080')\n```\n\n----------------------------------------\n\nTITLE: Sending Validation Notifications in Filament\nDESCRIPTION: Demonstrates sending a notification when a validation error occurs in a Filament Livewire component, this method is called automatically when validation errors occur. It sends a danger notification with the exception's message.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\nuse Illuminate\\Validation\\ValidationException;\n\nprotected function onValidationError(ValidationException $exception): void\n{\n    Notification::make()\n        ->title($exception->getMessage())\n        ->danger()\n        ->send();\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Number of Files in Filament\nDESCRIPTION: This snippet shows how to customize the number of files that may be uploaded, using the `minFiles()` and `maxFiles()` methods of the FileUpload component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->minFiles(2)\n    ->maxFiles(5)\n```\n\n----------------------------------------\n\nTITLE: Customizing the Built-in Filter Form Field\nDESCRIPTION: This snippet demonstrates how to customize the built-in form field used for the filter, such as a checkbox, using the `modifyFormFieldUsing()` method. This allows for fine-grained control over the filter's appearance and behavior.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_featured')\n    ->modifyFormFieldUsing(fn (Checkbox $field) => $field->inline(false))\n```\n\n----------------------------------------\n\nTITLE: Unique Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `unique` validation rule in a Filament form. The 'email' field value must not exist in the database. This snippet illustrates Filament's integration with Laravel for unique validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nField::make('email')->unique()\n```\n\n----------------------------------------\n\nTITLE: Enabling Circle Image Cropping in Filament\nDESCRIPTION: This snippet demonstrates how to enable circle cropping for images uploaded using the Filament FileUpload component.  It uses the `circleCropper()` method to allow users to crop images into a circular shape. Requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->avatar()\n    ->imageEditor()\n    ->circleCropper()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Search Prompt - Filament PHP\nDESCRIPTION: This code shows how to display a custom message when the user has not yet entered a search term in a searchable select or multi-select, using the `searchPrompt()` method. This guides the user on how to initiate a search.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable(['name', 'email'])\n    ->searchPrompt('Search authors by their name or email address')\n```\n\n----------------------------------------\n\nTITLE: Overriding Edit Page View\nDESCRIPTION: This example shows how to override the default view for the Edit page with a custom Blade view.  It requires defining the `$view` property on the page class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/04-editing-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $view = 'filament.resources.users.pages.edit-user';\n```\n\n----------------------------------------\n\nTITLE: Controlling Horizontal Alignment of Anonymous Actions - PHP\nDESCRIPTION: This snippet demonstrates how to control the horizontal alignment of independent form actions using the `alignment()` method and the `Alignment` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions;\nuse Filament\\Support\\Enums\\Alignment;\n\nActions::make([\n    // ...\n])->alignment(Alignment::Center),\n```\n\n----------------------------------------\n\nTITLE: Setting up Row Actions in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to define row actions in a Filament table. It utilizes the `$table->actions()` method within the `table()` function to define the actions that will be displayed at the end of each table row. The `Table` dependency needs to be injected in the class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Required If Accepted Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredIfAccepted` validation rule in a Filament form.  The 'name' field is required only if the 'field' is equal to \"yes\", \"on\", 1, \"1\", true, or \"true\".  This is specific to Filament's integration with Laravel validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredIfAccepted('field')\n```\n\n----------------------------------------\n\nTITLE: Grouping Table Actions in Filament with ActionGroup\nDESCRIPTION: This code demonstrates how to group multiple table actions (View, Edit, Delete) within a Filament table using the `ActionGroup` object. It imports necessary classes and defines the table configuration, returning a table instance with the grouped actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Actions\\DeleteAction;\nuse Filament\\Tables\\Actions\\EditAction;\nuse Filament\\Tables\\Actions\\ViewAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            ActionGroup::make([\n                ViewAction::make(),\n                EditAction::make(),\n                DeleteAction::make(),\n            ]),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Custom Split Keys - PHP\nDESCRIPTION: This snippet configures the TagsInput component to create new tags when specific keys are pressed. The `splitKeys()` method accepts an array of key names, allowing users to use keys like 'Tab' or ' ' to create new tags.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->splitKeys(['Tab', ' '])\n```\n\n----------------------------------------\n\nTITLE: Scoping Count Summarizer Dataset\nDESCRIPTION: This snippet demonstrates scoping a count summarizer to only count published posts. It uses the `query()` method to filter the dataset where `is_published` is true.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Count;\nuse Illuminate\\Database\\Query\\Builder;\n\nIconColumn::make('is_published')\n    ->boolean()\n    ->summarize(\n        Count::make()->query(fn (Builder $query) => $query->where('is_published', true)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Disk and Directory\nDESCRIPTION: This snippet shows how to configure the storage disk, directory, and visibility for file uploads using the `disk()`, `directory()`, and `visibility()` methods. It sets the disk to 's3', the directory to 'form-attachments', and the visibility to 'private'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->disk('s3')\n    ->directory('form-attachments')\n    ->visibility('private')\n```\n\n----------------------------------------\n\nTITLE: String Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `string` validation rule in a Filament form. This validates that the 'name' field must be a string. This shows Filament integrating a simple Laravel validation rule.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->string()\n```\n\n----------------------------------------\n\nTITLE: Injecting Livewire component instance (PHP)\nDESCRIPTION: This code snippet shows how to inject the current Livewire component instance into an action's configuration function, providing access to the component's properties and methods. Requires `use Livewire\\Component;`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nfunction (Component $livewire) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Select Options - PHP\nDESCRIPTION: This snippet shows how to group options together under a label using an array of arrays in the `options()` method. This helps organize the select field and improve user experience.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->searchable()\n    ->options([\n        'In Process' => [\n            'draft' => 'Draft',\n            'reviewing' => 'Reviewing',\n        ],\n        'Reviewed' => [\n            'published' => 'Published',\n            'rejected' => 'Rejected',\n        ],\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocapitalization\nDESCRIPTION: This snippet shows how to enable autocapitalization for a text input, controlling how the browser automatically capitalizes the input text.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->autocapitalize('words')\n```\n\n----------------------------------------\n\nTITLE: Implementing HasActions and HasForms Interfaces (PHP)\nDESCRIPTION: This code snippet shows how to include the `InteractsWithActions` and `InteractsWithForms` traits and implement the `HasActions` and `HasForms` interfaces in a Livewire component. This is essential for using Filament's action and form features. It depends on `Filament\\Actions\\Concerns\\InteractsWithActions`, `Filament\\Actions\\Contracts\\HasActions`, `Filament\\Forms\\Concerns\\InteractsWithForms`, `Filament\\Forms\\Contracts\\HasForms`, and `Livewire\\Component`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Concerns\\InteractsWithActions;\nuse Filament\\Actions\\Contracts\\HasActions;\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Livewire\\Component;\n\nclass ManagePost extends Component implements HasForms, HasActions\n{\n    use InteractsWithActions;\n    use InteractsWithForms;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reordering Items in a Relationship - PHP\nDESCRIPTION: This snippet shows how to enable reordering of items in a relationship repeater by specifying the column to store the order in using the `orderColumn()` method.  This column must exist on the related model. In this example, the 'sort' column is used.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n    ->orderColumn('sort')\n```\n\n----------------------------------------\n\nTITLE: Requiring an Importer Column to be Mapped\nDESCRIPTION: This snippet demonstrates how to require an import column to be mapped to a CSV column using the `requiredMapping()` method. This ensures that the user provides a mapping for essential columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->requiredMapping()\n```\n\n----------------------------------------\n\nTITLE: Automated Upgrade Script (Bash)\nDESCRIPTION: This script automates the Filament upgrade process to v3. It installs the `filament/upgrade` package as a development dependency and executes the upgrade script. After running, follow the instructions and review changes. The script significantly reduces repetitive tasks during the upgrade.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/07-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/upgrade:\"^3.2\" -W --dev\nvendor/bin/filament-v3\n```\n\n----------------------------------------\n\nTITLE: Initializing an Icon Column in Filament\nDESCRIPTION: This code snippet demonstrates how to create a basic icon column in a Filament table. It uses a closure to dynamically determine the icon based on the column's value ($state). The icons are selected based on a match statement, and the $record variable can be used to access the underlying Eloquent record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('status')\n    ->icon(fn (string $state): string => match ($state) {\n        'draft' => 'heroicon-o-pencil',\n        'reviewing' => 'heroicon-o-clock',\n        'published' => 'heroicon-o-check-circle',\n    })\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Search Results - PHP\nDESCRIPTION: This code snippet demonstrates how to populate search results based on a database search or other external data source using `getSearchResultsUsing()` and `getOptionLabelUsing()`. It defines a custom search that filters users by name and a label that displays the selected author's name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nSelect::make('author_id')\n    ->searchable()\n    ->getSearchResultsUsing(fn (string $search): array => User::where('name', 'like', \"%{$search}%\")->limit(50)->pluck('name', 'id')->toArray())\n    ->getOptionLabelUsing(fn ($value): ?string => User::find($value)?->name),\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Saving with Record Parameter\nDESCRIPTION: Shows how to redirect to a different page passing the record information after saving.  Requires Filament and Laravel with record data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nEditAction::make()\n    ->successRedirectUrl(fn (Model $record): string => route('posts.view', [\n        'post' => $record,\n    ]))\n```\n\n----------------------------------------\n\nTITLE: IP Address Validation - Filament\nDESCRIPTION: Validates that the field is an IP address.  It provides methods for generic IP (`ip()`), IPv4 (`ipv4()`), and IPv6 (`ipv6()`) validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nField::make('ip_address')->ip()\nField::make('ip_address')->ipv4()\nField::make('ip_address')->ipv6()\n```\n\n----------------------------------------\n\nTITLE: Customize Redirect To Previous URL or Index - Filament - PHP\nDESCRIPTION: This code snippet illustrates how to customize the redirect URL after a record is created in Filament. This example attempts to redirect to the previous page, falling back to the index page if no previous URL is available.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function getRedirectUrl(): string\n{\n    return $this->previousUrl ?? $this->getResource()::getUrl('index');\n}\n```\n\n----------------------------------------\n\nTITLE: Filament Importer Lifecycle Hooks\nDESCRIPTION: This snippet showcases the various lifecycle hooks available within a Filament importer. These hooks allow you to execute code before and after validation, filling, saving, creating, and updating operations during the import process. Access `$this->data`, `$this->originalData`, `$this->record`, and `$this->options` inside the hooks.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\Importer;\n\nclass ProductImporter extends Importer\n{\n    // ...\n\n    protected function beforeValidate(): void\n    {\n        // Runs before the CSV data for a row is validated.\n    }\n\n    protected function afterValidate(): void\n    {\n        // Runs after the CSV data for a row is validated.\n    }\n\n    protected function beforeFill(): void\n    {\n        // Runs before the validated CSV data for a row is filled into a model instance.\n    }\n\n    protected function afterFill(): void\n    {\n        // Runs after the validated CSV data for a row is filled into a model instance.\n    }\n\n    protected function beforeSave(): void\n    {\n        // Runs before a record is saved to the database.\n    }\n\n    protected function beforeCreate(): void\n    {\n        // Similar to `beforeSave()`, but only runs when creating a new record.\n    }\n\n    protected function beforeUpdate(): void\n    {\n        // Similar to `beforeSave()`, but only runs when updating an existing record.\n    }\n\n    protected function afterSave(): void\n    {\n        // Runs after a record is saved to the database.\n    }\n    \n    protected function afterCreate(): void\n    {\n        // Similar to `afterSave()`, but only runs when creating a new record.\n    }\n    \n    protected function afterUpdate(): void\n    {\n        // Similar to `afterSave()`, but only runs when updating an existing record.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Required With All Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredWithAll` validation rule in a Filament form. The 'name' field is required only if both 'field' and 'another_field' are not empty. This showcases Filament's integration with Laravel's validation system.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredWithAll('field,another_field')\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Options in Filament Table (PHP)\nDESCRIPTION: This snippet illustrates how to customize the pagination options in a Filament table by passing an array of options to the `paginated()` method. It demonstrates how to specify the available records per page values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginated([10, 25, 50, 100, 'all']);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Before Filling the Form\nDESCRIPTION: This snippet demonstrates modifying the data from the record before it's filled into the form using the `mutateRecordDataUsing()` method. Here, the `user_id` is set to the authenticated user's ID. This callback function receives the record data as an array, allowing modification before the data is used to populate the replication form. It should return the modified array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nReplicateAction::make()\n    ->mutateRecordDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Eloquent Cast for Multiple Files\nDESCRIPTION: This snippet shows how to define an Eloquent cast to handle an array of file URLs saved to a database column. It ensures that the 'attachments' property is cast to an array when retrieved from the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Message extends Model\n{\n    protected $casts = [\n        'attachments' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Table Rows in Row Action (PHP)\nDESCRIPTION: This snippet shows how to access selected rows in a table from a row action, specifically when the action needs context from selected records. It utilizes `selectable()` to ensure the table is selectable even without bulk actions, and `accessSelectedRecords()` to allow the action to access the selected records. The dependencies include Table, Action, Collection, and Model facades.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Filament\\Tables\\Actions\\Action;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->selectable()\n        ->actions([\n            Action::make('copyToSelected')\n                ->accessSelectedRecords()\n                ->action(function (Model $record, Collection $selectedRecords) {\n                    $selectedRecords->each(\n                        fn (Model $selectedRecord) => $selectedRecord->update([\n                            'is_active' => $record->is_active,\n                        ]),\n                    );\n                }),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Override Translatable Locales in Relation Manager (PHP)\nDESCRIPTION: Overrides the default translatable locales for a specific Filament relation manager. The `getTranslatableLocales()` method is overridden to return a custom array of locales.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\RelationManagers\\Concerns\\Translatable;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\n\nclass BlogPostsRelationManager extends RelationManager\n{\n    use Translatable;\n    \n    // ...\n    \n    public function getTranslatableLocales(): array\n    {\n        return ['en', 'fr'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Widget Data - Interacting with Filters (PHP)\nDESCRIPTION: This snippet shows how to use the `InteractsWithPageFilters` trait in a widget class to access the raw data from the filters form using the `$this->filters` property, to filter BlogPost data by start and end dates.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\BlogPost;\nuse Carbon\\CarbonImmutable;\nuse Filament\\Widgets\\StatsOverviewWidget;\nuse Filament\\Widgets\\Concerns\\InteractsWithPageFilters;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass BlogPostsOverview extends StatsOverviewWidget\n{\n    use InteractsWithPageFilters;\n\n    public function getStats(): array\n    {\n        $startDate = $this->filters['startDate'] ?? null;\n        $endDate = $this->filters['endDate'] ?? null;\n\n        return [\n            StatsOverviewWidget\\Stat::make(\n                label: 'Total posts',\n                value: BlogPost::query()\n                    ->when($startDate, fn (Builder $query) => $query->whereDate('created_at', '>=', $startDate))\n                    ->when($endDate, fn (Builder $query) => $query->whereDate('created_at', '<=', $endDate))\n                    ->count(),\n            ),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Option Labels for Morphed Type - Filament PHP\nDESCRIPTION: This snippet shows how to customize the labels of the options for each morphed type in a `MorphToSelect` component.  The `getOptionLabelFromRecordUsing()` method transforms the Eloquent model into a label, allowing customization beyond simply using a title attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MorphToSelect;\n\nMorphToSelect::make('commentable')\n    ->types([\n        MorphToSelect\\Type::make(Product::class)\n            ->getOptionLabelFromRecordUsing(fn (Product $record): string => \"{$record->name} - {$record->slug}\"),\n        MorphToSelect\\Type::make(Post::class)\n            ->titleAttribute('title'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Same Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `same` validation rule in a Filament form. The 'password' field value must be the same as the 'passwordConfirmation' field. This example shows how Filament incorporates Laravel validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nField::make('password')->same('passwordConfirmation')\n```\n\n----------------------------------------\n\nTITLE: Configure Slug Attribute for Tenants in Filament\nDESCRIPTION: This shows how to configure a slug attribute for tenants to use a slug in the URL instead of the ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, slugAttribute: 'slug');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Entries\nDESCRIPTION: Creates a TextEntry instance for displaying text in the infolist. The first example displays a simple 'title' attribute. The second example demonstrates accessing related data using dot notation ('author.name'). It utilizes the `Filament\\Infolists\\Components\\TextEntry` class. The `make()` method is used to instantiate the TextEntry with a name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n\nTextEntry::make('author.name')\n```\n\n----------------------------------------\n\nTITLE: Limiting Parallel Uploads\nDESCRIPTION: This snippet demonstrates how to control the maximum number of parallel uploads using the `maxParallelUploads()` method. In this example, the number of parallel uploads is limited to 1.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->maxParallelUploads(1)\n```\n\n----------------------------------------\n\nTITLE: Defining Builder Blocks\nDESCRIPTION: This code snippet demonstrates how to define a Filament Builder component with multiple blocks, each containing a schema of form components such as TextInput, Select, FileUpload, and Textarea. It showcases the creation of blocks for heading, paragraph, and image elements, with their respective fields and validations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder::make('content')\n    ->blocks([\n        Builder\\Block::make('heading')\n            ->schema([\n                TextInput::make('content')\n                    ->label('Heading')\n                    ->required(),\n                Select::make('level')\n                    ->options([\n                        'h1' => 'Heading 1',\n                        'h2' => 'Heading 2',\n                        'h3' => 'Heading 3',\n                        'h4' => 'Heading 4',\n                        'h5' => 'Heading 5',\n                        'h6' => 'Heading 6',\n                    ])\n                    ->required(),\n            ])\n            ->columns(2),\n        Builder\\Block::make('paragraph')\n            ->schema([\n                Textarea::make('content')\n                    ->label('Paragraph')\n                    ->required(),\n            ]),\n        Builder\\Block::make('image')\n            ->schema([\n                FileUpload::make('url')\n                    ->label('Image')\n                    ->image() ->required(),\n                TextInput::make('alt')\n                    ->label('Alt text')\n                    ->required(),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding a Hint Action to a Field - PHP\nDESCRIPTION: This snippet shows how to add a hint action to a text input field in a Filament form. The `hintAction()` method is used to define the action, which copies the cost value to the price field. The `Set` utility is injected into the action function to update the price field's state. This example also shows how to add a prefix.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Set;\n\nTextInput::make('cost')\n    ->prefix('€')\n    ->hintAction(\n        Action::make('copyCostToPrice')\n            ->icon('heroicon-m-clipboard')\n            ->requiresConfirmation()\n            ->action(function (Set $set, $state) {\n                $set('price', $state);\n            })\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Middleware in Filament Importer (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the middleware that is applied to jobs of a specific importer by overriding the `getJobMiddleware()` method in the importer class. The default middleware prevents overlapping jobs for the same import.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobMiddleware(): array\n{\n    return [\n        (new WithoutOverlapping(\"import{$this->import->getKey()}\"))->expireAfter(600),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating with BelongsToMany Relationship - PHP\nDESCRIPTION: This snippet shows how to use the `multiple()` method in combination with `relationship()` for a BelongsToMany relationship. Filament will load and save options to the relationship's pivot table. It uses the field name as the relationship name if a name is not specified.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('technologies')\n    ->multiple()\n    ->relationship(titleAttribute: 'name')\n```\n\n----------------------------------------\n\nTITLE: Mutate Form Data Before Create - Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to modify form data before it is saved to the database during the creation process in Filament. The `mutateFormDataBeforeCreate()` method accepts an array of data and returns the modified version, allowing for data manipulation before persistence. In this example, it sets the 'user_id' to the authenticated user's ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function mutateFormDataBeforeCreate(array $data): array\n{\n    $data['user_id'] = auth()->id();\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Current Panel for Testing (PHP)\nDESCRIPTION: This snippet shows how to manually set the current Filament panel being tested. This is crucial when testing multiple panels, especially when tests don't involve making a request and triggering the panel middleware. Replace 'app' with the actual ID of the panel you want to test.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Facades\\Filament;\n\nFilament::setCurrentPanel(\n    Filament::getPanel('app'), // Where `app` is the ID of the panel you want to test.\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Queue in Filament Importer (PHP)\nDESCRIPTION: This code demonstrates how to customize the queue used for jobs of a specific importer by overriding the `getJobQueue()` method in the importer class. This allows directing import jobs to a dedicated queue for better resource management.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobQueue(): ?string\n{\n    return 'imports';\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Select - PHP\nDESCRIPTION: This snippet shows how to enable multi-select functionality using the `multiple()` method. It allows users to select multiple values from the list of options.  The data will be returned as a JSON array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('technologies')\n    ->multiple()\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with Data from Model (PHP)\nDESCRIPTION: This demonstrates how to initialize a Filament form with data from an existing Eloquent model.  The `mount()` method is used to fill the form with the post's data using `$this->form->fill($post->toArray())`. The `toArray()` method is called on the `$post` model to convert the model's attributes into an array that the form can use.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\npublic function mount(Post $post): void\n{\n    $this->form->fill($post->toArray());\n}\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Autocomplete Suggestions - PHP\nDESCRIPTION: This snippet demonstrates how to enable autocomplete suggestions for the TagsInput component. An array of suggestions is passed to the `suggestions()` method, providing users with pre-defined tag options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->suggestions([\n        'tailwindcss',\n        'alpinejs',\n        'laravel',\n        'livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining Importer Columns\nDESCRIPTION: This snippet demonstrates how to define the columns that can be imported by overriding the `getColumns()` method on the importer class. It creates `ImportColumn` objects, specifying names, labels, and validation rules.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\npublic static function getColumns(): array\n{\n    return [\n        ImportColumn::make('name')\n            ->requiredMapping()\n            ->rules(['required', 'max:255']),\n        ImportColumn::make('sku')\n            ->label('SKU')\n            ->requiredMapping()\n            ->rules(['required', 'max:32']),\n        ImportColumn::make('price')\n            ->numeric()\n            ->rules(['numeric', 'min:0']),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Query for Morphed Type - Filament PHP\nDESCRIPTION: This example demonstrates how to customize the database query that retrieves options for each morphed type using the `modifyOptionsQueryUsing()` method.  This allows for filtering the available options based on specific criteria.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MorphToSelect;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nMorphToSelect::make('commentable')\n    ->types([\n        MorphToSelect\\Type::make(Product::class)\n            ->titleAttribute('name')\n            ->modifyOptionsQueryUsing(fn (Builder $query) => $query->whereBelongsTo($this->team)),\n        MorphToSelect\\Type::make(Post::class)\n            ->titleAttribute('title')\n            ->modifyOptionsQueryUsing(fn (Builder $query) => $query->whereBelongsTo($this->team)),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Basic Replicate Action\nDESCRIPTION: This code snippet demonstrates the most basic usage of the `ReplicateAction` in FilamentPHP. It shows how to create a replicate action for an Eloquent record, assuming `$this->post` holds the record to be replicated. This replicates the record with default configurations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ReplicateAction;\n\nReplicateAction::make()\n    ->record($this->post)\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Delete Actions to Edit Page (PHP)\nDESCRIPTION: This code snippet shows how to add delete, force delete and restore actions to the header of a Filament Edit page. These actions allow users to manage soft deleted records from the edit form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/06-deleting-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        Actions\\DeleteAction::make(),\n        Actions\\ForceDeleteAction::make(),\n        Actions\\RestoreAction::make(),\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect After Deletion - Filament\nDESCRIPTION: This code snippet shows how to set up a custom redirect after a record is successfully deleted using the `successRedirectUrl()` method.  It redirects to a specified route.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nDeleteAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Number of Items Validation in Repeater - Filament/PHP\nDESCRIPTION: This snippet shows how to validate the minimum and maximum number of items allowed in a repeater using the `minItems()` and `maxItems()` methods. This example sets the minimum number of items to 2 and the maximum to 5.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->minItems(2)\n    ->maxItems(5)\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Cast for Multi-Select - PHP\nDESCRIPTION: This code shows how to cast the attribute of the Eloquent model to an array, so that the multi-select values are properly saved in the database as an array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass App extends Model\n{\n    protected $casts = [\n        'technologies' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Using the Replica\nDESCRIPTION: This snippet expands on redirecting after replication, demonstrating how to use the replicated model (`$replica`) to generate the redirect URL.  Here, it redirects to a route named 'posts.edit', passing the `$replica` model so that the edit route refers to the new, replicated record. The closure receives the Eloquent model `$replica` after replication.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nReplicateAction::make()\n    ->successRedirectUrl(fn (Model $replica): string => route('posts.edit', [\n        'post' => $replica,\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Resource with View Page (Artisan)\nDESCRIPTION: This command creates a new Filament resource with an associated View page. The `--view` flag tells the Filament generator to include the necessary files and configurations for viewing records.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource User --view\n```\n\n----------------------------------------\n\nTITLE: Counting Relationships\nDESCRIPTION: This PHP code shows how to count the number of related records using the `counts()` method. The name of the relationship is passed to the method, and the column name must follow the convention of `relationship_count`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('users_count')->counts('users')\n```\n\n----------------------------------------\n\nTITLE: Relation Managers for Multiple View Pages (Filament)\nDESCRIPTION: This snippet provides an example of how to define different relation managers for separate View pages (e.g., ViewCustomer.php and ViewCustomerContact.php). Each page has its own `getAllRelationManagers()` method to define its relation managers.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// ViewCustomer.php\nprotected function getAllRelationManagers(): array\n{\n    return [\n        RelationManagers\\OrdersRelationManager::class,\n        RelationManagers\\SubscriptionsRelationManager::class,\n    ];\n}\n\n// ViewCustomerContact.php \nprotected function getAllRelationManagers(): array\n{\n    return [\n        RelationManagers\\ContactsRelationManager::class,\n        RelationManagers\\AddressesRelationManager::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing New Option Creation - Filament PHP\nDESCRIPTION: This example demonstrates how to customize the creation process of the new option defined in the form using the `createOptionUsing()` method.  The method should return the primary key of the newly created record. This allows for custom logic when creating the related record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->createOptionForm([\n       // ...\n    ])\n    ->createOptionUsing(function (array $data): int {\n        return auth()->user()->team->members()->create($data)->getKey();\n    })\n```\n\n----------------------------------------\n\nTITLE: Unique Validation Ignoring Current Record in Filament\nDESCRIPTION: Demonstrates using the `unique` validation rule in a Filament form within Panel Builder, ignoring the current record. This is useful for update forms where the user might not be changing the unique field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nField::make('email')->unique(ignoreRecord: true)\n```\n\n----------------------------------------\n\nTITLE: Adding View Action to Table (Filament)\nDESCRIPTION: This code demonstrates how to add a `ViewAction` to a Filament table. The `ViewAction` allows users to view a record's details from the table. This example shows the `actions` array within the table definition.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->actions([\n            Tables\\Actions\\ViewAction::make(),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in a Text Column using Filament PHP\nDESCRIPTION: These examples show how to format numbers in a TextColumn using the `numeric()` method.  The number of decimal places and locale can be customized. The final example shows setting a default locale in a service provider.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('stock')\n    ->numeric()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('stock')\n    ->numeric(decimalPlaces: 0)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('stock')\n    ->numeric(locale: 'nl')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\nTable::$defaultNumberLocale = 'nl';\n```\n\n----------------------------------------\n\nTITLE: Summarizing Groups of Rows in Filament Table (PHP)\nDESCRIPTION: Demonstrates how to summarize groups of rows in a Filament table and hide the individual rows, showing only the group summary. This is useful for reporting scenarios where only the aggregated data is needed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            TextColumn::make('views_count')\n                ->summarize(Sum::make()),\n            TextColumn::make('likes_count')\n                ->summarize(Sum::make()),\n        ])\n        ->defaultGroup('category')\n        ->groupsOnly();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Items for a Repeater - PHP\nDESCRIPTION: This snippet demonstrates how to set a default number of empty items for a repeater using the `defaultItems()` method. In this case, 3 empty items will be created when the form is loaded without existing data.  This is useful for pre-populating the repeater with a certain number of rows.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->defaultItems(3)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disabling a Filament Form Field\nDESCRIPTION: This code snippet demonstrates how to conditionally disable a Filament form field based on a boolean value, such as a user's admin status, using the `disabled()` method.  The field is disabled only if the condition is true.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->disabled(! auth()->user()->isAdmin())\n```\n\n----------------------------------------\n\nTITLE: Fixing Indistinct State in Repeater - Filament/PHP\nDESCRIPTION: This snippet demonstrates automatically fixing indistinct states by using the `fixIndistinctState()` method, which also implicitly enables `distinct()` and `live()` methods.  For checkbox fields, enabling one will automatically disable others. For select/radio fields, selecting an option will deselect it from other items.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('answers')\n    ->schema([\n        // ...\n        Checkbox::make('is_correct')\n            ->fixIndistinctState(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tenant for User in Filament with PHP\nDESCRIPTION: This code snippet shows how to implement the `HasDefaultTenant` contract on the user model. The `getDefaultTenant()` method allows you to customize the tenant to which the user is redirected upon login. It should return a tenant model instance or null.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasDefaultTenant;\nuse Filament\\Models\\Contracts\\HasTenants;\nuse Filament\\Panel;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass User extends Model implements FilamentUser, HasDefaultTenant, HasTenants\n{\n    // ...\n\n    public function getDefaultTenant(Panel $panel): ?Model\n    {\n        return $this->latestTeam;\n    }\n\n    public function latestTeam(): BelongsTo\n    {\n        return $this->belongsTo(Team::class, 'latest_team_id');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Record (PHP)\nDESCRIPTION: This code snippet demonstrates how to access the current record in a widget used on an Edit or View page. A public property `$record` of type `Model` is defined on the widget class. Filament automatically populates this property with the current record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic ?Model $record = null;\n```\n\n----------------------------------------\n\nTITLE: Setting up Bulk Actions in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to define bulk actions in a Filament table. It uses the `$table->bulkActions()` method within the `table()` function to define the actions that will be displayed when rows are selected. The `Table` dependency needs to be injected in the class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Form Data Before Saving\nDESCRIPTION: This snippet illustrates how to use the `mutateFormDataUsing()` method to modify the form data before it's saved to the database. In this example, it adds the user's ID to the data array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->mutateFormDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Autofocusing a Filament Form Field\nDESCRIPTION: This code snippet shows how to set focus on a Filament form field when the form is loaded using the `autofocus()` method. This is useful for improving the user experience by automatically focusing on the first important field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->autofocus()\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix Text\nDESCRIPTION: This snippet demonstrates how to add prefix and suffix text to a text input field. This allows for displaying units or other context around the input.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('domain')\n    ->prefix('https://')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Title (Method) (PHP)\nDESCRIPTION: Shows an alternative approach to customizing the page title by overriding the `getTitle()` method.  This allows for more dynamic title generation, including localization.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Contracts\\Support\\Htmlable;\n\npublic function getTitle(): string | Htmlable\n{\n    return __('Custom Page Title');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget Grid Columns (PHP)\nDESCRIPTION: Demonstrates how to customize the number of grid columns used to display widgets in the header.  The `getHeaderWidgetsColumns()` method is overridden to return the desired number of columns. Returns integer.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getHeaderWidgetsColumns(): int | array\n{\n    return 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Confirmation Action in Filament PHP\nDESCRIPTION: This code snippet demonstrates how to create a Filament action named 'delete' that requires user confirmation before executing. Upon confirmation, the action deletes the associated client record. The action is configured to trigger a confirmation modal before proceeding with the deletion.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/02-overview.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nAction::make('delete')\n    ->requiresConfirmation()\n    ->action(fn () => $this->client->delete())\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid Layout Component - PHP\nDESCRIPTION: This code snippet demonstrates how to create a Grid layout component with 2 columns in Filament.  It requires the Filament Forms package to be installed. The `schema()` method is used to define the child components within the grid.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/01-getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Grid;\n\nGrid::make(2)\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Tweaking Search Debounce - Filament Select\nDESCRIPTION: This snippet illustrates how to adjust the search debounce time (in milliseconds) for a Filament searchable select component. The `searchDebounce()` method is used to specify the delay before initiating a search after the user types.  A lower debounce value results in more frequent network requests. The `author_id` is linked to the `author` relationship, displaying the `name` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable()\n    ->searchDebounce(500)\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Filters Below Table Content (Filament, PHP)\nDESCRIPTION: This snippet shows how to render filters below the table content instead of in a dropdown using `FiltersLayout::BelowContent`. Similar to displaying filters above, this offers a directly visible filtering interface at the bottom of the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::BelowContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Grouping Bulk Actions (PHP)\nDESCRIPTION: This snippet shows the shorthand method `groupedBulkActions()` to group bulk actions. This simplifies the configuration when all bulk actions should be grouped within a dropdown. The dependencies include Table, BulkAction, and BulkActionGroup facades.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkAction;\nuse Filament\\Tables\\Actions\\BulkActionGroup;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groupedBulkActions([\n            BulkAction::make('delete')\n                ->requiresConfirmation()\n                ->action(fn (Collection $records) => $records->each->delete()),\n            BulkAction::make('forceDelete')\n                ->requiresConfirmation()\n                ->action(fn (Collection $records) => $records->each->forceDelete()),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping Characters from Masked Input\nDESCRIPTION: This snippet demonstrates how to strip specific characters from a masked input before validation and saving the data.  This is used to clean the data sent to the server.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\RawJs;\n\nTextInput::make('amount')\n    ->mask(RawJs::make('$money($input)'))\n    ->stripCharacters(',')\n    ->numeric()\n```\n\n----------------------------------------\n\nTITLE: Adding an HTML Hint to a Filament Form Field\nDESCRIPTION: This code snippet demonstrates adding an HTML hint next to the label of a Filament form field using the `hint()` method and `HtmlString`.  This allows for rendering styled links and other HTML elements within the hint.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\HtmlString;\n\nTextInput::make('password')\n    ->hint(new HtmlString('<a href=\"/forgotten-password\">Forgotten your password?</a>'))\n\nTextInput::make('password')\n    ->hint(str('[Forgotten your password?](/forgotten-password)')->inlineMarkdown()->toHtmlString())\n\nTextInput::make('password')\n    ->hint(view('forgotten-password-hint'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Editor Empty Fill Color\nDESCRIPTION: This snippet shows how to customize the empty fill color of the image editor using the `imageEditorEmptyFillColor()` method. The empty space around the image will be filled with the specified color.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->imageEditor()\n    ->imageEditorEmptyFillColor('#000000')\n```\n\n----------------------------------------\n\nTITLE: Define Resource Form - Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to define a form in a Filament Resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Forms\\Form;\nuse Filament\\Resources\\Resource;\n\nclass CategoryResource extends Resource\n{\n    public static function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                static::getNameFormField(),\n                static::getSlugFormField(),\n                // ...\n            ]);\n    }\n    \n    public static function getNameFormField(): Forms\\Components\\TextInput\n    {\n        return TextInput::make('name')\n            ->required()\n            ->live()\n            ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state)));\n    }\n    \n    public static function getSlugFormField(): Forms\\Components\\TextInput\n    {\n        return TextInput::make('slug')\n            ->disabled()\n            ->required()\n            ->unique(Category::class, 'slug', fn ($record) => $record);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Searchable Select - PHP\nDESCRIPTION: This snippet demonstrates how to enable a search input within the select field using the `searchable()` method. This is useful when dealing with a large number of options, allowing users to quickly find the desired value. It requires an Eloquent model User to retrieve the data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->label('Author')\n    ->options(User::all()->pluck('name', 'id'))\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Mutating Record Data Before Form Fill\nDESCRIPTION: Illustrates how to modify record data before it is populated into the form using `mutateRecordDataUsing()`. This allows for adding or modifying data before the form is displayed to the user. Requires Filament and Laravel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nEditAction::make()\n    ->mutateRecordDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Preloading Relationship Options - PHP\nDESCRIPTION: This snippet demonstrates how to preload searchable relationship options using the `preload()` method. This populates the options when the page loads instead of when the user searches. Requires the `searchable()` method to be present.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable()\n    ->preload()\n```\n\n----------------------------------------\n\nTITLE: Importing Resource Records with ImportAction (PHP)\nDESCRIPTION: This code snippet demonstrates how to add an `ImportAction` to the header of a Filament resource's list page. It uses the `ProductImporter` class to handle the importing of data from a CSV file. It also includes a standard CreateAction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        Actions\\ImportAction::make()\n            ->importer(ProductImporter::class),\n        Actions\\CreateAction::make(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the panel path in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the path at which a Filament panel is accessible. The `path()` method of the `Panel` object is used to set the desired path.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->path('app');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Filters in Filament\nDESCRIPTION: This code snippet demonstrates how to define filters within a Filament table using the `$table->filters()` method. The filters array is where individual filters are configured.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for Livewire Refresh (JavaScript)\nDESCRIPTION: This JavaScript code configures Vite to automatically refresh the browser when Livewire components are updated.  This improves the development workflow by automatically updating the browser after changes to Livewire components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport laravel, { refreshPaths } from 'laravel-vite-plugin'\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: [\n                ...refreshPaths,\n                'app/Livewire/**',\n            ],\n        }),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Toolbar Buttons - Filament PHP\nDESCRIPTION: This snippet demonstrates how to customize the toolbar buttons of the Rich Editor component.  The `toolbarButtons()` method is used to define an array of button names to be displayed in the toolbar. The options shown here are the defaults. In addition to these, `'h1'` is also available:\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/10-rich-editor.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->toolbarButtons([\n        'attachFiles',\n        'blockquote',\n        'bold',\n        'bulletList',\n        'codeBlock',\n        'h2',\n        'h3',\n        'italic',\n        'link',\n        'orderedList',\n        'redo',\n        'strike',\n        'underline',\n        'undo',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Eloquent Boolean Cast Setup PHP\nDESCRIPTION: This snippet shows how to define a boolean cast for an Eloquent model attribute. This ensures that the database value is properly cast to a boolean when retrieved and displayed by the Filament toggle.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Item Actions to Filament Builder\nDESCRIPTION: This code snippet shows how to add custom actions to the header of each builder item using the `extraItemActions()` method and `Action` objects. It illustrates how to access the item's data and perform custom actions, such as sending an email.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Mail;\n\nBuilder::make('content')\n    ->blocks([\n        Builder\\Block::make('contactDetails')\n            ->schema([\n                TextInput::make('email')\n                    ->label('Email address')\n                    ->email()\n                    ->required(),\n                // ...\n            ]),\n        // ...\n    ])\n    ->extraItemActions([\n        Action::make('sendEmail')\n            ->icon('heroicon-m-square-2-stack')\n            ->action(function (array $arguments, Builder $component): void {\n                $itemData = $component->getItemState($arguments['item']);\n                \n                Mail::to($itemData['email'])\n                    ->send(\n                        // ...\n                    );\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Select Field - PHP\nDESCRIPTION: This code snippet demonstrates how to create a basic select field with predefined options using the Filament form builder. It defines a 'status' field with options for 'draft', 'reviewing', and 'published'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Nested Validation Rules - PHP\nDESCRIPTION: This snippet adds validation rules to each individual tag within the TagsInput component. The `nestedRecursiveRules()` method accepts an array of validation rules that will be applied to each tag entered by the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->nestedRecursiveRules([\n        'min:3',\n        'max:255',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining a Filament Cluster Class (PHP)\nDESCRIPTION: This code snippet shows the basic structure of a Filament cluster class. It extends the `Filament\\Clusters\\Cluster` class and allows customization of the cluster's navigation icon using the `$navigationIcon` property. Other navigation properties like `$navigationLabel`, `$navigationSort`, and `$navigationGroup` can be used to customize the cluster's main navigation item.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/10-clusters.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Clusters;\n\nuse Filament\\Clusters\\Cluster;\n\nclass Settings extends Cluster\n{\n    protected static ?string $navigationIcon = 'heroicon-o-squares-2x2';\n}\n```\n\n----------------------------------------\n\nTITLE: Halting the Creation Process - Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to halt the record creation process in Filament using the `$this->halt()` method within a lifecycle hook. In this example, the `beforeCreate()` hook checks if the user has an active subscription and, if not, sends a warning notification and halts the creation process.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nprotected function beforeCreate(): void\n{\n    if (! auth()->user()->team->subscribed()) {\n        Notification::make()\n            ->warning()\n            ->title('You don\\'t have an active subscription!')\n            ->body('Choose a plan to continue.')\n            ->persistent()\n            ->actions([\n                Action::make('subscribe')\n                    ->button()\n                    ->url(route('subscribe'), shouldOpenInNewTab: true),\n            ])\n            ->send();\n    \n        $this->halt();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length in a Filament PHP Text Column\nDESCRIPTION: This example shows how to limit the length of the text displayed in a TextColumn using the `limit()` method. It also includes an example of how to add a tooltip that displays the full text if it exceeds the limit.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->limit(50)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->limit(50)\n    ->tooltip(function (TextColumn $column): ?string {\n        $state = $column->getState();\n\n        if (strlen($state) <= $column->getCharacterLimit()) {\n            return null;\n        }\n\n        // Only render the tooltip if the column content exceeds the length limit.\n        return $state;\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Select Filter in Filament\nDESCRIPTION: This code snippet demonstrates how to create a basic select filter in Filament using the `SelectFilter` class. It defines the available options for filtering the 'status' column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Bare Minimum Custom Notification View (Blade)\nDESCRIPTION: This code snippet shows the bare minimum required to create a custom notification view using Blade. It uses the `x-filament-notifications::notification` component, passing the `$notification` variable to it. This allows you to override the default notification appearance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/05-customizing-notifications.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament-notifications::notification :notification=\"$notification\">\n    {{-- Notification content --}}\n</x-filament-notifications::notification>\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with Custom Column in Filament\nDESCRIPTION: Demonstrates using the `unique` validation rule in a Filament form, specifying a custom column. It checks the 'email_address' column for uniqueness when validating the 'email' field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nField::make('email')->unique(column: 'email_address')\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Column Label\nDESCRIPTION: This PHP code snippet shows how to customize the label of an export column using the `label()` method. This allows you to specify a different display name for the column in the export file, overriding the default generated from the column name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('sku')\n    ->label('SKU')\n```\n\n----------------------------------------\n\nTITLE: Halting the Saving Process\nDESCRIPTION: Illustrates how to halt the saving process using `$action->halt()` within a lifecycle hook or mutation method.  This is useful for preventing the record from being saved based on certain conditions. Requires Filament, Laravel and Filament Notifications.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\nuse Filament\\Tables\\Actions\\EditAction;\n\nEditAction::make()\n    ->before(function (EditAction $action, Post $record) {\n        if (! $record->team->subscribed()) {\n            Notification::make()\n                ->warning()\n                ->title('You don\\'t have an active subscription!')\n                ->body('Choose a plan to continue.')\n                ->persistent()\n                ->actions([\n                    Action::make('subscribe')\n                        ->button()\n                        ->url(route('subscribe'), shouldOpenInNewTab: true),\n                ])\n                ->send();\n        \n            $action->halt();\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Halting the Creation Process\nDESCRIPTION: This snippet demonstrates how to halt the creation process from within a lifecycle hook or mutation method using `$action->halt()`. It includes an example of sending a notification and halting the action if a team is not subscribed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nCreateAction::make()\n    ->before(function (CreateAction $action, Post $record) {\n        if (! $record->team->subscribed()) {\n            Notification::make()\n                ->warning()\n                ->title('You don\\'t have an active subscription!')\n                ->body('Choose a plan to continue.')\n                ->persistent()\n                ->actions([\n                    Action::make('subscribe')\n                        ->button()\n                        ->url(route('subscribe'), shouldOpenInNewTab: true),\n                ])\n                ->send();\n        \n            $action->halt();\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale for DatePicker in Filament\nDESCRIPTION: This snippet demonstrates how to configure the locale for the DatePicker's display, using the `locale()` method. This allows you to use a different locale from the app's configuration for rendering the date.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n    ->displayFormat('d F Y')\n    ->locale('fr')\n```\n\n----------------------------------------\n\nTITLE: Add Extra Item Actions to Repeater (PHP)\nDESCRIPTION: This example demonstrates adding a custom action to each item in a Filament repeater field. It creates an 'sendEmail' action button with an envelope icon and defines an action closure to send an email to the address specified in the repeater item.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\Facades\\Mail;\n\nRepeater::make('members')\n    ->schema([\n        TextInput::make('email')\n            ->label('Email address')\n            ->email(),\n        // ...\n    ])\n    ->extraItemActions([\n        Action::make('sendEmail')\n            ->icon('heroicon-m-envelope')\n            ->action(function (array $arguments, Repeater $component): void {\n                $itemData = $component->getItemState($arguments['item']);\n\n                Mail::to($itemData['email'])\n                    ->send(\n                        // ...\n                    );\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Custom No Search Results Message - Filament PHP\nDESCRIPTION: This snippet demonstrates how to display a custom message when no search results are found in a searchable select or multi-select, using the `noSearchResultsMessage()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable()\n    ->noSearchResultsMessage('No authors found.')\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Length Validation\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum length validation rules for a text input, using `minLength()` and `maxLength()` methods. These rules are enforced on both frontend and backend.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->minLength(2)\n    ->maxLength(255)\n```\n\n----------------------------------------\n\nTITLE: Mutating Related Item Data Before Saving - Filament/PHP\nDESCRIPTION: This snippet demonstrates how to mutate the data of an existing related item before saving it to the database using the `mutateRelationshipDataBeforeSaveUsing()` method. The closure receives the item's data in the `$data` variable.  You can either return the modified data array or `null` to prevent the item from being saved. This example sets the 'user_id' to the currently authenticated user's ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n    ->mutateRelationshipDataBeforeSaveUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant Registration Page\nDESCRIPTION: This snippet demonstrates how to create a tenant registration page by extending the `Filament\\Pages\\Tenancy\\RegisterTenant` class. It includes defining a form schema and handling the registration process to create a new tenant and associate it with the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Pages\\Tenancy;\n\nuse App\\Models\\Team;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Form;\nuse Filament\\Pages\\Tenancy\\RegisterTenant;\n\nclass RegisterTeam extends RegisterTenant\n{\n    public static function getLabel(): string\n    {\n        return 'Register team';\n    }\n\n    public function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                TextInput::make('name'),\n                // ...\n            ]);\n    }\n\n    protected function handleRegistration(array $data): Team\n    {\n        $team = Team::create($data);\n\n        $team->members()->attach(auth()->user());\n\n        return $team;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define 'Type' Select Input in Filament Form\nDESCRIPTION: This code adds a select input field for the `type` attribute to the Filament form, allowing users to choose between 'cat', 'dog', or 'rabbit'.  The keys of the `options` array match the database values, and the values are used as the labels in the select field. The field is required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms;\n\nForms\\Components\\Select::make('type')\n    ->options([\n        'cat' => 'Cat',\n        'dog' => 'Dog',\n        'rabbit' => 'Rabbit',\n    ])\n    ->required()\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for DateTimePicker in Filament\nDESCRIPTION: This snippet demonstrates how to configure a DateTimePicker to handle dates in a specific timezone using the `timezone()` method. This allows users to manage dates according to their own timezone, while the data is stored in the app's configured timezone.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->timezone('America/New_York')\n```\n\n----------------------------------------\n\nTITLE: Customizing Import Validation Messages in Filament Importer (PHP)\nDESCRIPTION: This code snippet demonstrates how to override the default validation messages by overriding the `getValidationMessages()` method on your importer class. This allows customizing the error messages displayed to the user when validation fails.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\npublic function getValidationMessages(): array\n{\n    return [\n        'name.required' => 'The name column must not be empty.',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Component Action - PHP\nDESCRIPTION: This snippet demonstrates how to define an action object inside a Filament form component. It shows how to use the `Action::make()` method to create an action, set its icon and color, require confirmation, and define the action's functionality using the `action()` method. The action takes a `ResetStars` object as a dependency.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Actions\\ResetStars;\nuse Filament\\Forms\\Components\\Actions\\Action;\n\nAction::make('resetStars')\n    ->icon('heroicon-m-x-mark')\n    ->color('danger')\n    ->requiresConfirmation()\n    ->action(function (ResetStars $resetStars) {\n        $resetStars();\n    })\n```\n\n----------------------------------------\n\nTITLE: Simple Repeater with One Field - Filament/PHP\nDESCRIPTION: This snippet demonstrates creating a simple repeater with a single field using the `simple()` method. This example uses a TextInput field for 'email' and configures it as required and of email type.  Simple repeaters use a flat array to store data, rather than a nested array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\n\nRepeater::make('invitations')\n    ->simple(\n        TextInput::make('email')\n            ->email()\n            ->required(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Success Notification Title\nDESCRIPTION: Shows how to customize the title of the success notification using the `successNotificationTitle()` method. Requires Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEditAction::make()\n    ->successNotificationTitle('User updated')\n```\n\n----------------------------------------\n\nTITLE: Mutating State After Casting\nDESCRIPTION: This demonstrates how to mutate the state after it has been cast, using the `castStateUsing()` method. You can also access the original state before it was cast by defining an `$originalState` argument in the function.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric()\n    ->castStateUsing(function (float $state): ?float {\n        if (blank($state)) {\n            return null;\n        }\n    \n        return round($state * 100);\n    })\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric()\n    ->castStateUsing(function (float $state, mixed $originalState): ?float {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Replicate Action in a Table\nDESCRIPTION: This snippet demonstrates how to integrate `ReplicateAction` within a Filament table. It showcases the configuration required to add a replicate action to each row of a table, enabling easy record duplication from the table interface. The `Filament\\Tables\\Actions\\ReplicateAction` class is used here.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ReplicateAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            ReplicateAction::make(),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Editor Initialization (PHP)\nDESCRIPTION: This snippet demonstrates how to create a basic Markdown editor component within a Filament form using the `MarkdownEditor` class. It sets the 'content' field to use the Markdown editor.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/11-markdown-editor.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Saving Process\nDESCRIPTION: Shows how to completely customize the record saving process using the `using()` method. This allows for complete control over how the record is updated in the database. Requires Filament, Laravel, and Eloquent.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nEditAction::make()\n    ->using(function (Model $record, array $data): Model {\n        $record->update($data);\n\n        return $record;\n    })\n```\n\n----------------------------------------\n\nTITLE: Requiring Mapping for New Records Only\nDESCRIPTION: This snippet demonstrates how to require a column only when creating new records, allowing updates to skip mapping if not needed using `requiredMappingForNewRecordsOnly()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->requiredMappingForNewRecordsOnly()\n```\n\n----------------------------------------\n\nTITLE: Active URL Validation - Filament\nDESCRIPTION: Validates that the field contains a valid A or AAAA record using PHP's `dns_get_record()` function. It uses the `activeUrl()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->activeUrl()\n```\n\n----------------------------------------\n\nTITLE: Enabling Search on Relationship Select Filter in Filament\nDESCRIPTION: This snippet demonstrates how to enable a search input for the select filter using the `searchable()` method, allowing users to easily find options within a large set of data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name')\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns Within Section - PHP\nDESCRIPTION: This snippet demonstrates how to create a grid layout within a section using the `columns()` method.  This allows you to arrange form fields in a multi-column layout within the section. Requires Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Heading')\n    ->schema([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Before or Equal Date Validation - Filament\nDESCRIPTION: Validates that the field contains a date before or equal to a specified date string or another field's value. It utilizes the `beforeOrEqual()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')->beforeOrEqual('end of this month')\n```\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')->beforeOrEqual('end_date')\nField::make('end_date')\n```\n\n----------------------------------------\n\nTITLE: Selected Items Validation - Filament Multi-Select\nDESCRIPTION: This example demonstrates how to validate the minimum and maximum number of selected items in a Filament multi-select component using `minItems()` and `maxItems()` methods. It defines a multi-select field named 'technologies' with specified options and sets the allowed selection range between 1 and 3 items.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('technologies')\n    ->multiple()\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n    ->minItems(1)\n    ->maxItems(3)\n\n```\n\n----------------------------------------\n\nTITLE: Eloquent Boolean Cast (PHP)\nDESCRIPTION: This code snippet demonstrates how to add a `boolean` cast to an Eloquent model property. This is crucial for ensuring that the checkbox's value is correctly saved as a boolean in the database. Defines the `$casts` property in the `User` model to cast the 'is_admin' attribute to a boolean.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/04-checkbox.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to a Text Column in Filament PHP\nDESCRIPTION: This example illustrates how to add a description below the contents of a TextColumn using the `description()` method. The description is dynamically generated using the `Post` record's description attribute.  The second example demonstrates positioning the description above the content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->description(fn (Post $record): string => $record->description)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->description(fn (Post $record): string => $record->description, position: 'above')\n```\n\n----------------------------------------\n\nTITLE: Using ImportAction in Filament\nDESCRIPTION: This snippet demonstrates how to use the `ImportAction` class to add an import button to a Filament resource. It configures the action to use a specific importer class (`ProductImporter`).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Actions\\ImportAction;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Uploads (PHP)\nDESCRIPTION: This snippet demonstrates how to configure image uploads for the Markdown editor, including specifying the disk, directory, and visibility of the uploaded files. It utilizes the `fileAttachmentsDisk()`, `fileAttachmentsDirectory()`, and `fileAttachmentsVisibility()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/11-markdown-editor.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n    ->fileAttachmentsDisk('s3')\n    ->fileAttachmentsDirectory('attachments')\n    ->fileAttachmentsVisibility('private')\n```\n\n----------------------------------------\n\nTITLE: Enabling Owner Creation Modal in Select - PHP\nDESCRIPTION: This snippet demonstrates how to add a modal form to the 'owner_id' select field, allowing users to create new owners directly from the patient creation/edit form.  It uses the `createOptionForm()` method to embed a modal form with `TextInput` fields for the owner's name, email address, and phone number. Validation rules are applied to ensure data integrity, and labels are customized for better user experience.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\n\nForms\\Components\\Select::make('owner_id')\n    ->relationship('owner', 'name')\n    ->searchable()\n    ->preload()\n    ->createOptionForm([\n        Forms\\Components\\TextInput::make('name')\n            ->required()\n            ->maxLength(255),\n        Forms\\Components\\TextInput::make('email')\n            ->label('Email address')\n            ->email()\n            ->required()\n            ->maxLength(255),\n        Forms\\Components\\TextInput::make('phone')\n            ->label('Phone number')\n            ->tel()\n            ->required(),\n    ])\n    ->required()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Select Column in Filament\nDESCRIPTION: This code snippet demonstrates how to create a basic Select column in a Filament table. It sets the column's options to 'draft', 'reviewing', and 'published'. The 'status' column in the database will be updated based on the selected option.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/06-select.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SelectColumn;\n\nSelectColumn::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament to Use the Tenant Profile Page\nDESCRIPTION: This code snippet shows how to configure Filament to use the custom tenant profile page. This is achieved by specifying the page class within the `tenantProfile()` method in the `Panel` configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Pages\\Tenancy\\EditTeamProfile;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantProfile(EditTeamProfile::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Masking\nDESCRIPTION: This snippet demonstrates how to apply an input mask to a text input using Alpine.js's mask plugin. This enforces a specific format for the input value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('birthday')\n    ->mask('99/99/9999')\n    ->placeholder('MM/DD/YYYY')\n```\n\n----------------------------------------\n\nTITLE: Triggering an Action with wire:click (Blade)\nDESCRIPTION: This Blade snippet uses the `wire:click` directive to call the `mountAction()` method when a button is clicked. It passes the action name ('test') and an array of arguments (id: 12345).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<button wire:click=\"mountAction('test', { id: 12345 })\">\n    Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Adding Owner Select to Patient Form - PHP\nDESCRIPTION: This snippet demonstrates how to add an 'owner_id' select field to the Filament form for creating and editing patient records. It uses the `relationship()` method to link the select field to the 'owner' relationship defined in the Patient model, displaying the 'name' column from the related Owner model. The field is also marked as required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Forms\\Form;\n\npublic static function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            Forms\\Components\\TextInput::make('name')\n                ->required()\n                ->maxLength(255),\n            Forms\\Components\\Select::make('type')\n                ->options([\n                    'cat' => 'Cat',\n                    'dog' => 'Dog',\n                    'rabbit' => 'Rabbit',\n                ])\n                ->required(),\n            Forms\\Components\\DatePicker::make('date_of_birth')\n                ->required()\n                ->maxDate(now()),\n            Forms\\Components\\Select::make('owner_id')\n                ->relationship('owner', 'name')\n                ->required(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position in Filter Tabs - PHP\nDESCRIPTION: Shows how to change the position of the icon in relation to the label using the `iconPosition()` method and the `IconPosition` enum. It allows the icon to be placed before or after the label. Requires `Filament\\Support\\Enums\\IconPosition`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\IconPosition;\n\nTab::make()\n    ->icon('heroicon-m-user-group')\n    ->iconPosition(IconPosition::After)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Repeater - PHP\nDESCRIPTION: This code snippet demonstrates how to create a basic repeater component with name and role fields. It uses `TextInput` and `Select` components within the repeater's schema. The `columns(2)` method arranges the fields in two columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\n\nRepeater::make('members')\n    ->schema([\n        TextInput::make('name')->required(),\n        Select::make('role')\n            ->options([\n                'member' => 'Member',\n                'administrator' => 'Administrator',\n                'owner' => 'Owner',\n            ])\n            ->required(),\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Implementing HasLabel Interface for Enum Labels in Filament\nDESCRIPTION: This code snippet demonstrates how to implement the `HasLabel` interface in a PHP enum to provide human-readable labels for enum values. It includes the enum definition with cases and a `getLabel()` method that returns the appropriate label based on the enum case. The `getLabel()` method can either return `$this->name` or use a `match` statement to explicitly define labels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/07-enums.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasLabel;\n\nenum Status: string implements HasLabel\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getLabel(): ?string\n    {\n        return $this->name;\n        \n        // or\n    \n        return match ($this) {\n            self::Draft => 'Draft',\n            self::Reviewing => 'Reviewing',\n            self::Published => 'Published',\n            self::Rejected => 'Rejected',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Tab in Query String - Filament Form (PHP)\nDESCRIPTION: This code snippet persists the current tab in the URL's query string using `persistTabInQueryString()`. This allows sharing the URL with a specific tab open.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->persistTabInQueryString()\n```\n\n----------------------------------------\n\nTITLE: Adding Tenant Route Prefix in Filament with PHP\nDESCRIPTION: This code demonstrates how to add a prefix to the tenant route using the `tenantRoutePrefix()` method. This allows for a custom URL structure for tenant routes. The `path()` method defines the base panel path, and `tenant()` specifies the tenant model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->path('admin')\n        ->tenant(Team::class)\n        ->tenantRoutePrefix('team');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Tenancy Globally in Filament with PHP\nDESCRIPTION: This code demonstrates how to disable tenancy scoping globally for all resources using `Resource::scopeToTenant(false)`. This should be called within a service provider's `boot()` method or a middleware. After this, tenancy must be explicitly enabled for each resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Resource;\n\nResource::scopeToTenant(false);\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isScopedToTenant = true;\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Locale\nDESCRIPTION: This snippet demonstrates formatting a number with a specific locale in a summarizer using the `numeric()` method and the `locale` argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make()->numeric(\n        locale: 'nl',\n    ))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tabs in Filament Form (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a basic tabs layout in a Filament form using the `Tabs` component. It defines three tabs, each with its own schema for form fields.  The first tab will be active by default.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding File Validation Rules to Filament ImportAction (PHP)\nDESCRIPTION: This demonstrates how to add new Laravel validation rules for the import file using the `fileRules()` method on the `ImportAction`.  Requires the Illuminate Validation Rules File class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rules\\File;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->fileRules([\n        'max:1024',\n        // or\n        File::types(['csv', 'txt'])->max(1024),\n    ]),\n```\n\n----------------------------------------\n\nTITLE: Registering Extra Colors in Filament\nDESCRIPTION: This code snippet demonstrates how to register an extra color to use throughout Filament's components. You can then use it as you would use the default colors such as 'primary', 'danger', etc. This enhances the visual customization capabilities of the Filament admin panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/04-colors.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'indigo' => Color::Indigo,\n]);\n```\n\n----------------------------------------\n\nTITLE: Generating Form Livewire Component with CLI (Bash)\nDESCRIPTION: This command demonstrates how to use the Filament CLI to generate a Livewire component with a pre-configured form structure. This can speed up the development process by providing a starting point for form creation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire-form RegistrationForm\n```\n\n----------------------------------------\n\nTITLE: Required Validation - Filament\nDESCRIPTION: Validates that the field's value must not be empty. It uses the `required()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->required()\n```\n\n----------------------------------------\n\nTITLE: Displaying Data From Relationships\nDESCRIPTION: This PHP code snippet demonstrates how to access columns within relationships using dot notation in the `ExportColumn::make()` method. This allows you to display data from related models directly in the exported data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('author.name')\n```\n\n----------------------------------------\n\nTITLE: Making Repeater Items Collapsible - PHP\nDESCRIPTION: This snippet shows how to make repeater items collapsible using the `collapsible()` method. This allows users to hide the content of individual items, which can be useful for long forms to improve usability.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n```\n\n----------------------------------------\n\nTITLE: Labelling Builder Items Based on Content\nDESCRIPTION: This snippet demonstrates how to dynamically set the label of a builder item based on its content using a closure. It shows how to access the item's data via the `$state` variable and return a dynamic label, defaulting to 'Untitled heading' if the content is not available.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder\\Block::make('heading')\n    ->schema([\n        TextInput::make('content')\n            ->live(onBlur: true)\n            ->required(),\n        // ...\n    ])\n    ->label(function (?array $state): string {\n        if ($state === null) {\n            return 'Heading';\n        }\n\n        return $state['content'] ?? 'Untitled heading';\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing the Column Used by a Select Filter in Filament\nDESCRIPTION: This snippet shows how to customize the column used by the select filter via the `attribute()` method, which allows you to map the filter to a different column name in the database, such as 'status_id'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->attribute('status_id')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Success Notification\nDESCRIPTION: Demonstrates how to customize the entire success notification using the `successNotification()` method, allowing for complete control over the notification's appearance and content.  Requires Filament and Filament Notifications.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nEditAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User updated')\n            ->body('The user has been saved successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks - Filament\nDESCRIPTION: This code snippet shows how to use the `before()` and `after()` methods to execute code before and after a record is deleted. These are lifecycle hooks that allow custom logic to be executed at specific points in the delete process.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDeleteAction::make()\n    ->before(function () {\n        // ...\n    })\n    ->after(function () {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Excluding Current Record in Recursive Relationships - PHP\nDESCRIPTION: Shows how to exclude the current record from the set of results when using recursive relationships, useful for parent-child relationships.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('parent_id')\n    ->relationship(name: 'parent', titleAttribute: 'name', ignoreRecord: true)\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Sum\nDESCRIPTION: This snippet demonstrates calculating the sum of all prices using the Sum summarizer within a Filament table's text column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make())\n```\n\n----------------------------------------\n\nTITLE: Adding Tabs to Filter Records - PHP\nDESCRIPTION: This snippet demonstrates how to add tabs above the table to filter records based on predefined conditions by scoping the Eloquent query using the `getTabs()` method and `Tab` objects.  The tabs 'active' and 'inactive' are added to filter records based on the 'active' field. Requires `Filament\\Resources\\Components\\Tab` and `Illuminate\\Database\\Eloquent\\Builder`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Components\\Tab;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function getTabs(): array\n{\n    return [\n        'all' => Tab::make(),\n        'active' => Tab::make()\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', true)),\n        'inactive' => Tab::make()\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', false)),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates in a Text Column using Filament PHP\nDESCRIPTION: These code snippets demonstrate how to format dates and times within a TextColumn. The `dateTime()` method formats the 'created_at' column using PHP date formatting tokens. The `since()` method formats the date using Carbon's `diffForHumans()` to display a human-readable time difference.  The third example adds a date tooltip.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->dateTime()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->since()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->since()\n    ->dateTimeTooltip()\n```\n\n----------------------------------------\n\nTITLE: Customizing Success Notification Title\nDESCRIPTION: This snippet shows how to customize the title of the success notification displayed after a successful record creation using the `successNotificationTitle()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->successNotificationTitle('User registered')\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament to use the Tenant Registration Page\nDESCRIPTION: This snippet demonstrates how to configure Filament to use the custom tenant registration page created earlier. This involves specifying the page class in the `tenantRegistration()` method of the `Panel` configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Pages\\Tenancy\\RegisterTeam;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantRegistration(RegisterTeam::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing User-Selectable Groupings - PHP\nDESCRIPTION: This snippet shows how to allow users to choose between different groupings for a Filament table.  The table will provide options to group by 'status' or 'category'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            'status',\n            'category',\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Form for Updating Author (PHP)\nDESCRIPTION: This snippet shows how to render a form within a modal to collect additional input from the user before running an action. It uses the `form()` method to define the form, including a Select component for choosing an author. The selected author ID is then used to update the record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\Select;\n\nAction::make('updateAuthor')\n    ->form([\n        Select::make('authorId')\n            ->label('Author')\n            ->options(User::query()->pluck('name', 'id'))\n            ->required(),\n    ])\n    ->action(function (array $data, Post $record): void {\n        $record->author()->associate($data['authorId']);\n        $record->save();\n    })\n```\n\n----------------------------------------\n\nTITLE: Sending a Simple Notification - PHP\nDESCRIPTION: This snippet shows how to create and send a basic success notification using the Filament PHP library. It requires the Filament Notifications package to be installed and configured. The notification is displayed using a session flash message.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse Filament\\Notifications\\Notification;\nuse Livewire\\Component;\n\nclass EditPost extends Component\n{\n    public function save(): void\n    {\n        // ...\n\n        Notification::make()\n            ->title('Saved successfully')\n            ->success()\n            ->send();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Polymorphic User Relationship (PHP)\nDESCRIPTION: This demonstrates how to configure a polymorphic `MorphTo` relationship for the user associated with an export.  First, the `user_id` column is replaced with `morphs('user')`. Then, the `Export::polymorphicUserRelationship()` method is called in a service provider's `boot()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$table->morphs('user');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Action to Create Page (PHP)\nDESCRIPTION: This snippet demonstrates adding a custom action (button) to the form actions section of a Filament resource's create page. The 'close' action triggers the `createAndClose` method on the page. It extends the existing form actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateUser extends CreateRecord\n{\n    // ...\n\n    protected function getFormActions(): array\n    {\n        return [\n            ...parent::getFormActions(),\n            Action::make('close')->action('createAndClose'),\n        ];\n    }\n\n    public function createAndClose(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating a Resource/Page with a Filament Cluster (PHP)\nDESCRIPTION: This code shows how to associate a resource or page with a specific cluster by defining the `$cluster` property.  Setting the `$cluster` property to the class name of the desired cluster will automatically place the resource/page within that cluster, modifying the panel's navigation and URL structure accordingly.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/10-clusters.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Clusters\\Settings;\n\nprotected static ?string $cluster = Settings::class;\n```\n\n----------------------------------------\n\nTITLE: Multiple Active Indicators for Filament Filters\nDESCRIPTION: This code demonstrates rendering multiple active indicators by returning an array of `Indicator` objects. It formats 'from' and 'until' dates and uses `removeField()` to ensure the correct field is reset when removing the filter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/05-custom.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Filters\\Indicator;\n\nFilter::make('created_at')\n    ->form([\n        DatePicker::make('from'),\n        DatePicker::make('until'),\n    ])\n    // ...\n    ->indicateUsing(function (array $data): array {\n        $indicators = [];\n\n        if ($data['from'] ?? null) {\n            $indicators[] = Indicator::make('Created from ' . Carbon::parse($data['from'])->toFormattedDateString())\n                ->removeField('from');\n        }\n\n        if ($data['until'] ?? null) {\n            $indicators[] = Indicator::make('Created until ' . Carbon::parse($data['until'])->toFormattedDateString())\n                ->removeField('until');\n        }\n\n        return $indicators;\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing the \"Select All\" action in CheckboxList (PHP)\nDESCRIPTION: This example demonstrates how to customize the \"Select All\" action in a Filament CheckboxList using the `selectAllAction()` method. A function is passed to the method that has access to the `$action` object allowing customization of the action, such as changing the label.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->selectAllAction(\n        fn (Action $action) => $action->label('Select all technologies'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Calculated Export Column State\nDESCRIPTION: This PHP code shows how to calculate the state of an export column using a callback function passed to the `state()` method. This allows you to derive the column's value based on the `$record`, enabling custom calculations and transformations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Order;\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('amount_including_vat')\n    ->state(function (Order $record): float {\n        return $record->amount * (1 + $record->vat_rate);\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing maximum content width in Filament (PHP)\nDESCRIPTION: This code configures the maximum width of the content area within a Filament panel.  The `maxContentWidth()` method is used to specify the desired width, using Tailwind's max-width scale enums.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Enums\\MaxWidth;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->maxContentWidth(MaxWidth::Full);\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Action in Filament Table\nDESCRIPTION: Shows how to implement an EditAction within a Filament table.  The EditAction is added to the table's actions array, which renders an edit button for each row. Requires Filament and Filament Tables.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Actions\\EditAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            EditAction::make()\n                ->form([\n                    TextInput::make('title')\n                        ->required()\n                        ->maxLength(255),\n                    // ...\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Extreme Pagination Links in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to add links to the first and last pages of pagination in a Filament table using the `extremePaginationLinks()` method. It enhances user navigation for tables with many pages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->extremePaginationLinks();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Hint Icon\nDESCRIPTION: Adds a tooltip to the hint icon of a TextEntry. The `hintIcon()` method accepts an icon name and a `tooltip` parameter. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint(str('[Documentation](/documentation)')->inlineMarkdown()->toHtmlString())\n    ->hintIcon('heroicon-m-question-mark-circle', tooltip: 'Read it!')\n```\n\n----------------------------------------\n\nTITLE: Force Delete Lifecycle Hooks - PHP\nDESCRIPTION: Demonstrates how to use the `before()` and `after()` methods to execute code before and after a record is force-deleted. It requires the Filament\\Actions\\ForceDeleteAction class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nForceDeleteAction::make()\n    ->before(function () {\n        // ...\n    })\n    ->after(function () {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Filament Filter\nDESCRIPTION: This snippet shows how to create a basic filter using `Filter::make()` and define its scope using the `query()` method.  The `query()` method accepts a callback function that modifies the Eloquent query builder to apply the filter's condition.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nFilter::make('is_featured')\n    ->query(fn (Builder $query): Builder => $query->where('is_featured', true))\n```\n\n----------------------------------------\n\nTITLE: Enabling Search for Options in CheckboxList - PHP\nDESCRIPTION: This code snippet shows how to enable a search input for the CheckboxList using the `searchable()` method. This is useful when there are many options to choose from, allowing users to quickly find the desired options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->searchable()\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length in Summarizer\nDESCRIPTION: This snippet demonstrates limiting the length of the summary's value using the `limit()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('sku')\n    ->summarize(Range::make()->limit(5))\n```\n\n----------------------------------------\n\nTITLE: Registering Edit Page in Resource\nDESCRIPTION: This code snippet demonstrates how to register the newly created Edit page within the `getPages()` method of the Filament resource. This makes the page accessible within the Filament admin panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/04-editing-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => Pages\\ListCustomers::route('/'),\n        'create' => Pages\\CreateCustomer::route('/create'),\n        'view' => Pages\\ViewCustomer::route('/{record}'),\n        'edit' => Pages\\EditCustomer::route('/{record}/edit'),\n        'edit-contact' => Pages\\EditCustomerContact::route('/{record}/edit/contact'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Database Notifications in Filament Panel (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable database notifications for a Filament Panel.  It utilizes the `databaseNotifications()` method within the `panel()` method to enable this feature.  No specific dependencies are listed beyond the Filament Panel package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/07-notifications.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseNotifications();\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to Widgets on Pages (PHP)\nDESCRIPTION: Demonstrates how to pass Livewire properties to widgets when registering them on a page.  Uses `make()` method to define the properties, which are then mapped to public properties on the widget class. Requires the App\\Filament\\Widgets\\StatsOverviewWidget class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Widgets\\StatsOverviewWidget;\n\nprotected function getHeaderWidgets(): array\n{\n    return [\n        StatsOverviewWidget::make([\n            'status' => 'active',\n        ]),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Color Palette from Hex Code\nDESCRIPTION: This code snippet shows how to generate a custom color palette for Filament from a hex code using the `Color::hex()` method. This allows defining a color by its hex representation and creating the corresponding shade variations. The generated color palette can then be registered using `FilamentColor::register()`. The hex code needs to be a valid CSS hex color code string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/04-colors.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => Color::hex('#ff0000'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Color Picker Validation - PHP\nDESCRIPTION: This code snippet demonstrates how to validate the color picker values using Laravel's validation rules and regular expressions. Each color format (HEX, HSL, RGB, RGBA) has a corresponding regex to ensure the input matches the expected format.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/17-color-picker.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('hex_color')\n    ->regex('/^#([a-f0-9]{6}|[a-f0-9]{3})\\b$/')\n\nColorPicker::make('hsl_color')\n    ->hsl()\n    ->regex('/^hsl\\(\\s*(\\d+)\\s*,\\s*(\\d*(?:\\.\\d+)?%)\\s*,\\s*(\\d*(?:\\.\\d+)?%)\\)$/')\n\nColorPicker::make('rgb_color')\n    ->rgb()\n    ->regex('/^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/')\n\nColorPicker::make('rgba_color')\n    ->rgba()\n    ->regex('/^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d*(?:\\.\\d+)?)\\)$/')\n```\n\n----------------------------------------\n\nTITLE: Defining beforeSave Lifecycle Hook - Filament PHP\nDESCRIPTION: This code demonstrates how to define a `beforeSave` lifecycle hook within a Filament importer class.  This hook allows you to execute custom logic before a record is saved to the database. The code shows the basic structure and placement of the `beforeSave` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nprotected function beforeSave(): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Current Tab in Filament Form (PHP)\nDESCRIPTION: This code shows how to persist the current tab in the browser's local storage using the `persistTab()` method and assigning a unique `id()` to the tabs component. This ensures that when the user returns to the form, the previously selected tab is automatically opened.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        // ...\n    ])\n    ->persistTab()\n    ->id('order-tabs')\n```\n\n----------------------------------------\n\nTITLE: Length Validation (Filament/PHP)\nDESCRIPTION: This example shows how to limit the length of the textarea using `minLength()` and `maxLength()`. These methods add both frontend and backend validation to ensure that the input meets the specified length constraints.  This requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/15-textarea.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->minLength(2)\n    ->maxLength(1024)\n```\n\n----------------------------------------\n\nTITLE: Confirmed Validation - Filament\nDESCRIPTION: Validates that the field has a matching confirmation field (e.g., `{field}_confirmation`). It uses the `confirmed()` method on a Filament field and requires a separate confirmation field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nField::make('password')->confirmed()\nField::make('password_confirmation')\n```\n\n----------------------------------------\n\nTITLE: Setting Form Model (PHP)\nDESCRIPTION: This demonstrates how to associate a Filament form with an Eloquent model using the `model()` method. This enables automatic loading of relationships and validation enhancements.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Forms\\Form;\n\npublic Post $post;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            // ...\n        ])\n        ->statePath('data')\n        ->model($this->post);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hide Tenant Menu Items in Filament\nDESCRIPTION: This snippet shows how to conditionally hide a tenant menu item in Filament using the `visible()` or `hidden()` methods, based on a boolean condition or a function that returns a boolean.  The function is lazily evaluated.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\MenuItem;\n\nMenuItem::make()\n    ->label('Settings')\n    ->visible(fn (): bool => auth()->user()->can('manage-team'))\n    // or\n    ->hidden(fn (): bool => ! auth()->user()->can('manage-team'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Query/Records (PHP)\nDESCRIPTION: This code snippet demonstrates how to access the Eloquent query builder instance for the table data in a widget using `$this->getPageTableQuery()`. Alternatively, access a collection of the records using `$this->getPageTableRecords()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nStat::make('Total Products', $this->getPageTableQuery()->count()),\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nStat::make('Total Products', $this->getPageTableRecords()->count()),\n```\n\n----------------------------------------\n\nTITLE: Creating a View Field - PHP\nDESCRIPTION: This snippet demonstrates how to create a custom form field using a view file in Filament. It utilizes the `ViewField` component to render a Blade template for the field's UI. The view file path is specified using the `view()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ViewField;\n\nViewField::make('rating')\n    ->view('filament.forms.components.range-slider')\n```\n\n----------------------------------------\n\nTITLE: Setting Max/Min Dates for DatePicker Validation in Filament\nDESCRIPTION: This snippet shows how to restrict the minimum and maximum selectable dates for a DatePicker component using the `minDate()` and `maxDate()` methods.  These methods accept either a DateTime instance or a string representation of a date.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n    ->minDate(now()->subYears(150))\n    ->maxDate(now())\n```\n\n----------------------------------------\n\nTITLE: Setting the Export File Disk in Filament (PHP)\nDESCRIPTION: This snippet shows how to specify the storage disk for exported files using the `fileDisk()` method on the `ExportAction`.  This allows you to override the default disk and store exports on a specific disk like 's3'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->fileDisk('s3')\n```\n\n----------------------------------------\n\nTITLE: Displaying Filters Above Table Content (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to display the filters above the table content instead of inside a dropdown using the `FiltersLayout::AboveContent` enum. This provides a more prominent and always-visible filter interface.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::AboveContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Block's Icon\nDESCRIPTION: This snippet demonstrates how to add an icon to a builder block using the `icon()` method. It specifies the icon name for the 'paragraph' block, enhancing the visual representation of the block.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder\\Block::make('paragraph')\n    ->icon('heroicon-m-bars-3-bottom-left')\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Summarizers to TextColumn\nDESCRIPTION: This code snippet shows how to add multiple summarizers to the same text column in a Filament table. It uses both `Average` and `Range` summarizers to calculate and display both the average and range of values in the specified column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->numeric()\n    ->summarize([\n        Average::make(),\n        Range::make(),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Empty State Actions in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to add actions to the empty state of a Filament table using the `emptyStateActions()` method. It takes an array of `Filament\\Tables\\Actions\\Action` objects as input.  The code requires the `Filament\\Tables\\Table` and `Filament\\Tables\\Actions\\Action` classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/09-empty-state.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateActions([\n            Action::make('create')\n                ->label('Create post')\n                ->url(route('posts.create'))\n                ->icon('heroicon-m-plus')\n                ->button(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for a Filament Form Field\nDESCRIPTION: This code snippet demonstrates setting a default value for a Filament form field using the `default()` method.  The default value will be used if the form is filled without any existing data, typically on create pages.  Inside panel resources this only works on Create Pages, as Edit Pages will always fill the data from the model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->default('John')\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Reordering - PHP\nDESCRIPTION: This snippet demonstrates how to enable row reordering in the KeyValue field using the `reorderable()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->reorderable()\n```\n\n----------------------------------------\n\nTITLE: Setting Image Editor Aspect Ratios\nDESCRIPTION: This snippet demonstrates how to allow users to crop images to a set of specific aspect ratios using the `imageEditorAspectRatios()` method.  `null` can be passed as an option to allow free cropping.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->imageEditor()\n    ->imageEditorAspectRatios([\n        '16:9',\n        '4:3',\n        '1:1',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using ImportAction in a Filament Table\nDESCRIPTION: This snippet demonstrates how to use the `ImportAction` class within a Filament Table's header actions. It configures the action to use a specific importer class (`ProductImporter`).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Imports\\ProductImporter;\nuse Filament\\Tables\\Actions\\ImportAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->headerActions([\n            ImportAction::make()\n                ->importer(ProductImporter::class)\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Form with Date Pickers in Filament\nDESCRIPTION: This code demonstrates how to create a custom filter form with date pickers for filtering a table by a date range. It uses the Filament Form Builder components `DatePicker` and defines a `query` callback to apply the date filter to the Eloquent query.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/05-custom.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nFilter::make('created_at')\n    ->form([\n        DatePicker::make('created_from'),\n        DatePicker::make('created_until'),\n    ])\n    ->query(function (Builder $query, array $data): Builder {\n        return $query\n            ->when(\n                $data['created_from'],\n                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),\n            )\n            ->when(\n                $data['created_until'],\n                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),\n            );\n    })\n```\n\n----------------------------------------\n\nTITLE: Create Notifications Table (Laravel)\nDESCRIPTION: Commands to create the notifications table in a Laravel application. Different commands are used depending on the Laravel version.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Laravel 11 and higher\nphp artisan make:notifications-table\n\n# Laravel 10\nphp artisan notifications:table\n```\n\n----------------------------------------\n\nTITLE: Build Settings Form\nDESCRIPTION: Defines the form schema for interacting with the settings class within the `form()` method. The form uses Filament form components such as `TextInput` and `Repeater`. The name of each form field must correspond to the name of the property on the settings class. Requires the `Filament\\Forms` namespace.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Form;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            TextInput::make('copyright')\n                ->label('Copyright notice')\n                ->required(),\n            Repeater::make('links')\n                ->schema([\n                    TextInput::make('label')->required(),\n                    TextInput::make('url')\n                        ->url()\n                        ->required(),\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Action to a Custom Form Component - PHP\nDESCRIPTION: This code demonstrates how to register an action within a custom form component using the `registerActions()` method on a `ViewField`. The action is then available to be rendered in the custom component's view. The `Set` utility is injected into the action function to update the 'rating' field's state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\ViewField;\nuse Filament\\Forms\\Set;\n\nViewField::make('rating')\n    ->view('filament.forms.components.range-slider')\n    ->registerActions([\n        Action::make('setMaximum')\n            ->icon('heroicon-m-star')\n            ->action(function (Set $set) {\n                $set('rating', 5);\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Tenant Model\nDESCRIPTION: This simple snippet demonstrates how to access the tenant model for the current request using the `Filament::getTenant()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Facades\\Filament;\n\n$tenant = Filament::getTenant();\n```\n\n----------------------------------------\n\nTITLE: Overriding File Name in Exporter (PHP)\nDESCRIPTION: This code snippet shows how to override the `getFileName()` method within an exporter class to customize the file name for all actions using that exporter. It receives the Export model and returns the desired file name as a string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n\nuse Filament\\Actions\\Exports\\Models\\Export;\n\npublic function getFileName(Export $export): string\n{\n    return \"products-{$export->getKey()}.csv\";\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Block Previews in Filament Builder\nDESCRIPTION: This code snippet shows how to enable read-only previews for blocks in the builder using the `blockPreviews()` method. It also demonstrates how to define the preview Blade view for a block and access the block's data within the view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\Builder\\Block;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder::make('content')\n    ->blockPreviews()\n    ->blocks([\n        Block::make('heading')\n            ->schema([\n                TextInput::make('text')\n                    ->placeholder('Default heading'),\n            ])\n            ->preview('filament.content.block-previews.heading'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Grouping - PHP\nDESCRIPTION: This code snippet demonstrates how to set a default grouping for a Filament table, using the 'status' attribute. This will group the table rows by the 'status' attribute when the table is initially loaded.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->defaultGroup('status');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Row Index with rowIndex() (PHP)\nDESCRIPTION: This code snippet shows a shortcut method to display the row index using the `rowIndex()` method in a Filament table. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('index')\n    ->rowIndex()\n```\n\n----------------------------------------\n\nTITLE: Required Without All Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredWithoutAll` validation rule in a Filament form. The 'name' field is required only when both 'field' and 'another_field' are empty. This showcases Filament's integration with Laravel's validation system.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredWithoutAll('field,another_field')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Color Palette - FilamentPHP\nDESCRIPTION: This code snippet shows how to set a custom color palette for the 'primary' color in a FilamentPHP panel. It defines an array of RGB values for different shades of the primary color, allowing fine-grained control over the color scheme.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$panel\n    ->colors([\n        'primary' => [\n            50 => '238, 242, 255',\n            100 => '224, 231, 255',\n            200 => '199, 210, 254',\n            300 => '165, 180, 252',\n            400 => '129, 140, 248',\n            500 => '99, 102, 241',\n            600 => '79, 70, 229',\n            700 => '67, 56, 202',\n            800 => '55, 48, 163',\n            900 => '49, 46, 129',\n            950 => '30, 27, 75',\n        ],\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Formats in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure the export formats (CSV or XLSX) using the `formats()` method on the `ExportAction` in Filament. It accepts an array of `ExportFormat` enums to define the allowed formats.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\Exports\\Enums\\ExportFormat;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->formats([\n        ExportFormat::Csv,\n    ])\n    // or\n    ->formats([\n        ExportFormat::Xlsx,\n    ])\n    // or\n    ->formats([\n        ExportFormat::Xlsx,\n        ExportFormat::Csv,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Preventing Query String Conflicts in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to prevent query string conflicts when using multiple tables on the same page by defining a unique query string identifier for each table using the `queryStringIdentifier()` method. This ensures that pagination states don't overwrite each other.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->queryStringIdentifier('users');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Export Policy View Method\nDESCRIPTION: This code snippet shows the `view()` method within an `ExportPolicy` to define the authorization logic. In this example, it ensures that only the user who started the export can access it.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Actions\\Exports\\Models\\Export;\n\npublic function view(User $user, Export $export): bool\n{\n    return $export->user()->is($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Reordering with Buttons - PHP\nDESCRIPTION: This code snippet demonstrates how to enable reordering of items in a repeater using buttons (up and down) with the `reorderableWithButtons()` method. This provides an alternative to drag-and-drop reordering.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->reorderableWithButtons()\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Connection in Filament Importer (PHP)\nDESCRIPTION: This code shows how to customize the connection used for jobs of a specific importer by overriding the `getJobConnection()` method in the importer class. This allows specifying a different queue connection for import jobs, which is useful for using different queue drivers.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobConnection(): ?string\n{\n    return 'sqs';\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting File Size in Filament\nDESCRIPTION: This snippet demonstrates how to restrict the size of uploaded files using the `minSize()` and `maxSize()` methods in the Filament FileUpload component. Sizes are specified in kilobytes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->minSize(512)\n    ->maxSize(1024)\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Casting for CheckboxList - PHP\nDESCRIPTION: This code snippet shows how to add an `array` cast to a model property when using Eloquent to save the selected options from the CheckboxList. This ensures that the JSON data is properly handled by the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass App extends Model\n{\n    protected $casts = [\n        'technologies' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ternary Filter with Nullable Column - PHP\nDESCRIPTION: This code snippet shows how to use a ternary filter with a nullable column, such as `email_verified_at`, to filter verified and unverified users. The `nullable()` method is used to handle null values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/03-ternary.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('email_verified_at')\n    ->nullable()\n```\n\n----------------------------------------\n\nTITLE: Defining a Delete Action in a Livewire Component (PHP)\nDESCRIPTION: This code defines a 'deleteAction' method that returns a Filament Action. The action requires confirmation and, when executed, deletes a Post model. Requires dependencies such as `App\\Models\\Post`, `Filament\\Actions\\Action`, and the traits and interfaces from the previous snippet.  The `$post` property needs to be defined and injected in the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\nuse Filament\\Actions\\Concerns\\InteractsWithActions;\nuse Filament\\Actions\\Contracts\\HasActions;\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Livewire\\Component;\n\nclass ManagePost extends Component implements HasForms, HasActions\n{\n    use InteractsWithActions;\n    use InteractsWithForms;\n\n    public Post $post;\n\n    public function deleteAction(): Action\n    {\n        return Action::make('delete')\n            ->requiresConfirmation()\n            ->action(fn () => $this->post->delete());\n    }\n    \n    // This method name also works, since the action name is `delete`:\n    // public function delete(): Action\n    \n    // This method name does not work, since the action name is `delete`, not `deletePost`:\n    // public function deletePost(): Action\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Restore Action in Table - PHP\nDESCRIPTION: This snippet shows how to use the Filament restore action within a table context, including both single row and bulk restore actions.  It imports necessary classes from the `Filament\\Tables\\Actions` namespace and configures them within the `table` method. Requires Filament table to be set up.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkActionGroup;\nuse Filament\\Tables\\Actions\\RestoreAction;\nuse Filament\\Tables\\Actions\\RestoreBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            RestoreAction::make(),\n            // ...\n        ])\n        ->bulkActions([\n            BulkActionGroup::make([\n                RestoreBulkAction::make(),\n                // ...\n            ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Keybindings - Filament\nDESCRIPTION: Illustrates attaching keyboard shortcuts to trigger buttons using the `keyBindings()` method.  Uses Mousetrap key codes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('save')\n    ->action(fn () => $this->save())\n    ->keyBindings(['command+s', 'ctrl+s'])\n```\n\n----------------------------------------\n\nTITLE: Translating a Filament Form Field Label Automatically\nDESCRIPTION: This code snippet demonstrates using the `translateLabel()` method to automatically translate the label of a Filament form field using Laravel's localization features.  This avoids manually specifying the translation key.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->translateLabel() // Equivalent to `label(__('Name'))`\n```\n\n----------------------------------------\n\nTITLE: Filtering Widget Data - Using an Action Modal (PHP)\nDESCRIPTION: This snippet demonstrates how to use an action modal for filtering by using the `HasFiltersAction` trait and registering the `FilterAction` class in `getHeaderActions()` to create a filter action with DatePicker components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Form;\nuse Filament\\Pages\\Dashboard as BaseDashboard;\nuse Filament\\Pages\\Dashboard\\Actions\\FilterAction;\nuse Filament\\Pages\\Dashboard\\Concerns\\HasFiltersAction;\n\nclass Dashboard extends BaseDashboard\n{\n    use HasFiltersAction;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            FilterAction::make()\n                ->form([\n                    DatePicker::make('startDate'),\n                    DatePicker::make('endDate'),\n                    // ...\n                ]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Table Settings - PHP\nDESCRIPTION: This snippet demonstrates how to customize the default configuration for all tables using the static `configureUsing()` method within the `boot()` method of a service provider. This allows you to apply global settings, such as the filters layout and pagination options, to all tables.  It requires the `Filament\\Tables\\Enums\\FiltersLayout` and `Filament\\Tables\\Table` classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\nTable::configureUsing(function (Table $table): void {\n    $table\n        ->filtersLayout(FiltersLayout::AboveContentCollapsible)\n        ->paginationPageOptions([10, 25, 50]);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Livewire Component (Bash)\nDESCRIPTION: This command generates a new Livewire component using Artisan. It's a standard command for creating a new Livewire component file and its associated view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire CreatePost\n```\n\n----------------------------------------\n\nTITLE: Enabling Avatar Mode\nDESCRIPTION: This snippet demonstrates how to enable avatar mode for the file upload field using the `avatar()` method.  This restricts uploads to images and displays them in a circular layout.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('avatar')\n    ->avatar()\n```\n\n----------------------------------------\n\nTITLE: Styling ActionGroup as Button with Label in Filament\nDESCRIPTION: This code snippet shows how to style an `ActionGroup` in Filament as a standard button with a background color and label. It uses the `button()` and `label()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])\n    ->button()\n    ->label('Actions')\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Authenticated Routes in Filament (PHP)\nDESCRIPTION: This snippet shows how to apply middleware specifically to authenticated routes within a Filament panel. The `authMiddleware()` method takes an array of middleware classes. Setting `isPersistent` to `true` ensures the middleware is executed on every request, including Livewire AJAX requests.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->authMiddleware([\n            // ...\n        ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->authMiddleware([\n            // ...\n        ], isPersistent: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Record to the Route (PHP)\nDESCRIPTION: This code demonstrates how to include the record ID as a route parameter in `getPages()`. This allows the `InteractsWithRecord` trait to correctly resolve the record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/10-custom-pages.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        // ...\n        'manage' => Pages\\ManageUser::route('/{record}/manage'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: ExportBulkAction in Table\nDESCRIPTION: This PHP code snippet demonstrates how to add an `ExportBulkAction` to a Filament table.  This allows users to export a selection of rows from the table.  The `exporter()` method is chained to specify the `ProductExporter` class which handles the export logic.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Tables\\Actions\\ExportBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            ExportBulkAction::make()\n                ->exporter(ProductExporter::class)\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Editor Toolbar Buttons (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the toolbar buttons of the Markdown editor using the `toolbarButtons()` method. It allows specifying which buttons are available to the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/11-markdown-editor.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n    ->toolbarButtons([\n        'attachFiles',\n        'blockquote',\n        'bold',\n        'bulletList',\n        'codeBlock',\n        'heading',\n        'italic',\n        'link',\n        'orderedList',\n        'redo',\n        'strike',\n        'table',\n        'undo',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Download Functionality to Files in Filament\nDESCRIPTION: This snippet demonstrates how to add a download button to each uploaded file. It uses the `downloadable()` method on the Filament FileUpload component, along with the `multiple()` method for handling multiple file uploads.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->downloadable()\n```\n\n----------------------------------------\n\nTITLE: Grouping Actions in Filament PHP\nDESCRIPTION: This code snippet shows how to group multiple Filament actions into a dropdown menu using `ActionGroup`. It creates a group containing 'view', 'edit', and 'delete' actions. This allows for organizing related actions under a single menu item.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/02-overview.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nActionGroup::make([\n    Action::make('view'),\n    Action::make('edit'),\n    Action::make('delete'),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Toggle Column in Filament\nDESCRIPTION: This code snippet demonstrates how to create a basic toggle column in a Filament table.  The `ToggleColumn::make('is_admin')` method creates a column that toggles the 'is_admin' attribute in the database. No specific dependencies are listed beyond the Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/07-toggle.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\ToggleColumn;\n\nToggleColumn::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Preventing Bulk-Selection of All Pages (PHP)\nDESCRIPTION: This snippet demonstrates how to prevent the user from easily bulk-selecting all records across all pages in the table by using `selectCurrentPageOnly()`. The dependencies include the Table facade.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            // ...\n        ])\n        ->selectCurrentPageOnly();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Filament Filter by Default\nDESCRIPTION: This code shows how to set a filter to be enabled by default when the table is loaded, using the `default()` method. This can be useful for frequently used filters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_featured')\n    ->default()\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Name - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to change the text used as the brand name in a FilamentPHP panel using the `brandName()` method. This overrides the default app name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandName('Filament Demo');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Tags in Filament Importer (PHP)\nDESCRIPTION: This code demonstrates how to customize the tags that are applied to jobs of a specific importer by overriding the `getJobTags()` method in the importer class. This allows adding custom tags for easier job identification and filtering.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobTags(): array\n{\n    return [\"import{$this->import->getKey()}\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Test Repeater Actions with callFormComponentAction (PHP)\nDESCRIPTION: This code snippet illustrates how to test a repeater action using `callFormComponentAction()` in a Filament form test.  It calls the 'sendQuote' action on the 'quotes' repeater for a specific item (identified by `record-{$quote->getKey()}`) and asserts that a notification is displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Quote;\nuse Filament\\Forms\\Components\\Repeater;\nuse function Pest\\Livewire\\livewire;\n\n$quote = Quote::first();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->callFormComponentAction('quotes', 'sendQuote', arguments: [\n        'item' => \"record-{$quote->getKey()}\",\n    ])\n    ->assertNotified('Quote sent!');\n```\n\n----------------------------------------\n\nTITLE: Not Regex Validation - Filament\nDESCRIPTION: Validates that the field does not match the given regular expression. It uses the `notRegex()` method, accepting the regular expression as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nField::make('email')->notRegex('/^.+$/i')\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Infolist Action with Pest\nDESCRIPTION: This snippet shows how to pass data to an infolist action using the 'data' parameter. It creates an invoice, calls the 'send' action with an email address, and asserts that no errors occur, and that the invoice is sent to the specified email.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callInfolistAction('customer', 'send', data: [\n            'email' => $email = fake()->email(),\n        ])\n        ->assertHasNoInfolistActionErrors();\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue()\n        ->recipient_email->toBe($email);\n});\n```\n\n----------------------------------------\n\nTITLE: Compact Section Styling - PHP\nDESCRIPTION: This snippet demonstrates how to use compact styling for sections using the `compact()` method. This is especially useful for nested sections to reduce visual clutter. Requires the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n    ->compact()\n```\n\n----------------------------------------\n\nTITLE: Preloading Relationship Select Filter Options in Filament\nDESCRIPTION: This snippet shows how to preload the relationship options when the page loads using the `preload()` method, improving performance by reducing the need for on-demand database queries.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name')\n    ->searchable()\n    ->preload()\n```\n\n----------------------------------------\n\nTITLE: Injecting modal form data (PHP)\nDESCRIPTION: This code snippet shows how to inject the current modal form data into an action's configuration function.  The `$data` parameter will contain the form data after the modal has been submitted.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction (array $data) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Item Limits in Filament Builder with minItems() and maxItems()\nDESCRIPTION: This code snippet demonstrates how to validate the minimum and maximum number of items within a builder using `minItems()` and `maxItems()`. This ensures that the builder contains a valid number of blocks.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->minItems(1)\n    ->maxItems(5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table View Action (Filament)\nDESCRIPTION: This snippet shows how to integrate ViewAction into a Filament table to display row data. It uses Filament\\Tables\\Actions\\ViewAction within a Table configuration.  The table is configured to include a ViewAction, which opens a modal with form fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/03-view.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Actions\\ViewAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            ViewAction::make()\n                ->form([\n                    TextInput::make('title')\n                        ->required()\n                        ->maxLength(255),\n                    // ...\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Files in a Grid Layout in Filament\nDESCRIPTION: This snippet demonstrates how to display multiple files in a grid layout using the Filepond `grid` layout within the Filament FileUpload component.  It uses the `panelLayout('grid')` method, combined with `multiple()`, to enable the grid display. Requires the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->panelLayout('grid')\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Input Mode\nDESCRIPTION: This code snippet shows how to set the `inputmode` attribute of the input, allowing optimization for specific input methods (e.g., numeric keyboards).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('text')\n    ->numeric()\n    ->inputMode('decimal')\n```\n\n----------------------------------------\n\nTITLE: Setting Image Editor Viewport Size\nDESCRIPTION: This snippet demonstrates how to change the size of the image editor's viewport using the `imageEditorViewportWidth()` and `imageEditorViewportHeight()` methods.  This generates an aspect ratio to use across device sizes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->imageEditor()\n    ->imageEditorViewportWidth('1920')\n    ->imageEditorViewportHeight('1080')\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Length Validation\nDESCRIPTION: This snippet demonstrates how to enforce a specific, exact length for the input value using the `length()` method. Frontend and backend validation are both enabled.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('code')\n    ->length(8)\n```\n\n----------------------------------------\n\nTITLE: Moving Create Button to Header (PHP)\nDESCRIPTION: This code shows how to move the default create button from the form to the header section of a Filament resource page. It overrides `getHeaderActions` and specifies the `formId` to connect the action to the form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaderActions(): array\n{\n    return [\n        $this->getCreateFormAction()\n            ->formId('form'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExportAction\nDESCRIPTION: This PHP code snippet demonstrates how to use the `ExportAction` in Filament. It creates an `ExportAction` instance and specifies the `ProductExporter` class to handle the actual export logic.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Actions\\ExportAction;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n```\n\n----------------------------------------\n\nTITLE: Adding Header Widgets to Filament Pages (PHP)\nDESCRIPTION: Shows how to include widgets above the page content using the `getHeaderWidgets()` method. It returns an array of widget class names. The App\\Filament\\Widgets\\StatsOverviewWidget::class is required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Widgets\\StatsOverviewWidget;\n\nprotected function getHeaderWidgets(): array\n{\n    return [\n        StatsOverviewWidget::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Export Query in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to modify the query used for exporting data using the `modifyQueryUsing()` method on the `ExportAction`. It accepts a closure that receives a query builder instance and allows modification of the query before export.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->modifyQueryUsing(fn (Builder $query) => $query->where('is_active', true))\n```\n\n----------------------------------------\n\nTITLE: Cancelling the Replication Process\nDESCRIPTION: This snippet shows how to cancel the replication action entirely using `$action->cancel()`. Cancelling the action will close the modal in addition to halting the process.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$action->cancel();\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Select on a Filament Select Filter\nDESCRIPTION: This snippet shows how to enable multi-select functionality using the `multiple()` method, which allows users to select multiple options for filtering the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->multiple()\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Closing Notifications using Actions in PHP (Filament)\nDESCRIPTION: This PHP code demonstrates how to create a Filament notification with actions that can open a URL or dispatch an event.  The `close()` method is chained to the action to automatically close the notification after the action is triggered. Dependencies: Filament\\Notifications\\Actions\\Action, Filament\\Notifications\\Notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button()\n            ->url(route('posts.show', $post), shouldOpenInNewTab: true),\n        Action::make('undo')\n            ->color('gray')\n            ->dispatch('undoEditingPost', [$post->id])\n            ->close(),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Setting Action Data without Calling using Pest\nDESCRIPTION: This snippet demonstrates how to set the data for a Filament action without immediately calling it, using `setActionData()`. It creates an invoice, mounts the `EditInvoice` Livewire component, mounts the 'send' action, sets the email data for the action, but does not call the action.  This is useful for setting up data before making assertions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountAction('send')\n        ->setActionData([\n            'email' => $email = fake()->email(),\n        ])\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Date, Time, and Date-Time Pickers in Filament\nDESCRIPTION: This snippet demonstrates how to initialize DatePicker, DateTimePicker, and TimePicker components in a Filament form. It shows the basic usage of the `make()` method to create instances of these components for specific database columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\TimePicker;\n\nDateTimePicker::make('published_at')\nDatePicker::make('date_of_birth')\nTimePicker::make('alarm_at')\n```\n\n----------------------------------------\n\nTITLE: Displaying Widget on Resource Page (PHP)\nDESCRIPTION: This code shows how to display a widget on a Filament resource page. It overrides the `getHeaderWidgets()` method of the page class to return an array containing the widget's class name. This will display the widget above the page content. `getFooterWidgets()` can be used similarly to display widgets below the content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Resources\\CustomerResource\\Pages;\n\nuse App\\Filament\\Resources\\CustomerResource;\n\nclass ListCustomers extends ListRecords\n{\n    public static string $resource = CustomerResource::class;\n\n    protected function getHeaderWidgets(): array\n    {\n        return [\n            CustomerResource\\Widgets\\CustomerOverview::class,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Block Previews in Filament Builder\nDESCRIPTION: This code snippet demonstrates how to enable interactive block previews using the `areInteractive: true` argument of the `blockPreviews()` method. This allows links and buttons within the block previews to remain interactive.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blockPreviews(areInteractive: true)\n    ->blocks([\n        //\n    ])\n```\n\n----------------------------------------\n\nTITLE: Excluding Attributes from Replication\nDESCRIPTION: This code snippet shows how to exclude specific attributes (columns) from being replicated during the replication process using the `excludeAttributes()` method.  In this example, the 'slug' attribute is excluded.  This ensures that the replicated record will not copy the value from the original record's 'slug' column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nReplicateAction::make()\n    ->excludeAttributes(['slug'])\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Data Set using Pest\nDESCRIPTION: This snippet demonstrates how to check if a Filament action is pre-filled with data using `assertActionDataSet()`. It creates an invoice, retrieves the recipient's email, mounts the `EditInvoice` Livewire component, mounts the 'send' action, asserts that the 'email' field is pre-filled with the recipient's email, calls the mounted action, and asserts that no action errors occurred.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices to the primary contact by default', function () {\n    $invoice = Invoice::factory()->create();\n    $recipientEmail = $invoice->company->primaryContact->email;\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountAction('send')\n        ->assertActionDataSet([\n            'email' => $recipientEmail,\n        ])\n        ->callMountedAction()\n        ->assertHasNoActionErrors();\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue()\n        ->recipient_email->toBe($recipientEmail);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Label using Pest\nDESCRIPTION: This snippet demonstrates how to assert that a Filament action has the correct label using `assertActionHasLabel()` and `assertActionDoesNotHaveLabel()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'send' action has the label 'Email Invoice' and does not have the label 'Send'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('send action has correct label', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHasLabel('send', 'Email Invoice')\n        ->assertActionDoesNotHaveLabel('send', 'Send');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Anonymous Actions to a Form - PHP\nDESCRIPTION: This snippet shows how to add anonymous actions to a Filament form using the `Actions` component. These actions are not attached to any specific form component.  Each action is defined, setting its icon, requiring confirmation, and defining the action's logic.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Actions\\Star;\nuse App\\Actions\\ResetStars;\nuse Filament\\Forms\\Components\\Actions;\nuse Filament\\Forms\\Components\\Actions\\Action;\n\nActions::make([\n    Action::make('star')\n        ->icon('heroicon-m-star')\n        ->requiresConfirmation()\n        ->action(function (Star $star) {\n            $star();\n        }),\n    Action::make('resetStars')\n        ->icon('heroicon-m-x-mark')\n        ->color('danger')\n        ->requiresConfirmation()\n        ->action(function (ResetStars $resetStars) {\n            $resetStars();\n        }),\n]),\n```\n\n----------------------------------------\n\nTITLE: HasMany Relationship for BelongsToMany - PHP\nDESCRIPTION: This snippet creates a `HasMany` relationship `orderProducts` on the `Order` model, which relates to the pivot model `OrderProduct`. This is necessary for using a Repeater with a `BelongsToMany` relationship, as the Repeater saves data to the related model, not the pivot table directly.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\npublic function orderProducts(): HasMany\n{\n    return $this->hasMany(OrderProduct::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Collapsed Section State (PHP)\nDESCRIPTION: This code snippet demonstrates how to persist the collapsed state of a section in local storage using the `persistCollapsed()` method in Filament infolists.  It uses a unique ID based on the heading.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed()\n```\n\n----------------------------------------\n\nTITLE: Accepted Validation (PHP)\nDESCRIPTION: This code snippet demonstrates how to ensure that the checkbox is checked using the `accepted()` method. Useful for terms of service agreements.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/04-checkbox.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('terms_of_service')\n    ->accepted()\n```\n\n----------------------------------------\n\nTITLE: Replacing the Page Header with a Custom View (PHP)\nDESCRIPTION: Shows how to replace the default page header with a custom Blade view by overriding the `getHeader()` method. Assumes a Blade view at `resources/views/filament/settings/custom-header.blade.php`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Contracts\\View\\View;\n\npublic function getHeader(): ?View\n{\n    return view('filament.settings.custom-header');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Query in CheckboxList - PHP\nDESCRIPTION: This code snippet shows how to customize the database query that retrieves options for the relationship using the `modifyQueryUsing` parameter of the `relationship()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nCheckboxList::make('technologies')\n    ->relationship(\n        titleAttribute: 'name',\n        modifyQueryUsing: fn (Builder $query) => $query->withTrashed(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Filament Chart Widget Implementation (PHP)\nDESCRIPTION: This PHP code defines a basic chart widget using Filament. It sets the heading, data, and chart type. The `getData()` method returns an array of datasets and labels, while `getType()` specifies the chart type (in this case, 'line').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Widgets;\n\nuse Filament\\Widgets\\ChartWidget;\n\nclass BlogPostsChart extends ChartWidget\n{\n    protected static ?string $heading = 'Blog Posts';\n\n    protected function getData(): array\n    {\n        return [\n            'datasets' => [\n                [\n                    'label' => 'Blog posts created',\n                    'data' => [0, 10, 5, 2, 21, 32, 45, 74, 65, 45, 77, 89],\n                ],\n            ],\n            'labels' => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        ];\n    }\n\n    protected function getType(): string\n    {\n        return 'line';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Column State with Export Options (PHP)\nDESCRIPTION: This snippet shows how to access export options within the `formatStateUsing()` method of an `ExportColumn` to dynamically format the column's value based on user-provided options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->formatStateUsing(function (string $state, array $options): string {\n        return (string) str($state)->limit($options['descriptionLimit'] ?? 100);\n    })\n```\n\n----------------------------------------\n\nTITLE: Enhancing Owner Select with Search and Preload - PHP\nDESCRIPTION: This snippet shows how to enhance the 'owner_id' select field in the Filament form by adding search and preload capabilities. The `searchable()` method enables searching within the select options, and the `preload()` method preloads the first 50 owners into the searchable list, improving performance for large datasets. The field remains required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\n\nForms\\Components\\Select::make('owner_id')\n    ->relationship('owner', 'name')\n    ->searchable()\n    ->preload()\n    ->required()\n```\n\n----------------------------------------\n\nTITLE: Grouping Actions in a Livewire View (Blade)\nDESCRIPTION: This Blade component groups multiple actions (edit, view, delete) into a dropdown menu using `<x-filament-actions::group>`. The `actions` attribute accepts an array of action instances. Requires `<x-filament-actions::modals />` to render the modals.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <x-filament-actions::group :actions=\"[\n        $this->editAction,\n        $this->viewAction,\n        $this->deleteAction,\n    ]\" />\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Heading (Property) (PHP)\nDESCRIPTION: Demonstrates how to customize the page heading by setting the `$heading` property on the page class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nprotected ?string $heading = 'Custom Page Heading';\n```\n\n----------------------------------------\n\nTITLE: Modifying Modal Footer Action Buttons in Filament\nDESCRIPTION: Demonstrates how to modify a default modal footer action button using `modalSubmitAction()` or `modalCancelAction()` and a closure. This allows customizing the label or other properties of the button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\StaticAction;\n\nAction::make('help')\n    ->modalContent(view('actions.help'))\n    ->modalCancelAction(fn (StaticAction $action) => $action->label('Close'))\n```\n\n----------------------------------------\n\nTITLE: Overwriting Global Settings for a Specific Section - PHP\nDESCRIPTION: This snippet demonstrates how to overwrite the global settings for an individual Section component in Filament. It shows how to set a specific Section to have only 1 column, overriding the global configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/01-getting-started.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make()\n    ->columns(1)\n```\n\n----------------------------------------\n\nTITLE: Enabling Table-Wide Searchability with Laravel Scout in Filament (PHP)\nDESCRIPTION: This snippet shows how to make the entire table searchable using Laravel Scout with `$table->searchable()`. This is an alternative to making individual columns searchable when using Scout to control searchability.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->searchable();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty State Heading in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the heading of the empty state in a Filament table using the `emptyStateHeading()` method. It takes a string as input, which will be displayed as the heading when the table is empty. The code requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/09-empty-state.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateHeading('No posts yet');\n}\n```\n\n----------------------------------------\n\nTITLE: Filament Section with Text Input Column Start\nDESCRIPTION: This snippet demonstrates how to specify the starting column of a component within a Filament grid using the `columnStart()` method. The `Section` component is configured with responsive column settings, and the `TextInput` is positioned to start at different columns based on the screen size.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/02-grid.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make()\n    ->columns([\n        'sm' => 3,\n        'xl' => 6,\n        '2xl' => 8,\n    ])\n    ->schema([\n        TextInput::make('name')\n            ->columnStart([\n                'sm' => 2,\n                'xl' => 3,\n                '2xl' => 4,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling EXIF Image Orientation in Filament\nDESCRIPTION: This snippet demonstrates how to disable the automatic image orientation based on EXIF data in the Filament FileUpload component.  It uses the `orientImagesFromExif(false)` method to prevent FilePond from adjusting image orientation based on EXIF metadata.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->orientImagesFromExif(false)\n```\n\n----------------------------------------\n\nTITLE: Stacking Columns on Mobile using Filament's Split Layout\nDESCRIPTION: This snippet demonstrates how to use the `Split` layout component to wrap columns and make them stack on top of each other on mobile devices. It includes an image, name (with bold font and search/sort capabilities), and email column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    TextColumn::make('email'),\n])\n```\n\n----------------------------------------\n\nTITLE: Customize Resource Relationship Name in Filament\nDESCRIPTION: This code shows how to customize the relationship name that is used to fetch a resource using the `$tenantRelationshipName` static property on the resource class. The `blogPosts` relationship is defined.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Resource;\n\nclass PostResource extends Resource\n{\n    protected static ?string $tenantRelationshipName = 'blogPosts';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Global Entry Configuration\nDESCRIPTION: Globally configures TextEntry components using the `configureUsing()` method inside a service provider's `boot()` method. The example shows how to limit the word count of all TextEntry components to 10. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::configureUsing(function (TextEntry $entry): void {\n    $entry\n        ->words(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Prohibited Validation - Filament\nDESCRIPTION: Validates that the field's value must be empty.  It is useful when a field should be conditionally empty based on other conditions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->prohibited()\n```\n\n----------------------------------------\n\nTITLE: Using a Wizard as a Modal Form (PHP)\nDESCRIPTION: This snippet illustrates how to use a Filament PHP wizard as a modal form using the `steps()` method. The wizard consists of multiple steps defined using `Step` objects, each containing a schema of form components. The example includes steps for 'Name', 'Description', and 'Visibility'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Forms\\Components\\Wizard\\Step;\n\nAction::make('create')\n    ->steps([\n        Step::make('Name')\n            ->description('Give the category a unique name')\n            ->schema([\n                TextInput::make('name')\n                    ->required()\n                    ->live()\n                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),\n                TextInput::make('slug')\n                    ->disabled()\n                    ->required()\n                    ->unique(Category::class, 'slug'),\n            ])\n            ->columns(2),\n        Step::make('Description')\n            ->description('Add some extra details')\n            ->schema([\n                MarkdownEditor::make('description'),\n            ]),\n        Step::make('Visibility')\n            ->description('Control who can view it')\n            ->schema([\n                Toggle::make('is_visible')\n                    ->label('Visible to customers.')\n                    ->default(true),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Reordering Enabled - PHP\nDESCRIPTION: This snippet enables the reordering feature for the TagsInput component. The `reorderable()` method allows users to drag and drop tags to change their order within the input field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->reorderable()\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Enabled/Disabled using Pest\nDESCRIPTION: This snippet shows how to assert whether a Filament action is enabled or disabled for a user using `assertActionEnabled()` and `assertActionDisabled()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'send' action is disabled, and asserts that the 'print' action is enabled.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print a sent invoice', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionDisabled('send')\n        ->assertActionEnabled('print');\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Eloquent Model Class into Table Action in Filament\nDESCRIPTION: This code snippet demonstrates how to inject the current Eloquent model class into a table action in Filament by defining a `$model` parameter with the `string` type hint. This allows the action to access the model associated with the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction (string $model) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Composer JSON\nDESCRIPTION: This `composer.json` configuration snippet shows how to automatically run the Filament upgrade command after a `composer update`. It ensures caches are cleared and assets are republished.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post-autoload-dump\": [\n    // ...\n    \"@php artisan filament:upgrade\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship Select Filter in Filament\nDESCRIPTION: This code demonstrates how to create a select filter that uses a relationship to populate the options. It filters records based on the 'author' relationship and displays the 'name' column of the related author.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name')\n```\n\n----------------------------------------\n\nTITLE: Implementing Infolist and Form Contracts (PHP)\nDESCRIPTION: Implements the HasInfolists and HasForms interfaces and uses the InteractsWithInfolists and InteractsWithForms traits in the Livewire component.  This is necessary to enable the infolist and form functionality within the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Filament\\Infolists\\Concerns\\InteractsWithInfolists;\nuse Filament\\Infolists\\Contracts\\HasInfolists;\nuse Livewire\\Component;\n\nclass ViewProduct extends Component implements HasForms, HasInfolists\n{\n    use InteractsWithInfolists;\n    use InteractsWithForms;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Searching Message - Filament Select\nDESCRIPTION: This code snippet demonstrates how to display a custom message while the search results are being loaded in a Filament searchable select component. It uses the `searchingMessage()` method to set the desired message.  The `author_id` is linked to the `author` relationship, displaying the `name` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable()\n    ->searchingMessage('Searching authors...')\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Eloquent Record into Table Action in Filament\nDESCRIPTION: This code snippet demonstrates how to inject the current Eloquent record into a table action in Filament by defining a `$record` parameter with the `Model` type hint. This allows the action to access the data of the current row.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nfunction (Model $record) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization for Filament Pages (PHP)\nDESCRIPTION: This code snippet demonstrates how to restrict access to a Filament page by overriding the `canAccess()` method. It checks if the authenticated user has the `canManageSettings` permission.  Only authorized users can view the page in navigation and access it directly.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function canAccess(): bool\n{\n    return auth()->user()->canManageSettings();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Section Without Heading - PHP\nDESCRIPTION: This snippet shows how to add header actions to a section that doesn't have a heading by providing a unique ID to the section using the `id()` method. This is necessary for Filament to locate the actions. Depends on the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make()\n    ->id('rateLimitingSection')\n    ->headerActions([\n        // ...\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Initializing Tags Input with JSON storage - PHP\nDESCRIPTION: This snippet initializes a TagsInput component named 'tags'. By default, the component stores tags as a JSON array in the database. To work with this data in Eloquent, ensure you define an array cast on your model property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Enum Validation - Filament\nDESCRIPTION: Validates that the field contains a valid enum value. It uses the `enum()` method, accepting the enum class as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nField::make('status')->enum(MyStatus::class)\n```\n\n----------------------------------------\n\nTITLE: Canceling the Action\nDESCRIPTION: This snippet demonstrates how to cancel the action, which closes the modal as well, by calling `$action->cancel()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$action->cancel();\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Cast for KeyValue - PHP\nDESCRIPTION: This snippet demonstrates how to cast the 'meta' attribute to an array in an Eloquent model. This is necessary for properly saving the KeyValue data as a JSON object in the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    protected $casts = [\n        'meta' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing File Upload Appearance in Filament\nDESCRIPTION: This snippet demonstrates how to alter the general appearance of the Filepond component integrated within Filament.  It utilizes various methods like `imagePreviewHeight()`, `loadingIndicatorPosition()`, `panelAspectRatio()`, `panelLayout()`, `removeUploadedFileButtonPosition()`, `uploadButtonPosition()`, and `uploadProgressIndicatorPosition()` to customize the visual presentation. Refer to Filepond documentation for valid options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->imagePreviewHeight('250')\n    ->loadingIndicatorPosition('left')\n    ->panelAspectRatio('2:1')\n    ->panelLayout('integrated')\n    ->removeUploadedFileButtonPosition('right')\n    ->uploadButtonPosition('left')\n    ->uploadProgressIndicatorPosition('left')\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Select - PHP\nDESCRIPTION: This snippet shows how to enable a more customizable JavaScript select using the `native(false)` method. This provides enhanced features and styling compared to the default HTML5 select.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->native(false)\n```\n\n----------------------------------------\n\nTITLE: Custom Redirect After Restore - PHP\nDESCRIPTION: This snippet demonstrates how to customize the redirect URL after a successful restore action. It utilizes the `successRedirectUrl()` method to specify a custom route to redirect the user to after the record is restored. Requires a named route 'posts.list' to be defined.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRestoreAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Setting a Block's Label\nDESCRIPTION: This snippet shows how to override the default block label using the `label()` method, which is useful for localization using translation strings.  It demonstrates setting a custom label for the 'heading' block using the `__` helper function.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder\\Block::make('heading')\n    ->label(__('blocks.heading'))\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Job Class in Filament ImportAction (PHP)\nDESCRIPTION: Demonstrates how to set a custom job class to be used for the import using the `job()` method on the `ImportAction`.  Requires the ProductImporter class and the custom `App\\Jobs\\ImportCsv` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ImportCsv;\n\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->job(ImportCsv::class)\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to a Stat - PHP\nDESCRIPTION: This snippet demonstrates how to add extra HTML attributes to a stat using the `extraAttributes()` method.  This allows for customization of the stat's HTML element, enabling interactivity and styling through attributes like `class` and `wire:click`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nprotected function getStats(): array\n{\n    return [\n        Stat::make('Processed', '192.1k')\n            ->color('success')\n            ->extraAttributes([\n                'class' => 'cursor-pointer',\n                'wire:click' => \"\\$dispatch('setStatusFilter', { filter: 'processed' })\",\n            ]),\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Outlined Button Style - Filament\nDESCRIPTION: Demonstrates making the button outlined instead of filled using the `outlined()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->button()\n    ->outlined()\n```\n\n----------------------------------------\n\nTITLE: Customizing Phone Number Validation\nDESCRIPTION: This snippet shows how to customize the regular expression used for validating phone number inputs, using the `telRegex()` method. It is also possible to globally configure the validation rule via a service provider.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('phone')\n    ->tel()\n    ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\.\\/0-9]*$/')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::configureUsing(function (TextInput $component): void {\n    $component->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\.\\/0-9]*$/');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabled Multiple Relationship Select - PHP\nDESCRIPTION: Shows how to use `disabled()` with `multiple()` and `relationship()` to ensure that `dehydrated()` is not overridden.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('technologies')\n    ->multiple()\n    ->disabled()\n    ->relationship(titleAttribute: 'name')\n```\n\n----------------------------------------\n\nTITLE: Accessing the Eloquent Record - Blade\nDESCRIPTION: This snippet shows how to access the Eloquent record within a Blade view using the `$getRecord()` function. This allows you to display or manipulate data from the record within the field's UI.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_7\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    {{ $getRecord()->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Block Picker Width in Filament Builder\nDESCRIPTION: This code snippet shows how to manually set the maximum width of the block picker dropdown using the `blockPickerWidth()` method.  The available options correspond to Tailwind's max-width scale.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make()\n    ->blockPickerColumns(3)\n    ->blockPickerWidth('2xl')\n    ->blocks([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Add MoneyCast to Model (Laravel)\nDESCRIPTION: This snippet shows how to add the `MoneyCast` to the `price` attribute in the `Treatment` model. This ensures that the `price` attribute is automatically cast to a float when retrieved from the database and back to an integer when stored.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Casts\\MoneyCast;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Treatment extends Model\n{\n    protected $casts = [\n        'price' => MoneyCast::class,\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggle Buttons Colors in Filament\nDESCRIPTION: This example shows how to change the colors of individual toggle buttons based on their values using the `colors()` method. Each key in the array corresponds to an option value, and the value represents the desired color (danger, gray, info, primary, success, or warning).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n    ->colors([\n        'draft' => 'info',\n        'scheduled' => 'warning',\n        'published' => 'success',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Preventing Reordering with Drag and Drop - PHP\nDESCRIPTION: This example demonstrates disabling drag and drop reordering while potentially still allowing button-based reordering, using the `reorderableWithDragAndDrop(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->reorderableWithDragAndDrop(false)\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Toolbar Buttons (PHP)\nDESCRIPTION: This snippet shows how to disable specific toolbar buttons in the Markdown editor using the `disableToolbarButtons()` method. It provides a way to remove unwanted or unnecessary buttons from the editor's toolbar.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/11-markdown-editor.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\n\nMarkdownEditor::make('content')\n    ->disableToolbarButtons([\n        'blockquote',\n        'strike',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Changing Panel Colors - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to override the default colors used in a FilamentPHP panel using the `colors()` method. It defines color options for 'danger', 'gray', 'info', 'primary', 'success', and 'warning', mapping them to Tailwind CSS color palettes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Colors\\Color;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->colors([\n            'danger' => Color::Rose,\n            'gray' => Color::Gray,\n            'info' => Color::Blue,\n            'primary' => Color::Indigo,\n            'success' => Color::Emerald,\n            'warning' => Color::Orange,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Filament for Production\nDESCRIPTION: This command optimizes Filament for a production environment by caching Filament components and Blade icons. This significantly improves the performance of Filament panels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:optimize\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks List - Filament - PHP\nDESCRIPTION: This code snippet showcases all available lifecycle hooks for the Create page in Filament. These hooks allow you to execute code before and after various stages of the form submission and record creation process, such as filling, validating, and saving data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateUser extends CreateRecord\n{\n    // ...\n\n    protected function beforeFill(): void\n    {\n        // Runs before the form fields are populated with their default values.\n    }\n\n    protected function afterFill(): void\n    {\n        // Runs after the form fields are populated with their default values.\n    }\n\n    protected function beforeValidate(): void\n    {\n        // Runs before the form fields are validated when the form is submitted.\n    }\n\n    protected function afterValidate(): void\n    {\n        // Runs after the form fields are validated when the form is submitted.\n    }\n\n    protected function beforeCreate(): void\n    {\n        // Runs before the form fields are saved to the database.\n    }\n\n    protected function afterCreate(): void\n    {\n        // Runs after the form fields are saved to the database.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility - Filament\nDESCRIPTION: Shows how to conditionally show or hide actions based on user permissions using the `visible()` and `hidden()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->visible(auth()->user()->can('update', $this->post))\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->hidden(! auth()->user()->can('update', $this->post))\n```\n\n----------------------------------------\n\nTITLE: Dispatching Livewire Events from Notification Actions - PHP\nDESCRIPTION: This snippet demonstrates dispatching a Livewire event when a notification action is clicked in Filament PHP. The `dispatch()` method sends the event with optional data.  `dispatchSelf` and `dispatchTo` are also shown.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button()\n            ->url(route('posts.show', $post), shouldOpenInNewTab: true),\n        Action::make('undo')\n            ->color('gray')\n            ->dispatch('undoEditingPost', [$post->id]),\n    ])\n    ->send();\n```\n\nLANGUAGE: php\nCODE:\n```\nAction::make('undo')\n    ->color('gray')\n    ->dispatchSelf('undoEditingPost', [$post->id])\n\nAction::make('undo')\n    ->color('gray')\n    ->dispatchTo('another_component', 'undoEditingPost', [$post->id])\n```\n\n----------------------------------------\n\nTITLE: Customize Avatar URL using HasAvatar Interface in Filament\nDESCRIPTION: This snippet shows how to customize how Filament gets a user's avatar URL by implementing the `HasAvatar` contract. If your user model has an `avatar_url` attribute, that will be used instead.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Models\\Contracts\\HasAvatar;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Team extends Model implements HasAvatar\n{\n    // ...\n\n    public function getFilamentAvatarUrl(): ?string\n    {\n        return $this->avatar_url;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Pivot Data to Relationship - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to save additional data to the pivot table when using a multiple relationship in Filament. The `pivotData()` method is used to specify the data that should be saved in the pivot table columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('primaryTechnologies')\n    ->relationship(name: 'technologies', titleAttribute: 'name')\n    ->multiple()\n    ->pivotData([\n        'is_primary' => true,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Scoping Summarizer Dataset\nDESCRIPTION: This snippet demonstrates how to apply a database query scope to a summarizer's dataset using the `query()` method.  In this case, only rows where `is_published` is true will be used to calculate the average.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Query\\Builder;\n\nTextColumn::make('rating')\n    ->summarize(\n        Average::make()->query(fn (Builder $query) => $query->where('is_published', true)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling and Dehydrating a Filament Form Field\nDESCRIPTION: This code snippet demonstrates how to disable a Filament form field using the `disabled()` method and still save it to the database using the `dehydrated()` method.  Disabling a field prevents user editing, while dehydrating ensures it's still saved.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nToggle::make('is_admin')\n    ->disabled()\n    ->dehydrated()\n```\n\n----------------------------------------\n\nTITLE: Customizing the Table Eloquent Query - PHP\nDESCRIPTION: This snippet shows how to modify the Eloquent query for the List page table using the `modifyQueryUsing()` method within the `table()` method of the resource.  This allows specific modifications to be made to the query for the table. Requires `Filament\\Tables\\Table` and `Illuminate\\Database\\Eloquent\\Builder`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->modifyQueryUsing(fn (Builder $query) => $query->withoutGlobalScopes());\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout (PHP)\nDESCRIPTION: This code snippet demonstrates responsive grid layout using the `Grid` component with different column numbers at different breakpoints (lg and 2xl). It utilizes a `Stack` layout for the 'name' and 'job' columns. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Grid;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nGrid::make([\n    'lg' => 2,\n    '2xl' => 4,\n])\n    ->schema([\n        Stack::make([\n            TextColumn::make('name'),\n            TextColumn::make('job'),\n        ]),\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disable Placeholder Selection - Filament PHP\nDESCRIPTION: This snippet prevents the placeholder (null option) from being selected using the `selectablePlaceholder(false)` method. This is useful when a default value is preferred.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n    ->selectablePlaceholder(false)\n```\n\n----------------------------------------\n\nTITLE: Disabling Tenancy for a Resource in Filament with PHP\nDESCRIPTION: This code shows how to disable tenancy scoping for individual resources by setting the `$isScopedToTenant` static property to `false` on the resource class. This allows the resource to be shared across all tenants.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isScopedToTenant = false;\n```\n\n----------------------------------------\n\nTITLE: Setting a domain for a Filament panel (PHP)\nDESCRIPTION: This code demonstrates how to scope a Filament panel to a specific domain.  The `domain()` method is used to restrict the panel's access to the specified domain.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->domain('admin.example.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Maximum Content Width (PHP)\nDESCRIPTION: Shows how to customize the maximum width of the page content using the `getMaxContentWidth()` method. Options correspond to Tailwind's max-width scale. Requires Filament\\Support\\Enums\\MaxWidth.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Enums\\MaxWidth;\n\npublic function getMaxContentWidth(): MaxWidth\n{\n    return MaxWidth::Full;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending broadcast notifications with fluent API in Filament\nDESCRIPTION: This snippet demonstrates how to send a broadcast notification using Filament's fluent API. It requires the `Filament\\Notifications\\Notification` class and a recipient.  The `auth()->user()` method is used to get the recipient.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/04-broadcast-notifications.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\nNotification::make()\n    ->title('Saved successfully')\n    ->broadcast($recipient);\n```\n\n----------------------------------------\n\nTITLE: Registering a Resource Widget (PHP)\nDESCRIPTION: This code snippet demonstrates how to register a newly created widget within a Filament resource.  The `getWidgets()` method of the resource class is overridden to return an array containing the widget's class name. This makes the widget available for use on resource pages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic static function getWidgets(): array\n{\n    return [\n        CustomerResource\\Widgets\\CustomerOverview::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ImportAction to Create Page (PHP)\nDESCRIPTION: This code snippet showcases how to add an `ImportAction` to the header of a Filament resource's create page. The `UserImporter` class is used to handle the import logic.  This example uses the CreateRecord page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Imports\\UserImporter;\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateUser extends CreateRecord\n{\n    // ...\n\n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\ImportAction::make()\n                ->importer(UserImporter::class),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Published Posts\nDESCRIPTION: This snippet demonstrates counting the number of published posts using the Count summarizer. It scopes the dataset to only include records where `is_published` is true.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Count;\nuse Illuminate\\Database\\Query\\Builder;\n\nIconColumn::make('is_published')\n    ->boolean()\n    ->summarize(\n        Count::make()->query(fn (Builder $query) => $query->where('is_published', true)),\n    )\n```\n\n----------------------------------------\n\nTITLE: Use Fields from Resource in Wizard - Filament - PHP\nDESCRIPTION: This code snippet shows how to reduce code repetition, by reusing the static functions from the resource form within the wizard steps.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\CategoryResource;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateCategory extends CreateRecord\n{\n    use CreateRecord\\Concerns\\HasWizard;\n    \n    protected static string $resource = CategoryResource::class;\n\n    protected function getSteps(): array\n    {\n        return [\n            Step::make('Name')\n                ->description('Give the category a clear and unique name')\n                ->schema([\n                    CategoryResource::getNameFormField(),\n                    CategoryResource::getSlugFormField(),\n                ]),\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting in a Filament PHP Text Column\nDESCRIPTION: This example demonstrates how to use a custom formatting callback to modify the displayed state of a TextColumn using the `formatStateUsing()` method. This can be used for localization or other complex formatting logic.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->formatStateUsing(fn (string $state): string => __(\"statuses.{$state}\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Column Selection\nDESCRIPTION: This PHP code shows how to configure the default selection state of an export column using the `enabledByDefault()` method. Setting it to `false` ensures that the column is not selected by default when the user is prompted to choose which columns to export.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->enabledByDefault(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Uploading Message in Filament\nDESCRIPTION: This snippet demonstrates how to customize the uploading message that is displayed in the form's submit button while a file is being uploaded. It uses the `uploadingMessage()` method on the Filament FileUpload component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->uploadingMessage('Uploading attachment...')\n```\n\n----------------------------------------\n\nTITLE: Automatically Generating Table Columns\nDESCRIPTION: This command generates a table Livewire component using Filament, automatically guessing the table columns based on the model's database columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire-table Products/ListProducts --generate\n```\n\n----------------------------------------\n\nTITLE: Disabling Title Label Prefix - PHP\nDESCRIPTION: This code shows how to disable the default prefixing of the group title with the label of the group using `titlePrefixedWithLabel(false)`. This allows for more concise group titles.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->titlePrefixedWithLabel(false),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tenant Middleware in Filament with PHP\nDESCRIPTION: This code demonstrates how to apply custom middleware to tenant-aware routes using the `tenantMiddleware()` method in the panel configuration. The middleware classes are passed as an array. The `isPersistent` argument determines whether the middleware is applied on every request (including AJAX).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMiddleware([\n            // ...\n        ]);\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMiddleware([\n            // ...\n        ], isPersistent: true);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Custom Color - PHP\nDESCRIPTION: This snippet customizes the color of the tags displayed in the TagsInput component. The `color()` method accepts a color name from the available Filament color palette (e.g., 'danger', 'gray', 'info').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->color('danger')\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Rich Editor Output - Blade\nDESCRIPTION: This snippet shows how to sanitize the HTML output from a Rich Editor field in a Blade view to prevent Cross-Site Scripting (XSS) vulnerabilities. It uses Filament's `sanitizeHtml()` helper function on the `content` attribute of the `$record` object to remove potentially malicious JavaScript.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/10-rich-editor.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n{!! str($record->content)->sanitizeHtml() !!}\n```\n\n----------------------------------------\n\nTITLE: Changing Column Header Offset in Filament ImportAction (PHP)\nDESCRIPTION: This code demonstrates how to set the column header offset using the `headerOffset()` method on the `ImportAction`. This is useful when the column headers are not on the first row of the CSV file, and it allows skipping a specified number of rows before reading the headers. Requires the ProductImporter class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->headerOffset(5)\n```\n\n----------------------------------------\n\nTITLE: Required With Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `requiredWith` validation rule in a Filament form. The 'name' field is required only if any of the 'field' or 'another_field' are not empty. This snippet shows how Filament leverages Laravel validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->requiredWith('field,another_field')\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Modification - PHP\nDESCRIPTION: This code snippet demonstrates how to customize the query modifications for each state of the ternary filter using the `queries()` method. It shows how to apply different where clauses based on the selected state (true, false, or blank).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/03-ternary.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('email_verified_at')\n    ->label('Email verification')\n    ->placeholder('All users')\n    ->trueLabel('Verified users')\n    ->falseLabel('Not verified users')\n    ->queries(\n        true: fn (Builder $query) => $query->whereNotNull('email_verified_at'),\n        false: fn (Builder $query) => $query->whereNull('email_verified_at'),\n        blank: fn (Builder $query) => $query, // In this example, we do not want to filter the query when it is blank.\n    )\n```\n\n----------------------------------------\n\nTITLE: Customize Delete Notification - Filament\nDESCRIPTION: This code snippet illustrates how to customize the entire success notification dispatched after deleting a record, using the `successNotification()` method with a `Filament\\Notifications\\Notification` object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nDeleteAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User deleted')\n            ->body('The user has been deleted successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling MorphTo Relationships - Filament PHP\nDESCRIPTION: This snippet demonstrates how to handle `MorphTo` relationships using the `MorphToSelect` component. It requires defining the possible types using the `types()` method, specifying the Eloquent model and attribute to display for each type.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MorphToSelect;\n\nMorphToSelect::make('commentable')\n    ->types([\n        MorphToSelect\\Type::make(Product::class)\n            ->titleAttribute('name'),\n        MorphToSelect\\Type::make(Post::class)\n            ->titleAttribute('title'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Summary in Filament Table (PHP)\nDESCRIPTION: Shows how to conditionally hide a Filament table summary based on a boolean value or a function that returns a boolean. The function can access the Eloquent query builder instance to determine whether the summary should be hidden.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Summarizer;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nTextColumn::make('sku')\n    ->summarize(Summarizer::make()\n        ->hidden(fn (Builder $query): bool => ! $query->exists()))\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Select Filter Query in Filament\nDESCRIPTION: This code snippet illustrates how to customize the query used to retrieve relationship options using a closure. This example demonstrates retrieving authors including those that have been soft deleted by using `withTrashed()`\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nSelectFilter::make('author')\n    ->relationship('author', 'name', fn (Builder $query) => $query->withTrashed())\n```\n\n----------------------------------------\n\nTITLE: Resetting a Form's Data (PHP)\nDESCRIPTION: This snippet shows how to reset a Filament form's data back to its initial state by calling the `$this->form->fill()` method. This is useful for clearing the form after a successful submission.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Comment;\n\npublic function createComment(): void\n{\n    Comment::create($this->form->getState());\n\n    // Reinitialize the form to clear its data.\n    $this->form->fill();\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Builder Actions (Delete) with Modal in Filament\nDESCRIPTION: This code snippet demonstrates how to require confirmation for a builder action, specifically the delete action, by using the `requiresConfirmation()` method on the action object.  This displays a modal to confirm the action.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->deleteAction(\n        fn (Action $action) => $action->requiresConfirmation(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Styling XLSX Header Cells with OpenSpout\nDESCRIPTION: This code snippet shows how to override the `getXlsxHeaderCellStyle()` method in an exporter class to customize the styling of header cells specifically in the generated XLSX file. It leverages OpenSpout to configure font boldness, italics, size, name, color, background color, alignment, and vertical alignment.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nuse OpenSpout\\Common\\Entity\\Style\\CellAlignment;\nuse OpenSpout\\Common\\Entity\\Style\\CellVerticalAlignment;\nuse OpenSpout\\Common\\Entity\\Style\\Color;\nuse OpenSpout\\Common\\Entity\\Style\\Style;\n\npublic function getXlsxHeaderCellStyle(): ?Style\n{\n    return (new Style())\n        ->setFontBold()\n        ->setFontItalic()\n        ->setFontSize(14)\n        ->setFontName('Consolas')\n        ->setFontColor(Color::rgb(255, 255, 77))\n        ->setBackgroundColor(Color::rgb(0, 0, 0))\n        ->setCellAlignment(CellAlignment::CENTER)\n        ->setCellVerticalAlignment(CellVerticalAlignment::CENTER);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra HTML Attributes to Field Wrapper\nDESCRIPTION: This code snippet demonstrates adding HTML attributes to the field wrapper element, which surrounds the label, entry and any other text, using the `extraFieldWrapperAttributes()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('categories')\n    ->extraFieldWrapperAttributes(['class' => 'components-locked'])\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks\nDESCRIPTION: Demonstrates the usage of various lifecycle hooks available within the EditAction, allowing for execution of code at different stages of the action's lifecycle.  Requires Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nEditAction::make()\n    ->beforeFormFilled(function () {\n        // Runs before the form fields are populated from the database.\n    })\n    ->afterFormFilled(function () {\n        // Runs after the form fields are populated from the database.\n    })\n    ->beforeFormValidated(function () {\n        // Runs before the form fields are validated when the form is saved.\n    })\n    ->afterFormValidated(function () {\n        // Runs after the form fields are validated when the form is saved.\n    })\n    ->before(function () {\n        // Runs before the form fields are saved to the database.\n    })\n    ->after(function () {\n        // Runs after the form fields are saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Replication\nDESCRIPTION: This example demonstrates how to redirect the user to a specific URL after the form submission is successful. The `successRedirectUrl()` method allows you to specify the redirect URL. In the first example, it redirects to a route named 'posts.list'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nReplicateAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Dynamically generating content - PHP\nDESCRIPTION: This example shows how to dynamically generate content for a Filament form placeholder using a closure. The closure has access to other form field values via the `Get` parameter. In this case, it calculates the total cost based on the 'cost' and 'quantity' fields and formats it as a currency string. Requires: Filament forms, Filament\\Forms\\Get.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-placeholder.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Placeholder;\nuse Filament\\Forms\\Get;\n\nPlaceholder::make('total')\n    ->content(function (Get $get): string {\n        return '€' . number_format($get('cost') * $get('quantity'), 2);\n    })\n```\n\n----------------------------------------\n\nTITLE: Collapsible Panel with Split and Stack Layout (PHP)\nDESCRIPTION: This code demonstrates how to create a collapsible panel within a Filament table. It uses `Split` and `Stack` layouts to arrange the content. The `Panel` component provides a styled container for the collapsible content. The avatar, name, phone and email are displayed using various `Column` types. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Panel;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\n[\n    Split::make([\n        ImageColumn::make('avatar')\n            ->circular(),\n        TextColumn::make('name')\n            ->weight(FontWeight::Bold)\n            ->searchable()\n            ->sortable(),\n    ]),\n    Panel::make([\n        Stack::make([\n            TextColumn::make('phone')\n                ->icon('heroicon-m-phone'),\n            TextColumn::make('email')\n                ->icon('heroicon-m-envelope'),\n        ]),\n    ])->collapsible(),\n]\n```\n\n----------------------------------------\n\nTITLE: Publish Filament Configuration (Bash)\nDESCRIPTION: This command publishes the Filament package's configuration file to the `config/filament.php` directory. This allows customization of Filament's behavior. The command uses `php artisan vendor:publish` with the `--tag=filament-config` option to target the Filament configuration files. Requires the Filament package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/07-notifications.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Using the Active Filter Value (PHP)\nDESCRIPTION: This snippet shows how to access the active filter value within the `getData()` method. The `$this->filter` property contains the currently selected filter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function getData(): array\n{\n    $activeFilter = $this->filter;\n\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Make Wizard Steps Skippable - Filament - PHP\nDESCRIPTION: This code snippet shows how to allow free navigation through wizard steps making all the steps skippable, by overriding the `hasSkippableSteps()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function hasSkippableSteps(): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'Open in New Tab' Functionality to Files in Filament\nDESCRIPTION: This snippet demonstrates how to add a button to open each uploaded file in a new tab. It uses the `openable()` method on the Filament FileUpload component in conjunction with `multiple()` to handle multiple files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->openable()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Row Classes - PHP\nDESCRIPTION: This snippet demonstrates how to conditionally style table rows based on record data using the `recordClasses()` method. A closure is used to determine the CSS classes to apply based on the record's status. It requires the `Closure`, `Filament\\Tables\\Table`, and `Illuminate\\Database\\Eloquent\\Model` classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->recordClasses(fn (Model $record) => match ($record->status) {\n            'draft' => 'opacity-30',\n            'reviewing' => 'border-s-2 border-orange-600 dark:border-orange-300',\n            'published' => 'border-s-2 border-green-600 dark:border-green-300',\n            default => null,\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Header Actions to Section - PHP\nDESCRIPTION: This snippet demonstrates how to add actions to a section's header using the `headerActions()` method. Actions allow users to trigger specific functionalities directly from the section's header. It depends on the Filament Forms and Actions packages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->headerActions([\n        Action::make('test')\n            ->action(function () {\n                // ...\n            }),\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting the Add Action Button's Label\nDESCRIPTION: This snippet customizes the label of the button used to add a new builder item. It uses the `addActionLabel()` method to change the default label to 'Add a new block'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->addActionLabel('Add a new block')\n```\n\n----------------------------------------\n\nTITLE: Nullable Validation - Filament\nDESCRIPTION: Marks the field as nullable, allowing empty values. This is the default behavior if the `required` rule is not present. It uses the `nullable()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->nullable()\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Before Filling Form (Filament)\nDESCRIPTION: This snippet shows how to customize the data before it's filled into the form using `mutateFormDataBeforeFill()` method. This method is called before the form is populated with data.  It modifies the `$data` array and returns the modified version.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected function mutateFormDataBeforeFill(array $data): array\n{\n    $data['user_id'] = auth()->id();\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Toggle Buttons in Filament\nDESCRIPTION: This example demonstrates how to group toggle buttons together for a more compact appearance using the `grouped()` method.  This also displays them horizontally.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->grouped()\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in a Filament PHP Text Column\nDESCRIPTION: These examples show how to render HTML content within a TextColumn using the `html()` method. The HTML will be sanitized to remove unsafe content. The subsequent examples show how to opt out of sanitization using `HtmlString` or a `view()` object.  The view example also requires creating a blade template file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->html()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Support\\HtmlString;\n\nTextColumn::make('description')\n    ->formatStateUsing(fn (string $state): HtmlString => new HtmlString($state))\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Contracts\\View\\View;\n\nTextColumn::make('description')\n    ->formatStateUsing(fn (string $state): View => view(\n        'filament.tables.columns.description-entry-content',\n        ['state' => $state],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Basic Restore Action - PHP\nDESCRIPTION: This snippet demonstrates the basic implementation of a Filament restore action for a single Eloquent record.  It assumes `$this->post` is available in the scope and represents the record to be restored. The action will prompt the user for confirmation before restoring the record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\RestoreAction;\n\nRestoreAction::make()\n    ->record($this->post)\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Icon in Filament Form (PHP)\nDESCRIPTION: This code snippet demonstrates how to add an icon to a tab using the `icon()` method. The example uses an icon from the heroicon-m set.  It enhances the visual representation of the tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->icon('heroicon-m-bell')\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Modal Submit Action in Filament\nDESCRIPTION: Shows how to pass arguments to the `action()` closure of a modal submit action button using the `arguments` parameter of `makeModalSubmitAction()`.  This allows passing flags or other data to influence the action's behavior.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nAction::make('create')\n    ->form([\n        // ...\n    ])\n    // ...\n    ->extraModalFooterActions(fn (Action $action): array => [\n        $action->makeModalSubmitAction('createAnother', arguments: ['another' => true]),\n    ])\n    ->action(function (array $data, array $arguments): void {\n        // Create\n\n        if ($arguments['another'] ?? false) {\n            // Reset the form and don't close the modal\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Export Columns\nDESCRIPTION: This PHP code demonstrates how to define the columns to be exported in a Filament exporter class.  The `getColumns()` method is overridden to return an array of `ExportColumn` objects, each representing a column to be included in the export.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\npublic static function getColumns(): array\n{\n    return [\n        ExportColumn::make('name'),\n        ExportColumn::make('sku')\n            ->label('SKU'),\n        ExportColumn::make('price'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Delete Notification Title - Filament\nDESCRIPTION: This code snippet demonstrates how to customize the title of the success notification dispatched after a record is deleted, using the `successNotificationTitle()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDeleteAction::make()\n    ->successNotificationTitle('User deleted')\n```\n\n----------------------------------------\n\nTITLE: Casting State Before Validation\nDESCRIPTION: This snippet demonstrates how to cast the state (value) of an import column before validation using the `castStateUsing()` method. This is useful for converting strings to the correct data type.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->castStateUsing(function (string $state): ?float {\n        if (blank($state)) {\n            return null;\n        }\n        \n        $state = preg_replace('/[^0-9.]/', '', $state);\n        $state = floatval($state);\n    \n        return round($state, precision: 2);\n    })\n```\n\n----------------------------------------\n\nTITLE: Changing Stat Color - PHP\nDESCRIPTION: This code shows how to modify the color of a stat using the `color()` method.  Valid color options are `danger`, `gray`, `info`, `primary`, `success`, and `warning`. This allows for visual differentiation of statistics based on their significance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nprotected function getStats(): array\n{\n    return [\n        Stat::make('Unique views', '192.1k')\n            ->description('32k increase')\n            ->descriptionIcon('heroicon-m-arrow-trending-up')\n            ->color('success'),\n        Stat::make('Bounce rate', '21%')\n            ->description('7% increase')\n            ->descriptionIcon('heroicon-m-arrow-trending-down')\n            ->color('danger'),\n        Stat::make('Average time on page', '3:12')\n            ->description('3% increase')\n            ->descriptionIcon('heroicon-m-arrow-trending-up')\n            ->color('success'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to pages with getUrl() - PHP\nDESCRIPTION: This snippet demonstrates how to generate a URL to a Filament page using the static `getUrl()` method. Without arguments, it generates a URL to the page within the current panel. The `Settings` class represents a Filament page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\n\nSettings::getUrl(); // /admin/settings\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Export Rows (PHP)\nDESCRIPTION: This snippet demonstrates how to limit the maximum number of rows that can be exported using the `maxRows()` method on the `ExportAction`. This prevents server overload when exporting large datasets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->maxRows(100000)\n```\n\n----------------------------------------\n\nTITLE: Manipulate Raw Data for Repeater (PHP)\nDESCRIPTION: This snippet shows how to directly manipulate the raw data within a Filament repeater field. It retrieves the current state, adds a new item with an email address, and then sets the updated state back onto the repeater component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Support\\Str;\n\n// Get the raw data for the entire repeater\n$state = $component->getState();\n\n// Add an item, with a random UUID as the key\n$state[Str::uuid()] = [\n    'email' => auth()->user()->email,\n];\n\n// Set the new data for the repeater\n$component->state($state);\n```\n\n----------------------------------------\n\nTITLE: Allowing Collapsible Filters Above Content (Filament, PHP)\nDESCRIPTION: This example extends the previous one by allowing the filters displayed above the content to be collapsible using `FiltersLayout::AboveContentCollapsible`. This allows users to hide the filters if they aren't needed, saving screen space.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::AboveContentCollapsible);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Record Test (PHP)\nDESCRIPTION: This test deletes an existing record from the database using the `DeleteAction`. It calls the action on the Edit page and then asserts that the model is missing from the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\nuse function Pest\\Livewire\\livewire;\n\nit('can delete', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostResource\\Pages\\EditPost::class, [\n        'record' => $post->getRouteKey(),\n    ])\n        ->callAction(DeleteAction::class);\n\n    $this->assertModelMissing($post);\n})\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hook Example - Filament - PHP\nDESCRIPTION: This code snippet illustrates how to use lifecycle hooks in Filament to execute custom code at different stages of the record creation process.  This example defines a `beforeCreate()` method, which will be executed before the data is saved to the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function beforeCreate(): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a field based on another field's value\nDESCRIPTION: This code snippet shows how to conditionally hide a field based on the value of another field using the `hidden()` method and a closure. The dependent field must be set to `live()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Get;\n\n[\n    Select::make('status')\n        ->options([\n            'draft' => 'Draft',\n            'reviewing' => 'Reviewing',\n            'published' => 'Published',\n        ])\n        ->required()\n        ->live(),\n    DateTimePicker::make('published_at')\n        ->hidden(fn (Get $get) => $get('status') !== 'published'),\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enabled Options - Filament PHP\nDESCRIPTION: This snippet shows how to retrieve the options that have not been disabled using the `getEnabledOptions()` method. The result is an array of keys, which can be used for validation, for example.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n    ->in(fn (Select $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Title - PHP\nDESCRIPTION: This snippet demonstrates how to set the title of a notification in Filament PHP. The title is the main message displayed to the user.  The title can contain safe HTML elements or be generated from Markdown using `Str::markdown()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Toggle Buttons in Filament\nDESCRIPTION: This snippet demonstrates how to add icons to toggle buttons using the `icons()` method. Each key in the array corresponds to an option value, and the value is a Blade icon name. The icons enhance the visual representation of each option.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n    ->icons([\n        'draft' => 'heroicon-o-pencil',\n        'scheduled' => 'heroicon-o-clock',\n        'published' => 'heroicon-o-check-circle',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enabled Toggle Button Options in Filament\nDESCRIPTION: This example shows how to retrieve the options that have not been disabled using `getEnabledOptions()`. This is useful for validation purposes, ensuring that only enabled options are considered valid.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n    ->in(fn (ToggleButtons $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Enabling database transactions in Filament (PHP)\nDESCRIPTION: This code enables database transactions for all operations within a Filament panel.  It is important to test your operations to ensure that they are safe to be wrapped in a transaction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseTransactions();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Scope for Simple Tenancy in Laravel\nDESCRIPTION: This code snippet demonstrates how to apply a global scope to a model to filter records based on the current user's `team_id`. It assumes the existence of a `team_id` column in the model's table and a `team` relationship. This approach is suitable for simple one-to-many tenancy scenarios.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass Post extends Model\n{\n    protected static function booted(): void\n    {\n        static::addGlobalScope('team', function (Builder $query) {\n            if (auth()->hasUser()) {\n                $query->where('team_id', auth()->user()->team_id);\n                // or with a `team` relationship defined:\n                $query->whereBelongsTo(auth()->user()->team);\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Label for a Filament Filter\nDESCRIPTION: This code shows how to customize the label of a filter, which is displayed to the user in the filter form, using the `label()` method. This allows for more descriptive and user-friendly filter names.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_featured')\n    ->label('Featured')\n```\n\n----------------------------------------\n\nTITLE: Preserving Original File Names\nDESCRIPTION: This snippet shows how to preserve the original file names of uploaded files using the `preserveFilenames()` method.  It's important to consider the security implications before using this feature. See the documentation for security considerations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->preserveFilenames()\n```\n\n----------------------------------------\n\nTITLE: Hiding Actions in a Livewire View (Blade)\nDESCRIPTION: This Blade code demonstrates how to conditionally render an action based on its visibility using the `isVisible()` method. It provides two examples: one using the action instance directly and another when passing arguments to the action. Protects the action from rendering if `hidden()` or `visible()` evaluate to false.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @if ($this->deleteAction->isVisible())\n        {{ $this->deleteAction }}\n    @endif\n    \n    {{-- Or --}}\n    \n    @if (($this->deleteAction)(['post' => $post->id])->isVisible())\n        {{ ($this->deleteAction)(['post' => $post->id]) }}\n    @endif\n</div>\n```\n\n----------------------------------------\n\nTITLE: Section with Responsive Columns and Text Entry Column Span\nDESCRIPTION: This code defines a Filament infolist section with a responsive grid layout using the `columns()` method. It also defines a text entry within the section and uses the `columnSpan()` method to control how many columns the text entry should span at different breakpoints, creating a responsive layout for the text entry itself.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/02-grid.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nSection::make()\n    ->columns([\n        'sm' => 3,\n        'xl' => 6,\n        '2xl' => 8,\n    ])\n    ->schema([\n        TextEntry::make('name')\n            ->columnSpan([\n                'sm' => 2,\n                'xl' => 3,\n                '2xl' => 4,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Injecting multiple utilities (PHP)\nDESCRIPTION: This code snippet shows how to inject multiple utilities simultaneously, such as arguments and the Livewire component instance. It demonstrates the flexibility of the dependency injection system.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Livewire\\Component;\n\nfunction (array $arguments, Component $livewire) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Halt in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action has been halted using Pest and Livewire. It creates an invoice without an email address, calls the 'send' action on the 'customer_id' component, and asserts that the action is halted due to the missing email.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('stops sending if invoice has no email address', function () {\n    $invoice = Invoice::factory(['email' => null])->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callFormComponentAction('customer_id', 'send')\n        ->assertFormComponentActionHalted('customer_id', 'send');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Record URLs in Filament Table (PHP)\nDESCRIPTION: This snippet shows how to make table rows clickable and navigate to a specific URL when clicked, using the `$table->recordUrl()` method. It takes a closure that receives the model record and returns the URL. Requires `Illuminate\\Database\\Eloquent\\Model`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->recordUrl(\n            fn (Model $record): string => route('posts.edit', ['record' => $record]),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom ID for a Filament Form Field\nDESCRIPTION: This code snippet shows how to override the automatically generated ID of a Filament form field using the `id()` method. This allows you to set a specific ID for the HTML element associated with the field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->id('name-field')\n```\n\n----------------------------------------\n\nTITLE: Confirm Repeater Delete Action with Modal (PHP)\nDESCRIPTION: This snippet illustrates how to add a confirmation modal to the 'delete' action in a Filament repeater. The `requiresConfirmation()` method is used on the `$action` object within a closure to enable the modal. Users will be prompted to confirm before deleting an item.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->deleteAction(\n        fn (Action $action) => $action->requiresConfirmation(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling Column Selection\nDESCRIPTION: This PHP code snippet demonstrates how to disable the user's ability to select which columns to export using `columnMapping(false)`. This exports all columns defined in the exporter without user interaction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->columnMapping(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Loading Message - Filament PHP\nDESCRIPTION: This code shows how to display a custom message while the options are loading in a searchable select or multi-select, using the `loadingMessage()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable()\n    ->loadingMessage('Loading authors...')\n```\n\n----------------------------------------\n\nTITLE: Setting the Color Format - PHP\nDESCRIPTION: This code snippet shows how to configure the color picker to use different color formats such as HSL, RGB, and RGBA.  It requires the Filament Forms package and allows users to select colors in the specified format.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/17-color-picker.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('hsl_color')\n    ->hsl()\n\nColorPicker::make('rgb_color')\n    ->rgb()\n\nColorPicker::make('rgba_color')\n    ->rgba()\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Creation\nDESCRIPTION: This snippet shows how to redirect the user after a successful record creation using the `successRedirectUrl()` method. It supports both hardcoded routes and dynamic routes based on the created record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nCreateAction::make()\n    ->successRedirectUrl(fn (Model $record): string => route('posts.edit', [\n        'post' => $record,\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Enabling Record Reordering in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to enable record reordering in a Filament table using drag and drop with the `$table->reorderable()` method. It specifies the column to store the sort order, enabling a reordering toggle button in the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->reorderable('sort');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Date Picker in Filament\nDESCRIPTION: This snippet shows how to enable the JavaScript date picker instead of the native HTML5 date picker, using the `native(false)` method.  The JavaScript date picker provides more customization options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Comma Separator - PHP\nDESCRIPTION: This snippet configures the TagsInput component to store tags as a comma-separated string instead of JSON. The `separator()` method is used to specify the delimiter character.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('tags')\n    ->separator(',')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Section in Filament Infolists (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a basic section in Filament infolists with a title, description, and schema.  The Section component is used to group related infolist components.  It requires the `Filament\\Infolists\\Components\\Section` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Create Action in Table Header\nDESCRIPTION: This snippet shows how to add a CreateAction to the header of a Filament table. It defines the table structure and includes the CreateAction within the headerActions array, configuring its form with a TextInput component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Actions\\CreateAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->headerActions([\n            CreateAction::make()\n                ->form([\n                    TextInput::make('title')\n                        ->required()\n                        ->maxLength(255),\n                    // ...\n                ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning the Add Action Button - PHP\nDESCRIPTION: This snippet demonstrates how to align the add action button using the `addActionAlignment()` method and the `Alignment` enum.  The example shows how to align the button to the start of the repeater. Requires the `Filament\\Support\\Enums\\Alignment` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Support\\Enums\\Alignment;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->addActionAlignment(Alignment::Start)\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Options - Filament PHP\nDESCRIPTION: This example demonstrates how to disable specific options in a Select component using the `disableOptionWhen()` method. It accepts a closure that determines if an option should be disabled based on its value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n```\n\n----------------------------------------\n\nTITLE: Mutating Related Item Data Before Filling - Filament/PHP\nDESCRIPTION: This snippet demonstrates how to modify the data of a related item before it is populated into the Repeater field using the `mutateRelationshipDataBeforeFillUsing()` method. The provided closure receives the item's data in the `$data` variable and expects a modified array to be returned.  This example sets the 'user_id' to the currently authenticated user's ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n    ->mutateRelationshipDataBeforeFillUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Casting State to Integer\nDESCRIPTION: Demonstrates how to cast the state of a column to an integer using the `integer()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('quantity')\n    ->integer()\n```\n\n----------------------------------------\n\nTITLE: Edit Form Validation Test (PHP)\nDESCRIPTION: This test validates the input of the edit form. It fills the form with invalid data (e.g., a null title) and then asserts that the form has errors for the expected fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can validate input', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostResource\\Pages\\EditPost::class, [\n        'record' => $post->getRouteKey(),\n    ])\n        ->fillForm([\n            'title' => null,\n        ])\n        ->call('save')\n        ->assertHasFormErrors(['title' => 'required']);\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Queue\nDESCRIPTION: This code snippet shows how to override the `getJobQueue()` method in an exporter class to customize the queue used for export jobs. It returns the name of the desired queue.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobQueue(): ?string\n{\n    return 'exports';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Size (PHP)\nDESCRIPTION: This code snippet demonstrates how to change the font size of a Filament table text column using the `size()` method and `TextColumnSize` enum. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->size(TextColumn\\TextColumnSize::Large)\n```\n\n----------------------------------------\n\nTITLE: Customize Restore Notification Title - PHP\nDESCRIPTION: This snippet demonstrates how to customize the title of the success notification displayed after a record is restored. It uses the `successNotificationTitle()` method to set a custom title for the notification.  Requires the Filament notification system to be configured.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRestoreAction::make()\n    ->successNotificationTitle('User restored')\n```\n\n----------------------------------------\n\nTITLE: Controlling Filters Dropdown Width (Filament, PHP)\nDESCRIPTION: This code shows how to customize the width of the filters dropdown in a Filament table using the `filtersFormWidth()` method. It uses the `MaxWidth` enum to specify the desired width (e.g., ExtraSmall, Small, Medium, Large, etc.). By default, the width is set to ExtraSmall.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\MaxWidth;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersFormWidth(MaxWidth::FourExtraLarge);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Success Notification\nDESCRIPTION: This snippet shows how to disable the success notification altogether by passing `null` to the `successNotification()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Input Intervals in Filament DateTimePicker\nDESCRIPTION: This snippet shows how to customize the input intervals for hours, minutes, and seconds in a DateTimePicker using `hoursStep()`, `minutesStep()`, and `secondsStep()` methods. This provides control over the increment/decrement steps in the time input.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->hoursStep(2)\n    ->minutesStep(15)\n    ->secondsStep(10)\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Text to DatePicker in Filament\nDESCRIPTION: This snippet shows how to add prefix and suffix text to a DatePicker component using the `prefix()` and `suffix()` methods.  This allows you to add descriptive text before and after the input field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date')\n    ->prefix('Starts')\n    ->suffix('at midnight')\n```\n\n----------------------------------------\n\nTITLE: Creating a Split Layout with Sections in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a `Split` layout using Filament Infolists. It includes two `Section` components, each containing `TextEntry` components. The first section is configured to `grow()` and the `from()` method sets the breakpoint for the split layout to 'md'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/06-split.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\nuse Filament\\Infolists\\Components\\Split;\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Enums\\FontWeight;\n\nSplit::make([\n    Section::make([\n        TextEntry::make('title')\n            ->weight(FontWeight::Bold),\n        TextEntry::make('content')\n            ->markdown()\n            ->prose(),\n    ]),\n    Section::make([\n        TextEntry::make('created_at')\n            ->dateTime(),\n        TextEntry::make('published_at')\n            ->dateTime(),\n    ])->grow(false),\n])->from('md')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Action Group in PHP\nDESCRIPTION: This code snippet demonstrates how to create a basic ActionGroup in Filament, containing 'view', 'edit', and 'delete' actions. The `ActionGroup::make()` method is used to group actions together into a dropdown menu.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make([\n    Action::make('view'),\n    Action::make('edit'),\n    Action::make('delete'),\n])\n```\n\n----------------------------------------\n\nTITLE: Splitting CheckboxList Options into Columns - PHP\nDESCRIPTION: This code snippet shows how to split the CheckboxList options into columns using the `columns()` method. It accepts the same options as the `columns()` method of the grid layout, allowing for responsive column customization.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Hiding the Remove File Button in Filament\nDESCRIPTION: This snippet demonstrates how to hide the remove uploaded file button in the Filament FileUpload component using the `deletable(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->deletable(false)\n```\n\n----------------------------------------\n\nTITLE: Customize Tenant Menu Billing Link in Filament\nDESCRIPTION: This code demonstrates how to customize the billing link on the tenant menu in Filament by registering a new item with the `billing` array key using the `tenantMenuItems()` method in the panel configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\MenuItem;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            'billing' => MenuItem::make()->label('Manage subscription'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Label of an Import Column\nDESCRIPTION: This snippet shows how to customize the label of an import column using the `label()` method. This allows you to display a user-friendly name for the column in the import modal.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('sku')\n    ->label('SKU')\n```\n\n----------------------------------------\n\nTITLE: Asserting Builder Item Count in Tests (PHP)\nDESCRIPTION: This snippet shows how to assert the number of items within a Filament Builder component during testing. It uses the `assertFormSet()` method with a closure to inspect the form state and verify that the 'content' array (representing Builder items) has the expected count. `Builder::fake()` is used to simplify the testing process by disabling UUID generation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse function Pest\\Livewire\\livewire;\n\n$undoBuilderFake = Builder::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertFormSet(function (array $state) {\n        expect($state['content'])\n            ->toHaveCount(2);\n    });\n\n$undoBuilderFake();\n```\n\n----------------------------------------\n\nTITLE: Reordering with Spatie Sortable - PHP\nDESCRIPTION: This example demonstrates using `orderColumn()` with `spatie/eloquent-sortable`, specifying the sortable column as 'order_column'.  This allows integration with the Spatie sortable package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n    ->orderColumn('order_column')\n```\n\n----------------------------------------\n\nTITLE: After or Equal Date Validation - Filament\nDESCRIPTION: Validates that the field contains a date after or equal to a specified date string or another field's value.  It utilizes the `afterOrEqual()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')->afterOrEqual('tomorrow')\n```\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')\nField::make('end_date')->afterOrEqual('start_date')\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix or Suffix\nDESCRIPTION: This PHP code shows how to add a prefix or suffix to the cell's value using the `prefix()` and `suffix()` methods. This is useful for adding context or formatting to the exported data, such as adding a URL prefix to a domain name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('domain')\n    ->prefix('https://')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Setting Columns for Infolist Layout - PHP\nDESCRIPTION: This snippet shows how to configure the number of columns in a Filament infolist layout using the `columns()` method. Setting `columns(2)` will create a two-column layout.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/02-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$infolist\n    ->schema([\n        // ...\n    ])\n    ->columns(2);\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with Locale - PHP\nDESCRIPTION: This snippet demonstrates currency formatting with a specific locale. It formats the 'price' as EUR using the Dutch locale ('nl').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR', locale: 'nl')\n```\n\n----------------------------------------\n\nTITLE: Defining Stats in the Widget - PHP\nDESCRIPTION: This code snippet demonstrates how to define the statistics to be displayed in the stats overview widget. It overrides the `getStats()` method to return an array of `Stat` instances, each representing a single statistic with a title and value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Widgets;\n\nuse Filament\\Widgets\\StatsOverviewWidget as BaseWidget;\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nclass StatsOverview extends BaseWidget\n{\n    protected function getStats(): array\n    {\n        return [\n            Stat::make('Unique views', '192.1k'),\n            Stat::make('Bounce rate', '21%'),\n            Stat::make('Average time on page', '3:12'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Label to Repeater Items - Filament/PHP\nDESCRIPTION: This snippet demonstrates adding a label to each repeater item using the `itemLabel()` method. The provided closure receives the current item's data in the `$state` variable and should return a string to be used as the item label.  The 'name' field is configured with `live(onBlur: true)` to update the item label dynamically as the form is used.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Select;\n\nRepeater::make('members')\n    ->schema([\n        TextInput::make('name')\n            ->required()\n            ->live(onBlur: true),\n        Select::make('role')\n            ->options([\n                'member' => 'Member',\n                'administrator' => 'Administrator',\n                'owner' => 'Owner',\n            ])\n            ->required(),\n    ])\n    ->columns(2)\n    ->itemLabel(fn (array $state): ?string => $state['name'] ?? null),\n```\n\n----------------------------------------\n\nTITLE: Setting Spark as the Tenant Billing Provider\nDESCRIPTION: This code configures Filament to use Laravel Spark as the tenant billing provider using the `SparkBillingProvider` class. This configuration is done within the `panel()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Billing\\Providers\\SparkBillingProvider;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantBillingProvider(new SparkBillingProvider());\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Billing Route Slug in Filament\nDESCRIPTION: This code demonstrates how to customize the URL slug used for the billing route in Filament using the `tenantBillingRouteSlug()` method in the panel configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantBillingRouteSlug('billing');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Footer Actions to Section - PHP\nDESCRIPTION: This snippet demonstrates how to add actions to a section's footer using the `footerActions()` method.  These actions are typically used for operations related to the entire section. Requires Filament Forms and Actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->schema([\n        // ...\n    ])\n    ->footerActions([\n        Action::make('test')\n            ->action(function () {\n                // ...\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Average Summarizer to TextColumn\nDESCRIPTION: This code snippet demonstrates how to add an average summarizer to a text column in a Filament table. It uses the `Average` summarizer from the `Filament\\Tables\\Columns\\Summarizers` namespace to calculate the average value of the specified column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make())\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix Icons\nDESCRIPTION: This snippet shows how to add prefix and suffix icons to a text input using Blade UI Kit icons. This enhances the visual presentation of the input.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('domain')\n    ->url()\n    ->suffixIcon('heroicon-m-globe-alt')\n```\n\n----------------------------------------\n\nTITLE: Configure Database Notification Polling (PHP)\nDESCRIPTION: This code snippet shows how to customize the polling interval for database notifications in a Filament Panel. The `databaseNotificationsPolling()` method, chained after `databaseNotifications()`, sets the polling interval (e.g., '30s'). No specific dependencies are listed beyond the Filament Panel package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/07-notifications.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseNotifications()\n        ->databaseNotificationsPolling('30s');\n}\n```\n\n----------------------------------------\n\nTITLE: Before Date Validation - Filament\nDESCRIPTION: Validates that the field contains a date before a specified date string or another field's value. It utilizes the `before()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')->before('first day of next month')\n```\n\nLANGUAGE: php\nCODE:\n```\nField::make('start_date')->before('end_date')\nField::make('end_date')\n```\n\n----------------------------------------\n\nTITLE: Formatting Numeric Text Entry with Locale - PHP\nDESCRIPTION: This snippet demonstrates how to format a TextEntry as a number with a specific locale ('nl' for Dutch). This overrides the application's default locale for number formatting.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('stock')\n    ->numeric(locale: 'nl')\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Radio Options in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to disable specific options in a Filament Radio component using the `disableOptionWhen()` method. It accepts a closure that determines whether an option should be disabled based on its value. In this case, the 'published' option is disabled.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n```\n\n----------------------------------------\n\nTITLE: Customizing Eloquent Query Scoping - PHP\nDESCRIPTION: This snippet demonstrates how to customize the Eloquent query scoping behavior for a group. This allows you to specify how the query should be scoped based on the group's key using `scopeQueryByKeyUsing()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->scopeQueryByKeyUsing(fn (Builder $query, string $key) => $query->where('status', $key)),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom MIME Type Mapping in Filament\nDESCRIPTION: This snippet demonstrates how to manually define MIME types for specific file extensions using the `mimeTypeMap()` method in Filament. This is useful when the browser doesn't recognize file formats correctly during uploads.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('designs')\n    ->acceptedFileTypes([\n        'x-world/x-3dmf',\n        'application/vnd.sketchup.skp',\n    ])\n    ->mimeTypeMap([\n        '3dm' => 'x-world/x-3dmf',\n        'skp' => 'application/vnd.sketchup.skp',\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Direction for CheckboxList Columns - PHP\nDESCRIPTION: This example demonstrates how to set the grid direction to horizontal (row) when using columns in a CheckboxList. By default, checkboxes are listed vertically in columns, but `gridDirection('row')` changes this behavior.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n    ->gridDirection('row')\n```\n\n----------------------------------------\n\nTITLE: Making the Builder Collapsible\nDESCRIPTION: This snippet makes the builder collapsible, allowing the user to hide the content in long forms by using the `collapsible()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapsible()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Fieldset in Filament Infolists (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a basic Fieldset with a label in Filament Infolists. The `schema()` method is used to define the fields within the fieldset. This example sets up a Fieldset component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/03-fieldset.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Fieldset;\n\nFieldset::make('Label')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Exists Validation - Filament\nDESCRIPTION: Validates that the field's value exists in the database. By default, it searches the form's model. The table and column to search can be customized.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nField::make('invitation')->exists()\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Invitation;\n\nField::make('invitation')->exists(table: Invitation::class)\n```\n\nLANGUAGE: php\nCODE:\n```\nField::make('invitation')->exists(column: 'id')\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Validation\\Rules\\Exists;\n\nField::make('invitation')\n    ->exists(modifyRuleUsing: function (Exists $rule) {\n        return $rule->where('is_active', 1);\n    })\n```\n\n----------------------------------------\n\nTITLE: Mutating Form Data Before Saving\nDESCRIPTION: Demonstrates modifying form data before it is saved to the database using `mutateFormDataUsing()`. This is useful for adding additional data or modifying existing data before saving.  Requires Filament and Laravel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nEditAction::make()\n    ->mutateFormDataUsing(function (array $data): array {\n        $data['last_edited_by_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Adding Header Actions to a Section in Filament Infolists (PHP)\nDESCRIPTION: This code demonstrates how to add actions to the header of a section in Filament infolists using the `headerActions()` method. It requires `Filament\\Infolists\\Components\\Section`, `Filament\\Infolists\\Components\\Actions\\Action`, and a section heading or ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->headerActions([\n        Action::make('edit')\n            ->action(function () {\n                // ...\n            }),\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enabling unsaved changes alerts in Filament (PHP)\nDESCRIPTION: This code enables alerts to prevent users from navigating away from a page without saving their changes. It applies to Create and Edit pages of resources and open action modals.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->unsavedChangesAlerts();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Price Range\nDESCRIPTION: This snippet demonstrates calculating the minimum and maximum price using the Range summarizer within a Filament table's text column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Range::make())\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Duration - JavaScript\nDESCRIPTION: This snippet shows how to set the duration of a notification using JavaScript with Filament, both in milliseconds and seconds.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .duration(5000)\n    .send()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .seconds(5)\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Summarizing Groups - PHP\nDESCRIPTION: This code snippet shows how to display a summary of records within each group and hides the grouped rows, only showing the summary.  It uses `groupsOnly()` method and assumes that summarizers have been added to relevant columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            TextColumn::make('views_count')\n                ->summarize(Sum::make()),\n            TextColumn::make('likes_count')\n                ->summarize(Sum::make()),\n        ])\n        ->defaultGroup('category')\n        ->groupsOnly();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Step Icons in a Filament Wizard with PHP\nDESCRIPTION: This code snippet demonstrates how to set up an icon for a Wizard step using the `icon()` method. It assigns the 'heroicon-m-shopping_bag' icon to the 'Order' step. The icon is displayed next to the step title, enhancing the visual representation of each step.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard\\Step::make('Order')\n    ->icon('heroicon-m-shopping_bag')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Filament Grid Component Usage\nDESCRIPTION: This snippet shows how to use the `Grid` component in Filament to create a responsive grid layout for form elements.  The number of columns is set directly on the `Grid` instance for different breakpoints. This offers an alternative to setting columns on other layout components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/02-grid.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Grid;\n\nGrid::make([\n    'default' => 1,\n    'sm' => 2,\n    'md' => 3,\n    'lg' => 4,\n    'xl' => 6,\n    '2xl' => 8,\n])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Badge Trigger Style - Filament\nDESCRIPTION: Demonstrates setting the trigger style to a badge using the `badge()` method.  Badge triggers have a background color, label, and optionally an icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->badge()\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Helper Text to Filament Form Field\nDESCRIPTION: This code snippet shows how to add HTML helper text below a Filament form field using the `helperText()` method and the `HtmlString` class. This allows you to render styled text in the helper section. The example also uses the `inlineMarkdown()` helper.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Support\\HtmlString;\n\nTextInput::make('name')\n    ->helperText(new HtmlString('Your <strong>full name</strong> here, including any middle names.'))\n\nTextInput::make('name')\n    ->helperText(str('Your **full name** here, including any middle names.')->inlineMarkdown()->toHtmlString())\n\nTextInput::make('name')\n    ->helperText(view('name-helper-text'))\n```\n\n----------------------------------------\n\nTITLE: Searching with Laravel Scout in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to integrate Laravel Scout for searching records in a Filament table. It overrides the `applySearchToTableQuery()` method to use Scout's search functionality.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nprotected function applySearchToTableQuery(Builder $query): Builder\n{\n    $this->applyColumnSearchesToTableQuery($query);\n    \n    if (filled($search = $this->getTableSearch())) {\n        $query->whereIn('id', Post::search($search)->keys());\n    }\n\n    return $query;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Link Trigger Style - Filament\nDESCRIPTION: Demonstrates setting the trigger style to a link using the `link()` method.  Link triggers have no background color and are styled like an embedded link.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->link()\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Color (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the color of the chart data by setting the `$color` property.  The available options are `danger`, `gray`, `info`, `primary`, `success` or `warning`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $color = 'info';\n```\n\n----------------------------------------\n\nTITLE: Dispatching Close Notification Event from Livewire (PHP)\nDESCRIPTION: This PHP code shows how to dispatch a 'close-notification' browser event from a Livewire component.  This event is used to close a specific notification, identified by its ID. The event needs to contain the ID of the notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatch('close-notification', id: $notificationId);\n```\n\n----------------------------------------\n\nTITLE: Filling Modal Form with Existing Data (PHP)\nDESCRIPTION: This snippet demonstrates how to pre-populate a modal form with existing data from a record using the `fillForm()` method. It retrieves the author ID from the post record and uses it to fill the 'authorId' field in the form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Form;\n\nAction::make('updateAuthor')\n    ->fillForm(fn (Post $record): array => [\n        'authorId' => $record->author->id,\n    ])\n    ->form([\n        Select::make('authorId')\n            ->label('Author')\n            ->options(User::query()->pluck('name', 'id'))\n            ->required(),\n    ])\n    ->action(function (array $data, Post $record): void {\n        $record->author()->associate($data['authorId']);\n        $record->save();\n    })\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Content - PHP\nDESCRIPTION: This snippet shows how to render HTML content within a TextEntry using the `html()` method. The HTML content will be sanitized before rendering to prevent XSS vulnerabilities.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->html()\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Data Set in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action is pre-filled with data using Pest and Livewire. It creates an invoice, mounts the 'send' action on the 'customer_id' component, and asserts that the 'email' field is pre-filled with the primary contact's email address.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices to the primary contact by default', function () {\n    $invoice = Invoice::factory()->create();\n    $recipientEmail = $invoice->company->primaryContact->email;\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountFormComponentAction('customer_id', 'send')\n        ->assertFormComponentActionDataSet([\n            'email' => $recipientEmail,\n        ])\n        ->callMountedFormComponentAction()\n        ->assertHasNoFormComponentActionErrors();\n        \n    expect($invoice->refresh())\n        ->isSent()->toBeTrue()\n        ->recipient_email->toBe($recipientEmail);\n});\n```\n\n----------------------------------------\n\nTITLE: Create Database Notification (PHP)\nDESCRIPTION: Creates a traditional Laravel notification class by returning the notification from the `toDatabase()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Notifications\\Notification;\n\npublic function toDatabase(User $notifiable): array\n{\n    return Notification::make()\n        ->title('Saved successfully')\n        ->getDatabaseMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Infolist in Livewire View (Blade)\nDESCRIPTION: Renders the infolist in the Livewire component's Blade view. This displays the configured infolist to the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n{{ $this->productInfolist }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Filament Form Field\nDESCRIPTION: This code snippet demonstrates how to conditionally hide a Filament form field based on a boolean value using the `hidden()` method.  The field is hidden only if the condition is true.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hidden(! auth()->user()->isAdmin())\n```\n\n----------------------------------------\n\nTITLE: Setting Option Descriptions for Radio in Filament (PHP)\nDESCRIPTION: This snippet shows how to add descriptions to each option in a Filament Radio component. The `descriptions()` method is used to provide additional context for each option, enhancing the user experience. Make sure the keys in the `descriptions()` array match the keys in the `options()` array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n    ->descriptions([\n        'draft' => 'Is not visible.',\n        'scheduled' => 'Will be visible.',\n        'published' => 'Is visible.'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Positioning Options Inline Under Label in Filament (PHP)\nDESCRIPTION: This example demonstrates how to display the radio button options inline with each other but below the label using `inline()` and `inlineLabel(false)` methods. This configuration separates the options from the label while maintaining an inline layout.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline()\n    ->inlineLabel(false)\n```\n\n----------------------------------------\n\nTITLE: Using a Toggle Filter in Filament\nDESCRIPTION: This code demonstrates how to replace the default checkbox filter with a toggle button using the `toggle()` method. This can provide a more modern and user-friendly interface for boolean filters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_featured')\n    ->toggle()\n```\n\n----------------------------------------\n\nTITLE: Disabling database transaction for a specific action in Filament (PHP)\nDESCRIPTION: This code shows how to disable database transactions for a specific action. This is useful when some operations shouldn't be wrapped in a transaction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nCreateAction::make()\n    ->databaseTransaction(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Builder Actions (Collapse All) in Filament\nDESCRIPTION: This code snippet shows how to customize builder actions, specifically the collapse all action, using the `collapseAllAction()` method.  It provides an example of changing the label of the action button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapseAllAction(\n        fn (Action $action) => $action->label('Collapse all content'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Translating a Label - Filament\nDESCRIPTION: Shows how to automatically translate the trigger button label using Laravel's localization features via the `translateLabel()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->translateLabel() // Equivalent to `label(__('Edit'))`\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Require Subscription for Resource/Page in Filament\nDESCRIPTION: This snippet shows how to require a tenant subscription for specific resources or pages in Filament by overriding the `isTenantSubscriptionRequired()` method. It returns `true` to enforce the subscription requirement.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic static function isTenantSubscriptionRequired(Panel $panel): bool\n{\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Widgets' Grid in Filament (PHP)\nDESCRIPTION: This snippet shows how to override the `getColumns()` method in the `app/Filament/Pages/Dashboard.php` file to return a number of grid columns to use for displaying widgets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getColumns(): int | string | array\n{\n    return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Table Column Class in Filament\nDESCRIPTION: This snippet shows how to create a custom table column class in Filament.  It extends the base `Column` class and defines the path to the Blade view file that will render the column. This allows for reusable custom column implementations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/10-custom.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Column;\n\nclass StatusSwitcher extends Column\n{\n    protected string $view = 'filament.tables.columns.status-switcher';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Duration - PHP\nDESCRIPTION: This snippet demonstrates setting the duration of a notification in milliseconds using the `duration()` method in Filament PHP.  The snippet also shows how to specify duration in seconds with `seconds()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->duration(5000)\n    ->send();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->seconds(5)\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Accepted Toggle Validation PHP\nDESCRIPTION: This snippet demonstrates how to use the `accepted()` method to validate that the toggle is 'on'. Useful for accepting terms and conditions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('terms_of_service')\n    ->accepted()\n```\n\n----------------------------------------\n\nTITLE: Send Database Notification with Websocket Event (PHP)\nDESCRIPTION: Sends a database notification and dispatches a `DatabaseNotificationsSent` event to trigger immediate fetching of new notifications when using websockets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\nNotification::make()\n    ->title('Saved successfully')\n    ->sendToDatabase($recipient, isEventDispatched: true);\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Width with Grid Layout (PHP)\nDESCRIPTION: This code snippet demonstrates how to control column widths in a Filament table using the `Grid` layout component.  It sets the number of columns to 2 for large screens (lg breakpoint), ensuring equal width for the 'phone' and 'email' columns. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Grid;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nGrid::make([\n    'lg' => 2,\n])\n    ->schema([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Background Color - PHP\nDESCRIPTION: This snippet shows how to set the background color of a notification using the `color()` method in Filament PHP. The color can provide additional context to the notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->color('success')\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Disabling Create Another\nDESCRIPTION: This snippet shows how to remove the 'create another' button from the modal, using the `createAnother(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->createAnother(false)\n```\n\n----------------------------------------\n\nTITLE: Action Execution with Forms (v3) - PHP\nDESCRIPTION: This snippet shows the recommended approach for action execution with forms in Filament v3, using a closure function instead of a string to define the action that's executed when a button is clicked.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/10-upgrade-guide.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nAction::make('import_data')\n    ->action(Closure::fromCallable([$this, 'importData']))\n```\n\n----------------------------------------\n\nTITLE: Form Component Action Utility Injection - PHP\nDESCRIPTION: This snippet demonstrates how to inject utilities such as `$set` and `$state` directly into the `action()` function of a form component action. These utilities allow the action to interact with and modify the form component's state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Set;\n\nAction::make('copyCostToPrice')\n    ->icon('heroicon-m-clipboard')\n    ->requiresConfirmation()\n    ->action(function (Set $set, $state) {\n        $set('price', $state);\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing HasColor Interface for Enum Colors in Filament\nDESCRIPTION: This code snippet demonstrates how to implement the `HasColor` interface in a PHP enum to associate colors with enum values, allowing for colored display in Filament UI components. The enum defines a `getColor()` method that returns a color string or an array of colors based on the enum case. These colors can then be used to style elements in Filament tables and infolists.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/07-enums.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasColor;\n\nenum Status: string implements HasColor\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getColor(): string | array | null\n    {\n        return match ($this) {\n            self::Draft => 'gray',\n            self::Reviewing => 'warning',\n            self::Published => 'success',\n            self::Rejected => 'danger',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cloning of Repeater Items - PHP\nDESCRIPTION: This snippet enables the ability to clone repeater items using the `cloneable()` method.  This allows users to duplicate existing items, which can save time and effort when similar items need to be created.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->schema([\n        // ...\n    ])\n    ->cloneable()\n```\n\n----------------------------------------\n\nTITLE: Customize Repeater Collapse All Action (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the 'collapse all' action within a Filament repeater field by modifying its label. It uses a closure to access the `$action` object and set the label to 'Collapse all members'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->collapseAllAction(\n        fn (Action $action) => $action->label('Collapse all members'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding a Chart to a Stat - PHP\nDESCRIPTION: This code shows how to add a chart to a statistic, providing visual historical data. The `chart()` method accepts an array of data points that are plotted as a line chart.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nprotected function getStats(): array\n{\n    return [\n        Stat::make('Unique views', '192.1k')\n            ->description('32k increase')\n            ->descriptionIcon('heroicon-m-arrow-trending-up')\n            ->chart([7, 2, 10, 3, 15, 4, 17])\n            ->color('success'),\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Step Lifecycle Hooks (before/after Validation) in PHP\nDESCRIPTION: This code demonstrates how to add lifecycle hooks to a Wizard step using the `beforeValidation()` and `afterValidation()` methods. These hooks allow you to execute custom logic before and after the step's validation process.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard\\Step::make('Order')\n    ->afterValidation(function () {\n        // ...\n    })\n    ->beforeValidation(function () {\n        // ...\n    })\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job on Action\nDESCRIPTION: This code snippet demonstrates how to customize the export job for a specific export action using the `job()` method. It specifies the custom job class to be used for the export.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\PrepareCsvExport;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->job(PrepareCsvExport::class)\n```\n\n----------------------------------------\n\nTITLE: Asserting Actions Order using Pest\nDESCRIPTION: This snippet shows how to assert that a list of actions exist in the correct order using `assertActionsExistInOrder()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'send' and 'export' actions exist in the specified order.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can have actions in order', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionsExistInOrder(['send', 'export']);\n});\n```\n\n----------------------------------------\n\nTITLE: Making Notification Persistent - JavaScript\nDESCRIPTION: This snippet shows how to make a notification persistent, meaning it won't automatically close and requires manual dismissal by the user using JavaScript with Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .persistent()\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Render List Page Test (PHP)\nDESCRIPTION: This test case ensures that the List page for a Filament resource (e.g., `PostResource`) can be rendered successfully. It generates the URL for the index page and asserts that the request returns a successful response.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nit('can render page', function () {\n    $this->get(PostResource::getUrl('index'))->assertSuccessful();\n})\n```\n\n----------------------------------------\n\nTITLE: Scoping Select Component in Filament with PHP\nDESCRIPTION: This code shows how to scope a `Select` component's options to the current tenant by using the `modifyQueryUsing` parameter in the `relationship()` method. This ensures that only options belonging to the current tenant are displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Facades\\Filament;\nuse Filament\\Forms\\Components\\Select;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nSelect::make('author_id')\n    ->relationship(\n        name: 'author',\n        titleAttribute: 'name',\n        modifyQueryUsing: fn (Builder $query) => $query->whereBelongsTo(Filament::getTenant()),\n    );\n```\n\n----------------------------------------\n\nTITLE: Copyable Color Entry with Customization in Filament\nDESCRIPTION: This snippet extends the `ColorEntry` component to allow copying the color value to the clipboard when the preview is clicked.  It also customizes the confirmation message and duration using `copyMessage()` and `copyMessageDuration()` methods. This functionality requires SSL to be enabled for the application.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/05-color.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ColorEntry;\n\nColorEntry::make('color')\n    ->copyable()\n    ->copyMessage('Copied!')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Livewire Component (PHP)\nDESCRIPTION: This snippet illustrates how to pass parameters to a Livewire component. The parameters are passed as an array to the `Livewire::make()` method. These parameters are then passed to the Livewire component's `mount()` method or are available as public properties.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Livewire;\nuse App\\Livewire\\Foo;\n\nLivewire::make(Foo::class, ['bar' => 'baz'])\n```\n\n----------------------------------------\n\nTITLE: Customizing Export File Name (PHP)\nDESCRIPTION: This snippet shows how to customize the filename of exported files using the `fileName()` method on the `ExportAction`. It accepts a closure that receives the `Export` model and returns a string for the filename.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\Models\\Export;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->fileName(fn (Export $export): string => \"products-{$export->getKey()}.csv\")\n```\n\n----------------------------------------\n\nTITLE: Define Wizard Steps - Filament - PHP\nDESCRIPTION: This code snippet demonstrates how to define wizard steps in Filament using the `Step` component. Each step can have a schema defining the form fields to be displayed in that step.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Forms\\Components\\Wizard\\Step;\n\nprotected function getSteps(): array\n{\n    return [\n        Step::make('Name')\n            ->description('Give the category a clear and unique name')\n            ->schema([\n                TextInput::make('name')\n                    ->required()\n                    ->live()\n                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),\n                TextInput::make('slug')\n                    ->disabled()\n                    ->required()\n                    ->unique(Category::class, 'slug', fn ($record) => $record),\n            ]),\n        Step::make('Description')\n            ->description('Add some extra details')\n            ->schema([\n                MarkdownEditor::make('description')\n                    ->columnSpan('full'),\n            ]),\n        Step::make('Visibility')\n            ->description('Control who can view it')\n            ->schema([\n                Toggle::make('is_visible')\n                    ->label('Visible to customers.')\n                    ->default(true),\n            ]),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Table for an Eloquent Relationship\nDESCRIPTION: This PHP code snippet demonstrates how to build a table for an Eloquent relationship in Filament. It uses the `relationship()` method to define the relationship and the `inverseRelationship()` method to specify the inverse relationship.  It also configures a `name` column for the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Category;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\n\npublic Category $category;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->relationship(fn (): BelongsToMany => $this->category->products())\n        ->inverseRelationship('categories')\n        ->columns([\n            TextColumn::make('name'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Span for Entries - PHP\nDESCRIPTION: This snippet demonstrates how to control the column span of a specific entry using the `columnSpan()` method. The 'content' entry is configured to span two columns (or the full width).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/02-getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\n[\n    TextEntry::make('title'),\n    TextEntry::make('slug')\n    TextEntry::make('content')\n        ->columnSpan(2), // or `columnSpan('full')`,\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Search Results for Multi-Select - PHP\nDESCRIPTION: This code demonstrates how to use custom search results with multi-select functionality, using `getSearchResultsUsing()` and `getOptionLabelsUsing()`.  It shows an example with a `Technology` model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nSelect::make('technologies')\n    ->multiple()\n    ->searchable()\n    ->getSearchResultsUsing(fn (string $search): array => Technology::where('name', 'like', \"%{$search}%\")->limit(50)->pluck('name', 'id')->toArray())\n    ->getOptionLabelsUsing(fn (array $values): array => Technology::whereIn('id', $values)->pluck('name', 'id')->toArray()),\n```\n\n----------------------------------------\n\nTITLE: Persisting Collapsed Sections - PHP\nDESCRIPTION: This snippet shows how to persist the collapsed state of a section in local storage using the `persistCollapsed()` method. This ensures that the section remains collapsed even after the page is refreshed. Requires Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed()\n```\n\n----------------------------------------\n\nTITLE: Preventing Deleting Items in a Repeater - PHP\nDESCRIPTION: This snippet shows how to prevent users from deleting existing items in the repeater by using the `deletable(false)` method. Useful when the existing items need to be kept as read-only.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->deletable(false)\n```\n\n----------------------------------------\n\nTITLE: Adding Header Actions to a Filament Page (PHP)\nDESCRIPTION: This code snippet shows how to add actions (buttons) to the header of a Filament page. The actions are defined in the `getHeaderActions()` method, which returns an array of `Action` objects.  These actions can perform tasks or navigate to URLs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nprotected function getHeaderActions(): array\n{\n    return [\n        Action::make('edit')\n            ->url(route('posts.edit', ['post' => $this->post])),\n        Action::make('delete')\n            ->requiresConfirmation()\n            ->action(fn () => $this->post->delete()),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Filament Filters in Session\nDESCRIPTION: This code shows how to persist the table filters in the user's session using the `persistFiltersInSession()` method. This allows users to maintain their filter settings across different pages or sessions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->persistFiltersInSession();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Textarea Component (Filament/PHP)\nDESCRIPTION: This code snippet demonstrates the basic initialization of a Textarea form component in Filament. It creates a textarea field named 'description'.  This requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/15-textarea.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n```\n\n----------------------------------------\n\nTITLE: Adding Text Columns to Patient Table - PHP\nDESCRIPTION: This snippet shows how to configure the Filament table for displaying patient data by adding text columns for the 'name', 'type', 'date_of_birth', and 'owner.name' fields. It uses the `TextColumn` component from Filament to display each field's value.  Dot notation is used to access related data from the Owner model, displaying the owner's name instead of the ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Tables\\Columns\\TextColumn::make('name'),\n            Tables\\Columns\\TextColumn::make('type'),\n            Tables\\Columns\\TextColumn::make('date_of_birth'),\n            Tables\\Columns\\TextColumn::make('owner.name'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Tab in Query String - Filament PHP\nDESCRIPTION: This code snippet shows how to persist the current tab in the URL's query string for a Filament infolist Tabs component. The `persistTabInQueryString()` method is used. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->persistTabInQueryString()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Ternary Filter - PHP\nDESCRIPTION: This code snippet demonstrates how to create a basic ternary filter for a column named `is_admin` in Filament tables. It uses the `TernaryFilter::make()` method to define the filter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/03-ternary.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Disabling Seconds Input in DateTimePicker in Filament\nDESCRIPTION: This snippet demonstrates how to disable the seconds input in a DateTimePicker component using the `seconds(false)` method. This is useful when you don't need the precision of seconds in your time input.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->seconds(false)\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Values PHP\nDESCRIPTION: Configures an IconEntry to display a check or cross icon based on a boolean field 'is_featured'. The `boolean()` method automatically renders the appropriate icon based on the truthiness of the value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/03-icon.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('is_featured')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Disabling Record Deselection on Filter Change\nDESCRIPTION: This code demonstrates how to disable the default behavior of deselecting all records when filters change, using the `deselectAllRecordsWhenFiltered(false)` method. This is useful when you want to maintain record selections even after applying filters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->deselectAllRecordsWhenFiltered(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numeric Text Entry with Decimal Places - PHP\nDESCRIPTION: This snippet extends the numeric formatting example by specifying the number of decimal places to use when formatting the number. In this case, it's set to 0.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('stock')\n    ->numeric(decimalPlaces: 0)\n```\n\n----------------------------------------\n\nTITLE: Creating a View Action with Form Fields (Filament)\nDESCRIPTION: This snippet demonstrates how to create a ViewAction with form fields to display record data. It requires the Filament\\Actions\\ViewAction and Filament\\Forms\\Components\\TextInput classes.  The action is configured with a record and a form containing TextInput components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/03-view.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ViewAction;\nuse Filament\\Forms\\Components\\TextInput;\n\nViewAction::make()\n    ->record($this->post)\n    ->form([\n        TextInput::make('title')\n            ->required()\n            ->maxLength(255),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocomplete\nDESCRIPTION: This snippet shows how to enable browser autocomplete for a text input, specifying the `autocomplete` attribute. `autocomplete(false)` disables autocomplete.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->autocomplete('new-password')\n```\n\n----------------------------------------\n\nTITLE: Hide Tenant Menu in Filament\nDESCRIPTION: This code shows how to hide the tenant menu in Filament by using the `tenantMenu(false)` in Panel configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenu(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Middleware\nDESCRIPTION: This code snippet demonstrates how to override the `getJobMiddleware()` method in an exporter class to customize the middleware applied to export jobs. It includes the `WithoutOverlapping` middleware to prevent concurrent job execution.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobMiddleware(): array\n{\n    return [\n        (new WithoutOverlapping(\"export{$this->export->getKey()}\"))->expireAfter(600),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Object (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a custom `Notification` class that extends the package's `Notification` class. It adds a new `size` property and methods to set and get it. The `toArray()` method includes the size in the notification data, and the `fromArray()` method allows recreating the notification from an array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/05-customizing-notifications.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Notifications;\n\nuse Filament\\Notifications\\Notification as BaseNotification;\n\nclass Notification extends BaseNotification\n{\n    protected string $size = 'md';\n\n    public function toArray(): array\n    {\n        return [\n            ...parent::toArray(),\n            'size' => $this->getSize(),\n        ];\n    }\n\n    public static function fromArray(array $data): static\n    {\n        return parent::fromArray($data)->size($data['size']);\n    }\n\n    public function size(string $size): static\n    {\n        $this->size = $size;\n\n        return $this;\n    }\n\n    public function getSize(): string\n    {\n        return $this->size;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stats Overview Widget - Artisan Command\nDESCRIPTION: This command generates a new `StatsOverview.php` file, providing a starting point for defining a Filament stats overview widget. It utilizes the `--stats-overview` flag to include the necessary boilerplate code.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget StatsOverview --stats-overview\n```\n\n----------------------------------------\n\nTITLE: Basic Filament Button\nDESCRIPTION: Renders a basic Filament button that triggers a Livewire action when clicked. The `wire:click` attribute is used to bind the button click to the `openNewUserModal` method in the Livewire component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button wire:click=\"openNewUserModal\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Defining Builder Blocks (Simplified)\nDESCRIPTION: This code snippet demonstrates a simplified version of defining Filament Builder blocks. It focuses on creating a 'heading' block with a TextInput component and emphasizes the structure required for defining blocks within the builder.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Forms\\Components\\TextInput;\n\nBuilder::make('content')\n    ->blocks([\n        Builder\\Block::make('heading')\n            ->schema([\n                TextInput::make('content')->required(),\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Making Anonymous Actions Full Width - PHP\nDESCRIPTION: This snippet shows how to make anonymous actions consume the full width of the form using the `fullWidth()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions;\n\nActions::make([\n    // ...\n])->fullWidth(),\n```\n\n----------------------------------------\n\nTITLE: Custom Filament Form Layout Class (PHP)\nDESCRIPTION: Defines a custom Filament form layout component.  The component extends the base Component class and specifies the view file to be used for rendering. A static `make()` method is provided for creating an instance of the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-custom.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Component;\n\nclass Wizard extends Component\n{\n    protected string $view = 'filament.forms.components.wizard';\n\n    public static function make(): static\n    {\n        return app(static::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prohibited Unless Validation - Filament\nDESCRIPTION: Validates that the field must be empty unless another field has a specific value. It uses the `prohibitedUnless()` method, taking the other field's name and the value as arguments.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->prohibitedUnless('field', 'value')\n```\n\n----------------------------------------\n\nTITLE: Defining Infolist for Specific View Page (Filament)\nDESCRIPTION: This code snippet illustrates how to define a custom infolist for a specific View page.  It's useful when creating multiple view pages and requires distinct infolists for each.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Infolist;\n\npublic function infolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->schema([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Plugin to Filament Panel (PHP)\nDESCRIPTION: Registers the Spatie Laravel Translatable Plugin with a Filament Panel.  The `plugin()` method is used to add the plugin to the panel configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\SpatieLaravelTranslatablePlugin;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->plugin(SpatieLaravelTranslatablePlugin::make());\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Steps to be Skipped in Filament Wizard in PHP\nDESCRIPTION: This snippet shows how to allow free navigation between steps in a Filament Wizard by using the `skippable()` method. When enabled, users can navigate to any step without completing the preceding steps.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->skippable()\n```\n\n----------------------------------------\n\nTITLE: Setting Form Model Class (PHP)\nDESCRIPTION: This shows how to set the model class for a Filament form when the model instance isn't available until after the form submission. This is useful for 'create' forms where the model doesn't exist yet.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Forms\\Form;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            // ...\n        ])\n        ->statePath('data')\n        ->model(Post::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Pivot Data to Relationship in CheckboxList - PHP\nDESCRIPTION: This code snippet shows how to save additional data to the pivot table when using the `relationship()` method with the CheckboxList. This is done using the `pivotData()` method to specify the data to be saved.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('primaryTechnologies')\n    ->relationship(name: 'technologies', titleAttribute: 'name')\n    ->pivotData([\n        'is_primary' => true,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Send POST Request from Tenant Menu Item in Filament\nDESCRIPTION: This code shows how to send a `POST` HTTP request from a tenant menu item by passing a URL to the `postAction()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\MenuItem;\n\nMenuItem::make()\n    ->label('Lock session')\n    ->postAction(fn (): string => route('lock-session'))\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Page to Sub-Navigation\nDESCRIPTION: This code snippet demonstrates how to integrate the Edit page into the resource sub-navigation.  This is useful if you're using resource sub-navigation and want an easy way to switch to the Edit page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/04-editing-records.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\CustomerResource\\Pages;\nuse Filament\\Resources\\Pages\\Page;\n\npublic static function getRecordSubNavigation(Page $page): array\n{\n    return $page->generateNavigationItems([\n        // ...\n        Pages\\EditCustomerContact::class,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Images Configuration - Filament PHP\nDESCRIPTION: This snippet demonstrates how to customize image uploads for the Rich Editor component using the `fileAttachmentsDisk()`, `fileAttachmentsDirectory()`, and `fileAttachmentsVisibility()` methods.  These methods allow you to configure the disk, directory, and visibility settings for uploaded images.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/10-rich-editor.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->fileAttachmentsDisk('s3')\n    ->fileAttachmentsDirectory('attachments')\n    ->fileAttachmentsVisibility('private')\n```\n\n----------------------------------------\n\nTITLE: Casting State to Numeric\nDESCRIPTION: Demonstrates how to cast the state of a column to a float using the `numeric()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('price')\n    ->numeric(decimalPlaces: 2)\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Hint Actions to a Field - PHP\nDESCRIPTION: This snippet demonstrates how to add multiple hint actions to a field using `hintActions()`. Each action is defined using `Action::make()`, but the specific implementations of those actions are not included in this snippet, indicated by the \"...\" placeholders.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('cost')\n    ->prefix('€')\n    ->hintActions([\n        Action::make('...'),\n        Action::make('...'),\n        Action::make('...'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Decimal Places\nDESCRIPTION: This snippet demonstrates formatting a number with a specific number of decimal places in a summarizer using the `numeric()` method and the `decimalPlaces` argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make()->numeric(\n        decimalPlaces: 0,\n    ))\n```\n\n----------------------------------------\n\nTITLE: Adding Heading and Description - PHP\nDESCRIPTION: This demonstrates how to add heading and description text above the widget using the `$heading` and `$description` properties, or their respective `getHeading()` and `getDescription()` methods for dynamic content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected ?string $heading = 'Analytics';\n\nprotected ?string $description = 'An overview of some analytics';\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeading(): ?string\n{\n    return 'Analytics';\n}\n\nprotected function getDescription(): ?string\n{\n    return 'An overview of some analytics';\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Number in Summarizer\nDESCRIPTION: This snippet demonstrates how to format a number in a summarizer using the `numeric()` method.  It formats the average rating as a number.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make()->numeric())\n```\n\n----------------------------------------\n\nTITLE: Regex Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `regex` validation rule in a Filament form. The 'email' field must match the regular expression `/^.+@.+$/i`.  This is a standard Laravel validation rule implemented in Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nField::make('email')->regex('/^.+@.+$/i')\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Transactions for Pages in Filament (PHP)\nDESCRIPTION: This snippet shows how to enable database transactions for Filament pages like Create or Edit resource pages. Setting the `$hasDatabaseTransactions` property to `true` on the page class ensures that database operations within the page are executed within a transaction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreatePost extends CreateRecord\n{\n    protected ?bool $hasDatabaseTransactions = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Messages in Filament\nDESCRIPTION: Demonstrates customizing the validation messages for a specific validation rule in a Filament form.  The `unique` validation message is customized to 'The :attribute has already been registered.' for the email field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('email')\n    ->unique(// ...)\n    ->validationMessages([\n        'unique' => 'The :attribute has already been registered.',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration (PHP)\nDESCRIPTION: Demonstrates how to access plugin configuration options from outside the plugin class using the `filament()` method and an optional static `get()` method for type safety and autocompletion.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfilament('blog')->hasAuthorResource()\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Modal (PHP)\nDESCRIPTION: This snippet adds an icon to the modal using the `modalIcon()` method, specifying the icon from Heroicons. It also sets the color of the button, and then the color of the modal's icon separately.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n    ->color('danger')\n    ->modalIcon('heroicon-o-trash')\n    ->modalIconColor('warning')\n```\n\n----------------------------------------\n\nTITLE: Adding Datalist to TimePicker in Filament\nDESCRIPTION: This snippet demonstrates how to add a datalist to a TimePicker component using the `datalist()` method.  Datalists provide autocompletion options to users when they use the picker.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TimePicker;\n\nTimePicker::make('appointment_at')\n    ->datalist([\n        '09:00',\n        '09:30',\n        '10:00',\n        '10:30',\n        '11:00',\n        '11:30',\n        '12:00',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Saving\nDESCRIPTION: Illustrates how to set up a custom redirect after the form is submitted using `successRedirectUrl()`. This is useful for redirecting the user to a different page after a successful save. Requires Filament and Laravel's routing.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEditAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Selection in Filament Toggle Buttons\nDESCRIPTION: This code snippet demonstrates how to enable multiple selections in the ToggleButtons component using the `multiple()` method.  Options are defined for various technologies, allowing the user to select one or more.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('technologies')\n    ->multiple()\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Alpha Validation - Filament\nDESCRIPTION: Validates that the field contains only alphabetic characters. It uses the `alpha()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->alpha()\n```\n\n----------------------------------------\n\nTITLE: Defining Infolist Entries with TextEntry - PHP\nDESCRIPTION: This snippet demonstrates how to define basic text entries within a Filament infolist using the `TextEntry` component. It defines entries for 'title', 'slug', and 'content'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/02-getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\n$infolist\n    ->schema([\n        TextEntry::make('title'),\n        TextEntry::make('slug'),\n        TextEntry::make('content'),\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Define Patients Table Migration Schema\nDESCRIPTION: This code defines the schema for the `patients` table. It includes an auto-incrementing `id`, a `date_of_birth` field (date), a `name` field (string), a foreign key `owner_id` referencing the `owners` table with cascade on delete, a `type` field (string), and timestamps.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// create_patients_table\nSchema::create('patients', function (Blueprint $table) {\n    $table->id();\n    $table->date('date_of_birth');\n    $table->string('name');\n    $table->foreignId('owner_id')->constrained('owners')->cascadeOnDelete();\n    $table->string('type');\n    $table->timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Plugins Per-Panel (PHP)\nDESCRIPTION: Explains how to add configuration options to a plugin, using setter and getter methods.  This allows users to configure the plugin on a per-panel basis. The configuration state is stored in properties of the class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse DanHarrin\\FilamentBlog\\Resources\\AuthorResource;\nuse Filament\\Contracts\\Plugin;\nuse Filament\\Panel;\n\nclass BlogPlugin implements Plugin\n{\n    protected bool $hasAuthorResource = false;\n    \n    public function authorResource(bool $condition = true): static\n    {\n        // This is the setter method, where the user's preference is\n        // stored in a property on the plugin object.\n        $this->hasAuthorResource = $condition;\n    \n        // The plugin object is returned from the setter method to\n        // allow fluent chaining of configuration options.\n        return $this;\n    }\n    \n    public function hasAuthorResource(): bool\n    {\n        // This is the getter method, where the user's preference\n        // is retrieved from the plugin property.\n        return $this->hasAuthorResource;\n    }\n    \n    public function register(Panel $panel): void\n    {\n        // Since the `register()` method is executed after the user\n        // configures the plugin, you can access any of their\n        // preferences inside it.\n        if ($this->hasAuthorResource()) {\n            // Here, we only register the author resource on the\n            // panel if the user has requested it.\n            $panel->resources([\n                AuthorResource::class,\n            ]);\n        }\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding extra attributes to the body tag - PHP\nDESCRIPTION: This snippet shows how to add extra attributes to the `<body>` tag of a Filament page by defining a `$extraBodyAttributes` property as an array. These attributes will be added to the `<body>` tag when the page is rendered.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nprotected array $extraBodyAttributes = [];\n```\n\n----------------------------------------\n\nTITLE: Aggregating Relationships\nDESCRIPTION: This PHP code demonstrates how to aggregate a relationship field, specifically using the `avg()` method to calculate the average of a field on all related records. The column name must follow the convention of `relationship_avg_field`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('users_avg_age')->avg('users', 'age')\n```\n\n----------------------------------------\n\nTITLE: Customizing Groups Dropdown Trigger - PHP\nDESCRIPTION: This snippet shows how to customize the trigger button for the groups dropdown. It uses the groupRecordsTriggerAction method, passing a closure that returns an action and applies styling configurations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            // ...\n        ])\n        ->groupRecordsTriggerAction(\n            fn (Action $action) => $action\n                ->button()\n                ->label('Group records'),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Set Polling Interval (PHP)\nDESCRIPTION: Sets the polling interval for new database notifications.  Can be set to null to disable polling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Livewire\\DatabaseNotifications;\n\nDatabaseNotifications::pollingInterval('30s');\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Livewire\\DatabaseNotifications;\n\nDatabaseNotifications::pollingInterval(null);\n```\n\n----------------------------------------\n\nTITLE: Setting a Size - Filament\nDESCRIPTION: Shows how to change the size of the action's trigger using the `size()` method and the `ActionSize` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\ActionSize;\n\nAction::make('create')\n    ->size(ActionSize::Large)\n```\n\n----------------------------------------\n\nTITLE: Customize Restore Notification - PHP\nDESCRIPTION: This snippet showcases how to completely customize the success notification displayed after restoring a record. It uses the `successNotification()` method, allowing you to define the notification's title, body, and style (success, error, etc.). Requires the `Filament\\Notifications\\Notification` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nRestoreAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User restored')\n            ->body('The user has been restored successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Chaining Actions (PHP)\nDESCRIPTION: This PHP example demonstrates chaining actions.  The `editAction` calls `replaceMountedAction()` to replace itself with the `publishAction` after it has finished.  Arguments are passed to the next action.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\npublic function editAction(): Action\n{\n    return Action::make('edit')\n        ->form([\n            // ...\n        ])\n        // ...\n        ->action(function (array $arguments) {\n            $post = Post::find($arguments['post']);\n\n            // ...\n\n            $this->replaceMountedAction('publish', $arguments);\n        });\n}\n\npublic function publishAction(): Action\n{\n    return Action::make('publish')\n        ->requiresConfirmation()\n        // ...\n        ->action(function (array $arguments) {\n            $post = Post::find($arguments['post']);\n\n            $post->publish();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Sending broadcast notifications with Laravel notification class in Filament\nDESCRIPTION: This snippet illustrates how to send a broadcast notification using a traditional Laravel notification class.  The `toBroadcast()` method should return the notification data to be broadcast. It requires `App\\Models\\User`, `Filament\\Notifications\\Notification`, and `Illuminate\\Notifications\\Messages\\BroadcastMessage`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/04-broadcast-notifications.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Notifications\\Notification;\nuse Illuminate\\Notifications\\Messages\\BroadcastMessage;\n\npublic function toBroadcast(User $notifiable): BroadcastMessage\n{\n    return Notification::make()\n        ->title('Saved successfully')\n        ->getBroadcastMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling vertical alignment of actions in Filament\nDESCRIPTION: This snippet demonstrates how to control the vertical alignment of independent infolist actions using the `verticalAlignment()` method and the `VerticalAlignment` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions;\nuse Filament\\Support\\Enums\\VerticalAlignment;\n\nActions::make([\n    // ...\n])->verticalAlignment(VerticalAlignment::End),\n```\n\n----------------------------------------\n\nTITLE: Deselecting Records After Bulk Action Completion (PHP)\nDESCRIPTION: This snippet demonstrates how to automatically deselect records after a bulk action has been executed. It utilizes the `deselectRecordsAfterCompletion()` method. The dependencies include BulkAction and Collection facades.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkAction;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nBulkAction::make('delete')\n    ->action(fn (Collection $records) => $records->each->delete())\n    ->deselectRecordsAfterCompletion()\n```\n\n----------------------------------------\n\nTITLE: Preventing Key Editing - PHP\nDESCRIPTION: This snippet demonstrates how to prevent users from editing the key field using the `editableKeys(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->editableKeys(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Before Filling the Form (Filament)\nDESCRIPTION: This snippet demonstrates how to use the `mutateRecordDataUsing()` method to modify the data before it is filled into the form.  It takes a closure that receives the data array, modifies it, and returns the modified array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/03-view.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nViewAction::make()\n    ->mutateRecordDataUsing(function (array $data): array {\n        $data['user_id'] = auth()->id();\n\n        return $data;\n    })\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to All Routes in Filament Panel (PHP)\nDESCRIPTION: This snippet shows how to apply middleware to all routes within a Filament panel. An array of middleware classes is passed to the `middleware()` method. Optionally, setting `isPersistent` to `true` ensures the middleware runs on every request, including Livewire AJAX requests.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->middleware([\n            // ...\n        ]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->middleware([\n            // ...\n        ], isPersistent: true);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Icon and Color - PHP\nDESCRIPTION: This snippet shows how to set an icon and its color for a notification in Filament PHP. It utilizes Blade UI Kit icons. The `iconColor` method accepts values like 'success', 'warning', etc.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->icon('heroicon-o-document-text')\n    ->iconColor('success')\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Disabling Click Away Closing in Filament Modals\nDESCRIPTION: Shows how to disable closing a modal by clicking away from it, using the `closeModalByClickingAway(false)` method.  Also demonstrates globally disabling this behavior via `Modal::closedByClickingAway(false)`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->closeModalByClickingAway(false)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\Modal;\n\nModal::closedByClickingAway(false);\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Label in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action has the correct label using Pest and Livewire. It creates an invoice and asserts that the 'send' action for the 'customer_id' component has the label 'Email Invoice' and does not have the label 'Send'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('send action has correct label', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionHasLabel('customer_id', 'send', 'Email Invoice')\n        ->assertFormComponentActionDoesNotHaveLabel('customer_id', 'send', 'Send');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Input Masking\nDESCRIPTION: This snippet shows how to use a dynamic input mask that changes based on user input, implemented using `RawJs` to pass JavaScript code to Alpine.js.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Support\\RawJs;\n\nTextInput::make('cardNumber')\n    ->mask(RawJs::make(<<<'JS'\n        $input.startsWith('34') || $input.startsWith('37') ? '9999 999999 99999' : '9999 9999 9999 9999'\n    JS))\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in a Filament PHP Text Column\nDESCRIPTION: This snippet shows how to render Markdown content as HTML within a TextColumn using the `markdown()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->markdown()\n```\n\n----------------------------------------\n\nTITLE: Disable Delete Notification - Filament\nDESCRIPTION: This code snippet demonstrates how to disable the success notification altogether after deleting a record, using the `successNotification(null)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nDeleteAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Starts With Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `startsWith` validation rule in a Filament form. The 'name' field must start with one of the given values (in this case, 'a'). This highlights Filament's usage of Laravel validation rules.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->startsWith(['a'])\n```\n\n----------------------------------------\n\nTITLE: Setting ActionGroup Button Icon in Filament\nDESCRIPTION: This code demonstrates how to set the icon for an `ActionGroup` button in Filament using the `icon()` method. It uses a heroicon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])->icon('heroicon-m-ellipsis-horizontal');\n```\n\n----------------------------------------\n\nTITLE: Preventing Reordering with Drag and Drop\nDESCRIPTION: This snippet disables reordering items with drag and drop while allowing reordering by buttons (if enabled separately) using `reorderableWithDragAndDrop(false)`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderableWithDragAndDrop(false)\n```\n\n----------------------------------------\n\nTITLE: Preventing Column Whitespace with grow(false) in Filament\nDESCRIPTION: This snippet demonstrates how to prevent a column from creating extra whitespace using `grow(false)`. In this example the avatar will sit close to the name column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular()\n        ->grow(false),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    TextColumn::make('email'),\n])\n```\n\n----------------------------------------\n\nTITLE: Add Tailwind CSS layers to CSS file\nDESCRIPTION: This CSS snippet imports Tailwind CSS layers into the `resources/css/app.css` file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to a Filament Panel (PHP)\nDESCRIPTION: Shows how to add a plugin to a Filament panel using the `plugin()` method. This involves instantiating the plugin class and passing it to the `plugin()` method during panel configuration.  Requires instantiation of the `BlogPlugin` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse DanHarrin\\FilamentBlog\\BlogPlugin;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->plugin(new BlogPlugin());\n}\n```\n\n----------------------------------------\n\nTITLE: Require Filament Widgets package using Composer\nDESCRIPTION: This command uses Composer to require the Filament Widgets package, ensuring the correct version is installed. The `-W` flag is used to update dependencies if needed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/widgets:\"^3.3\" -W\n```\n\n----------------------------------------\n\nTITLE: Registering a render hook with scope in Filament PHP\nDESCRIPTION: This code snippet demonstrates how to register a render hook using `FilamentView::registerRenderHook()`. It associates the `PanelsRenderHook::PAGE_START` hook with a custom view (`warning-banner`) and scopes it to the `EditUser` page of the `UserResource`. This ensures the hook is only rendered on that specific page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Support\\Facades\\Blade;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (): View => view('warning-banner'),\n    scopes: \\App\\Filament\\Resources\\UserResource\\Pages\\EditUser::class,\n);\n```\n\n----------------------------------------\n\nTITLE: Force Delete Table Actions - PHP\nDESCRIPTION: Illustrates how to integrate ForceDeleteAction into Filament tables as both a single action and a bulk action.  It requires Filament\\Tables\\Actions\\ForceDeleteAction, Filament\\Tables\\Actions\\ForceDeleteBulkAction, Filament\\Tables\\Actions\\BulkActionGroup, and Filament\\Tables\\Table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkActionGroup;\nuse Filament\\Tables\\Actions\\ForceDeleteAction;\nuse Filament\\Tables\\Actions\\ForceDeleteBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            ForceDeleteAction::make(),\n            // ...\n        ])\n        ->bulkActions([\n            BulkActionGroup::make([\n                ForceDeleteBulkAction::make(),\n                // ...\n            ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table in a Livewire Component\nDESCRIPTION: This PHP code snippet demonstrates how to implement a table within a Livewire component using Filament. It includes the necessary traits, interfaces, and methods for configuring the table, querying data, and defining columns, filters, and actions. It uses the `Product` model and defines a `name` column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Livewire;\n\nuse App\\Models\\Shop\\Product;\nuse Filament\\Forms\\Concerns\\InteractsWithForms;\nuse Filament\\Forms\\Contracts\\HasForms;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Concerns\\InteractsWithTable;\nuse Filament\\Tables\\Contracts\\HasTable;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass ListProducts extends Component implements HasForms, HasTable\n{\n    use InteractsWithTable;\n    use InteractsWithForms;\n    \n    public function table(Table $table): Table\n    {\n        return $table\n            ->query(Product::query())\n            ->columns([\n                TextColumn::make('name'),\n            ])\n            ->filters([\n                // ...\n            ])\n            ->actions([\n                // ...\n            ])\n            ->bulkActions([\n                // ...\n            ]);\n    }\n    \n    public function render(): View\n    {\n        return view('livewire.list-products');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Placeholder for a Filament Form Field\nDESCRIPTION: This code snippet demonstrates how to set a placeholder value for a Filament form field using the `placeholder()` method. The placeholder is displayed when the field is empty and is not saved if the field is submitted with no value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->placeholder('John Doe')\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Entry as Currency - PHP\nDESCRIPTION: This snippet demonstrates how to format a TextEntry as a monetary value using the `money()` method. It formats the 'price' field as Euros (EUR).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR')\n```\n\n----------------------------------------\n\nTITLE: Styling ActionGroup as Icon Button in Filament\nDESCRIPTION: This code snippet shows how to style an `ActionGroup` in Filament as an icon button. It uses the `iconButton()` method to achieve this.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])->iconButton()\n```\n\n----------------------------------------\n\nTITLE: Enabling Bulk Toggling of Checkboxes - PHP\nDESCRIPTION: This example demonstrates how to enable users to toggle all checkboxes at once using the `bulkToggleable()` method. This adds a checkbox that allows users to select or deselect all options with a single click.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->bulkToggleable()\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Body Text - PHP\nDESCRIPTION: This snippet demonstrates how to set the body text of a notification in Filament PHP. The body provides additional information. It can contain safe HTML or Markdown via `Str::markdown()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Toggle Buttons in Filament\nDESCRIPTION: This example creates a simple boolean toggle button group (Yes/No) using the `boolean()` method.  The label is customized using the `label()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Override Sidebar Background Color with !important\nDESCRIPTION: This CSS snippet customizes the background color of the Filament sidebar using the `fi-sidebar` hook class and Tailwind CSS's `@apply` directive with the `!important` modifier. This ensures that the applied background colors override any existing styles, even if they have higher specificity.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/05-style-customization.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    @apply bg-gray-50 dark:bg-gray-950 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Navigation Label (Method) (PHP)\nDESCRIPTION: Shows how to customize the page navigation label using the `getNavigationLabel()` method, allowing for dynamic or localized labels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function getNavigationLabel(): string\n{\n    return __('Custom Navigation Label');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding validation rules to fields\nDESCRIPTION: This code snippet demonstrates how to add validation rules to form fields using methods like `required()` and `maxLength()`. These methods provide frontend and backend validation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\n\n[\n    TextInput::make('title')\n        ->required()\n        ->maxLength(255),\n    TextInput::make('slug')\n        ->required()\n        ->maxLength(255),\n    RichEditor::make('content')\n        ->columnSpan(2)\n        ->maxLength(65535),\n    Section::make('Publishing')\n        ->description('Settings for publishing this post.')\n        ->schema([\n            Select::make('status')\n                ->options([\n                    'draft' => 'Draft',\n                    'reviewing' => 'Reviewing',\n                    'published' => 'Published',\n                ])\n                ->required(),\n            DateTimePicker::make('published_at'),\n        ]),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Footer Actions to a Section in Filament Infolists (PHP)\nDESCRIPTION: This code demonstrates how to add actions to the footer of a section in Filament infolists using the `footerActions()` method. It utilizes `Filament\\Infolists\\Components\\Section`, `Filament\\Infolists\\Components\\Actions\\Action`, and a section heading or ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->footerActions([\n        Action::make('edit')\n            ->action(function () {\n                // ...\n            }),\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Currency\nDESCRIPTION: This snippet shows how to format monetary values using the `money()` method with a specified currency ('EUR').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR'))\n```\n\n----------------------------------------\n\nTITLE: Customize Created Notification - Filament - PHP\nDESCRIPTION: This code snippet shows how to customize the entire success notification that is displayed after a record is created in Filament. By overriding the `getCreatedNotification()` method, you can customize the notification's title, body, and other properties using the `Filament\\Notifications\\Notification` class.  The example sets the title to 'User registered' and the body to 'The user has been created successfully.'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nprotected function getCreatedNotification(): ?Notification\n{\n    return Notification::make()\n        ->success()\n        ->title('User registered')\n        ->body('The user has been created successfully.');\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Soft Deletable Records - PHP\nDESCRIPTION: This code snippet demonstrates how to use the `TrashedFilter` to filter soft-deleted records in Filament tables. It's a specialized ternary filter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/03-ternary.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\TrashedFilter;\n\nTrashedFilter::make()\n```\n\n----------------------------------------\n\nTITLE: Exact Length Validation (Filament/PHP)\nDESCRIPTION: This snippet demonstrates setting an exact length for the textarea using the `length()` method. This validation ensures the textarea input must be exactly a specified number of characters long.  This requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/15-textarea.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('question')\n    ->length(100)\n```\n\n----------------------------------------\n\nTITLE: Customize Table with Money Column (Filament)\nDESCRIPTION: This snippet customizes the table within the relation manager, adding a sortable 'price' column formatted as currency.  It uses the `money()` method to format the price with the EUR currency symbol, and `sortable()` to enable sorting by price.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Tables\\Columns\\TextColumn::make('description'),\n            Tables\\Columns\\TextColumn::make('price')\n                ->money('EUR')\n                ->sortable(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Attribute - PHP\nDESCRIPTION: This code demonstrates how to customize the column attribute used by the ternary filter with the `attribute()` method. In this example, the filter is named 'verified', but applies to the 'status_id' column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/03-ternary.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('verified')\n    ->nullable()\n    ->attribute('status_id')\n```\n\n----------------------------------------\n\nTITLE: Register JavaScript Asset in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to register a JavaScript file within a Filament service provider, specifically within the `boot()` method. It utilizes the `FilamentAsset` facade to register the JavaScript file as a module, making it available for Filament chart widgets. The file is located at `resources/js/filament-chart-js-plugins.js` and is processed by Vite.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Assets\\Js;\nuse Filament\\Support\\Facades\\FilamentAsset;\nuse Illuminate\\Support\\Facades\\Vite;\n\nFilamentAsset::register([\n    Js::make('chart-js-plugins', Vite::asset('resources/js/filament-chart-js-plugins.js'))->module(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Alignment (PHP)\nDESCRIPTION: This snippet shows how to customize the alignment of the modal content using the `modalAlignment()` method. It sets the alignment to the center.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\Alignment;\n\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalAlignment(Alignment::Center)\n```\n\n----------------------------------------\n\nTITLE: Persisting Collapsed Sections with ID - PHP\nDESCRIPTION: This snippet demonstrates how to persist the collapsed state of a section and also define an explicit ID for the section.  This is useful when dealing with multiple sections with the same name, or sections with no heading.  Requires Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed()\n    ->id('order-cart')\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Modal Footer Actions in Filament\nDESCRIPTION: Demonstrates how to add extra action buttons to the modal footer using the `extraModalFooterActions()` method.  The snippet illustrates using `$action->makeModalSubmitAction()` to create and customize a new action button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nAction::make('create')\n    ->form([\n        // ...\n    ])\n    // ...\n    ->extraModalFooterActions(fn (Action $action): array => [\n        $action->makeModalSubmitAction('createAnother', arguments: ['another' => true]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to Widgets (PHP)\nDESCRIPTION: This demonstrates how to pass properties to a widget when registering it on a resource page. The `make()` method is used with an array of properties, which are then mapped to public Livewire properties on the widget class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaderWidgets(): array\n{\n    return [\n        CustomerResource\\Widgets\\CustomerOverview::make([\n            'status' => 'active',\n        ]),\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\Widget;\n\nclass CustomerOverview extends Widget\n{\n    public string $status;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns within a Tab in Filament Form (PHP)\nDESCRIPTION: This code shows how to customize the grid layout within a tab using the `columns()` method. The example sets the number of columns to 3, which allows you to arrange form fields within the tab into a three-column grid.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ])\n            ->columns(3),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Run Database Migrations\nDESCRIPTION: Runs the database migrations to create the necessary tables, including the `tags` table, for the Spatie Laravel Tags package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Displaying Grouping Dropdown on Desktop - PHP\nDESCRIPTION: This example demonstrates how to make the grouping settings dropdown visible on desktop devices. The default behavior hides the dropdown and displays the grouping settings in the header.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            // ...\n        ])\n        ->groupingSettingsInDropdownOnDesktop();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Enabled Options from CheckboxList - PHP\nDESCRIPTION: This example shows how to retrieve the options that are not disabled using `getEnabledOptions()`. It's useful for validation purposes to ensure that only enabled options are selected.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel Livewire',\n        'livewire' => 'Laravel Livewire',\n        'heroicons' => 'SVG icons',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'heroicons')\n    ->in(fn (CheckboxList $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Range\nDESCRIPTION: This snippet demonstrates formatting a text range using the `minimalTextualDifference()` method, displaying the minimal difference between the minimum and maximum text values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('sku')\n    ->summarize(Range::make()->minimalTextualDifference())\n```\n\n----------------------------------------\n\nTITLE: Injecting action arguments (PHP)\nDESCRIPTION: This code snippet demonstrates how to inject the arguments passed to an action using the `$arguments` parameter. This is useful for accessing specific data provided when the action is triggered.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction (array $arguments) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Affix Actions to a Field - PHP\nDESCRIPTION: This snippet demonstrates how to add multiple prefix and suffix actions to a text input field using `prefixActions()` and `suffixActions()`.  Each action is defined using `Action::make()`, but the specific implementations of those actions are not included in this snippet, indicated by the \"...\" placeholders.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('cost')\n    ->prefix('€')\n    ->prefixActions([\n        Action::make('...'),\n        Action::make('...'),\n        Action::make('...'),\n    ])\n    ->suffixActions([\n        Action::make('...'),\n        Action::make('...'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder Selection in Filament Select Filter\nDESCRIPTION: This code shows how to remove the default null option (placeholder) by using the `selectablePlaceholder(false)` method to ensures a selection is always applied to the filter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n    ->selectablePlaceholder(false)\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Exists with Pest\nDESCRIPTION: This snippet demonstrates how to assert that an infolist action exists or does not exist. It verifies that the 'send' action exists and the 'unsend' action does not.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send but not unsend invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionExists('customer', 'send')\n        ->assertInfolistActionDoesNotExist('customer', 'unsend');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Icons as Affixes - Filament PHP\nDESCRIPTION: This snippet shows how to place an icon before or after the input using the `prefixIcon()` and `suffixIcon()` methods.  This enhances the visual representation of the field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('domain')\n    ->suffixIcon('heroicon-m-globe-alt')\n```\n\n----------------------------------------\n\nTITLE: Disabling a Filament Form Field\nDESCRIPTION: This code snippet shows how to disable a Filament form field using the `disabled()` method. A disabled field cannot be edited by the user. By default, disabled fields are not saved.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->disabled()\n```\n\n----------------------------------------\n\nTITLE: List Relation Manager Table Records Test (PHP)\nDESCRIPTION: This test verifies that a relation manager's table displays the correct records related to the owner record. It creates a category with associated posts and asserts that the table in the relation manager displays those posts.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\CategoryResource\\Pages\\EditCategory;\nuse function Pest\\Livewire\\livewire;\n\nit('can list posts', function () {\n    $category = Category::factory()\n        ->has(Post::factory()->count(10))\n        ->create();\n\n    livewire(CategoryResource\\RelationManagers\\PostsRelationManager::class, [\n        'ownerRecord' => $category,\n        'pageClass' => EditCategory::class,\n    ])\n        ->assertCanSeeTableRecords($category->posts);\n})\n```\n\n----------------------------------------\n\nTITLE: Persisting Current Tab - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to persist the current tab in the browser's local storage for a Filament infolist Tabs component. The `persistTab()` method is used, and a unique `id()` must be provided for the Tabs component. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        // ...\n    ])\n    ->persistTab()\n    ->id('order-tabs')\n```\n\n----------------------------------------\n\nTITLE: Disabling SPA navigation for URL patterns in Filament (PHP)\nDESCRIPTION: This code demonstrates how to use URL patterns to disable SPA navigation for multiple URLs using wildcard characters. The `spaUrlExceptions()` method is used to specify the URL patterns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->spa()\n        ->spaUrlExceptions([\n            '*/admin/posts/*',\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Color Picker - PHP\nDESCRIPTION: This code snippet demonstrates how to initialize a basic color picker component in Filament. By default, the color picker uses the HEX format. It requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/17-color-picker.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ColorPicker;\n\nColorPicker::make('color')\n```\n\n----------------------------------------\n\nTITLE: Dispatching Close Notification Event from Alpine.js (HTML)\nDESCRIPTION: This HTML code shows how to dispatch a 'close-notification' browser event from an Alpine.js component.  This event is used to close a specific notification, identified by its ID. The event needs to contain the ID of the notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<button x-on:click=\"$dispatch('close-notification', { id: notificationId })\" type=\"button\">\n    Close Notification\n</button>\n```\n\n----------------------------------------\n\nTITLE: SpatieTagsColumn with Type\nDESCRIPTION: Illustrates how to use the `type()` method to group tags into collections within a Filament table, using `SpatieTagsColumn`. The `type` parameter allows filtering the tags displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieTagsColumn;\n\nSpatieTagsColumn::make('tags')\n    ->type('categories')\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP for Large File Uploads\nDESCRIPTION: This snippet shows the required php.ini configuration settings to allow larger file uploads.  Specifically it increases the `post_max_size` and `upload_max_filesize` settings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\npost_max_size = 120M\nupload_max_filesize = 120M\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Arguments in the Action Method (PHP)\nDESCRIPTION: This PHP code shows how to access arguments passed to an action within the action's `action` closure. It retrieves the post ID from the `$arguments` array and uses it to find and delete the corresponding Post model. Requires the `App\\Models\\Post` model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\npublic function deleteAction(): Action\n{\n    return Action::make('delete')\n        ->requiresConfirmation()\n        ->action(function (array $arguments) {\n            $post = Post::find($arguments['post']);\n\n            $post?->delete();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Greater Than Validation - Filament\nDESCRIPTION: Validates that the field's value is greater than another field's value. It uses the `gt()` method, taking the name of the other field as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nField::make('newNumber')->gt('oldNumber')\n```\n\n----------------------------------------\n\nTITLE: Disabling All Form Fields in Modal (PHP)\nDESCRIPTION: This snippet shows how to disable all form fields within a modal using the `disabledForm()` method, preventing the user from editing the fields. The form is populated with existing data using `fillForm()` before being disabled.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\n\nAction::make('approvePost')\n    ->form([\n        TextInput::make('title'),\n        Textarea::make('content'),\n    ])\n    ->fillForm(fn (Post $record): array => [\n        'title' => $record->title,\n        'content' => $record->content,\n    ])\n    ->disabledForm()\n    ->action(function (Post $record): void {\n        $record->approve();\n    })\n```\n\n----------------------------------------\n\nTITLE: Create Record Test (PHP)\nDESCRIPTION: This test creates a new record in the database using the Filament form. It fills the form with sample data, calls the 'create' action, and then asserts that the database contains a record with the specified data and that there are no form errors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can create', function () {\n    $newData = Post::factory()->make();\n\n    livewire(PostResource\\Pages\\CreatePost::class)\n        ->fillForm([\n            'author_id' => $newData->author->getKey(),\n            'content' => $newData->content,\n            'tags' => $newData->tags,\n            'title' => $newData->title,\n        ])\n        ->call('create')\n        ->assertHasNoFormErrors();\n\n    $this->assertDatabaseHas(Post::class, [\n        'author_id' => $newData->author->getKey(),\n        'content' => $newData->content,\n        'tags' => json_encode($newData->tags),\n        'title' => $newData->title,\n    ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting fields within a Section\nDESCRIPTION: This code snippet shows how to nest fields and layout components within a `Section` component. This creates a hierarchical form structure.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Select;\n\nSection::make('Publishing')\n    ->description('Settings for publishing this post.')\n    ->schema([\n        Select::make('status')\n            ->options([\n                'draft' => 'Draft',\n                'reviewing' => 'Reviewing',\n                'published' => 'Published',\n            ]),\n        DateTimePicker::make('published_at'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Custom Redirect After Force Delete - PHP\nDESCRIPTION: Shows how to set up a custom redirect URL after the record is successfully force-deleted. It requires the Filament\\Actions\\ForceDeleteAction class and a valid route.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nForceDeleteAction::make()\n    ->successRedirectUrl(route('posts.list'))\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Entry as Numeric - PHP\nDESCRIPTION: This snippet shows how to format a TextEntry as a number using the `numeric()` method.  The stock field will be displayed as a number formatted according to the application's locale.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('stock')\n    ->numeric()\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to pages in other panels - PHP\nDESCRIPTION: This snippet demonstrates how to generate a URL to a page in a different panel using the `getUrl()` method. The `panel` argument specifies the ID of the panel the page is associated with. The `Settings` class represents a Filament page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\n\nSettings::getUrl(panel: 'marketing');\n```\n\n----------------------------------------\n\nTITLE: Disabling Options When Selected - Filament/PHP\nDESCRIPTION: This snippet demonstrates how to disable options in sibling repeater items when they are selected using `disableOptionsWhenSelectedInSiblingRepeaterItems()`.  It also shows how to chain this with `disableOptionWhen()` using the `merge: true` argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\Select;\n\nRepeater::make('members')\n    ->schema([\n        Select::make('role')\n            ->options([\n                // ...\n            ])\n            ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n            ->disableOptionWhen(fn (string $value): bool => $value === 'super_admin', merge: true),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget in Filament (Bash)\nDESCRIPTION: This snippet shows the command to create a new custom widget in Filament using the artisan command `make:filament-widget`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget BlogPostsOverview\n```\n\n----------------------------------------\n\nTITLE: Changing CSV Delimiter in Filament ImportAction (PHP)\nDESCRIPTION: This code shows how to change the delimiter used for CSV imports using the `csvDelimiter()` method on the `ImportAction`. The default delimiter is a comma, but this method allows specifying a different delimiter if the CSV uses one. Requires the ProductImporter class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->csvDelimiter(';')\n```\n\n----------------------------------------\n\nTITLE: Apply Translatable Trait to Resource (PHP)\nDESCRIPTION: Applies the `Translatable` trait to a Filament Resource class.  This enables translation functionality for the resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Concerns\\Translatable;\nuse Filament\\Resources\\Resource;\n\nclass BlogPostResource extends Resource\n{\n    use Translatable;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Base Query for Filters\nDESCRIPTION: This snippet shows how to modify the base Eloquent query directly, outside of the default `where()` clause scope, using the `baseQuery()` method. This is necessary for operations like removing global scopes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('trashed')\n    // ...\n    ->baseQuery(fn (Builder $query) => $query->withoutGlobalScopes([\n        SoftDeletingScope::class,\n    ]))\n```\n\n----------------------------------------\n\nTITLE: Collapsible Groups - PHP\nDESCRIPTION: This snippet demonstrates how to enable collapsible groups, allowing users to collapse rows within a group. It uses the `collapsible()` method on the `Group` object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('author.name')\n                ->collapsible(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Adding Rows - PHP\nDESCRIPTION: This snippet demonstrates how to prevent users from adding new rows to the KeyValue field using the `addable(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->addable(false)\n```\n\n----------------------------------------\n\nTITLE: Sorting Widgets in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to set the `$sort` property in a Filament widget class to change its order on the dashboard page, relative to other widgets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?int $sort = 2;\n```\n\n----------------------------------------\n\nTITLE: Managing Image Disk in Filament (PHP)\nDESCRIPTION: Shows how to specify a custom disk for retrieving images using the disk() method. This is useful when images are stored on a disk other than the default 'public' disk, such as 's3'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->disk('s3')\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Colors in Filament (Non-Tailwind)\nDESCRIPTION: This code snippet demonstrates how to register custom colors in Filament using the `FilamentColor::register()` method, specifying custom RGB values for each shade from 50 to 950. This allows for using colors not included in the default Tailwind CSS color palette. The array should contain the RGB values as strings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/04-colors.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => [\n        50 => '254, 242, 242',\n        100 => '254, 226, 226',\n        200 => '254, 202, 202',\n        300 => '252, 165, 165',\n        400 => '248, 113, 113',\n        500 => '239, 68, 68',\n        600 => '220, 38, 38',\n        700 => '185, 28, 28',\n        800 => '153, 27, 27',\n        900 => '127, 29, 29',\n        950 => '69, 10, 10',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Entry State in Filament Blade View\nDESCRIPTION: This snippet shows how to access the state (value) of an infolist entry within the associated Blade view file using the `$getState()` function.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/08-custom.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    {{ $getState() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Attributes to Modal Window in Filament\nDESCRIPTION: Shows how to pass extra HTML attributes to the modal window using `extraModalWindowAttributes()`. This example adds a CSS class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->extraModalWindowAttributes(['class' => 'update-author-modal'])\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in Blade\nDESCRIPTION: This snippet demonstrates how to render a checkbox input using the Filament Blade component and bind it to a Livewire property `isAdmin`. The label allows toggling a boolean value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-checkbox.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<label>\n    <x-filament::input.checkbox wire:model=\"isAdmin\" />\n\n    <span>\n        Is Admin\n    </span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Filter Value (PHP)\nDESCRIPTION: This snippet shows how to set a default filter value for a chart widget. The `$filter` property is assigned a default value, which will be used when the chart is initially rendered.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic ?string $filter = 'today';\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Dates in DateTimePicker in Filament\nDESCRIPTION: This snippet shows how to disable specific dates from being selected in the DateTimePicker component using the `disabledDates()` method. It takes an array of date strings in 'YYYY-MM-DD' format.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('date')\n    ->native(false)\n    ->disabledDates(['2000-01-03', '2000-01-15', '2000-01-20'])\n```\n\n----------------------------------------\n\nTITLE: Changing Filament Dropdown Item Color in Blade\nDESCRIPTION: This code demonstrates how to change the color of a dropdown item using the `color` attribute. Available colors are `danger`, `info`, `primary`, `success`, or `warning`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item color=\"danger\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"info\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"primary\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"success\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item color=\"warning\">\n    Edit\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Success Notification\nDESCRIPTION: This snippet demonstrates customizing the entire success notification using the `successNotification()` method. It allows you to define a custom notification with a specific title, body, and other properties. This example creates a success notification with a custom title and body.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nReplicateAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('Category replicated')\n            ->body('The category has been replicated successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Polling Interval (PHP)\nDESCRIPTION: This example demonstrates how to customize the data polling interval for a chart widget using the `$pollingInterval` property. It sets the interval to 10 seconds.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $pollingInterval = '10s';\n```\n\n----------------------------------------\n\nTITLE: Overriding Query Modification in Exporter (PHP)\nDESCRIPTION: This example demonstrates how to override the `modifyQuery()` method within an exporter class to modify the query for all actions using that exporter.  The method receives the query builder and must return the modified query builder.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\npublic static function modifyQuery(Builder $query): Builder\n{\n    return $query->with([\n        'purchasable' => fn (MorphTo $morphTo) => $morphTo->morphWith([\n            ProductPurchase::class => ['product'],\n            ServicePurchase::class => ['service'],\n            Subscription::class => ['plan'],\n        ]),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Filters Trigger Action\nDESCRIPTION: This code demonstrates how to customize the filters trigger button using the `filtersTriggerAction()` method.  This allows modifying the button's appearance and behavior using Filament action customization features.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersTriggerAction(\n            fn (Action $action) => $action\n                ->button()\n                ->label('Filter'),\n        );\n```\n\n----------------------------------------\n\nTITLE: Opening an Action Modal on Page Load (PHP)\nDESCRIPTION: This example demonstrates how to automatically open an action modal when a Filament page loads.  It uses the `$defaultAction` property to specify the action and defines the action using the Livewire component functionality.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Action;\n\npublic $defaultAction = 'onboarding';\n\npublic function onboardingAction(): Action\n{\n    return Action::make('onboarding')\n        ->modalHeading('Welcome')\n        ->visible(fn (): bool => ! auth()->user()->isOnBoarded());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Notifications - PHP\nDESCRIPTION: This snippet shows how to add actions (buttons) to a notification in Filament PHP. Actions can open URLs or dispatch Livewire events. Dependencies include `Filament\\Notifications\\Actions\\Action`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button(),\n        Action::make('undo')\n            ->color('gray'),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Stacked Toggle PHP\nDESCRIPTION: This snippet shows how to stack the toggle field's label above the toggle. The `inline(false)` method is used to achieve the stacked layout.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->inline(false)\n```\n\n----------------------------------------\n\nTITLE: Setting an Icon - Filament\nDESCRIPTION: Illustrates setting an icon for the trigger button using the `icon()` method.  Icons are typically Blade UI Kit icons.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->icon('heroicon-m-pencil-square')\n```\n\n----------------------------------------\n\nTITLE: Modifying Export Query with Options (PHP)\nDESCRIPTION: This code shows how to modify the export query using `modifyQueryUsing()` while also accessing export options. The closure receives both a query builder instance and an array of options, allowing dynamic query modifications based on user-provided options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->modifyQueryUsing(fn (Builder $query, array $options) => $query->where('is_active', $options['isActive'] ?? true))\n```\n\n----------------------------------------\n\nTITLE: Creating a Tenant Profile Page\nDESCRIPTION: This snippet demonstrates how to create a tenant profile page by extending the `Filament\\Pages\\Tenancy\\EditTenantProfile` class.  It showcases defining a form schema for editing tenant information.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Filament\\Pages\\Tenancy;\n\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Form;\nuse Filament\\Pages\\Tenancy\\EditTenantProfile;\n\nclass EditTeamProfile extends EditTenantProfile\n{\n    public static function getLabel(): string\n    {\n        return 'Team profile';\n    }\n\n    public function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                TextInput::make('name'),\n                // ...\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ActionGroup as Link with Label in Filament\nDESCRIPTION: This code snippet demonstrates how to style an `ActionGroup` as a link, resembling a text link, using the `link()` and `label()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])\n    ->link()\n    ->label('Actions')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fieldset in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to create a basic Fieldset component in Filament forms. The Fieldset groups form fields under a common label and within a bordered area. The schema method defines the fields contained within the fieldset.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/03-fieldset.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Fieldset;\n\nFieldset::make('Label')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using a bootUsing hook in Filament (PHP)\nDESCRIPTION: This code shows how to use the `bootUsing()` hook within a Filament panel. This hook allows you to execute code on every request that takes place within the panel, after all service providers have been booted.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->bootUsing(function (Panel $panel) {\n            // ...\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Numeric Step\nDESCRIPTION: This snippet demonstrates how to set the `step` attribute for numeric inputs, defining the increment/decrement steps allowed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('number')\n    ->numeric()\n    ->step(100)\n```\n\n----------------------------------------\n\nTITLE: Making a Field Read-Only\nDESCRIPTION: This code snippet shows how to make a text input read-only using the `readOnly()` method.  The field will be sent to the server upon form submission, unlike `disabled()`.  `dehydrated(false)` can be used to prevent submission.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->readOnly()\n```\n\n----------------------------------------\n\nTITLE: Changing Hint Text Color in Filament Form\nDESCRIPTION: This code snippet demonstrates how to change the text color of the hint next to the label in a Filament form using the `hintColor()` method.  Available colors are `danger`, `info`, `primary`, `success`, and `warning`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->hint('Translatable')\n    ->hintColor('primary')\n```\n\n----------------------------------------\n\nTITLE: Positioning Heading and Description Aside - PHP\nDESCRIPTION: This snippet shows how to position the section's heading and description to the side of the form components using the `aside()` method. This can improve the visual layout of the form. Depends on the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->aside()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding a Prefix or Suffix to a Filament PHP Text Column\nDESCRIPTION: This code snippet shows how to add a prefix and suffix to the text displayed in a TextColumn using the `prefix()` and `suffix()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('domain')\n    ->prefix('https://')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Block Headers\nDESCRIPTION: This snippet enables the display of icons in the header of builder blocks using the `blockIcons()` method. By default, icons are only displayed in the block picker dropdown. This method ensures they're visible next to the header label as well.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->blockIcons()\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of Options - Filament Select\nDESCRIPTION: This code shows how to limit the number of options displayed in a Filament searchable select component using the `optionsLimit()` method.  The default is 50, but this example limits it to 20.  Increasing this value too much can impact performance. The `author_id` is linked to the `author` relationship, displaying the `name` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('author_id')\n    ->relationship(name: 'author', titleAttribute: 'name')\n    ->searchable()\n    ->optionsLimit(20)\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Cluster using Artisan CLI (Bash)\nDESCRIPTION: This command line instruction showcases how to create a new Filament cluster using the `php artisan make:filament-cluster` command.  It simplifies cluster creation by automatically generating a cluster class file in the specified directory. Replace 'Settings' with the desired name of your cluster.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/10-clusters.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-cluster Settings\n```\n\n----------------------------------------\n\nTITLE: Defining Array Cast for Multiple Toggle Buttons in Filament\nDESCRIPTION: This example shows how to define an `array` cast in an Eloquent model when using multiple selections with the ToggleButtons component. This ensures that the selected options are stored as an array in the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass App extends Model\n{\n    protected $casts = [\n        'technologies' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Value Editing - PHP\nDESCRIPTION: This snippet demonstrates how to prevent users from editing the value field using the `editableValues(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->editableValues(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component in Blade\nDESCRIPTION: This snippet demonstrates how to implement the Filament Select Blade component within an input wrapper. The `wire:model` directive binds the selected value to the `status` property in the Livewire component.  The options are defined using standard HTML `<option>` elements with their respective values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-select.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-filament::input.select wire:model=\"status\">\n        <option value=\"draft\">Draft</option>\n        <option value=\"reviewing\">Reviewing</option>\n        <option value=\"published\">Published</option>\n    </x-filament::input.select>\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Hiding a Filament Form Field\nDESCRIPTION: This code snippet demonstrates how to hide a Filament form field using the `hidden()` method. This will prevent the field from being displayed in the form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hidden()\n```\n\n----------------------------------------\n\nTITLE: Adding hint action to a TextEntry in Filament\nDESCRIPTION: This snippet demonstrates adding a hint action to a Filament TextEntry.  It creates an action called 'copyCostToPrice', sets its icon, requires confirmation, and defines the action to copy the Product's cost to its price. This action is then added as a hint action on the `cost` TextEntry field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('cost')\n    ->prefix('€')\n    ->hintAction(\n        Action::make('copyCostToPrice')\n            ->icon('heroicon-m-clipboard')\n            ->requiresConfirmation()\n            ->action(function (Product $record) {\n                $record->price = $record->cost;\n                $record->save();\n            })\n    )\n```\n\n----------------------------------------\n\nTITLE: Toggle with Colors PHP\nDESCRIPTION: This snippet demonstrates how to customize the color of the Toggle component for the 'on' and 'off' states. The `onColor()` and `offColor()` methods are used to specify the colors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->onColor('success')\n    ->offColor('danger')\n```\n\n----------------------------------------\n\nTITLE: Publishing and Configuring Livewire for Large File Uploads\nDESCRIPTION: This snippet shows how to publish the Livewire configuration and then adjust the maximum upload size using the `rules` key within the `temporary_file_upload` configuration. The size is defined in KB.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan livewire:publish --config\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown as HTML - PHP\nDESCRIPTION: This snippet demonstrates rendering Markdown content as HTML using the `markdown()` method. The Markdown will be converted to HTML before being displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->markdown()\n```\n\n----------------------------------------\n\nTITLE: Disabling the Success Notification\nDESCRIPTION: Illustrates how to disable the success notification altogether using the `successNotification(null)` method.  Requires Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nEditAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Customizing the Apply Filters Action\nDESCRIPTION: This snippet shows how to customize the 'Apply' button when deferring filters, using the `filtersApplyAction()` method. This allows you to modify the button's appearance and behavior using Filament's action customization features.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersApplyAction(\n            fn (Action $action) => $action\n                ->link()\n                ->label('Save filters to table'),\n        );\n```\n\n----------------------------------------\n\nTITLE: Creating a Hidden Form Field in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a hidden form field using the `Hidden` component in Filament.  The `make()` method defines the name of the hidden field, in this case, 'token'. The field's value is still editable by the user if they use browser developer tools. It is recommended to avoid storing sensitive data or read-only information in hidden fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/19-hidden.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Hidden;\n\nHidden::make('token')\n```\n\n----------------------------------------\n\nTITLE: Setting a Group Description - PHP\nDESCRIPTION: This example demonstrates how to set a description for each group using the `getDescriptionFromRecordUsing()` method.  The description is generated dynamically based on the record's status using a `getDescription()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->getDescriptionFromRecordUsing(fn (Post $record): string => $record->status->getDescription()),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Heading and Description Aside (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the `aside()` method to align the heading and description to the left and the infolist components inside a card on the right within a Filament infolist section.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->aside()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Polling (PHP)\nDESCRIPTION: This snippet shows how to disable data polling for a chart widget by setting the `$pollingInterval` property to `null`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $pollingInterval = null;\n```\n\n----------------------------------------\n\nTITLE: Setting the Size of a Filament Badge in Blade\nDESCRIPTION: This snippet showcases how to adjust the size of the Filament badge using the `size` attribute.  The attribute accepts values such as \"xs\" (extra small) and \"sm\" (small). This allows for flexibility in adapting the badge to different contexts within the UI.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-badge.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::badge size=\"xs\">\n    New\n</x-filament::badge>\n\n<x-filament::badge size=\"sm\">\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Asserting a Notification Was Not Sent (Pest + Livewire)\nDESCRIPTION: This code shows how to assert that a notification was *not* sent.  It provides three variations: checking that no notification was sent at all, checking that no notification with a specific title was sent, and checking that a specific notification instance was not sent.  It utilizes the `assertNotNotified()` helper.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/06-testing.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\nuse function Pest\\Livewire\\livewire;\n\nit('does not send a notification', function () {\n    livewire(CreatePost::class)\n        ->assertNotNotified()\n        // or\n        ->assertNotNotified('Unable to create post')\n        // or\n        ->assertNotNotified(\n            Notification::make()\n                ->danger()\n                ->title('Unable to create post')\n                ->body('Something went wrong.'),\n        );\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering a Livewire Component (Blade)\nDESCRIPTION: This Blade directive renders the 'manage-product' Livewire component within a view. This allows the component, along with its actions, to be displayed on the page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@livewire('manage-product')\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Placement in PHP\nDESCRIPTION: This code snippet demonstrates how to control the placement of the dropdown relative to the trigger button using the `dropdownPlacement()` method.  The placement is specified as a string (e.g., 'top-start').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make([\n    // Array of actions\n])\n    ->dropdownPlacement('top-start')\n```\n\n----------------------------------------\n\nTITLE: Disabling File Preview in Filament\nDESCRIPTION: This snippet shows how to disable the default file preview functionality in the Filament FileUpload component. It uses the `previewable(false)` method, coupled with `multiple()` to handle multiple file uploads, to prevent files from being previewed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->previewable(false)\n```\n\n----------------------------------------\n\nTITLE: Getting Enabled Radio Options for Validation in Filament (PHP)\nDESCRIPTION: This snippet shows how to retrieve the options that are not disabled using `getEnabledOptions()` method. This can be helpful for validation, ensuring only enabled options are considered valid choices. The `in()` rule is used for validation, ensuring that the selected value is among the keys of the enabled options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n    ->in(fn (Radio $component): array => array_keys($component->getEnabledOptions()))\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Color Palette from RGB Value\nDESCRIPTION: This code snippet demonstrates how to generate a custom color palette for Filament from an RGB value using the `Color::rgb()` method. This allows defining a color by its RGB representation and creating the corresponding shade variations. The generated color palette can then be registered using `FilamentColor::register()`. The RGB value needs to be a valid CSS RGB color value string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/04-colors.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => Color::rgb('rgb(255, 0, 0)'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Static Infolist Schema Definition in Resource\nDESCRIPTION: Defines the infolist schema statically within a Filament resource. This example shows how to add entries to an infolist using the `infolist()` method when inside a panel builder resource.  It configures the structure and content of the infolist.  It is similar to the previous example, but the method is static. The code depends on the `Filament\\Infolists\\Infolist` class. The method returns an `Infolist` instance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Infolist;\n\npublic static function infolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->schema([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening URL in New Tab\nDESCRIPTION: Configures a TextEntry to open a URL in a new tab when clicked. It builds upon the previous example and adds `openUrlInNewTab()` to open the URL in a new tab.  The example depends on the `Filament\\Infolists\\Components\\TextEntry` class and assumes a `Post` model is available.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->url(fn (Post $record): string => route('posts.edit', ['post' => $record]))\n    ->openUrlInNewTab()\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Edit Page\nDESCRIPTION: This command generates a new Edit page for a Filament resource. It requires specifying the page name and the associated resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/04-editing-records.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page EditCustomerContact --resource=CustomerResource --type=EditRecord\n```\n\n----------------------------------------\n\nTITLE: Setting Add Action Label - PHP\nDESCRIPTION: This snippet shows how to customize the label of the button used to add new rows to the KeyValue field, using the `addActionLabel()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->addActionLabel('Add property')\n```\n\n----------------------------------------\n\nTITLE: Removing Styled Container - Filament PHP\nDESCRIPTION: This code snippet shows how to remove the default styled container (card) around the tabs and their content in a Filament infolist Tabs component. The `contained()` method is used to disable the container. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->contained(false)\n```\n\n----------------------------------------\n\nTITLE: Responsive Widget Widths in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to change the width of a Filament widget based on the responsive breakpoint of the browser using an array that contains the number of columns that the widget should occupy at each breakpoint (md and xl).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected int | string | array $columnSpan = [\n    'md' => 2,\n    'xl' => 3,\n];\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Rating\nDESCRIPTION: This snippet calculates the average rating from a dataset using the Average summarizer within a Filament table's text column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('rating')\n    ->summarize(Average::make())\n```\n\n----------------------------------------\n\nTITLE: Setting a Group Title - PHP\nDESCRIPTION: This snippet shows how to customize the title of a group based on the record data. It uses the `getTitleFromRecordUsing()` method to dynamically generate the title for each 'status' group, using the `ucfirst()` function and accessing the label from a `getLabel()` method on the status.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->getTitleFromRecordUsing(fn (Post $record): string => ucfirst($record->status->getLabel())),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying State Binding Modifiers with Alpine.js - Blade\nDESCRIPTION: This snippet shows how to apply state binding modifiers when using Alpine.js to bind field state. `$applyStateBindingModifiers()` adjusts the `$wire.$entangle()` call to incorporate any specified modifiers, controlling data synchronization.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_9\n\nLANGUAGE: Blade\nCODE:\n```\n<div x-data=\"{ state: $wire.{{ $applyStateBindingModifiers(\"\\$entangle('{$getStatePath()}')\") }} }\">\n    <input x-model=\"state\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Components with View Component (PHP)\nDESCRIPTION: This snippet shows how to embed Filament table columns or other layout components within a `View` component. The `components()` method is used to pass the components to the view. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\View;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\n[\n    Split::make([\n        ImageColumn::make('avatar')\n            ->circular(),\n        TextColumn::make('name')\n            ->weight(FontWeight::Bold)\n            ->searchable()\n            ->sortable(),\n    ]),\n    View::make('users.table.collapsible-row-content')\n        ->components([\n            TextColumn::make('email')\n                ->icon('heroicon-m-envelope'),\n        ])\n        ->collapsible(),\n]\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Infolist via Eloquent Model (PHP)\nDESCRIPTION: Demonstrates passing data to the infolist by providing an Eloquent model instance to the `record()` method. This automatically maps model attributes and relationships to entries in the infolist schema, using TextEntry components for display.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Infolists\\Infolist;\n\npublic function productInfolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->record($this->product)\n        ->schema([\n            TextEntry::make('name'),\n            TextEntry::make('category.name'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations (Laravel 10)\nDESCRIPTION: This snippet shows how to create the required tables for queue batches and notifications in Laravel 10. These tables are used by Filament to manage the import process and provide notifications.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan queue:batches-table\nphp artisan notifications:table\n```\n\n----------------------------------------\n\nTITLE: Refreshing Form Data after Action (PHP)\nDESCRIPTION: Illustrates how to refresh form data after an action is performed on an Edit or View resource page.  The `refreshFormData()` method updates the specified model attributes in the form. It requires `App\\Models\\Post`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Actions\\Action;\n\nAction::make('approve')\n    ->action(function (Post $record) {\n        $record->approve();\n\n        $this->refreshFormData([\n            'status',\n        ]);\n    })\n```\n\n----------------------------------------\n\nTITLE: Including Null Values in Range\nDESCRIPTION: This snippet demonstrates how to include null values when calculating the range by using the `excludeNull(false)` method on the Range summarizer.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('sku')\n    ->summarize(Range::make()->excludeNull(false))\n```\n\n----------------------------------------\n\nTITLE: Hiding Filter Indicators (Filament, PHP)\nDESCRIPTION: This code snippet shows how to hide the active filter indicators that appear above the table using the `hiddenFilterIndicators()` method. This can be useful when the filter state is obvious or when you want to reduce visual clutter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->hiddenFilterIndicators();\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing HTML in Option Labels - Filament PHP\nDESCRIPTION: This code shows how to allow HTML in the option labels of a Select component using the `allowHtml()` method. Note that you must ensure the HTML is safe to prevent XSS attacks.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('technology')\n    ->options([\n        'tailwind' => '<span class=\"text-blue-500\">Tailwind</span>',\n        'alpine' => '<span class=\"text-green-500\">Alpine</span>',\n        'laravel' => '<span class=\"text-red-500\">Laravel</span>',\n        'livewire' => '<span class=\"text-pink-500\">Livewire</span>',\n    ])\n    ->searchable()\n    ->allowHtml()\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks - PHP\nDESCRIPTION: This snippet illustrates how to use the `before()` and `after()` methods to execute custom code before and after a record is restored. These lifecycle hooks allow you to perform additional actions such as validation or logging.  This requires a valid PHP environment.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRestoreAction::make()\n    ->before(function () {\n        // ...\n    })\n    ->after(function () {\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Prohibits Validation - Filament\nDESCRIPTION: If the field is not empty, all specified fields must be empty. It uses the `prohibits()` method, taking the other field's name (or an array of names) as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->prohibits('field')\n\nField::make('name')->prohibits(['field', 'another_field'])\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Hint\nDESCRIPTION: Demonstrates using HTML strings for the hint of a TextEntry. The example shows how to use `Illuminate\\Support\\HtmlString` and `inlineMarkdown()` to render HTML and markdown in the hint. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class and `Illuminate\\Support\\HtmlString`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint(new HtmlString('<a href=\"/documentation\">Documentation</a>'))\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint(str('[Documentation](/documentation)')->inlineMarkdown()->toHtmlString())\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint(view('api-key-hint'))\n```\n\n----------------------------------------\n\nTITLE: Disabling Broadcasting in a Filament Panel (PHP)\nDESCRIPTION: This snippet demonstrates how to disable Laravel Echo automatic connection within a Filament panel.  The `broadcasting(false)` method is used to prevent Laravel Echo from automatically connecting.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->broadcasting(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Badge in Filament Form (PHP)\nDESCRIPTION: This snippet illustrates how to add a badge to a tab using the `badge()` method. The badge displays a numerical value, which can be used to indicate the number of notifications, unread messages, etc., associated with the tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->badge(5)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Delete Table Rows - Filament\nDESCRIPTION: This code snippet demonstrates how to use `DeleteAction` and `DeleteBulkAction` within a Filament table to delete single or multiple table rows. It includes using `BulkActionGroup` to group bulk actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\BulkActionGroup;\nuse Filament\\Tables\\Actions\\DeleteAction;\nuse Filament\\Tables\\Actions\\DeleteBulkAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            DeleteAction::make(),\n            // ...\n        ])\n        ->bulkActions([\n            BulkActionGroup::make([\n                DeleteBulkAction::make(),\n                // ...\n            ]),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Section without a Header in Filament Infolists (PHP)\nDESCRIPTION: This snippet shows how to create a section in Filament infolists without a heading, which wraps the components in a card. It uses the `Filament\\Infolists\\Components\\Section` class and does not include a title in the `make()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Block Picker Columns in Filament Builder\nDESCRIPTION: This code snippet demonstrates how to customize the number of columns in the block picker using the `blockPickerColumns()` method. It showcases how to set a fixed number of columns for larger screens or define column counts for different breakpoints.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make()\n    ->blockPickerColumns(2)\n    ->blocks([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Custom Column Span in Grid (PHP)\nDESCRIPTION: This snippet shows how to customize the number of grid columns consumed by each component at different breakpoints (lg and 2xl). It sets the 'name' and 'job' stack to occupy the full width on large screens and 2 columns on extra-large screens. The 'phone' column also occupies 2 columns on extra-large screens. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Grid;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nGrid::make([\n    'lg' => 2,\n    '2xl' => 5,\n])\n    ->schema([\n        Stack::make([\n            TextColumn::make('name'),\n            TextColumn::make('job'),\n        ])->columnSpan([\n            'lg' => 'full',\n            '2xl' => 2,\n        ]),\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone')\n            ->columnSpan([\n                '2xl' => 2,\n            ]),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Extra HTML Attributes to a Section - PHP\nDESCRIPTION: This code snippet illustrates how to add extra HTML attributes to a Section component in Filament. The `extraAttributes()` method accepts an array of attributes, where the key is the attribute name and the value is the attribute value.  Classes are merged with default classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/01-getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make()\n    ->extraAttributes(['class' => 'custom-section-style'])\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Attribute in Filament\nDESCRIPTION: Demonstrates customizing the validation attribute used in error messages for a Filament form field. It uses `validationAttribute()` to set the attribute name to 'full name' for the 'name' field of TextInput component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_58\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')->validationAttribute('full name')\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Button Trigger Style - Filament\nDESCRIPTION: Demonstrates setting the trigger style to an icon button using the `iconButton()` method. Icon buttons are circular and display only an icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->icon('heroicon-m-pencil-square')\n    ->iconButton()\n```\n\n----------------------------------------\n\nTITLE: Persisting Tab in Query String with Key - Filament Form (PHP)\nDESCRIPTION: This code snippet persists the current tab in the URL's query string using `persistTabInQueryString('settings-tab')`, specifying a custom key `settings-tab`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->persistTabInQueryString('settings-tab')\n```\n\n----------------------------------------\n\nTITLE: Declined Validation (PHP)\nDESCRIPTION: This code snippet shows how to ensure that the checkbox is not checked using the `declined()` method. Useful for age verification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/04-checkbox.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_under_18')\n    ->declined()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Text Column as a Badge in Filament PHP\nDESCRIPTION: This snippet shows how to display a TextColumn as a badge, often used for statuses. It includes customizing the badge color based on the status value ('draft', 'reviewing', 'published', 'rejected') using a match expression.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->badge()\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'gray',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        'rejected' => 'danger',\n    })\n```\n\n----------------------------------------\n\nTITLE: Customize Sidebar Background Color with Tailwind CSS and Specific !important\nDESCRIPTION: This CSS snippet customizes the background color of the Filament sidebar using the `fi-sidebar` hook class and Tailwind CSS's `@apply` directive. It applies `!bg-gray-50` for light mode and `dark:!bg-gray-950` for dark mode using `!`, making specific overrides.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/05-style-customization.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    @apply !bg-gray-50 dark:!bg-gray-950;\n}\n```\n\n----------------------------------------\n\nTITLE: Less Than or Equal To Validation - Filament\nDESCRIPTION: Validates that the field's value is less than or equal to another field's value. It uses the `lte()` method, taking the name of the other field as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nField::make('newNumber')->lte('oldNumber')\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Widget (Bash)\nDESCRIPTION: This command generates a widget class and a view file for a specific resource in Filament. It uses the `make:filament-widget` Artisan command, specifying the widget name and the associated resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget CustomerOverview --resource=CustomerResource\n```\n\n----------------------------------------\n\nTITLE: Splitting Toggle Buttons into Columns in Filament\nDESCRIPTION: This snippet demonstrates how to split toggle button options into columns using the `columns()` method. The value passed to `columns()` specifies the number of columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Adding Key Placeholder - PHP\nDESCRIPTION: This snippet demonstrates how to add a placeholder to the key field using the `keyPlaceholder()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->keyPlaceholder('Property name')\n```\n\n----------------------------------------\n\nTITLE: Removing Styled Container from Tabs in Filament Form (PHP)\nDESCRIPTION: This code demonstrates how to remove the default styled container (card) that wraps the tabs and their content using the `contained(false)` method. This allows for greater control over the styling and layout of the tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->contained(false)\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Entry as a Badge - PHP\nDESCRIPTION: This snippet demonstrates how to display a TextEntry as a badge with a dynamic color based on its state. The color is determined by a match statement that maps status values to specific colors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->badge()\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'gray',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        'rejected' => 'danger',\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring First Day of Week in DateTimePicker in Filament\nDESCRIPTION: This snippet demonstrates how to customize the first day of the week in the DateTimePicker using the `firstDayOfWeek()` method.  It accepts values from 0 to 7, where 1 is Monday and 7 or 0 is Sunday.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->firstDayOfWeek(7)\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Icon Position in Filament Form (PHP)\nDESCRIPTION: This code demonstrates how to position the icon of a tab after the label using the `iconPosition()` method and the `IconPosition` enum. The `IconPosition::After` value ensures that the icon is displayed to the right of the tab label.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\nuse Filament\\Support\\Enums\\IconPosition;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->icon('heroicon-m-bell')\n            ->iconPosition(IconPosition::After)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip to Icon Button - Blade\nDESCRIPTION: This snippet illustrates how to add a tooltip to a Filament icon button using the `tooltip` attribute.  Tooltips provide helpful context or descriptions when hovering over the button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    tooltip=\"Register a user\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Wizard Steps in PHP\nDESCRIPTION: This snippet demonstrates how to add a description to a Wizard step using the `description()` method. The description 'Review your basket' is added to the 'Order' step.  This provides additional context or instructions for each step.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard\\Step::make('Order')\n    ->description('Review your basket')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Enabling Copy-to-Clipboard in a Text Entry (Filament, PHP)\nDESCRIPTION: This snippet shows how to enable the copy-to-clipboard functionality for a Filament Infolists text entry using the `copyable()` method. It allows users to copy the API key to their clipboard by clicking on the entry. A custom message and duration can be set. Requires Filament Infolists and SSL enabled for the app.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->copyable()\n    ->copyMessage('Copied!')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyValue Field - PHP\nDESCRIPTION: This snippet demonstrates the basic initialization of a KeyValue field in a Filament form. The field is named 'meta', which should be cast to an array in the corresponding Eloquent model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n```\n\n----------------------------------------\n\nTITLE: Disable UUID Generation for Repeater Tests (PHP)\nDESCRIPTION: This code demonstrates how to disable UUID generation for repeater items during testing in Filament.  This ensures consistent keys for items in the repeater, using `Repeater::fake()`, to avoid issues where tests expect a numeric key but receive a UUID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse function Pest\\Livewire\\livewire;\n\n$undoRepeaterFake = Repeater::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertFormSet([\n        'quotes' => [\n            [\n                'content' => 'First quote',\n            ],\n            [\n                'content' => 'Second quote',\n            ],\n        ],\n        // ...\n    ]);\n\n$undoRepeaterFake();\n```\n\n----------------------------------------\n\nTITLE: Configure Tailwind CSS with Filament Preset (JavaScript)\nDESCRIPTION: This JavaScript code configures Tailwind CSS by importing the Filament preset. The content array specifies the files to scan for Tailwind classes.  It includes Filament's color scheme and required Tailwind plugins.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport preset from './vendor/filament/support/tailwind.config.preset'\n\nexport default {\n    presets: [preset],\n    content: [\n        './app/Filament/**/*.php',\n        './resources/views/filament/**/*.blade.php',\n        './vendor/filament/**/*.blade.php',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Relationships\nDESCRIPTION: This snippet demonstrates how to import a relationship using the `relationship()` method. At the moment, only `BelongsTo` relationships are supported.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('author')\n    ->relationship()\n```\n\n----------------------------------------\n\nTITLE: Limiting Block Usage with maxItems() in Filament Builder\nDESCRIPTION: This code snippet demonstrates how to limit the number of times a specific block can be used in the builder by using the `maxItems()` method on a block. This ensures that certain blocks are not overused in the content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder\\Block::make('heading')\n    ->schema([\n        // ...\n    ])\n    ->maxItems(1)\n```\n\n----------------------------------------\n\nTITLE: Customizing the Success Notification Title\nDESCRIPTION: This code shows how to customize the title of the success notification using the `successNotificationTitle()` method. In this example, the notification title is set to 'Category replicated'. This custom title replaces the default success notification title.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nReplicateAction::make()\n    ->successNotificationTitle('Category replicated')\n```\n\n----------------------------------------\n\nTITLE: Install Filament and scaffold resources\nDESCRIPTION: This Artisan command installs Filament with scaffold options and actions. It sets up Livewire, Alpine.js, and Tailwind CSS in a new Laravel project. Since it overwrites existing files, it should only be run in a new project.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --scaffold --actions\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Notifications - JavaScript\nDESCRIPTION: This snippet demonstrates how to add actions (buttons) to a notification using JavaScript with Filament.  Actions can open URLs or dispatch Livewire events.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .body('Changes to the post have been saved.')\n    .actions([\n        new FilamentNotificationAction('view')\n            .button(),\n        new FilamentNotificationAction('undo')\n            .color('gray'),\n    ])\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Blade View (Blade)\nDESCRIPTION: This Blade view file renders the custom HTML content for the Filament table row. It accesses the table record using `$getRecord()` to display the email address.  The HTML includes basic styling for padding, background, and rounded corners.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<p class=\"px-4 py-3 bg-gray-100 rounded-lg\">\n    <span class=\"font-medium\">\n        Email address:\n    </span>\n\n    <span>\n        {{ $getRecord()->email }}\n    </span>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color in a Text Entry (Filament, PHP)\nDESCRIPTION: This code shows how to customize the color of the icon in a Filament Infolists text entry using the `iconColor()` method. The email field is set to display a mail envelope icon with a primary color. Requires the Filament Infolists package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('email')\n    ->icon('heroicon-m-envelope')\n    ->iconColor('primary')\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in Filament Select Column\nDESCRIPTION: This code snippet demonstrates how to use lifecycle hooks to execute code before and after the state of the Select column is updated. The `beforeStateUpdated` hook runs before the value is saved to the database, and the `afterStateUpdated` hook runs after the value is saved to the database. These hooks can be useful for performing additional logic or actions based on the state change.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/06-select.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSelectColumn::make()\n    ->beforeStateUpdated(function ($record, $state) {\n        // Runs before the state is saved to the database.\n    })\n    ->afterStateUpdated(function ($record, $state) {\n        // Runs after the state is saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Color using Pest\nDESCRIPTION: This snippet demonstrates how to assert that a Filament action's button is displaying the right color using `assertActionHasColor()` and `assertActionDoesNotHaveColor()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'delete' action has the 'danger' color and the 'print' action does not have the 'danger' color.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('actions display proper colors', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHasColor('delete', 'danger')\n        ->assertActionDoesNotHaveColor('print', 'danger');\n});\n```\n\n----------------------------------------\n\nTITLE: Add Notes Field to Form (Filament)\nDESCRIPTION: This snippet adds a 'notes' field using a textarea to the relation manager form. The textarea is configured to span the full width of the form and has a maximum length of 65535 characters.  The `description` field is also included for context.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Forms\\Form;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            Forms\\Components\\TextInput::make('description')\n                ->required()\n                ->maxLength(255)\n                ->columnSpan('full'),\n            Forms\\Components\\Textarea::make('notes')\n                ->maxLength(65535)\n                ->columnSpan('full'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting a Notification was Sent (Pest + Livewire)\nDESCRIPTION: This code snippet demonstrates how to assert that a notification was sent using the `assertNotified()` helper in a Pest test with Livewire. It checks if any notification was dispatched during the Livewire component's execution.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/06-testing.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('sends a notification', function () {\n    livewire(CreatePost::class)\n        ->assertNotified();\n});\n```\n\n----------------------------------------\n\nTITLE: Install npm dependencies\nDESCRIPTION: This command installs the npm dependencies required for the project. It reads the `package.json` file and installs all the packages listed there.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Halted using Pest\nDESCRIPTION: This snippet shows how to assert that a Filament action has been halted during execution using `assertActionHalted()`. It creates an invoice without an email address, mounts the `EditInvoice` Livewire component, calls the 'send' action, and asserts that the action was halted because the invoice is missing an email.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('stops sending if invoice has no email address', function () {\n    $invoice = Invoice::factory(['email' => null])->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callAction('send')\n        ->assertActionHalted('send');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Title - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the title of a notification using JavaScript with the Filament notification library. This allows for dynamic notification creation and sending on the client-side.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Preventing Modal Autofocus in Filament\nDESCRIPTION: Shows how to prevent a modal from autofocusing on the first focusable element when opened, using the `modalAutofocus(false)` method. Also demonstrates globally disabling autofocus via `Modal::autofocus(false)`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalAutofocus(false)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\Modal;\n\nModal::autofocus(false);\n```\n\n----------------------------------------\n\nTITLE: PatientTypeOverview Widget (Filament)\nDESCRIPTION: This code snippet defines a Filament stats widget that displays the number of patients of each type (cats, dogs, and rabbits). It uses the `Stat` component to display each statistic and queries the `Patient` model to retrieve the counts.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Widgets;\n\nuse App\\Models\\Patient;\nuse Filament\\Widgets\\StatsOverviewWidget as BaseWidget;\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nclass PatientTypeOverview extends BaseWidget\n{\n    protected function getStats(): array\n    {\n        return [\n            Stat::make('Cats', Patient::query()->where('type', 'cat')->count()),\n            Stat::make('Dogs', Patient::query()->where('type', 'dog')->count()),\n            Stat::make('Rabbits', Patient::query()->where('type', 'rabbit')->count()),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Filter Tabs - PHP\nDESCRIPTION: Shows how to add a badge to a tab by passing a string into the `badge()` method. The badge can display a count or other relevant information. Requires `Filament\\Resources\\Components\\Tab`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Components\\Tab;\n\nTab::make()\n    ->badge(Customer::query()->where('active', true)->count())\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Icon with Pest\nDESCRIPTION: This snippet demonstrates how to assert that an infolist action's button is showing the correct icon. It verifies that when the 'send' action is enabled, it has the 'envelope-open' icon and does not have the 'envelope' icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('when enabled the send button has correct icon', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionEnabled('customer', 'send')\n        ->assertInfolistActionHasIcon('customer', 'send', 'envelope-open')\n        ->assertInfolistActionDoesNotHaveIcon('customer', 'send', 'envelope');\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Modal Footer Action Buttons in Filament\nDESCRIPTION: Demonstrates how to remove a default action by passing `false` to either `modalSubmitAction()` or `modalCancelAction()`. This is useful for simplifying the modal's interface.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nAction::make('help')\n    ->modalContent(view('actions.help'))\n    ->modalSubmitAction(false)\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Radio in Filament (PHP)\nDESCRIPTION: This example demonstrates creating a simple boolean radio button group with \"Yes\" and \"No\" options using the `boolean()` method in Filament. The `label()` method sets the label for the radio group.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Customize Tenant Menu Registration Link in Filament\nDESCRIPTION: This code demonstrates how to customize the registration link on the tenant menu in Filament by registering a new item with the `register` array key using the `tenantMenuItems()` method in the panel configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\MenuItem;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            'register' => MenuItem::make()->label('Register new team'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using HasLabel Enum with Form and Table Fields in Filament\nDESCRIPTION: This snippet showcases how to leverage the `HasLabel` interface implemented by the `Status` enum to generate options for various Filament form and table fields. The `options()` method of components like `Select`, `CheckboxList`, `Radio`, `SelectColumn`, and `SelectFilter` automatically uses the enum's labels to populate the available options, making it easier to integrate enums into Filament UIs. The expected output is an array where the enum's value is the key and the label is the value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/07-enums.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Filament\\Forms\\Components\\Radio;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\SelectColumn;\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelect::make('status')\n    ->options(Status::class)\n\nCheckboxList::make('status')\n    ->options(Status::class)\n\nRadio::make('status')\n    ->options(Status::class)\n\nSelectColumn::make('status')\n    ->options(Status::class)\n\nSelectFilter::make('status')\n    ->options(Status::class)\n```\n\nLANGUAGE: php\nCODE:\n```\n[\n    'draft' => 'Draft',\n    'reviewing' => 'Reviewing',\n    'published' => 'Published',\n    'rejected' => 'Rejected',\n]\n```\n\n----------------------------------------\n\nTITLE: Counting Relationships with Scope\nDESCRIPTION: This PHP code demonstrates how to count related records with a scope by providing an array where the key is the relationship name and the value is a function that scopes the Eloquent query.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportColumn::make('users_count')->counts([\n    'users' => fn (Builder $query) => $query->where('is_active', true),\n])\n```\n\n----------------------------------------\n\nTITLE: Assert Number of Items in Repeater During Testing (PHP)\nDESCRIPTION: This snippet provides an example of using `assertFormSet()` with a closure in Pest to verify the number of items within a Filament repeater during testing. The closure receives the form state and asserts the number of quotes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse function Pest\\Livewire\\livewire;\n\n$undoRepeaterFake = Repeater::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertFormSet(function (array $state) {\n        expect($state['quotes'])\n            ->toHaveCount(2);\n    });\n\n$undoRepeaterFake();\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Filter Tabs - PHP\nDESCRIPTION: Demonstrates how to add an icon to a tab using the `icon()` method of the `Tab` object. The icon is specified using a string representing a Blade UI Kit icon. Requires `Filament\\Resources\\Components\\Tab`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse use Filament\\Resources\\Components\\Tab;\n\nTab::make()\n    ->icon('heroicon-m-user-group')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Dashboard Page in Filament (PHP)\nDESCRIPTION: This snippet shows how to create a new Dashboard class in `app/Filament/Pages/Dashboard.php` that extends the `Filament\\Pages\\Dashboard` class, allowing for customization of the dashboard page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Filament\\Pages;\n\nclass Dashboard extends \\Filament\\Pages\\Dashboard\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding a Limited List of Values - PHP\nDESCRIPTION: This snippet demonstrates how to make a limited list expandable and collapsable using the `expandableLimitedList()` method. It combines the `listWithLineBreaks()`, `limitList()`, and `expandableLimitedList()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n    ->expandableLimitedList()\n```\n\n----------------------------------------\n\nTITLE: Hiding a Stacked Layout on Mobile in Filament\nDESCRIPTION: This snippet shows how to hide the `Stack` layout on mobile devices by using the `visibleFrom()` method with the 'md' breakpoint.  The phone and email columns are grouped in a stack that will only appear on medium-sized screens and larger.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    Stack::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])->visibleFrom('md'),\n])\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Action (PHP)\nDESCRIPTION: Defines an example action for programmatic triggering. This action named `testAction` requires confirmation and `dd`'s the arguments.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\npublic function testAction(): Action\n{\n    return Action::make('test')\n        ->requiresConfirmation()\n        ->action(function (array $arguments) {\n            dd('Test action called', $arguments);\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Render Edit Page Test (PHP)\nDESCRIPTION: This test case ensures that the Edit page for a Filament resource can be rendered successfully. It generates the URL for the edit page, passing a record ID, and asserts that the request returns a successful response.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nit('can render page', function () {\n    $this->get(PostResource::getUrl('edit', [\n        'record' => Post::factory()->create(),\n    ]))->assertSuccessful();\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Eloquent Query Grouping - PHP\nDESCRIPTION: This code shows how to customize the Eloquent query grouping behavior for a Filament table. The groupQueryUsing method allows defining a custom function for grouping the query based on the status.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->groupQueryUsing(fn (Builder $query) => $query->groupBy('status')),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying ID for Persisted Collapsed Section (PHP)\nDESCRIPTION: This code shows how to manually specify the `id()` of a section in Filament infolists when persisting the collapsed state, to prevent ID conflicts or to collapse sections independently.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n    ->persistCollapsed()\n    ->id('order-cart')\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Weight in a Text Entry (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to change the font weight of a Filament Infolists text entry using the `weight()` method. The title field is configured to use bold font weight, using the FontWeight enum. Filament and the FontWeight enum are required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Enums\\FontWeight;\n\nTextEntry::make('title')\n    ->weight(FontWeight::Bold)\n```\n\n----------------------------------------\n\nTITLE: Filament Button as Anchor Link\nDESCRIPTION: Demonstrates how to use the Filament button component as an anchor link by setting the `tag` attribute to `a` and providing an `href` attribute. This renders the button as a standard HTML link.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button\n    href=\"https://filamentphp.com\"\n    tag=\"a\"\n>\n    Filament\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Direction for Toggle Buttons in Filament\nDESCRIPTION: This example demonstrates how to set the grid direction to 'row' when arranging buttons into columns.  By default, buttons are listed vertically; `gridDirection('row')` arranges them horizontally.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->columns(2)\n    ->gridDirection('row')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Filament Action in a Blade View (Blade)\nDESCRIPTION: This Blade snippet renders the `deleteAction` within a Livewire component's view. It also includes `<x-filament-actions::modals />` to inject the HTML required to render action modals. `deleteAction` is the name of the method defining the action.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $this->deleteAction }}\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up the Provider (HeadingsServiceProvider.php)\nDESCRIPTION: This code snippet shows the `HeadingsServiceProvider.php` file, which registers the plugin's stylesheet with the Filament Asset Manager. The `loadedOnRequest()` method ensures that the stylesheet is only loaded when necessary.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Awcodes\\Headings;\n\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Facades\\FilamentAsset;\nuse Spatie\\LaravelPackageTools\\Package;\nuse Spatie\\LaravelPackageTools\\PackageServiceProvider;\n\nclass HeadingsServiceProvider extends PackageServiceProvider\n{\n    public static string $name = 'headings';\n\n    public function configurePackage(Package $package): void\n    {\n        $package->name(static::$name)\n            ->hasViews();\n    }\n\n    public function packageBooted(): void\n    {\n        FilamentAsset::register([\n            Css::make('headings', __DIR__ . '/../resources/dist/headings.css')->loadedOnRequest(),\n        ], 'awcodes/headings');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Laravel container dependencies (PHP)\nDESCRIPTION: This code snippet shows how to inject dependencies from the Laravel container alongside Filament utilities.  It allows the action to use services such as `Illuminate\\Http\\Request`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Http\\Request;\n\nfunction (Request $request, array $arguments) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Implementation PHP\nDESCRIPTION: This snippet demonstrates the basic implementation of a Toggle component in a Filament form. The `Toggle::make()` method is used to create a toggle field named 'is_admin'. This boolean value will be saved to your database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Configure app.blade.php Layout\nDESCRIPTION: This Blade template defines the base layout for Livewire components, including meta tags, CSS links, and script includes for Filament and Vite assets.  It is necessary for the basic Filament view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n\n        <meta name=\"application-name\" content=\"{{ config('app.name') }}\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>{{ config('app.name') }}</title>\n\n        <style>\n            [x-cloak] { \n                display: none !important;\n            }\n        </style>\n\n        @filamentStyles\n        @vite('resources/css/app.css')\n    </head>\n\n    <body class=\"antialiased\">\n        {{ $slot }}\n\n        @filamentScripts\n        @vite('resources/js/app.js')\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Values with Line Breaks - PHP\nDESCRIPTION: This snippet shows how to display multiple values in a TextEntry, each on a new line, using the `listWithLineBreaks()` method. This is suitable for displaying lists of items from an array or relation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n```\n\n----------------------------------------\n\nTITLE: Less Than Validation - Filament\nDESCRIPTION: Validates that the field's value is less than another field's value. It uses the `lt()` method, taking the name of the other field as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nField::make('newNumber')->lt('oldNumber')\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Entry with 'Since' - PHP\nDESCRIPTION: This snippet demonstrates how to format a TextEntry to display the time elapsed since a given date using Carbon's `diffForHumans()` method. This is achieved using the `since()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->since()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Showing a Summary in Filament Table (PHP)\nDESCRIPTION: Illustrates how to conditionally show a Filament table summary based on a boolean value or a function that returns a boolean. The function can access the Eloquent query builder instance to determine whether the summary should be visible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Summarizer;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nTextColumn::make('sku')\n    ->summarize(Summarizer::make()\n        ->visible(fn (Builder $query): bool => $query->exists()))\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Filament Badge in Blade\nDESCRIPTION: This snippet demonstrates how to incorporate an icon into the Filament badge using the `icon` attribute. The attribute expects the name of a Blade UI Kit icon. The `icon-position` attribute determines whether the icon appears before or after the badge text.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-badge.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::badge icon=\"heroicon-m-sparkles\">\n    New\n</x-filament::badge>\n\n<x-filament::badge\n    icon=\"heroicon-m-sparkles\"\n    icon-position=\"after\"\n>\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Disabling Bulk Actions for Some Rows (PHP)\nDESCRIPTION: This snippet shows how to conditionally disable bulk actions for specific records based on a condition (e.g., record status). It uses the `checkIfRecordIsSelectableUsing()` method, providing a closure that returns a boolean to determine if a record can be selected for bulk actions. The dependencies include Table and Model facades.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->bulkActions([\n            // ...\n        ])\n        ->checkIfRecordIsSelectableUsing(\n            fn (Model $record): bool => $record->status === Status::Enabled,\n        );\n```\n\n----------------------------------------\n\nTITLE: Resizing Textarea (Filament/PHP)\nDESCRIPTION: This example shows how to resize the textarea using the `rows()` and `cols()` methods.  `rows()` sets the initial number of visible text rows, and `cols()` sets the initial width in average character widths. This requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/15-textarea.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->rows(10)\n    ->cols(20)\n```\n\n----------------------------------------\n\nTITLE: Setting Summarizer Label\nDESCRIPTION: This snippet demonstrates setting a custom label for a summarizer using the `label()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->label('Total'))\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Tag Suffix - PHP\nDESCRIPTION: This snippet adds a suffix to each tag displayed in the TagsInput component. The `tagSuffix()` method is used to specify the suffix string, which is added for presentation purposes without modifying the underlying data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TagsInput;\n\nTagsInput::make('percentages')\n    ->tagSuffix('%')\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Size in Filament (PHP)\nDESCRIPTION: Demonstrates how to customize the width, height, or size of an image using the width(), height(), and size() methods. These methods allow you to control the dimensions of the displayed image.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->width(200)\n\nImageEntry::make('header_image')\n    ->height(50)\n\nImageEntry::make('author.avatar')\n    ->size(40)\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Status - PHP\nDESCRIPTION: This snippet demonstrates setting a notification status using the `success()` method, which is a shortcut for setting both the icon and color. Other status methods include `warning()`, `danger()`, and `info()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Length\nDESCRIPTION: This PHP code snippet demonstrates how to limit the length of a cell's value using the `limit()` method. This ensures that the exported text does not exceed a specified number of characters, preventing excessively long entries.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->limit(50)\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Theme - Artisan Command\nDESCRIPTION: This code snippet shows the Artisan command to create a new Filament theme.  It creates CSS and Tailwind configuration files in the `/resources/css/filament` directory for customization. By default, this command will use NPM to install dependencies.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-theme\n```\n\n----------------------------------------\n\nTITLE: Creating Theme for Specific Panel - Artisan\nDESCRIPTION: This code snippet shows how to create a Filament theme for a specific panel, in this case, the 'admin' panel. This allows for different themes for different areas of your application.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-theme admin\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color PHP\nDESCRIPTION: Customizes the color of an IconEntry based on the 'status' field value. A closure maps different status strings to specific color options such as 'info', 'warning', 'success', or 'gray'. $state holds the field value, and $record allows accessing the Eloquent record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/03-icon.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('status')\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'info',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        default => 'gray',\n    })\n```\n\n----------------------------------------\n\nTITLE: Changing Import Chunk Size in Filament ImportAction (PHP)\nDESCRIPTION: This code demonstrates how to change the chunk size for CSV imports using the `chunkSize()` method on the `ImportAction`. Filament processes CSVs in chunks, and this method allows adjusting the number of rows processed in each chunk. It can be useful for managing memory usage during large imports. Requires the ProductImporter class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->chunkSize(250)\n```\n\n----------------------------------------\n\nTITLE: Registering Assets for a Filament Panel (PHP)\nDESCRIPTION: This code snippet demonstrates how to register CSS and JavaScript assets that will only be loaded within a specific Filament panel. The `assets()` method is used to pass an array of `Css` and `Js` objects, specifying the asset name and path.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Assets\\Css;\nuse Filament\\Support\\Assets\\Js;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->assets([\n            Css::make('custom-stylesheet', resource_path('css/custom.css')),\n            Js::make('custom-script', resource_path('js/custom.js')),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Create Stats Widget (Artisan)\nDESCRIPTION: This command creates a new Filament stats widget.  The `--stats-overview` option indicates that it should be a stats overview widget, suitable for displaying key statistics.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget PatientTypeOverview --stats-overview\n```\n\n----------------------------------------\n\nTITLE: Deferring Table Loading in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to defer the loading of table data in Filament using the `deferLoading()` method. This improves the initial page load time, especially for tables with large datasets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->deferLoading();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in a Placeholder - PHP\nDESCRIPTION: This snippet illustrates how to render HTML content within a Filament form placeholder. It utilizes the `Illuminate\\Support\\HtmlString` class to wrap the HTML string, allowing Filament to render it as raw HTML. This is useful for including links or other formatted content in a form. Requires: Filament forms, Illuminate\\Support\\HtmlString.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-placeholder.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Placeholder;\nuse Illuminate\\Support\\HtmlString;\n\nPlaceholder::make('documentation')\n    ->content(new HtmlString('<a href=\"https://filamentphp.com/docs\">filamentphp.com</a>'))\n```\n\n----------------------------------------\n\nTITLE: Notification Trigger (Blade)\nDESCRIPTION: Blade component to render a trigger button.  `$unreadNotificationsCount` is automatically passed to this view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<button type=\"button\">\n    Notifications ({{ $unreadNotificationsCount }} unread)\n</button>\n```\n\n----------------------------------------\n\nTITLE: Prevent File Existence Checks in Filament (PHP)\nDESCRIPTION: Demonstrates how to disable automatic file existence checks using the checkFileExistence(false) method. This is useful when using remote storage with many images to avoid performance issues on the backend.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('attachment')\n    ->checkFileExistence(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Modal Width in Filament\nDESCRIPTION: Demonstrates how to set the width of a modal using the `modalWidth()` method and the `MaxWidth` enum. The options correspond to Tailwind's max-width scale.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\MaxWidth;\n\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalWidth(MaxWidth::FiveExtraLarge)\n```\n\n----------------------------------------\n\nTITLE: Adding a Page Subheading (Property) (PHP)\nDESCRIPTION: Demonstrates adding a subheading to a Filament page by defining the `$subheading` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nprotected ?string $subheading = 'Custom Page Subheading';\n```\n\n----------------------------------------\n\nTITLE: Closing Notifications using Actions in JavaScript (Filament)\nDESCRIPTION: This JavaScript code creates a Filament notification with actions that can open a URL or dispatch an event. The `close()` method is chained to the action to automatically close the notification after the action is triggered.  Requires the `FilamentNotification` and `FilamentNotificationAction` objects.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .body('Changes to the post have been saved.')\n    .actions([\n        new FilamentNotificationAction('view')\n            .button()\n            .url('/view')\n            .openUrlInNewTab(),\n        new FilamentNotificationAction('undo')\n            .color('gray')\n            .dispatch('undoEditingPost')\n            .close(),\n    ])\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Hidden State in Filament PHP\nDESCRIPTION: This snippet demonstrates asserting a Filament form component action is hidden using Pest and Livewire. It creates an invoice and then asserts that the 'send' action is hidden for the 'customer_id' component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can not send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionHidden('customer_id', 'send');\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Widget Data - Adding Filters Form (PHP)\nDESCRIPTION: This snippet demonstrates adding the `HasFiltersForm` trait to the Dashboard page and defining the `filtersForm()` method to return form components (DatePicker) within a Section to filter data across all widgets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Form;\nuse Filament\\Pages\\Dashboard as BaseDashboard;\nuse Filament\\Pages\\Dashboard\\Concerns\\HasFiltersForm;\n\nclass Dashboard extends BaseDashboard\n{\n    use HasFiltersForm;\n\n    public function filtersForm(Form $form): Form\n    {\n        return $form\n            ->schema([\n                Section::make()\n                    ->schema([\n                        DatePicker::make('startDate'),\n                        DatePicker::make('endDate'),\n                        // ...\n                    ])\n                    ->columns(3),\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns within a Section (PHP)\nDESCRIPTION: This code demonstrates how to create a grid within a section in Filament infolists using the `columns()` method.  This helps with layout within the section.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Heading')\n    ->schema([\n        // ...\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Limiting Word Count\nDESCRIPTION: This PHP code snippet shows how to limit the number of words displayed in a cell using the `words()` method. This is useful for controlling the length of text fields by limiting the number of words displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->words(10)\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder Selection\nDESCRIPTION: This code snippet shows how to disable the placeholder from being selectable in the Select column.  The `selectablePlaceholder(false)` method prevents users from selecting an empty option or a default placeholder value, forcing them to choose one of the defined options.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/06-select.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SelectColumn;\n\nSelectColumn::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->selectablePlaceholder(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Navigation Sort Order in Filament (PHP)\nDESCRIPTION: This snippet shows how to control the sort order of custom dashboards within the navigation menu using the `$navigationSort` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?int $navigationSort = 15;\n```\n\n----------------------------------------\n\nTITLE: Using Cursor Pagination in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates implementing cursor pagination in a Filament table by overriding the `paginateTableQuery()` method in the Livewire component. It utilizes `cursorPaginate` method to get the paginated results.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Pagination\\CursorPaginator;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nprotected function paginateTableQuery(Builder $query): CursorPaginator\n{\n    return $query->cursorPaginate(($this->getTableRecordsPerPage() === 'all') ? $query->count() : $this->getTableRecordsPerPage());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Avatar Size\nDESCRIPTION: This snippet shows how to use custom CSS classes for setting the avatar size, using the `size` attribute. This provides more flexibility to define your own sizes using Tailwind CSS classes. The `src` and `alt` attributes are required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-avatar.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n    size=\"w-12 h-12\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic CheckboxList Implementation - PHP\nDESCRIPTION: This snippet demonstrates the basic implementation of a CheckboxList component in Filament. It defines the field's name ('technologies') and provides an array of options with their corresponding labels. The selected options will be returned in JSON format.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Button Size - Blade\nDESCRIPTION: This snippet shows how to control the size of a Filament icon button using the `size` attribute. It provides examples for different size options, including \"xs\" (extra small), \"sm\" (small), \"lg\" (large), and \"xl\" (extra large).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    size=\"xs\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    size=\"sm\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-s-plus\"\n    size=\"lg\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-s-plus\"\n    size=\"xl\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Size\nDESCRIPTION: This example demonstrates how to set the size of the avatar using the `size` attribute. You can use predefined sizes like `sm`, `md`, or `lg`. The `src` and `alt` attributes are also required for rendering the avatar.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-avatar.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n    size=\"lg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Filters Dropdown Max Height (Filament, PHP)\nDESCRIPTION: This code demonstrates how to set a maximum height for the filters' dropdown content in a Filament table using the `filtersFormMaxHeight()` method. When the filters exceed the maximum height, a scrollbar will appear. The method accepts a CSS length value (e.g., '400px').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersFormMaxHeight('400px');\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Range\nDESCRIPTION: This snippet demonstrates formatting a date range using the `minimalDateTimeDifference()` method, showing the minimal difference between the minimum and maximum dates.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Range;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('created_at')\n    ->dateTime()\n    ->summarize(Range::make()->minimalDateTimeDifference())\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget Width in Filament (PHP)\nDESCRIPTION: This snippet shows how to customize the width of a Filament widget using the `$columnSpan` property, which can be a number between 1 and 12 to indicate the number of columns the widget should span, or 'full' to make it occupy the full width of the page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected int | string | array $columnSpan = 'full';\n```\n\n----------------------------------------\n\nTITLE: Adding an Action to Custom Modal Content (PHP)\nDESCRIPTION: This snippet shows how to register an action with the `registerModalActions()` method, and then pass it to the view. This allows you to render an action button in your custom modal content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Illuminate\\Contracts\\View\\View;\n\nAction::make('advance')\n    ->registerModalActions([\n        Action::make('report')\n            ->requiresConfirmation()\n            ->action(fn (Post $record) => $record->report()),\n    ])\n    ->action(fn (Post $record) => $record->advance())\n    ->modalContent(fn (Action $action): View => view(\n        'filament.pages.actions.advance',\n        ['action' => $action],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Making Password Inputs Revealable\nDESCRIPTION: This code snippet demonstrates making a password input revealable, allowing users to view the plain text password they are typing.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->revealable()\n```\n\n----------------------------------------\n\nTITLE: Using a Separator for List Items - PHP\nDESCRIPTION: This snippet splits a string into multiple list items based on a separator character using the `separator()` method. In this example, a comma is used as the separator to split the 'tags' field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('tags')\n    ->badge()\n    ->separator(',')\n```\n\n----------------------------------------\n\nTITLE: Implementing FilamentUser Contract\nDESCRIPTION: This PHP code snippet demonstrates how to implement the `FilamentUser` contract in the `User` model, allowing control over which users can access the Filament panel.  It requires the `Filament\\Models\\Contracts\\FilamentUser` interface, and the `Filament\\Panel` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\FilamentUser;\nuse Filament\\Panel;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable implements FilamentUser\n{\n    // ...\n\n    public function canAccessPanel(Panel $panel): bool\n    {\n        return str_ends_with($this->email, '@yourdomain.com') && $this->hasVerifiedEmail();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Filament upgrade script in composer.json\nDESCRIPTION: This snippet configures the `composer.json` file to run the `filament:upgrade` command automatically after a `composer update`.  This ensures that all Laravel caches are cleared and frontend assets are republished.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"post-autoload-dump\": [\n    // ...\n    \"@php artisan filament:upgrade\"\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a URL Redirect Action in Filament PHP\nDESCRIPTION: This code snippet demonstrates creating a Filament action 'edit' that redirects the user to a specified URL when clicked. The URL is dynamically generated using the `route` helper, passing the 'post' parameter. It directly navigates the user to the edit page for a specific post.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/02-overview.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Disabling Autocomplete\nDESCRIPTION: This snippet shows how to disable browser autocomplete for a text input using autocomplete(false).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->password()\n    ->autocomplete(false)\n```\n\n----------------------------------------\n\nTITLE: Install Filament Notifications Assets (Bash)\nDESCRIPTION: This Artisan command installs the assets required for the Filament Notifications package in existing Laravel projects.  It's typically run after installing the package via composer.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --notifications\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Rows in Filament ImportAction (PHP)\nDESCRIPTION: This snippet shows how to limit the maximum number of rows that can be imported from a CSV file using the `maxRows()` method on the `ImportAction`. This helps prevent server overload by restricting the size of imported data. Requires the ProductImporter class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nImportAction::make()\n    ->importer(ProductImporter::class)\n    ->maxRows(100000)\n```\n\n----------------------------------------\n\nTITLE: Setting ActionGroup Button Size in Filament\nDESCRIPTION: This code snippet shows how to set the size of an `ActionGroup` button in Filament using the `size()` method. It uses the `ActionSize` enum to specify the size.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\ActionSize;\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])->size(ActionSize::Small);\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Color - PHP\nDESCRIPTION: This snippet sets a custom color for the text using the `color()` method. Available colors are danger, gray, info, primary, success, and warning.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->color('primary')\n```\n\n----------------------------------------\n\nTITLE: Setting Form Component Action Data in Filament PHP\nDESCRIPTION: This snippet shows how to set data for a Filament form component action without immediately calling it using Pest and Livewire. It creates an invoice, mounts the 'send' action on the 'customer_id' component, sets the email address using `setFormComponentActionData()`, allowing for deferred execution or further modifications before invocation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountFormComponentAction('customer_id', 'send')\n        ->setFormComponentActionData([\n            'email' => $email = fake()->email(),\n        ])\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting a Livewire Component into an Infolist (PHP)\nDESCRIPTION: This snippet demonstrates how to insert a Livewire component into a Filament infolist. It uses the `Livewire::make()` method to instantiate the component. It requires the Filament infolists package and a defined Livewire component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Livewire;\nuse App\\Livewire\\Foo;\n\nLivewire::make(Foo::class)\n```\n\n----------------------------------------\n\nTITLE: Styling XLSX Cells with OpenSpout\nDESCRIPTION: This code snippet demonstrates how to override the `getXlsxCellStyle()` method in an exporter class to style cells in the generated XLSX file. It utilizes the OpenSpout library to set the font size and name for the cells.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nuse OpenSpout\\Common\\Entity\\Style\\Style;\n\npublic function getXlsxCellStyle(): ?Style\n{\n    return (new Style())\n        ->setFontSize(12)\n        ->setFontName('Consolas');\n}\n```\n\n----------------------------------------\n\nTITLE: ASCII Validation - Filament\nDESCRIPTION: Validates that the field contains only 7-bit ASCII characters. It uses the `ascii()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->ascii()\n```\n\n----------------------------------------\n\nTITLE: Setting a Group Key - PHP\nDESCRIPTION: This snippet demonstrates how to customize the key of a group using the `getKeyFromRecordUsing()` method. The key is a unique identifier for the group. This example uses the `value` property of the record's status as the group key.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->getKeyFromRecordUsing(fn (Post $record): string => $record->status->value),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Entry Length - PHP\nDESCRIPTION: This snippet shows how to limit the length of the text displayed in a TextEntry using the `limit()` method. The 'description' field will be limited to 50 characters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->limit(50)\n```\n\n----------------------------------------\n\nTITLE: Delete Eloquent Record - Filament\nDESCRIPTION: This code snippet demonstrates how to use the `DeleteAction` to delete an Eloquent record in Filament. The `record()` method is used to specify the record to be deleted.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/04-delete.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\n\nDeleteAction::make()\n    ->record($this->post)\n```\n\n----------------------------------------\n\nTITLE: Registering Render Hook with View - Filament PHP\nDESCRIPTION: This snippet shows how to register a render hook in Filament to render a view from a file. It utilizes `FilamentView::registerRenderHook()` to inject the `impersonation-banner` view into the `BODY_START` render hook, positioning the view after the opening `<body>` tag. It requires the `FilamentView` facade and `View` contract.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Contracts\\View\\View;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::BODY_START,\n    fn (): View => view('impersonation-banner'),\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Private Images in Filament (PHP)\nDESCRIPTION: Illustrates how to generate temporary URLs for private images by setting the visibility() to 'private'.  This ensures that only authorized users can access the images.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n    ->visibility('private')\n```\n\n----------------------------------------\n\nTITLE: Rendering the Field Wrapper - Blade\nDESCRIPTION: This snippet shows how to render the Filament field wrapper component in a Blade view. The wrapper provides consistent styling for labels, validation errors, and other surrounding text. The `$getFieldWrapperView()` function returns the name of the wrapper component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_6\n\nLANGUAGE: Blade\nCODE:\n```\n<x-dynamic-component\n    :component=\"$getFieldWrapperView()\"\n    :field=\"$field\"\n>\n    <!-- Field -->\n</x-dynamic-component>\n```\n\n----------------------------------------\n\nTITLE: Define 'Name' Text Input in Filament Form\nDESCRIPTION: This code adds a text input field for the `name` attribute to the Filament form. It uses the `TextInput` component from the `Filament\\Forms` namespace. The field is also set to be required and have a maximum length of 255 characters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms;\n\nForms\\Components\\TextInput::make('name')\n    ->required()\n    ->maxLength(255)\n```\n\n----------------------------------------\n\nTITLE: Override Translatable Locales in Resource (PHP)\nDESCRIPTION: Overrides the default translatable locales for a specific Filament resource. The `getTranslatableLocales()` method is overridden to return a custom array of locales.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Concerns\\Translatable;\nuse Filament\\Resources\\Resource;\n\nclass BlogPostResource extends Resource\n{\n    use Translatable;\n    \n    // ...\n    \n    public static function getTranslatableLocales(): array\n    {\n        return ['en', 'fr'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing CSV Delimiter (PHP)\nDESCRIPTION: This demonstrates how to override the `getCsvDelimiter()` method on the exporter class to change the delimiter used when exporting CSV files. You can only specify a single character.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_44\n\nLANGUAGE: php\nCODE:\n```\npublic static function getCsvDelimiter(): string\n{\n    return ';';\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Entry Label\nDESCRIPTION: Enables automatic translation of the entry label using Laravel's localization features.  The `translateLabel()` method translates the label using the `__('Title')` syntax. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->translateLabel() // Equivalent to `label(__('Title'))`\n```\n\n----------------------------------------\n\nTITLE: Custom List Page View Content - Blade\nDESCRIPTION: This snippet demonstrates the basic content of a custom list page view using Blade.  It renders the table component within the Filament page layout.  This assumes you have created a view at `resources/views/filament/resources/users/pages/list-users.blade.php`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-panels::page>\n    {{ $this->table }}\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Adding Value Placeholder - PHP\nDESCRIPTION: This snippet demonstrates how to add a placeholder to the value field using the `valuePlaceholder()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->valuePlaceholder('Property value')\n```\n\n----------------------------------------\n\nTITLE: Doesnt Start With Validation - Filament\nDESCRIPTION: Validates that the field's value does not start with any of the given values. It uses the `doesntStartWith()` method, accepting an array of strings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->doesntStartWith(['admin'])\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations (Laravel 11+)\nDESCRIPTION: This snippet shows how to create the required tables for queue batches and notifications in Laravel 11 and higher.  These tables are used by Filament to manage the import process and provide notifications.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:queue-batches-table\nphp artisan make:notifications-table\n```\n\n----------------------------------------\n\nTITLE: Conditional Disabling - Filament\nDESCRIPTION: Shows how to conditionally disable a button based on a boolean condition.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nAction::make('delete')\n    ->disabled(! auth()->user()->can('delete', $this->post))\n```\n\n----------------------------------------\n\nTITLE: Customize Tenant Menu Profile Link in Filament\nDESCRIPTION: This code demonstrates how to customize the profile link on the tenant menu in Filament by registering a new item with the `profile` array key using the `tenantMenuItems()` method in the panel configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Navigation\\MenuItem;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenantMenuItems([\n            'profile' => MenuItem::make()->label('Edit team profile'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to a Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to add a description below the heading of a Filament table using the `$table->description()` method. It provides additional context for the table content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->heading('Clients')\n        ->description('Manage your clients here.')\n        ->columns([\n            // ...\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Custom Active Indicators for Filament Filters\nDESCRIPTION: This example demonstrates how to use `indicateUsing()` to create a custom active indicator for a date filter. It formats the selected date using Carbon and returns a string to be displayed as the indicator.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/05-custom.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('created_at')\n    ->form([DatePicker::make('date')])\n    // ...\n    ->indicateUsing(function (array $data): ?string {\n        if (! $data['date']) {\n            return null;\n        }\n\n        return 'Created at ' . Carbon::parse($data['date'])->toFormattedDateString();\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Query - PHP\nDESCRIPTION: This snippet demonstrates how to customize the database query used to retrieve options for a relationship using the `modifyQueryUsing` parameter. This allows you to apply additional filters, scopes, or eager loading.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nSelect::make('author_id')\n    ->relationship(\n        name: 'author',\n        titleAttribute: 'name',\n        modifyQueryUsing: fn (Builder $query) => $query->withTrashed(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Loading - PHP\nDESCRIPTION: This snippet shows how to disable lazy loading for the widget. By default, widgets are lazy-loaded, only loading when visible. Override the `$isLazy` property to `false` to load the widget immediately.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isLazy = false;\n```\n\n----------------------------------------\n\nTITLE: Custom Billing Provider in Filament\nDESCRIPTION: This code demonstrates how to implement a custom billing provider for Filament by implementing the `Filament\\Billing\\Providers\\Contracts\\Provider` interface. It defines the `getRouteAction()` method for handling the billing route and `getSubscribedMiddleware()` for subscription checks.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\Middleware\\RedirectIfUserNotSubscribed;\nuse Filament\\Billing\\Providers\\Contracts\\Provider;\nuse Illuminate\\Http\\RedirectResponse;\n\nclass ExampleBillingProvider implements Provider\n{\n    public function getRouteAction(): string\n    {\n        return function (): RedirectResponse {\n            return redirect('https://billing.example.com');\n        };\n    }\n\n    public function getSubscribedMiddleware(): string\n    {\n        return RedirectIfUserNotSubscribed::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of registering plugin/widget in panel provider\nDESCRIPTION: Provides an example of how to register the plugin and widget in your Panel provider. This is an example usage in the README file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Register the plugin and/or Widget in your Panel provider:\n\nuse Awcodes\\ClockWidget\\ClockWidgetWidget;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        ->widgets([\n            ClockWidgetWidget::class,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Column Label in Key-Value Entry\nDESCRIPTION: This snippet demonstrates how to customize the label for the key column in the KeyValueEntry component. It uses the `keyLabel()` method to set the label to 'Property name'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/06-key-value.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\KeyValueEntry;\n\nKeyValueEntry::make('meta')\n    ->keyLabel('Property name')\n```\n\n----------------------------------------\n\nTITLE: Setting ActionGroup Button Color in Filament\nDESCRIPTION: This code demonstrates how to set the color of an `ActionGroup` button in Filament using the `color()` method. It sets the color to 'info'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])->color('info');\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Icons in Filament\nDESCRIPTION: This code snippet showcases how to customize the icons used for representing true and false boolean values in a Filament table column. The `trueIcon()` and `falseIcon()` methods allow specifying different icons for each state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('is_featured')\n    ->boolean()\n    ->trueIcon('heroicon-o-check-badge')\n    ->falseIcon('heroicon-o-x-mark')\n```\n\n----------------------------------------\n\nTITLE: Accessing the Eloquent Record in a Filament Column View\nDESCRIPTION: This snippet shows how to access the Eloquent record associated with a row in a Filament table within a column's Blade view. The `$getRecord()` function returns the Eloquent model instance for the current row. This allows you to display data from related columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/10-custom.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getRecord()->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Form Component Action in Filament PHP\nDESCRIPTION: This snippet demonstrates how to pass data to a form component action in Filament using Pest and Livewire. It creates an invoice, calls the 'send' action on the 'customer_id' component with an email address, and asserts that the action executes without errors and the invoice's recipient email is updated.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callFormComponentAction('customer_id', 'send', data: [\n            'email' => $email = fake()->email(),\n        ])\n        ->assertHasNoFormComponentActionErrors();\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue()\n        ->recipient_email->toBe($email);\n});\n```\n\n----------------------------------------\n\nTITLE: Aggregating Relationships with Scope\nDESCRIPTION: This PHP code demonstrates how to aggregate a relationship field with a scope. An array is passed to the `avg` method, where the key is the relationship name and the value is a function that scopes the Eloquent query.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportColumn::make('users_avg_age')->avg([\n    'users' => fn (Builder $query) => $query->where('is_active', true),\n], 'age')\n```\n\n----------------------------------------\n\nTITLE: Adding Hint Icon\nDESCRIPTION: Adds an icon to the hint of a TextEntry. The `hintIcon()` method accepts an icon name. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint(str('[Documentation](/documentation)')->inlineMarkdown()->toHtmlString())\n    ->hintIcon('heroicon-m-question-mark-circle')\n```\n\n----------------------------------------\n\nTITLE: Customizing Wizard Action Objects (Next Button) in PHP\nDESCRIPTION: This code demonstrates how to customize the action objects (specifically, the 'next' button) within a Wizard component. It uses the `nextAction()` method to pass a function that receives the `$action` object, allowing modification of its properties such as the label.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])\n    ->nextAction(\n        fn (Action $action) => $action->label('Next step'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Stacking Columns Vertically within a Split in Filament\nDESCRIPTION: This snippet shows how to stack columns vertically within a `Split` layout using the `Stack` component. It displays the avatar and name side-by-side, with the phone number and email stacked below each other.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    Stack::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ]),\n])\n```\n\n----------------------------------------\n\nTITLE: Persisting the Current Step in Query String (Default Key) in PHP\nDESCRIPTION: This snippet configures the Wizard component to persist the current step in the URL's query string using the `persistStepInQueryString()` method.  The default key `step` will be used in the URL.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->persistStepInQueryString()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Text Entry - PHP\nDESCRIPTION: This snippet demonstrates the basic usage of the TextEntry component to display a simple text field. It imports the TextEntry class and creates an instance named 'title'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Forms in a Livewire Component (PHP)\nDESCRIPTION: This demonstrates how to use multiple Filament forms within a single Livewire component. It involves defining the forms in the `getForms()` method, creating separate methods for each form (e.g., `editPostForm()`, `createCommentForm()`), setting unique `statePath()` values for each form, and defining public properties to hold the data for each form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected function getForms(): array\n{\n    return [\n        'editPostForm',\n        'createCommentForm',\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Form;\n\npublic function editPostForm(Form $form): Form\n{\n    return $form\n        ->schema([\n            TextInput::make('title')\n                ->required(),\n            MarkdownEditor::make('content'),\n            // ...\n        ])\n        ->statePath('postData')\n        ->model($this->post);\n}\n\npublic function createCommentForm(Form $form): Form\n{\n    return $form\n        ->schema([\n            TextInput::make('name')\n                ->required(),\n            TextInput::make('email')\n                ->email()\n                ->required(),\n            MarkdownEditor::make('content')\n                ->required(),\n            // ...\n        ])\n        ->statePath('commentData')\n        ->model(Comment::class);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic ?array $postData = [];\npublic ?array $commentData = [];\n```\n\n----------------------------------------\n\nTITLE: Making DatePicker Read-Only in Filament\nDESCRIPTION: This snippet demonstrates how to make a DatePicker field read-only using the `readonly()` method. Note that this setting is only enforced on native date pickers, and the field is still focusable.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->readonly()\n```\n\n----------------------------------------\n\nTITLE: Publish Filament configuration\nDESCRIPTION: This Artisan command publishes the package configuration files. It copies the configuration files from the package to the project's `config` directory, allowing you to customize the package's settings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Save Record Test (PHP)\nDESCRIPTION: This test updates an existing record in the database using the Edit form. It fills the form with new data, calls the 'save' action, and then asserts that the record has been updated with the new data and that there are no form errors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can save', function () {\n    $post = Post::factory()->create();\n    $newData = Post::factory()->make();\n\n    livewire(PostResource\\Pages\\EditPost::class, [\n        'record' => $post->getRouteKey(),\n    ])\n        ->fillForm([\n            'author_id' => $newData->author->getKey(),\n            'content' => $newData->content,\n            'tags' => $newData->tags,\n            'title' => $newData->title,\n        ])\n        ->call('save')\n        ->assertHasNoFormErrors();\n\n    expect($post->refresh())\n        ->author_id->toBe($newData->author->getKey())\n        ->content->toBe($newData->content)\n        ->tags->toBe($newData->tags)\n        ->title->toBe($newData->title);\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Button Trigger Style - Filament\nDESCRIPTION: Demonstrates setting the trigger style to a standard button using the `button()` method. This is the default style, providing a background color and optional icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->button()\n```\n\n----------------------------------------\n\nTITLE: Accessing Eloquent Record in Filament Blade View\nDESCRIPTION: Accesses the Eloquent record within a Filament Blade view.  The `$getRecord()` function provides access to the current record being edited or created.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-custom.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getRecord()->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling File Reordering in Filament\nDESCRIPTION: This snippet demonstrates how to allow users to re-order uploaded files using the `reorderable()` method in the Filament FileUpload component. It uses the `multiple()` method to allow multiple uploads. Additionally, `appendFiles()` ensures new files are added to the end of the list.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachments')\n    ->multiple()\n    ->reorderable()\n    ->appendFiles()\n```\n\n----------------------------------------\n\nTITLE: Configure ClockWidgetServiceProvider\nDESCRIPTION: Configures the ClockWidgetServiceProvider to register the Livewire component and Alpine component for the clock widget. The FilamentAsset facade is used to register the Alpine component, making it available for use in Filament panels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Assets\\AlpineComponent;\nuse Filament\\Support\\Facades\\FilamentAsset;\nuse Livewire\\Livewire;\nuse Spatie\\LaravelPackageTools\\Package;\nuse Spatie\\LaravelPackageTools\\PackageServiceProvider;\n\nclass ClockWidgetServiceProvider extends PackageServiceProvider\n{\n    public static string $name = 'clock-widget';\n\n    public function configurePackage(Package $package): void\n    {\n        $package->name(static::$name)\n            ->hasViews()\n            ->hasTranslations();\n    }\n\n    public function packageBooted(): void\n    {\n        Livewire::component('clock-widget', ClockWidget::class);\n\n        // Asset Registration\n        FilamentAsset::register(\n            assets:[\n                 AlpineComponent::make('clock-widget', __DIR__ . '/../resources/dist/clock-widget.js'),\n            ],\n            package: 'awcodes/clock-widget'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom No Search Results Message in CheckboxList - PHP\nDESCRIPTION: This example demonstrates how to set a custom message to be displayed when no search results are found in a searchable CheckboxList using the `noSearchResultsMessage()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->searchable()\n    ->noSearchResultsMessage('No technologies found.')\n```\n\n----------------------------------------\n\nTITLE: Clearing Filament Optimization Cache\nDESCRIPTION: This command clears the caches generated by the `filament:optimize` command, which includes Filament components and Blade icons caches.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:optimize-clear\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding the Modal in Filament\nDESCRIPTION: Shows how to conditionally hide a modal based on a condition using the `modalHidden()` method.  This allows falling back to the default action when the condition is met.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nAction::make('create')\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalHidden(fn (): bool => $this->role !== 'admin')\n    ->modalContent(view('filament.pages.actions.create'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Group Trigger Style in PHP\nDESCRIPTION: This code snippet shows how to customize the button that opens the dropdown of an ActionGroup. It uses methods like `label()`, `icon()`, `size()`, `color()`, and `button()` to modify the trigger button's appearance. Requires `Filament\\Support\\Enums\\ActionSize`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\ActionSize;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->label('More actions')\n    ->icon('heroicon-m-ellipsis-vertical')\n    ->size(ActionSize::Small)\n    ->color('primary')\n    ->button()\n```\n\n----------------------------------------\n\nTITLE: Positioning Row Actions Before Columns (PHP)\nDESCRIPTION: This snippet demonstrates how to position row actions before the columns in a Filament table.  The `ActionsPosition` enum is used to specify where the actions will render. The `Table` and `ActionsPosition` dependencies need to be imported.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\ActionsPosition;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->actions([\n            // ...\n        ], position: ActionsPosition::BeforeColumns);\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Lines in Filament PHP Text Column\nDESCRIPTION: This example demonstrates how to limit the text to a specific number of lines using the `lineClamp()` method. This is useful for responsive interfaces.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->lineClamp(2)\n```\n\n----------------------------------------\n\nTITLE: Tweaking the search debounce time in CheckboxList (PHP)\nDESCRIPTION: This code shows how to change the debounce time (in milliseconds) before Filament initiates a search in a CheckboxList using the `searchDebounce()` method. The debounce time controls how long Filament waits after the user stops typing before triggering a search. The CheckboxList must be made searchable by using `searchable()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->searchable()\n    ->searchDebounce(500)\n```\n\n----------------------------------------\n\nTITLE: Ends With Validation - Filament\nDESCRIPTION: Validates that the field's value ends with one of the given values. It uses the `endsWith()` method, accepting an array of strings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->endsWith(['bot'])\n```\n\n----------------------------------------\n\nTITLE: Saving Relationships After Model Creation (PHP)\nDESCRIPTION: This snippet illustrates how to save relationship data associated with a model after the model has been created. It retrieves the created model instance after the form submission and passes the model instance to the `model()` method and then executes the `saveRelationships()` function to persist the relationships with the model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\npublic function create(): void\n{\n    $post = Post::create($this->form->getState());\n    \n    // Save the relationships from the form to the post after it is created.\n    $this->form->model($post)->saveRelationships();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure tailwind.config.js\nDESCRIPTION: This JavaScript configuration file sets up Tailwind CSS with Filament's preset, which includes the Filament color scheme and required Tailwind plugins. It defines the content paths to scan for Tailwind classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport preset from './vendor/filament/support/tailwind.config.preset'\n\nexport default {\n    presets: [preset],\n    content: [\n        './app/Filament/**/*.php',\n        './resources/views/filament/**/*.blade.php',\n        './vendor/filament/**/*.blade.php',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Eloquent Record in Filament Blade View\nDESCRIPTION: This snippet demonstrates how to access the Eloquent record associated with the infolist within the Blade view file using the `$getRecord()` function.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/08-custom.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    {{ $getRecord()->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Section Settings - PHP\nDESCRIPTION: This code snippet demonstrates how to configure global settings for Section components in Filament using the `configureUsing()` method within a service provider's `boot()` method. This example sets all Section components to have 2 columns by default.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/01-getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::configureUsing(function (Section $section): void {\n    $section\n        ->columns(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Greater Than or Equal To Validation - Filament\nDESCRIPTION: Validates that the field's value is greater than or equal to another field's value. It uses the `gte()` method, taking the name of the other field as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nField::make('newNumber')->gte('oldNumber')\n```\n\n----------------------------------------\n\nTITLE: Hiding Table Columns Based on Breakpoint in Filament\nDESCRIPTION: This snippet demonstrates how to hide a column in a Filament table based on the screen size using the `visibleFrom()` method. The 'slug' column will be visible from the 'md' (medium) breakpoint onwards.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('slug')\n    ->visibleFrom('md')\n```\n\n----------------------------------------\n\nTITLE: Customizing the Completed Icon for Wizard Steps in PHP\nDESCRIPTION: This snippet demonstrates customizing the icon displayed for a completed Wizard step using the `completedIcon()` method. It sets the completed icon for the 'Order' step to 'heroicon-m-hand-thumb-up'. This provides visual feedback to the user when a step is successfully completed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard\\Step::make('Order')\n    ->completedIcon('heroicon-m-hand-thumb-up')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Alpha Numeric Validation - Filament\nDESCRIPTION: Validates that the field contains only alphanumeric characters. It uses the `alphaNum()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->alphaNum()\n```\n\n----------------------------------------\n\nTITLE: Displaying Filters in a Modal (Filament, PHP)\nDESCRIPTION: This example shows how to render the filters in a modal window instead of the default dropdown in a Filament table. This is achieved using the `FiltersLayout::Modal` enum within the `filters()` method.  It requires the `FiltersLayout` enum from the `Filament\\Tables\\Enums` namespace.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ], layout: FiltersLayout::Modal);\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Blade\nDESCRIPTION: This snippet demonstrates how to trigger the error state of the checkbox using Blade. The `:valid` attribute is used to indicate whether the checkbox is valid or not, based on the presence of an error for the `isAdmin` property in the `$errors` object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-checkbox.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.checkbox\n    wire:model=\"isAdmin\"\n    :valid=\"! $errors->has('isAdmin')\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Creation Process\nDESCRIPTION: This snippet demonstrates how to customize the record creation process using the `using()` method. It allows you to override the default creation logic, providing the form data and the model class name as parameters.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nCreateAction::make()\n    ->using(function (array $data, string $model): Model {\n        return $model::create($data);\n    })\n```\n\n----------------------------------------\n\nTITLE: Inherit Active Locale in Relation Manager (PHP)\nDESCRIPTION: Overrides the `$activeLocale` property and adds the `Reactive` attribute to inherit the locale from the resource page. The relation manager reacts to locale changes on the parent resource page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\RelationManagers\\Concerns\\Translatable;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\nuse Livewire\\Attributes\\Reactive;\n\nclass BlogPostsRelationManager extends RelationManager\n{\n    use Translatable;\n    \n    #[Reactive]\n    public ?string $activeLocale = null;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Button Outlined\nDESCRIPTION: Shows how to create an outlined style button by using the `outlined` attribute. This gives the button a transparent background with a colored border.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button outlined>\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position - Filament\nDESCRIPTION: Demonstrates changing the icon's position to be after the label instead of before it, using the `iconPosition()` method and the `IconPosition` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\IconPosition;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->icon('heroicon-m-pencil-square')\n    ->iconPosition(IconPosition::After)\n```\n\n----------------------------------------\n\nTITLE: Filled Validation - Filament\nDESCRIPTION: Validates that the field is not empty when it is present. It uses the `filled()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->filled()\n```\n\n----------------------------------------\n\nTITLE: Passing a Unique Key to a Livewire Component (PHP)\nDESCRIPTION: This snippet demonstrates how to pass a unique `key()` to each Livewire component to avoid rendering issues when using multiple instances. It uses the `key()` method to assign a unique identifier.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Livewire;\nuse App\\Livewire\\Foo;\n\nLivewire::make(Foo::class)\n    ->key('foo-first')\n\nLivewire::make(Foo::class)\n    ->key('foo-second')\n\nLivewire::make(Foo::class)\n    ->key('foo-third')\n```\n\n----------------------------------------\n\nTITLE: Define Treatments Table Migration Schema\nDESCRIPTION: This code defines the schema for the `treatments` table. It includes an auto-incrementing `id`, a `description` field (string), a nullable `notes` field (text), a foreign key `patient_id` referencing the `patients` table with cascade on delete, a nullable `price` field (unsigned integer), and timestamps.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// create_treatments_table\nSchema::create('treatments', function (Blueprint $table) {\n    $table->id();\n    $table->string('description');\n    $table->text('notes')->nullable();\n    $table->foreignId('patient_id')->constrained('patients')->cascadeOnDelete();\n    $table->unsignedInteger('price')->nullable();\n    $table->timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Attribute in Filament ImportColumn (PHP)\nDESCRIPTION: This shows how to customize the attribute name used in validation error messages. This is done using the `validationAttribute()` method on the `ImportColumn` object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('name')\n    ->validationAttribute('full name')\n```\n\n----------------------------------------\n\nTITLE: Moving Files Instead of Copying in Filament\nDESCRIPTION: This snippet demonstrates how to move files, instead of copying, from Livewire's temporary storage to the destination directory upon form submission. This requires temporary uploads to be on the same disk as permanent files.  It utilizes the `moveFiles()` method of the Filament FileUpload component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->moveFiles()\n```\n\n----------------------------------------\n\nTITLE: Requiring a Subscription for Tenant Access\nDESCRIPTION: This snippet shows how to require an active subscription for tenants to use the application by using the `requiresTenantSubscription()` method when configuring the Filament panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->requiresTenantSubscription();\n}\n```\n\n----------------------------------------\n\nTITLE: Halting the Replication Process\nDESCRIPTION: This code demonstrates how to halt the replication process using `$action->halt()` within a lifecycle hook.  In this example, it checks if the record's team has an active subscription and if not, sends a notification and halts the replication.  The notification includes a button to subscribe. Requires the `App\\Models\\Post` model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nReplicateAction::make()\n    ->before(function (ReplicateAction $action, Post $record) {\n        if (! $record->team->subscribed()) {\n            Notification::make()\n                ->warning()\n                ->title('You don\\'t have an active subscription!')\n                ->body('Choose a plan to continue.')\n                ->persistent()\n                ->actions([\n                    Action::make('subscribe')\n                        ->button()\n                        ->url(route('subscribe'), shouldOpenInNewTab: true),\n                ])\n                ->send();\n        \n            $action->halt();\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Different Validation - Filament\nDESCRIPTION: Validates that the field's value is different from another field's value. It uses the `different()` method on a Filament field, taking the name of the other field as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nField::make('backup_email')->different('email')\n```\n\n----------------------------------------\n\nTITLE: Registering a render hook in Filament (PHP)\nDESCRIPTION: This code shows how to register a render hook for a Filament panel. Render hooks allow you to inject custom Blade content at specific points in the Filament views. In this example, it integrates wire-elements/modal.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Support\\Facades\\Blade;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->renderHook(\n            PanelsRenderHook::BODY_START,\n            fn (): string => Blade::render('@livewire(\\'livewire-ui-modal\\')'),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Vertical Alignment of Anonymous Actions - PHP\nDESCRIPTION: This snippet shows how to control the vertical alignment of independent form actions using the `verticalAlignment()` method and the `VerticalAlignment` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions;\nuse Filament\\Support\\Enums\\VerticalAlignment;\n\nActions::make([\n    // ...\n])->verticalAlignment(VerticalAlignment::End),\n```\n\n----------------------------------------\n\nTITLE: Hiding Grouping Settings - PHP\nDESCRIPTION: This code shows how to hide the grouping settings interface in a Filament table. This removes the user interface elements that allow users to modify the grouping.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n\t\t->defaultGroup('status')\n        ->groupingSettingsHidden();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Polling Interval - PHP\nDESCRIPTION: This code demonstrates how to customize the polling interval of the stats overview widget. By overriding the `$pollingInterval` property, you can define a new interval or disable polling altogether by setting it to `null`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $pollingInterval = '10s';\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $pollingInterval = null;\n```\n\n----------------------------------------\n\nTITLE: Using Section Layout Component - PHP\nDESCRIPTION: This snippet illustrates how to use the `Section` layout component to group entries under a heading and description. It includes `TextEntry` for displaying content and allows nesting of further entries.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/02-getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\nuse Filament\\Infolists\\Components\\TextEntry;\n\n[\n    TextEntry::make('title'),\n    TextEntry::make('slug'),\n    TextEntry::make('content')\n        ->columnSpan(2)\n        ->markdown(),\n    Section::make('Media')\n        ->description('Images used in the page layout.')\n        ->schema([\n            // ...\n        ]),\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Entry as Date/Time - PHP\nDESCRIPTION: This snippet shows how to format a TextEntry as a date and time using the `dateTime()` method. It assumes the `created_at` field is a valid date/time value that can be formatted.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->dateTime()\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Entry Length and Adding Tooltip - PHP\nDESCRIPTION: This snippet limits the text length and adds a tooltip that shows the full text when the content is truncated. It uses a closure to dynamically generate the tooltip content based on the component's state and character limit.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->limit(50)\n    ->tooltip(function (TextEntry $component): ?string {\n        $state = $component->getState();\n\n        if (strlen($state) <= $component->getCharacterLimit()) {\n            return null;\n        }\n\n        // Only render the tooltip if the entry contents exceeds the length limit.\n        return $state;\n    })\n```\n\n----------------------------------------\n\nTITLE: Calling Filament Action using Pest\nDESCRIPTION: This snippet demonstrates how to call a Filament action using Pest's Livewire testing plugin. It creates an invoice, mounts the `EditInvoice` Livewire component with the invoice data, calls the 'send' action, and asserts that the invoice's `isSent` property is set to true after the action is executed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callAction('send');\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Make Resource Pages Translatable (PHP)\nDESCRIPTION: Applies the `Translatable` trait and adds a `LocaleSwitcher` action to a Filament resource page. This allows users to switch between locales when viewing or editing resource records. The `getHeaderActions()` method is overridden to include the `LocaleSwitcher`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\ListRecords;\n\nclass ListBlogPosts extends ListRecords\n{\n    use ListRecords\\Concerns\\Translatable;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\LocaleSwitcher::make(),\n            // ...\n        ];\n    }\n    \n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateBlogPost extends CreateRecord\n{\n    use CreateRecord\\Concerns\\Translatable;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\LocaleSwitcher::make(),\n            // ...\n        ];\n    }\n    \n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\EditRecord;\n\nclass EditBlogPost extends EditRecord\n{\n    use EditRecord\\Concerns\\Translatable;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\LocaleSwitcher::make(),\n            // ...\n        ];\n    }\n    \n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\ViewRecord;\n\nclass ViewBlogPost extends ViewRecord\n{\n    use ViewRecord\\Concerns\\Translatable;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\LocaleSwitcher::make(),\n            // ...\n        ];\n    }\n    \n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions;\nuse Filament\\Resources\\Pages\\ManageRecords;\n\nclass ManageBlogPosts extends ListRecords\n{\n    use ManageRecords\\Concerns\\Translatable;\n    \n    protected function getHeaderActions(): array\n    {\n        return [\n            Actions\\LocaleSwitcher::make(),\n            // ...\n        ];\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending PackageServiceProvider for Filament Plugin\nDESCRIPTION: This code snippet demonstrates how to upgrade a Filament plugin service provider.  It shows how to extend the `PackageServiceProvider`, define a static `$name` property, and use the `configurePackage` method to register the plugin's name.  This is a crucial step for adapting existing plugins to the latest Filament version.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/01-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyPluginServiceProvider extends PackageServiceProvider\n{\n    public static string $name = 'my-plugin';\n\n    public function configurePackage(Package $package): void\n    {\n        $package->name(static::$name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dividers Between Actions in PHP\nDESCRIPTION: This code snippet shows how to add dividers between groups of actions by using nested `ActionGroup` objects. The `dropdown(false)` method prevents the nested group from creating a new dropdown and instead includes the actions in the parent dropdown with dividers.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make([\n    ActionGroup::make([\n        // Array of actions\n    ])->dropdown(false),\n    // Array of actions\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Link Implementation Blade\nDESCRIPTION: Demonstrates the basic usage of the Filament link component to create a simple link that redirects to a specified route. This snippet shows how to create a clickable link using the `x-filament::link` component and setting the `href` attribute to a route.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link :href=\"route('users.create')\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Making Sections Collapsed by Default - PHP\nDESCRIPTION: This snippet demonstrates how to make a section collapsed by default using the `collapsed()` method.  Requires the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Adding Export Options Form Components (PHP)\nDESCRIPTION: This example demonstrates how to add form components to the export action using the `getOptionsFormComponents()` method on your exporter class. These components allow users to customize the export behavior before exporting the data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\npublic static function getOptionsFormComponents(): array\n{\n    return [\n        TextInput::make('descriptionLimit')\n            ->label('Limit the length of the description column content')\n            ->integer(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an ID for a Section Component - PHP\nDESCRIPTION: This code snippet shows how to set an ID for a Section component in Filament. It uses the `id()` method to assign a unique identifier to the section. This ID can be used for referencing the section in JavaScript or CSS.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/01-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make()\n    ->id('main-section')\n```\n\n----------------------------------------\n\nTITLE: Configure postcss.config.js\nDESCRIPTION: This JavaScript configuration file sets up PostCSS with Tailwind CSS, PostCSS Nesting, and Autoprefixer plugins. It is crucial for processing Tailwind CSS.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    plugins: {\n        'tailwindcss/nesting': 'postcss-nesting',\n        tailwindcss: {},\n        autoprefixer: {},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Color Palette from RGB - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to generate a color palette for a FilamentPHP panel based on a single RGB color value. Filament attempts to automatically create the color palette from the RGB value provided.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$panel\n    ->colors([\n        'primary' => 'rgb(99, 102, 241)',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customizing Fieldset Grid Columns (PHP)\nDESCRIPTION: This snippet shows how to customize the number of columns in the grid within a Filament Fieldset. The columns() method is used to specify the desired number of columns for the layout of fields inside the fieldset.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/03-fieldset.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Fieldset;\n\nFieldset::make('Label')\n    ->schema([\n        // ...\n    ])\n    ->columns(3)\n```\n\n----------------------------------------\n\nTITLE: TextInput Column Span Customization (Filament)\nDESCRIPTION: This code snippet demonstrates how to make a text input field span the entire width of the modal form in Filament. The `columnSpan('full')` method is added to the TextInput component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\n\nForms\\Components\\TextInput::make('description')\n    ->required()\n    ->maxLength(255)\n    ->columnSpan('full')\n```\n\n----------------------------------------\n\nTITLE: Adding a Heading to Modal (Blade)\nDESCRIPTION: Explains how to add a heading to a Filament modal using the `heading` slot. The content within the `<x-slot name=\"heading\">` tags will be rendered as the modal's heading.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Positioning Icon Before Description - PHP\nDESCRIPTION: This example demonstrates how to position the icon before the description text using the `IconPosition` enum.  This provides an alternative layout for the statistic's descriptive elements.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\IconPosition;\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nStat::make('Unique views', '192.1k')\n    ->description('32k increase')\n    ->descriptionIcon('heroicon-m-arrow-trending-up', IconPosition::Before)\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Schema in Filament Blade View\nDESCRIPTION: Renders the child component container within a Filament Blade view.  This is used to display the form elements defined within the component's schema.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-custom.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getChildComponentContainer() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Responsive Widget Grid Configuration (PHP)\nDESCRIPTION: This example demonstrates using an array to define the number of widget grid columns based on responsive breakpoints. Uses 'md' and 'xl' Tailwind breakpoints. Requires Tailwind CSS.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getHeaderWidgetsColumns(): int | array\n{\n    return [\n        'md' => 4,\n        'xl' => 5,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an empty panel path in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure a Filament panel to be accessible without any URL prefix. Setting the path to an empty string makes the panel accessible at the root URL.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->path('');\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Chart.js Configuration Options (PHP)\nDESCRIPTION: This snippet shows how to dynamically set Chart.js configuration options by overriding the `getOptions()` method. It provides a more flexible way to configure the chart.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nprotected function getOptions(): array\n{\n    return [\n        'plugins' => [\n            'legend' => [\n                'display' => false,\n            ],\n        ],\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: ULID Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `ulid` validation rule in a Filament form. The 'identifier' field must be a valid Universally Unique Lexicographically Sortable Identifier (ULID).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nField::make('identifier')->ulid()\n```\n\n----------------------------------------\n\nTITLE: Spacing Stacked Content Vertically in Filament\nDESCRIPTION: This snippet demonstrates how to add vertical spacing between columns within a `Stack` using the `space()` method. It adds a spacing of '1' between the phone and email columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nStack::make([\n    TextColumn::make('phone')\n        ->icon('heroicon-m-phone'),\n    TextColumn::make('email')\n        ->icon('heroicon-m-envelope'),\n])->space(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Value Validation\nDESCRIPTION: This code snippet demonstrates how to set minimum and maximum value validation rules for a numeric input, using `minValue()` and `maxValue()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('number')\n    ->numeric()\n    ->minValue(1)\n    ->maxValue(100)\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Tab Labels - PHP\nDESCRIPTION: This snippet shows how to override the default label of a tab by passing a string into the `make()` method of the `Tab` object. The keys of the array are identifiers persisted in the URL's query string. Requires `Filament\\Resources\\Components\\Tab` and `Illuminate\\Database\\Eloquent\\Builder`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Components\\Tab;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function getTabs(): array\n{\n    return [\n        'all' => Tab::make('All customers'),\n        'active' => Tab::make('Active customers')\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', true)),\n        'inactive' => Tab::make('Inactive customers')\n            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', false)),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Remaining Images Count in Filament (PHP)\nDESCRIPTION: Illustrates how to display the count of remaining images when a limit is set, using the limitedRemainingText() method. This informs the user how many more images exist but are not being displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText()\n```\n\n----------------------------------------\n\nTITLE: Customizing Action Group Appearance (Blade)\nDESCRIPTION: This extends the previous example by adding attributes to customize the appearance of the action group.  It sets the label, icon, color, size, tooltip, and dropdown placement.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <x-filament-actions::group\n        :actions=\"[\n            $this->editAction,\n            $this->viewAction,\n            $this->deleteAction,\n        ]\"\n        label=\"Actions\"\n        icon=\"heroicon-m-ellipsis-vertical\"\n        color=\"primary\"\n        size=\"md\"\n        tooltip=\"More actions\"\n        dropdown-placement=\"bottom-start\"\n    />\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customize Sidebar Background Color with CSS\nDESCRIPTION: This CSS snippet customizes the background color of the Filament sidebar using the `fi-sidebar` hook class. It sets the background color to `#fafafa`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/05-style-customization.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    background-color: #fafafa;\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Ownership Relationship Name via Static Property in Filament\nDESCRIPTION: This code shows how to customize the ownership relationship name using the `$tenantOwnershipRelationshipName` static property on the resource class. The `owner` relationship is defined.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Resource;\n\nclass PostResource extends Resource\n{\n    protected static ?string $tenantOwnershipRelationshipName = 'owner';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Affix Icon Color Blade\nDESCRIPTION: Demonstrates how to set the color of affix icons using the `prefix-icon-color` and `affix-icon-color` attributes. This allows for customization of the icon appearance to match the application's design.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper\n    suffix-icon=\"heroicon-m-check-circle\"\n    suffix-icon-color=\"success\"\n>\n    <x-filament::input\n        type=\"url\"\n        wire:model=\"domain\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Making the Modal Footer Sticky (PHP)\nDESCRIPTION: This snippet shows how to make the modal footer sticky using the `stickyModalFooter()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->stickyModalFooter()\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Family (PHP)\nDESCRIPTION: This code snippet demonstrates how to change the font family of a Filament table text column using the `fontFamily()` method and `FontFamily` enum. Requires Filament Tables and Filament Support packages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Enums\\FontFamily;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->fontFamily(FontFamily::Mono)\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Array Cast for Tags - PHP\nDESCRIPTION: This snippet shows how to define an array cast for the 'tags' property in an Eloquent model. This is necessary when storing tags as JSON in the database and retrieving them for use in your application.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/14-tags-input.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    protected $casts = [\n        'tags' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks\nDESCRIPTION: This example demonstrates the usage of lifecycle hooks (`before`, `beforeReplicaSaved`, and `after`) to execute code at various points in the replication process. The `before` hook runs before replication, `beforeReplicaSaved` runs after replication but before saving, and `after` runs after the replica has been saved.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/05-replicate.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nReplicateAction::make()\n    ->before(function () {\n        // Runs before the record has been replicated.\n    })\n    ->beforeReplicaSaved(function (Model $replica): void {\n        // Runs after the record has been replicated but before it is saved to the database.\n    })\n    ->after(function (Model $replica): void {\n        // Runs after the replica has been saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Rendering Unsanitized HTML Content from a View - PHP\nDESCRIPTION: This snippet shows how to render unsanitized HTML from a blade view within a TextEntry. A view object returned from `formatStateUsing()` will not be sanitized.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Illuminate\\Contracts\\View\\View;\n\nTextEntry::make('description')\n    ->formatStateUsing(fn (string $state): View => view(\n        'filament.infolists.components.description-entry-content',\n        ['state' => $state],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Closing Picker on Date Selection in Filament\nDESCRIPTION: This snippet demonstrates how to automatically close the date picker after a date has been selected using the `closeOnDateSelection()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('date')\n    ->native(false)\n    ->closeOnDateSelection()\n```\n\n----------------------------------------\n\nTITLE: Enable Database Notifications (PHP)\nDESCRIPTION: Enables database notifications within a Filament panel's configuration. Part of the Panel Builder configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->databaseNotifications();\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Modal Configuration in Filament\nDESCRIPTION: Demonstrates using the `modal()` method to skip the check that Filament does to decide whether to render the modal, preventing database queries or other heavy operations from being executed more than once.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->modal()\n```\n\n----------------------------------------\n\nTITLE: Disabled Repeater with Relationship - PHP\nDESCRIPTION: This snippet shows how to use `disabled()` with `relationship()`. Ensure that `disabled()` is called before `relationship()` to avoid overriding the `dehydrated()` call from within `relationship()`. This is important for maintaining the desired behavior of the disabled state in the context of the relationship.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->disabled()\n    ->relationship()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling Grammarly Checks - Filament PHP\nDESCRIPTION: This snippet shows how to disable Grammarly checks within the Rich Editor component using the `disableGrammarly()` method. This is useful if you want to prevent Grammarly from analyzing the editor's content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/10-rich-editor.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->disableGrammarly()\n```\n\n----------------------------------------\n\nTITLE: Set Default Translatable Locales (PHP)\nDESCRIPTION: Configures the default locales for the Spatie Laravel Translatable Plugin within a Filament Panel. The `defaultLocales()` method sets the available languages for translation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\SpatieLaravelTranslatablePlugin;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->plugin(\n            SpatieLaravelTranslatablePlugin::make()\n                ->defaultLocales(['en', 'es']),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload Field in Filament\nDESCRIPTION: This code snippet demonstrates the most basic implementation of a file upload field in a Filament form. It creates a field named 'attachment' using the FileUpload component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Active Step in a Wizard in PHP\nDESCRIPTION: This snippet demonstrates how to set the default active step in a Filament Wizard using the `startOnStep()` method.  In this example, it sets the wizard to start on the second step (step index 2).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->startOnStep(2)\n```\n\n----------------------------------------\n\nTITLE: Preventing the User from Reordering Items\nDESCRIPTION: This snippet disables the reordering functionality within the builder using the `reorderable(false)` method, preventing users from changing the order of the items.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderable(false)\n```\n\n----------------------------------------\n\nTITLE: Injecting Table Instance into Table Action in Filament\nDESCRIPTION: This code snippet demonstrates how to inject the current table instance into a table action in Filament by defining a `$table` parameter with the `Table` type hint. This allows the action to access the table configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\nfunction (Table $table) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Colors in Filament\nDESCRIPTION: This code snippet shows how to customize the colors used for representing true and false boolean values in a Filament table column. The `trueColor()` and `falseColor()` methods allow specifying different colors for each state, using the standard color palette (`danger`, `gray`, `info`, `primary`, `success`, or `warning`).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('is_featured')\n    ->boolean()\n    ->trueColor('info')\n    ->falseColor('warning')\n```\n\n----------------------------------------\n\nTITLE: Making Sections Collapsible in Filament Infolists (PHP)\nDESCRIPTION: This code shows how to make a section collapsible in Filament infolists using the `collapsible()` method.  This allows users to hide the section's content, useful for long infolists.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n```\n\n----------------------------------------\n\nTITLE: Removing Form Actions (PHP)\nDESCRIPTION: This snippet demonstrates how to remove all actions (buttons) from the form actions section of a Filament resource page by overriding the `getFormActions` method and returning an empty array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFormActions(): array\n{\n    return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom View Entry in Filament\nDESCRIPTION: This snippet demonstrates how to render a custom Blade view for an infolist entry using the `ViewEntry` component in Filament. It assumes that the view file exists at `resources/views/filament/infolists/entries/status-switcher.blade.php`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/08-custom.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ViewEntry;\n\nViewEntry::make('status')\n    ->view('filament.infolists.entries.status-switcher')\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Widgets from Page (PHP)\nDESCRIPTION: This snippet illustrates how to pass data from a Filament page to its widgets. The `getWidgetData()` method returns an array of data, which is then available as public properties on the widget. The widget needs a public property named `$stats`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getWidgetData(): array\n{\n    return [\n        'stats' => [\n            'total' => 100,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Week Start Day with Helper Methods in Filament\nDESCRIPTION: This snippet demonstrates the use of helper methods `weekStartsOnMonday()` and `weekStartsOnSunday()` to set the first day of the week in the DateTimePicker component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->weekStartsOnMonday()\n\nDateTimePicker::make('published_at')\n    ->native(false)\n    ->weekStartsOnSunday()\n```\n\n----------------------------------------\n\nTITLE: Nesting Actions and Cancelling Parents in Filament\nDESCRIPTION: Demonstrates nesting actions within each other to open a new modal from a footer action, and using `cancelParentActions()` to cancel the parent action when the nested action is run.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    // ...\n    ->extraModalFooterActions([\n        Action::make('delete')\n            ->requiresConfirmation()\n            ->action(function () {\n                // ...\n            }),\n    ])\n```\n\nLANGUAGE: php\nCODE:\n```\nAction::make('delete')\n    ->requiresConfirmation()\n    ->action(function () {\n        // ...\n    })\n    ->cancelParentActions()\n```\n\nLANGUAGE: php\nCODE:\n```\nAction::make('first')\n    ->requiresConfirmation()\n    ->action(function () {\n        // ...\n    })\n    ->extraModalFooterActions([\n        Action::make('second')\n            ->requiresConfirmation()\n            ->action(function () {\n                // ...\n            })\n            ->extraModalFooterActions([\n                Action::make('third')\n                    ->requiresConfirmation()\n                    ->action(function () {\n                        // ...\n                    })\n                    ->extraModalFooterActions([\n                        Action::make('fourth')\n                            ->requiresConfirmation()\n                            ->action(function () {\n                                // ...\n                            })\n                            ->cancelParentActions('second'),\n                    ]),\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Render Relation Manager Test (PHP)\nDESCRIPTION: This test ensures that a relation manager component can be successfully rendered. It mounts the Livewire component for the relation manager, passing in the owner record and page class, and asserts that the component renders without errors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\CategoryResource\\Pages\\EditCategory;\nuse function Pest\\Livewire\\livewire;\n\nit('can render relation manager', function () {\n    $category = Category::factory()\n        ->has(Post::factory()->count(10))\n        ->create();\n\n    livewire(CategoryResource\\RelationManagers\\PostsRelationManager::class, [\n        'ownerRecord' => $category,\n        'pageClass' => EditCategory::class,\n    ])\n        ->assertSuccessful();\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Maximum Height in PHP\nDESCRIPTION: This code snippet shows how to control the maximum height of the dropdown content using the `maxHeight()` method.  The height is specified as a CSS length (e.g., '400px').\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make([\n    // Array of actions\n])\n    ->maxHeight('400px')\n```\n\n----------------------------------------\n\nTITLE: Configure app.css with Tailwind Layers\nDESCRIPTION: This CSS file imports Tailwind's base, components, utilities, and variants layers, which are essential for applying Tailwind styles to your application.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Badge Color - Filament PHP\nDESCRIPTION: This code snippet shows how to customize the color of a tab badge in a Filament infolist Tabs component. The `badgeColor()` method is used to set the badge color.  Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->badge(5)\n            ->badgeColor('success')\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Link Blade\nDESCRIPTION: Details how to add an icon to the Filament link component using the `icon` attribute.  The icon is sourced from Blade UI Kit's blade-icons. This snippet demonstrates how to add an icon before the text label.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link icon=\"heroicon-m-sparkles\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Add Mark as Read Action (PHP)\nDESCRIPTION: Adds a 'mark as read' action to a notification. Requires the `filament/notifications` package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button()\n            ->markAsRead(),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Persisting the Current Step in Query String (Custom Key) in PHP\nDESCRIPTION: This snippet configures the Wizard component to persist the current step in the URL's query string using a custom key `wizard-step` using the `persistStepInQueryString('wizard-step')` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    // ...\n])->persistStepInQueryString('wizard-step')\n```\n\n----------------------------------------\n\nTITLE: Setting Option Descriptions in CheckboxList - PHP\nDESCRIPTION: This example demonstrates how to add descriptions to each option in the CheckboxList using the `descriptions()` method. The descriptions can be plain text, `HtmlString`, or `Htmlable` instances, allowing for HTML and markdown rendering.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Illuminate\\Support\\HtmlString;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n    ->descriptions([\n        'tailwind' => 'A utility-first CSS framework for rapidly building modern websites without ever leaving your HTML.',\n        'alpine' => new HtmlString('A rugged, minimal tool for composing behavior <strong>directly in your markup</strong>.'),\n        'laravel' => str('A **web application** framework with expressive, elegant syntax.')->inlineMarkdown()->toHtmlString(),\n        'livewire' => 'A full-stack framework for Laravel building dynamic interfaces simple, without leaving the comfort of Laravel.',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Image Editor Mode\nDESCRIPTION: This snippet demonstrates how to set the mode of the image editor using the `imageEditorMode()` method.  The mode accepts either 1, 2, or 3, which are explained in the Cropper.js documentation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->imageEditor()\n    ->imageEditorMode(2)\n```\n\n----------------------------------------\n\nTITLE: Closing Notification with Custom ID (Alpine.js HTML)\nDESCRIPTION: This HTML code shows how to dispatch a 'close-notification' browser event from an Alpine.js component using a custom ID.  This event is used to close a specific notification, identified by the custom ID.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<button x-on:click=\"$dispatch('close-notification', { id: 'greeting' })\" type=\"button\">\n    Close Notification\n</button>\n```\n\n----------------------------------------\n\nTITLE: Generating Exporter Columns\nDESCRIPTION: This command uses the `--generate` flag to automatically generate the columns for the exporter based on the model's database columns. This can save time when setting up the exporter, as it infers the columns to export from the database schema.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-exporter Product --generate\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Chart.js Plugins (JavaScript)\nDESCRIPTION: This JavaScript code shows an example of how to include the custom JavaScript file containing the Chart.js plugin in the Vite configuration. This ensures that the file is built with the rest of the application's assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: [\n                'resources/css/app.css',\n                'resources/js/app.js',\n                'resources/css/filament/admin/theme.css',\n                'resources/js/filament-chart-js-plugins.js', // Include the new file in the `input` array so it is built\n            ],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Image Attributes in Filament (PHP)\nDESCRIPTION: Illustrates how to customize the extra HTML attributes of the image using the extraImgAttributes() method, allowing for accessibility improvements or performance optimizations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('logo')\n    ->extraImgAttributes([\n        'alt' => 'Logo',\n        'loading' => 'lazy',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Define Owners Table Migration Schema\nDESCRIPTION: This code defines the schema for the `owners` table using Laravel's Schema builder. It includes columns for `id`, `email`, `name`, `phone`, and timestamps. The `email`, `name`, and `phone` fields are strings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// create_owners_table\nSchema::create('owners', function (Blueprint $table) {\n    $table->id();\n    $table->string('email');\n    $table->string('name');\n    $table->string('phone');\n    $table->timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic SpatieTagsInput Usage\nDESCRIPTION: Demonstrates the basic usage of the `SpatieTagsInput` form component within a Filament form.  It requires setting up the model for attaching tags according to Spatie's documentation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieTagsInput;\n\nSpatieTagsInput::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Rendering Embedded Components in Blade (Blade)\nDESCRIPTION: This Blade file renders the components passed to the `View` component using the `<x-filament-tables::columns.layout>` Blade component. It passes the `$getComponents()`, `$getRecord()`, and `$recordKey` variables to the layout component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<div class=\"px-4 py-3 bg-gray-100 rounded-lg\">\n    <x-filament-tables::columns.layout\n        :components=\"$getComponents()\"\n        :record=\"$getRecord()\"\n        :record-key=\"$recordKey\"\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Background Color - JavaScript\nDESCRIPTION: This snippet shows how to set the background color of a notification using JavaScript with Filament. This enhances the notification's visual distinction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .color('success')\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Import Actions with Unique Names\nDESCRIPTION: This snippet demonstrates how to use multiple `ImportAction` instances within the same component, ensuring each has a unique name to avoid conflicts.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nImportAction::make('importProducts')\n    ->importer(ProductImporter::class)\n\nImportAction::make('importBrands')\n    ->importer(BrandImporter::class)\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Indicator Label in Filament\nDESCRIPTION: This code shows how to customize the indicator label for a filter.  The `label()` method sets the filter label, and the `indicator()` method sets the text displayed in the indicator when the filter is active.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/05-custom.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_admin')\n    ->label('Administrators only?')\n    ->indicator('Administrators')\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position (PHP)\nDESCRIPTION: This code snippet demonstrates how to set the position of the icon in a Filament table text column using the `iconPosition()` method. The position can be before or after the text. Requires Filament Tables and Filament Support packages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Enums\\IconPosition;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->icon('heroicon-m-envelope')\n    ->iconPosition(IconPosition::After) // `IconPosition::Before` or `IconPosition::After`\n```\n\n----------------------------------------\n\nTITLE: Customizing Route Path in Filament (PHP)\nDESCRIPTION: This snippet shows how to customize the URL path to an extra dashboard by overriding the `$routePath` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $routePath = 'finance';\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Family in a Text Entry (Filament, PHP)\nDESCRIPTION: This code shows how to customize the font family of a Filament Infolists text entry using the `fontFamily()` method. The API key field is set to a monospace font, making use of the FontFamily enum. Requires Filament and the FontFamily enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontFamily;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->fontFamily(FontFamily::Mono)\n```\n\n----------------------------------------\n\nTITLE: Widget Class with Public Property (PHP)\nDESCRIPTION: The widget class must define a public property for each property passed to it from the page, using the same name. Requires the Filament\\Widgets\\Widget parent class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Widgets\\Widget;\n\nclass StatsOverviewWidget extends Widget\n{\n    public string $status;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Icons in IconColumn\nDESCRIPTION: This snippet counts the occurrence of different icons within an IconColumn using the `icons()` method of the Count summarizer, providing a visual representation of the distribution of each icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Count;\nuse Illuminate\\Database\\Query\\Builder;\n\nIconColumn::make('is_published')\n    ->boolean()\n    ->summarize(Count::make()->icons()),\n```\n\n----------------------------------------\n\nTITLE: Defining Infolist Method (PHP)\nDESCRIPTION: Defines a method within the Livewire component that accepts an Infolist object, modifies it, and returns it. This method is responsible for configuring the infolist's schema and data source.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Infolist;\n\npublic function productInfolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->record($this->product)\n        ->schema([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Filament panel with Artisan\nDESCRIPTION: This command creates a new Filament panel with the specified name. It generates a configuration file in the `app/Providers/Filament` directory. The panel can be accessed at `/panel-name` by default.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:filament-panel app\n```\n\n----------------------------------------\n\nTITLE: Update package.json\nDESCRIPTION: This code snippet demonstrates the updated `package.json` file, including necessary devDependencies like `cssnano`, `postcss`, `postcss-cli`, and `postcss-nesting` for building the plugin's stylesheet.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"private\": true,\n    \"scripts\": {\n        \"build\": \"postcss resources/css/index.css -o resources/dist/headings.css\"\n    },\n    \"devDependencies\": {\n        \"cssnano\": \"^6.0.1\",\n        \"postcss\": \"^8.4.27\",\n        \"postcss-cli\": \"^10.1.0\",\n        \"postcss-nesting\": \"^13.0.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Options Inline with Label in Filament (PHP)\nDESCRIPTION: This snippet shows how to display the radio button options inline with the label using the `inline()` method in Filament. This configuration allows for a more compact layout.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRadio::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge to a Link Blade\nDESCRIPTION: Illustrates how to add a badge to the Filament link component using the `badge` slot. This is useful for displaying counts or status indicators. The content of the badge is placed within the `x-slot`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link>\n    Mark notifications as read\n\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Setting Entry Label\nDESCRIPTION: Customizes the label of a TextEntry. The `label()` method sets a custom label for the entry, overriding the default label generated from the entry name.  The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->label('Post title')\n```\n\n----------------------------------------\n\nTITLE: Showing Separate Remaining Text in Filament (PHP)\nDESCRIPTION: Demonstrates displaying the count of remaining images as a separate text element after the images, instead of stacked on top, using the `isSeparate: true` parameter of the limitedRemainingText() method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText(isSeparate: true)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Data for View Page Test (PHP)\nDESCRIPTION: This test verifies that the View form is pre-filled with the correct data from an existing database record. It uses `assertFormSet()` to ensure that the form's fields match the record's attributes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can retrieve data', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostResource\\Pages\\ViewPost::class, [\n        'record' => $post->getRouteKey(),\n    ])\n        ->assertFormSet([\n            'author_id' => $post->author->getKey(),\n            'content' => $post->content,\n            'tags' => $post->tags,\n            'title' => $post->title,\n        ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Disk Globally (PHP)\nDESCRIPTION: This demonstrates setting the file disk for all export actions within a service provider's `boot()` method using `ExportAction::configureUsing()`.  This configures all ExportActions to use the specified disk.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ExportAction;\n\nExportAction::configureUsing(fn (ExportAction $action) => $action->fileDisk('s3'));\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Text\nDESCRIPTION: Adds helper text below a TextEntry.  The `helperText()` method accepts a string, `HtmlString`, or `Htmlable` instance. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('name')\n    ->helperText('Your full name here, including any middle names.')\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Filters (PHP)\nDESCRIPTION: This code defines the available filters for the chart using the `getFilters()` method. It returns an array of filter values and their corresponding labels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function getFilters(): ?array\n{\n    return [\n        'today' => 'Today',\n        'week' => 'Last week',\n        'month' => 'Last month',\n        'year' => 'This year',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preventing Adding Items to a Repeater - PHP\nDESCRIPTION: This code shows how to prevent users from adding new items to the repeater by using the `addable(false)` method. This can be useful in situations where the number of items in the repeater should be fixed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->addable(false)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Stacking Columns with a Breakpoint in Filament\nDESCRIPTION: This snippet shows how to conditionally stack columns on smaller screens using the `from()` method in the `Split` layout.  Columns will appear side-by-side starting from the 'md' breakpoint.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    TextColumn::make('email'),\n])->from('md')\n```\n\n----------------------------------------\n\nTITLE: Delete Action Hidden Test (PHP)\nDESCRIPTION: This test verifies that the `DeleteAction` is hidden from a user who doesn't have the necessary permissions.  It uses `assertActionHidden()` to assert that the action is not visible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\DeleteAction;\nuse function Pest\\Livewire\\livewire;\n\nit('can not delete', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostResource\\Pages\\EditPost::class, [\n        'record' => $post->getRouteKey(),\n    ])\n        ->assertActionHidden(DeleteAction::class);\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Dropdown Offset in PHP\nDESCRIPTION: This code snippet shows how to control the offset of the dropdown using the `dropdownOffset()` method. The offset is specified as an integer representing the offset in pixels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nActionGroup::make([\n    // Array of actions\n])\n    ->dropdownOffset(16)\n```\n\n----------------------------------------\n\nTITLE: Create widget view\nDESCRIPTION: Creates the Blade view for the clock widget.  It uses Filament's blade components for the widget structure and includes the Alpine component to display the clock.  The x-load attribute is used to asynchronously load the Alpine component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-widgets::widget>\n    <x-filament::section>\n        <x-slot name=\"heading\">\n            {{ __('clock-widget::clock-widget.title') }}\n        </x-slot>\n\n        <div\n            x-load\n            x-load-src=\"{{ \\Filament\\Support\\Facades\\FilamentAsset::getAlpineComponentSrc('clock-widget', 'awcodes/clock-widget') }}\"\n            x-data=\"clockWidget()\"\n            class=\"text-center\"\n        >\n            <p>{{ __('clock-widget::clock-widget.description') }}</p>\n            <p class=\"text-xl\" x-text=\"time\"></p>\n        </div>\n    </x-filament::section>\n</x-filament-widgets::widget>\n```\n\n----------------------------------------\n\nTITLE: Enabling Striped Table Rows - PHP\nDESCRIPTION: This snippet shows how to enable striped table rows using the `striped()` method in the `table()` function. This enhances readability by alternating the background color of rows. It requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->striped();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Grouping Label - PHP\nDESCRIPTION: This code shows how to customize the label of a grouping in a Filament table. It uses the `Group` object's `label()` method to set the label for the 'author.name' grouping to 'Author name'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('author.name')\n                ->label('Author name'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Infolist Layout Class (PHP)\nDESCRIPTION: Illustrates the structure of a custom layout component class for Filament Infolists. This class extends the `Component` class and defines the path to the associated Blade view file. The `make()` method creates a new instance of the component using the application container.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/07-custom.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Component;\n\nclass Box extends Component\n{\n    protected string $view = 'filament.infolists.components.box';\n\n    public static function make(): static\n    {\n        return app(static::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding multiple hint actions to a TextEntry in Filament\nDESCRIPTION: This snippet shows how to add multiple hint actions to a Filament TextEntry. It defines empty actions which are then passed as an array to the `hintActions()` method. Filament renders all the registered hint actions in order.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('cost')\n    ->prefix('€')\n    ->hintActions([\n        Action::make('...'),\n        Action::make('...'),\n        Action::make('...'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Basic Filament Dropdown Component Usage in Blade\nDESCRIPTION: This code snippet demonstrates the basic structure of a Filament dropdown component in a Blade template. It includes a trigger button and a list of dropdown items that trigger Livewire actions when clicked.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown>\n    <x-slot name=\"trigger\">\n        <x-filament::button>\n            More actions\n        </x-filament::button>\n    </x-slot>\n    \n    <x-filament::dropdown.list>\n        <x-filament::dropdown.list.item wire:click=\"openViewModal\">\n            View\n        </x-filament::dropdown.list.item>\n        \n        <x-filament::dropdown.list.item wire:click=\"openEditModal\">\n            Edit\n        </x-filament::dropdown.list.item>\n        \n        <x-filament::dropdown.list.item wire:click=\"openDeleteModal\">\n            Delete\n        </x-filament::dropdown.list.item>\n    </x-filament::dropdown.list>\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Label with Pest\nDESCRIPTION: This snippet shows how to assert that an infolist action has the correct label. It verifies that the 'send' action has the label 'Email Invoice' and does not have the label 'Send'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('send action has correct label', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionHasLabel('customer', 'send', 'Email Invoice')\n        ->assertInfolistActionDoesNotHaveLabel('customer', 'send', 'Send');\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Label - PHP\nDESCRIPTION: This snippet demonstrates how to customize the label of the value field using the `valueLabel()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->valueLabel('Property value')\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Text Entry (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to add an icon to a Filament Infolists text entry using the `icon()` method. The email field is configured to display a mail envelope icon. It requires the Filament Infolists package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('email')\n    ->icon('heroicon-m-envelope')\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Section Header - PHP\nDESCRIPTION: This snippet demonstrates how to add an icon to a section's header using the `icon()` method. The icon is specified using a Blade UI Kit icon name. Requires Filament Forms and Blade UI Kit.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->icon('heroicon-m-shopping-bag')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Setting Affix Icon Color\nDESCRIPTION: This snippet shows how to customize the color of the prefix and suffix icons using `prefixIconColor()` and `suffixIconColor()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('domain')\n    ->url()\n    ->suffixIcon('heroicon-m-check-circle')\n    ->suffixIconColor('success')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Livewire Widget in Blade\nDESCRIPTION: This snippet shows how to render a Livewire component (in this case, a Filament widget) inside a Blade view using the `@livewire` directive.  The class name of the Livewire component must be fully qualified. The widget will be rendered within the specified HTML container.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/05-adding-a-widget-to-a-blade-view.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    @livewire(\\App\\Livewire\\Dashboard\\PostsChart::class)\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Heading (Method) (PHP)\nDESCRIPTION: Shows how to customize the page heading using the `getHeading()` method, allowing for dynamic or localized headings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getHeading(): string\n{\n    return __('Custom Page Heading');\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Fluent Plugin Instantiation (PHP)\nDESCRIPTION: Shows the updated way of adding a plugin to a Filament Panel utilizing the `make()` method. Requires the `BlogPlugin` class with the `make()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse DanHarrin\\FilamentBlog\\BlogPlugin;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->plugin(BlogPlugin::make());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Attributes to Filter Tabs - PHP\nDESCRIPTION: Shows how to add custom HTML attributes to filter tabs using the `extraAttributes()` method. This can be used for adding data attributes for testing or other purposes. Requires `Filament\\Resources\\Components\\Tab`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Components\\Tab;\n\nTab::make()\n    ->extraAttributes(['data-cy' => 'statement-confirmed-tab'])\n```\n\n----------------------------------------\n\nTITLE: Install Chart.js plugin via NPM (Bash)\nDESCRIPTION: This command shows how to install a Chart.js plugin using NPM. It installs `chartjs-plugin-datalabels` as a dev dependency.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install chartjs-plugin-datalabels --save-dev\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks\nDESCRIPTION: This snippet illustrates the available lifecycle hooks that can be used to execute code at various points within the action's lifecycle, such as before or after form filling, validation, or saving.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->beforeFormFilled(function () {\n        // Runs before the form fields are populated with their default values.\n    })\n    ->afterFormFilled(function () {\n        // Runs after the form fields are populated with their default values.\n    })\n    ->beforeFormValidated(function () {\n        // Runs before the form fields are validated when the form is submitted.\n    })\n    ->afterFormValidated(function () {\n        // Runs after the form fields are validated when the form is submitted.\n    })\n    ->before(function () {\n        // Runs before the form fields are saved to the database.\n    })\n    ->after(function () {\n        // Runs after the form fields are saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Configure vite.config.js for Livewire Refresh\nDESCRIPTION: This JavaScript configuration file updates Vite to automatically refresh the page when Livewire components are updated. It uses the `laravel-vite-plugin` and specifies paths to watch for changes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport laravel, { refreshPaths } from 'laravel-vite-plugin'\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: [\n                ...refreshPaths,\n                'app/Livewire/**',\n            ],\n        }),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing HasIcon Interface for Enum Icons in Filament\nDESCRIPTION: This code snippet demonstrates how to implement the `HasIcon` interface in a PHP enum to associate icons with enum values, allowing for icon display alongside labels in Filament UI components. The enum defines a `getIcon()` method that returns the name of a Heroicon based on the enum case.  These icons are useful for providing visual cues in Filament tables and infolists.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/07-enums.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasIcon;\n\nenum Status: string implements HasIcon\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getIcon(): ?string\n    {\n        return match ($this) {\n            self::Draft => 'heroicon-m-pencil',\n            self::Reviewing => 'heroicon-m-eye',\n            self::Published => 'heroicon-m-check',\n            self::Rejected => 'heroicon-m-x-mark',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Sections Collapsible - PHP\nDESCRIPTION: This snippet demonstrates how to make a section collapsible using the `collapsible()` method. This allows users to hide the section's content, which is useful for long forms. Requires the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsible()\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Importer Class\nDESCRIPTION: This snippet shows how to use the `make:filament-importer` Artisan command to generate a new importer class for a specific model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:filament-importer Product\n```\n\n----------------------------------------\n\nTITLE: Filament Upgrade Hook in Composer (JSON)\nDESCRIPTION: This JSON snippet shows how to add a `post-autoload-dump` hook in `composer.json` to automatically run the `filament:upgrade` command after composer updates. This ensures Filament is upgraded whenever dependencies are updated.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post-autoload-dump\": [\n    \"@php artisan filament:upgrade\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Heading to a Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to add a heading to a Filament table using the `$table->heading()` method.  This adds a title above the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->heading('Clients')\n        ->columns([\n            // ...\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Basic Image Entry in Filament Infolist (PHP)\nDESCRIPTION: Demonstrates creating a simple ImageEntry component to display an image in a Filament infolist.  The 'header_image' field should contain the image path relative to the storage disk's root directory or an absolute URL.  The default disk is 'public'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('header_image')\n```\n\n----------------------------------------\n\nTITLE: Disable Native Datetime Picker (PHP)\nDESCRIPTION: This code snippet shows how to disable the native date-time picker and revert to the old date picker using the `native(false)` method in Filament forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/15-upgrade-guide.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n```\n\n----------------------------------------\n\nTITLE: Custom Edit Page Blade View Example\nDESCRIPTION: This is a basic example of a custom Blade view that can be used to render the Edit page.  It includes a Filament form and relation managers.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/04-editing-records.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-panels::page>\n    <x-filament-panels::form wire:submit=\"save\">\n        {{ $this->form }}\n\n        <x-filament-panels::form.actions\n            :actions=\"$this->getCachedFormActions()\"\n            :full-width=\"$this->hasFullWidthFormActions()\"\n        />\n    </x-filament-panels::form>\n\n    @if (count($relationManagers = $this->getRelationManagers()))\n        <x-filament-panels::resources.relation-managers\n            :active-manager=\"$this->activeRelationManager\"\n            :managers=\"$relationManagers\"\n            :owner-record=\"$record\"\n            :page-class=\"static::class\"\n        />\n    @endif\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Publishing Filament Sub-package Translations\nDESCRIPTION: These commands publish the language files for various Filament sub-packages (actions, forms, infolists, notifications, tables), enabling translation of their interfaces.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-actions-translations\n\nphp artisan vendor:publish --tag=filament-forms-translations\n\nphp artisan vendor:publish --tag=filament-infolists-translations\n\nphp artisan vendor:publish --tag=filament-notifications-translations\n\nphp artisan vendor:publish --tag=filament-tables-translations\n\nphp artisan vendor:publish --tag=filament-translations\n```\n\n----------------------------------------\n\nTITLE: Customizing Copied Text with Record (PHP)\nDESCRIPTION: This code snippet demonstrates how to access the entire table row ($record) within the `copyableState()` method for customized copied text in a Filament table text column. Requires Filament Tables package and an Eloquent Model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('url')\n    ->copyable()\n    ->copyableState(fn (Post $record): string => \"URL: {$record->url}\")\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Text Column (PHP)\nDESCRIPTION: This code snippet demonstrates how to add an icon to a Filament table text column using the `icon()` method. The icon is specified using a Heroicon name. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->icon('heroicon-m-envelope')\n```\n\n----------------------------------------\n\nTITLE: Initializing Toggle Buttons with Options in Filament\nDESCRIPTION: This code snippet demonstrates how to create a basic ToggleButtons component with predefined options for 'draft', 'scheduled', and 'published' statuses. The `options()` method is used to define the available choices.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Making Header Sticky (Blade)\nDESCRIPTION: Explains how to make the modal header sticky using the `sticky-header` attribute. This keeps the header visible even when scrolling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal sticky-header>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Adding View Pages to Resource Sub-navigation (Filament)\nDESCRIPTION: This code shows how to add a View page to the resource sub-navigation using the `getRecordSubNavigation()` method.  This enables users to navigate between different views using a tab-like interface.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\CustomerResource\\Pages;\nuse Filament\\Resources\\Pages\\Page;\n\npublic static function getRecordSubNavigation(Page $page): array\n{\n    return $page->generateNavigationItems([\n        // ...\n        Pages\\ViewCustomerContact::class,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Skippable Steps in Wizard\nDESCRIPTION: This snippet shows how to allow free navigation in the creation wizard, making all steps skippable using the `skippableSteps()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/01-create.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->steps([\n        // ...\n    ])\n    ->skippableSteps()\n```\n\n----------------------------------------\n\nTITLE: Using the filament icon Blade component with SVG element\nDESCRIPTION: This code demonstrates the usage of the `<x-filament::icon>` Blade component with an SVG element in the component's slot. This component allows you to pass in an icon alias, and embed a raw SVG instead of referencing an icon name. The SVG element replaces the default icon for the given alias.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/03-icons.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon\n    alias=\"panels::topbar.global-search.field\"\n    wire:target=\"search\"\n    class=\"h-5 w-5 text-gray-500 dark:text-gray-400\"\n>\n    <svg>\n        <!-- ... -->\n    </svg>\n</x-filament::icon>\n```\n\n----------------------------------------\n\nTITLE: Stacking Images in Filament (PHP)\nDESCRIPTION: Shows how to display multiple images as a stack of overlapping images using the stacked() method, in conjunction with height() and circular() for styling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n```\n\n----------------------------------------\n\nTITLE: Collapsing All Items by Default\nDESCRIPTION: This snippet configures the builder to have all items collapsed by default when the form is loaded using the `collapsed()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Setting Affix Icon Color - Filament PHP\nDESCRIPTION: This example demonstrates how to set a different color for the affix icon using the `prefixIconColor()` and `suffixIconColor()` methods. This allows for visual customization and highlighting the icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('domain')\n    ->suffixIcon('heroicon-m-check-circle')\n    ->suffixIconColor('success')\n```\n\n----------------------------------------\n\nTITLE: Configure PostCSS\nDESCRIPTION: This JavaScript code configures PostCSS to use Tailwind CSS, PostCSS Nesting and Autoprefixer as plugins. PostCSS Nesting allows you to use nested CSS rules, Tailwind CSS provides utility classes for styling, and Autoprefixer automatically adds vendor prefixes to CSS rules.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    plugins: {\n        'tailwindcss/nesting': 'postcss-nesting',\n        tailwindcss: {},\n        autoprefixer: {},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Dashboard Title in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the title of a Filament dashboard by overriding the `$title` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $title = 'Finance dashboard';\n```\n\n----------------------------------------\n\nTITLE: Overriding File Disk in Exporter (PHP)\nDESCRIPTION: This code snippet demonstrates how to override the `getFileDisk()` method within an exporter class to specify the storage disk for all actions using that exporter.  This allows the exporter itself to define the disk to use.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\npublic function getFileDisk(): string\n{\n    return 's3';\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Form Schema Automatically\nDESCRIPTION: Generates a Filament form schema automatically based on the model's database columns. The `--generate` flag tells Filament to infer the form fields from the database structure. This simplifies form creation by automatically adding fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire-form Products/CreateProduct --generate\n```\n\n----------------------------------------\n\nTITLE: Using HasDescription Enum with Form Fields in Filament\nDESCRIPTION: This snippet shows how to use the `HasDescription` interface implemented by the `Status` enum to generate descriptions for options in Filament form fields like `Radio` and `CheckboxList`. The `options()` method of these components will automatically use the enum's descriptions to provide context for each option.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/07-enums.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options(Status::class)\n\nCheckboxList::make('status')\n    ->options(Status::class)\n```\n\n----------------------------------------\n\nTITLE: Customizing Stacked Overlap in Filament (PHP)\nDESCRIPTION: Demonstrates how to customize the amount of overlap between stacked images using the overlap() method. The overlap can be a value from 0 to 8.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n    ->overlap(2)\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Icon using Pest\nDESCRIPTION: This snippet demonstrates how to assert that a Filament action's button is showing the correct icon using `assertActionHasIcon()` and `assertActionDoesNotHaveIcon()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'send' action is enabled, has the 'envelope-open' icon, and does not have the 'envelope' icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('when enabled the send button has correct icon', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionEnabled('send')\n        ->assertActionHasIcon('send', 'envelope-open')\n        ->assertActionDoesNotHaveIcon('send', 'envelope');\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Extreme Links (Blade)\nDESCRIPTION: This Blade snippet demonstrates how to display links to the first and last pages of the pagination by using the `extreme-links` attribute. This attribute adds navigation buttons to jump to the beginning or end of the results.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-pagination.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::pagination\n    :paginator=\"$users\"\n    extreme-links\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Deleting Rows - PHP\nDESCRIPTION: This snippet demonstrates how to prevent users from deleting rows in the KeyValue field using the `deletable(false)` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->deletable(false)\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Halted with Pest\nDESCRIPTION: This snippet illustrates how to assert that an infolist action has been halted. It calls the 'send' action, and asserts that the action has been halted due to the invoice missing an email address.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('stops sending if invoice has no email address', function () {\n    $invoice = Invoice::factory(['email' => null])->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callInfolistAction('customer', 'send')\n        ->assertInfolistActionHalted('customer', 'send');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic User Relationship in Filament Imports (PHP)\nDESCRIPTION: This code illustrates how to replace the standard `user_id` column with a polymorphic `user` relationship in the `imports` table. This allows associating imports with multiple user models. It shows the schema definition and the usage of the `Import::polymorphicUserRelationship()` method to configure the relationship.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$table->morphs('user');\n```\n\n----------------------------------------\n\nTITLE: Opening Entry URLs\nDESCRIPTION: Configures a TextEntry to open a URL when clicked.  The `url()` method accepts a callback that receives the `$record` and returns the URL.  The example shows generating a route to edit a 'post'.  The example depends on the `Filament\\Infolists\\Components\\TextEntry` class and assumes a `Post` model is available.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->url(fn (Post $record): string => route('posts.edit', ['post' => $record]))\n```\n\n----------------------------------------\n\nTITLE: Responsive Section with Text Input Column Span in Filament\nDESCRIPTION: This snippet demonstrates how to create a responsive form section using Filament, defining the number of columns for different screen sizes and setting the column span of a text input. The Section component allows for defining a grid layout with responsive column configurations. The TextInput component utilizes columnSpan to occupy a specific number of columns within the grid at different breakpoints.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/02-grid.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\TextInput;\n\nSection::make()\n    ->columns([\n        'sm' => 3,\n        'xl' => 6,\n        '2xl' => 8,\n    ])\n    ->schema([\n        TextInput::make('name')\n            ->columnSpan([\n                'sm' => 2,\n                'xl' => 3,\n                '2xl' => 4,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Install Filament with Scaffolding and Notifications (Bash)\nDESCRIPTION: This command is used in new Laravel projects to install Livewire, Alpine.js, and Tailwind CSS along with Filament Notifications. It scaffolds the necessary files and configurations for Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --scaffold --notifications\n\nnpm install\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Asserting Action URL using Pest\nDESCRIPTION: This snippet demonstrates how to assert that a Filament action has the correct URL using `assertActionHasUrl()`, `assertActionDoesNotHaveUrl()`, `assertActionShouldOpenUrlInNewTab()`, and `assertActionShouldNotOpenUrlInNewTab()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'filament' action has the correct URL, does not have another URL, should open in a new tab, and the 'github' action should not open in a new tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('links to the correct Filament sites', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHasUrl('filament', 'https://filamentphp.com/')\n        ->assertActionDoesNotHaveUrl('filament', 'https://github.com/filamentphp/filament')\n        ->assertActionShouldOpenUrlInNewTab('filament')\n        ->assertActionShouldNotOpenUrlInNewTab('github');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Section layout component\nDESCRIPTION: This code snippet demonstrates how to add a `Section` layout component to a form. Sections can group fields together under a heading and description, and can also be made collapsible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\TextInput;\n\n[\n    TextInput::make('title'),\n    TextInput::make('slug'),\n    RichEditor::make('content')\n        ->columnSpan(2),\n    Section::make('Publishing')\n        ->description('Settings for publishing this post.')\n        ->schema([\n            // ...\n        ]),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Empty State Icon in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the icon of the empty state in a Filament table using the `emptyStateIcon()` method. It takes a string as input, representing the icon name from Blade UI Kit. The code requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/09-empty-state.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateIcon('heroicon-o-bookmark');\n}\n```\n\n----------------------------------------\n\nTITLE: Action Execution with Forms (v2) - PHP\nDESCRIPTION: This snippet illustrates how action execution with forms worked in Filament v2, where passing a string to the `action()` function would trigger a method on the class when the modal was submitted.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/10-upgrade-guide.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nAction::make('import_data')\n    ->action('importData')\n    ->form([\n        FileUpload::make('file'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Errors in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action has validation errors using Pest and Livewire. It creates an invoice, calls the 'send' action on the 'customer_id' component with invalid email data, and asserts that the 'email' field has an 'email' validation error.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can validate invoice recipient email', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callFormComponentAction('customer_id', 'send', data: [\n            'email' => Str::random(),\n        ])\n        ->assertHasFormComponentActionErrors(['email' => ['email']]);\n});\n```\n\n----------------------------------------\n\nTITLE: Aligning Section Footer Actions - PHP\nDESCRIPTION: This snippet demonstrates how to customize the alignment of footer actions using the `footerActionsAlignment()` method and the `Alignment` enum. This controls the horizontal positioning of the actions within the footer.  Depends on Filament Forms, Actions, and Support packages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Support\\Enums\\Alignment;\n\nSection::make('Rate limiting')\n    ->schema([\n        // ...\n    ])\n    ->footerActions([\n        Action::make('test')\n            ->action(function () {\n                // ...\n            }),\n    ])\n    ->footerActionsAlignment(Alignment::End)\n```\n\n----------------------------------------\n\nTITLE: Changing the Color of Filter Tab Badges - PHP\nDESCRIPTION: Shows how to change the color of a badge using the `badgeColor()` method. This allows customization of the badge appearance to indicate status or importance. Requires `Filament\\Resources\\Components\\Tab`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Components\\Tab;\n\nTab::make()\n    ->badge(Customer::query()->where('active', true)->count())\n    ->badgeColor('success')\n```\n\n----------------------------------------\n\nTITLE: Adding a Hint Next to the Label in Filament Form\nDESCRIPTION: This code snippet shows how to add a hint next to the label of a Filament form field using the `hint()` method. This is useful for displaying additional information or a link related to the field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('password')\n    ->hint('Forgotten your password? Bad luck.')\n```\n\n----------------------------------------\n\nTITLE: Install Filament Spatie Settings Plugin\nDESCRIPTION: Installs the Filament Spatie Laravel Settings Plugin using Composer.  This command requires Composer to be installed on the system.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-settings-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Configure Trigger View (PHP)\nDESCRIPTION: Configures the trigger view for database notifications within the Filament application's service provider.  This view is the button that will open the notification modal.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Livewire\\DatabaseNotifications;\n\nDatabaseNotifications::trigger('filament.notifications.database-notifications-trigger');\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Pagination Option in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates setting the default pagination page option in a Filament table using the `defaultPaginationPageOption()` method. It allows you to specify the initial number of records displayed per page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->defaultPaginationPageOption(25);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Initialization (PHP)\nDESCRIPTION: Creates a simple checkbox component using the `Checkbox` class. The `make()` method is used to specify the name of the model attribute that the checkbox represents.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/04-checkbox.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')\n```\n\n----------------------------------------\n\nTITLE: Enabling SPA mode in Filament (PHP)\nDESCRIPTION: This code enables Single Page Application (SPA) mode for a Filament panel, utilizing Livewire's `wire:navigate` feature to improve navigation speed and user experience.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->spa();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color in Filament\nDESCRIPTION: This code snippet illustrates how to customize the color of icons in a Filament table column. It uses a closure to set the icon color based on the column's value. Available colors are `danger`, `gray`, `info`, `primary`, `success`, and `warning`. The `$record` variable can be used to access the underlying Eloquent record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('status')\n    ->color(fn (string $state): string => match ($state) {\n        'draft' => 'info',\n        'reviewing' => 'warning',\n        'published' => 'success',\n        default => 'gray',\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Access to Failure CSV File - Filament\nDESCRIPTION: This snippet shows how to implement a `view()` method within an `ImportPolicy` to customize access control to the failure CSV file.  It checks if the user initiating the import is the same as the current user attempting to access the file. Requires `App\\Models\\User` and `Filament\\Actions\\Imports\\Models\\Import`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\User;\nuse Filament\\Actions\\Imports\\Models\\Import;\n\npublic function view(User $user, Import $import): bool\n{\n    return $import->user()->is($user);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Chart.js Plugin (JavaScript)\nDESCRIPTION: This JavaScript code imports a Chart.js plugin and adds it to the `window.filamentChartJsPlugins` array. It initializes the array if it doesn't already exist to prevent overwriting plugins from other files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\n\nwindow.filamentChartJsPlugins ??= []\nwindow.filamentChartJsPlugins.push(ChartDataLabels)\n```\n\n----------------------------------------\n\nTITLE: Setting Favicon - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to set the favicon for a FilamentPHP panel using the `favicon()` method. It provides the URL of the favicon image asset.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->favicon(asset('images/favicon.png'));\n}\n```\n\n----------------------------------------\n\nTITLE: Declined Toggle Validation PHP\nDESCRIPTION: This snippet demonstrates how to use the `declined()` method to validate that the toggle is 'off'.  For example, to ensure a user declines something.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_under_18')\n    ->declined()\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Widgets with Composer\nDESCRIPTION: This command installs the Filament Widgets package using Composer. It builds on Livewire principles to enable the creation of real-time reactive dashboards with charts and statistics.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/widgets\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Modal Content Footer (PHP)\nDESCRIPTION: This snippet shows how to add custom content to the footer of a modal using `modalContentFooter()` by passing a blade view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\nAction::make('advance')\n    ->action(fn (Post $record) => $record->advance())\n    ->modalContentFooter(view('filament.pages.actions.advance'))\n```\n\n----------------------------------------\n\nTITLE: Setting Prefix Icon Color for TimePicker in Filament\nDESCRIPTION: This snippet demonstrates how to set the color of a prefix icon in a TimePicker using the `prefixIconColor()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TimePicker;\n\nTimePicker::make('at')\n    ->prefixIcon('heroicon-m-check-circle')\n    ->prefixIconColor('success')\n```\n\n----------------------------------------\n\nTITLE: Using Filament Button Component for Submit Action in PHP\nDESCRIPTION: This snippet shows how to use the built-in Filament button Blade component as the submit action for the Wizard. It utilizes `Blade::render` to render the button component and wrap it in an `HtmlString`. The button is styled with 'sm' size, displaying the text 'Submit'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\HtmlString;\n\nWizard::make([\n    // ...\n])->submitAction(new HtmlString(Blade::render(<<<BLADE\n    <x-filament::button\n        type=\"submit\"\n        size=\"sm\"\n    >\n        Submit\n    </x-filament::button>\nBLADE)))\n```\n\n----------------------------------------\n\nTITLE: Preventing Reordering Items in a Repeater - PHP\nDESCRIPTION: This snippet shows how to prevent users from reordering items in the repeater by using the `reorderable(false)` method. This can be useful when the order of items is inherently important and should not be changed by the user.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->reorderable(false)\n```\n\n----------------------------------------\n\nTITLE: Create app.blade.php Layout File\nDESCRIPTION: This Blade template defines the layout for Livewire components, including meta tags, CSS and JavaScript includes for Filament, and a slot for component content. The `@filamentStyles` and `@filamentScripts` directives are crucial for Filament's functionality.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n\n        <meta name=\"application-name\" content=\"{{ config('app.name') }}\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>{{ config('app.name') }}</title>\n\n        <style>\n            [x-cloak] {\n                display: none !important;\n            }\n        </style>\n\n        @filamentStyles\n        @vite('resources/css/app.css')\n    </head>\n\n    <body class=\"antialiased\">\n        {{ $slot }}\n\n        @filamentScripts\n        @vite('resources/js/app.js')\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with query parameters - PHP\nDESCRIPTION: This snippet shows how to generate a URL with query parameters using the `getUrl()` method. The first argument is an array of key-value pairs that will be added to the URL as query parameters. The `Settings` class represents a Filament page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Pages\\Settings;\n\nSettings::getUrl(['section' => 'notifications']); // /admin/settings?section=notifications\n```\n\n----------------------------------------\n\nTITLE: Preventing File Information Fetching in Filament\nDESCRIPTION: This snippet demonstrates how to disable automatic file information fetching (size, type, existence) in Filament's FileUpload component. It uses `fetchFileInformation(false)` to prevent backend file checks, which can be time-consuming for remote storage with many files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->fetchFileInformation(false)\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes - Filament\nDESCRIPTION: Illustrates passing extra HTML attributes to the button using the `extraAttributes()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->extraAttributes([\n        'title' => 'Edit this post',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customize Force Delete Notification - PHP\nDESCRIPTION: Illustrates how to customize the entire success notification after a record is force-deleted. Requires the Filament\\Actions\\ForceDeleteAction and Filament\\Notifications\\Notification classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nForceDeleteAction::make()\n    ->successNotification(\n       Notification::make()\n            ->success()\n            ->title('User force-deleted')\n            ->body('The user has been force-deleted successfully.'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumbs in Blade with Filament\nDESCRIPTION: This code snippet demonstrates how to use the Filament breadcrumbs Blade component to render a navigation menu. The `:breadcrumbs` attribute expects an array where keys are URLs and values are the corresponding link text.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-breadcrumbs.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::breadcrumbs :breadcrumbs=\"[\n    '/' => 'Home',\n    '/dashboard' => 'Dashboard',\n    '/dashboard/users' => 'Users',\n    '/dashboard/users/create' => 'Create User',\n]\" />\n```\n\n----------------------------------------\n\nTITLE: Using a List Separator in Filament PHP Text Column\nDESCRIPTION: This code demonstrates how to \"explode\" a text string from your model into multiple list items, using the `separator()` method.  This is useful for displaying comma-separated tags as badges.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('tags')\n    ->badge()\n    ->separator(',')\n```\n\n----------------------------------------\n\nTITLE: Showing asterisk for a non-required field in Filament Forms (PHP)\nDESCRIPTION: This code snippet shows how to display an asterisk next to a field that is not actually required, providing a visual cue to the user. It uses the `markAsRequired()` method without calling `required()` first. Dependencies: Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->markAsRequired()\n```\n\n----------------------------------------\n\nTITLE: Create Eloquent Models using Artisan\nDESCRIPTION: These commands use the `php artisan` tool to generate the `Owner`, `Patient`, and `Treatment` models, along with their corresponding database migration files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:model Owner -m\nphp artisan make:model Patient -m\nphp artisan make:model Treatment -m\n```\n\n----------------------------------------\n\nTITLE: Opening URLs from Notification Actions - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a notification action that opens a URL using JavaScript with Filament. The `url()` method sets the URL, and `openUrlInNewTab` controls whether it opens in a new tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .body('Changes to the post have been saved.')\n    .actions([\n        new FilamentNotificationAction('view')\n            .button()\n            .url('/view')\n            .openUrlInNewTab(),\n        new FilamentNotificationAction('undo')\n            .color('gray'),\n    ])\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Publish Filament Configuration\nDESCRIPTION: This command publishes the default Filament configuration file to your application, allowing you to customize its settings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Livewire Temporary File Upload Size Limit\nDESCRIPTION: This snippet shows the Livewire config value, that specifies the file upload limit. Size is in KB. This snippet must be manually added to config/livewire.php\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n'temporary_file_upload' => [\n    // ...\n    'rules' => ['required', 'file', 'max:122880'],\n    // ...\n],\n```\n\n----------------------------------------\n\nTITLE: Registering the Panel Provider in composer.json (JSON)\nDESCRIPTION: Shows how to register the panel provider class in the `composer.json` file of the package. This allows Laravel to automatically discover and register the panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"DanHarrin\\\\FilamentBlog\\\\BlogPanelProvider\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip\nDESCRIPTION: Explains how to add a tooltip to the button by using the `tooltip` attribute. The tooltip text is displayed when the user hovers over the button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button tooltip=\"Register a user\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Input Attributes to a Filament Form Field\nDESCRIPTION: This code snippet demonstrates how to add extra HTML attributes to the underlying `<input>` or `<select>` element of a Filament form field using the `extraInputAttributes()` method.  This is useful when `extraAttributes()` is not sufficient to target the desired HTML element.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('categories')\n    ->extraInputAttributes(['width' => 200])\n```\n\n----------------------------------------\n\nTITLE: Sending broadcast notifications with notify() method in Filament\nDESCRIPTION: This snippet shows how to send a broadcast notification using the `notify()` method. It also requires the `Filament\\Notifications\\Notification` class and a recipient. The `toBroadcast()` method converts the Filament notification to a broadcastable format.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/04-broadcast-notifications.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\n$recipient->notify(\n    Notification::make()\n        ->title('Saved successfully')\n        ->toBroadcast(),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Stacked Ring Width in Filament (PHP)\nDESCRIPTION: Illustrates how to customize the width of the ring around stacked images using the ring() method. The width can be a value from 0 to 8.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n    ->ring(5)\n```\n\n----------------------------------------\n\nTITLE: Generating a Livewire component using Artisan\nDESCRIPTION: This command generates a new Livewire component using the Artisan CLI. It creates the necessary files for a Livewire component with the specified name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire ListProducts\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Colors with Chart.js Options (PHP)\nDESCRIPTION: This example shows how to further customize chart colors using Chart.js color options within the `getData()` method. It allows for setting `backgroundColor` and `borderColor` for datasets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function getData(): array\n{\n    return [\n        'datasets' => [\n            [\n                'label' => 'Blog posts created',\n                'data' => [0, 10, 5, 2, 21, 32, 45, 74, 65, 45, 77, 89],\n                'backgroundColor' => '#36A2EB',\n                'borderColor' => '#9BD0F5',\n            ],\n        ],\n        'labels' => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Modal Content using Pest\nDESCRIPTION: This snippet illustrates how to assert the content of a modal in a Filament action using Pest. It creates an invoice, retrieves the recipient's email, mounts the `EditInvoice` Livewire component, mounts the 'send' action, and asserts that the modal contains the recipient's email address using `assertSee()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('confirms the target address before sending', function () {\n    $invoice = Invoice::factory()->create();\n    $recipientEmail = $invoice->company->primaryContact->email;\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountAction('send')\n        ->assertSee($recipientEmail);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Data Set with Pest\nDESCRIPTION: This snippet shows how to assert that an infolist action is pre-filled with specific data. It mounts the 'send' action, asserts that the 'email' field is pre-filled with the recipient's email, calls the action, and verifies that no errors occurred and the invoice was sent to the expected email.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices to the primary contact by default', function () {\n    $invoice = Invoice::factory()->create();\n    $recipientEmail = $invoice->company->primaryContact->email;\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountInfolistAction('customer', 'send')\n        ->assertInfolistActionDataSet([\n            'email' => $recipientEmail,\n        ])\n        ->callMountedInfolistAction()\n        ->assertHasNoInfolistActionErrors();\n        \n    expect($invoice->refresh())\n        ->isSent()->toBeTrue()\n        ->recipient_email->toBe($recipientEmail);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Description and Icon to a Stat - PHP\nDESCRIPTION: This code snippet shows how to enhance a statistic by adding a description and an icon.  The `description()` method sets a descriptive text, and `descriptionIcon()` specifies the icon to be displayed alongside the description. The icon is sourced from Heroicons.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/02-stats-overview.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\StatsOverviewWidget\\Stat;\n\nprotected function getStats(): array\n{\n    return [\n        Stat::make('Unique views', '192.1k')\n            ->description('32k increase')\n            ->descriptionIcon('heroicon-m-arrow-trending-up'),\n        Stat::make('Bounce rate', '21%')\n            ->description('7% decrease')\n            ->descriptionIcon('heroicon-m-arrow-trending-down'),\n        Stat::make('Average time on page', '3:12')\n            ->description('3% increase')\n            ->descriptionIcon('heroicon-m-arrow-trending-up'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Filament Form Field Hint\nDESCRIPTION: This code snippet demonstrates how to add an icon next to the hint in a Filament form field using the `hintIcon()` method. You can use any icon from the Blade UI Kit icon set.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->hint('Translatable')\n    ->hintIcon('heroicon-m-language')\n```\n\n----------------------------------------\n\nTITLE: Hiding the Modal Close Button in Filament\nDESCRIPTION: Shows how to hide the close button in the top right corner of a modal, using the `modalCloseButton(false)` method. Also demonstrates globally hiding the close button via `Modal::closeButton(false)`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->modalCloseButton(false)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\Modal;\n\nModal::closeButton(false);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field Class - Bash\nDESCRIPTION: This snippet demonstrates how to create a custom form field class and view using the `php artisan make:form-field` command. This command generates a PHP class extending Filament's `Field` class, and a corresponding Blade view file. This is the preferred way to create reusable custom fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:form-field RangeSlider\n```\n\n----------------------------------------\n\nTITLE: Create app layout file\nDESCRIPTION: This Blade template creates a new layout file for Livewire components. It includes meta tags, styles, scripts, and the content slot. Filament styles and scripts are included using `@filamentStyles` and `@filamentScripts` directives. Vite is used to load CSS and JavaScript assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n\n        <meta name=\"application-name\" content=\"{{ config('app.name') }}\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>{{ config('app.name') }}</title>\n\n        <style>\n            [x-cloak] {\n                display: none !important;\n            }\n        </style>\n\n        @filamentStyles\n        @vite('resources/css/app.css')\n    </head>\n\n    <body class=\"antialiased\">\n        {{ $slot }}\n\n        @filamentScripts\n        @vite('resources/js/app.js')\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters as Public Properties in Livewire Component (PHP)\nDESCRIPTION: This snippet demonstrates how to access parameters passed to a Livewire component as public properties. The parameters are automatically assigned to the public properties of the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Foo extends Component\n{\n    public string $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Entries in a Section - PHP\nDESCRIPTION: This snippet shows how to nest entries, such as `ImageEntry` and `TextEntry`, within a `Section` component. This enables structuring and organizing related information within an infolist.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/02-getting-started.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\nuse Filament\\Infolists\\Components\\Section;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nSection::make('Media')\n    ->description('Images used in the page layout.')\n    ->schema([\n        ImageEntry::make('hero_image'),\n        TextEntry::make('alt_text'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns Within a Wizard Step in PHP\nDESCRIPTION: This snippet shows how to customize the grid layout within a Wizard step using the `columns()` method. The 'Order' step is configured to use a 2-column grid, allowing for more flexible arrangement of form fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\n\nWizard::make([\n    Wizard\\Step::make('Order')\n        ->columns(2)\n        ->schema([\n            // ...\n        ]),\n    // ...\n])\n```\n\n----------------------------------------\n\nTITLE: Customizing Filament Cluster Breadcrumb with Property (PHP)\nDESCRIPTION: This snippet showcases how to customize the breadcrumb name for a Filament cluster using the `$clusterBreadcrumb` property within the cluster class. Setting this property overrides the default breadcrumb name with a custom string, enhancing user navigation and clarity within the panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/10-clusters.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $clusterBreadcrumb = 'cluster';\n```\n\n----------------------------------------\n\nTITLE: Changing Filament Dropdown Item Badge Color in Blade\nDESCRIPTION: This example shows how to change the color of a dropdown item's badge using the `badge-color` attribute.  The badge content is placed within the `badge` slot. Available colors are `danger`, `info`, `primary`, `success`, or `warning`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item badge-color=\"danger\">\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Calculated State\nDESCRIPTION: Calculates the state of a TextEntry using a callback function. The `state()` method is used to customize the returned state. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class and assumes the existence of a `Model` class with properties `amount` and `vat_rate`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nInfolists\\Components\\TextEntry::make('amount_including_vat')\n    ->state(function (Model $record): float {\n        return $record->amount * (1 + $record->vat_rate);\n    })\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Retries\nDESCRIPTION: This code snippet shows how to override the `getJobRetryUntil()` method in an exporter class to customize the retry time for export jobs. It uses Carbon to set the retry until time to one day from now.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\CarbonInterface;\n\npublic function getJobRetryUntil(): ?CarbonInterface\n{\n    return now()->addDay();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the State in a Filament Column View\nDESCRIPTION: This snippet demonstrates how to access the state (value) of a cell within a Filament column's Blade view.  The `$getState()` function retrieves the value to be displayed in the cell. The returned value depends on the configured column in the Filament table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/10-custom.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $getState() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Icon Affixes Blade\nDESCRIPTION: Shows how to add icons as affixes to the input wrapper using the `prefix-icon` and `suffix-icon` attributes. This leverages Blade UI Kit icons to enhance the input field's visual representation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper suffix-icon=\"heroicon-m-globe-alt\">\n    <x-filament::input\n        type=\"url\"\n        wire:model=\"domain\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Update composer.json\nDESCRIPTION: This code snippet shows the updated `composer.json` file after removing unnecessary options related to database factories and facades. This cleans up the plugin and focuses on the core functionality.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        // We can remove the database factories\n        \"Awcodes\\\\Headings\\\\Database\\\\Factories\\\\\": \"database/factories/\"\n    }\n},\n\"extra\": {\n    \"laravel\": {\n        // We can remove the facade\n        \"aliases\": {\n            \"Headings\": \"Awcodes\\\\Headings\\\\Facades\\\\ClockWidget\"\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Rendering an Action in a Custom Component's View - Blade\nDESCRIPTION: This snippet shows how to render a registered action inside a custom form component's Blade view using `$getAction()`. The name of the action ('setMaximum') is passed to `$getAction()` to render the corresponding button in the view.  The component also utilizes Alpine.js to bind the input range value to the wire:entangle property, enabling two-way data binding.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/06-actions.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ state: $wire.$entangle('{{ $getStatePath() }}') }\">\n    <input x-model=\"state\" type=\"range\" />\n    \n    {{ $getAction('setMaximum') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to an Action in Blade (Blade)\nDESCRIPTION: This Blade snippet demonstrates how to pass arguments to an action using an array. It iterates through a collection of `$posts` and passes each post's ID to the `deleteAction`. The parentheses are necessary to invoke the action.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    @foreach ($posts as $post)\n        <h2>{{ $post->title }}</h2>\n\n        {{ ($this->deleteAction)(['post' => $post->id]) }}\n    @endforeach\n\n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Icon Position - Filament PHP\nDESCRIPTION: This code snippet shows how to set the position of a tab icon within a Filament infolist Tabs component. The `iconPosition()` method and `IconPosition` enum are used to position the icon before or after the tab label. Dependencies: Filament\\Infolists\\Components\\Tabs, Filament\\Support\\Enums\\IconPosition.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\nuse Filament\\Support\\Enums\\IconPosition;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->icon('heroicon-m-bell')\n            ->iconPosition(IconPosition::After)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge - Filament\nDESCRIPTION: Demonstrates adding a badge to the corner of the button using the `badge()` method, displaying a count or status.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('filter')\n    ->iconButton()\n    ->icon('heroicon-m-funnel')\n    ->badge(5)\n```\n\n----------------------------------------\n\nTITLE: Adding an action to a custom infolist component in Filament\nDESCRIPTION: This code demonstrates how to add an action to a custom infolist component using `ViewEntry`.  The action 'createStatus' creates a new status entry for a Post record.  A form is defined using Filament Forms to collect the 'name' data. The actions are registered to the `ViewEntry` using `registerActions()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\ViewEntry;\nuse Filament\\Infolists\\Set;\n\nViewEntry::make('status')\n    ->view('filament.infolists.entries.status-switcher')\n    ->registerActions([\n        Action::make('createStatus')\n            ->form([\n                TextInput::make('name')\n                    ->required(),\n            ])\n            ->icon('heroicon-m-plus')\n            ->action(function (array $data, Post $record) {\n                $record->status()->create($data);\n            }),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Publish Filament configuration\nDESCRIPTION: This command publishes the Filament package's configuration files to the `config` directory, allowing for customization. This step is optional.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Fluently Instantiating a Filament Plugin (PHP)\nDESCRIPTION: Demonstrates how to add a `make()` method to a plugin class for fluent instantiation.  This allows users to instantiate the plugin more easily. This utilizes the Laravel container (app()) for instantiation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Contracts\\Plugin;\n\nclass BlogPlugin implements Plugin\n{\n    public static function make(): static\n    {\n        return app(static::class);\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Force Delete Notification - PHP\nDESCRIPTION: Shows how to disable the success notification altogether after a record is force-deleted. It requires the Filament\\Actions\\ForceDeleteAction class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nForceDeleteAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: SpatieTagsEntry with Type\nDESCRIPTION: Illustrates how to use the `type()` method to group tags into collections within a Filament infolist, using `SpatieTagsEntry`. The `type` parameter allows filtering the tags displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieTagsEntry;\n\nSpatieTagsEntry::make('tags')\n    ->type('categories')\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Chart Height (PHP)\nDESCRIPTION: This code shows how to set a maximum height for a chart using the `$maxHeight` property. This prevents the chart from becoming too large.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?string $maxHeight = '300px';\n```\n\n----------------------------------------\n\nTITLE: Grid and Text Entry with Responsive Column Start\nDESCRIPTION: This code demonstrates how to use the `columnStart()` method in Filament infolists to specify the starting column of a component within a grid. The example uses a `Grid` component with defined columns for different breakpoints and a `TextEntry` component with a `columnStart()` method that sets the starting column based on breakpoints.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/02-grid.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Grid;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nGrid::make()\n    ->columns([\n        'sm' => 3,\n        'xl' => 6,\n        '2xl' => 8,\n    ])\n    ->schema([\n        TextEntry::make('name')\n            ->columnStart([\n                'sm' => 2,\n                'xl' => 3,\n                '2xl' => 4,\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS Dependencies (Bash)\nDESCRIPTION: This command installs Tailwind CSS v3, Tailwind Forms plugin, Tailwind Typography plugin, postcss, postcss-nesting, and autoprefixer as development dependencies using npm.  These are necessary for styling Filament components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Escape Key Closing in Filament Modals\nDESCRIPTION: Shows how to disable closing a modal by pressing the escape key, using the `closeModalByEscaping(false)` method.  Also demonstrates globally disabling this behavior via `Modal::closedByEscaping(false)`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->closeModalByEscaping(false)\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\View\\Components\\Modal;\n\nModal::closedByEscaping(false);\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes - Filament\nDESCRIPTION: Shows how to pass CSS classes to the button, which will be merged with the default classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('edit')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n    ->extraAttributes([\n        'class' => 'mx-auto my-8',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Hiding Grouping Direction Setting - PHP\nDESCRIPTION: This code demonstrates how to hide only the grouping direction setting (e.g., ascending/descending) while still allowing other grouping settings to be visible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n\t\t->defaultGroup('status')\n        ->groupingDirectionSettingHidden();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Page (PHP)\nDESCRIPTION: This snippet demonstrates how to register a custom page within the `getPages()` method of a Filament resource. It defines a route for the 'sort' page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/10-custom-pages.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        // ...\n        'sort' => Pages\\SortUsers::route('/sort'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cloning of Items\nDESCRIPTION: This snippet enables the ability to clone builder items, allowing users to duplicate existing blocks using the `cloneable()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->cloneable()\n```\n\n----------------------------------------\n\nTITLE: Disable Restore Notification - PHP\nDESCRIPTION: This snippet demonstrates how to disable the success notification after a successful restore action. It uses the `successNotification(null)` method to prevent any notification from being displayed to the user. No specific dependencies, simply prevents a notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/07-restore.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRestoreAction::make()\n    ->successNotification(null)\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in Livewire Component's mount() Method (PHP)\nDESCRIPTION: This snippet shows how to access parameters passed to a Livewire component within its `mount()` method. The parameters are passed as arguments to the `mount()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Foo extends Component\n{\n    public function mount(string $bar): void\n    {       \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Form Validation Test (PHP)\nDESCRIPTION: This test validates the input of the create form.  It fills the form with invalid data and then asserts that the form has errors for the expected fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can validate input', function () {\n    livewire(PostResource\\Pages\\CreatePost::class)\n        ->fillForm([\n            'title' => null,\n        ])\n        ->call('create')\n        ->assertHasFormErrors(['title' => 'required']);\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTML Input Type\nDESCRIPTION: This snippet demonstrates setting a custom HTML input type using the `type()` method.  This allows for utilizing less common input types like 'color'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('backgroundColor')\n    ->type('color')\n```\n\n----------------------------------------\n\nTITLE: Customizing Eloquent Query Ordering - PHP\nDESCRIPTION: This example demonstrates how to customize the Eloquent query ordering behavior for a group using the `orderQueryUsing()` method. It allows you to specify how the query should be ordered based on the group and direction.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('status')\n                ->orderQueryUsing(fn (Builder $query, string $direction) => $query->orderBy('status', $direction)),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Render Database Notifications (Blade)\nDESCRIPTION: Renders the Livewire component for displaying database notifications in a Blade layout. This assumes you are not using the Filament Panel builder.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@livewire('database-notifications')\n```\n\n----------------------------------------\n\nTITLE: Icon Position After Text Blade\nDESCRIPTION: Shows how to change the icon's position to be after the text label in the Filament link component, using the `icon-position` attribute. This attribute accepts a value of 'after'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link\n    icon=\"heroicon-m-sparkles\"\n    icon-position=\"after\"\n>\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Apply Translatable Trait to Relation Manager (PHP)\nDESCRIPTION: Applies the `Translatable` trait to a Filament Relation Manager class.  This enables translation functionality for the relation manager.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\RelationManagers\\Concerns\\Translatable;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\n\nclass BlogPostsRelationManager extends RelationManager\n{\n    use Translatable;\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filament Exporter\nDESCRIPTION: This command creates a new exporter class using Filament's `make:filament-exporter` Artisan command. It generates a file in the `app/Filament/Exports` directory that can be customized to define the columns and logic for exporting data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-exporter Product\n```\n\n----------------------------------------\n\nTITLE: Casting State to Boolean\nDESCRIPTION: Demonstrates how to cast the state of a column to a boolean using the `boolean()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Actions\\Imports\\ImportColumn;\n\nImportColumn::make('is_visible')\n    ->boolean()\n```\n\n----------------------------------------\n\nTITLE: Customizing View using Blade Template (Filament)\nDESCRIPTION: This shows how to override the default view using a custom Blade template.  The `$view` property is set to the path of the custom view file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $view = 'filament.resources.users.pages.view-user';\n```\n\n----------------------------------------\n\nTITLE: Infolist Schema Definition\nDESCRIPTION: Defines the infolist schema within a Filament component.  This example shows how to add entries to an infolist using the `$infolist->schema()` method. It is used to configure the structure and content of the infolist. The code depends on the `Filament\\Infolists\\Infolist` class. The method returns an `Infolist` instance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Infolist;\n\npublic function infolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->schema([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing the User from Adding Items\nDESCRIPTION: This snippet prevents the user from adding new items to the builder using the `addable(false)` method. This can be useful in scenarios where the number of items is fixed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->addable(false)\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination Links (Blade)\nDESCRIPTION: This Blade snippet shows how to use the Filament pagination component to render the paginated links passed from the Livewire component. The `$users` variable, containing the paginator instance, is passed to the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-pagination.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::pagination :paginator=\"$users\" />\n```\n\n----------------------------------------\n\nTITLE: Update Filament via Composer and Artisan (Bash)\nDESCRIPTION: This process demonstrates how to upgrade Filament manually, first by updating the Composer packages and then by running the Filament upgrade Artisan command to clear caches and republish assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Grouping by Date Only - PHP\nDESCRIPTION: This example shows how to group by date only, ignoring the time component, when using a date-time column for grouping. It uses the `date()` method on the `Group` object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/08-grouping.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Grouping\\Group;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->groups([\n            Group::make('created_at')\n                ->date(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Filament Dropdown Item Icon Color in Blade\nDESCRIPTION: This example demonstrates how to override the default icon color of a dropdown item using the `icon-color` attribute. Available colors are `danger`, `info`, `primary`, `success`, or `warning`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"danger\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"info\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"primary\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"success\">\n    Edit\n</x-filament::dropdown.list.item>\n\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\" icon-color=\"warning\">\n    Edit\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix\nDESCRIPTION: This snippet demonstrates adding a prefix and suffix to the summary's value using the `prefix()` and `suffix()` methods, respectively. The suffix uses HtmlString for HTML formatting.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Support\\HtmlString;\n\nTextColumn::make('volume')\n    ->summarize(Sum::make()\n        ->prefix('Total volume: ')\n        ->suffix(new HtmlString(' m&sup3;'))\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Split Layout with Sections in Filament PHP\nDESCRIPTION: This code snippet demonstrates how to create a split layout in a Filament form using the `Split` component. It defines two sections, with the first section containing a text input and textarea, and the second section containing two toggle components. The `from()` method sets the breakpoint for the split layout to 'md'. The first section is configured to grow and consume available space.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/07-split.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Split;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\n\nSplit::make([\n    Section::make([\n        TextInput::make('title'),\n        Textarea::make('content'),\n    ]),\n    Section::make([\n        Toggle::make('is_published'),\n        Toggle::make('is_featured'),\n    ])->grow(false),\n])->from('md')\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Image in Filament (PHP)\nDESCRIPTION: Illustrates how to make an image fully rounded using the circular() method, which is commonly used for rendering avatars.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->height(40)\n    ->circular()\n```\n\n----------------------------------------\n\nTITLE: Configure Tailwind CSS with Filament preset\nDESCRIPTION: This configuration file for Tailwind CSS imports the Filament preset, includes the Filament color scheme and required Tailwind plugins, and defines content paths for Filament components and views.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport preset from './vendor/filament/support/tailwind.config.preset'\n\nexport default {\n    presets: [preset],\n    content: [\n        './app/Filament/**/*.php',\n        './resources/views/filament/**/*.blade.php',\n        './vendor/filament/**/*.blade.php',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Slide-Over Instead of a Modal (PHP)\nDESCRIPTION: This snippet shows how to open a slide-over dialog instead of a modal using the `slideOver()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->slideOver()\n```\n\n----------------------------------------\n\nTITLE: Adding suffix action to a TextEntry in Filament\nDESCRIPTION: This snippet illustrates how to add a suffix action to a Filament TextEntry. It creates an action named 'copyCostToPrice', sets its icon, requires confirmation, and defines a function that copies the 'cost' value to the 'price' attribute of a Product record. The action is triggered on the 'cost' TextEntry.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Product;\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('cost')\n    ->prefix('€')\n    ->suffixAction(\n        Action::make('copyCostToPrice')\n            ->icon('heroicon-m-clipboard')\n            ->requiresConfirmation()\n            ->action(function (Product $record) {\n                $record->price = $record->cost;\n                $record->save();\n            })\n    )\n```\n\n----------------------------------------\n\nTITLE: Making Sections Collapsed by Default (PHP)\nDESCRIPTION: This code shows how to make a section collapsed by default in Filament infolists using the `collapsed()` method. When the page loads, the section will be hidden.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->schema([\n        // ...\n    ])\n    ->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Add Tailwind CSS Layers\nDESCRIPTION: This CSS code adds Tailwind's CSS layers to the `app.css` file. These layers are used to control the order in which Tailwind's styles are applied, ensuring that base styles are applied first, followed by components, utilities, and variants.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS v3 Dependencies\nDESCRIPTION: This command installs Tailwind CSS version 3 along with necessary plugins like Tailwind Forms, Tailwind Typography, PostCSS, PostCSS Nesting, and Autoprefixer as development dependencies. This ensures that the required styling frameworks are available for Filament to use.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting column span for a field\nDESCRIPTION: This code snippet shows how to set the column span for a specific field within a form using the `columnSpan()` method. This allows for controlling the width of individual fields within a multi-column layout.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\TextInput;\n\n[\n    TextInput::make('title'),\n    TextInput::make('slug'),\n    RichEditor::make('content')\n        ->columnSpan(2), // or `columnSpan('full')`\n]\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Color in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action's button is displaying the right color using Pest and Livewire. It creates an invoice and asserts that the 'delete' action for the 'customer_id' component has the 'danger' color and the 'print' action does not.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('actions display proper colors', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionHasColor('customer_id', 'delete', 'danger')\n        ->assertFormComponentActionDoesNotHaveColor('customer_id', 'print', 'danger');\n});\n```\n\n----------------------------------------\n\nTITLE: Link as Button Blade\nDESCRIPTION: Illustrates how to use the Filament link component as a button element instead of a standard link. The `tag` attribute is set to \"button\", and a `wire:click` event is added to trigger a Livewire action.  This approach provides button styling to the link.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link\n    wire:click=\"openNewUserModal\"\n    tag=\"button\"\n>\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Eloquent Model Array Casting for Key-Value Data\nDESCRIPTION: This code snippet shows how to define an array cast on an Eloquent model property named 'meta'. This is crucial for ensuring that data saved as a JSON object in the database is properly treated as an array when accessed from the model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/06-key-value.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    protected $casts = [\n        'meta' => 'array',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Grid Columns Within a Tab - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to customize the number of grid columns within a Filament infolist tab. The `columns()` method is used to specify the number of columns. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ])\n            ->columns(3),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: SpatieTagsInput with Type\nDESCRIPTION: Illustrates how to use the `type()` method to group tags into collections, such as 'categories'. This uses the `SpatieTagsInput` form component in a Filament form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\SpatieTagsInput;\n\nSpatieTagsInput::make('tags')\n    ->type('categories')\n```\n\n----------------------------------------\n\nTITLE: Create Livewire layout file\nDESCRIPTION: This Blade template creates a basic layout file for Livewire components. It includes metadata, styling, scripts, and Filament-specific directives.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n\n        <meta name=\"application-name\" content=\"{{ config('app.name') }}\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>{{ config('app.name') }}</title>\n\n        <style>\n            [x-cloak] {\n                display: none !important;\n            }\n        </style>\n\n        @filamentStyles\n        @vite('resources/css/app.css')\n    </head>\n\n    <body class=\"antialiased\">\n        {{ $slot }}\n\n        @filamentScripts\n        @vite('resources/js/app.js')\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MoneyCast get() and set() methods (Laravel)\nDESCRIPTION: This code defines the `get()` and `set()` methods of the `MoneyCast` class. The `get()` method transforms the integer stored in the database into a float. The `set()` method transforms the float into an integer for storage. These are essential for handling currency values as integers in the database to avoid precision issues.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\npublic function get($model, string $key, $value, array $attributes): float\n{\n    // Transform the integer stored in the database into a float.\n    return round(floatval($value) / 100, precision: 2);\n}\n\npublic function set($model, string $key, $value, array $attributes): float\n{\n    // Transform the float into an integer for storage.\n    return round(floatval($value) * 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the Color of a Filament Badge in Blade\nDESCRIPTION: This snippet illustrates how to modify the color of the Filament badge using the `color` attribute. The attribute accepts various color options, including \"danger\", \"gray\", \"info\", \"success\", and \"warning\". This provides visual cues and allows the badge to reflect different states or categories.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-badge.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::badge color=\"danger\">\n    New\n</x-filament::badge>\n\n<x-filament::badge color=\"gray\">\n    New\n</x-filament::badge>\n\n<x-filament::badge color=\"info\">\n    New\n</x-filament::badge>\n\n<x-filament::badge color=\"success\">\n    New\n</x-filament::badge>\n\n<x-filament::badge color=\"warning\">\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Disable Closing by Clicking Away (Blade)\nDESCRIPTION: Demonstrates how to prevent the modal from closing when clicking outside of it using the `:close-by-clicking-away=\"false\"` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_13\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :close-by-clicking-away=\"false\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: OrderProduct Pivot Model - PHP\nDESCRIPTION: This snippet defines the `OrderProduct` pivot model, including relationships to the `Order` and `Product` models.  It's used with a `BelongsToMany` relationship and has `$incrementing = true` to ensure Filament tracks primary keys. This model also defines the inverse relationships to `Order` and `Product`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\Pivot;\n\nclass OrderProduct extends Pivot\n{\n    public $incrementing = true;\n\n    public function order(): BelongsTo\n    {\n        return $this->belongsTo(Order::class);\n    }\n\n    public function product(): BelongsTo\n    {\n        return $this->belongsTo(Product::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automated Filament Upgrade (Bash)\nDESCRIPTION: This snippet demonstrates how to use the filament/upgrade package to automatically upgrade your application to the latest version of Filament. It installs the package and then executes the upgrade script.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/15-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/upgrade:\"^3.2\" -W --dev\n\nvendor/bin/filament-v3\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Alpine.js\nDESCRIPTION: Demonstrates how to trigger the error state of the input wrapper using an Alpine.js expression. The `alpine-valid` attribute is used to dynamically determine the error state based on whether an error exists in the `errors` array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ errors: ['name'] }\">\n    <x-filament::input.wrapper alpine-valid=\"! errors.includes('name')\">\n        <x-filament::input\n            type=\"text\"\n            wire:model=\"name\"\n        />\n    </x-filament::input.wrapper>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Active Tab - Filament PHP\nDESCRIPTION: This code snippet shows how to set the default active tab within a Filament infolist Tabs component. The `activeTab()` method is used to specify which tab should be open by default. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->activeTab(2)\n```\n\n----------------------------------------\n\nTITLE: Configure PostCSS with Tailwind CSS\nDESCRIPTION: This configuration file for PostCSS registers Tailwind CSS, PostCSS Nesting, and Autoprefixer as plugins, enabling the use of Tailwind CSS and nesting features.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n    plugins: {\n        'tailwindcss/nesting': 'postcss-nesting',\n        tailwindcss: {},\n        autoprefixer: {},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling database transactions for a resource page (PHP)\nDESCRIPTION: This code disables database transactions for specific Filament resource pages, like Create or Edit pages, by setting the `$hasDatabaseTransactions` property to `false` on the page class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreatePost extends CreateRecord\n{\n    protected ?bool $hasDatabaseTransactions = false;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Position in a Text Entry (Filament, PHP)\nDESCRIPTION: This code shows how to set the position of the icon in a Filament Infolists text entry using `iconPosition()`. The example configures the email field to display a mail envelope icon after the text. The `IconPosition` enum is used to define the icon's location.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Support\\Enums\\IconPosition;\n\nTextEntry::make('email')\n    ->icon('heroicon-m-envelope')\n    ->iconPosition(IconPosition::After) // `IconPosition::Before` or `IconPosition::After`\n```\n\n----------------------------------------\n\nTITLE: Install Filament Infolists with Composer\nDESCRIPTION: This command uses Composer to require the Filament Infolists package, specifying version 3.3 and enabling the -W flag to update dependencies if needed. It is the initial step in adding Filament Infolists to a Laravel project.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/infolists:\"^3.3\" -W\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Table Column using Artisan\nDESCRIPTION: This bash snippet demonstrates creating a custom column in Filament using artisan command.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/10-custom.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:table-column StatusSwitcher\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Hooks in View Page (Filament)\nDESCRIPTION: This code demonstrates the usage of lifecycle hooks `beforeFill` and `afterFill` in a Filament View page. These methods are executed before and after the form fields are populated from the database, respectively.  Note that these hooks are not run when using an infolist.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\ViewRecord;\n\nclass ViewUser extends ViewRecord\n{\n    // ...\n\n    protected function beforeFill(): void\n    {\n        // Runs before the disabled form fields are populated from the database. Not run on pages using an infolist.\n    }\n\n    protected function afterFill(): void\n    {\n        // Runs after the disabled form fields are populated from the database. Not run on pages using an infolist.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filament Install with Panels (Bash)\nDESCRIPTION: This snippet demonstrates how to install Filament with panels enabled. This command creates a new `app/Providers/Filament/AdminPanelProvider.php` file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/15-upgrade-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --panels\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Widgets in Filament (PHP)\nDESCRIPTION: This snippet shows how to override the static `canView()` method on widgets to conditionally hide them, in this case, based on whether the authenticated user is an admin.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic static function canView(): bool\n{\n    return auth()->user()->isAdmin();\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Filament manually\nDESCRIPTION: These commands upgrade Filament manually by first updating dependencies with Composer, and then running the `filament:upgrade` Artisan command. The `filament:upgrade` command clears Laravel caches and republishes frontend assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Batch Name\nDESCRIPTION: This code snippet demonstrates how to override the `getJobBatchName()` method in an exporter class to customize the name applied to job batches of a certain exporter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_54\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobBatchName(): ?string\n{\n    return 'product-export';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Header Actions in Filament Tables (PHP)\nDESCRIPTION: This snippet demonstrates how to define header actions in a Filament table. It uses the `$table->headerActions()` method within the `table()` function to define the actions that will be displayed in the table header. The dependency needed is Table facade.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->headerActions([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for Livewire component refresh\nDESCRIPTION: This configuration updates the `vite.config.js` file to automatically refresh the page when Livewire components are updated. It includes the necessary imports and configuration within the Laravel Vite plugin.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport laravel, { refreshPaths } from 'laravel-vite-plugin'\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: [\n                ...refreshPaths,\n                'app/Livewire/**',\n            ],\n        }),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Update postcss.config.js\nDESCRIPTION: This code snippet shows the updated `postcss.config.js` file. It configures PostCSS to use the `postcss-nesting` and `cssnano` plugins for processing CSS files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    plugins: [\n        require('postcss-nesting')(),\n        require('cssnano')({\n            preset: 'default',\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a full-page Livewire component\nDESCRIPTION: This snippet demonstrates how to register a Livewire component as a full-page component using Laravel's routing system. It associates a specific URL with the Livewire component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\ListProducts;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('products', ListProducts::class);\n```\n\n----------------------------------------\n\nTITLE: Preventing the User from Deleting Items\nDESCRIPTION: This snippet disables the ability for users to delete items from the builder using the `deletable(false)` method. This is useful for maintaining a specific set of data within the builder.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->deletable(false)\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge\nDESCRIPTION: Illustrates how to add a badge to the button using the `badge` slot. The badge is rendered on top of the button, typically used to display a notification count or status.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button>\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Eloquent Record in Blade (Blade)\nDESCRIPTION: Shows how to access the Eloquent record associated with the infolist within the Blade view of a custom layout component. The `$getRecord()` function provides access to the record, allowing you to display its attributes. In this example, the `name` attribute is accessed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/07-custom.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    {{ $getRecord()->name }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Navigation Label (Property) (PHP)\nDESCRIPTION: Demonstrates customizing the navigation label for a Filament page by defining the `$navigationLabel` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $navigationLabel = 'Custom Navigation Label';\n```\n\n----------------------------------------\n\nTITLE: Customizing simple page max content width in Filament (PHP)\nDESCRIPTION: This code sets the maximum width of the content area for simple pages like login and registration pages within a Filament panel. The `simplePageMaxContentWidth()` method is used to specify the desired width, using Tailwind's max-width scale enums.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Panel;\nuse Filament\\Support\\Enums\\MaxWidth;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->simplePageMaxContentWidth(MaxWidth::Small);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notification with Custom ID (Filament PHP)\nDESCRIPTION: This PHP code shows how to send a Filament notification with a custom ID. This allows you to close the notification later using this custom ID, instead of a randomly generated one.  Dependencies: Filament\\Notifications\\Notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make('greeting')\n    ->title('Hello')\n    ->persistent()\n    ->send()\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Position\nDESCRIPTION: Demonstrates how to change the position of the icon relative to the button's text, using the `icon-position` attribute. The default position is before the text, and setting it to 'after' places the icon after the text.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button\n    icon=\"heroicon-m-sparkles\"\n    icon-position=\"after\"\n>\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Toggle Buttons Inline in Filament\nDESCRIPTION: This code shows how to display toggle buttons inline with each other using the `inline()` method.  The `boolean()` method configures it as a Yes/No choice, and `label()` sets the question to answer.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nToggleButtons::make('feedback')\n    ->label('Like this post?')\n    ->boolean()\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Customizing Relationship Option Labels in CheckboxList - PHP\nDESCRIPTION: This example demonstrates how to customize the label of each option in the CheckboxList when using a relationship. It shows how to use a virtual column in the database migration and the `getOptionLabelFromRecordUsing()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$table->string('full_name')->virtualAs('concat(first_name, \\' \\', last_name)');\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('authors')\n    ->relationship(titleAttribute: 'full_name')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nCheckboxList::make('authors')\n    ->relationship(\n        modifyQueryUsing: fn (Builder $query) => $query->orderBy('first_name')->orderBy('last_name'),\n    )\n    ->getOptionLabelFromRecordUsing(fn (Model $record) => \"{$record->first_name} {$record->last_name}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a infolist component action in Filament\nDESCRIPTION: This code snippet demonstrates how to define a basic action within a Filament infolist component. It creates an action named 'resetStars', sets its icon and color, requires confirmation before execution, and assigns a function to be executed when the action is triggered, injecting the `ResetStars` action.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Actions\\ResetStars;\nuse Filament\\Infolists\\Components\\Actions\\Action;\n\nAction::make('resetStars')\n    ->icon('heroicon-m-x-mark')\n    ->color('danger')\n    ->requiresConfirmation()\n    ->action(function (ResetStars $resetStars) {\n        $resetStars();\n    })\n```\n\n----------------------------------------\n\nTITLE: Running Filament Upgrade Manually\nDESCRIPTION: These commands manually update Filament using Composer and then run the `filament:upgrade` Artisan command to clear caches and republish assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Define Eloquent Model Relationships\nDESCRIPTION: This code defines the relationships between the `Owner`, `Patient`, and `Treatment` models using Eloquent's relationship methods. `Owner` hasMany `Patient`, `Patient` belongsTo `Owner` and hasMany `Treatment`, and `Treatment` belongsTo `Patient`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\n\nclass Owner extends Model\n{\n    public function patients(): HasMany\n    {\n        return $this->hasMany(Patient::class);\n    }\n}\n\nclass Patient extends Model\n{\n    public function owner(): BelongsTo\n    {\n        return $this->belongsTo(Owner::class);\n    }\n\n    public function treatments(): HasMany\n    {\n        return $this->hasMany(Treatment::class);\n    }\n}\n\nclass Treatment extends Model\n{\n    public function patient(): BelongsTo\n    {\n        return $this->belongsTo(Patient::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Polling Table Content in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to enable polling of table content in Filament, causing it to refresh at a specified interval. This uses the `$table->poll()` method, which accepts a string representing the interval.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->poll('10s');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Heading Component (heading.blade.php)\nDESCRIPTION: This code snippet shows the `heading.blade.php` file, which defines the view for the Heading component. It uses `x-load` to asynchronously load the stylesheet and renders the heading with the specified level, color, and content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n@php\n    $level = $getLevel();\n    $color = $getColor();\n@endphp\n\n<{{ $level }}\n    x-data\n    x-load-css=\"[@js(\\Filament\\Support\\Facades\\FilamentAsset::getStyleHref('headings', package: 'awcodes/headings'))]\"\n    {{\n        $attributes\n            ->class([\n                'headings-component',\n                match ($color) {\n                    'gray' => 'text-gray-600 dark:text-gray-400',\n                    default => 'text-custom-500',\n                },\n            ])\n            ->style([\n                \\Filament\\Support\\get_color_css_variables($color, [500]) => $color !== 'gray',\n            ])\n    }}\n>\n    {{ $getContent() }}\n</{{ $level }}>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Existing Data Test (PHP)\nDESCRIPTION: This test verifies that the Edit form is pre-filled with the correct data from an existing database record. It uses `assertFormSet()` to ensure that the form's fields match the record's attributes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can retrieve data', function () {\n    $post = Post::factory()->create();\n\n    livewire(PostResource\\Pages\\EditPost::class, [\n        'record' => $post->getRouteKey(),\n    ])\n        ->assertFormSet([\n            'author_id' => $post->author->getKey(),\n            'content' => $post->content,\n            'tags' => $post->tags,\n            'title' => $post->title,\n        ]);\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping Multiple Icons in Filament\nDESCRIPTION: This code snippet shows how to allow multiple icons in a column to wrap onto multiple lines if they cannot fit on a single line.  This is achieved using the `wrap()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('icon')\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Setting Filament Dropdown Width in Blade\nDESCRIPTION: This example shows how to set the width of a dropdown using the `width` attribute. The options correspond to Tailwind's max-width scale: `xs`, `sm`, `md`, `lg`, `xl`, `2xl`, `3xl`, `4xl`, `5xl`, `6xl` and `7xl`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown width=\"xs\">\n    {{-- Dropdown items --}}\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Upgrade Filament via Composer and Artisan\nDESCRIPTION: These commands upgrade Filament by first updating Composer dependencies and then running the `filament:upgrade` Artisan command. The `filament:upgrade` command clears caches and republishes assets after the Composer update.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Publish Translations\nDESCRIPTION: Publishes the language files for the Filament Spatie Laravel Settings Plugin. This allows users to translate the package's strings into other languages. Requires access to the command line and the `artisan` command.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-spatie-laravel-settings-plugin-translations\n```\n\n----------------------------------------\n\nTITLE: Configure PostCSS with Tailwind CSS (JavaScript)\nDESCRIPTION: This JavaScript code configures PostCSS to use Tailwind CSS, PostCSS Nesting, and Autoprefixer as plugins.  This is required to process Tailwind CSS styles.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    plugins: {\n        'tailwindcss/nesting': 'postcss-nesting',\n        tailwindcss: {},\n        autoprefixer: {},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Modal Trigger Button (Blade)\nDESCRIPTION: Illustrates how to disable the modal trigger button and prevent the modal from opening when the button is clicked by adding the `disabled` attribute to both the trigger slot and the button within it.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_17\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"trigger\" disabled>\n        <x-filament::button :disabled=\"true\">\n            Open modal\n        </x-filament::button>\n    </x-slot>\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Tab in Filament Form (PHP)\nDESCRIPTION: This code snippet shows how to set the default active tab using the `activeTab()` method. The first tab has an index of 1. This example sets the second tab (index 2) as the active tab when the form is initially displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->activeTab(2)\n```\n\n----------------------------------------\n\nTITLE: Basic Force Delete Action - PHP\nDESCRIPTION: Demonstrates the basic usage of the Filament ForceDeleteAction to permanently delete a soft-deleted Eloquent record.  It requires the Filament\\Actions\\ForceDeleteAction class and an Eloquent model instance ($this->post).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\ForceDeleteAction;\n\nForceDeleteAction::make()\n    ->record($this->post)\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Colors PHP\nDESCRIPTION: Customizes the colors of the icons displayed for true and false boolean values in an IconEntry. The `trueColor()` and `falseColor()` methods are used to specify the colors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/03-icon.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('is_featured')\n    ->boolean()\n    ->trueColor('info')\n    ->falseColor('warning')\n```\n\n----------------------------------------\n\nTITLE: Arranging Records into a Grid (PHP)\nDESCRIPTION: This code demonstrates how to display records in a grid format within a Filament table. The `contentGrid()` method is used to define the number of columns at different breakpoints (md and xl).  Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Stack::make([\n                // Columns\n            ]),\n        ])\n        ->contentGrid([\n            'md' => 2,\n            'xl' => 3,\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Fieldset Blade Component\nDESCRIPTION: This snippet demonstrates how to use the `<x-filament::fieldset>` Blade component to group form fields. The `label` slot allows you to define a label for the fieldset.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-fieldset.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::fieldset>\n    <x-slot name=\"label\">\n        Address\n    </x-slot>\n    \n    {{-- Form fields --}}\n</x-filament::fieldset>\n```\n\n----------------------------------------\n\nTITLE: Install npm dependencies\nDESCRIPTION: This code snippet shows the command to install the npm dependencies defined in `package.json`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering a Livewire component in Blade\nDESCRIPTION: This Blade directive renders the specified Livewire component on the page. It allows you to embed the Livewire component within your Blade template.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n@livewire('list-products')\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Errors using Pest\nDESCRIPTION: This snippet demonstrates how to check for validation errors in a Filament action using `assertHasActionErrors()`. It creates an invoice, mounts the `EditInvoice` Livewire component, calls the 'send' action with an invalid email address, and asserts that a validation error occurred for the 'email' field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can validate invoice recipient email', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callAction('send', data: [\n            'email' => Str::random(),\n        ])\n        ->assertHasActionErrors(['email' => ['email']]);\n});\n```\n\n----------------------------------------\n\nTITLE: Publish Filament Config and Remove Old Config (Bash)\nDESCRIPTION: This script publishes the new Filament configuration file and removes the old `notifications.php` file. This step is necessary because Filament v3 uses a single config file for all Filament packages. The `--force` flag overwrites any existing configuration files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/07-upgrade-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config --force\nrm config/notifications.php\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Issue\nDESCRIPTION: This Artisan command is used to generate a new issue on the Filament GitHub repository with pre-filled version information from your application. This helps maintainers diagnose issues faster.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-issue\n```\n\n----------------------------------------\n\nTITLE: Positioning Filters into Grid Columns (Filament, PHP)\nDESCRIPTION: This code snippet demonstrates how to control the number of columns that filters occupy in a Filament table by using the `filtersFormColumns()` method. The method accepts an integer representing the desired number of columns. This allows for more flexible filter arrangements.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/06-layout.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->filters([\n            // ...\n        ])\n        ->filtersFormColumns(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Hex Color Validation - Filament\nDESCRIPTION: Validates that the field's value is a valid color in hexadecimal format. It uses the `hexColor()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nField::make('color')->hexColor()\n```\n\n----------------------------------------\n\nTITLE: Setting a Color - Filament\nDESCRIPTION: Demonstrates setting the trigger button color using the `color()` method. Valid color options are `danger`, `gray`, `info`, `primary`, `success`, and `warning`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nAction::make('delete')\n    ->color('danger')\n```\n\n----------------------------------------\n\nTITLE: Opening Modal from Alpine.js (JavaScript)\nDESCRIPTION: Demonstrates how to open the modal from Alpine.js by dispatching the `open-modal` event with the modal's ID as a parameter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$dispatch('open-modal', { id: 'edit-user' })\n```\n\n----------------------------------------\n\nTITLE: Publishing Blade Icons configuration - Bash\nDESCRIPTION: This command publishes the Blade Icons configuration file to allow customization of icon sets and prefixes. This is a prerequisite for using custom SVGs as icons in Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/03-icons.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan vendor:publish --tag=blade-icons\n```\n\n----------------------------------------\n\nTITLE: Adding Bullet Points to a List in Filament PHP Text Column\nDESCRIPTION: This code snippet shows how to add bullet points to each list item when displaying multiple values on separate lines, using the `bulleted()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n    ->bulleted()\n```\n\n----------------------------------------\n\nTITLE: Setting up Authentication for Tests (PHP)\nDESCRIPTION: This code snippet demonstrates how to authenticate a user in the setUp method of a test case, ensuring that the application is accessed with valid credentials during testing. This is a common prerequisite for testing protected routes and functionalities.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function setUp(): void\n{\n    parent::setUp();\n\n    $this->actingAs(User::factory()->create());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament User\nDESCRIPTION: This Artisan command creates a new user account specifically designed for accessing the Filament admin panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-user\n```\n\n----------------------------------------\n\nTITLE: Read-Only Textarea (Filament/PHP)\nDESCRIPTION: This code makes the textarea read-only. The field's value will still be submitted with the form, but the user cannot directly edit it. To prevent submission, use `dehydrated(false)`.  This requires the Filament Forms package to be installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/15-textarea.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Textarea;\n\nTextarea::make('description')\n    ->readOnly()\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Size PHP\nDESCRIPTION: Sets the size of an IconEntry to 'Medium'. The `size()` method accepts a value from the `IconEntry\\IconEntrySize` enum, which includes options such as `ExtraSmall`, `Small`, `Medium`, `ExtraLarge`, and `TwoExtraLarge`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/03-icon.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('status')\n    ->size(IconEntry\\IconEntrySize::Medium)\n```\n\n----------------------------------------\n\nTITLE: Routing to Full-Page Livewire Component (PHP)\nDESCRIPTION: This snippet defines a route that renders the `CreatePost` Livewire component as a full page. It uses the `Route` facade to associate the `/posts/create` URL with the `CreatePost` component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\CreatePost;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('posts/create', CreatePost::class);\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom User Model (PHP)\nDESCRIPTION: This code shows how to bind a new Authenticatable model to the container, allowing you to use a custom user model instead of the default `App\\Models\\User` for export ownership. This is done in a service provider's `register()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Admin;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\n\n$this->app->bind(Authenticatable::class, Admin::class);\n```\n\n----------------------------------------\n\nTITLE: Applying Default Values to Select Filter in Filament\nDESCRIPTION: These snippets show how to set default values for both single and multiple select filters using the `default()` method. For single select, it accepts a single option value. For multiple select, it accepts an array of option values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/02-select.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\SelectFilter;\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->default('draft')\n\nSelectFilter::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->multiple()\n    ->default(['draft', 'reviewing'])\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Loading (PHP)\nDESCRIPTION: This snippet shows how to disable lazy loading for a chart widget by overriding the `$isLazy` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nprotected static bool $isLazy = true;\n```\n\n----------------------------------------\n\nTITLE: Install Filament with scaffolding (new project)\nDESCRIPTION: These commands are used in new Laravel projects to quickly install Filament, Livewire, Alpine.js, and Tailwind CSS, including scaffolding.  Since these commands will overwrite existing files in your application, only run this in a new Laravel project!\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --scaffold --widgets\n\nnpm install\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Closure Rules in Filament\nDESCRIPTION: Demonstrates using a closure-based validation rule in a Filament form. This allows for dynamic validation logic. If the value is 'foo', the validation fails with a custom message. `slug` field of a TextInput component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse Closure;\n\nTextInput::make('slug')->rules([\n    fn (): Closure => function (string $attribute, $value, Closure $fail) {\n        if ($value === 'foo') {\n            $fail('The :attribute is invalid.');\n        }\n    },\n])\n```\n\n----------------------------------------\n\nTITLE: Rendering the Table in the Livewire Component's View\nDESCRIPTION: This Blade snippet renders the Filament table within the Livewire component's view.  It references the `$this->table` property, which is automatically set by the `InteractsWithTable` trait.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    {{ $this->table }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Controlling horizontal alignment of actions in Filament\nDESCRIPTION: This snippet demonstrates how to control the horizontal alignment of independent infolist actions using the `alignment()` method and the `Alignment` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions;\nuse Filament\\Support\\Enums\\Alignment;\n\nActions::make([\n    // ...\n])->alignment(Alignment::Center),\n```\n\n----------------------------------------\n\nTITLE: ExportAction in Table Header\nDESCRIPTION: This PHP code demonstrates how to add an `ExportAction` to the header of a Filament table.  The `exporter()` method is chained to specify the `ProductExporter` class which handles the export logic.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Exports\\ProductExporter;\nuse Filament\\Tables\\Actions\\ExportAction;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->headerActions([\n            ExportAction::make()\n                ->exporter(ProductExporter::class)\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Infolist via Array (PHP)\nDESCRIPTION: Demonstrates passing data to the infolist using an array passed to the `state()` method. This allows manual mapping of data to entries in the infolist's schema, also using TextEntry components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Filament\\Infolists\\Infolist;\n\npublic function productInfolist(Infolist $infolist): Infolist\n{\n    return $infolist\n        ->state([\n            'name' => 'MacBook Pro',\n            'category' => [\n                'name' => 'Laptops',\n            ],\n            // ...\n        ])\n        ->schema([\n            TextEntry::make('name'),\n            TextEntry::make('category.name'),\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Of Validation - Filament\nDESCRIPTION: Validates that the field is a multiple of a given value. It uses the `multipleOf()` method, taking the value to check against as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nField::make('number')->multipleOf(2)\n```\n\n----------------------------------------\n\nTITLE: Install Filament Google Fonts Plugin\nDESCRIPTION: This command installs the Filament Spatie Google Fonts plugin using Composer. The -W flag ensures that dependencies are updated during the installation process.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-google-fonts-plugin/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require filament/spatie-laravel-google-fonts-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Making Columns Sortable in Patient Table - PHP\nDESCRIPTION: This snippet shows how to enable sorting of patients in the Filament table by age, by adding the `sortable()` method to the `date_of_birth` column.  This will add a sort icon to the column header, and clicking it will sort the table by date of birth.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic static function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Tables\\Columns\\TextColumn::make('name')\n                ->searchable(),\n            Tables\\Columns\\TextColumn::make('type'),\n            Tables\\Columns\\TextColumn::make('date_of_birth')\n                ->sortable(),\n            Tables\\Columns\\TextColumn::make('owner.name')\n                ->searchable(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a registered action in a Blade view in Filament\nDESCRIPTION: This snippet shows how to render an action within the view of a custom component. It calls `$getAction()` with the name of the registered action ('createStatus') to render the action button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <select></select>\n    \n    {{ $getAction('createStatus') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Check for Missing Spanish Translations\nDESCRIPTION: This Artisan command checks for missing Spanish translations in Filament. It allows you to contribute to the translation of the Filament packages by identifying missing translations for the specified locale ('es' for Spanish).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:check-translations es\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Record in Livewire Component's mount() Method (PHP)\nDESCRIPTION: This snippet demonstrates accessing the current Eloquent record within the Livewire component's `mount()` method using type hinting. The record is passed as a `Model` instance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Foo extends Component\n{\n    public function mount(Model $record): void\n    {\n        // ...\n    }\n\n    // or\n\n    public Model $record;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting form columns\nDESCRIPTION: This code snippet demonstrates how to set the number of columns for a form using the `columns()` method. It allows for controlling the layout of form fields.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$form\n    ->schema([\n        // ...\n    ])\n    ->columns(2);\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Values as JSON\nDESCRIPTION: This PHP code shows how to export multiple values in a cell as a JSON array using the `listAsJson()` method. By default, multiple values are comma-separated, but this method changes the format to JSON, which can be more suitable for structured data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('tags')\n    ->listAsJson()\n```\n\n----------------------------------------\n\nTITLE: Customizing the Entire Filament Table Header (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the entire header of a Filament table using the `$table->header()` method. It allows you to pass a view for complete control over the header's content and styling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->header(view('tables.header', [\n            'heading' => 'Clients',\n        ]))\n        ->columns([\n            // ...\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Make Filament Settings Page\nDESCRIPTION: Creates a new Filament settings page using the `artisan make:filament-settings-page` command. This command generates a new settings page class in the `app/Filament/Pages` directory. It requires the `FooterSettings` class to exist in the `app/Settings` directory.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-settings-page ManageFooter FooterSettings\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom User Model to Imports in Filament (PHP)\nDESCRIPTION: This code demonstrates how to bind a custom authenticatable model (Admin) to the container, allowing Filament's import functionality to use the custom model instead of the default User model. It is typically done within a service provider's register() method to ensure the binding is available throughout the application. Requires the Illuminate Contracts Auth Authenticatable interface.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Admin;\nuse Illuminate\\Contracts\\Auth\\Authenticatable;\n\n$this->app->bind(Authenticatable::class, Admin::class);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Notification View in Filament (PHP)\nDESCRIPTION: This code snippet shows how to configure a custom view for rendering notifications using the static `configureUsing()` method inside a service provider's `boot()` method. It specifies the view to use. The custom view should utilize the package's base notification component for the notification functionality and pass the available `$notification` variable through the `notification` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/05-customizing-notifications.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::configureUsing(function (Notification $notification): void {\n    $notification->view('filament.notifications.notification');\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Filament Action using Pest\nDESCRIPTION: This snippet showcases how to pass an array of data into a Filament action using the `data` parameter in Pest. It creates an invoice, mounts the `EditInvoice` Livewire component, calls the 'send' action with an email address as data, asserts that no action errors occurred, and verifies that the invoice's `recipient_email` matches the provided email.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callAction('send', data: [\n            'email' => $email = fake()->email(),\n        ])\n        ->assertHasNoActionErrors();\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue()\n        ->recipient_email->toBe($email);\n});\n```\n\n----------------------------------------\n\nTITLE: Run npm dev script\nDESCRIPTION: This command runs the `dev` script defined in the `package.json` file. Typically, this script compiles the project's assets, such as CSS and JavaScript, and prepares them for development. It uses tools like Vite or Webpack.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Hidden (Repetition) using Pest\nDESCRIPTION: This snippet shows how to assert that a Filament action is hidden using `assertActionHidden()`. It creates an invoice, mounts the `EditInvoice` Livewire component, and asserts that the 'send' action is hidden.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can not send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHidden('send');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value\nDESCRIPTION: Sets a default value for a TextEntry when its state is empty. The `default()` method provides a fallback value. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->default('Untitled')\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Managers for a View Page (Filament)\nDESCRIPTION: This code shows how to specify which relation managers should appear on a specific View page using the `getAllRelationManagers()` method. This allows for different View pages to display different sets of related data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected function getAllRelationManagers(): array\n{\n    return [\n        CustomerAddressesRelationManager::class,\n        CustomerContactsRelationManager::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page Title (Property) (PHP)\nDESCRIPTION: This code shows how to customize the page title by defining a `$title` property on the page class.  This will override the default title generated by Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $title = 'Custom Page Title';\n```\n\n----------------------------------------\n\nTITLE: Customizing the Page URL (Slug) (PHP)\nDESCRIPTION: Demonstrates setting a custom URL slug for a Filament page by defining the `$slug` property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static ?string $slug = 'custom-url-slug';\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Text to Field - Filament PHP\nDESCRIPTION: This code demonstrates how to place text before and after the input using the `prefix()` and `suffix()` methods, adding context or units to the select field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/03-select.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Select;\n\nSelect::make('domain')\n    ->prefix('https://')\n    ->suffix('.com')\n```\n\n----------------------------------------\n\nTITLE: Displaying Square Image in Filament (PHP)\nDESCRIPTION: Shows how to display an image with a 1:1 aspect ratio using the square() method.  This is useful for creating square avatars or thumbnails.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('author.avatar')\n    ->height(40)\n    ->square()\n```\n\n----------------------------------------\n\nTITLE: Custom Field Class Definition - PHP\nDESCRIPTION: This snippet shows the basic structure of a custom field class in Filament. It extends the `Field` class and defines the `view` property, which specifies the path to the Blade template used to render the field. You can add further customization such as methods to modify the field's behavior.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Field;\n\nclass RangeSlider extends Field\n{\n    protected string $view = 'filament.forms.components.range-slider';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Value Column Label in Key-Value Entry\nDESCRIPTION: This snippet shows how to customize the label for the value column in the KeyValueEntry component.  It uses the `valueLabel()` method to change it to 'Property value'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/06-key-value.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\KeyValueEntry;\n\nKeyValueEntry::make('meta')\n    ->valueLabel('Property value')\n```\n\n----------------------------------------\n\nTITLE: Disabling UUID Generation for Builder Tests (PHP)\nDESCRIPTION: This snippet demonstrates how to disable UUID generation in Filament Builder components for testing purposes.  It uses the `Builder::fake()` method to replace UUIDs with numeric keys, making tests more predictable.  The `assertFormSet` method is then used to verify the form's initial state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse function Pest\\Livewire\\livewire;\n\n$undoBuilderFake = Builder::fake();\n\nlivewire(EditPost::class, ['record' => $post])\n    ->assertFormSet([\n        'content' => [\n            [\n                'type' => 'heading',\n                'data' => [\n                    'content' => 'Hello, world!',\n                    'level' => 'h1',\n                ],\n            ],\n            [\n                'type' => 'paragraph',\n                'data' => [\n                    'content' => 'This is a test post.',\n                ],\n            ],\n        ],\n        // ...\n    ]);\n\n$undoBuilderFake();\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Default Action (PHP)\nDESCRIPTION: Demonstrates passing arguments to the default action on page load using `$defaultActionArguments`. This can be used to control the initial state of the action modal.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic $defaultActionArguments = ['step' => 2];\n```\n\n----------------------------------------\n\nTITLE: Install Filament in New Laravel Projects\nDESCRIPTION: This set of commands scaffolds Filament in a new Laravel project, installing Livewire, Alpine.js, and Tailwind CSS. It overwrites existing files, so it's only suitable for new projects. It includes installing the assets and then building those assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --scaffold --infolists\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: RepeatableEntry without styled container (PHP)\nDESCRIPTION: This code demonstrates how to remove the default styled container (card) that wraps each item in a RepeatableEntry. By using the `contained(false)` method, the items are rendered without the default card styling, which is useful for custom styling or integration into other layouts.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/07-repeatable.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\RepeatableEntry;\n\nRepeatableEntry::make('comments')\n    ->schema([\n        // ...\n    ])\n    ->contained(false)\n```\n\n----------------------------------------\n\nTITLE: Adding extra attributes to the body tag with getExtraBodyAttributes() - PHP\nDESCRIPTION: This snippet demonstrates how to add extra attributes to the `<body>` tag of a Filament page by defining a `getExtraBodyAttributes()` method that returns an array of attributes and their values. This allows for dynamic generation of attributes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function getExtraBodyAttributes(): array\n{\n    return [\n        'class' => 'settings-page',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using InteractsWithRecord Trait (PHP)\nDESCRIPTION: This snippet shows how to use the `InteractsWithRecord` trait in a custom page to work with a resource record. The `mount()` method resolves the record from the URL and stores it for later access.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/10-custom-pages.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Pages\\Page;\nuse Filament\\Resources\\Pages\\Concerns\\InteractsWithRecord;\n\nclass ManageUser extends Page\n{\n    use InteractsWithRecord;\n    \n    public function mount(int | string $record): void\n    {\n        $this->record = $this->resolveRecord($record);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Model Attribute from JavaScript - PHP\nDESCRIPTION: This code snippet demonstrates how to remove a model attribute from being exposed to JavaScript on Filament's Edit and View pages. By overriding the `mutateFormDataBeforeFill()` method, you can unset specific attributes before the form is filled, preventing them from being accessible in JavaScript. This example removes the `is_admin` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/11-security.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function mutateFormDataBeforeFill(array $data): array\n{\n    unset($data['is_admin']);\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a field as required and hiding the asterisk in Filament Forms (PHP)\nDESCRIPTION: This code snippet demonstrates how to mark a text input field as required in a Filament form and then hide the asterisk that indicates it is required. It uses the `required()` method to add validation and the `markAsRequired(false)` method to remove the asterisk from the label. Dependencies: Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->required() // Adds validation to ensure the field is required\n    ->markAsRequired(false) // Removes the asterisk\n```\n\n----------------------------------------\n\nTITLE: Configuring global checkbox settings in Filament Forms (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure the default behavior of checkboxes globally within a Filament application. The `configureUsing()` method is used to apply a modification to all checkbox components. It should be placed inside a service provider's `boot()` method or in middleware. Dependencies: Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::configureUsing(function (Checkbox $checkbox): void {\n    $checkbox->inline(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Publish Tags Migration\nDESCRIPTION: Publishes the migration file from Spatie's Laravel Tags package. This allows you to create the `tags` table in your database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Tags\\TagsServiceProvider\" --tag=\"tags-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Triggering an Action from JavaScript (JS)\nDESCRIPTION: This JavaScript code uses the `$wire` utility (provided by Livewire) to trigger the 'test' action programmatically. It passes the action name and an object containing the arguments.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n$wire.mountAction('test', { id: 12345 })\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting with Callback - PHP\nDESCRIPTION: This snippet uses a custom formatting callback to modify the state of the TextEntry before displaying it.  It translates a status code using a localization function.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('status')\n    ->formatStateUsing(fn (string $state): string => __(\"statuses.{$state}\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Size in a Text Entry (Filament, PHP)\nDESCRIPTION: This code snippet shows how to change the text size of a Filament Infolists text entry using the `size()` method. The title field is set to a large font size. It requires Filament Infolists and the TextEntrySize enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->size(TextEntry\\TextEntrySize::Large)\n```\n\n----------------------------------------\n\nTITLE: Using Local Font Provider - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to use a local font provider in a FilamentPHP panel. It specifies the font, the URL of the local stylesheet containing the font definitions, and uses the `LocalFontProvider` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\FontProviders\\LocalFontProvider;\n\n$panel->font(\n    'Inter',\n    url: asset('css/fonts.css'),\n    provider: LocalFontProvider::class,\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a render hook with multiple scopes in Filament PHP\nDESCRIPTION: This code snippet shows how to register a render hook with multiple scopes using an array. The hook, associated with `PanelsRenderHook::PAGE_START` and the `warning-banner` view, will be rendered on both the `CreateUser` and `EditUser` pages of the `UserResource`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (): View => view('warning-banner'),\n    scopes: [\n        \\App\\Filament\\Resources\\UserResource\\Pages\\CreateUser::class,\n        \\App\\Filament\\Resources\\UserResource\\Pages\\EditUser::class,\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Submit Button on the Last Wizard Step in PHP\nDESCRIPTION: This snippet demonstrates how to render a submit button on the last step of a Filament Wizard using the `submitAction()` method. It shows two approaches: using a Blade view and using an HtmlString with HTML content for the button. This allows for customization of the submit button's appearance and functionality.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\nuse Illuminate\\Support\\HtmlString;\n\nWizard::make([\n    // ...\n])->submitAction(view('order-form.submit-button'))\n\nWizard::make([\n    // ...\n])->submitAction(new HtmlString('<button type=\"submit\">Submit</button>'))\n```\n\n----------------------------------------\n\nTITLE: Persisting Tab in Query String with Custom Key - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to persist the current tab in the URL's query string using a custom key for a Filament infolist Tabs component. The `persistTabInQueryString()` method is used with the custom key as an argument. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n    ->persistTabInQueryString('settings-tab')\n```\n\n----------------------------------------\n\nTITLE: Initializing Radio with Options in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to initialize a Radio form component in Filament with predefined options. It uses the `Radio::make()` method to create the component and the `options()` method to define the available choices for the radio button group. The selected value will be bound to the 'status' property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/07-radio.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Radio;\n\nRadio::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published'\n    ])\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Enablement in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert if Filament form component actions are enabled or disabled based on specific conditions using Pest and Livewire. It creates an invoice and asserts that the 'send' action is disabled for the 'customer_id' component, while the 'print' action is enabled.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print a customer for a sent invoice', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionDisabled('customer_id', 'send')\n        ->assertFormComponentActionEnabled('customer_id', 'print');\n});\n```\n\n----------------------------------------\n\nTITLE: Install Filament Spatie Tags Plugin\nDESCRIPTION: Installs the Filament Spatie Tags plugin using Composer. This command adds the plugin as a dependency to your project.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-tags-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Using Compact Section Styling in Filament Infolists (PHP)\nDESCRIPTION: This code demonstrates how to use a more compact styling for nested sections in Filament infolists using the `compact()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Rate limiting')\n    ->description('Prevent abuse by limiting the number of requests per period')\n    ->schema([\n        // ...\n    ])\n    ->compact()\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Entry Word Count - PHP\nDESCRIPTION: This snippet demonstrates limiting the number of words displayed in a TextEntry using the `words()` method. The 'description' field will be limited to 10 words.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->words(10)\n```\n\n----------------------------------------\n\nTITLE: Reordering Items with Buttons\nDESCRIPTION: This snippet enables reordering of items using dedicated up and down buttons instead of drag and drop, by calling the `reorderableWithButtons()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->reorderableWithButtons()\n```\n\n----------------------------------------\n\nTITLE: Toggle with Icons PHP\nDESCRIPTION: This snippet demonstrates how to add icons to a Toggle component for the 'on' and 'off' states. The `onIcon()` and `offIcon()` methods are used to specify the icons.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->onIcon('heroicon-m-bolt')\n    ->offIcon('heroicon-m-user')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Empty State View in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to use a custom view for the empty state of a Filament table using the `emptyState()` method. It takes a view name as input, which will be rendered when the table is empty. The code requires the `Filament\\Tables\\Table` and `Filament\\Tables\\Actions\\Action` classes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/09-empty-state.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyState(view('tables.posts.empty-state'));\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsing All Repeater Items by Default - PHP\nDESCRIPTION: This code demonstrates how to collapse all repeater items by default when the form is loaded, using the `collapsed()` method. This provides a way to initially hide all repeater content, which can be helpful for forms with a large number of repeater items.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('qualifications')\n    ->schema([\n        // ...\n    ])\n    ->collapsed()\n```\n\n----------------------------------------\n\nTITLE: Responsive Widgets Grid in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to change the number of widget grid columns based on the responsive breakpoint of the browser using an array that contains the number of columns that should be used at each breakpoint (md and xl).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getColumns(): int | string | array\n{\n    return [\n        'md' => 4,\n        'xl' => 5,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing data to View Fields - PHP\nDESCRIPTION: This snippet demonstrates how to pass data to a view field in Filament using the `viewData()` method. It allows you to provide an array of data that will be accessible within the Blade template rendered by the `ViewField` component. This is useful for configuring the field's behavior or appearance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\ViewField;\n\nViewField::make('rating')\n    ->view('filament.forms.components.range-slider')\n    ->viewData([\n        'min' => 1,\n        'max' => 5,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Build CSS\nDESCRIPTION: Command to build CSS file using npm run build command.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Listing Multiple Values with Line Breaks in Filament PHP\nDESCRIPTION: This snippet shows how to display multiple values in a TextColumn on separate lines instead of comma-separated, using the `listWithLineBreaks()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon\nDESCRIPTION: Explains how to add an icon to a Filament button using the `icon` attribute, leveraging Blade UI Kit icons.  Also demonstrates how to change the icon position.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button icon=\"heroicon-m-sparkles\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Opening Record URL in New Tab in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to configure a Filament table to open record URLs in a new tab when a row is clicked, using the `openRecordUrlInNewTab()` method.  This method changes the behavior defined by the `recordUrl()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->openRecordUrlInNewTab();\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing HTML in CheckboxList Option Labels - PHP\nDESCRIPTION: This snippet demonstrates how to allow HTML in the labels of CheckboxList options using the `allowHtml()` method. This is useful for styling the labels with HTML tags, but requires careful attention to security to prevent XSS attacks.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technology')\n    ->options([\n        'tailwind' => '<span class=\"text-blue-500\">Tailwind</span>',\n        'alpine' => '<span class=\"text-green-500\">Alpine</span>',\n        'laravel' => '<span class=\"text-red-500\">Laravel</span>',\n        'livewire' => '<span class=\"text-pink-500\">Livewire</span>',\n    ])\n    ->searchable()\n    ->allowHtml()\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Color with Pest\nDESCRIPTION: This snippet shows how to assert that an infolist action's button is displaying the right color. It verifies that the 'delete' action has the color 'danger' and the 'print' action does not have the color 'danger'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('actions display proper colors', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionHasColor('customer', 'delete', 'danger')\n        ->assertInfolistActionDoesNotHaveColor('customer', 'print', 'danger');\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering the Filament Form in the View (Blade)\nDESCRIPTION: This snippet demonstrates how to render the Filament form within a Livewire component's Blade view. It includes a form element with a `wire:submit` directive that calls the `create` method in the Livewire component. It also renders the Filament form and action modals.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <form wire:submit=\"create\">\n        {{ $this->form }}\n        \n        <button type=\"submit\">\n            Submit\n        </button>\n    </form>\n    \n    <x-filament-actions::modals />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling Form Component Action in Filament PHP\nDESCRIPTION: This snippet demonstrates how to call a form component action within a Filament Livewire component using Pest. It creates an invoice, calls the 'send' action on the 'customer_id' form component, and asserts that the invoice's 'isSent' status is updated to true.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callFormComponentAction('customer_id', 'send');\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for auto-refresh\nDESCRIPTION: This JavaScript code configures Vite to automatically refresh the page when Livewire components are updated. It uses the `laravel-vite-plugin` to define the input files and refresh paths, including Livewire components in the `app/Livewire` directory.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport laravel, { refreshPaths } from 'laravel-vite-plugin'\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: [\n                ...refreshPaths,\n                'app/Livewire/**',\n            ],\n        }),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: RepeatableEntry with grid layout (PHP)\nDESCRIPTION: This snippet shows how to use the `grid()` method to organize the items in a RepeatableEntry into a grid layout. The `grid(2)` configuration creates a two-column grid for the repeatable items. This provides a way to responsively organize the displayed data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/07-repeatable.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\RepeatableEntry;\n\nRepeatableEntry::make('comments')\n    ->schema([\n        // ...\n    ])\n    ->grid(2)\n```\n\n----------------------------------------\n\nTITLE: Constraining User ID to a Custom Table (PHP)\nDESCRIPTION: This demonstrates how to constrain the `user_id` foreign key in the `exports` table to a different table (e.g., 'admins') if your authenticatable model uses a table other than 'users'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$table->foreignId('user_id')->constrained('admins')->cascadeOnDelete();\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal with JavaScript (Blade)\nDESCRIPTION: Illustrates how to control a Filament modal using JavaScript by dispatching browser events. First, the modal is given an ID. Then, JavaScript is used to dispatch an `open-modal` or `close-modal` event, passing the modal's ID as a parameter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal id=\"edit-user\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Aligning Footer Actions in Filament Infolists (PHP)\nDESCRIPTION: This code shows how to customize the alignment of footer actions within a Filament infolist section using the `footerActionsAlignment()` method and the `Filament\\Support\\Enums\\Alignment` enum.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\Section;\nuse Filament\\Support\\Enums\\Alignment;\n\nSection::make('Rate limiting')\n    ->footerActions([\n        Action::make('edit')\n            ->action(function () {\n                // ...\n            }),\n    ])\n    ->footerActionsAlignment(Alignment::End)\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Preventing Next Step from Loading in Filament Wizard in PHP\nDESCRIPTION: This snippet shows how to prevent the wizard from loading the next step by throwing the `Filament\\Support\\Exceptions\\Halt` exception within the `afterValidation()` or `beforeValidation()` methods.  This can be used to implement conditional navigation based on validation results or other factors.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/05-wizard.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Wizard;\nuse Filament\\Support\\Exceptions\\Halt;\n\nWizard\\Step::make('Order')\n    ->afterValidation(function () {\n        // ...\n\n        if (true) {\n            throw new Halt();\n        }\n    })\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Using the filament icon Blade component\nDESCRIPTION: This code demonstrates the usage of the `<x-filament::icon>` Blade component with `alias` and `icon` attributes. This component is used to replace the default icons with custom ones. The `alias` attribute is a unique identifier for the icon in the Filament UI and `icon` attribute is the name of a Blade icon to replace it instead.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/03-icons.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon\n    alias=\"panels::topbar.global-search.field\"\n    icon=\"heroicon-m-magnifying-glass\"\n    wire:target=\"search\"\n    class=\"h-5 w-5 text-gray-500 dark:text-gray-400\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Repeater with BelongsToMany via HasMany - PHP\nDESCRIPTION: This snippet shows how to use the `orderProducts` relationship with the repeater, allowing data to be saved to the `order_product` pivot table.  It includes a `Select` component for the `product_id` field, establishing a relationship with the `Product` model.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\Select;\n\nRepeater::make('orderProducts')\n    ->relationship()\n    ->schema([\n        Select::make('product_id')\n            ->relationship('product', 'name')\n            ->required(),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Icon in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action's button displays the correct icon using Pest and Livewire. It creates an invoice and asserts that when the 'send' action is enabled for the 'customer_id' component, it has the 'envelope-open' icon and does not have the 'envelope' icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('when enabled the send button has correct icon', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionEnabled('customer_id', 'send')\n        ->assertFormComponentActionHasIcon('customer_id', 'send', 'envelope-open')\n        ->assertFormComponentActionDoesNotHaveIcon('customer_id', 'send', 'envelope');\n});\n```\n\n----------------------------------------\n\nTITLE: Determining Relationship Existence with Scope\nDESCRIPTION: This PHP code demonstrates how to determine whether related records exist with a scope. An array is passed to the `exists` method, where the key is the relationship name and the value is a function that scopes the Eloquent query.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nExportColumn::make('users_exists')->exists([\n    'users' => fn (Builder $query) => $query->where('is_active', true),\n])\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of Values in a List - PHP\nDESCRIPTION: This snippet limits the number of displayed items in a list using the `limitList()` method. Only the first 3 author names will be displayed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n```\n\n----------------------------------------\n\nTITLE: Not In Validation - Filament\nDESCRIPTION: Validates that the field is not included in the given list of values. It uses the `notIn()` method, accepting an array of disallowed values.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nField::make('status')->notIn(['cancelled', 'rejected'])\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Columns in Fieldset (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the number of grid columns within a Fieldset in Filament Infolists. The `columns()` method is used to specify the desired number of columns. This allows flexible layout control within the Fieldset component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/03-fieldset.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Fieldset;\n\nFieldset::make('Label')\n    ->schema([\n        // ...\n    ])\n    ->columns(3)\n```\n\n----------------------------------------\n\nTITLE: Defining action URL with dependency injection (PHP)\nDESCRIPTION: This code snippet demonstrates how to define an action URL using a closure that receives the Livewire component instance via dependency injection, allowing dynamic routing based on component properties. It shows how to use the $this keyword within the closure to access the 'post' property.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->label('Edit post')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix Icon to TimePicker in Filament\nDESCRIPTION: This snippet demonstrates how to add a prefix icon to a TimePicker component using the `prefixIcon()` method. The icon is specified by its name from a blade-icons set.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TimePicker;\n\nTimePicker::make('at')\n    ->prefixIcon('heroicon-m-play')\n```\n\n----------------------------------------\n\nTITLE: Using Filament Loading Indicator in Blade\nDESCRIPTION: This code snippet demonstrates how to use the Filament loading indicator Blade component. It uses the `<x-filament::loading-indicator>` tag to render the animated SVG. The `class` attribute is used to set the height and width of the indicator.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-loading-indicator.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<x-filament::loading-indicator class=\"h-5 w-5\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Ternary Filter Labels - PHP\nDESCRIPTION: This code snippet illustrates how to customize the labels for each state of the ternary filter using the `placeholder()`, `trueLabel()`, and `falseLabel()` methods. The `label()` method is used to define a generic label for the filter itself.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/03-ternary.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Tables\\Filters\\TernaryFilter;\n\nTernaryFilter::make('email_verified_at')\n    ->label('Email verification')\n    ->nullable()\n    ->placeholder('All users')\n    ->trueLabel('Verified users')\n    ->falseLabel('Not verified users')\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple View Pages (Filament)\nDESCRIPTION: This code demonstrates how to register multiple View pages in the `getPages()` method of a Filament resource. This allows for different routes to access different views of the same resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic static function getPages(): array\n{\n    return [\n        'index' => Pages\\ListCustomers::route('/'),\n        'create' => Pages\\CreateCustomer::route('/create'),\n        'view' => Pages\\ViewCustomer::route('/{record}'),\n        'view-contact' => Pages\\ViewCustomerContact::route('/{record}/contact'),\n        'edit' => Pages\\EditCustomer::route('/{record}/edit'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Notification ID in PHP (Filament)\nDESCRIPTION: This PHP code demonstrates how to get the ID of a Filament notification after sending it. The `getId()` method is used to retrieve the unique ID, which can then be used to close the notification later. Dependencies: Filament\\Notifications\\Notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$notification = Notification::make()\n    ->title('Hello')\n    ->persistent()\n    ->send()\n\n$notificationId = $notification->getId()\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Status - JavaScript\nDESCRIPTION: This snippet demonstrates setting a notification status using JavaScript with Filament. It uses the `success()` method, streamlining the process of indicating a successful operation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Disabling Block Numbers\nDESCRIPTION: This snippet demonstrates how to disable the numbering of builder items using the `blockNumbers(false)` method. This is useful for removing visual clutter when the order of items is not critical.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\n\nBuilder::make('content')\n    ->blocks([\n        // ...\n    ])\n    ->blockNumbers(false)\n```\n\n----------------------------------------\n\nTITLE: Key-Value Entry Implementation in Filament PHP\nDESCRIPTION: This code snippet demonstrates how to create a KeyValueEntry component in Filament to display data from a 'meta' property. It assumes that the 'meta' property contains an array of key-value pairs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/06-key-value.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\KeyValueEntry;\n\nKeyValueEntry::make('meta')\n```\n\n----------------------------------------\n\nTITLE: Disabling a Button - Filament\nDESCRIPTION: Demonstrates how to disable a button using the `disabled()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nAction::make('delete')\n    ->disabled()\n```\n\n----------------------------------------\n\nTITLE: Enabling Copy to Clipboard (PHP)\nDESCRIPTION: This code snippet demonstrates how to make a Filament table text column copyable to the clipboard using the `copyable()` method. It also shows how to customize the confirmation message and duration. SSL is required for this functionality. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->copyable()\n    ->copyMessage('Email address copied')\n    ->copyMessageDuration(1500)\n```\n\n----------------------------------------\n\nTITLE: Configure tailwind.config.js with Filament Preset\nDESCRIPTION: This JavaScript configuration file sets up Tailwind CSS with the Filament preset, including color schemes and required plugins. The content array specifies the files to be scanned for Tailwind class names within the Filament directory.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport preset from './vendor/filament/support/tailwind.config.preset'\n\nexport default {\n    presets: [preset],\n    content: [\n        './app/Filament/**/*.php',\n        './resources/views/filament/**/*.blade.php',\n        './vendor/filament/**/*.blade.php',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Wrapper Usage Blade\nDESCRIPTION: Demonstrates the basic usage of the input wrapper component with both a text input and a select input. It showcases how to wrap standard input elements with the Filament input wrapper for consistent styling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n    />\n</x-filament::input.wrapper>\n\n<x-filament::input.wrapper>\n    <x-filament::input.select wire:model=\"status\">\n        <option value=\"draft\">Draft</option>\n        <option value=\"reviewing\">Reviewing</option>\n        <option value=\"published\">Published</option>\n    </x-filament::input.select>\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Aligning Stacked Content in Filament Tables\nDESCRIPTION: This snippet shows how to align the contents of a `Stack` to the end (right) using the `alignment()` method with `Alignment::End`. The `grow(false)` calls are essential to prevent the child columns from stretching and ignoring the stack's alignment.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\Alignment;\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\Stack;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nSplit::make([\n    ImageColumn::make('avatar')\n        ->circular(),\n    TextColumn::make('name')\n        ->weight(FontWeight::Bold)\n        ->searchable()\n        ->sortable(),\n    Stack::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone')\n            ->grow(false),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope')\n            ->grow(false),\n    ])\n        ->alignment(Alignment::End)\n        ->visibleFrom('md'),\n])\n```\n\n----------------------------------------\n\nTITLE: Rendering Unsanitized HTML Content - PHP\nDESCRIPTION: This snippet demonstrates how to render unsanitized HTML content within a TextEntry by wrapping the HTML in an `HtmlString` object. This allows rendering potentially unsafe HTML, so use with caution.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Illuminate\\Support\\HtmlString;\n\nTextEntry::make('description')\n    ->formatStateUsing(fn (string $state): HtmlString => new HtmlString($state))\n```\n\n----------------------------------------\n\nTITLE: Validating Select Column Input\nDESCRIPTION: This code snippet demonstrates how to add validation rules to a Select column. It uses Laravel's validation rules to ensure the 'status' field is required.  This prevents empty or null values from being saved to the database for this column.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/06-select.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SelectColumn;\n\nSelectColumn::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'reviewing' => 'Reviewing',\n        'published' => 'Published',\n    ])\n    ->rules(['required'])\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Retry Time in Filament Importer (PHP)\nDESCRIPTION: This code shows how to customize the retry time for jobs of a specific importer by overriding the `getJobRetryUntil()` method in the importer class. This allows adjusting how long the system will retry a failed job before giving up. Requires the CarbonInterface class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\CarbonInterface;\n\npublic function getJobRetryUntil(): ?CarbonInterface\n{\n    return now()->addDay();\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Notifications in Filament (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure the alignment of notifications using `Notifications::alignment()` and `Notifications::verticalAlignment()` within a service provider or middleware. It shows how to pass `Alignment::Start`, `Alignment::Center`, `Alignment::End`, `VerticalAlignment::Start`, `VerticalAlignment::Center` or `VerticalAlignment::End`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/05-customizing-notifications.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Livewire\\Notifications;\nuse Filament\\Support\\Enums\\Alignment;\nuse Filament\\Support\\Enums\\VerticalAlignment;\n\nNotifications::alignment(Alignment::Start);\nNotifications::verticalAlignment(VerticalAlignment::End);\n```\n\n----------------------------------------\n\nTITLE: Creating Additional View Pages (Artisan)\nDESCRIPTION: This command creates another View page for the same resource.  This allows creating specialized views with different data or functionalities.  The `--resource` option links the new page to the existing resource, and the `--type=ViewRecord` specifies the page type.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page ViewCustomerContact --resource=CustomerResource --type=ViewRecord\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action URL in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert that a Filament form component action has the correct URL and target using Pest and Livewire. It creates an invoice and asserts that the 'filament' action for the 'customer_id' component links to 'https://filamentphp.com/', does not link to 'https://github.com/filamentphp/filament', should open in a new tab, and the 'github' action should not open in a new tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('links to the correct Filament sites', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionHasUrl('customer_id', 'filament', 'https://filamentphp.com/')\n        ->assertFormComponentActionDoesNotHaveUrl('customer_id', 'filament', 'https://github.com/filamentphp/filament')\n        ->assertFormComponentActionShouldOpenUrlInNewTab('customer_id', 'filament')\n        ->assertFormComponentActionShouldNotOpenUrlInNewTab('customer_id', 'github');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Exists/Does Not Exist using Pest\nDESCRIPTION: This snippet shows how to assert the existence or non-existence of a Filament action using `assertActionExists()` and `assertActionDoesNotExist()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'send' action exists, and asserts that the 'unsend' action does not exist.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send but not unsend invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionExists('send')\n        ->assertActionDoesNotExist('unsend');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Entry Configuration PHP\nDESCRIPTION: Configures an IconEntry to display different icons based on the 'status' field value.  It uses a closure to map status strings to heroicon names. $state holds the field value, and $record allows accessing the Eloquent record.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/03-icon.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('status')\n    ->icon(fn (string $state): string => match ($state) {\n        'draft' => 'heroicon-o-pencil',\n        'reviewing' => 'heroicon-o-clock',\n        'published' => 'heroicon-o-check-circle',\n    })\n```\n\n----------------------------------------\n\nTITLE: Overwriting global checkbox settings in Filament Forms (PHP)\nDESCRIPTION: This code snippet shows how to override the global checkbox settings for a specific checkbox field in a Filament form. The `inline()` method is used to explicitly set the inline property, overriding any global configuration. Dependencies: Filament Forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Customizing Import Job Class in Filament (PHP)\nDESCRIPTION: This code shows how to replace the default import job class with a custom one by binding the new class to the container. This is typically done in a service provider's register() method. Requires that you extend the base `Filament\\Actions\\Imports\\Jobs\\ImportCsv` class in your custom `ImportCsv` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\ImportCsv;\nuse Filament\\Actions\\Imports\\Jobs\\ImportCsv as BaseImportCsv;\n\n$this->app->bind(BaseImportCsv::class, ImportCsv::class);\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip to a Hint Icon in Filament Form\nDESCRIPTION: This code snippet demonstrates how to add a tooltip to the hint icon in a Filament form using the `hintIcon()` method with the `tooltip` parameter. This will display the tooltip text when the user hovers over the icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->hintIcon('heroicon-m-question-mark-circle', tooltip: 'Need some more information?')\n```\n\n----------------------------------------\n\nTITLE: Setting Empty State Description in Filament Table (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the description of the empty state in a Filament table using the `emptyStateDescription()` method. It takes a string as input, which will be displayed as the description when the table is empty. The code requires the `Filament\\Tables\\Table` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/09-empty-state.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->emptyStateDescription('Once you write your first post, it will appear here.');\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Entries\nDESCRIPTION: Conditionally hides a TextEntry based on a condition. The `hidden()` and `visible()` methods are used. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('role')\n    ->hidden(! auth()->user()->isAdmin())\n// or\nTextEntry::make('role')\n    ->visible(auth()->user()->isAdmin())\n```\n\n----------------------------------------\n\nTITLE: Configure Filament Panel with Spatie Font Provider\nDESCRIPTION: This code snippet demonstrates how to configure a Filament panel to use the SpatieGoogleFontProvider. It sets the font family to 'Inter' and specifies the provider class.  It requires the Spatie Laravel Google Fonts package to be set up correctly.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-google-fonts-plugin/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\FontProviders\\SpatieGoogleFontProvider;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->font('Inter', provider: SpatieGoogleFontProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Options in CheckboxList - PHP\nDESCRIPTION: This code snippet shows how to disable specific options in the CheckboxList using the `disableOptionWhen()` method. It accepts a closure that determines whether an option should be disabled based on its value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        'tailwind' => 'Tailwind CSS',\n        'alpine' => 'Alpine.js',\n        'laravel' => 'Laravel',\n        'livewire' => 'Laravel Livewire',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'livewire')\n```\n\n----------------------------------------\n\nTITLE: Stacked Checkbox (PHP)\nDESCRIPTION: Positions the checkbox label above the checkbox input.  The `inline(false)` method is called on the `Checkbox` instance to set the layout mode.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/04-checkbox.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')->inline(false)\n```\n\n----------------------------------------\n\nTITLE: Customizing Job Batch Name in Filament Importer (PHP)\nDESCRIPTION: This code shows how to customize the name that is applied to job batches of a specific importer by overriding the `getJobBatchName()` method in the importer class.  It allows assigning custom names to job batches for easier identification and management within the queue system.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_34\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobBatchName(): ?string\n{\n    return 'product-import';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Footer to Modal (Blade)\nDESCRIPTION: Explains how to add a footer to a Filament modal using the `footer` slot. Content placed in this slot will appear at the bottom of the modal.  Alternatively, `footerActions` can be used for actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_7\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    {{-- Modal content --}}\n    \n    <x-slot name=\"footer\">\n        {{-- Modal footer content --}}\n    </x-slot>\n</x-filament::modal>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    {{-- Modal content --}}\n    \n    <x-slot name=\"footerActions\">\n        {{-- Modal footer actions --}}\n    </x-slot>\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Render View Page Test (PHP)\nDESCRIPTION: This test case ensures that the View page for a Filament resource can be rendered successfully. It generates the URL for the view page, passing a record ID, and asserts that the request returns a successful response.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nit('can render page', function () {\n    $this->get(PostResource::getUrl('view', [\n        'record' => Post::factory()->create(),\n    ]))->assertSuccessful();\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Infolist Action with Pest\nDESCRIPTION: This snippet demonstrates how to call an infolist action using Pest's Livewire plugin. It creates an invoice, mounts the EditInvoice Livewire component, and then calls the 'send' action on the 'customer' infolist component, refreshing and asserting that the invoice is sent.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callInfolistAction('customer', 'send', infolistName: 'infolist');\n\n    expect($invoice->refresh())\n        ->isSent()->toBeTrue();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Badge Color in Filament Form (PHP)\nDESCRIPTION: This code snippet showcases how to customize the color of a tab's badge using the `badgeColor()` method. The example sets the badge color to 'success', which typically represents a positive or successful state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/04-tabs.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->badge(5)\n            ->badgeColor('success')\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Disabling the Input Wrapper\nDESCRIPTION: Illustrates how to disable the input wrapper by passing the `disabled` attribute to both the wrapper and the inner input component. This prevents user interaction with the input field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper disabled>\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n        disabled\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Opening Modal from Livewire (PHP)\nDESCRIPTION: Demonstrates how to open the modal from a Livewire component by dispatching the `open-modal` event with the modal's ID as a parameter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatch('open-modal', id: 'edit-user');\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Helper Text\nDESCRIPTION: Demonstrates using HTML strings for helper text in a TextEntry. The example shows how to use `Illuminate\\Support\\HtmlString` and `inlineMarkdown()` to render HTML and markdown in the helper text. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class and `Illuminate\\Support\\HtmlString`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Illuminate\\Support\\HtmlString;\n\nTextEntry::make('name')\n    ->helperText(new HtmlString('Your <strong>full name</strong> here, including any middle names.'))\n\nTextEntry::make('name')\n    ->helperText(str('Your **full name** here, including any middle names.')->inlineMarkdown()->toHtmlString())\n\nTextEntry::make('name')\n    ->helperText(view('name-helper-text'))\n```\n\n----------------------------------------\n\nTITLE: Importing Filament Notification Objects in JavaScript\nDESCRIPTION: This JavaScript code shows how to import the `Notification` and `NotificationAction` objects from the Filament notifications library. This allows you to use these objects directly in your bundled JavaScript file.  This assumes the Filament notifications package is installed and the path is correct.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notification, NotificationAction } from '../../vendor/filament/notifications/dist/index.js'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Clear Cache and Publish Assets (PHP)\nDESCRIPTION: This command clears the Laravel caches and publishes the new frontend assets after upgrading Filament via Composer. It is crucial for ensuring that the updated Filament components and styles are correctly loaded in the application.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/07-upgrade-guide.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Setting a custom search prompt for CheckboxList (PHP)\nDESCRIPTION: This code snippet shows how to customize the search input's placeholder text in a Filament CheckboxList using the `searchPrompt()` method. The placeholder will be displayed when the user has not yet entered a search term. The CheckboxList must be made searchable by using `searchable()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->options([\n        // ...\n    ])\n    ->searchable()\n    ->searchPrompt('Search for a technology')\n```\n\n----------------------------------------\n\nTITLE: Passing Static Export Options (PHP)\nDESCRIPTION: This shows how to pass a set of static options to the exporter through the `options()` method on the action.  These options can then be accessed in closures within the exporter.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nExportAction::make()\n    ->exporter(ProductExporter::class)\n    ->options([\n        'descriptionLimit' => 250,\n    ])\n```\n\n----------------------------------------\n\nTITLE: Install laravel-trend Package\nDESCRIPTION: This command installs the flowframe/laravel-trend package, which is recommended by Filament for populating chart data from an Eloquent model. This package provides utility functions for calculating trends based on model data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require flowframe/laravel-trend\n```\n\n----------------------------------------\n\nTITLE: Executing Code on Modal Open in Filament\nDESCRIPTION: Shows how to execute code when a modal opens using the `mountUsing()` method and a closure. This is useful for initializing form data or performing other setup tasks.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Form;\n\nAction::make('create')\n    ->mountUsing(function (Form $form) {\n        $form->fill();\n\n        // ...\n    })\n```\n\n----------------------------------------\n\nTITLE: Binding Field State with Alpine.js - Blade\nDESCRIPTION: This snippet demonstrates how to bind a field's state to a Livewire component property using Alpine.js and `$wire.$entangle()` in Blade. The `getStatePath()` function returns the name of the property to entangle.  This approach can be useful if the field requires custom JavaScript behavior.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<div x-data=\"{ state: $wire.$entangle('{{ $getStatePath() }}') }\">\n    <input x-model=\"state\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Theme with Package Manager Option - Artisan\nDESCRIPTION: This code snippet shows how to create a Filament theme using a specific package manager. It creates CSS and Tailwind configuration files in the `/resources/css/filament` directory for customization. The `--pm=bun` option tells artisan to use bun as the package manager.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-theme --pm=bun\n```\n\n----------------------------------------\n\nTITLE: Install Filament (New Laravel Project)\nDESCRIPTION: This set of commands installs Livewire, Alpine.js, and Tailwind CSS in a new Laravel project, scaffolding necessary files and running asset compilation. It's only suitable for new projects as it overwrites existing files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --scaffold --forms\n\nnpm install\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Row Index (PHP)\nDESCRIPTION: This code snippet shows how to display the row index in a Filament table using a text column and the `state()` method to calculate the index. Requires Filament Tables package and HasTable contract.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Contracts\\HasTable;\n\nTextColumn::make('index')->state(\n    static function (HasTable $livewire, stdClass $rowLoop): string {\n        return (string) (\n            $rowLoop->iteration +\n            ($livewire->getTableRecordsPerPage() * (\n                $livewire->getTablePage() - 1\n            ))\n        );\n    }\n),\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Transactions for Actions in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to enable database transactions for a specific Filament action using the `databaseTransaction()` method. This ensures that all operations within the action are performed within a single transaction, providing atomicity and consistency.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nCreateAction::make()\n    ->databaseTransaction()\n```\n\n----------------------------------------\n\nTITLE: Add Created At Column (Filament)\nDESCRIPTION: This snippet adds a column to display the 'created_at' timestamp in a human-readable format. It uses the `dateTime()` method to format the date and time.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            Tables\\Columns\\TextColumn::make('description'),\n            Tables\\Columns\\TextColumn::make('price')\n                ->money('EUR')\n                ->sortable(),\n            Tables\\Columns\\TextColumn::make('created_at')\n                ->dateTime(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Indicator Removal in Filament\nDESCRIPTION: This code shows how to prevent users from removing an active indicator by using `removable(false)` on the `Indicator` object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/05-custom.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Carbon\\Carbon;\nuse Filament\\Tables\\Filters\\Indicator;\n\nIndicator::make('Created from ' . Carbon::parse($data['from'])->toFormattedDateString())\n    ->removable(false)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom View in the Page Footer (PHP)\nDESCRIPTION: Demonstrates adding a custom Blade view to the footer of a Filament page using the `getFooter()` method. Requires the Blade view file `resources/views/filament/settings/custom-footer.blade.php`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Contracts\\View\\View;\n\npublic function getFooter(): ?View\n{\n    return view('filament.settings.custom-footer');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tooltip to a Link Blade\nDESCRIPTION: Demonstrates how to add a tooltip to the Filament link component using the `tooltip` attribute. The tooltip text is specified as the value of this attribute, providing helpful context on hover.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link tooltip=\"Register a user\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Label - PHP\nDESCRIPTION: This snippet demonstrates how to customize the label of the key field using the `keyLabel()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->keyLabel('Property name')\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks for Toggle Column in Filament\nDESCRIPTION: This example shows how to implement lifecycle hooks (`beforeStateUpdated` and `afterStateUpdated`) for the toggle column. These hooks enable executing code before and after the state is saved to the database. The parameters `$record` and `$state` provide access to the relevant database record and the toggle's new state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/07-toggle.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nToggleColumn::make()\n    ->beforeStateUpdated(function ($record, $state) {\n        // Runs before the state is saved to the database.\n    })\n    ->afterStateUpdated(function ($record, $state) {\n        // Runs after the state is saved to the database.\n    })\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Notification Object (PHP)\nDESCRIPTION: This code snippet shows how to bind the custom `Notification` class into the container inside a service provider's `register()` method. This replaces the default `Filament\\Notifications\\Notification` class with the custom one.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/05-customizing-notifications.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Notifications\\Notification;\nuse Filament\\Notifications\\Notification as BaseNotification;\n\n$this->app->bind(BaseNotification::class, Notification::class);\n```\n\n----------------------------------------\n\nTITLE: Changing Badge Color\nDESCRIPTION: Demonstrates how to change the color of the badge using the `badge-color` attribute.  Common badge colors are 'danger', 'success', and 'warning'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button badge-color=\"danger\">\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Send Database Notification (PHP)\nDESCRIPTION: Sends a database notification using the fluent API. Requires a recipient user object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\nNotification::make()\n    ->title('Saved successfully')\n    ->sendToDatabase($recipient);\n```\n\n----------------------------------------\n\nTITLE: Using Raw JavaScript for Chart.js Options (PHP)\nDESCRIPTION: This code demonstrates how to use raw JavaScript for Chart.js options using the `RawJs` class. This is useful for using JavaScript callback functions within the chart configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\RawJs;\n\nprotected function getOptions(): RawJs\n{\n    return RawJs::make(<<<JS\n        {\n            scales: {\n                y: {\n                    ticks: {\n                        callback: (value) => '€' + value,\n                    },\n                },\n            },\n        }\n    JS);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying State Binding Modifiers - Blade\nDESCRIPTION: This snippet demonstrates how to apply state binding modifiers to a `wire:model` binding in Blade using the `$applyStateBindingModifiers()` function.  This allows you to control how the state is synchronized between the client and server, for example using `defer` to delay updates.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/20-custom.md#_snippet_8\n\nLANGUAGE: Blade\nCODE:\n```\n<input {{ $applyStateBindingModifiers('wire:model') }}=\"{{ $getStatePath() }}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Chart Widget (Bash)\nDESCRIPTION: This command generates a new Filament chart widget using the Artisan CLI. The `--chart` option specifies that the widget should be a chart widget.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget BlogPostsChart --chart\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Button with Wire Click Event - Blade\nDESCRIPTION: This snippet demonstrates how to create a basic Filament icon button using the `x-filament::icon-button` component. It sets the icon, attaches a wire click event, and assigns a label to the button. This allows for interactivity within a Livewire component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    wire:click=\"openNewUserModal\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Expanding a Limited List in Filament PHP Text Column\nDESCRIPTION: This snippet demonstrates how to allow expanding and collapsing a limited list of items in a TextColumn, using the `expandableLimitedList()` method.  This only works with `listWithLineBreaks()` or `bulleted()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n    ->expandableLimitedList()\n```\n\n----------------------------------------\n\nTITLE: Disabling SPA navigation for specific URLs in Filament (PHP)\nDESCRIPTION: This code demonstrates how to disable SPA navigation for specific URLs when SPA mode is enabled. The `spaUrlExceptions()` method is used to specify an array of URLs that should not use Livewire's `wire:navigate`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/09-configuration.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Filament\\Resources\\PostResource;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->spa()\n        ->spaUrlExceptions(fn (): array => [\n            url('/admin'),\n            PostResource::getUrl(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Action Hidden/Visible using Pest\nDESCRIPTION: This snippet demonstrates how to assert whether a Filament action is hidden or visible for a user using `assertActionHidden()` and `assertActionVisible()`. It creates an invoice, mounts the `EditInvoice` Livewire component, asserts that the 'send' action is hidden, and asserts that the 'print' action is visible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/09-testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertActionHidden('send')\n        ->assertActionVisible('print');\n});\n```\n\n----------------------------------------\n\nTITLE: Filament Actions Migrations Publish and Migrate\nDESCRIPTION: This command publishes the migrations for Filament's actions component, specifically those related to export functionality. It then runs the migration command to apply the changes to the database, creating tables necessary for storing export-related data.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# All apps\nphp artisan vendor:publish --tag=filament-actions-migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Customizing Remaining Text Size in Filament (PHP)\nDESCRIPTION: Shows how to customize the size of the remaining text using the `size` parameter of the `limitedRemainingText()` method.  Available sizes are 'xs', 'sm', 'md', and 'lg'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n    ->limitedRemainingText(size: 'lg')\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Toggle Button Options in Filament\nDESCRIPTION: This code snippet demonstrates how to disable specific options in the ToggleButtons component using the `disableOptionWhen()` method. A closure is used to determine whether an option should be disabled based on its value.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/18-toggle-buttons.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\ToggleButtons;\n\nToggleButtons::make('status')\n    ->options([\n        'draft' => 'Draft',\n        'scheduled' => 'Scheduled',\n        'published' => 'Published',\n    ])\n    ->disableOptionWhen(fn (string $value): bool => $value === 'published')\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Color in a Filament PHP Text Column\nDESCRIPTION: This code snippet demonstrates how to set the color of the text in a TextColumn using the `color()` method.  Available colors are: danger, gray, info, primary, success, or warning.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('status')\n    ->color('primary')\n```\n\n----------------------------------------\n\nTITLE: Setting Link Size Blade\nDESCRIPTION: Demonstrates how to adjust the size of the Filament link component using the `size` attribute.  Available sizes include 'sm', 'lg', 'xl', and '2xl'.  Each example showcases a different size option.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link size=\"sm\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link size=\"lg\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link size=\"xl\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link size=\"2xl\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Asserting a Notification Title (Pest + Livewire)\nDESCRIPTION: This snippet demonstrates how to assert that a notification with a specific title was sent.  It uses the `assertNotified()` helper and passes the expected notification title as a string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/06-testing.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\nuse function Pest\\Livewire\\livewire;\n\nit('sends a notification', function () {\n    livewire(CreatePost::class)\n        ->assertNotified('Unable to create post');\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Table to Widgets (PHP)\nDESCRIPTION: This code demonstrates how to expose the table data to a widget in Filament. It uses the `ExposesTableToWidgets` trait within a List page and then uses `InteractsWithPageTable` trait and the `getTablePage()` method within the widget.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/09-widgets.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Pages\\Concerns\\ExposesTableToWidgets;\nuse Filament\\Resources\\Pages\\ListRecords;\n\nclass ListProducts extends ListRecords\n{\n    use ExposesTableToWidgets;\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\ProductResource\\Pages\\ListProducts;\nuse Filament\\Widgets\\Concerns\\InteractsWithPageTable;\nuse Filament\\Widgets\\Widget;\n\nclass ProductStats extends Widget\n{\n    use InteractsWithPageTable;\n\n    protected function getTablePage(): string\n    {\n        return ListProducts::class;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Check for Missing Translations in App\nDESCRIPTION: This command checks for missing translations within your application's published translation files instead of the Filament package's files. The `--source=app` option specifies that the translations should be checked from the application's resources.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:check-translations es --source=app\n```\n\n----------------------------------------\n\nTITLE: Add Wizard Trait - Filament - PHP\nDESCRIPTION: This code snippet shows how to transform the creation process into a multistep wizard by adding the `HasWizard` trait to the Create page class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Filament\\Resources\\CategoryResource;\nuse Filament\\Resources\\Pages\\CreateRecord;\n\nclass CreateCategory extends CreateRecord\n{\n    use CreateRecord\\Concerns\\HasWizard;\n    \n    protected static string $resource = CategoryResource::class;\n\n    protected function getSteps(): array\n    {\n        return [\n            // ...\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Icon and Color - JavaScript\nDESCRIPTION: This snippet shows how to set an icon and color for a notification using JavaScript with Filament. Similar to the PHP version, it enhances the visual representation of the notification.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .icon('heroicon-o-document-text')\n    .iconColor('success')\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Resource with Soft Deletes (Bash)\nDESCRIPTION: This command generates a new Filament resource with soft delete functionality enabled. The `--soft-deletes` flag ensures that the resource is configured to handle soft deletes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/06-deleting-records.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-resource Customer --soft-deletes\n```\n\n----------------------------------------\n\nTITLE: Changing Badge Color on Icon Button - Blade\nDESCRIPTION: This snippet demonstrates how to change the color of the badge on a Filament icon button using the `badge-color` attribute.  This allows for further customization of the badge's appearance.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_6\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-x-mark\"\n    label=\"Mark notifications as read\"\n    badge-color=\"danger\"\n>\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::icon-button>\n```\n\n----------------------------------------\n\nTITLE: Customizing Display Format for DatePicker in Filament\nDESCRIPTION: This snippet shows how to customize the display format of the DatePicker, separate from the storage format, using `displayFormat()`. It accepts a PHP date formatting string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/08-date-time-picker.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\n\nDatePicker::make('date_of_birth')\n    ->native(false)\n    ->displayFormat('d/m/Y')\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Actions with Composer\nDESCRIPTION: This command installs the Filament Actions package using Composer.  It provides a mechanism for creating action modals that can be added to Livewire components, utilizing the Form Builder for flexibility.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/actions\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes\nDESCRIPTION: Adds custom HTML attributes to the outer `<div>` element of a TextEntry. The `extraAttributes()` method accepts an array of attributes. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('slug')\n    ->extraAttributes(['class' => 'bg-gray-200'])\n```\n\n----------------------------------------\n\nTITLE: Adding a Hint\nDESCRIPTION: Adds a hint next to the label of a TextEntry. The `hint()` method accepts a string, `HtmlString`, or `Htmlable` instance. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint('Documentation? What documentation?!')\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagination in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to disable pagination in a Filament table using the `paginated(false)` method within the `table` function. It shows the basic structure for configuring a Filament table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginated(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Relationship Existence\nDESCRIPTION: This PHP code snippet shows how to determine whether related records exist using the `exists()` method. The column name must follow the convention of `relationship_exists`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('users_exists')->exists('users')\n```\n\n----------------------------------------\n\nTITLE: Settings Page Class Property Definition\nDESCRIPTION: Defines the `$settings` property in the Filament settings page class.  This property links the page to the corresponding settings class, in this case `FooterSettings::class`.  The settings class should be defined according to the Spatie Laravel Settings package documentation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-settings-plugin/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $settings = FooterSettings::class;\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with Locale\nDESCRIPTION: This snippet shows how to format currency using the `money()` method, specifying the currency code ('EUR') and the locale ('nl') for formatting.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR', locale: 'nl'))\n```\n\n----------------------------------------\n\nTITLE: Rendering a render hook with multiple scopes in Blade template\nDESCRIPTION: This code snippet demonstrates how to render a render hook with multiple scopes in a Blade template. The `scopes` array allows you to specify multiple contexts where the hook should be rendered. If any of the scopes matches the current context, the render hook will be executed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n{{ \\Filament\\Support\\Facades\\FilamentView::renderHook(\\Filament\\View\\PanelsRenderHook::PAGE_START, scopes: [static::class, \\App\\Filament\\Resources\\UserResource::class]) }}\n```\n\n----------------------------------------\n\nTITLE: Automated Upgrade Script\nDESCRIPTION: This bash script automates the upgrade process for Filament, including installing the upgrade package and running the upgrade command. After running the script, you may need to make manual changes and finalize the installation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/10-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/upgrade:\"^3.2\" -W --dev\nvendor/bin/filament-v3\n```\n\n----------------------------------------\n\nTITLE: Populate Chart Data with Treatments per Month\nDESCRIPTION: This code snippet demonstrates how to fetch and format data for the chart. It uses the `laravel-trend` package to retrieve the number of treatments per month for the past year and formats the data into a structure suitable for the Chart.js library used by Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Treatment;\nuse Flowframe\\Trend\\Trend;\nuse Flowframe\\Trend\\TrendValue;\n\nprotected function getData(): array\n{\n    $data = Trend::model(Treatment::class)\n        ->between(\n            start: now()->subYear(),\n            end: now(),\n        )\n        ->perMonth()\n        ->count();\n\n    return [\n        'datasets' => [\n            [\n                'label' => 'Treatments',\n                'data' => $data->map(fn (TrendValue $value) => $value->aggregate),\n            ],\n        ],\n        'labels' => $data->map(fn (TrendValue $value) => $value->date),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Form Layout Class (Artisan)\nDESCRIPTION: Generates a custom layout component class and view file in Filament. This command simplifies the creation of reusable form layouts.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-custom.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:form-layout Wizard\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Text (PHP)\nDESCRIPTION: This snippet shows how to customize the heading, description, and submit action label of a confirmation modal.  It uses `modalHeading()`, `modalDescription()`, and `modalSubmitActionLabel()` methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\n\nAction::make('delete')\n    ->action(fn (Post $record) => $record->delete())\n    ->requiresConfirmation()\n    ->modalHeading('Delete post')\n    ->modalDescription('Are you sure you\\'d like to delete this post? This cannot be undone.')\n    ->modalSubmitActionLabel('Yes, delete it')\n```\n\n----------------------------------------\n\nTITLE: Create Filament Resource using Artisan\nDESCRIPTION: This command uses the `php artisan` tool to create a new Filament resource for the `Patient` model, generating the necessary files in the `app/Filament/Resources` directory.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:filament-resource Patient\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Existence in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert the existence and non-existence of Filament form component actions using Pest and Livewire. It creates an invoice and asserts that the 'send' action exists for the 'customer_id' component, while the 'unsend' action does not.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send but not unsend invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionExists('customer_id', 'send')\n        ->assertFormComponentActionDoesNotExist('customer_id', 'unsend');\n});\n```\n\n----------------------------------------\n\nTITLE: Swapping User Relationship to Polymorphic (PHP)\nDESCRIPTION: This code snippet shows how to swap the `user()` relationship on the `Export` model to a `MorphTo` relationship to enable polymorphic relationships with multiple user models. This should be done in a service provider's `boot()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\Models\\Export;\n\nExport::polymorphicUserRelationship();\n```\n\n----------------------------------------\n\nTITLE: UUID Validation Rule in Filament\nDESCRIPTION: Demonstrates using the `uuid` validation rule in a Filament form. The 'identifier' field must be a valid RFC 4122 universally unique identifier (UUID).\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nField::make('identifier')->uuid()\n```\n\n----------------------------------------\n\nTITLE: Customizing Boolean Icons PHP\nDESCRIPTION: Customizes the icons displayed for true and false boolean values in an IconEntry.  The `trueIcon()` and `falseIcon()` methods are used to specify the icons. By default, Heroicons are installed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/03-icon.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\IconEntry;\n\nIconEntry::make('is_featured')\n    ->boolean()\n    ->trueIcon('heroicon-o-check-badge')\n    ->falseIcon('heroicon-o-x-mark')\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS and plugins\nDESCRIPTION: This command installs Tailwind CSS version 3 along with the Tailwind Forms and Typography plugins. These plugins provide additional styling capabilities for forms and typography within the Tailwind CSS framework. PostCSS, PostCSS Nesting and Autoprefixer are also installed for CSS processing.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Binding\nDESCRIPTION: This code snippet illustrates how to replace the default `PrepareCsvExport` job with a custom implementation using service provider binding. It binds the base class to the custom class in the `register()` method of the service provider.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Jobs\\PrepareCsvExport;\nuse Filament\\Actions\\Exports\\Jobs\\PrepareCsvExport as BasePrepareCsvExport;\n\n$this->app->bind(BasePrepareCsvExport::class, PrepareCsvExport::class);\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Connection\nDESCRIPTION: This code snippet demonstrates how to override the `getJobConnection()` method in an exporter class to customize the connection used for export jobs. It returns the name of the desired connection.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobConnection(): ?string\n{\n    return 'sqs';\n}\n```\n\n----------------------------------------\n\nTITLE: Making Notification Persistent - PHP\nDESCRIPTION: This snippet shows how to make a notification persistent, meaning it won't automatically close and requires manual dismissal by the user using Filament PHP.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->persistent()\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Table Builder with Composer\nDESCRIPTION: This command installs the Filament Table Builder package using Composer. It allows the creation of datatables for Livewire components, and supports custom columns, filters, and actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/tables\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Logo Height - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to customize the height of the brand logo in a FilamentPHP panel using the `brandLogoHeight()` method. It sets the height to '2rem'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandLogo(fn () => view('filament.admin.logo'))\n        ->brandLogoHeight('2rem');\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Toggle PHP\nDESCRIPTION: This snippet shows how to set the toggle field to be inline with its label. The `inline()` method defaults to `true` so the following code enforces that the toggle is inline.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/05-toggle.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Toggle;\n\nToggle::make('is_admin')\n    ->inline()\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Logo (Image) - FilamentPHP\nDESCRIPTION: This code snippet shows how to set an image as the brand logo in a FilamentPHP panel using the `brandLogo()` method. It provides the URL of the image asset.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandLogo(asset('images/logo.svg'));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding multiple affix actions to a TextEntry in Filament\nDESCRIPTION: This code shows how to add multiple prefix and suffix actions to a Filament TextEntry. It defines empty actions which are then passed as arrays to the `prefixActions()` and `suffixActions()` methods. Filament renders all the registered actions in order.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions\\Action;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('cost')\n    ->prefix('€')\n    ->prefixActions([\n        Action::make('...'),\n        Action::make('...'),\n        Action::make('...'),\n    ])\n    ->suffixActions([\n        Action::make('...'),\n        Action::make('...'),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Formatting Money with Division\nDESCRIPTION: This snippet demonstrates formatting monetary values using the `money()` method, dividing the original value by 100 before formatting.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/07-summaries.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('price')\n    ->summarize(Sum::make()->money('EUR', divideBy: 100))\n```\n\n----------------------------------------\n\nTITLE: Routing to Full-Page Livewire Component (PHP)\nDESCRIPTION: Defines a route that renders the Livewire component as a full page. This is an alternative way to display the Livewire component, by directly linking a URL to the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Livewire\\ViewProduct;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('products/{product}', ViewProduct::class);\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Hidden with Pest\nDESCRIPTION: This snippet demonstrates how to assert that an infolist action is hidden. It verifies that the 'send' action is hidden.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can not send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionHidden('customer', 'send');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Infolists with Composer\nDESCRIPTION: This command installs the Filament Infolists package using Composer. It is designed to display read-only information to users about a particular record, and integrates with the Panel Builder.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/infolists\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Form Builder with Composer\nDESCRIPTION: This command installs the Filament Form Builder package using Composer. It facilitates the creation of interactive forms within Livewire components, supporting custom fields and actions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/forms\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Panel Builder with Composer\nDESCRIPTION: This command installs the Filament Panel Builder package using Composer. It allows for the creation of admin panels, customer-facing apps, and SaaS platforms in Laravel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/filament\n```\n\n----------------------------------------\n\nTITLE: Usage Example (README.md)\nDESCRIPTION: This code snippet shows an example of how to use the Heading component in a Filament form.  It shows how to set the heading level, content, and color.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Awcodes\\Headings\\Heading;\n\nHeading::make(2)\n    ->content('Product Information')\n    ->color(Color::Lime),\n```\n\n----------------------------------------\n\nTITLE: Changing Modal Width (Blade)\nDESCRIPTION: Demonstrates how to change the width of a Filament modal using the `width` attribute.  Options correspond to Tailwind's max-width scale.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal width=\"5xl\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Grid Component with Defined Columns\nDESCRIPTION: This example shows how to use the `Grid` component in Filament infolists to create a grid layout. The `Grid::make()` method is used to directly define the number of columns for different breakpoints, providing an explicit grid syntax for the form schema.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/02-grid.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Grid;\n\nGrid::make([\n    'default' => 1,\n    'sm' => 2,\n    'md' => 3,\n    'lg' => 4,\n    'xl' => 6,\n    '2xl' => 8,\n])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Customize Force Delete Notification Title - PHP\nDESCRIPTION: Demonstrates how to customize the title of the success notification displayed after a record is force-deleted. It requires the Filament\\Actions\\ForceDeleteAction class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/06-force-delete.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nForceDeleteAction::make()\n    ->successNotificationTitle('User force-deleted')\n```\n\n----------------------------------------\n\nTITLE: Changing Font Provider - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to change the font provider used by a FilamentPHP panel. It uses the `GoogleFontProvider` to serve fonts from Google Fonts CDN, instead of the default Bunny Fonts CDN.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\FontProviders\\GoogleFontProvider;\n\n$panel->font('Inter', provider: GoogleFontProvider::class)\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Form\nDESCRIPTION: Generates a Filament form for a specific Eloquent model. This command will create a Livewire component that renders a form for creating new records in the database. It prompts for the model name.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/08-adding-a-form-to-a-livewire-component.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire-form Products/CreateProduct\n```\n\n----------------------------------------\n\nTITLE: Add Mark as Unread Action (PHP)\nDESCRIPTION: Adds a 'mark as unread' action to a notification. Requires the `filament/notifications` package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('markAsUnread')\n            ->button()\n            ->markAsUnread(),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Customize Tenant Name Attribute in Filament\nDESCRIPTION: This shows how to customize the tenant name attribute, the Filament's default is 'name', by implementing the `HasName` interface.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Models;\n\nuse Filament\\Models\\Contracts\\HasName;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Team extends Model implements HasName\n{\n    // ...\n\n    public function getFilamentName(): string\n    {\n        return \"{$this->name} {$this->subscription_plan}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Sidebar Background Color with Tailwind CSS\nDESCRIPTION: This CSS snippet customizes the background color of the Filament sidebar using the `fi-sidebar` hook class and Tailwind CSS's `@apply` directive. It applies `bg-gray-50` for light mode and `dark:bg-gray-950` for dark mode.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/05-style-customization.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.fi-sidebar {\n    @apply bg-gray-50 dark:bg-gray-950;\n}\n```\n\n----------------------------------------\n\nTITLE: List Table Records Test (PHP)\nDESCRIPTION: This test case verifies that the List page of a resource displays the correct records in the table. It creates some sample records and uses the `assertCanSeeTableRecords` helper to check if those records are visible in the table.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can list posts', function () {\n    $posts = Post::factory()->count(10)->create();\n\n    livewire(PostResource\\Pages\\ListPosts::class)\n        ->assertCanSeeTableRecords($posts);\n})\n```\n\n----------------------------------------\n\nTITLE: RepeatableEntry with schema definition (PHP)\nDESCRIPTION: This code demonstrates how to use the RepeatableEntry component in Filament to display a list of comments. It defines a schema containing TextEntry components for displaying the author's name, title, and content of each comment. The `columns()` method specifies that the content should span two columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/07-repeatable.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\RepeatableEntry;\nuse Filament\\Infolists\\Components\\TextEntry;\n\nRepeatableEntry::make('comments')\n    ->schema([\n        TextEntry::make('author.name'),\n        TextEntry::make('title'),\n        TextEntry::make('content')\n            ->columnSpan(2),\n    ])\n    ->columns(2)\n```\n\n----------------------------------------\n\nTITLE: Labeled From Breakpoint - Filament\nDESCRIPTION: Illustrates setting a breakpoint for the label. The label will only be visible from the specified breakpoint upwards, effectively creating an icon button on smaller screens.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->icon('heroicon-m-pencil-square')\n    ->button()\n    ->labeledFrom('md')\n```\n\n----------------------------------------\n\nTITLE: Disabling Native Date Picker\nDESCRIPTION: This PHP code snippet demonstrates how to disable the native date picker for the DateTimePicker form field in Filament.  Using `native(false)` reverts the component to the old date picker if the new default behavior has compatibility issues.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/10-upgrade-guide.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DateTimePicker;\n\nDateTimePicker::make('published_at')\n    ->native(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Image URL in Filament (PHP)\nDESCRIPTION: Demonstrates how to display a placeholder image if the actual image doesn't exist by passing a URL to the defaultImageUrl() method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('avatar')\n    ->defaultImageUrl(url('/images/placeholder.png'))\n```\n\n----------------------------------------\n\nTITLE: Generating Importer Columns Automatically\nDESCRIPTION: This snippet shows how to automatically generate importer columns based on the model's database columns using the `--generate` option.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:filament-importer Product --generate\n```\n\n----------------------------------------\n\nTITLE: Create MoneyCast (Artisan)\nDESCRIPTION: This command creates a new Laravel cast that transforms the integer into a float when retrieved and back to an integer when stored in the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:cast MoneyCast\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Notifications with Composer\nDESCRIPTION: This command installs the Filament Notifications package using Composer. It enables the delivery of flash notifications to users and the rendering of notifications from the database or websockets server.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/notifications\n```\n\n----------------------------------------\n\nTITLE: Installing Filament Panel Builder\nDESCRIPTION: This command installs the Filament Panel Builder package using Composer and runs the Filament installer, which sets up the necessary configurations and service providers.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/filament:\"^3.3\" -W\n\nphp artisan filament:install --panels\n```\n\n----------------------------------------\n\nTITLE: Preventing Autofocus (Blade)\nDESCRIPTION: Explains how to disable the modal's autofocus on the first focusable element using the `:autofocus=\"false\"` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_16\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :autofocus=\"false\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Adding a Page Subheading (Method) (PHP)\nDESCRIPTION: Shows how to add a subheading using the `getSubheading()` method, enabling dynamic or localized subheadings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getSubheading(): ?string\n{\n    return __('Custom Page Subheading');\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Filament Config (Bash)\nDESCRIPTION: This snippet publishes the new Filament configuration files, replacing the old config file. The `--force` flag is used to overwrite existing files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/15-upgrade-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config --force\n```\n\n----------------------------------------\n\nTITLE: Opening URLs from Notification Actions - PHP\nDESCRIPTION: This snippet demonstrates how to create a notification action that opens a URL in Filament PHP. The `url()` method sets the URL, and `shouldOpenInNewTab` controls whether it opens in a new tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Actions\\Action;\nuse Filament\\Notifications\\Notification;\n\nNotification::make()\n    ->title('Saved successfully')\n    ->success()\n    ->body('Changes to the post have been saved.')\n    ->actions([\n        Action::make('view')\n            ->button()\n            ->url(route('posts.show', $post), shouldOpenInNewTab: true),\n        Action::make('undo')\n            ->color('gray'),\n    ])\n    ->send();\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Editor\nDESCRIPTION: This snippet shows how to enable an image editor for the file upload field using the `imageEditor()` method. The image editor allows users to crop and manipulate uploaded images.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('image')\n    ->image()\n    ->imageEditor()\n```\n\n----------------------------------------\n\nTITLE: Changing Hint Color\nDESCRIPTION: Changes the text color of the hint for a TextEntry. The `hintColor()` method accepts a color name. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('apiKey')\n    ->label('API key')\n    ->hint(str('[Documentation](/documentation)')->inlineMarkdown()->toHtmlString())\n    ->hintColor('primary')\n```\n\n----------------------------------------\n\nTITLE: Render Create Page Test (PHP)\nDESCRIPTION: This test verifies that the Create page for a resource can be rendered successfully. It generates the URL for the create page and asserts that the request returns a successful response.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/14-testing.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nit('can render page', function () {\n    $this->get(PostResource::getUrl('create'))->assertSuccessful();\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Implementation in Blade\nDESCRIPTION: Demonstrates the basic structure of a Filament modal using Blade. It includes a trigger button to open the modal and a placeholder for the modal content. The trigger is defined using the `trigger` slot, and the modal content is placed within the `<x-filament::modal>` tags.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_0\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"trigger\">\n        <x-filament::button>\n            Open modal\n        </x-filament::button>\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: JSON Validation - Filament\nDESCRIPTION: Validates that the field is a valid JSON string. It uses the `json()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nField::make('ip_address')->json()\n```\n\n----------------------------------------\n\nTITLE: Adding Placeholder Text\nDESCRIPTION: Adds placeholder text to a TextEntry when its state is empty. The `placeholder()` method provides a lighter gray text when no value is present. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->placeholder('Untitled')\n```\n\n----------------------------------------\n\nTITLE: Configure Price Field (Filament)\nDESCRIPTION: This snippet configures a 'price' field in the relation manager form as a numeric input with a currency prefix and a maximum value. It uses the `numeric()` method for validation and mobile keyboard optimization, and `prefix()` to display the currency symbol.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms;\nuse Filament\\Forms\\Form;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            Forms\\Components\\TextInput::make('description')\n                ->required()\n                ->maxLength(255)\n                ->columnSpan('full'),\n            Forms\\Components\\Textarea::make('notes')\n                ->maxLength(65535)\n                ->columnSpan('full'),\n            Forms\\Components\\TextInput::make('price')\n                ->numeric()\n                ->prefix('€')\n                ->maxValue(42949672.95),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Size in Filament\nDESCRIPTION: This code snippet shows how to change the size of icons in a Filament table column.  The `size()` method accepts an `IconColumnSize` enum which may be `ExtraSmall`, `Small`, `Medium`, `Large`, `ExtraLarge` or `TwoExtraLarge`. The default size is `Large`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/03-icon.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\IconColumn;\n\nIconColumn::make('status')\n    ->size(IconColumn\\IconColumnSize::Medium)\n```\n\n----------------------------------------\n\nTITLE: Cancelling the Saving Process\nDESCRIPTION: Shows how to completely cancel the action instead of halting it.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/02-edit.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$action->cancel();\n```\n\n----------------------------------------\n\nTITLE: Adding Affix Text Blade\nDESCRIPTION: Explains how to add prefix and suffix text to the input wrapper using the `prefix` and `suffix` slots. This allows you to display text before and after the input field, such as for URL prefixes or suffixes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-slot name=\"prefix\">\n        https://\n    </x-slot>\n\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"domain\"\n    />\n\n    <x-slot name=\"suffix\">\n        .com\n    </x-slot>\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Using Simple Pagination in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to implement simple pagination in a Filament table by overriding the `paginateTableQuery()` method in the Livewire component.  It returns a `Paginator` instance from the query.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Pagination\\Paginator;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nprotected function paginateTableQuery(Builder $query): Paginator\n{\n    return $query->simplePaginate(($this->getTableRecordsPerPage() === 'all') ? $query->count() : $this->getTableRecordsPerPage());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Infolist Entry Class in Filament\nDESCRIPTION: This snippet demonstrates the structure of a custom infolist entry class in Filament. It extends the `Entry` class and defines the `$view` property to specify the path to the associated Blade view file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/08-custom.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Entry;\n\nclass StatusSwitcher extends Entry\n{\n    protected string $view = 'filament.infolists.entries.status-switcher';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Polymorphic User Relationship in Import Model (PHP)\nDESCRIPTION: Demonstrates how to swap the user() relationship on the Import model to a MorphTo relationship using the Filament\\Actions\\Imports\\Models\\Import class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Imports\\Models\\Import;\n\nImport::polymorphicUserRelationship();\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Body Text - JavaScript\nDESCRIPTION: This snippet demonstrates setting the body text of a notification using JavaScript with Filament. The body provides additional information.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .body('Changes to the post have been saved.')\n    .send()\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Visibility with Pest\nDESCRIPTION: This snippet shows how to assert that an infolist action is visible or hidden. It asserts that the 'send' action is hidden and the 'print' action is visible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print customers', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionHidden('customer', 'send')\n        ->assertInfolistActionVisible('customer', 'print');\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting the Table - PHP\nDESCRIPTION: This snippet demonstrates how to reset the table definition in a Livewire component by calling the `resetTable()` method. This is useful when changes are made to the table definition during a Livewire request. No specific dependencies are listed in the text.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$this->resetTable();\n```\n\n----------------------------------------\n\nTITLE: Setting ActionGroup Tooltip in Filament\nDESCRIPTION: This code snippet demonstrates how to set a tooltip for an `ActionGroup` in Filament using the `tooltip()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/05-actions.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\ActionGroup;\n\nActionGroup::make([\n    // ...\n])->tooltip('Actions');\n```\n\n----------------------------------------\n\nTITLE: Alpha Dash Validation - Filament\nDESCRIPTION: Validates that the field contains only alphanumeric characters, dashes, and underscores. It uses the `alphaDash()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->alphaDash()\n```\n\n----------------------------------------\n\nTITLE: Upgrade Filament with Composer hook\nDESCRIPTION: This JSON code shows a composer.json \"post-autoload-dump\" hook that runs the Filament upgrade command after each composer update. This ensures that the application is always up-to-date with the latest changes from Filament, clearing caches and republishing assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post-autoload-dump\": [\n    // ...\n    \"@php artisan filament:upgrade\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Chart Description (PHP)\nDESCRIPTION: This example shows how to add a description below the chart heading using the `getDescription()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function getDescription(): ?string\n{\n    return 'The number of blog posts published per month.';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Colors in Filament (Tailwind)\nDESCRIPTION: This code snippet demonstrates how to register custom colors in Filament using the `FilamentColor::register()` method. It overrides the default Filament colors with colors from the Tailwind CSS color palette using the `Color` class. The `Color` class provides access to all available Tailwind colors. This code should be placed within a service provider's `boot()` method or middleware.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/04-colors.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Facades\\FilamentColor;\n\nFilamentColor::register([\n    'danger' => Color::Red,\n    'gray' => Color::Zinc,\n    'info' => Color::Blue,\n    'primary' => Color::Amber,\n    'success' => Color::Green,\n    'warning' => Color::Amber,\n]);\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Values with Bullet Points - PHP\nDESCRIPTION: This snippet extends the list display by adding bullet points to each item using the `bulleted()` method. It builds upon the `listWithLineBreaks()` method for formatting.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('authors.name')\n    ->listWithLineBreaks()\n    ->bulleted()\n```\n\n----------------------------------------\n\nTITLE: Publishing Config and Removing Old File\nDESCRIPTION: These bash commands publish the new Filament configuration file and remove the old forms.php file, which is necessary for upgrading from v2 to v3. The `--force` option overwrites any existing configuration files.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/10-upgrade-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config --force\nrm config/forms.php\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading a Livewire Component (PHP)\nDESCRIPTION: This snippet demonstrates how to enable lazy loading for a Livewire component within a Filament infolist. The `lazy()` method is chained onto the `Livewire::make()` method to enable lazy loading.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/06-advanced.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Livewire;\nuse App\\Livewire\\Foo;\n\nLivewire::make(Foo::class)->lazy()\n```\n\n----------------------------------------\n\nTITLE: Using Slide-Over (Blade)\nDESCRIPTION: Demonstrates how to use a slide-over dialog instead of a modal by using the `slide-over` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal slide-over>\n    {{-- Slide-over content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Changing Modal Alignment (Blade)\nDESCRIPTION: Shows how to change the alignment of content within a Filament modal using the `alignment` attribute.  Options are `start` and `center`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal alignment=\"center\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Customize Ownership Relationship Name in Filament\nDESCRIPTION: This code shows how to customize the ownership relationship name used across all resources using the `ownershipRelationship` argument on the `tenant()` configuration method. The `owner` relationship is defined.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/11-tenancy.md#_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Team;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->tenant(Team::class, ownershipRelationship: 'owner');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Filament Plugin Class (PHP)\nDESCRIPTION: Demonstrates the structure of a Filament plugin class, including the `getId()`, `register()`, and `boot()` methods, which are required when implementing the `Plugin` interface.  This class registers resources and pages within a Filament panel. Dependencies: Filament\\Contracts\\Plugin, Filament\\Panel.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace DanHarrin\\FilamentBlog;\n\nuse DanHarrin\\FilamentBlog\\Pages\\Settings;\nuse DanHarrin\\FilamentBlog\\Resources\\CategoryResource;\nuse DanHarrin\\FilamentBlog\\Resources\\PostResource;\nuse Filament\\Contracts\\Plugin;\nuse Filament\\Panel;\n\nclass BlogPlugin implements Plugin\n{\n    public function getId(): string\n    {\n        return 'blog';\n    }\n\n    public function register(Panel $panel): void\n    {\n        $panel\n            ->resources([\n                PostResource::class,\n                CategoryResource::class,\n            ])\n            ->pages([\n                Settings::class,\n            ]);\n    }\n\n    public function boot(Panel $panel): void\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Badge to Icon Button - Blade\nDESCRIPTION: This snippet shows how to add a badge to a Filament icon button using the `badge` slot.  The badge can be used to display notifications or other dynamic information. The badge content is placed within the named `badge` slot.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_5\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-x-mark\"\n    label=\"Mark notifications as read\"\n>\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::icon-button>\n```\n\n----------------------------------------\n\nTITLE: Importing WidgetsRenderHook class in Filament PHP\nDESCRIPTION: This code snippet shows how to import the `WidgetsRenderHook` class from the `Filament\\Widgets\\View` namespace. This class is required when working with render hooks related to Filament widgets.  This class is used to reference available render hook constants for widgets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\View\\WidgetsRenderHook;\n```\n\n----------------------------------------\n\nTITLE: Customizing Copied Text (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the text that is copied to the clipboard when a Filament table text column is made copyable, using the `copyableState()` method. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('url')\n    ->copyable()\n    ->copyableState(fn (string $state): string => \"URL: {$state}\")\n```\n\n----------------------------------------\n\nTITLE: Disable Closing by Escaping (Blade)\nDESCRIPTION: Shows how to prevent the modal from closing when the escape key is pressed using the `:close-by-escaping=\"false\"` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :close-by-escaping=\"false\">\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Icon Button as Anchor Link - Blade\nDESCRIPTION: This snippet demonstrates how to configure a Filament icon button as an anchor link using the `tag` and `href` attributes. By setting `tag` to \"a\", the component renders an `<a>` tag instead of a `<button>` tag, allowing navigation to a specified URL when clicked.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-arrow-top-right-on-square\"\n    href=\"https://filamentphp.com\"\n    tag=\"a\"\n    label=\"Filament\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Preventing Permanent File Storage in Filament\nDESCRIPTION: This code snippet shows how to prevent files from being stored permanently when the form is submitted in Filament. It uses the `storeFiles(false)` method of the FileUpload component, resulting in a temporary file upload object being returned instead of a permanent file path. This is suitable for temporary files such as imported CSVs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/09-file-upload.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\FileUpload;\n\nFileUpload::make('attachment')\n    ->storeFiles(false)\n```\n\n----------------------------------------\n\nTITLE: Ordering of disabled() and relationship() in CheckboxList - PHP\nDESCRIPTION: This example demonstrates the need to call `disabled()` before `relationship()`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/06-checkbox-list.md#_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\CheckboxList;\n\nCheckboxList::make('technologies')\n    ->disabled()\n    ->relationship(titleAttribute: 'name')\n```\n\n----------------------------------------\n\nTITLE: Customizing Items Per Page (PHP)\nDESCRIPTION: This PHP snippet showcases how to allow users to customize the number of items displayed per page. A `$perPage` property is defined in the Livewire component and used to paginate the user data. The initial value is set to 10.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-pagination.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass ListUsers extends Component\n{\n    public int | string $perPage = 10;\n    \n    // ...\n    \n    public function render(): View\n    {\n        return view('livewire.list-users', [\n            'users' => User::query()->paginate($this->perPage),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Modal (Blade)\nDESCRIPTION: Demonstrates how to add an icon to a Filament modal using the `icon` attribute.  The value should correspond to a Blade UI Kit icon. You can also set the `icon-color` attribute to modify the icon color.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal icon=\"heroicon-o-information-circle\">\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal\n    icon=\"heroicon-o-exclamation-triangle\"\n    icon-color=\"danger\"\n>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Using the Static Access Method (PHP)\nDESCRIPTION: Demonstrates how to use the static get method to access a plugin's configuration. Requires the BlogPlugin class with a static get() method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/13-plugins.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nBlogPlugin::get()->hasAuthorResource()\n```\n\n----------------------------------------\n\nTITLE: Expand Collapsible Panel by Default (PHP)\nDESCRIPTION: This code snippet shows how to expand a collapsible panel by default using the `collapsed(false)` method. The `Split` layout is used with 'phone' and 'email' columns, and the panel is configured to start from the medium breakpoint ('md'). Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\Layout\\Panel;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nPanel::make([\n    Split::make([\n        TextColumn::make('phone')\n            ->icon('heroicon-m-phone'),\n        TextColumn::make('email')\n            ->icon('heroicon-m-envelope'),\n    ])->from('md'),\n])->collapsed(false)\n```\n\n----------------------------------------\n\nTITLE: Generating Chart Data from Eloquent Model (PHP)\nDESCRIPTION: This code demonstrates how to generate chart data from an Eloquent model using the `flowframe/laravel-trend` package. It queries blog post data per month for the current year.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Flowframe\\Trend\\Trend;\nuse Flowframe\\Trend\\TrendValue;\n\nprotected function getData(): array\n{\n    $data = Trend::model(BlogPost::class)\n        ->between(\n            start: now()->startOfYear(),\n            end: now()->endOfYear(),\n        )\n        ->perMonth()\n        ->count();\n\n    return [\n        'datasets' => [\n            [\n                'label' => 'Blog posts',\n                'data' => $data->map(fn (TrendValue $value) => $value->aggregate),\n            ],\n        ],\n        'labels' => $data->map(fn (TrendValue $value) => $value->date),\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Send Database Notification via Notify (PHP)\nDESCRIPTION: Sends a database notification using the `notify()` method. Requires a recipient user object.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\n$recipient = auth()->user();\n\n$recipient->notify(\n    Notification::make()\n        ->title('Saved successfully')\n        ->toDatabase(),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting the $resource property in Resource Pages (PHP)\nDESCRIPTION: This code snippet demonstrates the mandatory declaration of the `$resource` property in Filament v3 resource pages.  It is required to avoid errors related to uninitialized static properties. Setting the property ensures that the resource is correctly associated with the page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/15-upgrade-guide.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nprotected static string $resource = PostResource::class;\n```\n\n----------------------------------------\n\nTITLE: Creating a Section Without Header - PHP\nDESCRIPTION: This snippet shows how to create a section without a header. This results in the components being wrapped in a simple card.  Requires the Filament Forms package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/06-section.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Section;\n\nSection::make()\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Add translations\nDESCRIPTION: Adds translations for the text in the clock widget.  This allows users to translate the widget into their language.  The translations are added to the resources/lang/en/widget.php file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'title' => 'Clock Widget',\n    'description' => 'Your current time is:',\n];\n```\n\n----------------------------------------\n\nTITLE: Create a Filament Chart Widget using Artisan\nDESCRIPTION: This command generates a new chart widget named TreatmentsChart within the Filament application. The `--chart` option specifies that the widget should be a chart.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget TreatmentsChart --chart\n```\n\n----------------------------------------\n\nTITLE: Registering Import Policy in AuthServiceProvider - Filament\nDESCRIPTION: This code snippet demonstrates how to register an `ImportPolicy` in your `AuthServiceProvider` to customize authorization logic for Filament imports. This allows you to control access to the failure CSV file generated during import.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Policies\\ImportPolicy;\nuse Filament\\Actions\\Imports\\Models\\Import;\n\nprotected $policies = [\n    Import::class => ImportPolicy::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering a render hook with scope in Blade template\nDESCRIPTION: This code snippet shows how to render a render hook with a specific scope in a Blade template. The scope is passed as the second argument to `renderHook()`, allowing you to control where the hook is rendered based on the component's class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n{{ \\Filament\\Support\\Facades\\FilamentView::renderHook(\\Filament\\View\\PanelsRenderHook::PAGE_START, scopes: $this->getRenderHookScopes()) }}\n```\n\n----------------------------------------\n\nTITLE: Registering custom icons with FilamentIcon - PHP\nDESCRIPTION: This code snippet demonstrates how to register custom icons within a Filament service provider using the `FilamentIcon` facade.  It maps Filament's default icon aliases to custom Blade icons or views.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/03-icons.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentIcon;\n\nFilamentIcon::register([\n    'panels::topbar.global-search.field' => 'fas-magnifying-glass',\n    'panels::sidebar.group.collapse-button' => view('icons.chevron-up'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS dependencies\nDESCRIPTION: This command installs Tailwind CSS and its required dependencies including Tailwind Forms, Typography plugins, PostCSS, PostCSS Nesting and Autoprefixer as dev dependencies.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wrapper Attributes\nDESCRIPTION: Adds custom HTML attributes to the entry wrapper of a TextEntry. The `extraEntryWrapperAttributes()` method accepts an array of attributes. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('slug')\n    ->extraEntryWrapperAttributes(['class' => 'entry-locked'])\n```\n\n----------------------------------------\n\nTITLE: Inline Checkbox (PHP)\nDESCRIPTION: Positions the checkbox label inline with the checkbox input.  The `inline()` method is called on the `Checkbox` instance to set the layout mode.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/04-checkbox.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Checkbox;\n\nCheckbox::make('is_admin')->inline()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Number Locale Application-Wide - PHP\nDESCRIPTION: This snippet shows how to set the default locale for number formatting across the entire Filament application using the `Infolist::$defaultNumberLocale` property in a service provider's boot method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Infolist;\n\nInfolist::$defaultNumberLocale = 'nl';\n```\n\n----------------------------------------\n\nTITLE: Update package.json\nDESCRIPTION: Replaces the contents of the package.json file with a minimal configuration. This removes unneeded dependencies and scripts, streamlining the build process for the clock widget plugin.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"private\": true,\n    \"type\": \"module\",\n    \"scripts\": {\n        \"dev\": \"node bin/build.js --dev\",\n        \"build\": \"node bin/build.js\"\n    },\n    \"devDependencies\": {\n        \"esbuild\": \"^0.17.19\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Footer Sticky (Blade)\nDESCRIPTION: Shows how to make the modal footer sticky using the `sticky-footer` attribute. This keeps the footer visible even when scrolling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_11\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal sticky-footer>\n    {{-- Modal content --}}\n    \n    <x-slot name=\"footer\">\n        {{-- Modal footer content --}}\n    </x-slot>\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Basic Input Component Usage in Blade\nDESCRIPTION: This code snippet demonstrates how to use the Filament input component. It requires wrapping the input within the `<x-filament::input.wrapper>` component to provide styling and functionality. The `wire:model` attribute binds the input to a Livewire property named \"name\". The `type` attribute defines the input type.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::input.wrapper>\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Registering Render Hook with Blade component - Filament PHP\nDESCRIPTION: This snippet demonstrates how to register a render hook in Filament using `FilamentView::registerRenderHook()`. It injects a Blade component, specifically `livewire-ui-modal`, into the `BODY_START` render hook, which places the component after the opening `<body>` tag. It requires the `FilamentView` facade and `Blade` facade.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\nuse Illuminate\\Support\\Facades\\Blade;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::BODY_START,\n    fn (): string => Blade::render('@livewire(\\'livewire-ui-modal\\')'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a simple Placeholder - PHP\nDESCRIPTION: This code snippet demonstrates how to create a simple placeholder that displays the formatted creation date of a Post model record. It uses the `Placeholder::make()` method to define the placeholder with a unique name ('created') and sets the content using a closure that accesses the `created_at` property of the `$record` (Post model) and formats it as a string.  Requires: Filament forms.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-placeholder.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Models\\Post;\nuse Filament\\Forms\\Components\\Placeholder;\n\nPlaceholder::make('created')\n    ->content(fn (Post $record): string => $record->created_at->toFormattedDateString())\n```\n\n----------------------------------------\n\nTITLE: Initializing a Text Input Field in Filament PHP\nDESCRIPTION: This snippet demonstrates how to create a basic text input field using Filament's TextInput component. The `make()` method defines the name attribute of the input field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/02-text-input.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n```\n\n----------------------------------------\n\nTITLE: Require Filament Actions package\nDESCRIPTION: This command uses Composer to require the Filament Actions package. The `^3.3` version constraint specifies that Composer should install the latest version of the package within the 3.3.x range. The `-W` flag tells Composer to also update any dependencies of the package, if necessary.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/actions:\"^3.3\" -W\n```\n\n----------------------------------------\n\nTITLE: Overwriting Global Configuration\nDESCRIPTION: Overwrites the global configuration for a specific TextEntry. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('name')\n    ->words(null)\n```\n\n----------------------------------------\n\nTITLE: Registering Export Policy\nDESCRIPTION: This code snippet shows how to register an `ExportPolicy` class in the `AuthServiceProvider` to customize authorization logic for export downloads. It maps the `Export` model to the `ExportPolicy`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Policies\\ExportPolicy;\nuse Filament\\Actions\\Exports\\Models\\Export;\n\nprotected $policies = [\n    Export::class => ExportPolicy::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding an Image to Filament Dropdown Item in Blade\nDESCRIPTION: This snippet shows how to add a circular image to a dropdown item using the `image` attribute. The attribute value should be a valid URL to the image.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item image=\"https://filamentphp.com/dan.jpg\">\n    Dan Harrin\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Width in PHP\nDESCRIPTION: This code snippet demonstrates setting the width of the dropdown using the `dropdownWidth()` method.  The width options correspond to Tailwind's max-width scale. Requires `Filament\\Support\\Enums\\MaxWidth`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/05-grouping-actions.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\MaxWidth;\n\nActionGroup::make([\n    // Array of actions\n])\n    ->dropdownWidth(MaxWidth::ExtraSmall)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Widget in Filament (Bash)\nDESCRIPTION: This snippet shows the command to create a new table widget in Filament using the artisan command `make:filament-widget` with the `--table` flag.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-widget LatestOrders --table\n```\n\n----------------------------------------\n\nTITLE: Injecting action instance (PHP)\nDESCRIPTION: This code snippet demonstrates how to inject the action instance into a configuration function, providing direct access to the action's properties and methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/08-advanced.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction (Action $action) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Default Tab - PHP\nDESCRIPTION: Demonstrates how to customize the default tab that is selected when the page loads by returning the array key of the tab from the `getDefaultActiveTab()` method. Requires `Filament\\Resources\\Components\\Tab`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/02-listing-records.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Resources\\Components\\Tab;\n\npublic function getTabs(): array\n{\n    return [\n        'all' => Tab::make(),\n        'active' => Tab::make(),\n        'inactive' => Tab::make(),\n    ];\n}\n\npublic function getDefaultActiveTab(): string | int | null\n{\n    return 'active';\n}\n```\n\n----------------------------------------\n\nTITLE: Update vite.config.js for Livewire Refresh\nDESCRIPTION: This JavaScript configuration file updates Vite to automatically refresh the page when Livewire components are updated. It enhances the development experience by providing immediate feedback on component changes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport laravel, { refreshPaths } from 'laravel-vite-plugin'\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: [\n                ...refreshPaths,\n                'app/Livewire/**',\n            ],\n        }),\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering the Component Schema in Blade (Blade)\nDESCRIPTION: Demonstrates how to render the component's schema within the Blade view of a custom layout component. The `$getChildComponentContainer()` function renders the child components defined in the schema. This allows you to dynamically build the layout of the infolist.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/07-custom.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<div>\n    {{ $getChildComponentContainer() }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Hiding the Close Button (Blade)\nDESCRIPTION: Shows how to remove the close button from the modal header using the `:close-button=\"false\"` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_15\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal :close-button=\"false\">\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Form View Component (PHP)\nDESCRIPTION: Creates a view component in a Filament form. This allows rendering a Blade template as a form element.  The specified Blade file will be rendered within the form.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/04-layout/08-custom.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\View;\n\nView::make('filament.forms.components.wizard')\n```\n\n----------------------------------------\n\nTITLE: Creating a View Component in Filament Infolists (PHP)\nDESCRIPTION: Demonstrates how to create a custom layout using a view component in Filament Infolists. This method allows you to define the layout in a Blade file instead of creating a dedicated PHP class. It assumes a Blade file exists at `resources/views/filament/infolists/components/box.blade.php`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/07-custom.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\View;\n\nView::make('filament.infolists.components.box')\n```\n\n----------------------------------------\n\nTITLE: Adding a Badge to Filament Dropdown Item in Blade\nDESCRIPTION: This code shows how to render a badge on top of a dropdown item using the `badge` slot. The badge content is placed within the `badge` slot.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_6\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item>\n    Mark notifications as read\n    \n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Creating a Filament Page using Artisan\nDESCRIPTION: This command generates the necessary files for a new Filament page, including the page class and view file.  The page class resides in the `/Pages` directory of the Filament directory, and the view in the `/pages` directory of the Filament views directory.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:filament-page Settings\n```\n\n----------------------------------------\n\nTITLE: Clean up composer.json\nDESCRIPTION: Removes unnecessary autoload and extra options from the composer.json file. This snippet removes the database factories and facade alias, which are not needed for the simple clock widget plugin.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n        // We can remove the database factories\n        \"Awcodes\\\\ClockWidget\\\\Database\\\\Factories\\\\\": \"database/factories/\"\n    }\n},\n\"extra\": {\n    \"laravel\": {\n        // We can remove the facade\n        \"aliases\": {\n            \"ClockWidget\": \"Awcodes\\\\ClockWidget\\\\Facades\\\\ClockWidget\"\n        }\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Displaying Row Index Starting from Zero (PHP)\nDESCRIPTION: This code snippet shows how to display the row index starting from 0 using the `rowIndex()` method and setting `isFromZero` to `true` in a Filament table. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('index')\n    ->rowIndex(isFromZero: true)\n```\n\n----------------------------------------\n\nTITLE: Overriding the Default View (PHP)\nDESCRIPTION: This code shows how to override the default view for a Filament resource page by setting the static `$view` property to the path of a custom Blade template. This assumes the blade file is located at `resources/views/filament/resources/users/pages/create-user.blade.php`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/03-creating-records.md#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nprotected static string $view = 'filament.resources.users.pages.create-user';\n```\n\n----------------------------------------\n\nTITLE: Setting Filament Dropdown Placement in Blade\nDESCRIPTION: This snippet demonstrates how to set the placement of a dropdown relative to its trigger using the `placement` attribute. The value corresponds to a Tailwind CSS positioning class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown placement=\"top-start\">\n    {{-- Dropdown items --}}\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Add LocaleSwitcher to Relation Manager Table (PHP)\nDESCRIPTION: Adds a `LocaleSwitcher` action to the header of a Filament Relation Manager's table.  This allows users to switch between locales when managing related records.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->columns([\n            // ...\n        ])\n        ->headerActions([\n            // ...\n            Tables\\Actions\\LocaleSwitcher::make(),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Logo (HTML) - FilamentPHP\nDESCRIPTION: This code snippet shows how to set an HTML snippet (in this case an inline SVG) as the brand logo in a FilamentPHP panel using the `brandLogo()` method. It uses a view to render the HTML.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->brandLogo(fn () => view('filament.admin.logo'));\n}\n```\n\nLANGUAGE: blade\nCODE:\n```\n<svg\n    viewBox=\"0 0 128 26\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"h-full fill-gray-500 dark:fill-gray-400\"\n>\n    <!-- ... -->\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Weight (PHP)\nDESCRIPTION: This code snippet demonstrates how to change the font weight of a Filament table text column using the `weight()` method and `FontWeight` enum. Requires Filament Tables and Filament Support packages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n    ->weight(FontWeight::Bold)\n```\n\n----------------------------------------\n\nTITLE: Doesnt End With Validation - Filament\nDESCRIPTION: Validates that the field's value does not end with any of the given values. It uses the `doesntEndWith()` method, accepting an array of strings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nField::make('name')->doesntEndWith(['admin'])\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom View Column in Filament\nDESCRIPTION: This snippet demonstrates how to render a custom view for a table cell in Filament using the `ViewColumn` class. It specifies the path to the Blade template that will be used to render the cell.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/10-custom.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\ViewColumn;\n\nViewColumn::make('status')->view('filament.tables.columns.status-switcher')\n```\n\n----------------------------------------\n\nTITLE: Configuring Filament Plugin Skeleton\nDESCRIPTION: This command is used to configure a plugin based on the Filament Plugin Skeleton. It prompts the user with a series of questions to configure the plugin and then stubs out a new plugin based on the responses. This allows developers to quickly start building a new extension for Filament.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/01-getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp ./configure.php\n```\n\n----------------------------------------\n\nTITLE: Blade template for custom view (Blade)\nDESCRIPTION: This code shows a basic example of a Blade template for a custom Filament view.  It checks for the presence of an infolist and renders either the infolist or the form. It also handles the display of relation managers.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_14\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament-panels::page>\n    @if ($this->hasInfolist())\n        {{ $this->infolist }}\n    @else\n        {{ $this->form }}\n    @endif\n\n    @if (count($relationManagers = $this->getRelationManagers()))\n        <x-filament-panels::resources.relation-managers\n            :active-manager=\"$this->activeRelationManager\"\n            :managers=\"$relationManagers\"\n            :owner-record=\"$record\"\n            :page-class=\"static::class\"\n        />\n    @endif\n</x-filament-panels::page>\n```\n\n----------------------------------------\n\nTITLE: Create Filament Relation Manager (Artisan)\nDESCRIPTION: This command creates a new Filament relation manager, connecting the specified resource to its related model.  It requires the resource name, the relationship name in the model, and the column to display from the related table.  It generates a PHP file that needs to be registered in the resource's `getRelations()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-relation-manager PatientResource treatments description\n```\n\n----------------------------------------\n\nTITLE: Install Filament (Existing Laravel Project)\nDESCRIPTION: This command installs the Filament Form Builder assets into an existing Laravel project. It requires that Filament be added as a dependency.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --forms\n```\n\n----------------------------------------\n\nTITLE: Limiting Column Length with Export Options (PHP)\nDESCRIPTION: This example demonstrates how to utilize export options within the `limit()` method of an `ExportColumn` to dynamically control the maximum length of a column's content based on user-defined settings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\ExportColumn;\n\nExportColumn::make('description')\n    ->limit(fn (array $options): int => $options['descriptionLimit'] ?? 100)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Infolist Layout Class (Bash)\nDESCRIPTION: Shows the command to generate a custom layout component class for Filament Infolists using Artisan. This command creates both the PHP class and the associated Blade view file. This is useful when you want to create reusable layout components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/07-custom.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:infolist-layout Box\n```\n\n----------------------------------------\n\nTITLE: Disabling Toolbar Buttons - Filament PHP\nDESCRIPTION: This snippet shows how to disable specific toolbar buttons in the Rich Editor component using the `disableToolbarButtons()` method.  It takes an array of button names as an argument.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/10-rich-editor.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n    ->disableToolbarButtons([\n        'blockquote',\n        'strike',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding a View Page to Existing Resource (Artisan)\nDESCRIPTION: This command creates a new View page for an existing Filament resource.  The `--resource` option specifies the target resource, and `--type=ViewRecord` indicates that a View page should be created.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/05-viewing-records.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page ViewUser --resource=UserResource --type=ViewRecord\n```\n\n----------------------------------------\n\nTITLE: Generating Color Palette from Hex - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to generate a color palette for a FilamentPHP panel based on a single hex color value.  Filament attempts to automatically create the color palette from the hex value provided.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$panel\n    ->colors([\n        'primary' => '#6366f1',\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Date/Time Tooltip to Text Entry - PHP\nDESCRIPTION: This snippet combines the `since()` method for relative time display with the `dateTimeTooltip()` method to provide a formatted date/time in a tooltip for more detailed information.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('created_at')\n    ->since()\n    ->dateTimeTooltip()\n```\n\n----------------------------------------\n\nTITLE: Setting Button Size\nDESCRIPTION: Shows how to modify the size of the Filament button using the `size` attribute.  Available sizes are 'xs', 'sm', 'lg', and 'xl'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button size=\"xs\">\n    New user\n</x-filament::button>\n\n<x-filament::button size=\"sm\">\n    New user\n</x-filament::button>\n\n<x-filament::button size=\"lg\">\n    New user\n</x-filament::button>\n\n<x-filament::button size=\"xl\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Custom Font Weight with CSS Class Blade\nDESCRIPTION: Shows how to apply a custom CSS class to set the font weight of the Filament link component. This allows developers to use custom font weights not directly provided by the `weight` attribute. In this example, a Tailwind CSS class `md:font-[650]` is used to set a custom font weight.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_4\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"md:font-[650]\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Limit in Filament (PHP)\nDESCRIPTION: Shows how to limit the maximum number of images displayed using the limit() method. This is useful for preventing too many images from cluttering the infolist.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/04-image.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\ImageEntry;\n\nImageEntry::make('colleagues.avatar')\n    ->height(40)\n    ->circular()\n    ->stacked()\n    ->limit(3)\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Job Tags\nDESCRIPTION: This code snippet demonstrates how to override the `getJobTags()` method in an exporter class to customize the tags applied to export jobs. It returns an array containing the export ID as a tag.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\npublic function getJobTags(): array\n{\n    return [\"export{$this->export->getKey()}\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra HTML Attributes to a Filament Form Field\nDESCRIPTION: This code snippet shows how to add extra HTML attributes to the outer DOM element of a Filament form field using the `extraAttributes()` method. This allows you to customize the HTML attributes of the field's container.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/01-getting-started.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\TextInput;\n\nTextInput::make('name')\n    ->extraAttributes(['title' => 'Text input'])\n```\n\n----------------------------------------\n\nTITLE: Require Filament Forms via Composer\nDESCRIPTION: This command adds the Filament Forms package to your Laravel project using Composer. It requires Composer to be installed and configured.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/forms:\"^3.3\" -W\n```\n\n----------------------------------------\n\nTITLE: Create ClockWidget class\nDESCRIPTION: Creates the ClockWidget class, extending Filament's Widget class.  It specifies the view file that will be used to render the widget's content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Widgets\\Widget;\n\nclass ClockWidget extends Widget\n{\n    protected static string $view = 'clock-widget::widget';\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Tailwind CSS\nDESCRIPTION: This JavaScript code configures Tailwind CSS by importing a preset from the Filament support package. It defines the content paths where Tailwind CSS should look for classes to apply styles, including PHP and Blade files in the `app`, `resources`, and `vendor` directories.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport preset from './vendor/filament/support/tailwind.config.preset'\n\nexport default {\n    presets: [preset],\n    content: [\n        './app/Filament/**/*.php',\n        './resources/views/filament/**/*.blade.php',\n        './vendor/filament/**/*.blade.php',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Icon - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to set an icon for a tab in a Filament infolist Tabs component. The `icon()` method is used to specify the icon using a Blade UI Kit icon. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->icon('heroicon-m-bell')\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Making the Modal Header Sticky (PHP)\nDESCRIPTION: This snippet shows how to make the modal header sticky using the `stickyModalHeader()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nAction::make('updateAuthor')\n    ->form([\n        // ...\n    ])\n    ->action(function (array $data): void {\n        // ...\n    })\n    ->stickyModalHeader()\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Blade\nDESCRIPTION: Shows how to trigger the error state of the input wrapper using the `valid` attribute in Blade.  The `valid` attribute accepts a boolean value that indicates whether the input is valid or not based on the validation result.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-input-wrapper.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::input.wrapper :valid=\"! $errors->has('name')\">\n    <x-filament::input\n        type=\"text\"\n        wire:model=\"name\"\n    />\n</x-filament::input.wrapper>\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to a Section without Heading via ID (PHP)\nDESCRIPTION: This snippet demonstrates how to add header actions to a section without a heading in Filament infolists by assigning a unique ID to the section using the `id()` method.  It's necessary to use `id()` to locate the action if there is no heading.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make()\n    ->id('rateLimitingSection')\n    ->headerActions([\n        // ...\n    ])\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Publish Filament Configuration (Bash)\nDESCRIPTION: This Artisan command publishes the Filament package configuration files to the application's config directory. It allows for customization of Filament's default settings.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Rendering a render hook in Blade template\nDESCRIPTION: This code snippet demonstrates how to render a render hook within a Blade template using the `FilamentView::renderHook()` method. It renders the hook associated with `PanelsRenderHook::PAGE_START`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_9\n\nLANGUAGE: blade\nCODE:\n```\n{{ \\Filament\\Support\\Facades\\FilamentView::renderHook(\\Filament\\View\\PanelsRenderHook::PAGE_START) }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Widgets in Filament (PHP)\nDESCRIPTION: This snippet demonstrates how to disable the default widgets displayed on the Filament dashboard by updating the `widgets()` array within the panel configuration to an empty array.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/05-dashboard.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->widgets([]);\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting a Notification was Sent (Filament Testing Helper)\nDESCRIPTION: This example shows using the helper function `assertNotified()` directly. This checks if any notification was dispatched.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/06-testing.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Filament\\Notifications\\Testing\\assertNotified;\n\nit('sends a notification', function () {\n    assertNotified();\n});\n```\n\n----------------------------------------\n\nTITLE: Custom HTML with View Component (PHP)\nDESCRIPTION: This code snippet demonstrates how to add custom HTML to a Filament table using the `View` component. It uses a `Split` layout and a custom Blade view file. The view can be made collapsible. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/06-layout.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Enums\\FontWeight;\nuse Filament\\Tables\\Columns\\Layout\\Split;\nuse Filament\\Tables\\Columns\\Layout\\View;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Tables\\Columns\\TextColumn;\n\n[\n    Split::make([\n        ImageColumn::make('avatar')\n            ->circular(),\n        TextColumn::make('name')\n            ->weight(FontWeight::Bold)\n            ->searchable()\n            ->sortable(),\n    ]),\n    View::make('users.table.collapsible-row-content')\n        ->collapsible(),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Editor - Filament PHP\nDESCRIPTION: This code snippet initializes a basic Rich Editor component in a Filament form.  It sets the name of the field to 'content'.  This field is used to store HTML content.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/10-rich-editor.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\n\nRichEditor::make('content')\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to a Section Header in Filament Infolists (PHP)\nDESCRIPTION: This code demonstrates how to add an icon to the header of a section in Filament infolists using the `icon()` method.  The icon uses heroicons.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/05-section.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Section;\n\nSection::make('Cart')\n    ->description('The items you have selected for purchase')\n    ->icon('heroicon-m-shopping-bag')\n    ->schema([\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Automated Filament v3 Upgrade (Bash)\nDESCRIPTION: This snippet demonstrates the commands required to automatically upgrade a Filament application to version 3 using the `filament/upgrade` package. It includes requiring the package via Composer and executing the upgrade script.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/10-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/upgrade:\"^3.2\" -W --dev\n\nvendor/bin/filament-v3\n```\n\n----------------------------------------\n\nTITLE: Initializing a basic form schema\nDESCRIPTION: This code snippet initializes a basic form schema using `TextInput` and `RichEditor` components. It demonstrates how to define the form structure and assign field types.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/02-getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Form;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            TextInput::make('title'),\n            TextInput::make('slug'),\n            RichEditor::make('content'),\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Queue and Notification Migrations\nDESCRIPTION: These commands publish the necessary migrations for Laravel's queue batching and notifications features, which are required by Filament's ExportAction.  The first set is for Laravel 11 and higher, the second is for Laravel 10. These migrations manage job batches and notifications in the database.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Laravel 11 and higher\nphp artisan make:queue-batches-table\nphp artisan make:notifications-table\n\n# Laravel 10\nphp artisan queue:batches-table\nphp artisan notifications:table\n```\n\n----------------------------------------\n\nTITLE: Setting Infolist Action Data with Pest\nDESCRIPTION: This snippet demonstrates how to set the data for an infolist action without immediately calling it. It mounts the action using `mountInfolistAction` and then sets the data using `setInfolistActionData`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can send invoices', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->mountInfolistAction('customer', 'send')\n        ->setInfolistActionData([\n            'email' => $email = fake()->email(),\n        ])\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing and Running Filament Migrations\nDESCRIPTION: This snippet shows how to publish and run the migrations for the tables that Filament uses to store information about imports. These tables track import status and any errors that may occur.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/08-import.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-actions-migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Add Tailwind CSS Layers (CSS)\nDESCRIPTION: This CSS code adds Tailwind's base, components, utilities, and variants layers to the application's CSS file. It enables Tailwind's styling within the application.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Button Color - Blade\nDESCRIPTION: This snippet demonstrates how to modify the color of a Filament icon button using the `color` attribute. It showcases various color options, including \"danger\", \"gray\", \"info\", \"success\", and \"warning\", allowing for visual customization of the button.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-icon-button.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"danger\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"gray\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"info\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"success\"\n    label=\"New label\"\n/>\n```\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::icon-button\n    icon=\"heroicon-m-plus\"\n    color=\"warning\"\n    label=\"New label\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Export Formats in Exporter Class (PHP)\nDESCRIPTION: This code snippet shows how to override the `getFormats()` method within an exporter class to set the default export formats for all actions using that exporter. It returns an array of `ExportFormat` enums.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/07-prebuilt-actions/09-export.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Exports\\Enums\\ExportFormat;\n\npublic function getFormats(): array\n{\n    return [\n        ExportFormat::Csv,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Simple and Cursor Pagination (PHP)\nDESCRIPTION: This PHP snippet illustrates how to use simple and cursor pagination with the `User` model. Simple pagination only renders 'previous' and 'next' buttons, while cursor pagination is suitable for large datasets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-pagination.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\n\nUser::query()->simplePaginate(10)\nUser::query()->cursorPaginate(10)\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Color (PHP)\nDESCRIPTION: This code snippet demonstrates how to customize the color of the icon in a Filament table text column using the `iconColor()` method. The color is specified using a theme color name. Requires Filament Tables package.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('email')\n    ->icon('heroicon-m-envelope')\n    ->iconColor('primary')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Filter Fields in Filament\nDESCRIPTION: This code snippet shows how to set a default value for a field within a custom filter form. It uses the `default()` method on the `DatePicker` component to set the default value to the current date and time.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/05-custom.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('created_at')\n    ->form([\n        DatePicker::make('created_from'),\n        DatePicker::make('created_until')\n            ->default(now()),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Wrapping Content in a Filament PHP Text Column\nDESCRIPTION: This example shows how to enable text wrapping in a TextColumn using the `wrap()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->wrap()\n```\n\n----------------------------------------\n\nTITLE: Open Database Notifications Modal (Blade)\nDESCRIPTION: Opens the database notifications modal by dispatching a browser event.  This allows the modal to be opened from any element in the view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/03-database-notifications.md#_snippet_12\n\nLANGUAGE: blade\nCODE:\n```\n<button\n    x-data=\"{}\"\n    x-on:click=\"$dispatch('open-modal', { id: 'database-notifications' })\"\n    type=\"button\"\n>\n    Notifications\n</button>\n```\n\n----------------------------------------\n\nTITLE: Changing Badge Color Blade\nDESCRIPTION: Demonstrates how to change the color of the badge on a Filament link component using the `badge-color` attribute.  The available colors are the same as the main link colors, allowing for consistent visual styling.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link badge-color=\"danger\">\n    Mark notifications as read\n\n    <x-slot name=\"badge\">\n        3\n    </x-slot>\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with Division - PHP\nDESCRIPTION: This snippet extends the currency formatting by including a `divideBy` argument.  It divides the 'price' by 100 before formatting it as EUR, useful when prices are stored in cents.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('price')\n    ->money('EUR', divideBy: 100)\n```\n\n----------------------------------------\n\nTITLE: Defining Form Schema for Edit Page\nDESCRIPTION: This code shows how to define the form schema for the new Edit page.  You can add specific form fields for this page that are not on the main edit page. Dependencies: Filament\\Forms\\Form\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/04-editing-records.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Form;\n\npublic function form(Form $form): Form\n{\n    return $form\n        ->schema([\n            // ...\n        ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SpatieTagsColumn Usage\nDESCRIPTION: Shows the basic usage of the `SpatieTagsColumn` table column within a Filament table.  Requires that tags have already been attached to the model according to Spatie's documentation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\SpatieTagsColumn;\n\nSpatieTagsColumn::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Enabled/Disabled with Pest\nDESCRIPTION: This snippet illustrates how to assert that an infolist action is enabled or disabled. It verifies that the 'send' action is disabled and the 'print' action is enabled.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print a customer for a sent invoice', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionDisabled('customer', 'send')\n        ->assertInfolistActionEnabled('customer', 'print');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an Icon to Filament Dropdown Item in Blade\nDESCRIPTION: This snippet shows how to add an icon to a dropdown item using the `icon` attribute. The icons are sourced from Blade UI Kit's blade-icons.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item icon=\"heroicon-m-pencil\">\n    Edit\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Publish Filament Configuration\nDESCRIPTION: This command publishes the Filament package configuration files. This allows developers to customize Filament's settings according to their project's specific requirements.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Disabling Dark Mode - FilamentPHP\nDESCRIPTION: This code snippet shows how to disable dark mode in a FilamentPHP panel using the `darkMode()` method. This forces the panel to always use the light theme.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->darkMode(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving scopes within a render hook in Filament PHP\nDESCRIPTION: This code snippet illustrates how to access the scopes passed to a render hook function. The `$scopes` array contains the class names of the components or pages where the hook is being rendered, allowing you to customize the view based on the context.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (array $scopes): View => view('warning-banner', ['scopes' => $scopes]),\n    scopes: \\App\\Filament\\Resources\\UserResource::class,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Page Options (Blade)\nDESCRIPTION: This Blade snippet shows how to use the `page-options` attribute of the Filament pagination component to define a list of available page size options for the user.  The `current-page-option-property` attribute binds the selected option to the `$perPage` property in the Livewire component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-pagination.md#_snippet_4\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::pagination\n    :paginator=\"$users\"\n    :page-options=\"[5, 10, 20, 50, 100, 'all']\"\n    :current-page-option-property=\"perPage\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Install Filament Infolists Assets\nDESCRIPTION: This Artisan command installs the assets required for the Filament Infolists package in an existing Laravel project. This command is essential to set up Filament Infolists correctly.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --infolists\n```\n\n----------------------------------------\n\nTITLE: Rendering a basic Avatar\nDESCRIPTION: This code snippet demonstrates how to render a basic circular avatar using the Filament Blade component. It requires the `src` and `alt` attributes to be set, representing the image source and alternative text, respectively. The component will display a circular image.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-avatar.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Aligning the Add Action Button\nDESCRIPTION: This snippet adjusts the alignment of the add action button using the `addActionAlignment()` method. It utilizes the `Alignment` enum to align the button to the start of the container.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/13-builder.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Builder;\nuse Filament\\Support\\Enums\\Alignment;\n\nBuilder::make('content')\n    ->schema([\n        // ...\n    ])\n    ->addActionAlignment(Alignment::Start)\n```\n\n----------------------------------------\n\nTITLE: Adding a Colored Badge - Filament\nDESCRIPTION: Shows how to add a colored badge to the corner of the button using the `badgeColor()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Actions\\Action;\n\nAction::make('filter')\n    ->iconButton()\n    ->icon('heroicon-m-funnel')\n    ->badge(5)\n    ->badgeColor('success')\n```\n\n----------------------------------------\n\nTITLE: Setting Chart.js Configuration Options (PHP)\nDESCRIPTION: This example demonstrates how to set Chart.js configuration options using the `$options` property. It shows how to disable the legend.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/03-charts.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected static ?array $options = [\n    'plugins' => [\n        'legend' => [\n            'display' => false,\n        ],\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Changing Link Color Blade\nDESCRIPTION: Explains how to change the color of the Filament link component using the `color` attribute.  Available color options include 'danger', 'gray', 'info', 'success', and 'warning'.  Each example illustrates a different color option.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link color=\"danger\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link color=\"gray\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link color=\"info\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link color=\"success\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link color=\"warning\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Basic Color Entry Configuration in Filament\nDESCRIPTION: This snippet demonstrates the basic usage of the `ColorEntry` component to display a color value from a model attribute named 'color' within a Filament infolist. It renders a color preview based on the CSS color definition stored in the 'color' attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/05-color.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\ColorEntry;\n\nColorEntry::make('color')\n```\n\n----------------------------------------\n\nTITLE: Finalize Filament v3 Installation (PHP)\nDESCRIPTION: This command finalizes the Filament v3 installation process. It must be executed after using the automated upgrade script or manually upgrading Filament. This command is essential for all new Filament projects.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/07-upgrade-guide.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nphp artisan filament:install\n```\n\n----------------------------------------\n\nTITLE: Setting Default Theme Mode - FilamentPHP\nDESCRIPTION: This code snippet demonstrates how to set the default theme mode for a FilamentPHP panel using the `defaultThemeMode()` method. In this case, it forces the panel to use the light theme by default.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/12-themes.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Enums\\ThemeMode;\nuse Filament\\Panel;\n\npublic function panel(Panel $panel): Panel\n{\n    return $panel\n        // ...\n        ->defaultThemeMode(ThemeMode::Light);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pagination While Reordering in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to enable pagination even while the table is in reorder mode, using the `$table->paginatedWhileReordering()` method. It's generally not recommended due to UX considerations, but it's available if needed.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->paginatedWhileReordering();\n}\n```\n\n----------------------------------------\n\nTITLE: Install Tailwind CSS Dependencies\nDESCRIPTION: This command installs Tailwind CSS v3 and its required plugins (Tailwind Forms and Typography) using npm. It's a crucial step for styling Filament components.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles (index.css)\nDESCRIPTION: This code snippet demonstrates custom styles defined in `index.css`. It targets the `.headings-component` class and its heading elements to provide specific font weights, letter spacing, line heights, and font sizes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.headings-component {\n    &:is(h1, h2, h3, h4, h5, h6) {\n         font-weight: 700;\n         letter-spacing: -.025em;\n         line-height: 1.1;\n     }\n\n    &h1 {\n         font-size: 2rem;\n     }\n\n    &h2 {\n         font-size: 1.75rem;\n     }\n\n    &h3 {\n         font-size: 1.5rem;\n     }\n\n    &h4 {\n         font-size: 1.25rem;\n     }\n\n    &h5,\n    &h6 {\n         font-size: 1rem;\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Entry to Specific Lines - PHP\nDESCRIPTION: This snippet shows how to limit a TextEntry to a specific number of lines using the `lineClamp()` method. The 'description' field will be clamped to 2 lines, truncating overflowing text.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/02-text.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('description')\n    ->lineClamp(2)\n```\n\n----------------------------------------\n\nTITLE: Example Custom Notification View (Blade)\nDESCRIPTION: This code snippet provides an example of a custom notification view built with Blade. It includes attributes for styling and animation, and it demonstrates how to access notification properties like title, date, and body using getter methods.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/05-customizing-notifications.md#_snippet_3\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament-notifications::notification\n    :notification=\"$notification\"\n    class=\"flex w-80 rounded-lg transition duration-200\"\n    x-transition:enter-start=\"opacity-0\"\n    x-transition:leave-end=\"opacity-0\"\n>\n    <h4>\n        {{ $getTitle() }}\n    </h4>\n\n    <p>\n        {{ $getDate() }}\n    </p>\n\n    <p>\n        {{ $getBody() }}\n    </p>\n\n    <span x-on:click=\"close\">\n        Close\n    </span>\n</x-filament-notifications::notification>\n```\n\n----------------------------------------\n\nTITLE: Basic SpatieTagsEntry Usage\nDESCRIPTION: Demonstrates the basic usage of the `SpatieTagsEntry` infolist entry within a Filament infolist. Requires that tags have already been attached to the model according to Spatie's documentation.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-tags-plugin/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\SpatieTagsEntry;\n\nSpatieTagsEntry::make('tags')\n```\n\n----------------------------------------\n\nTITLE: Install Filament Actions assets\nDESCRIPTION: This Artisan command installs the assets for the Filament Actions package. It copies the necessary files from the package into the project's public directory.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/01-installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --actions\n```\n\n----------------------------------------\n\nTITLE: Unguard Eloquent Models\nDESCRIPTION: This code disables Laravel's mass assignment protection by calling `Model::unguard()` in the `boot()` method of the `AppServiceProvider`.  This allows mass assignment of attributes to models for the sake of brevity. It is important to note that Filament only saves valid data to models.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/02-getting-started.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Illuminate\\Database\\Eloquent\\Model;\n\npublic function boot(): void\n{\n    Model::unguard();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Filament Configuration\nDESCRIPTION: This command publishes the configuration files of the Filament package, allowing customization of its default settings.  This is only required if you need to override the default configuration.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-config\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Rounding\nDESCRIPTION: This snippet shows how to control the rounding of the avatar. By setting the `circular` attribute to `false`, the avatar will be displayed as a square instead of a circle. The `src` and `alt` attributes are also required.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-avatar.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::avatar\n    src=\"https://filamentphp.com/dan.jpg\"\n    alt=\"Dan Harrin\"\n    :circular=\"false\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Livewire Events from Notification Actions - JavaScript\nDESCRIPTION: This snippet demonstrates dispatching a Livewire event when a notification action is clicked using JavaScript with Filament. The `dispatch()` method sends the event. `dispatchSelf` and `dispatchTo` are also shown.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/02-sending-notifications.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotification()\n    .title('Saved successfully')\n    .success()\n    .body('Changes to the post have been saved.')\n    .actions([\n        new FilamentNotificationAction('view')\n            .button()\n            .url('/view')\n            .openUrlInNewTab(),\n        new FilamentNotificationAction('undo')\n            .color('gray')\n            .dispatch('undoEditingPost'),\n    ])\n    .send()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew FilamentNotificationAction('undo')\n    .color('gray')\n    .dispatchSelf('undoEditingPost')\n\nnew FilamentNotificationAction('undo')\n    .color('gray')\n    .dispatchTo('another_component', 'undoEditingPost')\n```\n\n----------------------------------------\n\nTITLE: Setting full width for independent actions in Filament\nDESCRIPTION: This snippet shows how to make the independent infolist actions consume the full width of the infolist using `fullWidth()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\Actions;\n\nActions::make([\n    // ...\n])->fullWidth(),\n```\n\n----------------------------------------\n\nTITLE: Registering a render hook with resource scope in Filament PHP\nDESCRIPTION: This code snippet demonstrates how to register a render hook that applies to all pages within a specific resource. By scoping the hook to the `UserResource` class, the associated view (`warning-banner`) will be rendered on every page related to that resource.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Facades\\FilamentView;\nuse Filament\\View\\PanelsRenderHook;\n\nFilamentView::registerRenderHook(\n    PanelsRenderHook::PAGE_START,\n    fn (): View => view('warning-banner'),\n    scopes: \\App\\Filament\\Resources\\UserResource::class,\n);\n```\n\n----------------------------------------\n\nTITLE: Run Filament Upgrade Command\nDESCRIPTION: This command runs the Filament upgrade process, clearing Laravel caches and republishing frontend assets after Composer updates. It is important after upgrading Filament versions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/01-installation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Publish Plugin Translations (Bash)\nDESCRIPTION: Publishes the translation files for the Filament Spatie Laravel Translatable plugin using Artisan.  This allows you to customize the plugin's translations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-spatie-laravel-translatable-plugin-translations\n```\n\n----------------------------------------\n\nTITLE: Changing Button Color\nDESCRIPTION: Illustrates how to change the color of a Filament button using the `color` attribute. Available colors are 'danger', 'gray', 'info', 'success', and 'warning'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-button.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::button color=\"danger\">\n    New user\n</x-filament::button>\n\n<x-filament::button color=\"gray\">\n    New user\n</x-filament::button>\n\n<x-filament::button color=\"info\">\n    New user\n</x-filament::button>\n\n<x-filament::button color=\"success\">\n    New user\n</x-filament::button>\n\n<x-filament::button color=\"warning\">\n    New user\n</x-filament::button>\n```\n\n----------------------------------------\n\nTITLE: Generating a Table Livewire Component with the CLI\nDESCRIPTION: This bash command generates a Livewire component with a pre-configured table using the Filament CLI.  It prompts for a model name and then creates the necessary files for the component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/11-adding-a-table-to-a-livewire-component.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire-table Products/ListProducts\n```\n\n----------------------------------------\n\nTITLE: Publishing Filament Stubs\nDESCRIPTION: This command publishes the Filament stubs to the `stubs/filament` directory, allowing for customization of generated files. It requires the `artisan` command-line tool to be available in the environment.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-stubs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-stubs\n```\n\n----------------------------------------\n\nTITLE: Rendering Livewire Component (Blade)\nDESCRIPTION: Renders the previously created Livewire component in a Blade view.  This allows the component, including the infolist, to be displayed on a page.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n@livewire('view-product')\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Filament Badge in Blade\nDESCRIPTION: This snippet demonstrates the most basic usage of the Filament badge Blade component. It renders a small box with the text \"New\" inside. No special attributes are set, so the default size and color are used.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-badge.md#_snippet_0\n\nLANGUAGE: Blade\nCODE:\n```\n<x-filament::badge>\n    New\n</x-filament::badge>\n```\n\n----------------------------------------\n\nTITLE: Generating a Livewire Component (Bash)\nDESCRIPTION: This command generates a new Livewire component using the Artisan CLI.  It's a prerequisite for adding Filament actions to a Livewire component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:livewire ManageProduct\n```\n\n----------------------------------------\n\nTITLE: Publishing Filament Translations\nDESCRIPTION: This command publishes the language files for the Filament package, enabling translation of the interface into different languages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=filament-panels-translations\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Modal Content (PHP)\nDESCRIPTION: This snippet shows how to add custom content to a modal using the `modalContent()` method, passing a Blade view to render the content. The example also shows how to pass data to the view.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/04-modals.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\View\\View;\n\nAction::make('advance')\n    ->action(fn (Contract $record) => $record->advance())\n    ->modalContent(fn (Contract $record): View => view(\n        'filament.pages.actions.advance',\n        ['record' => $record],\n    ))\n```\n\n----------------------------------------\n\nTITLE: Customizing Reordering Trigger Action in Filament Table (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the reordering trigger button using the `reorderRecordsTriggerAction()` method.  It allows you to define an action that modifies the button's appearance and label based on the reordering state.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/10-advanced.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Table;\n\npublic function table(Table $table): Table\n{\n    return $table\n        ->reorderRecordsTriggerAction(\n            fn (Action $action, bool $isReordering) => $action\n                ->button()\n                ->label($isReordering ? 'Disable reordering' : 'Enable reordering'),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Description to Modal (Blade)\nDESCRIPTION: Shows how to add a description below the heading to a Filament modal using the `description` slot. The content within the `<x-slot name=\"description\">` tags will be rendered as the modal's description.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-modal.md#_snippet_5\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::modal>\n    <x-slot name=\"heading\">\n        Modal heading\n    </x-slot>\n\n    <x-slot name=\"description\">\n        Modal description\n    </x-slot>\n\n    {{-- Modal content --}}\n</x-filament::modal>\n```\n\n----------------------------------------\n\nTITLE: Using a Full-Page Livewire Component (PHP)\nDESCRIPTION: This code defines a route that renders the `ManageProduct` Livewire component as a full page.  It requires the `Illuminate\\Support\\Facades\\Route` facade.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/06-adding-an-action-to-a-livewire-component.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Livewire\\ManageProduct;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('products/{product}/manage', ManageProduct::class);\n```\n\n----------------------------------------\n\nTITLE: Panel Render Hook Constant - Filament PHP\nDESCRIPTION: This snippet shows the use statement for PanelRenderHook.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\View\\PanelsRenderHook;\n```\n\n----------------------------------------\n\nTITLE: Upgrade Filament using Composer and Artisan\nDESCRIPTION: These commands update the Filament package using Composer and then run the `filament:upgrade` Artisan command to clear caches and republish assets after the update.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n\nphp artisan filament:upgrade\n```\n\n----------------------------------------\n\nTITLE: Generating Livewire Component (Bash)\nDESCRIPTION: Creates a new Livewire component named ViewProduct using the Artisan command-line tool. This is the first step in setting up the component to host the infolist.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/07-adding-an-infolist-to-a-livewire-component.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:livewire ViewProduct\n```\n\n----------------------------------------\n\nTITLE: Create App Layout for Livewire Components (Blade)\nDESCRIPTION: This Blade template creates a layout file for Livewire components, including meta tags, CSS and JavaScript includes, and the Livewire notifications component.  It sets up the basic structure for Filament pages.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_8\n\nLANGUAGE: blade\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n\n        <meta name=\"application-name\" content=\"{{ config('app.name') }}\">\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <title>{{ config('app.name') }}</title>\n\n        <style>\n            [x-cloak] {\n                display: none !important;\n            }\n        </style>\n\n        @filamentStyles\n        @vite('resources/css/app.css')\n    </head>\n\n    <body class=\"antialiased\">\n        {{ $slot }}\n\n        @livewire('notifications')\n\n        @filamentScripts\n        @vite('resources/js/app.js')\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Mac Address Validation - Filament\nDESCRIPTION: Validates that the field is a MAC address. It uses the `macAddress()` method on a Filament field.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/05-validation.md#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nField::make('mac_address')->macAddress()\n```\n\n----------------------------------------\n\nTITLE: Triggering Error State with Alpine.js\nDESCRIPTION: This snippet demonstrates how to trigger the error state of the checkbox using Alpine.js.  An Alpine.js expression `alpine-valid` is used to indicate whether the checkbox is valid or not, based on whether the error array includes `isAdmin`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-checkbox.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n<div x-data=\"{ errors: ['isAdmin'] }\">\n    <x-filament::input.checkbox\n        x-model=\"isAdmin\"\n        alpine-valid=\"! errors.includes('isAdmin')\"\n    />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Label - Filament\nDESCRIPTION: Demonstrates customizing the trigger button label using the `label()` method. The label can be any string.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/actions/docs/03-trigger-button.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nAction::make('edit')\n    ->label('Edit post')\n    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))\n```\n\n----------------------------------------\n\nTITLE: Translating a Filament Filter Label\nDESCRIPTION: This snippet shows how to automatically translate the filter label using Laravel's localization features. The `translateLabel()` method simplifies the process of creating multilingual filter labels.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Filters\\Filter;\n\nFilter::make('is_featured')\n    ->translateLabel() // Equivalent to `label(__('Is featured'))`\n```\n\n----------------------------------------\n\nTITLE: Importing TablesRenderHook class in Filament PHP\nDESCRIPTION: This code snippet shows how to import the `TablesRenderHook` class from the `Filament\\Tables\\View` namespace. This class is essential when working with render hooks related to Filament tables. This class is used to reference available render hook constants for tables.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/06-render-hooks.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\View\\TablesRenderHook;\n```\n\n----------------------------------------\n\nTITLE: Filament Upgrade Composer Hook\nDESCRIPTION: This JSON snippet configures a Composer hook that automatically runs the `filament:upgrade` command after `composer update`. This command clears Laravel caches and republishes frontend assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/01-installation.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post-autoload-dump\": [\n    // ...\n    \"@php artisan filament:upgrade\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting a Notification was Sent (Filament)\nDESCRIPTION: This snippet illustrates how to assert that a notification was sent using `Notification::assertNotified()`. This method checks if a notification was dispatched through the Filament notification system.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/06-testing.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\n\nit('sends a notification', function () {\n    Notification::assertNotified();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Filament Custom Page (Bash)\nDESCRIPTION: This command generates a new Filament page class and a corresponding view file within the specified resource directory. The page type is set to 'custom'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/03-resources/10-custom-pages.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:filament-page SortUsers --resource=UserResource --type=custom\n```\n\n----------------------------------------\n\nTITLE: Adding anonymous actions to an infolist in Filament\nDESCRIPTION: This code demonstrates how to add anonymous actions to a Filament infolist using the `Actions` component. It creates two actions, 'star' and 'resetStars', sets their icons, requires confirmation, and assigns functions to be executed when the actions are triggered. The `Actions` component renders these actions in the infolist without attaching them to a specific component.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/05-actions.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Actions\\Star;\nuse App\\Actions\\ResetStars;\nuse Filament\\Infolists\\Components\\Actions;\nuse Filament\\Infolists\\Components\\Actions\\Action;\n\nActions::make([\n    Action::make('star')\n        ->icon('heroicon-m-star')\n        ->requiresConfirmation()\n        ->action(function (Star $star) {\n            $star();\n        }),\n    Action::make('resetStars')\n        ->icon('heroicon-m-x-mark')\n        ->color('danger')\n        ->requiresConfirmation()\n        ->action(function (ResetStars $resetStars) {\n            $resetStars();\n        }),\n])\n```\n\n----------------------------------------\n\nTITLE: Configure postcss.config.js with Tailwind and Plugins\nDESCRIPTION: This JavaScript configuration file sets up PostCSS with Tailwind CSS, PostCSS Nesting, and Autoprefixer plugins. It's essential for processing Tailwind CSS within the project.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    plugins: {\n        'tailwindcss/nesting': 'postcss-nesting',\n        tailwindcss: {},\n        autoprefixer: {},\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Delete Action - PHP\nDESCRIPTION: This snippet demonstrates how to customize the delete action button in the KeyValue field by modifying its icon.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/16-key-value.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\KeyValue;\n\nKeyValue::make('meta')\n    ->deleteAction(\n        fn (Action $action) => $action->icon('heroicon-m-x-mark'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Add Filament Upgrade Command to composer.json\nDESCRIPTION: This JSON snippet shows how to add the `filament:upgrade` command to the `composer.json` file, which will automatically clear Laravel caches and republish frontend assets after a `composer update`. This ensures that the application is updated with the latest changes.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"post-autoload-dump\": [\n    // ...\n    \"@php artisan filament:upgrade\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies with Filament PHP\nDESCRIPTION: This code snippet demonstrates how to inject dependencies from Laravel's container into a Filament PHP component, such as a table. It injects the Illuminate\\Http\\Request and Filament\\Tables\\Table classes, allowing access to the request object and table functionality within the component's logic.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/04-filters/01-getting-started.md#_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Tables\\Table;\nuse Illuminate\\Http\\Request;\n\nfunction (Request $request, Table $table) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Filament Infolist Entry Class\nDESCRIPTION: This snippet shows the command to create a custom infolist entry class using Artisan. This command generates both the PHP class and the associated Blade view file.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/08-custom.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nphp artisan make:infolist-entry StatusSwitcher\n```\n\n----------------------------------------\n\nTITLE: Controlling Filament Dropdown Max Height in Blade\nDESCRIPTION: This snippet demonstrates how to control the maximum height of a dropdown, enabling scrolling if the content exceeds the specified height.  A CSS length value should be provided (e.g., \"400px\").\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_10\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown max-height=\"400px\">\n    {{-- Dropdown items --}}\n</x-filament::dropdown>\n```\n\n----------------------------------------\n\nTITLE: Add Tailwind CSS Layers to app.css\nDESCRIPTION: This CSS snippet adds Tailwind's base, components, utilities, and variants layers to the application's CSS file. This is required to include Tailwind's default styles and configurations.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/01-installation.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@tailwind variants;\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action URL with Pest\nDESCRIPTION: This snippet demonstrates how to assert that an infolist action has the correct URL and target. It verifies the 'filament' action's URL, checks if it should open in a new tab, and asserts that the 'github' action should not open in a new tab.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('links to the correct Filament sites', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertInfolistActionHasUrl('customer', 'filament', 'https://filamentphp.com/')\n        ->assertInfolistActionDoesNotHaveUrl('customer', 'filament', 'https://github.com/filamentphp/filament')\n        ->assertInfolistActionShouldOpenUrlInNewTab('customer', 'filament')\n        ->assertInfolistActionShouldNotOpenUrlInNewTab('customer', 'github');\n});\n```\n\n----------------------------------------\n\nTITLE: Install Filament Notifications with Composer (Bash)\nDESCRIPTION: This command uses Composer to require the Filament Notifications package. The `^3.3` constraint specifies the version, and `-W` ensures dependencies are updated.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/01-installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/notifications:\"^3.3\" -W\n```\n\n----------------------------------------\n\nTITLE: Asserting an Exact Notification (Pest + Livewire)\nDESCRIPTION: This code demonstrates how to assert that a specific notification instance was sent.  It creates a `Notification` object with specific properties (danger, title, body) and then passes it to `assertNotified()` to check if that exact notification was dispatched.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/notifications/docs/06-testing.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Notifications\\Notification;\nuse function Pest\\Livewire\\livewire;\n\nit('sends a notification', function () {\n    livewire(CreatePost::class)\n        ->assertNotified(\n            Notification::make()\n                ->danger()\n                ->title('Unable to create post')\n                ->body('Something went wrong.'),\n        );\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Infolist Action Errors with Pest\nDESCRIPTION: This snippet demonstrates how to assert that an infolist action has validation errors. It passes an invalid email address to the 'send' action and asserts that the expected error message is present.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/08-testing.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can validate invoice recipient email', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->callInfolistAction('customer', 'send', data: [\n            'email' => Str::random(),\n        ])\n        ->assertHasInfolistActionErrors(['email' => ['email']]);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Add Action Label - PHP\nDESCRIPTION: This example shows how to customize the label of the add action button in a repeater using the `addActionLabel()` method. This allows for more descriptive and user-friendly button text, improving the user experience when adding new items to the repeater.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/03-fields/12-repeater.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Forms\\Components\\Repeater;\n\nRepeater::make('members')\n    ->schema([\n        // ...\n    ])\n    ->addActionLabel('Add member')\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Badge - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to add a badge to a tab in a Filament infolist Tabs component. The `badge()` method is used to set the badge value. Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Notifications')\n            ->badge(5)\n            ->schema([\n                // ...\n            ]),\n        // ...\n    ])\n```\n\n----------------------------------------\n\nTITLE: Limiting Word Count in a Filament PHP Text Column\nDESCRIPTION: This code snippet demonstrates how to limit the number of words displayed in a TextColumn using the `words()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('description')\n    ->words(10)\n```\n\n----------------------------------------\n\nTITLE: Rendering Paginated Links in Livewire (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to fetch paginated user data within a Livewire component. It retrieves user data using the `User` model and applies standard pagination with 10 items per page. The result is passed to the Blade view for rendering.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-pagination.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\View\\View;\nuse Livewire\\Component;\n\nclass ListUsers extends Component\n{\n    // ...\n    \n    public function render(): View\n    {\n        return view('livewire.list-users', [\n            'users' => User::query()->paginate(10),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasDescription Interface for Enum Descriptions in Filament\nDESCRIPTION: This code snippet illustrates implementing the `HasDescription` interface alongside `HasLabel` in a PHP enum to provide descriptions for enum values.  The enum includes a `getDescription()` method that returns a human-friendly description string based on the enum case. These descriptions are useful for providing additional context in Filament form fields, enhancing the user experience.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/07-enums.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Support\\Contracts\\HasDescription;\nuse Filament\\Support\\Contracts\\HasLabel;\n\nenum Status: string implements HasLabel, HasDescription\n{\n    case Draft = 'draft';\n    case Reviewing = 'reviewing';\n    case Published = 'published';\n    case Rejected = 'rejected';\n    \n    public function getLabel(): ?string\n    {\n        return $this->name;\n    }\n    \n    public function getDescription(): ?string\n    {\n        return match ($this) {\n            self::Draft => 'This has not finished being written yet.',\n            self::Reviewing => 'This is ready for a staff member to read.',\n            self::Published => 'This has been approved by a staff member and is public on the website.',\n            self::Rejected => 'A staff member has decided this is not appropriate for the website.',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Write Alpine component\nDESCRIPTION: Writes the Alpine component for the clock widget.  This component initializes the time and updates it every second. It exports a function that returns an object with the time and init properties.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function clockWidget() {\n    return {\n        time: new Date().toLocaleTimeString(),\n        init() {\n            setInterval(() => {\n                this.time = new Date().toLocaleTimeString();\n            }, 1000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Heading Component (Heading.php)\nDESCRIPTION: This code snippet shows the `Heading.php` file, which defines the Heading component. It includes properties for the heading level, content, and color. It also defines methods for setting and getting these properties.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/03-build-a-standalone-plugin.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Awcodes\\Headings;\n\nuse Closure;\nuse Filament\\Forms\\Components\\Component;\nuse Filament\\Support\\Colors\\Color;\nuse Filament\\Support\\Concerns\\HasColor;\n\nclass Heading extends Component\n{\n    use HasColor;\n\n    protected string | int $level = 2;\n\n    protected string | Closure $content = '';\n\n    protected string $view = 'headings::heading';\n\n    final public function __construct(string | int $level)\n    {\n        $this->level($level);\n    }\n\n    public static function make(string | int $level): static\n    {\n        return app(static::class, ['level' => $level]);\n    }\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->dehydrated(false);\n    }\n\n    public function content(string | Closure $content): static\n    {\n        $this->content = $content;\n\n        return $this;\n    }\n\n    public function level(string | int $level): static\n    {\n        $this->level = $level;\n\n        return $this;\n    }\n\n    public function getColor(): array\n    {\n        return $this->evaluate($this->color) ?? Color::Amber;\n    }\n\n    public function getContent(): string\n    {\n        return $this->evaluate($this->content);\n    }\n\n    public function getLevel(): string\n    {\n        return is_int($this->level) ? 'h' . $this->level : $this->level;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Filament Widgets package assets\nDESCRIPTION: This command installs the assets required by the Filament Widgets package. It's used for existing Laravel projects.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/widgets/docs/01-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan filament:install --widgets\n```\n\n----------------------------------------\n\nTITLE: Asserting Form Component Action Visibility in Filament PHP\nDESCRIPTION: This snippet demonstrates how to assert the visibility of Filament form component actions based on user permissions using Pest and Livewire. It creates an invoice and asserts that the 'send' action is hidden for the 'customer_id' component, while the 'print' action is visible.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/forms/docs/09-testing.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse function Pest\\Livewire\\livewire;\n\nit('can only print customers', function () {\n    $invoice = Invoice::factory()->create();\n\n    livewire(EditInvoice::class, [\n        'invoice' => $invoice,\n    ])\n        ->assertFormComponentActionHidden('customer_id', 'send')\n        ->assertFormComponentActionVisible('customer_id', 'print');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Tabs - Filament PHP\nDESCRIPTION: This code snippet demonstrates how to create a simple Tabs component within a Filament infolist. It defines a Tabs container with three tabs, each containing a schema for its content.  Dependencies: Filament\\Infolists\\Components\\Tabs.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/04-layout/04-tabs.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Filament\\Infolists\\Components\\Tabs;\n\nTabs::make('Tabs')\n    ->tabs([\n        Tabs\\Tab::make('Tab 1')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 2')\n            ->schema([\n                // ...\n            ]),\n        Tabs\\Tab::make('Tab 3')\n            ->schema([\n                // ...\n            ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltips\nDESCRIPTION: Specifies a tooltip for a TextEntry. The `tooltip()` method sets the tooltip text. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\n\nTextEntry::make('title')\n    ->tooltip('Shown at the top of the page')\n```\n\n----------------------------------------\n\nTITLE: Filament Dropdown Item as Anchor Link in Blade\nDESCRIPTION: This snippet shows how to change a dropdown item's HTML tag from a `<button>` to an `<a>` tag using the `tag` attribute, allowing it to function as a regular hyperlink with the `href` attribute.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-dropdown.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::dropdown.list.item\n    href=\"https://filamentphp.com\"\n    tag=\"a\"\n>\n    Filament\n</x-filament::dropdown.list.item>\n```\n\n----------------------------------------\n\nTITLE: Configure Composer for Local Filament Development\nDESCRIPTION: This JSON configuration snippet adds a local path repository to Composer, allowing you to use your locally cloned Filament packages for development and testing. It sets the minimum stability to 'dev' to allow installation of development versions.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-contributing.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    // ...\n    \"require\": {\n        \"filament/filament\": \"*\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"filament/packages/*\"\n        }\n    ],\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: Installs the dependencies listed in the updated package.json file using npm. This ensures that the necessary build tools are available for compiling the plugin's assets.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/08-plugins/02-build-a-panel-plugin.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Limiting the Number of Values in a List in Filament PHP\nDESCRIPTION: This example shows how to limit the number of values displayed in a list within a TextColumn using the `limitList()` method.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('authors.name')\n    ->listWithLineBreaks()\n    ->limitList(3)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Font Weight Blade\nDESCRIPTION: Illustrates how to customize the font weight of the Filament link component using the `weight` attribute.  Examples are provided for different weight options such as 'thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', and 'black'.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/support/docs/09-blade-components/02-link.md#_snippet_3\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"thin\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"extralight\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"light\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"normal\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"medium\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"semibold\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n <x-filament::link weight=\"bold\">\n    New user\n</x-filament::link>\n```\n\nLANGUAGE: blade\nCODE:\n```\n<x-filament::link weight=\"black\">\n    New user\n</x-filament::link>\n```\n\n----------------------------------------\n\nTITLE: Install Plugin with Composer (Bash)\nDESCRIPTION: Installs the Filament Spatie Translatable plugin using Composer.  The `-W` flag ensures that all dependencies are updated during the installation process.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/spatie-laravel-translatable-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require filament/spatie-laravel-translatable-plugin:\"^3.2\" -W\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Text Column in Filament PHP\nDESCRIPTION: This code snippet demonstrates how to create a basic TextColumn in a Filament table to display the 'title' attribute from your database. It's the starting point for using text columns.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/tables/docs/03-columns/02-text.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Tables\\Columns\\TextColumn;\n\nTextColumn::make('title')\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Tooltips\nDESCRIPTION: Specifies a dynamic tooltip for a TextEntry using a closure.  The closure has access to the current infolist record. The example depends on the `Filament\\Infolists\\Components\\TextEntry` class and `Illuminate\\Database\\Eloquent\\Model`.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/infolists/docs/03-entries/01-getting-started.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Filament\\Infolists\\Components\\TextEntry;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nTextEntry::make('title')\n    ->tooltip(fn (Model $record): string => \"By {$record->author->name}\")\n```\n\n----------------------------------------\n\nTITLE: Widget Property Definition (PHP)\nDESCRIPTION: The widget must define public properties with the same keys as the data passed from the `getWidgetData` method in the page. This ensures that the data is automatically injected into the widget.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/packages/panels/docs/04-pages.md#_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\npublic $stats = [];\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This robots.txt configuration disallows all user agents from accessing any part of the website. This is achieved by setting 'User-agent: *' to apply to all bots and 'Disallow: /' to block access to the root directory, effectively blocking the entire site.\nSOURCE: https://github.com/filamentphp/filament/blob/3.x/docs-assets/app/public/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```"
  }
]