[
  {
    "owner": "vuejs",
    "repo": "vue-router",
    "content": "TITLE: Route Object Usage in Navigation Guards (JavaScript)\nDESCRIPTION: Shows how route objects are used within navigation guards (`router.beforeEach`).  The `to` and `from` parameters are both route objects, providing information about the target and current routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n    // `to` and `from` are both route objects\n  })\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation - router.push\nDESCRIPTION: Demonstrates how to use `router.push` to navigate to different routes programmatically. This includes using a string, an object with a path, a named route with parameters, and a route with query parameters. The params are ignored if path is specified, so name or the entire path has to be specified.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// строка\nrouter.push('home')\n\n// объект\nrouter.push({ path: 'home' })\n\n// именованный маршрут\nrouter.push({ name: 'user', params: { userId: '123' } })\n\n// со строкой запроса, получится /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' } })\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with History Mode\nDESCRIPTION: This code snippet initializes a Vue Router instance with the 'history' mode enabled. This enables the application to use clean URLs without hashes. The routes array should be defined elsewhere in the application.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Using beforeRouteUpdate Navigation Guard\nDESCRIPTION: Shows how to use the beforeRouteUpdate navigation guard to handle route changes in the same component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  beforeRouteUpdate(to, from, next) {\n    // react to route changes...\n    // don't forget to call next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with Named Route (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a Vue Router instance with a named route. The route is defined with a path, a name ('user'), and a component (User).  The `userId` is a parameter passed in the path.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:userId',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating with router.push in Vue Router (JavaScript)\nDESCRIPTION: Demonstrates various ways to use router.push for programmatic navigation in Vue Router, including string paths, objects, named routes, and query parameters.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// chaine de caractère représentant un chemin\nrouter.push('home')\n\n// objet\nrouter.push({ path: 'home' })\n\n// route nommée\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// avec une requête « query » résultant de `/register?plan=private`\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n\n----------------------------------------\n\nTITLE: Using <router-view> with <transition> and <keep-alive> in Vue\nDESCRIPTION: This snippet demonstrates the correct way to use the <router-view> component in combination with <transition> and <keep-alive>. It ensures that <keep-alive> is placed inside <transition> for proper functionality.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-view.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<transition>\n  <keep-alive>\n    <router-view></router-view>\n  </keep-alive>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: In-Component Navigation Guards\nDESCRIPTION: Demonstrates implementation of route navigation guards within component definitions, including beforeRouteEnter, beforeRouteUpdate, and beforeRouteLeave.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter(to, from, next) {\n    // called before the route that renders this component is confirmed.\n    // does NOT have access to `this` component instance,\n    // because it has not been created yet when this guard is called!\n  },\n  beforeRouteUpdate(to, from, next) {\n    // called when the route that renders this component has changed.\n    // This component being reused (by using an explicit `key`) in the new route or not doesn't change anything.\n    // For example, for a route with dynamic params `/foo/:id`, when we\n    // navigate between `/foo/1` and `/foo/2`, the same `Foo` component instance\n    // will be reused (unless you provided a `key` to `<router-view>`), and this hook will be called when that happens.\n    // has access to `this` component instance.\n  },\n  beforeRouteLeave(to, from, next) {\n    // called when the route that renders this component is about to\n    // be navigated away from.\n    // has access to `this` component instance.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Object in Navigation Guard - Vue Router (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the route object as the first and second arguments (`to` and `from`) within a navigation guard in Vue Router.  The route objects contain information about the target and current routes respectively, enabling the guard to make decisions based on route properties.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/api/route-object.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrouter.beforeEach((route, redirect, next) => {\n  // `to` と `from` は両方ともルートオブジェクト\n})\n```\n\n----------------------------------------\n\nTITLE: Setup Vue Router in a Vue.js Project with Modules\nDESCRIPTION: Shows how to configure Vue Router when using a module system. Import Vue and Vue Router, then install the router using Vue.use(). Essential for projects that load modules with imports rather than global script tags.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n```\n\n----------------------------------------\n\nTITLE: Defining Components, Routes, and Router Instance\nDESCRIPTION: This JavaScript snippet defines two simple components, `Foo` and `Bar`, and sets up the routes for the application.  A `VueRouter` instance is created with the defined routes, and it's then injected into the main Vue instance, making the application route-aware. `Vue.use(VueRouter)` should be called if you are using a module system.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 0. モジュールシステムを使っている場合 (例: vue-cli 経由で)、Vue と VueRouter をインポートし、`Vue.use(VueRouter)` を呼び出します。\n\n// 1. ルートコンポーネントを定義します\n// 他のファイルからインポートすることもできます\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\n\n// 2. ルートをいくつか定義します\n// 各ルートは 1 つのコンポーネントとマッピングされる必要があります。\n// このコンポーネントは実際の `Vue.extend()`、\n// またはコンポーネントオプションのオブジェクトでも構いません。\n// ネストされたルートに関しては後で説明します\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\n// 3. ルーターインスタンスを作成して、ルートオプションを渡します\n// 追加のオプションをここで指定できますが、\n// この例ではシンプルにしましょう\nconst router = new VueRouter({\n  routes // `routes: routes` の短縮表記\n})\n\n// 4. root となるインスタンスを作成してマウントします\n// アプリケーション全体がルーターを認知できるように、\n// ルーターをインジェクトすることを忘れないでください。\nconst app = new Vue({\n  router\n}).$mount('#app')\n\n// これで開始です!\n```\n\n----------------------------------------\n\nTITLE: Handling params in router.push with Vue Router (JavaScript)\nDESCRIPTION: Illustrates the correct way to handle route parameters when using router.push, emphasizing the difference between using 'name' and 'path' properties.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst userId = 123\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// Ceci ne va PAS fonctionner\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n```\n\n----------------------------------------\n\nTITLE: Navigating with router.push in Vue Router\nDESCRIPTION: Uses the router.push method to navigate programmatically to different routes. It accepts either a string representing a path or an object with route details. This method adds a new entry to the history stack.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// chaine de caractère représentant un chemin\nrouter.push('home')\n\n// objet\nrouter.push({ path: 'home' })\n\n// route nommée\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// avec une requête « query » résultant de `/register?plan=private`\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst userId = 123\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// Ceci ne va PAS fonctionner\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Vue Component\nDESCRIPTION: Shows how to access dynamic route parameters within a Vue component using $route.params. The example displays the user ID from the route parameter.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Configuration (RouteConfig) in Vue Router\nDESCRIPTION: This code snippet defines the `RouteConfig` type, which is used to configure individual routes in a Vue Router instance. It specifies properties such as `path`, `component`, `name`, `redirect`, `props`, `children`, `beforeEnter`, `meta`, `caseSensitive`, and `pathToRegexpOptions`. The type definition is crucial for defining the structure of route objects within the Vue Router configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/api/options.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  declare type RouteConfig = {\n    path: string;\n    component?: Component;\n    name?: string; // 名前付きルート用\n    components?: { [name: string]: Component }; // 名前付き view 用\n    redirect?: string | Location | Function;\n    props?: boolean | string | Function;\n    alias?: string | Array<string>;\n    children?: Array<RouteConfig>; // ネストされたルート用\n    beforeEnter?: (to: Route, from: Route, next: Function) => void;\n    meta?: any;\n\n    // 2.6.0+\n    caseSensitive?: boolean; // センシティブマッチをケースとして使用するかどうか? (デフォルト: false)\n    pathToRegexpOptions?: Object; // 正規表現のコンパイルとして path-to-regexp オプション\n  }\n```\n\n----------------------------------------\n\nTITLE: Decoupling Component using Props in Vue Router (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use props to decouple a component from its route, making it more reusable and easier to test. It also shows how to handle named views with props.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n\n    // 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Route Changes in Vue Component\nDESCRIPTION: Demonstrates how to react to route parameter changes using the watch property in a Vue component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  watch: {\n    $route(to, from) {\n      // react to route changes...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML structure for Vue Router in Vue 2\nDESCRIPTION: This HTML snippet demonstrates the basic structure for a Vue.js application using Vue Router. It includes script tags for Vue and Vue Router, and defines the app's layout with navigation links and a router view component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue@2/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vue-router@3/dist/vue-router.js\"></script>\n\n<div id=\"app\">\n  <h1>Hello App!</h1>\n  <p>\n    <!-- use router-link component for navigation. -->\n    <!-- specify the link by passing the `to` prop. -->\n    <!-- `<router-link>` will be rendered as an `<a>` tag by default -->\n    <router-link to=\"/foo\">Go to Foo</router-link>\n    <router-link to=\"/bar\">Go to Bar</router-link>\n  </p>\n  <!-- route outlet -->\n  <!-- component matched by the route will render here -->\n  <router-view></router-view>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router in JavaScript for Vue 2\nDESCRIPTION: This JavaScript code sets up Vue Router for a Vue 2 application. It defines route components, creates routes, initializes the router instance, and mounts the Vue application with the router injected. This configuration enables Single-page Application (SPA) functionality.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 0. If using a module system (e.g. via vue-cli), import Vue and VueRouter\n// and then call `Vue.use(VueRouter)`.\n\n// 1. Define route components.\n// These can be imported from other files\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\n\n// 2. Define some routes\n// Each route should map to a component. The \"component\" can\n// either be an actual component constructor created via\n// `Vue.extend()`, or just a component options object.\n// We'll talk about nested routes later.\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\n// 3. Create the router instance and pass the `routes` option\n// You can pass in additional options here, but let's\n// keep it simple for now.\nconst router = new VueRouter({\n  routes // short for `routes: routes`\n})\n\n// 4. Create and mount the root instance.\n// Make sure to inject the router with the router option to make the\n// whole app router-aware.\nconst app = new Vue({\n  router\n}).$mount('#app')\n\n// Now the app has started!\n```\n\n----------------------------------------\n\nTITLE: Global After Hooks Implementation\nDESCRIPTION: Demonstrates how to register global after hooks that execute after navigation is confirmed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.afterEach((to, from) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Global Navigation Interceptor Initialization in Vue Router\nDESCRIPTION: Sets up a global navigation guard using router.beforeEach, which is called before each navigation attempt. Provides control over navigation flow and allows for redirection or cancellation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/navigation-guards.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Reacting to Route Parameter Changes with Watcher\nDESCRIPTION: This snippet demonstrates how to use a watcher on the `$route` object to react to changes in route parameters within the same component instance. This allows performing actions when the route changes (e.g., fetching new data) without destroying and recreating the component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/dynamic-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  watch: {\n    '$route' (to, from) {\n      // Código que responde al cambio\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Initial Route Location (JavaScript)\nDESCRIPTION: Demonstrates how to access the initial route location using `VueRouter.START_LOCATION`. This allows distinguishing the initial navigation from subsequent navigations within a `beforeEach` navigation guard. It initializes a Vue Router instance and adds a global `beforeEach` guard.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport VueRouter from 'vue-router'\n\n  const router = new VueRouter({\n    // ...\n  })\n\n  router.beforeEach((to, from) => {\n    if (from === VueRouter.START_LOCATION) {\n      // initial navigation\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Named Router Views in HTML\nDESCRIPTION: This snippet demonstrates how to define multiple `<router-view>` elements with different names. The `name` attribute is used to identify the specific view, while a router-view without name attribute defaults to 'default'.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/named-views.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<router-view class=\"view one\"></router-view>\n<router-view class=\"view two\" name=\"a\"></router-view>\n<router-view class=\"view three\" name=\"b\"></router-view>\n```\n\n----------------------------------------\n\nTITLE: Using beforeRouteUpdate Guard in Vue Router\nDESCRIPTION: This code demonstrates how to use the `beforeRouteUpdate` navigation guard to react to route changes within the same component.  This guard is called when the route changes, but the component instance is reused.  It provides access to the `to`, `from`, and `next` parameters, allowing the component to control the navigation flow. It's important to call `next()` to proceed with the route change.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/dynamic-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  beforeRouteUpdate (to, from, next) {\n    // ルート変更に反応する...\n    // next() を呼び出すのを忘れないでください\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation to Named Route (JavaScript)\nDESCRIPTION: This snippet illustrates how to programmatically navigate to a named route using `router.push()`. The method takes an object specifying the route's name ('user') and any necessary parameters (userId).  This is equivalent to clicking the `router-link` above.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push({ name: 'user', params: { userId: 123 } })\n```\n\n----------------------------------------\n\nTITLE: Navigation Guard Mixin Implementation\nDESCRIPTION: Shows how to properly add navigation guards using mixins after router plugin installation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nVue.use(Router)\n\nVue.mixin({\n  beforeRouteUpdate(to, from, next) {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import for Code Splitting\nDESCRIPTION: Uses the dynamic import syntax (import('./Foo.vue')) to indicate a code-split point in webpack. This allows webpack to create separate chunks for each route's components, improving the initial page load time. Requires the `syntax-dynamic-import` Babel plugin for proper parsing if using Babel.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./Foo.vue') // returns a Promise\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Meta Fields in Navigation Guard\nDESCRIPTION: Illustrates how to check meta fields across matched routes in a global navigation guard, implementing authentication logic based on route meta requirements\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // cette route demande une autorisation, vérifions si l'utilisateur est logué.\n    // sinon, redirigeons le sur la page de login.\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // assurez vous de toujours appeler `next()` !\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Component-Level Navigation Interceptors in Vue\nDESCRIPTION: Demonstrates implementation of component-specific navigation hooks including beforeRouteEnter, beforeRouteUpdate, and beforeRouteLeave for fine-grained navigation control within a component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/navigation-guards.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // Called before route confirmation\n    next(vm => {\n      // Access component instance\n    })\n  },\n  beforeRouteUpdate (to, from, next) {\n    // Called when route parameters change\n    next()\n  },\n  beforeRouteLeave (to, from, next) {\n    // Called when leaving the current route\n    const answer = window.confirm('Leave page?')\n    if (answer) {\n      next()\n    } else {\n      next(false)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Fields in Global Navigation Guards\nDESCRIPTION: This snippet shows how to access meta fields within a global navigation guard using `router.beforeEach`. It iterates over `$route.matched` to find any route records with the `requiresAuth` meta field set to `true`. If such a record is found and the user is not authenticated, the user is redirected to the login page.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // esta ruta requiere autenticación, verificamos que haya iniciado sesión\n    // sino, redirigimos a la página de inicio de sesión.\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // ¡Asegúrate de ejecutar next siempre!\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Views in Vue Router\nDESCRIPTION: This snippet shows how to configure named views in the Vue Router setup. It demonstrates the use of the 'components' option to map different components to named views, including the default view.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/named-views.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: beforeRouteUpdate with Direct Instance Access\nDESCRIPTION: Demonstrates using this context directly in beforeRouteUpdate guard.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeRouteUpdate (to, from, next) {\n  // just use `this`\n  this.name = to.params.name\n  next()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Named Views in Vue Router\nDESCRIPTION: This JavaScript snippet provides a route configuration for nested named views using Vue Router. It includes a `UserSettings` component with children routes for displaying `UserEmailsSubscriptions`, `UserProfile`, and a named `UserProfilePreview` component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-views.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  path: '/settings',\n  // You could also have named views at the top\n  component: UserSettings,\n  children: [{\n    path: 'emails',\n    component: UserEmailsSubscriptions\n  }, {\n    path: 'profile',\n    components: {\n      default: UserProfile,\n      helper: UserProfilePreview\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Data Fetching Before Navigation\nDESCRIPTION: This Vue component fetches post data before navigation using `beforeRouteEnter` and `beforeRouteUpdate` route guards.  It fetches the post data using `getPost` and then calls `next` to proceed with the navigation, passing a callback to set the data. The `setData` method handles updating the component's `post` and `error` data properties.  It assumes the existence of a `getPost` function for fetching data.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      post: null,\n      error: null\n    }\n  },\n  beforeRouteEnter (to, from, next) {\n    getPost(to.params.id, (err, post) => {\n      next(vm => vm.setData(err, post))\n    })\n  },\n  // when route changes and this component is already rendered,\n  // the logic will be slightly different.\n  beforeRouteUpdate (to, from, next) {\n    this.post = null\n    getPost(to.params.id, (err, post) => {\n      this.setData(err, post)\n      next()\n    })\n  },\n  methods: {\n    setData (err, post) {\n      if (err) {\n        this.error = err.toString()\n      } else {\n        this.post = post\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dynamic Route Configuration in Vue Router\nDESCRIPTION: Demonstrates how to set up a basic dynamic route with a parameter in Vue Router. The example shows creating a User component and configuring a route with a dynamic segment denoted by :id.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User</div>'\n}\n\nconst router = new VueRouter({\n  routes: [\n    // dynamic segments start with a colon\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation - router.go\nDESCRIPTION: Shows how to use `router.go` to navigate through the history stack.  Examples include moving forward, backward, and multiple steps in either direction. If there are not enough history entries, navigation will simply not happen.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// перейти на одну запись вперёд, эквивалентно history.forward()\nrouter.go(1)\n\n// перейти на одну запись назад, эквивалентно history.back()\nrouter.go(-1)\n\n// перейти на 3 записи вперёд\nrouter.go(3)\n\n// если записей в истории недостаточно много, переход просто не произойдёт\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Fetching Data Before Navigation\nDESCRIPTION: This Vue component fetches data before navigation using the `beforeRouteEnter` and `beforeRouteUpdate` route guards. It utilizes a `setData` method to handle setting the component's data after the data fetching is complete or if there is an error. It showcases updating the view only after the data has been successfully fetched.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"export default {\\n  data () {\\n    return {\\n      post: null,\\n      error: null\\n    }\\n  },\\n  beforeRouteEnter (to, from, next) {\\n    getPost(to.params.id, (err, post) => {\\n      next(vm => vm.setData(err, post))\\n    })\\n  },\\n  // quand la route change et que ce composant est déjà rendu,\\n  // la logique est un peu différente\\n  beforeRouteUpdate (to, from, next) {\\n    this.post = null\\n    getPost(to.params.id, (err, post) => {\\n      this.setData(err, post)\\n      next()\\n    })\\n  },\\n  methods: {\\n    setData (err, post) {\\n      if (err) {\\n        this.error = err.toString()\\n      } else {\\n        this.post = post\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router to use History Mode in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Vue Router with history mode instead of the default hash mode. This configuration allows for cleaner URLs without the hash (#) symbol.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router - router.push() examples\nDESCRIPTION: The `router.push()` method is used to navigate to a new URL, adding a new entry to the history stack. It accepts a string or an object descriptor to define the target route.  It also allows optional onComplete and onAbort callbacks from version 2.2.0+.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// cadena de texto literal\nrouter.push('home')\n\n// Objeto\nrouter.push({ path: 'home' })\n\n// Ruta con nombre\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// Con _query_, con lo que se obtiene /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Before Navigation Guards in Vue Router\nDESCRIPTION: Sets up a global navigation guard that runs before any route navigation. The guard receives the destination route, current route, and a next function that must be called to resolve the guard.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/navigation-guards.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Prop-based Route Parameter Usage in Vue Component\nDESCRIPTION: This snippet demonstrates passing route parameters as props to a Vue component, improving its reusability and testability.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n\n    // для маршрутов с именованными представлениями, необходимо указывать опцию `props` для каждого именованного представления:\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in a Vue Component\nDESCRIPTION: This code demonstrates how to access route parameters within a Vue component using `$route.params`.  The `id` parameter from the route is accessed and displayed within the component's template. The template displays the user's ID using interpolation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/dynamic-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Vue Component\nDESCRIPTION: This example shows how to access the dynamic segment's value within the component using `$route.params`. The template interpolates the value of `id` from the route parameters, allowing the component to display dynamic content based on the URL.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/dynamic-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Router in Vue Component\nDESCRIPTION: This JavaScript snippet shows how to access the router instance and current route within a Vue component. It demonstrates computed properties and methods that utilize router functionality, such as accessing route parameters and navigating.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Home.vue\nexport default {\n  computed: {\n    username() {\n      // We will see what `params` is shortly\n      return this.$route.params.username\n    }\n  },\n  methods: {\n    goBack() {\n      window.history.length > 1 ? this.$router.go(-1) : this.$router.push('/')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Template for Post\nDESCRIPTION: This Vue component template displays a post, including loading, error, and content sections. It uses conditional rendering (`v-if`) to show the appropriate content based on the component's state (loading, error, or post data).\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div v-if=\"loading\" class=\"loading\">\n      Loading...\n    </div>\n\n    <div v-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Before Guards in Vue Router\nDESCRIPTION: Shows how to register global navigation guards using router.beforeEach. The guard receives to, from, and next arguments to control navigation flow.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Data After Navigation in Vue Router Component\nDESCRIPTION: JavaScript implementation of data fetching after navigation in a Vue component. Uses the created lifecycle hook to fetch data when the component is created and watches for route changes to re-fetch data when needed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  data () {\n    return {\n      loading: false,\n      post: null,\n      error: null\n    }\n  },\n  created () {\n    // obtén los datos cuando la vista es creada y _data_ ya\n    // está siendo observada\n    this.fetchData()\n  },\n  watch: {\n    // ejecuta nuevamente el método si la ruta cambia\n    '$route': 'fetchData'\n  },\n  methods: {\n    fetchData () {\n      this.error = this.post = null\n      this.loading = true\n      // reemplaza getPost con lo que corresponda\n      getPost(this.$route.params.id, (err, post) => {\n        this.loading = false\n        if (err) {\n          this.error = err.toString()\n        } else {\n          this.post = post\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Route Changes in a Vue Component\nDESCRIPTION: This code shows how to watch the `$route` object in a Vue component to detect route parameter changes.  The `watch` option is used to execute a function whenever the `$route` object changes.  This allows the component to react to changes in the route parameters without being destroyed and re-created.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/dynamic-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  watch: {\n    '$route' (to, from) {\n      // ルートの変更の検知...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component Fetching Data After Navigation\nDESCRIPTION: This Vue component fetches data after navigation using the `created` lifecycle hook and the `watch` property to react to route changes. It defines methods for handling loading states, error conditions, and updating the component's data with the fetched post data.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"export default {\\n  data () {\\n    return {\\n      loading: false,\\n      post: null,\\n      error: null\\n    }\\n  },\\n  created () {\\n    // récupérer les données lorsque la vue est créée et\\n    // que les données sont déjà observées\\n    this.fetchData()\\n  },\\n  watch: {\\n    // appeler encore la méthode si la route change\\n    '$route': 'fetchData'\\n  },\\n  methods: {\\n    fetchData () {\\n      this.error = this.post = null\\n      this.loading = true\\n      // remplacer `getPost` par une fonction de récupération de données\\n      getPost(this.$route.params.id, (err, post) => {\\n        this.loading = false\\n        if (err) {\\n          this.error = err.toString()\\n        } else {\\n          this.post = post\\n        }\\n      })\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Function-based Prop Generation in Vue Router\nDESCRIPTION: This snippet demonstrates using a function to generate props dynamically based on the route object, allowing for more complex prop creation logic.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/search', component: SearchUser, props: (route) => ({ query: route.query.q }) }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining RouteConfig Type Declaration in Vue Router\nDESCRIPTION: Type declaration for the RouteConfig object used to define routes in Vue Router. Specifies the structure for route configuration including path, components, navigation hooks, and other routing options.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/options.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndeclare type RouteConfig = {\n  path: string;\n  component?: Component;\n  name?: string; // para rutas con nombre\n  components?: { [name: string]: Component }; // para vistas con nombre\n  redirect?: string | Location | Function;\n  props?: boolean | string | Function;\n  alias?: string | Array<string>;\n  children?: Array<RouteConfig>; // para sub-rutas\n  beforeEnter?: (to: Route, from: Route, next: Function) => void;\n  meta?: any;\n\n  // 2.6.0+\n  caseSensitive?: boolean; // utilizar o no matcheo case sensitive (valor por defecto: false)\n  pathToRegexpOptions?: Object; // Opciones path-to-regexp para compilar expresiones regulares\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Router Named Route Redirection\nDESCRIPTION: This snippet sets up a redirect to a named route in Vue Router.  When a user navigates to `/a`, they will be redirected to the route with the name `foo`. This is useful when the target route's path might change.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }} ]\n})\n```\n\n----------------------------------------\n\nTITLE: Route Leave Guard with Navigation Prevention\nDESCRIPTION: Shows how to implement a leave guard that prevents navigation based on user confirmation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeRouteLeave (to, from, next) {\n  const answer = window.confirm('Do you really want to leave? you have unsaved changes!')\n  if (answer) {\n    next()\n  } else {\n    next(false)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation (JavaScript)\nDESCRIPTION: Shows the signatures for programmatic navigation methods: `push`, `replace`, `go`, `back`, and `forward`. These methods allow navigating to different routes programmatically within a Vue.js application. They provide options for specifying completion and abortion callbacks.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push(location, onComplete?, onAbort?)\nrouter.push(location).then(onComplete).catch(onAbort)\nrouter.replace(location, onComplete?, onAbort?)\nrouter.replace(location).then(onComplete).catch(onAbort)\nrouter.go(n)\nrouter.back()\nrouter.forward()\n```\n\n----------------------------------------\n\nTITLE: Preserving Scroll Position on Back/Forward Navigation\nDESCRIPTION: This snippet demonstrates how to preserve the scroll position when the user navigates using the browser's back or forward buttons. It checks for the `savedPosition` argument, which is available during `popstate` navigations, and returns it to restore the previous scroll position. Otherwise scroll to top.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Scroll Position with savedPosition\nDESCRIPTION: This snippet demonstrates how to restore the previous scroll position when navigating using the browser's back/forward buttons. It checks for a `savedPosition` and returns it, otherwise, it scrolls to the top of the page.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/kr/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Scroll Position on Back/Forward Navigation\nDESCRIPTION: This code snippet demonstrates how to restore the scroll position when using the browser's back and forward buttons. It checks for the `savedPosition` parameter and returns it if available. If `savedPosition` is not available, it scrolls to the top of the page.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring History Mode in Vue Router\nDESCRIPTION: Sets up a Vue Router instance with history mode enabled, which uses HTML5 pushState API instead of hash-based URLs.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Named View Components in Vue Router\nDESCRIPTION: This JavaScript snippet defines a `VueRouter` instance configuration that associates named views with specific components within a single route. It shows the assignment of `default`, `a`, and `b` named views to `Foo`, `Bar`, and `Baz` components, respectively.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-views.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters and Router Instance in Component\nDESCRIPTION: This JavaScript snippet demonstrates how to access the current route's parameters and the router instance within a Vue component.  It shows how to retrieve route parameters using `this.$route.params` and how to navigate programmatically using `this.$router.push` and `this.$router.go`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Home.vue\nexport default {\n  computed: {\n    username () {\n      // `params` が表示される\n      return this.$route.params.username\n    }\n  },\n  methods: {\n    goBack () {\n      window.history.length > 1\n        ? this.$router.go(-1)\n        : this.$router.push('/')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor Scroll Behavior\nDESCRIPTION: Implementation that handles scroll behavior for hash/anchor navigation with optional offset support.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n      // , offset: { x: 0, y: 10 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading Route Components in Vue Router\nDESCRIPTION: Combines async components with dynamic imports to create route components that are automatically code-split by webpack.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import('./Foo.vue')\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll to Top Behavior in Vue Router\nDESCRIPTION: A scrollBehavior implementation that always scrolls to the top of the page after navigation. Returns fixed coordinates to position the page at the top.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Redirection with Function in Vue Router (JavaScript)\nDESCRIPTION: This code illustrates how to use a function to dynamically determine the redirection path based on the current route. The function receives the current route object as an argument and returns the new path to redirect to, offering flexible and conditional redirection possibilities.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // la fonction reçoit la route cible en tant qu'argument\n      // retournez le chemin vers la nouvelle route ici.\n    }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Configuring Nested Routes\nDESCRIPTION: This code configures nested routes within the Vue Router instance.  It defines the `children` array within the parent `/user/:id` route to specify child routes for `/user/:id/profile` and `/user/:id/posts`, linking them to `UserProfile` and `UserPosts` components, respectively.  These children will render inside the `<router-view>` of the User component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"const router = new VueRouter({\\n  routes: [\\n    {\\n      path: '/user/:id',\\n      component: User,\\n      children: [\\n        {\\n          // UserProfile will be rendered inside User's <router-view>\\n          // when /user/:id/profile is matched\\n          path: 'profile',\\n          component: UserProfile\\n        },\\n        {\\n          // UserPosts will be rendered inside User's <router-view>\\n          // when /user/:id/posts is matched\\n          path: 'posts',\\n          component: UserPosts\\n        }\\n      ]\\n    }\\n  ]\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Anchor/Hash on Route Navigation\nDESCRIPTION: This code snippet shows how to simulate 'scroll to anchor' behavior by checking for a hash in the `to` route object. If a hash is present, it returns an object with the `selector` property set to the hash, causing the page to scroll to the element with the corresponding ID.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n      // , offset: { x: 0, y: 10 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Fields in Global Navigation Guards in Vue Router\nDESCRIPTION: This snippet demonstrates how to access meta fields within a global navigation guard using `router.beforeEach`. It iterates through `$route.matched` to check for route records containing specific meta fields, such as `requiresAuth`, and redirects the user if necessary. `to` represents the target Route Object being navigated to. `from` represents the current route being navigated away from. `next` is a function that resolves the hook. It can be called with no arguments to proceed or redirect the navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    // if not, redirect to login page.\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // make sure to always call next()!\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Route Metadata in Vue Router Configuration\nDESCRIPTION: Example of defining metadata for routes in Vue Router. This snippet shows how to structure routes with nested children and add metadata like 'requiresAuth' to specific routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // метаданные\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash-based Anchor Scrolling in Vue Router\nDESCRIPTION: A scrollBehavior implementation that scrolls to page anchors based on the URL hash. Uses the selector property to target specific elements on the page.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Router: Decoupled Component with Props\nDESCRIPTION: This snippet shows how to decouple a Vue component from the router by using props.  The component receives the `id` as a prop, making it more reusable. It also illustrates using named views and setting props for each view.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n\n    // utilizando vistas con nombre, tienes que definir la opción prop para cada una de ellas:\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router History Mode\nDESCRIPTION: Basic configuration to enable HTML5 history mode in Vue Router instead of hash mode\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation to Named Routes in Vue Router\nDESCRIPTION: This snippet shows how to navigate to a named route programmatically using router.push(). It uses the same object structure as the router-link example, specifying the route name and parameters.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/named-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push({ name: 'user', params: { userId: 123 } })\n```\n\n----------------------------------------\n\nTITLE: Linking to Named Route with router-link (HTML)\nDESCRIPTION: This snippet shows how to use the `router-link` component to navigate to a named route. The `to` prop is bound to an object that specifies the route's name ('user') and any required parameters (userId).  Clicking this link will navigate to /user/123.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n\n----------------------------------------\n\nTITLE: Using router.push() with Different Arguments in Vue Router\nDESCRIPTION: Examples of using router.push() with various argument types including string paths, location objects with path/name properties, and routing with params and query parameters.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// literal string path\nrouter.push('home')\n\n// object\nrouter.push({ path: 'home' })\n\n// named route\nrouter.push({ name: 'user', params: { userId: '123' } })\n\n// with query, resulting in /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' } })\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Router Views\nDESCRIPTION: This code snippet demonstrates how to define multiple `<router-view>` components within a template, each with an optional `name` attribute. The `name` attribute allows you to target specific views with different components in your route configuration. If no name is provided, the `default` name is assumed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/named-views.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-view class=\"view one\"></router-view>\n<router-view class=\"view two\" name=\"a\"></router-view>\n<router-view class=\"view three\" name=\"b\"></router-view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Components for Named Views in Vue Router\nDESCRIPTION: This snippet shows how to configure components for named views in a Vue Router route definition. The `components` option (plural) is used to map component to named views, allowing multiple components to be rendered for a single route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/named-views.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Basic User Component\nDESCRIPTION: This snippet defines a simple `User` component that displays the user ID from the route parameters.  It relies on `$route.params.id` to access the dynamic ID. The component serves as a basic building block for demonstrating routing functionality.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"const User = {\\n  template: '<div>User {{ $route.params.id }}</div>'\\n}\\n\\nconst router = new VueRouter({\\n  routes: [{ path: '/user/:id', component: User }]\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Instance in beforeRouteEnter Guard with Callback\nDESCRIPTION: Shows how to access the component instance in a beforeRouteEnter guard by passing a callback to next(). The callback receives the component instance after navigation is confirmed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/navigation-guards.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nbeforeRouteEnter (to, from, next) {\n  next(vm => {\n    // Zugriff auf Komponenteninstanz via 'vm'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using router.push Navigation Methods in Vue Router\nDESCRIPTION: Demonstrates different ways to use the router.push method for programmatic navigation, including using a string path, object notation, named routes with parameters, and query parameters.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// String\nrouter.push('home')\n\n// Objekt\nrouter.push({ path: 'home' })\n\n// benannte (\"named\") Route\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// mit Query, resultiert in /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Route Redirect in Vue Router (JavaScript)\nDESCRIPTION: Shows how to redirect to a named route in the Vue Router configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [{ path: '/a', redirect: { name: 'foo' } }]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Function Mode with props in Vue Router\nDESCRIPTION: Example showing function mode for the props option, which allows transforming route data before passing as props. This enables type casting and combining static values with route-based data.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/search',\n      component: SearchUser,\n      props: route => ({ query: route.query.q })\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Vue Component (JavaScript)\nDESCRIPTION: This code shows how to access dynamic route parameters within a Vue component. It updates the User component to display the current user's ID using $route.params.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/dynamic-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>Utilisateur {{ $route.params.id }}</div>'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Failure Properties in Vue Router\nDESCRIPTION: This code snippet shows how to access the `to` and `from` properties of a navigation failure object in Vue Router. These properties provide information about the target and current location respectively for the navigation that failed.  This example accesses the `path` property of both `to` and `from` locations.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// trying to access the admin page\nrouter.push('/admin').catch(failure => {\n  if (isNavigationFailure(failure, NavigationFailureType.redirected)) {\n    failure.to.path // '/admin'\n    failure.from.path // '/'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigation Guard Correct Implementation\nDESCRIPTION: Shows the proper way to implement navigation guard with conditional next() calls to avoid multiple resolutions.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== 'Login' && !isAuthenticated) next({ name: 'Login' })\n  else next()\n})\n```\n\n----------------------------------------\n\nTITLE: Catch-all Route for 404 Handling in Vue Router\nDESCRIPTION: This Vue Router configuration defines a catch-all route that matches any path not defined in the application's routes. It uses a dedicated NotFoundComponent to display a 404 error page when no other route matches the requested URL.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { \n      path: '/:catchAll(.*)', \n      component: NotFoundComponent,\n      name: 'NotFound'\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Decoupling Components Using props Option in Vue Router\nDESCRIPTION: Improved implementation showing how to use the props option to pass route parameters directly as component props, enhancing reusability and testability.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n\n    // for routes with named views, you have to define the `props` option for each named view:\n    {\n      path: '/user/:id',\n      components: {\n        default: User,\n        sidebar: Sidebar\n      },\n      props: {\n        default: true,\n        // function mode, more about it below\n        sidebar: route => ({ search: route.query.q })\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Component-Level Navigation Guards in Vue Router\nDESCRIPTION: Demonstrates how to define navigation guards directly in route components using beforeRouteEnter and beforeRouteLeave hooks to control navigation to and from a component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/navigation-guards.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst Foo = {\n  template: `...`,\n  beforeRouteEnter (to, from, next) {\n    // Wird aufgerufen bevor die Route bestätigt wird, die diese Komponenten rendert.\n    // Hat keinen Zugriff auf den `this`-Kontext der Komponenteninstanz,\n    // da diese noch nicht erstellt wurde, wenn die Guard-Funktion aufgerufen wird.\n  },\n  beforeRouteLeave (to, from, next) {\n    // Wird aufgerufen, wenn von der Route, die diese Komponente rendert, wegnavigiert wird.\n    // Hat Zugriff zum `this`-Kontext.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Router Configuration with Route Records\nDESCRIPTION: This code shows how route records are defined within the `routes` configuration array in Vue Router. Each object in the array represents a route, including its path and associated component.  The `children` array allows for nested routes, where each child route is also a route record. The `matched` property in the Route object contains these records.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/route-object.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    // el siguiente objeto es un registro de ruta\n    { path: '/foo', component: Foo,\n      children: [\n        // este también es un registro de ruta\n        { path: 'bar', component: Bar }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Scroll Behavior Type Definition (TypeScript)\nDESCRIPTION: Defines the TypeScript type for the `scrollBehavior` function in Vue Router. This function allows customizing the scroll position when navigating between routes. It accepts the target route, the origin route, and the saved scroll position as arguments and returns a descriptor for the desired scroll position.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PositionDescriptor =\n    { x: number, y: number } |\n    { selector: string } |\n    void\n\ntype scrollBehaviorHandler = (\n    to: Route,\n    from: Route,\n    savedPosition?: { x: number, y: number }\n  ) => PositionDescriptor | Promise<PositionDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Использование входных параметров в компоненте маршрута Vue\nDESCRIPTION: Пример использования входных параметров (props) для разделения компонента от маршрутизатора. Это повышает гибкость и переиспользуемость компонента.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>Пользователь {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n\n    // для маршрутов с именованными представлениями необходимо\n    // указывать опцию `props` для каждого именованного представления:\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Routes in Vue Router (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a route with a dynamic segment in Vue Router. It creates a User component and sets up a router with a dynamic route for user profiles.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/dynamic-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>Utilisateur</div>'\n}\n\nconst router = new VueRouter({\n  routes: [\n    // Les segments dynamiques commencent avec la ponctuation deux-points\n    { path: '/utilisateur/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuración de Rutas en Vue Router con JavaScript\nDESCRIPTION: Definición de componentes de ruta, configuración de rutas y creación de una instancia de Vue Router con inyección en la aplicación Vue\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = { template: '\\u003cdiv\\u003efoo\\u003c/div\\u003e' }\nconst Bar = { template: '\\u003cdiv\\u003ebar\\u003c/div\\u003e' }\n\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\nconst app = new Vue({\n  router\n}).$mount('#app')\n```\n\n----------------------------------------\n\nTITLE: HTML: Router View Setup\nDESCRIPTION: This snippet sets up the root `router-view` element in the main application HTML.  It acts as the placeholder where the routed components will be rendered. This is the basic entry point for Vue Router's content injection.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<div id=\\\"app\\\">\\n  <router-view></router-view>\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Transitions Based on Route in Vue Router\nDESCRIPTION: This snippet demonstrates how to dynamically determine the transition to use based on the relationship between the target route and current route. It uses a dynamic transition name and a watcher on the $route object.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/transitions.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- use a dynamic transition name -->\n<transition :name=\"transitionName\">\n  <router-view></router-view>\n</transition>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// then, in the parent component,\n// watch the `$route` to determine the transition to use\nwatch: {\n  '$route' (to, from) {\n    const toDepth = to.path.split('/').length\n    const fromDepth = from.path.split('/').length\n    this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using router.go Navigation Method in Vue Router\nDESCRIPTION: Shows examples of using the router.go method to navigate forward and backward in browser history, similar to window.history.go. The parameter indicates how many steps to move in the browser history.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gehe einen Eintrag vorwärts - wie history.forward()\nrouter.go(1)\n\n// gehe einen Eintrag zurück - wie history.back()\nrouter.go(-1)\n\n// gehe drei Einträge vor\nrouter.go(3)\n\n// scheitert ohne Nachricht, wenn nicht genügend Einträge vorhanden sind\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Route-Level Navigation Interceptor Configuration\nDESCRIPTION: Defines a navigation guard directly on a route configuration, allowing specific interception logic for individual routes before navigation is confirmed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/navigation-guards.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Route Meta Fields in Vue Router Configuration\nDESCRIPTION: Demonstrates how to include a meta field when defining routes, with an example of setting an authentication requirement for a nested route\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // un champ `meta`\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Class for Router Links\nDESCRIPTION: This configuration allows setting a global active class name for router links, facilitating custom CSS styling for active routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntype : `string`\n\n- défaut : \"router-link-active\"\n```\n\n----------------------------------------\n\nTITLE: Catch-all Route Configuration\nDESCRIPTION: Examples of configuring catch-all routes using asterisk patterns in Vue Router.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // will match everything\n  path: '*'\n}\n{\n  // will match anything starting with `/user-`\n  path: '/user-*'\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Routes in Vue Router\nDESCRIPTION: This snippet demonstrates how to configure a simple redirect from one route (`/a`) to another (`/b`) using Vue Router. When a user visits `/a`, they will be automatically redirected to `/b`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Working with router.push() and Parameters in Vue Router\nDESCRIPTION: Demonstrates how to correctly use path and params properties with router.push(), showing proper parameter usage patterns and explaining limitations when combining path with params.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst userId = '123'\nrouter.push({ name: 'user', params: { userId } }) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// This will NOT work\nrouter.push({ path: '/user', params: { userId } }) // -> /user\n```\n\n----------------------------------------\n\nTITLE: Vue Router - router.go() examples\nDESCRIPTION: The `router.go(n)` method navigates forward or backward in the history stack by a specified number of steps, similar to `window.history.go(n)`.  It takes an integer as a parameter that represents the number of steps to move forward or backward.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Ir hacia adelante un paso, similar a history.forward()\nrouter.go(1)\n\n// Ir hacia atrás un paso, similar a history.back()\nrouter.go(-1)\n\n// Ir 3 pasos hacia adelante\nrouter.go(3)\n\n// Falla silenciosamente si no existe esa cantidad de registros en el historial\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Использование router.go для навигации по истории в Vue Router\nDESCRIPTION: Примеры использования метода router.go() для перемещения вперед и назад по истории навигации, эквивалентно использованию window.history.go().\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// перейти на одну запись вперёд, эквивалентно history.forward()\nrouter.go(1)\n\n// перейти на одну запись назад, эквивалентно history.back()\nrouter.go(-1)\n\n// перейти на 3 записи вперёд\nrouter.go(3)\n\n// если записей в истории недостаточно много, перехода просто не произойдёт\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with Scroll Behavior\nDESCRIPTION: Basic setup of Vue Router instance with scrollBehavior function that controls scroll position during route navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // return desired position\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Route Changes in Vue Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to react to route parameter changes within the same component. It uses the watch option to observe changes in the $route object.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/dynamic-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  watch: {\n    '$route' (to, from) {\n      // réagir au changement de route...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Query Parsing and Stringifying Functions\nDESCRIPTION: These functions allow the developer to specify custom methods for parsing query strings into objects and vice versa, overriding the default behavior provided by Vue Router for greater flexibility and control.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntype : `Function`\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Fields in Vue Router Routes\nDESCRIPTION: This snippet shows how to define meta fields in Vue Router route configurations, specifically adding a 'requiresAuth' boolean in a nested route's meta object.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // メタフィールド\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Fields in Vue Router Route Configuration\nDESCRIPTION: Example of how to define meta fields in a Vue Router configuration. The example shows a nested route structure with a meta field 'requiresAuth' set to true for a child route, which can be used for authentication checks.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // ein Metafeld\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Reacting to Route Parameter Changes with beforeRouteUpdate\nDESCRIPTION: This code shows how to use the `beforeRouteUpdate` navigation guard to react to route parameter changes within the same component instance.  The `next()` function must be called to proceed with the navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/dynamic-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  beforeRouteUpdate (to, from, next) {\n    // Código que responde al cambio\n    // no olvides ejecutar next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Transition Logic with Vue.js\nDESCRIPTION: This snippet shows how to use a watcher on the `$route` object to dynamically determine the transition name based on the depth of the 'to' and 'from' routes.  This allows for different transitions based on the navigation direction.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 接着在父组件内\n// watch $route 决定使用哪种过渡\nwatch: {\n  '$route' (to, from) {\n    const toDepth = to.path.split('/').length\n    const fromDepth = from.path.split('/').length\n    this.transitionName = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Alias in Vue Router (JavaScript)\nDESCRIPTION: Shows how to set up an alias for a route in Vue Router. In this example, '/b' is set as an alias for '/a', allowing the component A to be accessed via both paths.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [{ path: '/a', component: A, alias: '/b' }]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Redirecting in Vue Router\nDESCRIPTION: This snippet illustrates how to use a function to dynamically determine the redirect target based on the current route. The function receives the target route as an argument, allowing for complex redirect logic.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // the function receives the target route as the argument\n      // return redirect path/location here.\n    }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Route Component\nDESCRIPTION: Combines Vue's async component feature with webpack's code splitting by using a dynamic import within the async component definition. This allows webpack to automatically code-split the component. This defines an async component `Foo` that will be automatically code-split by webpack.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import('./Foo.vue')\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with History Mode (JavaScript)\nDESCRIPTION: This snippet shows how to initialize a Vue Router instance with the `history` mode enabled. This allows the application to use clean URLs without the hash symbol.  It requires the `vue-router` library to be installed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Detecting Navigation Failures in Vue Router\nDESCRIPTION: This code snippet demonstrates how to detect navigation failures in Vue Router using the `isNavigationFailure` function and the `NavigationFailureType` enum. It shows how to handle a redirected navigation failure and display a notification to the user.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport VueRouter from 'vue-router'\nconst { isNavigationFailure, NavigationFailureType } = VueRouter\n\n// trying to access the admin page\nrouter.push('/admin').catch(failure => {\n  if (isNavigationFailure(failure, NavigationFailureType.redirected)) {\n    // show a small notification to the user\n    showToast('Login in order to access the admin panel')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Objects in Navigation Guards (Vue Router)\nDESCRIPTION: This code snippet demonstrates how to access the `to` and `from` Route objects within a `beforeEach` navigation guard in Vue Router. The `to` object represents the target route being navigated to, and the `from` object represents the current route being navigated from.  These Route objects provide information about the routes being transitioned between.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/route-object.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  // to y from son objetos de ruta\n})\n```\n\n----------------------------------------\n\nTITLE: Работа с params и path в router.push в Vue Router\nDESCRIPTION: Пример правильного использования параметров при навигации с router.push. Показывает, что params игнорируются при указании path, и демонстрирует верные способы передачи параметров.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst userId = 123\nrouter.push({ name: 'user', params: { userId }}) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// Это НЕ БУДЕТ работать\nrouter.push({ path: '/user', params: { userId }}) // -> /user\n```\n\n----------------------------------------\n\nTITLE: JavaScript: User Component with Nested Router View\nDESCRIPTION: This snippet updates the `User` component to include a nested `<router-view>`. This enables the rendering of child routes within the `User` component's template, creating a nested layout. The outer router-view displays the User component while the inner displays the child route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"const User = {\\n  template: `\\n    <div class=\\\"user\\\">\\n      <h2>User {{ $route.params.id }}</h2>\\n      <router-view></router-view>\\n    </div>\\n  `\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Views in Vue Router\nDESCRIPTION: This code snippet illustrates how to configure named views within a Vue Router route definition using the `components` option. The `components` option allows you to map multiple components to a single route, each associated with a specific named view. The `default` key represents the unnamed `<router-view>`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/named-views.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Route Props with Static Values\nDESCRIPTION: This snippet shows the configuration of route props using static values. It demonstrates how to set specific props for a component directly within the router's route definition.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/promotion/from-newsletter', component: Promotion, props: { newsletterPopup: false } }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router Redirection\nDESCRIPTION: This code snippet demonstrates how to redirect a route from `/a` to `/b` using Vue Router's `redirect` option.  When a user visits `/a`, they will be redirected to `/b`.  The route configuration is defined within the `routes` array of the `VueRouter` constructor.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Redirection in Vue Router (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure a simple redirection from one path to another using Vue Router. When the user visits '/a', they will be automatically redirected to '/b'.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Global Navigation Guards (JavaScript)\nDESCRIPTION: Illustrates the signatures for global navigation guards: `beforeEach`, `beforeResolve`, and `afterEach`. These guards allow intercepting and controlling navigation events in Vue Router. The `beforeEach` and `beforeResolve` guards require calling the `next` function to proceed with the navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  /* must call `next` */\n})\n\nrouter.beforeResolve((to, from, next) => {\n  /* must call `next` */\n})\n\nrouter.afterEach((to, from) => {})\n```\n\n----------------------------------------\n\nTITLE: Initializing Lazy-Loaded Component with Webpack Ensure\nDESCRIPTION: Defines an asynchronous component using Webpack's code splitting mechanism. Loads the component only when the route is visited, improving initial page load performance.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = resolve => {\n  require.ensure(['./Foo.vue'], () => {\n    resolve(require('./Foo.vue'))\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Async Component with Promise\nDESCRIPTION: Defines an async component using a factory function that returns a Promise. This is a basic way to define an async component in Vue before the introduction of dynamic imports, where the promise resolves to the component definition.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () =>\n  Promise.resolve({\n    /* component definition */\n  })\n```\n\n----------------------------------------\n\nTITLE: Vue Router Named Route Redirection\nDESCRIPTION: This code snippet shows how to redirect to a named route using the `redirect` option. Instead of providing a path, a route `name` is specified. This is useful when the target route's path might change, but its name remains constant.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Objects in Scroll Behavior (Vue Router)\nDESCRIPTION: This snippet illustrates how to access the `to` and `from` Route objects within the `scrollBehavior` function in Vue Router. These objects provide information about the routes being transitioned between, which can be used to customize the scrolling behavior. The `savedPosition` parameter allows for restoring the scroll position on back/forward navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/route-object.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  scrollBehavior (to, from, savedPosition) {\n    // to y from son objetos de ruta\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router: Object Mode Props\nDESCRIPTION: This snippet demonstrates using the object mode for props, where a static object is passed as props to the component. This is useful when the props are known in advance and don't depend on the route parameters.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/promotion/from-newsletter', component: Promotion, props: { newsletterPopup: false } }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Route with Vue Router\nDESCRIPTION: This snippet demonstrates how to define a route with a dynamic segment using Vue Router. The dynamic segment, denoted by `:id`, allows mapping URLs with varying IDs to the same component.  The `User` component is a placeholder that will be rendered for routes like `/user/foo` or `/user/bar`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/dynamic-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User</div>'\n}\n\nconst router = new VueRouter({\n  routes: [\n    // los segmentos dinámicos comienzan con dos puntos\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Route (TypeScript)\nDESCRIPTION: Shows the signatures for adding a single route to the router using `router.addRoute`. This method is available since Vue Router 3.5.0. The first signature shows adding a new route to the router, and the second signature shows adding a new route record as the child of an existing route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\naddRoute(route: RouteConfig): () => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\naddRoute(parentName: string, route: RouteConfig): () => void\n```\n\n----------------------------------------\n\nTITLE: Resolving URL Location with Router\nDESCRIPTION: Demonstrates resolving a location using router.resolve() method, which returns an object containing location details, route information, and href\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-instance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  location: Location;\n  route: Route;\n  href: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Router: Component Coupled to $route\nDESCRIPTION: This snippet demonstrates how a Vue component can be tightly coupled to the `$route` object, making it dependent on specific URLs. The component directly accesses the `id` parameter from `$route.params`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Route Metadata in Global Navigation Guard\nDESCRIPTION: A global navigation guard that checks for route metadata requiring authentication. This demonstrates how to iterate through matched routes, check for specific metadata, and conditionally redirect users based on authorization status.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // этот путь требует авторизации, проверяем залогинен ли\n    // пользователь, и если нет, перенаправляем на страницу логина\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // всегда так или иначе нужно вызвать next()!\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with scrollBehavior\nDESCRIPTION: This snippet demonstrates how to initialize a Vue Router instance with the `scrollBehavior` option. The `scrollBehavior` function allows customizing the scroll position when navigating between routes. It receives `to`, `from`, and `savedPosition` arguments.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/kr/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // 원하는 위치로 돌아가기\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Aliasing a Route in Vue Router\nDESCRIPTION: This snippet demonstrates how to create an alias for a route.  Visiting `/b` will render the component associated with `/a`, but the URL in the browser will remain `/b`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Props to Decouple Component\nDESCRIPTION: This snippet demonstrates how to use props in a Vue component to obtain the user id, thus decoupling the component from the router. It also shows how to configure props for named views in routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>Utilisateur {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/utilisateur/:id', component: User, props: true },\n\n    // pour les routes avec vues nommées, vous devez définir l'option `props` pour chaque vue nommée :\n    {\n      path: '/utilisateur/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using router.go for history navigation in Vue Router (JavaScript)\nDESCRIPTION: Shows how to use router.go to navigate through the browser's history stack, similar to window.history.go.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// avancer d'une entrée, identique à `history.forward()`\nrouter.go(1)\n\n// retourner d'une entrée en arrière, identique à `history.back()`\nrouter.go(-1)\n\n// avancer de trois entrées\nrouter.go(3)\n\n// échoue silencieusement s'il n'y a pas assez d'entrées.\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Adding Routes Dynamically (TypeScript)\nDESCRIPTION: Demonstrates the signature for `router.addRoutes` (deprecated) and `router.addRoute`. These methods allow adding new routes to the router dynamically. The `addRoutes` method takes an array of route configurations, while `addRoute` adds a single route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.addRoutes(routes: Array<RouteConfig>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll-to-Anchor Behavior\nDESCRIPTION: This example demonstrates how to implement scroll-to-anchor behavior by checking for a hash in the route and returning a selector object.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n      // , offset: { x: 0, y: 10 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Routes in Vue Router\nDESCRIPTION: Example showing the return value format of the router.resolve() method, which is used for reverse URL resolution. The method returns an object containing location, route, and href properties.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-instance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  location: Location;\n  route: Route;\n  href: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Data Fetching After Navigation\nDESCRIPTION: This Vue component fetches post data after navigation using the `created` lifecycle hook and a watcher on the `$route`. It manages loading and error states and uses a `fetchData` method to handle the data fetching logic, which includes checking for route changes during the fetching process to prevent race conditions. It assumes the existence of a `getPost` function for fetching data.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      loading: false,\n      post: null,\n      error: null\n    }\n  },\n  created () {\n    // fetch the data when the view is created and the data is\n    // already being observed\n    this.fetchData()\n  },\n  watch: {\n    // call again the method if the route changes\n    '$route': 'fetchData'\n  },\n  methods: {\n    fetchData () {\n      this.error = this.post = null\n      this.loading = true\n      const fetchedId = this.$route.params.id\n      // replace `getPost` with your data fetching util / API wrapper\n      getPost(fetchedId, (err, post) => {\n        // make sure this request is the last one we did, discard otherwise\n        if (this.$route.params.id !== fetchedId) return\n        this.loading = false\n        if (err) {\n          this.error = err.toString()\n        } else {\n          this.post = post\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Route Transitions in Vue Components\nDESCRIPTION: This snippet shows how to apply different transitions for different route components by using named transitions within each component's template.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/transitions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = {\n  template: `\n    <transition name=\"slide\">\n      <div class=\"foo\">...</div>\n    </transition>\n  `\n}\n\nconst Bar = {\n  template: `\n    <transition name=\"fade\">\n      <div class=\"bar\">...</div>\n    </transition>\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top on Route Navigation\nDESCRIPTION: This code snippet shows how to scroll to the top of the page (x: 0, y: 0) on every route navigation. It uses the `scrollBehavior` function to return an object with x and y coordinates set to 0.  This ensures the user always starts at the top of the page when navigating to a new route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Route Transitions with Vue.js\nDESCRIPTION: This snippet shows how to define transitions for individual route components.  Each component wraps its content with a `<transition>` component, specifying a unique `name` property, which allows for different transition effects for each route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = {\n  template: `\n    <transition name=\"slide\">\n      <div class=\"foo\">...</div>\n    </transition>\n  `\n}\n\nconst Bar = {\n  template: `\n    <transition name=\"fade\">\n      <div class=\"bar\">...</div>\n    </transition>\n  `\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router with Lazy-Loaded Components\nDESCRIPTION: Demonstrates how to use an async component in a Vue Router configuration. The route definition remains unchanged despite the component being lazy-loaded.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/foo', component: Foo }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Redirect in Vue Router\nDESCRIPTION: This snippet illustrates how to create a dynamic redirect using a function. The function receives the target route object and should return a string path or route object.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // в функцию в качестве аргумента передаётся путь\n      // возвращаемым значением должна быть строка или объект пути\n    }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router Configuration\nDESCRIPTION: Configures a Vue Router instance with a route that uses the lazy-loaded component `Foo`. The component is directly used in the route configuration without any changes needed due to the lazy loading implementation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [{ path: '/foo', component: Foo }]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router with Lazy Loaded Component (JavaScript)\nDESCRIPTION: This example shows how to use the lazy-loaded component in the Vue Router configuration, demonstrating that no changes are needed in the route setup.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [{ path: '/foo', component: Foo }]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Async Component in Vue Router (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define an async component using a factory function that returns a Promise resolving to the component definition.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () =>\n  Promise.resolve({\n    /* définition du composant */\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Named Views in HTML with Vue Router\nDESCRIPTION: This snippet demonstrates how to define multiple router-view components with different names in HTML. It shows the usage of the 'name' attribute to specify different views.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/named-views.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-view class=\"view one\"></router-view>\n<router-view class=\"view two\" name=\"a\"></router-view>\n<router-view class=\"view three\" name=\"b\"></router-view>\n```\n\n----------------------------------------\n\nTITLE: Applying Active Class to Outer Element (HTML)\nDESCRIPTION: This snippet illustrates a method to apply the active class to an outer element rather than the <a> tag itself, enabling better customization of styles for the active link.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/router-link.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<router-link tag=\"li\" to=\"/foo\">\n  <a>/foo</a>\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Router Links and View\nDESCRIPTION: This HTML snippet defines the basic structure of the application. It includes `router-link` components for navigation, which create links to different routes, and a `router-view` component, which is a placeholder where the content of the matched route will be rendered.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n  <h1>Hello App!</h1>\n  <p>\n    <!-- ナビゲーションに router-link コンポーネントを使う -->\n    <!-- リンク先を `to` プロパティに指定します -->\n    <!-- デフォルトで `<router-link>` は `<a>` タグとして描画されます -->\n    <router-link to=\"/foo\">Go to Foo</router-link>\n    <router-link to=\"/bar\">Go to Bar</router-link>\n  </p>\n  <!-- ルートアウトレット -->\n  <!-- ルートとマッチしたコンポーネントがここへ描画されます -->\n  <router-view></router-view>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Before-Navigation Data Fetching in Vue Router Component\nDESCRIPTION: This snippet shows how to implement data fetching before navigation using route guards in a Vue Router component, including error handling and data setting.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      post: null,\n      error: null\n    }\n  },\n  beforeRouteEnter(route, redirect, next) {\n    getPost(route.params.id, (err, post) => {\n      next(vm => vm.setData(err, post))\n    })\n  },\n  // コンポーネントが既に描画されている際のルート変更時は\n  // ロジックが少し異なります\n  beforeRouteUpdate(to, from, next) {\n    this.post = null\n    getPost(to.params.id, (err, post) => {\n      this.setData(err, post)\n      next()\n    })\n  },\n  methods: {\n    setData(err, post) {\n      if (err) {\n        this.error = err.toString()\n      } else {\n        this.post = post\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Route Redirect in Vue Router\nDESCRIPTION: This example shows how to configure a redirect to a named route in Vue Router. The redirect target is specified as an object with a 'name' property.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Named Route Redirection in Vue Router (JavaScript)\nDESCRIPTION: This snippet shows how to redirect to a named route using Vue Router. Instead of specifying a path, you can redirect to a route defined with a specific name. This improves maintainability as the route's path can change without affecting the redirection logic.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Route Records - Vue Router (JavaScript)\nDESCRIPTION: This snippet defines route records within the `routes` configuration of a Vue Router instance. These route records are objects that specify the path and component for each route, and they can also contain nested `children` routes. The `matched` array within the route object holds copies of these route record objects.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/api/route-object.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    // 以下のオブジェクトがルートレコード\n    { path: '/foo', component: Foo,\n      children: [\n        // こちらもルートレコード\n        { path: 'bar', component: Bar }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Redirect in Vue Router (JavaScript)\nDESCRIPTION: Demonstrates how to use a function for dynamic redirection in Vue Router. The function receives the target route as an argument and should return the redirect path or location.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/a',\n      redirect: to => {\n        // この function は対象のルートを引数として受け取ります\n        // ここではリダイレクト先の path もしくは location を返します\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Route-Specific Guards in Vue Router Configuration\nDESCRIPTION: Defines a navigation guard directly in a route's configuration. This guard has the same signature as global before guards but only applies to this specific route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/navigation-guards.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Router Link v-slot API Example in Vue.js\nDESCRIPTION: Demonstrates using the v-slot API with router-link component to enable custom link rendering and access navigation properties.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-link\n  to=\"/about\"\n  custom\n  v-slot=\"{ href, route, navigate, isActive, isExactActive }\"\n>\n  <NavLink :active=\"isActive\" :href=\"href\" @click=\"navigate\"\n    >{{ route.fullPath }}</NavLink\n  >\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Props Function Mode\nDESCRIPTION: Demonstrates passing dynamic props using a function that transforms route parameters into component props\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/search', component: SearchUser, props: (route) => ({ query: route.query.q }) }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Including Vue and Vue Router Libraries\nDESCRIPTION: This snippet includes the Vue.js and Vue Router libraries from unpkg.com. These libraries are necessary for using Vue Router in a Vue.js application. The complete version of vue is included to parse the templates.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for History Mode\nDESCRIPTION: This Apache configuration snippet ensures that all requests that do not match existing files or directories are redirected to the index.html file. This is necessary for Vue Router's history mode to function correctly, as it allows the application to handle routing on the client-side. Make sure mod_rewrite is enabled on your Apache server.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: ApacheConf\nCODE:\n```\n<IfModule mod_negotiation.c>\n  Options -MultiViews\n</IfModule>\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Route Alias Configuration in Vue Router (JavaScript)\nDESCRIPTION: This snippet shows how to configure an alias for a route.  Visiting '/b' will render the component associated with '/a', but the URL in the browser will remain '/b'. This allows you to map multiple URLs to the same component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router Dynamic Redirection\nDESCRIPTION: This snippet demonstrates dynamic redirection using a function. The function receives the target route as an argument, allowing for conditional redirection based on the route's properties. The function should return the path to the new route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // la fonction reçoit la route cible en tant qu'argument\n      // retournez le chemin vers la nouvelle route ici.\n    }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router Alias\nDESCRIPTION: This code snippet demonstrates how to define an alias for a route. Visiting `/b` will render the component associated with `/a`, but the URL in the browser will remain `/b`. This enables associating multiple URLs with the same component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Per-Route Guard Configuration\nDESCRIPTION: Shows how to define beforeEnter guards directly in route configuration objects.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Linking to Named Routes in Vue Router Template\nDESCRIPTION: This example demonstrates how to use the router-link component to create a link to a named route. It passes an object to the 'to' prop, specifying the route name and parameters.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/named-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Fetching in Vue.js Component\nDESCRIPTION: This JavaScript code demonstrates how to implement data fetching in a Vue.js component. It uses the created hook and a watcher to fetch data when the component is created or the route changes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      loading: false,\n      post: null,\n      error: null\n    }\n  },\n  created () {\n    // Lade die Daten, wenn die Komponente erstellt wurde und die\n    // Daten bereits observed (\"beobachtet\") werden.\n    this.fetchData()\n  },\n  watch: {\n    // Rufe die Methode erneut auf, wenn sich die Route ändert.\n    '$route': 'fetchData'\n  },\n  methods: {\n    fetchData () {\n      this.error = this.post = null\n      this.loading = true\n      // Ersetze 'getPost' mit einem beliebigen AJAX-tool / API-Wrapper\n      getPost(this.$route.params.id, (err, post) => {\n        this.loading = false\n        if (err) {\n          this.error = err.toString()\n        } else {\n          this.post = post\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router with Lazy-Loaded Component\nDESCRIPTION: Demonstrates how to integrate lazy-loaded components into Vue Router configuration without changing the standard routing setup.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/foo', component: Foo }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Catch-All Route for 404 Pages\nDESCRIPTION: Implements a catch-all route in Vue Router to handle 404 errors within the application when using history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [{ path: '*', component: NotFoundComponent }]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Component Template with Loading States in Vue.js\nDESCRIPTION: This snippet shows the template structure for a Post component that handles loading, error, and content states when fetching data after navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div v-if=\"loading\" class=\"loading\">\n      Loading...\n    </div>\n\n    <div v-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for History Mode\nDESCRIPTION: This Nginx configuration snippet uses `try_files` to handle Vue Router's history mode. It first attempts to serve the requested URI as a file or directory. If that fails, it falls back to serving the `index.html` file, allowing the Vue application to handle the routing.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Decoupling Component with Route Params\nDESCRIPTION: This snippet demonstrates how to couple a component directly with the route parameters using `$route`, which makes the component less reusable. The component displays the user id obtained from route params.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>Utilisateur {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/utilisateur/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Route Props with Function\nDESCRIPTION: This snippet illustrates using a function to return props based on the route parameters. It allows dynamic setting of props by taking query parameters from the URL.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/search', component: SearchUser, props: (route) => ({ query: route.query.q }) }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Back/Forward Navigation Scroll\nDESCRIPTION: Implementation that preserves scroll position when using browser back/forward buttons and scrolls to top for new navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Redirect in Vue Router\nDESCRIPTION: This snippet demonstrates how to set up a simple static redirect from '/a' to '/b' in the Vue Router configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Components in Same Async Chunk\nDESCRIPTION: Shows how to group multiple components under the same named chunk using Webpack's code splitting with named chunks, allowing efficient async module loading.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = r => require.ensure([], () => r(require('./Foo.vue')), 'group-foo')\nconst Bar = r => require.ensure([], () => r(require('./Bar.vue')), 'group-foo')\nconst Baz = r => require.ensure([], () => r(require('./Baz.vue')), 'group-foo')\n```\n\n----------------------------------------\n\nTITLE: Getting Active Routes (TypeScript)\nDESCRIPTION: Illustrates the signature for `router.getRoutes`. This method returns a list of all active route records in the router. It's available since Vue Router 3.5.0.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetRoutes(): RouteRecord[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Scroll Behavior\nDESCRIPTION: Example of asynchronous scroll behavior using Promises, useful for coordinating with page transitions.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ x: 0, y: 0 })\n    }, 500)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration for History Mode\nDESCRIPTION: This Firebase Hosting configuration ensures that all requests are rewritten to serve the index.html file. This is necessary for Vue Router's history mode to function correctly, as it allows the application to handle routing on the client-side.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Meta Fields in Vue Router\nDESCRIPTION: This snippet demonstrates how to define meta fields within the `routes` configuration of a Vue Router instance.  The `meta` property is an object that can contain any arbitrary data. This data can then be accessed via route records.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // a meta field\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Fields in Vue Router Routes\nDESCRIPTION: This snippet demonstrates how to define a `meta` field within a Vue Router route configuration. The `meta` field can contain arbitrary data, allowing you to associate metadata with specific routes. In this example, the `requiresAuth` property is set to `true`, indicating that the route requires authentication.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      children: [\n        {\n          path: 'bar',\n          component: Bar,\n          // campo meta\n          meta: { requiresAuth: true }\n        }\n      ]\n    }\n  ]\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Vue Router: Function Mode Props\nDESCRIPTION: This snippet demonstrates using the function mode for props, allowing dynamic props based on the route.  The function receives the `route` object as an argument and returns an object representing the props to be passed to the component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/search', component: SearchUser, props: (route) => ({ query: route.query.q }) }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Components in Same Chunk for Vue Router (JavaScript)\nDESCRIPTION: This snippet demonstrates how to group multiple components into the same async chunk using webpack's named chunks feature with special comment syntax.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/lazy-loading.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n```\n\n----------------------------------------\n\nTITLE: Accessing pathMatch Parameter Example\nDESCRIPTION: Demonstrates how to access the pathMatch parameter when using asterisk routes in Vue Router.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Given a route { path: '/user-*' }\nthis.$router.push('/user-admin')\nthis.$route.params.pathMatch // 'admin'\n\n// Given a route { path: '*' }\nthis.$router.push('/non-existing')\nthis.$route.params.pathMatch // '/non-existing'\n```\n\n----------------------------------------\n\nTITLE: Initializing Router with scrollBehavior in Vue Router\nDESCRIPTION: Basic configuration for adding a scrollBehavior function when creating a new Vue Router instance. This function controls how the page scrolls after navigation events.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // zurückgeben der gewünschten Position\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Named Views Using Vue Router in HTML\nDESCRIPTION: This HTML snippet demonstrates how to define multiple named views using the Vue Router. The snippet shows using unnamed (`default`) and named (`a` and `b`) `<router-view>` elements to differentiate parts of a single-page application layout.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-views.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-view class=\"view one\"></router-view>\n<router-view class=\"view two\" name=\"a\"></router-view>\n<router-view class=\"view three\" name=\"b\"></router-view>\n```\n\n----------------------------------------\n\nTITLE: Implementing Global After Navigation Hooks in Vue Router\nDESCRIPTION: Registers a global hook that runs after navigation is complete. Unlike before guards, after hooks don't receive a next function and cannot affect navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/navigation-guards.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrouter.afterEach((to, from) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Nested Named Views Route Configuration\nDESCRIPTION: This code snippet showcases how to configure nested named views within Vue Router routes. The `children` array allows defining child routes, and the `components` option enables mapping different components to the `default` and `helper` named views within the `profile` route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/named-views.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ path: '/settings',\n  // トップで名前付きビューを持つこともできます\n  component: UserSettings,\n  children: [{\n    path: 'emails',\n    component: UserEmailsSubscriptions\n  }, {\n    path: 'profile',\n    components: {\n      default: UserProfile,\n      helper: UserProfilePreview\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Named Route Redirection in Vue Router\nDESCRIPTION: Shows how to redirect to a named route using Vue Router, providing more flexibility in routing configuration by referencing routes by their name.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Mode in JavaScript\nDESCRIPTION: This section describes the router mode configuration, allowing the developer to choose between 'hash', 'history', and 'abstract' modes. Each mode offers unique routing capabilities based on the environment and browser support.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntype : `string`\n\n- défaut : \"hash\" (dans le navigateur) | \"abstract\" (en Node.js)\n\n- valeurs disponibles : \"hash\" | \"history\" | \"abstract\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Routes to Router\nDESCRIPTION: Method for dynamically adding routes to an existing router instance using router.addRoutes(). Routes are added as an array using the same configuration format as the routes constructor option.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-instance.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoutes(routes)\n```\n\n----------------------------------------\n\nTITLE: Использование объекта props в маршруте Vue Router\nDESCRIPTION: Пример использования объекта props для передачи статических данных в компонент маршрута. Это полезно, когда входные параметры являются статическими.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/promotion/from-newsletter', component: Promotion, props: { newsletterPopup: false } }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Component Using Promise in Vue Router\nDESCRIPTION: Shows how to define an async component using a function that returns a Promise. This approach enables lazy loading of components when used with Vue Router.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => Promise.resolve({ /* définition du composant */ })\n```\n\n----------------------------------------\n\nTITLE: Template for User Settings Component in Vue\nDESCRIPTION: This HTML snippet exemplifies the `<template>` section for a `UserSettings` Vue component that uses both default and named `router-view` elements. It sets up a basic layout structure that will host the nested view components.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/named-views.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- UserSettings.vue -->\n<div>\n  <h1>User Settings</h1>\n  <NavBar/>\n  <router-view/>\n  <router-view name=\"helper\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll Behavior in Vue Router\nDESCRIPTION: This section defines a custom scroll behavior function, which determines how the page scrolls in response to route changes. The function can handle different inputs to control position or selectors.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntype scrollBehaviorHandler = (\n    to: Route,\n    from: Route,\n    savedPosition?: { x: number, y: number }\n  ) => PositionDescriptor | Promise<PositionDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Vue Component Template with Loading and Error Handling\nDESCRIPTION: This Vue component template demonstrates how to display a loading state, error message, or post content based on the component's data properties. It uses `v-if` directives to conditionally render different parts of the template.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<template>\\n  <div class=\\\"post\\\">\\n    <div class=\\\"loading\\\" v-if=\\\"loading\\\">\\n      Chargement...\\n    </div>\\n\\n    <div v-if=\\\"error\\\" class=\\\"error\\\">\\n      {{ error }}\\n    </div>\\n\\n    <div v-if=\\\"post\\\" class=\\\"content\\\">\\n      <h2>{{ post.title }}</h2>\\n      <p>{{ post.body }}</p>\\n    </div>\\n  </div>\\n</template>\"\n```\n\n----------------------------------------\n\nTITLE: Route Alias Configuration in Vue Router\nDESCRIPTION: Shows how to create an alias for a route, allowing multiple URLs to render the same component while maintaining the original URL in the browser.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Resolving a URL (JavaScript)\nDESCRIPTION: Illustrates the signature for `router.resolve`. This method performs reverse URL resolving, taking a location object and returning a resolved URL with location, route, and href properties.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst resolved: {\n  location: Location;\n  route: Route;\n  href: string;\n} = router.resolve(location, current?, append?)\n```\n\n----------------------------------------\n\nTITLE: Simplified Async Component Loading Syntax\nDESCRIPTION: Alternative syntax for lazy loading components using AMD-style require with a more concise approach to asynchronous component resolution.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = resolve => require(['./Foo.vue'], resolve)\n```\n\n----------------------------------------\n\nTITLE: Combining Async Component and Dynamic Import in Vue Router (JavaScript)\nDESCRIPTION: This snippet combines the async component definition with dynamic import to create a component that webpack will automatically code-split.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import('./Foo.vue')\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Scrolling Behavior\nDESCRIPTION: This snippet shows how to implement asynchronous scrolling behavior by returning a Promise that resolves with the desired scroll position after a delay.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/scroll-behavior.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ x: 0, y: 0 })\n    }, 500)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Transition with Vue Router\nDESCRIPTION: This snippet demonstrates how to apply a basic transition effect to a router-view component using the <transition> wrapper.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/transitions.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<transition>\n  <router-view></router-view>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Setting up a Catch-all Route for 404 Pages in Vue Router\nDESCRIPTION: This code shows how to implement a catch-all route in Vue Router to handle 404 errors within your SPA. It will display a NotFoundComponent for any routes that don't match defined routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '*', component: NotFoundComponent }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Configuration\nDESCRIPTION: Caddy server configuration for HTML5 history mode routing\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\nrewrite {\n    regexp .*\n    to {path} /\n}\n```\n\n----------------------------------------\n\nTITLE: Router Link with Append Prop (HTML)\nDESCRIPTION: This snippet shows how to utilize the 'append' prop in the <router-link> component, enabling the link to append the relative path to the current path.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/router-link.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ path: 'relative/path'}\" append></router-link>\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Router with npm\nDESCRIPTION: Provides the command to install Vue Router using npm, a package manager for JavaScript. This requires npm to be installed on the system. Once installed, Vue Router can be utilized in projects using module systems.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-router\n```\n\n----------------------------------------\n\nTITLE: Router Link with Custom Tag\nDESCRIPTION: Demonstrates rendering router link as a different HTML tag while maintaining navigation behavior\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"/foo\" tag=\"li\">foo</router-link>\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Empty Path Subroute\nDESCRIPTION: This snippet demonstrates how to render a component when the parent route is matched exactly, without any of the defined children being active. An empty path ('') within the `children` array achieves this, linking the `UserHome` component to the `/user/:id` route when no sub-route is matched.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"const router = new VueRouter({\\n  routes: [\\n    {\\n      path: '/user/:id',\\n      component: User,\\n      children: [\\n        // UserHome will be rendered inside User's <router-view>\\n        // when /user/:id is matched\\n        { path: '', component: UserHome }\\n\\n        // ...other sub routes\\n      ]\\n    }\\n  ]\\n})\"\n```\n\n----------------------------------------\n\nTITLE: Router Link with Replace Prop (HTML)\nDESCRIPTION: This snippet illustrates the use of the 'replace' prop in the <router-link> component which configures the link to use 'router.replace()' instead of 'router.push()', preventing history from storing the navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/router-link.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ path: '/abc'}\" replace></router-link>\n```\n\n----------------------------------------\n\nTITLE: Using Function Mode for Dynamic Props in Vue Router (JavaScript)\nDESCRIPTION: This snippet demonstrates the function mode for props in Vue Router. It allows for dynamic prop values based on the route, such as transforming query parameters into component props.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/search',\n      component: SearchUser,\n      props: route => ({ query: route.query.q })\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration for History Mode\nDESCRIPTION: Firebase hosting configuration in firebase.json that rewrites all requests to index.html, supporting Vue Router's history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exact Route Matching Router Link\nDESCRIPTION: Shows how to use the 'exact' property to match routes precisely\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Exact route link matching -->\n<router-link to=\"/\" exact>Home</router-link>\n```\n\n----------------------------------------\n\nTITLE: Using router.go() for History Navigation in Vue Router\nDESCRIPTION: Examples of using router.go() method to navigate forward and backward in the history stack, similar to window.history.go(), with various step values.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// go forward by one record, the same as history.forward()\nrouter.go(1)\n\n// go back by one record, the same as history.back()\nrouter.go(-1)\n\n// go forward by 3 records\nrouter.go(3)\n\n// fails silently if there aren't that many records.\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Apache Server Configuration for History Mode\nDESCRIPTION: Configures Apache server with mod_rewrite to handle SPA routing with HTML5 History mode by redirecting all non-file requests to index.html.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_negotiation.c>\n  Options -MultiViews\n</IfModule>\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Defining Route Configuration Type in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type for route configuration (RouteConfig) used by Vue Router. It includes properties like path, components, redirection, and hooks for navigation controls. It allows developers to specify and enforce structure in route definitions.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare type RouteConfig = {\n    path: string;\n    component?: Component;\n    name?: string; // pour les routes nommées\n    components?: { [name: string]: Component }; // pour les vues nommées\n    redirect?: string | Location | Function;\n    props?: boolean | string | Function;\n    alias?: string | Array<string>;\n    children?: Array<RouteConfig>; // pour les routes imbriquées\n    beforeEnter?: (to: Route, from: Route, next: Function) => void;\n    meta?: any;\n\n    // 2.6.0+\n    caseSensitive?: boolean; // use case sensitive match? (default: false)\n    pathToRegexpOptions?: Object; // path-to-regexp options for compiling regex\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Browser Navigation Scroll Position in Vue Router\nDESCRIPTION: A scrollBehavior implementation that maintains scroll position when using browser back/forward buttons, but scrolls to top for new navigation. Uses the savedPosition parameter to detect browser navigation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Object in Scroll Behavior - Vue Router (JavaScript)\nDESCRIPTION: This snippet shows how to access the route object as the first and second arguments (`to` and `from`) within the `scrollBehavior` function in Vue Router. The `to` and `from` route objects provide information about the target and current routes, which can be used to customize scrolling behavior.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/api/route-object.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = new VueRouter({\n  scrollBehavior (to, from, savedPosition) {\n    // `to` と `from` は両方ともルートオブジェクト\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Text String Router Link in HTML\nDESCRIPTION: Demonstrates creating a simple router link with a text string destination\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"home\">Home</router-link>\n```\n\n----------------------------------------\n\nTITLE: Navigating History with router.go in Vue Router\nDESCRIPTION: Shows how to use router.go to navigate through the history stack by specifying the number of entries to move forward or backward.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// avancer d'une entrée, identique à `history.forward()`\nrouter.go(1)\n\n// retourner d'une entrée en arrière, identique à `history.back()`\nrouter.go(-1)\n\n// avancer de trois entrées\nrouter.go(3)\n\n// échoue silencieusement s'il n'y a pas assez d'entrées.\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: IIS Web.config for History Mode\nDESCRIPTION: Configures Microsoft IIS server with URL Rewrite module to support Vue Router's history mode by redirecting all non-file requests to the root.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with scrollBehavior\nDESCRIPTION: This code snippet demonstrates how to initialize a Vue Router instance with a custom `scrollBehavior` function. The `scrollBehavior` function allows you to control the scroll position when navigating between routes. The function receives `to`, `from`, and `savedPosition` parameters which provide route and scroll position information.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // 望みのポジションを返す\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router Static Redirection\nDESCRIPTION: This snippet configures a static redirect in Vue Router, redirecting requests from the `/a` path to the `/b` path. When a user visits `/a`, they will be redirected to `/b` and the URL in the browser's address bar will change to `/b`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Routing Redirection with Function\nDESCRIPTION: Demonstrates dynamic redirection using a function that receives the target route and can programmatically determine the redirect destination.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // la función recibe la ruta destino como argumento\n      // retorna aquí la ruta de redirección.\n    }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: router-link Tag Prop\nDESCRIPTION: This snippet demonstrates the usage of the `tag` prop to render the `<router-link>` as a different HTML element. This allows rendering as a `<li>` element instead of the default `<a>` element.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"/foo\" tag=\"li\">foo</router-link>\n<!-- gerendert als -->\n<li>foo</li>\n```\n\n----------------------------------------\n\nTITLE: Replacing Current Route with router.replace in Vue Router\nDESCRIPTION: Demonstrates the use of router.replace to navigate without adding a new entry to the history stack. It works similarly to router.push, but replaces the current entry instead.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Déclarative | Programmatique\n// `<router-link :to=\"...\" replace>` | `router.replace(...)`\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Configuration for History Mode\nDESCRIPTION: Simple Caddy server configuration that rewrites all URLs to the index for supporting Vue Router's history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nrewrite {\n    regexp .*\n    to {path} /\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Before Navigation in Vue Router with Route Guards\nDESCRIPTION: JavaScript implementation for fetching data before navigation using Vue Router navigation guards. Uses beforeRouteEnter and beforeRouteUpdate hooks to ensure data is loaded before the component is displayed or updated.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  data () {\n    return {\n      post: null,\n      error: null\n    }\n  },\n  beforeRouteEnter (to, from, next) {\n    getPost(to.params.id, (err, post) => {\n      next(vm => vm.setData(err, post))\n    })\n  },\n  // cuando la ruta cambie y este componente ya haya sido renderizado,\n  // la lógica será ligeramente diferente\n  beforeRouteUpdate (to, from, next) {\n    this.post = null\n    getPost(to.params.id, (err, post) => {\n      this.setData(err, post)\n      next()\n    })\n  },\n  methods: {\n    setData (err, post) {\n      if (err) {\n        this.error = err.toString()\n      } else {\n        this.post = post\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with scrollBehavior\nDESCRIPTION: This code snippet demonstrates how to initialize a Vue Router instance with a custom `scrollBehavior` function. The `scrollBehavior` function allows you to control the scrolling behavior during route navigation. It receives the `to` and `from` route objects, as well as the `savedPosition` if available.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // devolver la posición deseada\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple URL Redirect in Vue Router\nDESCRIPTION: Demonstrates how to redirect from one route path to another using Vue Router configuration. Redirects can be a simple string path or a more complex configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Coupling Route with $route (Tightly Coupled)\nDESCRIPTION: Shows how components directly access route parameters using $route, creating tight coupling between component and route\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Vue Application\nDESCRIPTION: This snippet specifies the base URL for the application, which is essential for routing. It's crucial when deploying applications in subdirectories to ensure correct path resolution.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype : `string`\n\n- défaut : \"/\"\n```\n\n----------------------------------------\n\nTITLE: Getting Matched Components (JavaScript)\nDESCRIPTION: Demonstrates the signature for `router.getMatchedComponents`. This method returns an array of components matched by a given location or the current route. It's commonly used during server-side rendering for data prefetching.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst matchedComponents: Array<Component> = router.getMatchedComponents(location?)\n```\n\n----------------------------------------\n\nTITLE: IIS web.config for History Mode\nDESCRIPTION: This web.config file configures IIS to rewrite all requests that do not correspond to existing files or directories to the root URL ('/'). This ensures that the Vue application's index.html file is served, allowing client-side routing with history mode. IIS UrlRewrite module must be installed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Scroll Behavior\nDESCRIPTION: Implementation of native smooth scrolling for supported browsers using the behavior option.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash,\n      behavior: 'smooth',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with scrollBehavior Function\nDESCRIPTION: This snippet shows how to create a new VueRouter instance with a scrollBehavior function. The function receives 'to' and 'from' route objects, and a 'savedPosition' parameter for browser history.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // здесь нужно вернуть требуемую позицию скролла\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Active Class Application Example in Vue Router\nDESCRIPTION: Shows how to apply active classes to outer elements using router-link's v-slot properties.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<router-link\n  to=\"/foo\"\n  v-slot=\"{ href, route, navigate, isActive, isExactActive }\"\n  custom\n>\n  <li\n    :class=\"[isActive && 'router-link-active', isExactActive && 'router-link-exact-active']\"\n  >\n    <a :href=\"href\" @click=\"navigate\">{{ route.fullPath }}</a>\n  </li>\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Coupling Component with $route in Vue Router (JavaScript)\nDESCRIPTION: This snippet shows how a component is tightly coupled to its route using $route.params. This approach limits the component's reusability.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [{ path: '/user/:id', component: User }]\n})\n```\n\n----------------------------------------\n\nTITLE: scrollBehavior Function Signature in Vue Router\nDESCRIPTION: Defines the signature for the scrollBehavior function which can be used to control scroll position when navigating between routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/options.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(\n  to: Route,\n  from: Route,\n  savedPosition?: { x: number, y: number }\n) => { x: number, y: number } | { selector: string } | ?{}\n```\n\n----------------------------------------\n\nTITLE: Using Object Mode with props in Vue Router\nDESCRIPTION: Example demonstrating object mode for the props option, where static props are passed directly to the component. Useful for providing default or static values.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/promotion/from-newsletter',\n      component: Promotion,\n      props: { newsletterPopup: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top on Route Navigation\nDESCRIPTION: This example demonstrates setting the page scroll to the top (x: 0, y: 0) on every route navigation. The `scrollBehavior` function returns an object specifying the desired scroll position, in this case, the top of the page.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Native Server Implementation\nDESCRIPTION: Basic Node.js server implementation to handle HTML5 history mode routing\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp\n  .createServer((req, res) => {\n    fs.readFile('index.html', 'utf-8', (err, content) => {\n      if (err) {\n        console.log(`Impossible d'ouvrir le fichier \\\"index.html\\\"')\n      }\n\n      res.writeHead(200, {\n        'Content-Type': 'text/html; charset=utf-8'\n      })\n\n      res.end(content)\n    })\n  })\n  .listen(httpPort, () => {\n    console.log('Le serveur écoute à : http://localhost:%s', httpPort)\n  })\n```\n\n----------------------------------------\n\nTITLE: Static Prop Object in Vue Router Configuration\nDESCRIPTION: This example shows how to pass static props to a component using an object in the Vue Router configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/promotion/from-newsletter', component: Promotion, props: { newsletterPopup: false } }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Route Object Usage in Scroll Behavior (JavaScript)\nDESCRIPTION: Demonstrates how route objects are passed as arguments to the `scrollBehavior` function. The `to` and `from` parameters are route objects representing the target and current routes, respectively.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n    scrollBehavior(to, from, savedPosition) {\n      // `to` and `from` are both route objects\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Including Vue Router via CDN in HTML\nDESCRIPTION: Demonstrates how to include Vue and Vue Router using script tags in an HTML file for direct integration. No additional dependencies required. The Vue Router script should be placed after including the core Vue.js script. This approach supports automatic installation and usage.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/vue.js\"></script>\n<script src=\"/path/to/vue-router.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration for History Mode\nDESCRIPTION: This JSON snippet configures Firebase Hosting to handle Vue Router's history mode. It rewrites all requests to the `index.html` file in the `dist` directory, allowing the Vue application to handle the routing.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for History Mode\nDESCRIPTION: This Nginx configuration snippet uses the try_files directive to check for the existence of a file or directory matching the requested URI. If neither is found, it serves the index.html file, enabling client-side routing for Vue Router's history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: Nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for History Mode\nDESCRIPTION: Nginx server configuration to handle HTML5 history mode routing\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Decoupling Route Using Props\nDESCRIPTION: Demonstrates how to use props to separate route parameters from component implementation, improving component reusability\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  props: ['id'],\n  template: '<div>User {{ id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User, props: true },\n    {\n      path: '/user/:id',\n      components: { default: User, sidebar: Sidebar },\n      props: { default: true, sidebar: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: beforeRouteEnter with Callback Access\nDESCRIPTION: Shows how to access component instance in beforeRouteEnter guard using next callback.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeRouteEnter (to, from, next) {\n  next(vm => {\n    // access to component instance via `vm`\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Router On Ready Callback (JavaScript)\nDESCRIPTION: Demonstrates the signature for `router.onReady`. This method queues a callback to be executed when the router has completed its initial navigation. An optional error callback can be provided to handle errors during initial route resolution.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.onReady(callback, [errorCallback])\n```\n\n----------------------------------------\n\nTITLE: Vue Router 404 Handler Configuration\nDESCRIPTION: Configuration to handle 404 errors in Vue Router when using history mode\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [{ path: '*', component: NotFoundComponent }]\n})\n```\n\n----------------------------------------\n\nTITLE: Caddy v2 Configuration for History Mode\nDESCRIPTION: This Caddy v2 configuration uses the `try_files` directive to serve static files or fall back to the index file for single-page applications using history mode. It attempts to serve the requested path and if not found defaults to the root.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: Caddy\nCODE:\n```\ntry_files {path} /\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters Using $route in Vue Router\nDESCRIPTION: Example of a component tightly coupled to the route by accessing parameters via the $route object. This approach limits component reusability.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [{ path: '/user/:id', component: User }]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Router Link with to Prop (HTML)\nDESCRIPTION: This snippet demonstrates how to use the 'to' prop in the <router-link> component to define a target route. It showcases various usage scenarios, including literal strings and JavaScript expressions for routing.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/router-link.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"home\">Accueil</router-link>\n<!-- rend -->\n<a href=\"home\">Accueil</a>\n\n<!-- expression JavaScript en utilisant `v-bind` -->\n<router-link v-bind:to=\"'home'\">Accueil</router-link>\n\n<!-- Omettre `v-bind` est OK, tout comme une autre prop -->\n<router-link :to=\"'home'\">Accueil</router-link>\n\n<!-- pareil qu'au-dessus -->\n<router-link :to=\"{ path: 'home' }\">Accueil</router-link>\n\n<!-- route nommée -->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">Utilisateur</router-link>\n\n<!-- avec une requête, résulte en `/register?plan=private` -->\n<router-link :to=\"{ path: 'register', query: { plan: 'private' }}\">S'enregistrer</router-link>\n```\n\n----------------------------------------\n\nTITLE: Grouping Components with Named Chunks\nDESCRIPTION: Groups multiple components into the same async chunk using webpack's named chunks feature. This improves loading performance when multiple components are frequently accessed together.  Requires webpack version > 2.4.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n```\n\n----------------------------------------\n\nTITLE: Apache Server Configuration for History Mode\nDESCRIPTION: Apache server configuration using mod_rewrite to handle HTML5 history mode routing\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_negotiation.c>\n  Options -MultiViews\n</IfModule>\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Native Node.js Server Implementation for History Mode\nDESCRIPTION: Creates a basic Node.js HTTP server that serves the index.html file for all requests, enabling client-side routing with Vue Router's history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp\n  .createServer((req, res) => {\n    fs.readFile('index.html', 'utf-8', (err, content) => {\n      if (err) {\n        console.log('We cannot open \"index.html\" file.')\n      }\n\n      res.writeHead(200, {\n        'Content-Type': 'text/html; charset=utf-8'\n      })\n\n      res.end(content)\n    })\n  })\n  .listen(httpPort, () => {\n    console.log('Server listening on: http://localhost:%s', httpPort)\n  })\n```\n\n----------------------------------------\n\nTITLE: Native Node.js Server for History Mode\nDESCRIPTION: This Node.js snippet creates a basic HTTP server that serves the `index.htm` file for all requests.  This ensures that the Vue application handles the routing.  It uses the `http` and `fs` modules.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp.createServer((req, res) => {\n  fs.readFile('index.htm', 'utf-8', (err, content) => {\n    if (err) {\n      console.log('We cannot open \"index.htm\" file.')\n    }\n\n    res.writeHead(200, {\n      'Content-Type': 'text/html; charset=utf-8'\n    })\n\n    res.end(content)\n  })\n}).listen(httpPort, () => {\n  console.log('Server listening on: http://localhost:%s', httpPort)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Top Scroll Behavior\nDESCRIPTION: Simple implementation that scrolls to top (0,0) for all route navigations.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Anchors\nDESCRIPTION: This code snippet shows how to scroll to an anchor on the page based on the `to.hash` value. It returns an object with a `selector` property set to the hash value.  This allows the user to navigate directly to a specific section of the page using anchor links.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n      // , offset: { x: 0, y: 10 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Components into a Single Chunk using Named Webpack Chunks\nDESCRIPTION: Shows how to group multiple components into the same async chunk using webpack's named chunks feature. This technique requires webpack > 2.4 and uses special comment syntax to name the chunks.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/lazy-loading.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n```\n\n----------------------------------------\n\nTITLE: Applying Transition to Router View with HTML\nDESCRIPTION: This snippet demonstrates how to wrap the `<router-view>` component with a `<transition>` component to apply a default transition effect to all routes. The `<transition>` component is a built-in Vue component for handling transitions and animations.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<transition>\n  <router-view></router-view>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Adding Vue Router using Vue CLI\nDESCRIPTION: Explains how to add Vue Router to an existing Vue CLI project using the vue add command. This approach creates starter code and examples, but may overwrite important files like App.vue. Users should backup any necessary files before running the command.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvue add router\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Scroll-to-Top Behavior\nDESCRIPTION: This example demonstrates how to make the browser scroll to the top of the page for each route navigation by returning fixed coordinates.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Component Template with Loading States in Vue\nDESCRIPTION: HTML template for a Post component that handles different states: loading, error, and displaying post content. It uses v-if directives to conditionally render appropriate elements based on the component's data state.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div class=\"loading\" v-if=\"loading\">\n      Loading...\n    </div>\n\n    <div v-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Static Props Object Mode\nDESCRIPTION: Shows how to pass static props to a route component using an object configuration\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/promotion/from-newsletter', component: Promotion, props: { newsletterPopup: false } }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import in Webpack 2\nDESCRIPTION: Shows how to use dynamic import syntax in webpack 2 to indicate code splitting points for components.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./Foo.vue') // returns a Promise\n```\n\n----------------------------------------\n\nTITLE: Building the Latest Dev Version of Vue Router\nDESCRIPTION: Instructions for downloading and building the latest development version of Vue Router directly from the GitHub repository. Requires Git and npm to clone the repository, install dependencies, and build the project manually.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/vuejs/vue-router.git node_modules/vue-router\ncd node_modules/vue-router\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Anchor with to.hash\nDESCRIPTION: This example shows how to scroll to a specific anchor (hash) on the page when navigating to a route with a hash. It uses the `to.hash` to select the element to scroll to, simulating an \"anchor scroll\" behavior.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/kr/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (to.hash) {\n    return {\n      selector: to.hash\n      // , offset: { x: 0, y: 10 }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Alias in Vue Router\nDESCRIPTION: This example demonstrates how to set up an alias for a route in Vue Router. The '/a' path is aliased to '/b', meaning both URLs will render the same component but keep their respective URLs.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route-Based Transitions with HTML\nDESCRIPTION: This snippet demonstrates how to dynamically set the transition name based on route changes. The `transitionName` property is bound to the `name` attribute of the `<transition>` component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- 使用动态的 transition name -->\n<transition :name=\"transitionName\">\n  <router-view></router-view>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import for Code Splitting in Vue Router (JavaScript)\nDESCRIPTION: This example shows how to use webpack 2's dynamic import syntax to indicate a code split point when importing a component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./Foo.vue') // returns a Promise\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Scrolling with Vue Router\nDESCRIPTION: This snippet shows how to perform asynchronous scrolling using a Promise. The `scrollBehavior` function returns a Promise that resolves with the desired scroll position after a delay. This allows for smoother transitions and synchronization with page transitions.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/scroll-behavior.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({ x: 0, y: 0 })\n    }, 500)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Использование $route в компоненте маршрута Vue\nDESCRIPTION: Пример жесткой связи компонента с маршрутом через $route.params. Этот подход ограничивает гибкость компонента.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>Пользователь {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Component with Promise in Vue\nDESCRIPTION: Demonstrates how to define an asynchronous component that returns a Promise which resolves to the component definition.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => Promise.resolve({ /* component definition */ })\n```\n\n----------------------------------------\n\nTITLE: Vue Router Route Alias Configuration\nDESCRIPTION: This snippet configures an alias for the `/a` route, mapping it to the `/b` path. When a user visits `/b`, the URL remains `/b`, but the component associated with `/a` (component A in this example) will be rendered.  This provides a way to access the same content from multiple URLs without redirection.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', component: A, alias: '/b' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Node.js HTTP Server for History Mode\nDESCRIPTION: This Node.js code creates a simple HTTP server that serves the index.html file for all requests. It reads the file from the file system and sends it as the response. This is a basic example and may need to be adapted for more complex applications.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp.createServer((req, res) => {\n  fs.readFile('index.html', 'utf-8', (err, content) => {\n    if (err) {\n      console.log('We cannot open \"index.html\" file.')\n    }\n\n    res.writeHead(200, {\n      'Content-Type': 'text/html; charset=utf-8'\n    })\n\n    res.end(content)\n  })\n}).listen(httpPort, () => {\n  console.log('Server listening on: http://localhost:%s', httpPort)\n})\n```\n\n----------------------------------------\n\nTITLE: Named Route and Parameterized Router Link\nDESCRIPTION: Demonstrates creating router links with named routes and dynamic parameters\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Named route with parameters -->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n\n<!-- Route with query parameters -->\n<router-link :to=\"{ path: 'register', query: { plan: 'private' }}\">Register</router-link>\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top on Route Navigation\nDESCRIPTION: This example shows how to configure `scrollBehavior` to scroll to the top of the page (x: 0, y: 0) on every route navigation. This effectively resets the scroll position whenever a new route is visited.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/kr/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  return { x: 0, y: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Including SUMMARY.md\nDESCRIPTION: This snippet includes the content of the `SUMMARY.md` file within the current document. The `include` directive is likely specific to the documentation generation tool being used (e.g., Gitbook or similar). The included file presumably contains the table of contents for the Vue Router documentation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"./SUMMARY.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Vue Router Dynamic Redirection\nDESCRIPTION: This snippet demonstrates a dynamic redirect using a function in Vue Router. The function receives the target route as an argument and returns the path or location to redirect to. This allows for conditional redirects based on the current route or other application state.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: to => {\n      // この function は対象のルートを引数として受け取ります\n      // ここではリダイレクト先の path もしくは location を返します\n    }} ]\n})\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for History Mode\nDESCRIPTION: Sets up Nginx server to handle SPA routing with HTML5 History mode by trying the requested URI first, then falling back to index.html.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Active Class to Wrapper Element\nDESCRIPTION: Demonstrates applying active class to a wrapper element instead of the anchor tag\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<router-link tag=\"li\" to=\"/foo\">\n  <a>/foo</a>\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Using Object Mode for Static Props in Vue Router (JavaScript)\nDESCRIPTION: This example shows how to use the object mode to set static props for a component in Vue Router. This is useful when you want to pass fixed values to a component.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/promotion/from-newsletter',\n      component: Promotion,\n      props: { newsletterPopup: false }\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Router Resolve Method Usage\nDESCRIPTION: Demonstrates the usage of the `router.resolve` method in Vue Router for reverse URL resolution.  It takes a location object and returns an object containing the resolved location, route, and href. The `current` and `append` options are available to modify the route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/kr/api/router-instance.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  location: Location;\n  route: Route;\n  href: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration\nDESCRIPTION: Firebase hosting configuration in firebase.json for HTML5 history mode\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: router-link Exact Prop\nDESCRIPTION: This snippet demonstrates the usage of the `exact` prop. When set to true, the link is only considered active when the current path matches the `to` prop exactly.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- dieser Link wird nur bei '/' aktiv -->\n<router-link to=\"/\" exact>\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for History Mode\nDESCRIPTION: This Apache configuration snippet enables URL rewriting to handle Vue Router's history mode.  It ensures that any request that doesn't match a file or directory is redirected to the `index.html` file, allowing the Vue application to handle the routing. It requires the `mod_rewrite` module to be enabled.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll Behavior Handler in Vue Router\nDESCRIPTION: This code snippet defines the `scrollBehaviorHandler` type, a function that controls the scroll position when navigating between routes in a Vue Router instance. The function takes `to`, `from` (both Route objects), and an optional `savedPosition` as arguments and returns a `PositionDescriptor` or a Promise that resolves to one.  The handler allows developers to customize the scrolling behavior of their application.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/api/options.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  type PositionDescriptor =\n    { x: number, y: number } |\n    { selector: string } |\n    ?{}\n\n  type scrollBehaviorHandler = (\n    to: Route,\n    from: Route,\n    savedPosition?: { x: number, y: number }\n  ) => PositionDescriptor | Promise<PositionDescriptor>\n```\n\n----------------------------------------\n\nTITLE: Caddy Configuration for History Mode\nDESCRIPTION: This Caddy configuration snippet uses a rewrite rule to handle Vue Router's history mode.  It rewrites all requests to the root path, allowing the Vue application to handle the routing.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: Caddy\nCODE:\n```\nrewrite {\n    regexp .*\n    to {path} /\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollBehavior Function Signature in Vue Router\nDESCRIPTION: Function signature for the scrollBehavior option in Vue Router. This function controls how the page scrolling behaves after navigation events, allowing for customized scroll positioning.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/options.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(\n  to: Route,\n  from: Route,\n  savedPosition?: { x: number, y: number }\n) => { x: number, y: number } | { selector: string } | ?{}\n```\n\n----------------------------------------\n\nTITLE: router-link Query Parameters\nDESCRIPTION: This snippet demonstrates how to use query parameters with the `to` prop. It shows how to add query parameters to the URL.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- mit Query, resultiert in /register?plan=private -->\n<router-link :to=\"{ path: 'register', query: { plan: 'private' }}\">Register</router-link>\n```\n\n----------------------------------------\n\nTITLE: RouteConfig Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for route configuration options in Vue Router.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RouteConfig = {\n  path: string,\n  component?: Component,\n  name?: string, // for named routes\n  components?: { [name: string]: Component }, // for named views\n  redirect?: string | Location | Function,\n  props?: boolean | Object | Function,\n  alias?: string | Array<string>,\n  children?: Array<RouteConfig>, // for nested routes\n  beforeEnter?: (to: Route, from: Route, next: Function) => void,\n  meta?: any,\n\n  // 2.6.0+\n  caseSensitive?: boolean, // use case sensitive match? (default: false)\n  pathToRegexpOptions?: Object // path-to-regexp options for compiling regex\n}\n```\n\n----------------------------------------\n\nTITLE: Caddy v1 Configuration for History Mode\nDESCRIPTION: This Caddy v1 configuration rewrites all requests to the requested path or the root, allowing the Vue application to handle routing on the client-side using history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/history-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: Caddy\nCODE:\n```\nrewrite {\n    regexp .*\n    to {path} /\n}\n```\n\n----------------------------------------\n\nTITLE: RouteConfig Type Declaration in Vue Router\nDESCRIPTION: Defines the type structure for route configuration objects in Vue Router, including properties for path, component, name, redirect, children routes and more.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/options.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndeclare type RouteConfig = {\n  path: string;\n  component?: Component;\n  name?: string; // für benannte Routes\n  components?: { [name: string]: Component }; // für benannte Views\n  redirect?: string | Location | Function;\n  alias?: string | Array<string>;\n  children?: Array<RouteConfig>; // für Verschachtelte Routes\n  beforeEnter?: (to: Route, from: Route, next: Function) => void;\n  meta?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Router Link with Replace Navigation\nDESCRIPTION: Shows how to use the 'replace' property to navigate without adding to browser history\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ path: '/abc'}\" replace></router-link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Router View with Transition and Keep-Alive in Vue\nDESCRIPTION: This snippet demonstrates how to use the <router-view> component in combination with <transition> and <keep-alive>. It's important to note that <keep-alive> should be placed inside <transition> for proper functionality.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-view.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<transition>\n  <keep-alive>\n    <router-view></router-view>\n  </keep-alive>\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands for Vue Router\nDESCRIPTION: Series of commands for setting up the Vue Router development environment, including installing dependencies, building distribution files, running examples, tests and documentation server.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install deps\nyarn\n\n# build dist files\nyarn build\n\n# serve examples at localhost:8080\nyarn dev\n\n# lint & run all tests\nyarn test\n\n# serve docs at localhost:8080\nyarn docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Exact Active Class for Router Links\nDESCRIPTION: This option allows setting a global active class name specifically for exact route matches in router links. This is useful for applying distinct styles for precisely matched routes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n> 2.5.0+\n\n- type : `string`\n\n- default : \"router-link-exact-active\"\n```\n\n----------------------------------------\n\nTITLE: router-link JavaScript Expression\nDESCRIPTION: This snippet demonstrates how to use a JavaScript expression with the `v-bind` directive for the `to` prop. It shows equivalent ways of binding the `to` prop to a string value, including shorthand notation.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- JavaScript-Expression mit v-bind -->\n<router-link v-bind:to=\"'home'\">Home</router-link>\n\n<!-- Auslassen von v-bind ist okay wie bei jedem anderen Prop -->\n<router-link :to=\"'home'\">Home</router-link>\n```\n\n----------------------------------------\n\nTITLE: router-link Path Object\nDESCRIPTION: This snippet demonstrates how to use an object with the `path` property with the `to` prop.  This allows specifying the target route as a JavaScript object, providing more flexibility.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- entspricht dem obigen Link -->\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n```\n\n----------------------------------------\n\nTITLE: router-link Active Class on Outer Element\nDESCRIPTION: This snippet demonstrates how to apply the active class to an outer element instead of the `<a>` tag. The outer element is rendered as a `<router-link>` using the `tag` prop and encapsulates the `<a>` tag.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<router-link tag=\"li\" to=\"/foo\">\n  <a>/foo</a>\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback for Hash Mode in Vue Router\nDESCRIPTION: This boolean option determines the fallback behavior of the router when the browser does not support 'history.pushState'. It can be set to false to revert back to requiring page reloads for navigation in older browsers.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/options.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n> 2.6.0+\n\n- type : `boolean`\n```\n\n----------------------------------------\n\nTITLE: router-link Append Prop\nDESCRIPTION: This snippet demonstrates the usage of the `append` prop.  When set to true, it appends the relative path to the current path. If navigating from `/a` to `b`, it results in `/a/b` instead of `/b`.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ path: 'relative/path'}\" append></router-link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Class for Router Link (HTML)\nDESCRIPTION: This snippet provides an example of how to configure the 'active-class' prop in the <router-link> component to customize the CSS class that is applied when the link is active.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/router-link.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"/\" exact>\n\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import Syntax for Code Splitting in Vue Router\nDESCRIPTION: Demonstrates the webpack 2 dynamic import syntax that returns a Promise and creates a code split point. This is a key part of implementing lazy loading.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./Foo.vue') // returns a Promise\n```\n\n----------------------------------------\n\nTITLE: Vue Router Catch-All Route for 404 Handling (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement a catch-all route in Vue Router to handle 404 errors within the application. It defines a route with the path `'*'` that renders the `NotFoundComponent` when no other routes match. It requires a `NotFoundComponent` to be defined.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    { path: '*', component: NotFoundComponent }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: router-link Replace Prop\nDESCRIPTION: This snippet demonstrates the usage of the `replace` prop. When set to `true`, it uses `router.replace()` instead of `router.push()`, preventing a history entry.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<router-link :to=\"{ path: '/abc'}\" replace></router-link>\n```\n\n----------------------------------------\n\nTITLE: Custom Tag for Router Link (HTML)\nDESCRIPTION: This snippet demonstrates how to alter the rendered HTML tag for the <router-link> component using the 'tag' prop, allowing it to render as a different element (e.g., <li>) while retaining click event behavior.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/api/router-link.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"/foo\" tag=\"li\">foo</router-link>\n<!-- rend -->\n<li>foo</li>\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a Named Route in Vue Router\nDESCRIPTION: This snippet shows how to redirect to a named route instead of a path.  This provides a more maintainable way to handle redirects if the target path changes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/a', redirect: { name: 'foo' }}\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Server for Vue Router History Mode\nDESCRIPTION: This Apache configuration uses mod_rewrite to redirect all requests to index.html, except for existing files and directories. This is necessary for SPA routing with history mode.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Redirect in Vue Router (JavaScript)\nDESCRIPTION: Demonstrates how to set up a simple redirect from '/a' to '/b' in the Vue Router configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [{ path: '/a', redirect: '/b' }]\n})\n```\n\n----------------------------------------\n\nTITLE: Router On Error Callback (JavaScript)\nDESCRIPTION: Illustrates the signature for `router.onError`. This method registers a callback to be called when an error occurs during a route navigation, such as errors thrown in route guards or when resolving async components.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/api/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.onError(callback)\n```\n\n----------------------------------------\n\nTITLE: Combining Async Components with Dynamic Imports in Vue Router\nDESCRIPTION: Shows how to combine the async component pattern with dynamic imports to create webpack-optimized code splitting. This is the recommended approach for lazy loading in Vue Router.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/fr/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import('./Foo.vue')\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server for Vue Router History Mode\nDESCRIPTION: This nginx configuration uses try_files directive to serve index.html when requested resources don't exist. This supports history mode navigation in Vue Router applications.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Hardcoded Route Parameter Usage in Vue Component\nDESCRIPTION: This snippet shows a Vue component that directly accesses route parameters, creating a tight coupling with the route.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User {{ $route.params.id }}</div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: IIS web.config Configuration for History Mode (XML)\nDESCRIPTION: This XML snippet configures IIS to handle Vue Router's history mode using URL rewriting. It checks if the requested URL is not a file or directory and then rewrites the request to the root, allowing the Vue application to handle the routing. It requires the IIS Url Rewrite module to be installed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/history-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Rendering Post Component with Loading States in Vue.js\nDESCRIPTION: This snippet shows the template for a Vue.js component that displays a blog post. It includes states for loading, error, and successful data fetch.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div class=\"loading\" v-if=\"loading\">\n      Lade..\n    </div>\n\n    <div v-if=\"error\" class=\"error\">\n      {{ error }}\n    </div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: IIS Web.config Configuration\nDESCRIPTION: IIS web.config configuration for handling HTML5 history mode routing\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/history-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\\\"Handle History Mode and custom 404/500\\\" stopProcessing=\\\"true\\\">\n          <match url=\\\"(.*)\\\" />\n          <conditions logicalGrouping=\\\"MatchAll\\\">\n            <add input=\\\"{REQUEST_FILENAME}\\\" matchType=\\\"IsFile\\\" negate=\\\"true\\\" />\n            <add input=\\\"{REQUEST_FILENAME}\\\" matchType=\\\"IsDirectory\\\" negate=\\\"true\\\" />\n          </conditions>\n          <action type=\\\"Rewrite\\\" url=\\\"/\\\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Использование функции props в маршруте Vue Router\nDESCRIPTION: Пример использования функции для генерации объекта props. Это позволяет преобразовывать параметры, комбинировать статические значения с значениями из маршрута и выполнять другие операции.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    { path: '/search', component: SearchUser, props: (route) => ({ query: route.query.q }) }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Components in the Same Webpack Chunk with Named Chunks\nDESCRIPTION: Demonstrates how to use webpack's named chunks feature to group multiple components into the same async chunk. Requires webpack > 2.4.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Router Composables from Vue 2.7 Compatibility Module\nDESCRIPTION: This code snippet demonstrates how to import the Vue Router 4 composables in Vue Router 3.6.0, which requires Vue 2.7. The composables include useRoute, useRouter, useLink, and navigation guards.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useRoute, useRouter, useLink, onBeforeRouteUpdate, onBeforeRouteLeave } from 'vue-router/composables'\n```\n\n----------------------------------------\n\nTITLE: router-link Literal String\nDESCRIPTION: This snippet demonstrates how to use a literal string with the `to` prop to define the target route. The `router-link` component will render as an `<a>` tag with the specified `href` attribute.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-link to=\"home\">Home</router-link>\n<!-- gerendert zu -->\n<a href=\"home\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Configuración HTML para Vue Router\nDESCRIPTION: Configuración inicial del HTML con scripts de Vue y Vue Router, definiendo un contenedor de aplicación con componentes de navegación\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/essentials/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\\u003cscript src=\"https://unpkg.com/vue/dist/vue.js\"\\u003e\\u003c/script\\u003e\\n\\u003cscript src=\"https://unpkg.com/vue-router/dist/vue-router.js\"\\u003e\\u003c/script\\u003e\\n\\n\\u003cdiv id=\"app\"\\u003e\\n  \\u003ch1\\u003eHello App!\\u003c/h1\\u003e\\n  \\u003cp\\u003e\\n    \\u003crouter-link to=\"/foo\"\\u003eGo to Foo\\u003c/router-link\\u003e\\n    \\u003crouter-link to=\"/bar\"\\u003eGo to Bar\\u003c/router-link\\u003e\\n  \\u003c/p\\u003e\\n  \\u003crouter-view\\u003e\\u003c/router-view\\u003e\\n\\u003c/div\\u003e\n```\n\n----------------------------------------\n\nTITLE: Использование router.push для навигации в Vue Router\nDESCRIPTION: Демонстрация различных способов использования метода router.push() для программной навигации между маршрутами, включая передачу строки, объекта с path, именованного маршрута с параметрами и строкой запроса.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// строка\nrouter.push('home')\n\n// объект\nrouter.push({ path: 'home' })\n\n// именованный путь\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// со строкой запроса, получится /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Component Logic for After-Navigation Data Fetching in Vue.js\nDESCRIPTION: This snippet demonstrates the component logic for fetching data after navigation, including data properties, lifecycle hooks, and methods for data retrieval.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      loading: false,\n      post: null,\n      error: null\n    }\n  },\n  created() {\n    // view が作られた時にデータを取得し、\n    // そのデータは既に監視されています\n    this.fetchData()\n  },\n  watch: {\n    // ルートが変更されたらこのメソッドを再び呼び出します\n    $route: 'fetchData'\n  },\n  methods: {\n    fetchData() {\n      this.error = this.post = null\n      this.loading = true\n      // `getPost` をあなたのデータ取得用 util や API ラッパーに置き換えてください\n      getPost(this.$route.params.id, (err, post) => {\n        this.loading = false\n        if (err) {\n          this.error = err.toString()\n        } else {\n          this.post = post\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Guard Error Example - Incorrect Implementation\nDESCRIPTION: Demonstrates incorrect implementation of navigation guard where next() is called multiple times, which can cause resolution errors.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== 'Login' && !isAuthenticated) next({ name: 'Login' })\n  // if the user is not authenticated, `next` is called twice\n  next()\n})\n```\n\n----------------------------------------\n\nTITLE: Including SUMMARY.md in Vue Router Documentation\nDESCRIPTION: This code snippet uses a Liquid template include directive to embed the contents of SUMMARY.md into the current document. This approach allows for modular documentation that can be maintained in separate files and composed together.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/kr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"./SUMMARY.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Using beforeRouteUpdate Hook in Vue Component (JavaScript)\nDESCRIPTION: This code shows how to use the beforeRouteUpdate navigation guard to react to route changes. It's an alternative to watching the $route object, introduced in Vue Router 2.2.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/fr/guide/essentials/dynamic-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '...',\n  beforeRouteUpdate (to, from, next) {\n    // réagir au changement de route...\n    // n'oubliez pas d'appeler `next()`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router Documentation Homepage Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the Vue Router documentation homepage, specifying the hero image, action buttons, and footer content.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhome: true\nheroImage: /logo.png\nactionText: Get Started →\nactionLink: /installation.html\nfooter: MIT Licensed | Copyright © 2014-present Evan You, Eduardo San Martin Morote\n---\n```\n\n----------------------------------------\n\nTITLE: Git Commit References\nDESCRIPTION: Collection of git commit references showing changes made to Vue Router codebase including bugfixes and feature additions\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- b952573 - remove undefined values from query\n- d6546d9 - properly check null and undefined in isSameRoute\n- f0d9c2d - cast query values to strings\n- 84398ae - run scrollBehavior on initial load\n- 83920c9 - add missing options property type\n```\n\n----------------------------------------\n\nTITLE: Version Headers\nDESCRIPTION: Version number headers showing the progression of Vue Router releases from 3.1.0 to 3.4.0\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# [3.4.0](https://github.com/vuejs/vue-router/compare/v3.3.4...v3.4.0) (2020-08-05)\n\n## [3.3.4](https://github.com/vuejs/vue-router/compare/v3.3.3...v3.3.4) (2020-06-13)\n\n## [3.3.3](https://github.com/vuejs/vue-router/compare/v3.3.2...v3.3.3) (2020-06-12)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-Navigation Data Fetching in Vue Router\nDESCRIPTION: This JavaScript code shows how to implement data fetching before navigation in a Vue.js component using Vue Router. It uses the beforeRouteEnter guard and a watcher for route changes.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      post: null,\n      error: null\n    }\n  },\n  beforeRouteEnter (to, from, next) {\n    getPost(to.params.id, (err, post) => {\n      if (err) {\n        // Zeige eine globale Fehlermeldung.\n        next(false)\n      } else {\n        next(vm => {\n          vm.post = post\n        })\n      }\n    })\n  },\n  // Wenn die Route geändert und die Komponente bereits gerendert wurde,\n  // ist der Aufbau etwas anders:\n  watch: {\n    $route () {\n      this.post = null\n      getPost(this.$route.params.id, (err, post) => {\n        if (err) {\n          this.error = err.toString()\n        } else {\n          this.post = post\n        }\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Meta Fields in Navigation Guards\nDESCRIPTION: This snippet demonstrates how to check meta fields in a global navigation guard to implement authentication control. It verifies if any matched route requires authentication and redirects to the login page if needed.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // このルートはログインされているかどうか認証が必要です。\n    // もしされていないならば、ログインページにリダイレクトします。\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // next() を常に呼び出すようにしてください!\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Meta Fields in Vue Router Navigation Guards\nDESCRIPTION: Implementation of a global navigation guard that checks meta fields on matched routes. This example demonstrates how to check if any matched route requires authentication and redirects to the login page if the user is not authenticated.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // Diese Route benötigt Authentifizierung und prüft,\n    // ob man eingeloggt ist.\n    // Wenn nicht, Redirect zur Login-Seite.\n    if (!auth.loggedIn()) {\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n    } else {\n      next()\n    }\n  } else {\n    next() // Rufe immer next() auf.\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Dynamic Segment in Vue Router\nDESCRIPTION: This code defines a Vue component and a Vue Router instance with a route that includes a dynamic segment (`:id`).  The dynamic segment allows the same component to be used for different URLs based on the value in the segment. The `User` component is mapped to the `/user/:id` path.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/dynamic-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst User = {\n  template: '<div>User</div>'\n}\n\nconst router = new VueRouter({\n  routes: [\n    // コロンで始まる動的セグメント\n    { path: '/user/:id', component: User }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Release Process Commands for Vue Router\nDESCRIPTION: Commands for releasing a new version of Vue Router, including running tests, building distribution files, generating changelog, committing changes, versioning, and publishing to npm.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run release\n  - Ensure tests are passing `yarn run test`\n  - Build dist files `VERSION=<the_version> yarn run build`\n  - Build changelog `yarn run changelog`\n  - Commit dist files `git add dist CHANGELOG.md && git commit -m \"[build $VERSION]\"`\n  - Publish a new version `npm version $VERSION --message \"[release] $VERSION\"`\n  - Push tags `git push origin refs/tags/v$VERSION && git push`\n  - Publish to npm `npm publish`\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation - router.push with userId\nDESCRIPTION: Illustrates how to use `router.push` with user IDs. Demonstrates how to correctly pass parameters using named routes and paths. Also shows a common mistake of ignoring parameters when using path without name.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ru/guide/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst userId = '123'\nrouter.push({ name: 'user', params: { userId } }) // -> /user/123\nrouter.push({ path: `/user/${userId}` }) // -> /user/123\n// Это НЕ БУДЕТ работать\nrouter.push({ path: '/user', params: { userId } }) // -> /user\n```\n\n----------------------------------------\n\nTITLE: UserSettings Template with Named Views\nDESCRIPTION: This code snippet presents a `UserSettings.vue` component template that utilizes nested named views. It includes a main `<router-view>` and a named `<router-view name=\"helper\">`, allowing for different components to be rendered within these views based on the route configuration.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ja/essentials/named-views.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- UserSettings.vue -->\n<div>\n  <h1>User Settings</h1>\n  <NavBar/>\n  <router-view/>\n  <router-view name=\"helper\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including SUMMARY.md Using Liquid Template Tag in Markdown\nDESCRIPTION: This code uses a Liquid template include tag to embed the content of SUMMARY.md file into the current document. This approach allows for maintaining the summary content in a single file that can be reused across multiple pages.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include \"./SUMMARY.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in Vue Router Configuration\nDESCRIPTION: This snippet shows how to create a VueRouter instance with a named route. The route is given a name 'user' and includes a dynamic segment ':userId' in its path.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs/ja/guide/essentials/named-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/user/:userId',\n      name: 'user',\n      component: User\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Emulating Native Browser Back/Forward Behavior\nDESCRIPTION: This snippet shows how to emulate native browser behavior for back/forward navigation by using the savedPosition parameter when available.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/ru/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nscrollBehavior (to, from, savedPosition) {\n  if (savedPosition) {\n    return savedPosition\n  } else {\n    return { x: 0, y: 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: router-link Named Route\nDESCRIPTION: This snippet demonstrates how to use a named route with the `to` prop. It shows how to pass parameters to the route using the `params` property.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/de/api/router-link.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- benannte Route -->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Vue Router Documentation Languages\nDESCRIPTION: List of markdown links to different language versions of the Vue Router documentation, organized as bullet points.\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/LANGS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [English](en/)\n* [French](fr/)\n* [Japanese](ja/)\n* [中文](zh-cn/)\n* [German](de/)\n* [Русский](ru/)\n* [한국어(Korean)](kr/)\n* [Español](es/)\n* [0.7 Docs](old/)\n```\n\n----------------------------------------\n\nTITLE: Router Link with JavaScript Expression Binding\nDESCRIPTION: Shows multiple ways of binding the 'to' property using v-bind or shorthand syntax\nSOURCE: https://github.com/vuejs/vue-router/blob/dev/docs-gitbook/es/api/router-link.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- JavaScript expression binding -->\n<router-link v-bind:to=\"'home'\">Home</router-link>\n\n<!-- Shorthand binding -->\n<router-link :to=\"'home'\">Home</router-link>\n\n<!-- Object-based route definition -->\n<router-link :to=\"{ path: 'home' }\">Home</router-link>\n```"
  }
]