[
  {
    "owner": "tauri-apps",
    "repo": "tauri-docs",
    "content": "TITLE: Complete Tauri Command Implementation Example\nDESCRIPTION: Comprehensive example showing multiple features including state management, async commands, and error handling.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nstruct Database;\n\n#[derive(serde::Serialize)]\nstruct CustomResponse {\n\tmessage: String,\n\tother_val: usize,\n}\n\nasync fn some_other_function() -> Option<String> {\n\tSome(\"response\".into())\n}\n\n#[tauri::command]\nasync fn my_custom_command(\n\twindow: tauri::Window,\n\tnumber: usize,\n\tdatabase: tauri::State<'_, Database>,\n) -> Result<CustomResponse, String> {\n\tprintln!(\"Called from {}\", window.label());\n\tlet result: Option<String> = some_other_function().await;\n\tif let Some(message) = result {\n\t\tOk(CustomResponse {\n\t\t\tmessage,\n\t\t\tother_val: 42 + number,\n\t\t})\n\t} else {\n\t\tErr(\"No result\".into())\n\t}\n}\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\ttauri::Builder::default()\n\t\t.manage(Database {})\n\t\t.invoke_handler(tauri::generate_handler![my_custom_command])\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { invoke } from '@tauri-apps/api/core';\n\ninvoke('my_custom_command', {\n  number: 42,\n})\n  .then((res) =>\n    console.log(`Message: ${res.message}, Other Val: ${res.other_val}`)\n  )\n  .catch((e) => console.error(e));\n```\n\n----------------------------------------\n\nTITLE: Structured Event Payload Implementation\nDESCRIPTION: Shows how to implement structured event payloads using serializable types for richer event data.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, Emitter};\nuse serde::Serialize;\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct DownloadStarted<'a> {\n  url: &'a str,\n  download_id: usize,\n  content_length: usize,\n}\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct DownloadProgress {\n  download_id: usize,\n  chunk_length: usize,\n}\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct DownloadFinished {\n  download_id: usize,\n}\n\n#[tauri::command]\nfn download(app: AppHandle, url: String) {\n  let content_length = 1000;\n  let download_id = 1;\n\n  app.emit(\"download-started\", DownloadStarted {\n    url: &url,\n    download_id,\n    content_length\n  }).unwrap();\n\n  for chunk_length in [15, 150, 35, 500, 300] {\n    app.emit(\"download-progress\", DownloadProgress {\n      download_id,\n      chunk_length,\n    }).unwrap();\n  }\n\n  app.emit(\"download-finished\", DownloadFinished { download_id }).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Debian-based Linux\nDESCRIPTION: Installs the required system libraries and tools for Tauri development on Debian-based Linux distributions using apt package manager.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\nsudo apt install libwebkit2gtk-4.1-dev \\\n  build-essential \\\n  curl \\\n  wget \\\n  file \\\n  libxdo-dev \\\n  libssl-dev \\\n  libayatana-appindicator3-dev \\\n  librsvg2-dev\n```\n\n----------------------------------------\n\nTITLE: Basic Rust Command Definition\nDESCRIPTION: Demonstrates how to define a basic Tauri command in Rust using the #[tauri::command] attribute\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nfn my_custom_command() {\n\tprintln!(\"I was invoked from JavaScript!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic package.json for Tauri Projects\nDESCRIPTION: A minimal package.json configuration for a Tauri project, defining development scripts and required Tauri dependencies. It includes the essential scripts for development, building, and Tauri CLI access.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"command to start your app development mode\",\n    \"build\": \"command to build your app frontend\",\n    \"tauri\": \"tauri\"\n  },\n  \"dependencies\": {\n    \"@tauri-apps/api\": \"^2.0.0.0\",\n    \"@tauri-apps/cli\": \"^2.0.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Async Commands in JavaScript\nDESCRIPTION: Example of calling an async Tauri command from JavaScript using invoke.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninvoke('my_custom_command', { value: 'Hello, Async!' }).then(() =>\n  console.log('Completed!')\n);\n```\n\n----------------------------------------\n\nTITLE: Emitting Global Events in Tauri\nDESCRIPTION: Demonstrates how to emit global events from Rust to all frontend listeners using the Tauri event system.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, Emitter};\n\n#[tauri::command]\nfn download(app: AppHandle, url: String) {\n  app.emit(\"download-started\", &url).unwrap();\n  for progress in [1, 15, 50, 80, 100] {\n    app.emit(\"download-progress\", progress).unwrap();\n  }\n  app.emit(\"download-finished\", &url).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Capability in JSON\nDESCRIPTION: Example JSON configuration for a capability that allows the main window to use default functionality of core plugins and the window.setTitle API.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"core:path:default\",\n    \"core:event:default\",\n    \"core:window:default\",\n    \"core:app:default\",\n    \"core:resources:default\",\n    \"core:menu:default\",\n    \"core:tray:default\",\n    \"core:window:allow-set-title\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Result-based Async Commands in Rust\nDESCRIPTION: Example of creating an asynchronous command that returns a Result to handle borrowed types.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nasync fn my_custom_command(value: &str) -> Result<String, ()> {\n\tsome_async_function().await;\n\tOk(format!(value))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Plugin Configuration in Rust\nDESCRIPTION: Demonstrates how to define and initialize plugin configuration using Rust structs and the Builder pattern.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::plugin::{Builder, Runtime, TauriPlugin};\nuse serde::Deserialize;\n\n#[derive(Deserialize)]\nstruct Config {\n  timeout: usize,\n}\n\npub fn init<R: Runtime>() -> TauriPlugin<R, Config> {\n  Builder::<R, Config>::new(\"<plugin-name>\")\n    .setup(|app, api| {\n      let timeout = api.config().timeout;\n      Ok(())\n    })\n    .build()\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Global Events in TypeScript\nDESCRIPTION: Demonstrates how to listen to global events using the @tauri-apps/api package. Shows type-safe event handling with a custom DownloadStarted interface.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { listen } from '@tauri-apps/api/event';\n\ntype DownloadStarted = {\n  url: string;\n  downloadId: number;\n  contentLength: number;\n};\n\nlisten<DownloadStarted>('download-started', (event) => {\n  console.log(\n    `downloading ${event.payload.contentLength} bytes from ${event.payload.url}`\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: File Operations Permission Configuration - JSON\nDESCRIPTION: Configuration for file system permissions in Tauri capabilities.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"fs:default\",\n    {\n      \"identifier\": \"fs:allow-exists\",\n      \"allow\": [{ \"path\": \"$APPDATA/*\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Direct JavaScript Evaluation in Tauri\nDESCRIPTION: Shows how to directly evaluate JavaScript code in a webview context from Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Manager;\n\ntauri::Builder::default()\n  .setup(|app| {\n    let webview = app.get_webview_window(\"main\").unwrap();\n    webview.eval(\"console.log('hello from Rust')\")?;\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Standard Multi-Platform Tauri Build Workflow\nDESCRIPTION: Complete GitHub Actions workflow for building and releasing Tauri applications on multiple platforms including Linux, Windows, and macOS (both Intel and ARM).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Pipelines/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'publish'\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - release\n\njobs:\n  publish-tauri:\n    permissions:\n      contents: write\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - platform: 'macos-latest'\n            args: '--target aarch64-apple-darwin'\n          - platform: 'macos-latest'\n            args: '--target x86_64-apple-darwin'\n          - platform: 'ubuntu-22.04'\n            args: ''\n          - platform: 'windows-latest'\n            args: ''\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: install dependencies (ubuntu only)\n        if: matrix.platform == 'ubuntu-22.04'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf\n\n      - name: setup node\n        uses: actions/setup-node@v4\n        with:\n          node-version: lts/*\n          cache: 'yarn'\n\n      - name: install Rust stable\n        uses: dtolnay/rust-toolchain@stable\n        with:\n          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}\n\n      - name: Rust cache\n        uses: swatinem/rust-cache@v2\n        with:\n          workspaces: './src-tauri -> target'\n\n      - name: install frontend dependencies\n        run: yarn install\n\n      - uses: tauri-apps/tauri-action@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tagName: app-v__VERSION__\n          releaseName: 'App v__VERSION__'\n          releaseBody: 'See the assets to download this version and install.'\n          releaseDraft: true\n          prerelease: false\n          args: ${{ matrix.args }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Menu Updates with Rust in Tauri\nDESCRIPTION: Implements a dynamic menu system using Tauri's Rust API. Creates menu items with changeable text, icons, and checkable states. Includes event handling for menu item updates and state management. Uses builder pattern for menu construction.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\n\nuse tauri::{\n    image::Image,\n    menu::{CheckMenuItemBuilder, IconMenuItem, MenuBuilder, MenuItem, SubmenuBuilder},\n};\n\nfn main() {\n    tauri::Builder::default()\n        .setup(|app| {\n            let check_sub_item_en = CheckMenuItemBuilder::with_id(\"en\", \"EN\")\n                .checked(true)\n                .build(app)?;\n\n            let check_sub_item_zh = CheckMenuItemBuilder::with_id(\"zh\", \"ZH\")\n                .checked(false)\n                .build(app)?;\n\n            let text_menu = MenuItem::with_id(\n                app,\n                \"change_text\",\n                &\"Change menu\".to_string(),\n                true,\n                Some(\"Ctrl+Z\"),\n            )\n            .unwrap();\n\n            let icon_menu = IconMenuItem::with_id(\n                app,\n                \"change_icon\",\n                &\"Change icon menu\",\n                true,\n                Some(Image::from_bytes(include_bytes!(\"../icons/icon.png\")).unwrap()),\n                Some(\"Ctrl+F\"),\n            )\n            .unwrap();\n\n            let menu_item = SubmenuBuilder::new(app, \"Change menu\")\n                .item(&text_menu)\n                .item(&icon_menu)\n                .items(&[&check_sub_item_en, &check_sub_item_zh])\n                .build()?;\n            let menu = MenuBuilder::new(app).items(&[&menu_item]).build()?;\n            app.set_menu(menu)?;\n            app.on_menu_event(move |_app_handle: &tauri::AppHandle, event| {\n                match event.id().0.as_str() {\n                    \"change_text\" => {\n                        text_menu\n                            .set_text(\"changed menu text\")\n                            .expect(\"Change text error\");\n\n                        text_menu\n                            .set_text(\"changed menu text\")\n                            .expect(\"Change text error\");\n                    }\n                    \"change_icon\" => {\n                        icon_menu\n                            .set_text(\"changed menu-icon text\")\n                            .expect(\"Change text error\");\n                        icon_menu\n                            .set_icon(Some(\n                                Image::from_bytes(include_bytes!(\"../icons/icon-2.png\")).unwrap(),\n                            ))\n                            .expect(\"Change icon error\");\n                    }\n\n                    \"en\" | \"zh\" => {\n                        check_sub_item_en\n                            .set_checked(event.id().0.as_str() == \"en\")\n                            .expect(\"Change check error\");\n                        check_sub_item_zh\n                            .set_checked(event.id().0.as_str() == \"zh\")\n                            .expect(\"Change check error\");\n                        check_sub_item_zh.set_accelerator(Some(\"Ctrl+L\"))\n                        .expect(\"Change accelerator error\");\n                    }\n                    _ => {\n                        println!(\"unexpected menu event\");\n                    }\n                }\n            });\n\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Tauri Configuration in JSON5 Format\nDESCRIPTION: Example of Tauri configuration using JSON5 format, showing build settings, bundle configuration, window settings, and plugin configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  build: {\n    devUrl: 'http://localhost:3000',\n    // start the dev server\n    beforeDevCommand: 'npm run dev',\n  },\n  bundle: {\n    active: true,\n    icon: ['icons/app.png'],\n  },\n  app: {\n    windows: [\n      {\n        title: 'MyApp',\n      },\n    ],\n  },\n  plugins: {\n    updater: {\n      pubkey: 'updater pub key',\n      endpoints: ['https://my.app.updater/{{target}}/{{current_version}}'],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Commands\nDESCRIPTION: Demonstrates error handling in Tauri commands using Result types\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nfn login(user: String, password: String) -> Result<String, String> {\n\tif user == \"tauri\" && password == \"tauri\" {\n\t\t// resolve\n\t\tOk(\"logged_in\".to_string())\n\t} else {\n\t\t// reject\n\t\tErr(\"invalid credentials\".to_string())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Commands in Rust\nDESCRIPTION: Example of creating an asynchronous command using String instead of &str to handle borrowed types.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nasync fn my_custom_command(value: String) -> String {\n\tsome_async_function().await;\n\tvalue\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Capabilities for Specific Windows\nDESCRIPTION: Creates a filesystem capability that allows read access to the home directory, but limits this capability to only the 'first' window for better security.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/capabilities-for-windows-and-platforms.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identifier\": \"fs-read-home\",\n  \"description\": \"Allow access file access to home directory\",\n  \"local\": true,\n  \"windows\": [\"first\"],\n  \"permissions\": [\n    \"fs:allow-home-read\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with Parameters\nDESCRIPTION: These snippets show how to execute SQL queries with parameters for different database engines, demonstrating the syntax differences.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await db.execute(\n  \"INSERT into todos (id, title, status) VALUES ($1, $2, $3)\",\n  [todos.id, todos.title, todos.status],\n);\n\nconst result = await db.execute(\n\"UPDATE todos SET title = $1, status = $2 WHERE id = $3\",\n[todos.title, todos.status, todos.id],\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await db.execute(\n  \"INSERT into todos (id, title, status) VALUES (?, ?, ?)\",\n  [todos.id, todos.title, todos.status],\n);\n\nconst result = await db.execute(\n  \"UPDATE todos SET title = ?, status = ? WHERE id = ?\",\n  [todos.title, todos.status, todos.id],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific Desktop Capability\nDESCRIPTION: Example of a capability configuration specific to desktop platforms (Linux, macOS, Windows).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"desktop-capability\",\n  \"windows\": [\"main\"],\n  \"platforms\": [\"linux\", \"macOS\", \"windows\"],\n  \"permissions\": [\"global-shortcut:allow-register\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutable State with Mutex\nDESCRIPTION: Demonstrates how to implement mutable state using Mutex for thread-safe state management in Tauri applications.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::Mutex;\n\nuse tauri::{Builder, Manager};\n\n#[derive(Default)]\nstruct AppState {\n  counter: u32,\n}\n\nfn main() {\n  Builder::default()\n    .setup(|app| {\n      app.manage(Mutex::new(AppState::default()));\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP in Tauri Configuration File\nDESCRIPTION: Example configuration for Content Security Policy in a Tauri application's configuration file. This snippet demonstrates how to set up various CSP directives including default-src, connect-src, font-src, img-src, and style-src policies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/csp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csp\": {\n        \"default-src\": \"'self' customprotocol: asset:\",\n        \"connect-src\": \"ipc: http://ipc.localhost\",\n        \"font-src\": [\"https://fonts.gstatic.com\"],\n        \"img-src\": \"'self' asset: http://asset.localhost blob: data:\",\n        \"style-src\": \"'unsafe-inline' 'self' https://fonts.googleapis.com\"\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stronghold from JavaScript\nDESCRIPTION: Complete example of initializing, loading, and using the Stronghold plugin from JavaScript to store and retrieve encrypted data.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/stronghold.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Client, Stronghold } from '@tauri-apps/plugin-stronghold';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { Client, Stronghold } = window.__TAURI__.stronghold;\nimport { appDataDir } from '@tauri-apps/api/path';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { appDataDir } = window.__TAURI__.path;\n\nconst initStronghold = async () => {\n\tconst vaultPath = `${await appDataDir()}/vault.hold`;\n\tconst vaultPassword = 'vault password';\n\tconst stronghold = await Stronghold.load(vaultPath, vaultPassword);\n\n\tlet client: Client;\n\tconst clientName = 'name your client';\n\ttry {\n\t\tclient = await stronghold.loadClient(clientName);\n\t} catch {\n\t\tclient = await stronghold.createClient(clientName);\n\t}\n\n\treturn {\n\t\tstronghold,\n\t\tclient,\n\t};\n};\n\n// Insert a record to the store\nasync function insertRecord(store: any, key: string, value: string) {\n\tconst data = Array.from(new TextEncoder().encode(value));\n\tawait store.insert(key, data);\n}\n\n// Read a record from store\nasync function getRecord(store: any, key: string): Promise<string> {\n\tconst data = await store.get(key);\n\treturn new TextDecoder().decode(new Uint8Array(data));\n}\n\nconst { stronghold, client } = await initStronghold();\n\nconst store = client.getStore();\nconst key = 'my_key';\n\n// Insert a record to the store\ninsertRecord(store, key, 'secret value');\n\n// Read a record from store\nconst value = await getRecord(store, key);\nconsole.log(value); // 'secret value'\n\n// Save your updates\nawait stronghold.save();\n\n// Remove a record from store\nawait store.remove(key);\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with JavaScript in Tauri\nDESCRIPTION: JavaScript code example demonstrating how to use the HTTP plugin to make a GET request, similar to the web Fetch API.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/http-client.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch } from '@tauri-apps/plugin-http';\n\n// Send a GET request\nconst response = await fetch('http://test.tauri.app/data.json', {\n  method: 'GET',\n});\nconsole.log(response.status); // e.g. 200\nconsole.log(response.statusText); // e.g. \"OK\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Logic for Tauri Plugin in Rust\nDESCRIPTION: Demonstrates how to implement shared logic for a Tauri plugin that can be used across both desktop and mobile platforms. The code shows a method that can be called from both commands and Rust code.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Runtime;\n\nimpl<R: Runtime> <plugin-name><R> {\n  pub fn do_something(&self) {\n    // do something that is a shared implementation between desktop and mobile\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Text and Binary Files in JavaScript\nDESCRIPTION: Shows how to write text and binary data to files using separate APIs for performance.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writeTextFile, writeFile, BaseDirectory } from '@tauri-apps/plugin-fs';\n\n// Writing text file\nconst contents = JSON.stringify({ notifications: true });\nawait writeTextFile('config.json', contents, {\n  baseDir: BaseDirectory.AppConfig,\n});\n\n// Writing binary file\nconst binaryContents = new Uint8Array(); // fill a byte array\nawait writeFile('config', binaryContents, {\n  baseDir: BaseDirectory.AppConfig,\n});\n```\n\n----------------------------------------\n\nTITLE: Styling a Custom Titlebar with CSS\nDESCRIPTION: CSS styles for creating a custom titlebar, including positioning, background color, and interactive button styles. This keeps the titlebar fixed at the top of the window and provides hover effects for buttons.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.titlebar {\n  height: 30px;\n  background: #329ea3;\n  user-select: none;\n  display: flex;\n  justify-content: flex-end;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n}\n.titlebar-button {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: 30px;\n  height: 30px;\n  user-select: none;\n  -webkit-user-select: none;\n}\n.titlebar-button:hover {\n  background: #5bbec3;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Endpoints at Runtime in Rust\nDESCRIPTION: This snippet demonstrates how to dynamically set update endpoints at runtime, allowing for different release channels in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\nlet channel = if beta { \"beta\" } else { \"stable\" };\nlet update_url = format!(\"https://{channel}.myserver.com/{{{{target}}}}-{{{{arch}}}}/{{{{current_version}}}}\");\n\nlet update = app\n  .updater_builder()\n  .endpoints(vec![update_url])?\n  .build()?\n  .check()\n  .await?;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Menu Updates with JavaScript in Tauri\nDESCRIPTION: Creates and manages a dynamic menu system using Tauri's JavaScript API. Demonstrates creating checkable menu items for language selection, icon menu items with changeable icons, and text menu items with updatable content. Includes event handlers for updating menu item states.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Menu,\n  CheckMenuItem,\n  IconMenuItem,\n  MenuItem,\n} from '@tauri-apps/api/menu';\nimport { Image } from '@tauri-apps/api/image';\n\nlet currentLanguage = 'en';\n\nconst check_sub_item_en = await CheckMenuItem.new({\n  id: 'en',\n  text: 'English',\n  checked: currentLanguage === 'en',\n  action: () => {\n    currentLanguage = 'en';\n    check_sub_item_en.setChecked(currentLanguage === 'en');\n    check_sub_item_zh.setChecked(currentLanguage === 'cn');\n    console.log('English pressed');\n  },\n});\n\nconst check_sub_item_zh = await CheckMenuItem.new({\n  id: 'zh',\n  text: 'Chinese',\n  checked: currentLanguage === 'zh',\n  action: () => {\n    currentLanguage = 'zh';\n    check_sub_item_en.setChecked(currentLanguage === 'en');\n    check_sub_item_zh.setChecked(currentLanguage === 'zh');\n    check_sub_item_zh.setAccelerator('Ctrl+L');\n    console.log('Chinese pressed');\n  },\n});\n\n// Load icon from path\nconst icon = await Image.fromPath('../src/icon.png');\nconst icon2 = await Image.fromPath('../src/icon-2.png');\n\nconst icon_item = await IconMenuItem.new({\n  id: 'icon_item',\n  text: 'Icon Item',\n  icon: icon,\n  action: () => {\n    icon_item.setIcon(icon2);\n    console.log('icon pressed');\n  },\n});\n\nconst text_item = await MenuItem.new({\n  id: 'text_item',\n  text: 'Text Item',\n  action: () => {\n    text_item.setText('Text Item Changed');\n    console.log('text pressed');\n  },\n});\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'change menu',\n      text: 'change_menu',\n      items: [text_item, check_sub_item_en, check_sub_item_zh, icon_item],\n    },\n  ],\n});\n\nawait menu.setAsAppMenu();\n```\n\n----------------------------------------\n\nTITLE: Using Store Plugin in JavaScript/TypeScript\nDESCRIPTION: Example of using the Tauri Store plugin in JavaScript/TypeScript to create, read, and write to a persistent store.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { load } from '@tauri-apps/plugin-store';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { load } = window.__TAURI__.store;\n\n// Create a new store or load the existing one,\n// note that the options will be ignored if a `Store` with that path has already been created\nconst store = await load('store.json', { autoSave: false });\n\n// Set a value.\nawait store.set('some-key', { value: 5 });\n\n// Get a value.\nconst val = await store.get<{ value: number }>('some-key');\nconsole.log(val); // { value: 5 }\n\n// You can manually save the store after making changes.\n// Otherwise, it will save upon graceful exit\n// And if you set `autoSave` to a number or left empty,\n// it will save the changes to disk after a debounce delay, 100ms by default.\nawait store.save();\n```\n\n----------------------------------------\n\nTITLE: Uploading File with Tauri Upload Plugin in JavaScript\nDESCRIPTION: This example demonstrates how to use the upload function from the Tauri upload plugin to upload a file to a remote server. It includes a progress callback and optional headers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/upload.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { upload } from '@tauri-apps/plugin-upload';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { upload } = window.__TAURI__.upload;\n\nupload(\n  'https://example.com/file-upload',\n  './path/to/my/file.txt',\n  ({ progress, total }) =>\n    console.log(`Uploaded ${progress} of ${total} bytes`), // a callback that will be called with the upload progress\n  { 'Content-Type': 'text/plain' } // optional headers to send with the request\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Command in Rust\nDESCRIPTION: Demonstrates how to create a Tauri command that handles file uploads with progress tracking using AppHandle and Window instances.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{command, ipc::Channel, AppHandle, Runtime, Window};\n\n#[command]\nasync fn upload<R: Runtime>(app: AppHandle<R>, window: Window<R>, on_progress: Channel, url: String) {\n  // implement command logic here\n  on_progress.send(100).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Streaming with Channels in Rust\nDESCRIPTION: Example of using Tauri channels to stream file data to the frontend in chunks.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse tokio::io::AsyncReadExt;\n\n#[tauri::command]\nasync fn load_image(path: std::path::PathBuf, reader: tauri::ipc::Channel<&[u8]>) {\n  let mut file = tokio::fs::File::open(path).await.unwrap();\n\n  let mut chunk = vec![0; 4096];\n\n  loop {\n    let len = file.read(&mut chunk).await.unwrap();\n    if len == 0 {\n      break;\n    }\n    reader.send(&chunk).unwrap();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linux ARM Build Workflow\nDESCRIPTION: Specialized GitHub Actions workflow for building Tauri applications for Linux ARM architectures using arm-runner-action.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Pipelines/github.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'Publish Linux Arm builds'\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - release\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n\n    strategy:\n      matrix:\n        arch: [aarch64, armv7l]\n        include:\n          - arch: aarch64\n            cpu: cortex-a72\n            base_image: https://dietpi.com/downloads/images/DietPi_RPi5-ARMv8-Bookworm.img.xz\n            deb: arm64\n            rpm: aarch64\n            appimage: aarch64\n          - arch: armv7l\n            cpu: cortex-a53\n            deb: armhfp\n            rpm: arm\n            appimage: armhf\n            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache rust build artifacts\n        uses: Swatinem/rust-cache@v2\n        with:\n          workspaces: src-tauri\n          cache-on-failure: true\n\n      - name: Build app\n        uses: pguyot/arm-runner-action@v2.6.5\n        with:\n          base_image: ${{ matrix.base_image }}\n          cpu: ${{ matrix.cpu }}\n          bind_mount_repository: true\n          image_additional_mb: 10240\n          optimize_image: no\n          commands: |\n            export HOME=/root\n            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse\n            apt-get update -y --allow-releaseinfo-change\n            apt-get autoremove -y\n            apt-get install -y --no-install-recommends --no-install-suggests curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file\n            curl https://sh.rustup.rs -sSf | sh -s -- -y\n            . \"$HOME/.cargo/env\"\n            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash\n            apt-get install -y nodejs\n            npm install\n            npm run tauri build -- --verbose\n\n      - name: Get app version\n        run: echo \"APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)\" >> $GITHUB_ENV\n\n      - name: Upload deb bundle\n        uses: actions/upload-artifact@v3\n        with:\n          name: Debian Bundle\n          path: ${{ github.workspace }}/src-tauri/target/release/bundle/deb/appname_${{ env.APP_VERSION }}_${{ matrix.deb }}.deb\n\n      - name: Upload rpm bundle\n        uses: actions/upload-artifact@v3\n        with:\n          name: RPM Bundle\n          path: ${{ github.workspace }}/src-tauri/target/release/bundle/rpm/appname-${{ env.APP_VERSION }}-1.${{ matrix.rpm }}.rpm\n\n      - name: Upload appimage bundle\n        uses: actions/upload-artifact@v3\n        with:\n          name: AppImage Bundle\n          path: ${{ github.workspace }}/src-tauri/target/release/bundle/appimage/appname_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage\n```\n\n----------------------------------------\n\nTITLE: JavaScript Command Invocation\nDESCRIPTION: Shows how to invoke Tauri commands from JavaScript using the invoke function\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { invoke } from '@tauri-apps/api/core';\n\n// When using the Tauri global script (if not using the npm package)\n// Be sure to set `app.withGlobalTauri` in `tauri.conf.json` to true\nconst invoke = window.__TAURI__.core.invoke;\n\n// Invoke the command\ninvoke('my_custom_command');\n```\n\n----------------------------------------\n\nTITLE: Package Manager Installation Prompts\nDESCRIPTION: Command line prompts shown during project setup asking for project name and bundle identifier information.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/create-project.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n? Project name (tauri-app) ›\n? Identifier (com.tauri-app.app) ›\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Configuration in TOML\nDESCRIPTION: Demonstrates basic permission configuration with command allowances and scope definitions. Shows how to allow specific commands and define file system access scopes.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[permission]]\nidentifier = \"my-identifier\"\ndescription = \"This describes the impact and more.\"\ncommands.allow = [\n    \"read_file\"\n]\n\n[[scope.allow]]\nmy-scope = \"$HOME/*\"\n\n[[scope.deny]]\nmy-scope = \"$HOME/secret\"\n```\n\n----------------------------------------\n\nTITLE: Listening to Deep Links in Rust\nDESCRIPTION: Rust code to set up a listener for deep link events in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_deep_link::DeepLinkExt;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_deep_link::init())\n        .setup(|app| {\n            app.deep_link().on_open_url(|event| {\n                println!(\"deep link URLs: {:?}\", event.urls());\n            });\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Static Export with Tauri\nDESCRIPTION: Next.js configuration setup for static site generation (SSG) with Tauri integration, including image optimization settings and asset prefix configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nextjs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isProd = process.env.NODE_ENV === 'production';\n\nconst internalHost = process.env.TAURI_DEV_HOST || 'localhost';\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    unoptimized: true,\n  },\n  assetPrefix: isProd ? undefined : `http://${internalHost}:3000`,\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Using Tauri Websocket Plugin in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to use the Tauri Websocket plugin to connect to a WebSocket server, send messages, and handle received messages.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/websocket.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport WebSocket from '@tauri-apps/plugin-websocket';\n// when using `\"withGlobalTauri\": true`, you may use\n// const WebSocket = window.__TAURI__.websocket;\n\nconst ws = await WebSocket.connect('ws://127.0.0.1:8080');\n\nws.addListener((msg) => {\n  console.log('Received Message:', msg);\n});\n\nawait ws.send('Hello World!');\n\nawait ws.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI Arguments in Rust\nDESCRIPTION: Rust code showing how to use the CLI plugin to access and process command line arguments within the Tauri application setup.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_cli::CliExt;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n   tauri::Builder::default()\n       .plugin(tauri_plugin_cli::init())\n       .setup(|app| {\n           match app.cli().matches() {\n               // `matches` here is a Struct with { args, subcommand }.\n               // `args` is `HashMap<String, ArgData>` where `ArgData` is a struct with { value, occurrences }.\n               // `subcommand` is `Option<Box<SubcommandMatches>>` where `SubcommandMatches` is a struct with { name, matches }.\n               Ok(matches) => {\n                   println!(\"{:?}\", matches)\n               }\n               Err(_) => {}\n           }\n           Ok(())\n       })\n       .run(tauri::generate_context!())\n       .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Type Implementation\nDESCRIPTION: Shows how to implement custom error types for better error handling in Tauri commands\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, thiserror::Error)]\nenum Error {\n  #[error(transparent)]\n  Io(#[from] std::io::Error),\n  #[error(\"failed to parse as string: {0}\")]\n  Utf8(#[from] std::str::Utf8Error),\n}\n\n#[derive(serde::Serialize)]\n#[serde(tag = \"kind\", content = \"message\")]\n#[serde(rename_all = \"camelCase\")]\nenum ErrorKind {\n  Io(String),\n  Utf8(String),\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Plugin in Rust\nDESCRIPTION: Shows how to use the Tauri Dialog plugin to open a file picker and show a message dialog in a Rust application's setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::DialogExt;\ntauri::Builder::default()\n    .plugin(tauri_plugin_dialog::init())\n    .setup(|app| {\n        app.dialog().file().pick_file(|file_path| {\n            // do something with the optional file path here\n            // the file path is `None` if the user closed the dialog\n        });\n\n        app.dialog().message(\"Tauri is Awesome!\").show();\n        Ok(())\n     })\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard Plugin in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to write to and read from the clipboard using the plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/clipboard.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writeText, readText } from '@tauri-apps/plugin-clipboard-manager';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { writeText, readText } = window.__TAURI__.clipboardManager;\n\n// Write content to clipboard\nawait writeText('Tauri is awesome!');\n\n// Read content from clipboard\nconst content = await readText();\nconsole.log(content);\n// Prints \"Tauri is awesome!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with JavaScript in Tauri\nDESCRIPTION: Complete JavaScript example demonstrating how to check for notification permission, request it if needed, and send a notification to the user.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  isPermissionGranted,\n  requestPermission,\n  sendNotification,\n} from '@tauri-apps/plugin-notification';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { isPermissionGranted, requestPermission, sendNotification, } = window.__TAURI__.notification;\n\n// Do you have permission to send a notification?\nlet permissionGranted = await isPermissionGranted();\n\n// If not we need to request it\nif (!permissionGranted) {\n  const permission = await requestPermission();\n  permissionGranted = permission === 'granted';\n}\n\n// Once permission has been granted we can send the notification\nif (permissionGranted) {\n  sendNotification({ title: 'Tauri', body: 'Tauri is awesome!' });\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to NFC Tags in JavaScript\nDESCRIPTION: JavaScript code for writing data to NFC tags, demonstrating how to create text and URI records and configure the write operation.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { write, textRecord, uriRecord } from '@tauri-apps/plugin-nfc';\n\nconst payload = [uriRecord('https://tauri.app'), textRecord('some payload')];\n\nconst options = {\n  // the kind is only required if you do not have a scanned tag session alive\n  // its format is the same as the argument provided to scan()\n  kind: {\n    type: 'ndef',\n  },\n  // configure the messages displayed in the \"Scan NFC\" dialog on iOS\n  message: 'Scan a NFC tag',\n  successfulReadMessage: 'NFC tag successfully scanned',\n  successMessage: 'NFC tag successfully written',\n};\n\nawait write(payload, options);\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files - JavaScript/TypeScript\nDESCRIPTION: Examples of reading text files both fully and line by line using streams.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readTextFile, BaseDirectory } from '@tauri-apps/plugin-fs';\nconst configToml = await readTextFile('config.toml', {\n  baseDir: BaseDirectory.AppConfig,\n});\n\n// Reading lines\nimport { readTextFileLines, BaseDirectory } from '@tauri-apps/plugin-fs';\nconst lines = await readTextFileLines('app.logs', {\n  baseDir: BaseDirectory.AppLog,\n});\nfor await (const line of lines) {\n  console.log(line);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Build Settings with Yarn\nDESCRIPTION: Configuration for Tauri's build settings when using Yarn as the package manager, specifying build commands and frontend distribution directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../out\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Directory Structure\nDESCRIPTION: Shows the recommended directory structure for a Tauri plugin including permission configuration files.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntauri-plugin\n├── README.md\n├── src\n│  └── lib.rs\n├── build.rs\n├── Cargo.toml\n├── permissions\n│  └── <identifier>.json/toml\n│  └── default.json/toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Command-Specific File System Permissions in Tauri\nDESCRIPTION: This JSON snippet shows how to configure command-specific file system permissions in Tauri. It includes allow and deny rules for rename and exists operations on specific directories.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    {\n      \"identifier\": \"fs:allow-rename\",\n      \"allow\": [{ \"path\": \"$HOME/**\" }]\n    },\n    {\n      \"identifier\": \"fs:allow-rename\",\n      \"deny\": [{ \"path\": \"$HOME/.config/**\" }]\n    },\n    {\n      \"identifier\": \"fs:allow-exists\",\n      \"allow\": [{ \"path\": \"$APPDATA/*\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Access with Combined Scopes in Tauri Fs Plugin\nDESCRIPTION: Sets up a permission set that enables read-only access to APPLOCALDATA while maintaining security restrictions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/scope.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[set]]\nidentifier = \"read-files-applocaldata\"\ndescription = '''\nThis set allows file read access to the `APPLOCALDATA` folder and\nsubfolders except for linux,\nwhile it denies access to dangerous Tauri relevant files and\nfolders by default on windows.'''\npermissions = [\"scope-applocaldata-reasonable\", \"allow-read-file\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Application State in Tauri\nDESCRIPTION: Demonstrates setting up basic immutable application state using Tauri's Manager API. Creates an AppData struct with a welcome message and manages it in the application setup.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{Builder, Manager};\n\nstruct AppData {\n  welcome_message: &'static str,\n}\n\nfn main() {\n  Builder::default()\n    .setup(|app| {\n      app.manage(AppData {\n        welcome_message: \"Welcome to Tauri!\",\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning NFC Tags in Rust\nDESCRIPTION: Rust implementation for scanning NFC tags with NDEF format, demonstrating how to configure scan options and retrieve tag information.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n  .setup(|app| {\n    #[cfg(mobile)]\n    {\n      use tauri_plugin_nfc::NfcExt;\n\n      app.handle().plugin(tauri_plugin_nfc::init());\n\n      let tag = app\n        .nfc()\n        .scan(tauri_plugin_nfc::ScanRequest {\n            kind: tauri_plugin_nfc::ScanKind::Ndef {\n                mime_type: None,\n                uri: None,\n                tech_list: None,\n            },\n            keep_session_alive: false,\n        })?\n        .tag;\n    }\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Setup Lifecycle\nDESCRIPTION: Shows how to implement the setup lifecycle hook for a plugin, including state management and background task initialization.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{Manager, plugin::Builder};\nuse std::{collections::HashMap, sync::Mutex, time::Duration};\n\nstruct DummyStore(Mutex<HashMap<String, String>>);\n\nBuilder::new(\"<plugin-name>\")\n  .setup(|app, api| {\n    app.manage(DummyStore(Default::default()));\n\n    let app_ = app.clone();\n    std::thread::spawn(move || {\n      loop {\n        app_.emit(\"tick\", ());\n        std::thread::sleep(Duration::from_secs(1));\n      }\n    });\n\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Development Mode Detection in Rust\nDESCRIPTION: Demonstrates different methods to detect development mode and debug assertions in Tauri applications using Rust conditionals and configuration flags.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n  // Whether the current instance was started with `tauri dev` or not.\n  #[cfg(dev)]\n  {\n    // `tauri dev` only code\n  }\n  if cfg!(dev) {\n    // `tauri dev` only code\n  } else {\n    // `tauri build` only code\n  }\n  let is_dev: bool = tauri::is_dev();\n\n  // Whether debug assertions are enabled or not. This is true for `tauri dev` and `tauri build --debug`.\n  #[cfg(debug_assertions)]\n  {\n    // Debug only code\n  }\n  if cfg!(debug_assertions) {\n    // Debug only code\n  } else {\n    // Production only code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Custom Titlebar\nDESCRIPTION: HTML markup for a custom titlebar with minimize, maximize, and close buttons. The data-tauri-drag-region attribute enables window dragging when clicking on the titlebar.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-tauri-drag-region class=\"titlebar\">\n  <div class=\"titlebar-button\" id=\"titlebar-minimize\">\n    <img\n      src=\"https://api.iconify.design/mdi:window-minimize.svg\"\n      alt=\"minimize\"\n    />\n  </div>\n  <div class=\"titlebar-button\" id=\"titlebar-maximize\">\n    <img\n      src=\"https://api.iconify.design/mdi:window-maximize.svg\"\n      alt=\"maximize\"\n    />\n  </div>\n  <div class=\"titlebar-button\" id=\"titlebar-close\">\n    <img src=\"https://api.iconify.design/mdi:close.svg\" alt=\"close\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building File Save Dialog in Rust\nDESCRIPTION: Implementation of a blocking file save dialog with file type filters in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::DialogExt;\n\nlet file_path = app\n    .dialog()\n    .file()\n    .add_filter(\"My Filter\", &[\"png\", \"jpeg\"])\n    .blocking_save_file();\n```\n\n----------------------------------------\n\nTITLE: Channel-based Communication Implementation\nDESCRIPTION: Demonstrates using Tauri channels for efficient data streaming between Rust and frontend.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, ipc::Channel};\nuse serde::Serialize;\n\n#[derive(Clone, Serialize)]\n#[serde(rename_all = \"camelCase\", tag = \"event\", content = \"data\")]\nenum DownloadEvent<'a> {\n  #[serde(rename_all = \"camelCase\")]\n  Started {\n    url: &'a str,\n    download_id: usize,\n    content_length: usize,\n  },\n  #[serde(rename_all = \"camelCase\")]\n  Progress {\n    download_id: usize,\n    chunk_length: usize,\n  },\n  #[serde(rename_all = \"camelCase\")]\n  Finished {\n    download_id: usize,\n  },\n}\n\n#[tauri::command]\nfn download(app: AppHandle, url: String, on_event: Channel<DownloadEvent>) {\n  let content_length = 1000;\n  let download_id = 1;\n\n  on_event.send(DownloadEvent::Started {\n    url: &url,\n    download_id,\n    content_length,\n  }).unwrap();\n\n  for chunk_length in [15, 150, 35, 500, 300] {\n    on_event.send(DownloadEvent::Progress {\n      download_id,\n      chunk_length,\n    }).unwrap();\n  }\n\n  on_event.send(DownloadEvent::Finished { download_id }).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: WebdriverIO Test Specification Implementation\nDESCRIPTION: Example test specification file that demonstrates testing UI elements and styling of a Tauri application using WebdriverIO's testing framework.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/webdriverio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction luma(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.substring(1);\n  }\n\n  const rgb = parseInt(hex, 16);\n  const r = (rgb >> 16) & 0xff;\n  const g = (rgb >> 8) & 0xff;\n  const b = (rgb >> 0) & 0xff;\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\ndescribe('Hello Tauri', () => {\n  it('should be cordial', async () => {\n    const header = await $('body > h1');\n    const text = await header.getText();\n    expect(text).toMatch(/^[hH]ello/);\n  });\n\n  it('should be excited', async () => {\n    const header = await $('body > h1');\n    const text = await header.getText();\n    expect(text).toMatch(/!$/);\n  });\n\n  it('should be easy on the eyes', async () => {\n    const body = await $('body');\n    const backgroundColor = await body.getCSSProperty('background-color');\n    expect(luma(backgroundColor.parsed.hex)).toBeLessThan(100);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Files in Write Mode - JavaScript\nDESCRIPTION: Opens a file in write-only mode and writes text content to it.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open, BaseDirectory } from '@tauri-apps/plugin-fs';\nconst file = await open('foo/bar.txt', {\n  write: true,\n  baseDir: BaseDirectory.AppData,\n});\nawait file.write(new TextEncoder().encode('Hello world'));\nawait file.close();\n```\n\n----------------------------------------\n\nTITLE: Creating Subprocesses with Shell Plugin in Tauri Rust\nDESCRIPTION: Demonstrates how to create subprocesses and capture their output using the Shell plugin in a Tauri Rust application. It shows how to execute commands and handle their results.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let status = tauri::async_runtime::block_on(async move { app.shell().command(\"which\").args([\"ls\"]).status().await.unwrap() });\n            println!(\"`which` finished with status: {:?}\", status.code());\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Sidecar with Arguments in Rust\nDESCRIPTION: Rust code showing how to execute a sidecar with command line arguments.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n#[tauri::command]\nasync fn call_my_sidecar(app: tauri::AppHandle) {\n  let sidecar_command = app\n    .shell()\n    .sidecar(\"my-sidecar\")\n    .unwrap()\n    .args([\"arg1\", \"-a\", \"--arg2\", \"any-string-that-matches-the-validator\"]);\n  let (mut _rx, mut _child) = sidecar_command.spawn().unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: File Watching Implementation - JavaScript\nDESCRIPTION: Examples of watching files and directories for changes with both immediate and debounced notifications.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { watch, watchImmediate, BaseDirectory } from '@tauri-apps/plugin-fs';\n\n// Debounced watching\nawait watch('app.log', (event) => {\n  console.log('app.log event', event);\n}, {\n  baseDir: BaseDirectory.AppLog,\n  delayMs: 500,\n});\n\n// Immediate watching\nawait watchImmediate('logs', (event) => {\n  console.log('logs directory event', event);\n}, {\n  baseDir: BaseDirectory.AppLog,\n  recursive: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Biometric Authentication in JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to prompt the user for biometric authentication using the Tauri biometric plugin's authenticate method with configurable options for both Android and iOS.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { authenticate } from '@tauri-apps/plugin-biometric';\n\nconst options = {\n  // Set true if you want the user to be able to authenticate using phone password\n  allowDeviceCredential: false,\n  cancelTitle: \"Feature won't work if Canceled\",\n\n  // iOS only feature\n  fallbackTitle: 'Sorry, authentication failed',\n\n  // Android only features\n  title: 'Tauri feature',\n  subtitle: 'Authenticate to access the locked Tauri function',\n  confirmationRequired: true,\n};\n\ntry {\n  await authenticate('This feature is locked', options);\n  console.log(\n    'Hooray! Successfully Authenticated! We can now perform the locked Tauri function!'\n  );\n} catch (err) {\n  console.log('Oh no! Authentication failed because ' + err.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sidecar from JavaScript\nDESCRIPTION: JavaScript code demonstrating how to execute a sidecar binary using the Tauri shell plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command } from '@tauri-apps/plugin-shell';\nconst command = Command.sidecar('binaries/my-sidecar');\nconst output = await command.execute();\n```\n\n----------------------------------------\n\nTITLE: Checking Biometric Authentication Status in JavaScript\nDESCRIPTION: JavaScript code that demonstrates how to check if biometric authentication is available on the device using the Tauri biometric plugin's checkStatus method.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkStatus } from '@tauri-apps/plugin-biometric';\n\nconst status = await checkStatus();\nif (status.isAvailable) {\n  console.log('Yes! Biometric Authentication is available');\n} else {\n  console.log(\n    'No! Biometric Authentication is not available due to ' + status.error\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Directory Access Scope in Tauri Fs Plugin\nDESCRIPTION: Defines a permission scope that allows recursive access to the APPLOCALDATA folder and its contents using glob patterns.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/scope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[permission]]\nidentifier = \"scope-applocaldata-recursive\"\ndescription = '''\nThis scope recursive access to the complete `$APPLOCALDATA` folder,\nincluding sub directories and files.\n'''\n\n[[permission.scope.allow]]\npath = \"$APPLOCALDATA/**\"\n```\n\n----------------------------------------\n\nTITLE: Using the Filesystem Plugin in TypeScript\nDESCRIPTION: TypeScript implementation showing how to use the Tauri filesystem plugin to write text to a file in the home directory, with event handling to capture user input from a form.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writeTextFile, BaseDirectory } from '@tauri-apps/plugin-fs';\n\nlet greetInputEl: HTMLInputElement | null;\n\nasync function write(message: string) {\n    await writeTextFile('test.txt', message, { baseDir: BaseDirectory.Home });\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  greetInputEl = document.querySelector(\"#greet-input\");\n  document.querySelector(\"#greet-form\")?.addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n    if (!greetInputEl )\n      return;\n\n    write(greetInputEl.value == \"\" ? \"No input provided\": greetInputEl.value);\n\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Checking and Installing Updates with JavaScript in Tauri\nDESCRIPTION: This snippet demonstrates how to check for updates, download, and install them using the Tauri updater plugin in JavaScript. It includes progress tracking and app relaunch.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { check } from '@tauri-apps/plugin-updater';\nimport { relaunch } from '@tauri-apps/plugin-process';\n\nconst update = await check();\nif (update) {\n  console.log(\n    `found update ${update.version} from ${update.date} with notes ${update.body}`\n  );\n  let downloaded = 0;\n  let contentLength = 0;\n  // alternatively we could also call update.download() and update.install() separately\n  await update.downloadAndInstall((event) => {\n    switch (event.event) {\n      case 'Started':\n        contentLength = event.data.contentLength;\n        console.log(`started downloading ${event.data.contentLength} bytes`);\n        break;\n      case 'Progress':\n        downloaded += event.data.chunkLength;\n        console.log(`downloaded ${downloaded} from ${contentLength}`);\n        break;\n      case 'Finished':\n        console.log('download finished');\n        break;\n    }\n  });\n\n  console.log('update installed');\n  await relaunch();\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Usage in Frontend TypeScript\nDESCRIPTION: Shows how to create and use Tauri channels in frontend TypeScript code.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { invoke, Channel } from '@tauri-apps/api/core';\n\ntype DownloadEvent =\n  | {\n      event: 'started';\n      data: {\n        url: string;\n        downloadId: number;\n        contentLength: number;\n      };\n    }\n  | {\n      event: 'progress';\n      data: {\n        downloadId: number;\n        chunkLength: number;\n      };\n    }\n  | {\n      event: 'finished';\n      data: {\n        downloadId: number;\n      };\n    };\n\nconst onEvent = new Channel<DownloadEvent>();\nonEvent.onmessage = (message) => {\n  console.log(`got download event ${message.event}`);\n};\n\nawait invoke('download', {\n  url: 'https://raw.githubusercontent.com/tauri-apps/tauri/dev/crates/tauri-schema-generator/schemas/config.schema.json',\n  onEvent,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Comparator for Tauri Updater in Rust\nDESCRIPTION: This snippet demonstrates how to use the updater builder's version_comparator API to allow downgrades in Tauri applications. It customizes the version comparison logic to update when versions are different, not just when the update version is greater.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\n\nlet update = app\n  .updater_builder()\n  .version_comparator(|current, update| {\n    // default comparison: `update.version > current`\n    update.version != current\n  })\n  .build()?\n  .check()\n  .await?;\n```\n\n----------------------------------------\n\nTITLE: Listening to Menu Events in Rust\nDESCRIPTION: This snippet shows how to create a menu with custom items and listen to their events in Rust. It creates 'Open' and 'Close' menu items and handles their events using the on_menu_event API.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\nuse tauri::menu::{MenuBuilder};\n\nfn main() {\n  tauri::Builder::default()\n        .setup(|app| {\n            let menu = MenuBuilder::new(app)\n                .text(\"open\", \"Open\")\n                .text(\"close\", \"Close\")\n                .build()?;\n\n            app.set_menu(menu)?;\n\n            app.on_menu_event(move |app_handle: &tauri::AppHandle, event| {\n\n                println!(\"menu event: {:?}\", event.id());\n\n                match event.id().0.as_str() {\n                    \"open\" => {\n                        println!(\"open event\");\n                    }\n                    \"close\" => {\n                        println!(\"close event\");\n                    }\n                    _ => {\n                        println!(\"unexpected menu event\");\n                    }\n                }\n            });\n\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading File with Tauri Upload Plugin in JavaScript\nDESCRIPTION: This example shows how to use the download function from the Tauri upload plugin to download a file from a remote server. It includes a progress callback and optional headers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/upload.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { download } from '@tauri-apps/plugin-upload';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { download } = window.__TAURI__.upload;\n\ndownload(\n  'https://example.com/file-download-link',\n  './path/to/save/my/file.txt',\n  ({ progress, total }) =>\n    console.log(`Downloaded ${progress} of ${total} bytes`), // a callback that will be called with the download progress\n  { 'Content-Type': 'text/plain' } // optional headers to send with the request\n);\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Custom Titlebar Button Functionality\nDESCRIPTION: JavaScript code that implements window control functions (minimize, maximize, close) for the custom titlebar buttons using the Tauri API.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCurrentWindow } from '@tauri-apps/api/window';\n\n// when using `\"withGlobalTauri\": true`, you may use\n// const { getCurrentWindow } = window.__TAURI__.window;\n\nconst appWindow = getCurrentWindow();\n\ndocument\n  .getElementById('titlebar-minimize')\n  ?.addEventListener('click', () => appWindow.minimize());\ndocument\n  .getElementById('titlebar-maximize')\n  ?.addEventListener('click', () => appWindow.toggleMaximize());\ndocument\n  .getElementById('titlebar-close')\n  ?.addEventListener('click', () => appWindow.close());\n```\n\n----------------------------------------\n\nTITLE: Custom Bundling Commands for Tauri Applications\nDESCRIPTION: Advanced bundling commands showing how to separate build and bundle steps, with options for different distribution targets like App Store and DMG bundles.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run tauri build -- --no-bundle\n# bundle for distribution outside the macOS App Store\nnpm run tauri bundle -- --bundles app,dmg\n# bundle for App Store distribution\nnpm run tauri bundle -- --bundles app --config src-tauri/tauri.appstore.conf.json\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Rust in Tauri\nDESCRIPTION: Rust implementation showing how to initialize the notification plugin and send a notification within the application setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n    .plugin(tauri_plugin_notification::init())\n    .setup(|app| {\n        use tauri_plugin_notification::NotificationExt;\n        app.notification()\n            .builder()\n            .title(\"Tauri\")\n            .body(\"Tauri is awesome\")\n            .show()\n            .unwrap();\n\n        Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n```\n\n----------------------------------------\n\nTITLE: Scanning NFC Tags in JavaScript\nDESCRIPTION: JavaScript implementation for scanning NFC tags with options to configure scan type, session behavior, and user interface messages.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scan } from '@tauri-apps/plugin-nfc';\n\nconst scanType = {\n  type: 'ndef', // or 'tag',\n};\n\nconst options = {\n  keepSessionAlive: false,\n  // configure the messages displayed in the \"Scan NFC\" dialog on iOS\n  message: 'Scan a NFC tag',\n  successMessage: 'NFC tag successfully scanned',\n};\n\nconst tag = await scan(scanType, options);\n```\n\n----------------------------------------\n\nTITLE: Accessing State in Tauri Commands\nDESCRIPTION: Demonstrates how to access and modify state within Tauri commands using the State parameter.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nfn increase_counter(state: State<'_, Mutex<AppState>>) -> u32 {\n  let mut state = state.lock().unwrap();\n  state.counter += 1;\n  state.counter\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Focus on New Instance in Tauri\nDESCRIPTION: Rust code demonstrating how to focus the existing window when a new instance of the Tauri application is launched using the Single Instance plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/single-instance.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, Manager};\n\npub fn run() {\n    let mut builder = tauri::Builder::default();\n    #[cfg(desktop)]\n    {\n        builder = builder.plugin(tauri_plugin_single_instance::init(|app, args, cwd| {\n            let _ = app.get_webview_window(\"main\")\n                       .expect(\"no main window\")\n                       .set_focus();\n        }));\n    }\n\n    builder\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Autostart Plugin in JavaScript\nDESCRIPTION: Example demonstrating how to use the autostart plugin in JavaScript to enable, check, and disable automatic startup of the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/autostart.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enable, isEnabled, disable } from '@tauri-apps/plugin-autostart';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { enable, isEnabled, disable } = window.__TAURI__.autostart;\n\n// Enable autostart\nawait enable();\n// Check enable state\nconsole.log(`registered for autostart? ${await isEnabled()}`);\n// Disable autostart\ndisable();\n```\n\n----------------------------------------\n\nTITLE: Advanced IPC Request Mocking with Spy Functions\nDESCRIPTION: Shows how to combine IPC mocking with Vitest spy functions to track invocation details of mocked commands, including verification of call counts and results.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/mocking.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { beforeAll, expect, test, vi } from \"vitest\";\nimport { randomFillSync } from \"crypto\";\n\nimport { mockIPC } from \"@tauri-apps/api/mocks\";\nimport { invoke } from \"@tauri-apps/api/core\";\n\n// jsdom doesn't come with a WebCrypto implementation\nbeforeAll(() => {\n  Object.defineProperty(window, 'crypto', {\n    value: {\n      // @ts-ignore\n      getRandomValues: (buffer) => {\n        return randomFillSync(buffer);\n      },\n    },\n  });\n});\n\n\ntest(\"invoke\", async () => {\n  mockIPC((cmd, args) => {\n    // simulated rust command called \"add\" that just adds two numbers\n    if(cmd === \"add\") {\n      return (args.a as number) + (args.b as number);\n    }\n  });\n\n  // we can use the spying tools provided by vitest to track the mocked function\n  const spy = vi.spyOn(window.__TAURI_INTERNALS__, \"invoke\");\n\n  expect(invoke(\"add\", { a: 12, b: 15 })).resolves.toBe(27);\n  expect(spy).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Sidecar with Arguments in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to execute a sidecar with command line arguments.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command } from '@tauri-apps/plugin-shell';\n// notice that the args array matches EXACTLY what is specified in `capabilities/default.json`.\nconst command = Command.sidecar('binaries/my-sidecar', [\n  'arg1',\n  '-a',\n  '--arg2',\n  'any-string-that-matches-the-validator',\n]);\nconst output = await command.execute();\n```\n\n----------------------------------------\n\nTITLE: Filtering Event Recipients in Tauri\nDESCRIPTION: Demonstrates how to emit events to filtered webview recipients using emit_filter.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, Emitter, EventTarget};\n\n#[tauri::command]\nfn open_file(app: AppHandle, path: std::path::PathBuf) {\n  app.emit_filter(\"open-file\", path, |target| match target {\n    EventTarget::WebviewWindow { label } => label == \"main\" || label == \"file-viewer\",\n    _ => false,\n  }).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tauri updater configuration\nDESCRIPTION: Full JSON configuration for the Tauri updater in tauri.conf.json, including artifact creation, public key, and endpoints. This shows how to set up dynamic endpoints with variable substitution.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"createUpdaterArtifacts\": true\n  },\n  \"plugins\": {\n    \"updater\": {\n      \"pubkey\": \"CONTENT FROM PUBLICKEY.PEM\",\n      \"endpoints\": [\n        \"https://releases.myapp.com/{{target}}/{{arch}}/{{current_version}}\",\n        // or a static github json file\n        \"https://github.com/user/repo/releases/latest/download/latest.json\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for vscode-lldb Debugging\nDESCRIPTION: Configuration file for VS Code that sets up debugging modes for both development and production builds of a Tauri application using the lldb debugger.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/vscode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Tauri Development Debug\",\n      \"cargo\": {\n        \"args\": [\n          \"build\",\n          \"--manifest-path=./src-tauri/Cargo.toml\",\n          \"--no-default-features\"\n        ]\n      },\n      \"preLaunchTask\": \"ui:dev\"\n    },\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Tauri Production Debug\",\n      \"cargo\": {\n        \"args\": [\"build\", \"--release\", \"--manifest-path=./src-tauri/Cargo.toml\"]\n      },\n      \"preLaunchTask\": \"ui:build\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing State in Event Handlers\nDESCRIPTION: Demonstrates accessing and modifying state within window event handlers using the Manager trait.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::Mutex;\nuse tauri::{Builder, Window, WindowEvent, Manager};\n\n#[derive(Default)]\nstruct AppState {\n  counter: u32,\n}\n\n// In an event handler:\nfn on_window_event(window: &Window, _event: &WindowEvent) {\n    // Get a handle to the app so we can get the global state.\n    let app_handle = window.app_handle();\n    let state = app_handle.state::<Mutex<AppState>>();\n\n    // Lock the mutex to mutably access the state.\n    let mut state = state.lock().unwrap();\n    state.counter += 1;\n}\n\nfn main() {\n  Builder::default()\n    .setup(|app| {\n      app.manage(Mutex::new(AppState::default()));\n      Ok(())\n    })\n    .on_window_event(on_window_event)\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Separate Module Command Definition\nDESCRIPTION: Example of defining Tauri commands in a separate module for better organization\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\npub fn my_custom_command() {\n\tprintln!(\"I was invoked from JavaScript!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in Tauri Configuration File\nDESCRIPTION: Example of setting HTTP headers in the Tauri configuration file (tauri.conf.json). This includes security headers and custom headers for the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/http-headers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n //...\n  \"app\":{\n    //...\n    \"security\": {\n      //...\n      \"headers\": {\n        \"Cross-Origin-Opener-Policy\": \"same-origin\",\n        \"Cross-Origin-Embedder-Policy\": \"require-corp\",\n        \"Timing-Allow-Origin\": [\n          \"https://developer.mozilla.org\",\n          \"https://example.com\",\n        ],\n        \"X-Content-Type-Options\": null, // gets ignored\n        \"Access-Control-Expose-Headers\": \"Tauri-Custom-Header\",\n        \"Tauri-Custom-Header\": {\n          \"key1\": \"'value1' 'value2'\",\n          \"key2\": \"'value3'\"\n        }\n      },\n      // notice how the CSP is not defined under headers\n      \"csp\": \"default-src 'self'; connect-src ipc: http://ipc.localhost\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Files in Rust Command\nDESCRIPTION: Example showing how to access bundled resource files in a Tauri command handler using AppHandle\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nfn hello(handle: tauri::AppHandle) -> String {\n    let resource_path = handle.path().resolve(\"lang/de.json\", BaseDirectory::Resource)?;\n\n    let file = std::fs::File::open(&resource_path).unwrap();\n    let lang_de: serde_json::Value = serde_json::from_reader(file).unwrap();\n\n    lang_de.get(\"hello\").unwrap()\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Menu Events in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a menu with custom items and listen to their events in JavaScript. It creates 'Open' and 'Close' menu items with associated actions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@tauri-apps/api/menu';\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'Open',\n      text: 'open',\n      action: () => {\n        console.log('open pressed');\n      },\n    },\n    {\n      id: 'Close',\n      text: 'close',\n      action: () => {\n        console.log('close pressed');\n      },\n    },\n  ],\n});\n\nawait menu.setAsAppMenu();\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tauri Compatibility\nDESCRIPTION: Defines Vite configuration to work with Tauri, including server settings, environment variable handling, and build options for different platforms and debug modes.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nconst host = process.env.TAURI_DEV_HOST;\n\nexport default defineConfig({\n  // prevent vite from obscuring rust errors\n  clearScreen: false,\n  server: {\n    port: 1420,\n    // Tauri expects a fixed port, fail if that port is not available\n    strictPort: true,\n    // if the host Tauri is expecting is set, use it\n    host: host || false,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host,\n          port: 1421,\n        }\n      : undefined,\n\n    watch: {\n      // tell vite to ignore watching `src-tauri`\n      ignored: ['**/src-tauri/**'],\n    },\n  },\n  // Env variables starting with the item of `envPrefix` will be exposed in tauri's source code through `import.meta.env`.\n  envPrefix: ['VITE_', 'TAURI_ENV_*'],\n  build: {\n    // Tauri uses Chromium on Windows and WebKit on macOS and Linux\n    target:\n      process.env.TAURI_ENV_PLATFORM == 'windows'\n        ? 'chrome105'\n        : 'safari13',\n    // don't minify for debug builds\n    minify: !process.env.TAURI_ENV_DEBUG ? 'esbuild' : false,\n    // produce sourcemaps for debug builds\n    sourcemap: !!process.env.TAURI_ENV_DEBUG,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Base-Level Window Menu in Rust\nDESCRIPTION: This snippet shows how to create a base-level native window menu using the MenuBuilder in Rust. It creates a menu with 'Open' and 'Close' items and sets it as the app menu.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\nuse tauri::menu::{MenuBuilder};\n\nfn main() {\n  tauri::Builder::default()\n        .setup(|app| {\n            let menu = MenuBuilder::new(app)\n                .text(\"open\", \"Open\")\n                .text(\"close\", \"Close\")\n                .build()?;\n\n            app.set_menu(menu)?;\n\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tray Events in JavaScript\nDESCRIPTION: Demonstrates how to listen and respond to various tray events such as clicks, double clicks, and mouse movements in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TrayIcon } from '@tauri-apps/api/tray';\n\nconst options = {\n  action: (event) => {\n    switch (event.type) {\n      case 'Click':\n        console.log(\n          `mouse ${event.button} button pressed, state: ${event.buttonState}`\n        );\n        break;\n      case 'DoubleClick':\n        console.log(`mouse ${event.button} button pressed`);\n        break;\n      case 'Enter':\n        console.log(\n          `mouse hovered tray at ${event.rect.position.x}, ${event.rect.position.y}`\n        );\n        break;\n      case 'Move':\n        console.log(\n          `mouse moved on tray at ${event.rect.position.x}, ${event.rect.position.y}`\n        );\n        break;\n      case 'Leave':\n        console.log(\n          `mouse left tray at ${event.rect.position.x}, ${event.rect.position.y}`\n        );\n        break;\n    }\n  },\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Plugin in Rust\nDESCRIPTION: Shows how to use the HTTP plugin to make a GET request in a Rust application, using the reqwest library.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_http::reqwest;\n\ntauri::Builder::default()\n    .plugin(tauri_plugin_http::init())\n    .setup(|app| {\n        let response_data = tauri::async_runtime::block_on(async {\n            let response = reqwest::get(\n                \"https://raw.githubusercontent.com/tauri-apps/tauri/dev/package.json\",\n            )\n            .await\n            .unwrap();\n            response.text().await\n        })?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Dependencies in Cargo.toml\nDESCRIPTION: Demonstrates how to specify Tauri dependencies in the Cargo.toml file. Shows the configuration for both build dependencies and runtime dependencies with version placeholders.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/updating-dependencies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\ntauri-build = \"%version%\"\n\n[dependencies]\ntauri = { version = \"%version%\" }\n```\n\n----------------------------------------\n\nTITLE: Using Barcode Scanner Plugin in JavaScript\nDESCRIPTION: JavaScript code snippet demonstrating how to import and use the barcode scanner plugin for scanning QR codes with a transparent webview.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/barcode-scanner.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scan, Format } from '@tauri-apps/plugin-barcode-scanner';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { scan, Format } = window.__TAURI__.barcodeScanner;\n\n// `windowed: true` actually sets the webview to transparent\n// instead of opening a separate view for the camera\n// make sure your user interface is ready to show what is underneath with a transparent element\nscan({ windowed: true, formats: [Format.QRCode] });\n```\n\n----------------------------------------\n\nTITLE: Handling Tray Events in Rust\nDESCRIPTION: Shows how to listen and respond to tray events in Rust, specifically handling a left-click event to show and focus the main window.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::\n    Manager,\n    tray::{MouseButton, MouseButtonState, TrayIconBuilder, TrayIconEvent}\n};\n\nTrayIconBuilder::new()\n  .on_tray_icon_event(|tray, event| match event {\n    TrayIconEvent::Click {\n      button: MouseButton::Left,\n      button_state: MouseButtonState::Up,\n      ..\n    } => {\n      println!(\"left click pressed and released\");\n      // in this example, let's show and focus the main window when the tray is clicked\n      let app = tray.app_handle();\n      if let Some(window) = app.get_webview_window(\"main\") {\n        let _ = window.show();\n        let _ = window.set_focus();\n      }\n    }\n    _ => {\n      println!(\"unhandled event {event:?}\");\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Unregistering Event Listeners in JavaScript\nDESCRIPTION: Shows how to properly cleanup event listeners using the unlisten function returned by listen().\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { listen } from '@tauri-apps/api/event';\n\nconst unlisten = await listen('download-started', (event) => {});\nunlisten();\n```\n\n----------------------------------------\n\nTITLE: Using Autostart Plugin in Rust\nDESCRIPTION: Complete example showing how to use the autostart plugin in Rust to initialize, enable, check, and disable automatic startup functionality.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/autostart.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            {\n                use tauri_plugin_autostart::MacosLauncher;\n                use tauri_plugin_autostart::ManagerExt;\n\n                app.handle().plugin(tauri_plugin_autostart::init(\n                    MacosLauncher::LaunchAgent,\n                    Some(vec![\"--flag1\", \"--flag2\"]),\n                ));\n\n                // Get the autostart manager\n                let autostart_manager = app.autolaunch();\n                // Enable autostart\n                let _ = autostart_manager.enable();\n                // Check enable state\n                println!(\"registered for autostart? {}\", autostart_manager.is_enabled().unwrap());\n                // Disable autostart\n                let _ = autostart_manager.disable();\n            }\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Menu to Tray Icon in Rust\nDESCRIPTION: Shows how to create a menu and attach it to the tray icon in Rust, including setting the menu to appear on left click.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::\n  menu::{Menu, MenuItem},\n  tray::TrayIconBuilder,\n};\n\nlet quit_i = MenuItem::with_id(app, \"quit\", \"Quit\", true, None::<&str>)?;\nlet menu = Menu::with_items(app, &[&quit_i])?;\n\nlet tray = TrayIconBuilder::new()\n  .menu(&menu)\n  .menu_on_left_click(true)\n  .build(app)?;\n```\n\n----------------------------------------\n\nTITLE: Creating Predefined Menu in Rust\nDESCRIPTION: This snippet shows how to create a menu with predefined items in Rust. It uses built-in menu items like Copy, Undo, Redo, Cut, Paste, and Select All, along with a custom Copy item.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\nuse tauri::menu::{MenuBuilder, PredefinedMenuItem};\n\nfn main() {\n  tauri::Builder::default()\n        .setup(|app| {\n      let menu = MenuBuilder::new(app)\n                .copy()\n                .separator()\n                .undo()\n                .redo()\n                .cut()\n                .paste()\n                .select_all()\n                .item(&PredefinedMenuItem::copy(app, Some(\"custom text\"))?)\n                .build()?;\n            app.set_menu(menu)?;\n\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Checking NFC Availability in JavaScript\nDESCRIPTION: JavaScript code to check if the device supports NFC functionality before attempting to use scan and write APIs.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isAvailable } from '@tauri-apps/plugin-nfc';\n\nconst canScanNfc = await isAvailable();\n```\n\n----------------------------------------\n\nTITLE: Using Global Shortcut Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Tauri Global Shortcut plugin to register a global shortcut in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { register } from '@tauri-apps/plugin-global-shortcut';\nawait register('CommandOrControl+Shift+C', () => {\n  console.log('Shortcut triggered');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Writing to a File in JavaScript\nDESCRIPTION: Demonstrates how to create a file, write to it, and close it using the fs plugin in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, BaseDirectory } from '@tauri-apps/plugin-fs';\nconst file = await create('foo/bar.txt', { baseDir: BaseDirectory.AppData });\nawait file.write(new TextEncoder().encode('Hello world'));\nawait file.close();\n```\n\n----------------------------------------\n\nTITLE: Configuring Webview Data Access Restrictions in Tauri Fs Plugin\nDESCRIPTION: Implements platform-specific deny rules to prevent access to sensitive webview data directories on Linux and Windows systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/scope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[permission]]\nidentifier = \"deny-webview-data-linux\"\ndescription = '''\nThis denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and\nconfiguration values are stored here.\nAllowing access can lead to sensitive information disclosure and\nshould be well considered.\n'''\nplatforms = [\"linux\"]\n\n[[scope.deny]]\npath = \"$APPLOCALDATA/**\"\n\n[[permission]]\nidentifier = \"deny-webview-data-windows\"\ndescription = '''\nThis denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and\nconfiguration values are stored here.\nAllowing access can lead to sensitive information disclosure and\nshould be well considered.\n'''\nplatforms = [\"windows\"]\n\n[[scope.deny]]\npath = \"$APPLOCALDATA/EBWebView/**\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Manual Window Dragging Implementation\nDESCRIPTION: Event listener that manually implements window dragging functionality and double-click maximize, replacing the data-tauri-drag-region attribute approach.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.getElementById('titlebar')?.addEventListener('mousedown', (e) => {\n  if (e.buttons === 1) {\n    // Primary (left) button\n    e.detail === 2\n      ? appWindow.toggleMaximize() // Maximize on double click\n      : appWindow.startDragging(); // Else start dragging\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Request Parameters in Rust\nDESCRIPTION: This snippet shows how to set custom request timeout, proxy, and headers when checking for updates using the Tauri updater plugin in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\nlet update = app\n  .updater_builder()\n  .timeout(std::time::Duration::from_secs(30))\n  .proxy(\"<proxy-url>\".parse().expect(\"invalid URL\"))\n  .header(\"Authorization\", \"Bearer <token>\")\n  .build()?\n  .check()\n  .await?;\n```\n\n----------------------------------------\n\nTITLE: Loading SQL Database in JavaScript\nDESCRIPTION: These snippets demonstrate how to load a SQL database using the plugin in JavaScript for different database engines (SQLite, MySQL, PostgreSQL).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Database from '@tauri-apps/plugin-sql';\n// when using `\"withGlobalTauri\": true`, you may use\n// const Database = window.__TAURI__.sql;\n\nconst db = await Database.load('sqlite:test.db');\nawait db.execute('INSERT INTO ...');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Database from '@tauri-apps/plugin-sql';\n// when using `\"withGlobalTauri\": true`, you may use\n// const Database = window.__TAURI__.sql;\n\nconst db = await Database.load('mysql://user:password@host/test');\nawait db.execute('INSERT INTO ...');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Database from '@tauri-apps/plugin-sql';\n// when using `\"withGlobalTauri\": true`, you may use\n// const Database = window.__TAURI__.sql;\n\nconst db = await Database.load('postgres://user:password@host/test');\nawait db.execute('INSERT INTO ...');\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Events in JavaScript\nDESCRIPTION: Demonstrates two ways to handle menu click events in JavaScript: using a shared click handler and using dedicated handlers for each menu item.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@tauri-apps/api/menu';\n\nfunction onTrayMenuClick(itemId) {\n  // itemId === 'quit'\n}\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'quit',\n      text: 'Quit',\n      action: onTrayMenuClick,\n    },\n  ],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@tauri-apps/api/menu';\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'quit',\n      text: 'Quit',\n      action: () => {\n        console.log('quit pressed');\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Tauri Application Entry\nDESCRIPTION: Main application entry point that initializes and runs the Tauri application with default configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .run(tauri::generate_context!())\n        .expect(\"unable to run Tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Permissions in Tauri Capabilities\nDESCRIPTION: JSON configuration for defining allowed and denied URLs for HTTP requests, necessary for the plugin's security model.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/http-client.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    {\n      \"identifier\": \"http:default\",\n      \"allow\": [{ \"url\": \"https://*.tauri.app\" }],\n      \"deny\": [{ \"url\": \"https://private.tauri.app\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Instance Plugin with Deep Link in Rust\nDESCRIPTION: Rust code to configure the single instance plugin with deep link support in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    let mut builder = tauri::Builder::default();\n\n    #[cfg(desktop)]\n    {\n        builder = builder.plugin(tauri_plugin_single_instance::init(|_app, argv, _cwd| {\n          println!(\"a new app instance was opened with {argv:?} and the deep link event was already triggered\");\n          // when defining deep link schemes at runtime, you must also check `argv` here\n        }));\n    }\n\n    builder = builder.plugin(tauri_plugin_deep_link::init());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attachments to Notifications in Tauri\nDESCRIPTION: JavaScript example demonstrating how to add media attachments to a notification using asset or file URLs.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sendNotification } from '@tauri-apps/plugin-notification';\n\nsendNotification({\n  title: 'New Image',\n  body: 'Check out this picture',\n  attachments: [\n    {\n      id: 'image-1',\n      url: 'asset:///notification-image.jpg',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Process Plugin in Tauri JavaScript\nDESCRIPTION: Shows how to use the Process plugin in a Tauri JavaScript project. It includes adding the npm dependency and using the plugin to exit and relaunch the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-process\": \"^2.0.0\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit, relaunch } from '@tauri-apps/plugin-process';\nawait exit(0);\nawait relaunch();\n```\n\n----------------------------------------\n\nTITLE: Opening URLs with Shell Plugin in Tauri Rust\nDESCRIPTION: Shows how to use the Shell plugin to open URLs in a Tauri Rust application. This snippet demonstrates initializing the plugin and using it to open a web page.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            app.shell().open(\"https://github.com/tauri-apps/tauri\", None)?;\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard Plugin in Rust\nDESCRIPTION: Rust code demonstrating how to write to and read from the clipboard using the plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/clipboard.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_clipboard_manager::ClipboardExt;\n\napp.clipboard().write_text(\"Tauri is awesome!\".to_string()).unwrap();\n\n// Read content from clipboard\nlet content = app.clipboard().read_text();\nprintln!(\"{:?}\", content.unwrap());\n// Prints \"Tauri is awesome!\" to the terminal\n```\n\n----------------------------------------\n\nTITLE: Building Ask Dialog in Rust\nDESCRIPTION: Implementation of a blocking question dialog with custom buttons in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::{DialogExt, MessageDialogButtons};\n\nlet answer = app.dialog()\n        .message(\"Tauri is Awesome\")\n        .title(\"Tauri is Awesome\")\n        .buttons(MessageDialogButtons::OkCancelCustom(\"Absolutely\", \"Totally\"))\n        .blocking_show();\n```\n\n----------------------------------------\n\nTITLE: Mixing Inline and Predefined Capabilities\nDESCRIPTION: Example of combining inline capability definitions with references to predefined capabilities in the Tauri configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"security\": {\n      \"capabilities\": [\n        {\n          \"identifier\": \"my-capability\",\n          \"description\": \"My application capability used for all windows\",\n          \"windows\": [\"*\"],\n          \"permissions\": [\"fs:default\", \"allow-home-read-extended\"]\n        },\n        \"my-second-capability\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Handler\nDESCRIPTION: Example of implementing the on_navigation lifecycle hook to handle and validate web view navigation events.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::plugin::Builder;\n\nBuilder::new(\"<plugin-name>\")\n  .on_navigation(|window, url| {\n    println!(\"window {} is navigating to {}\", window.label(), url);\n    url.scheme() != \"forbidden\"\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Global File System Scope in Tauri\nDESCRIPTION: This JSON snippet demonstrates how to set up a global file system scope for Tauri applications. It allows access to the app data directory and its subdirectories.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    {\n      \"identifier\": \"fs:scope\",\n      \"allow\": [{ \"path\": \"$APPDATA\" }, { \"path\": \"$APPDATA/**\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tauri Configuration in TOML Format\nDESCRIPTION: Example of Tauri configuration using TOML format, demonstrating the same configuration options as the JSON5 example but in TOML syntax.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build]\ndev-url = \"http://localhost:3000\"\n# start the dev server\nbefore-dev-command = \"npm run dev\"\n\n[bundle]\nactive = true\nicon = [\"icons/app.png\"]\n\n[[app.windows]]\ntitle = \"MyApp\"\n\n[plugins.updater]\npubkey = \"updater pub key\"\nendpoints = [\"https://my.app.updater/{{target}}/{{current_version}}\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Predefined Menu in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a menu with predefined items in JavaScript. It uses built-in menu items like Copy, Undo, Redo, Cut, Paste, and Select All.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu, PredefinedMenuItem } from '@tauri-apps/api/menu';\n\nconst copy = await PredefinedMenuItem.new({\n  text: 'copy-text',\n  item: 'Copy',\n});\n\nconst separator = await PredefinedMenuItem.new({\n  text: 'separator-text',\n  item: 'Separator',\n});\n\nconst undo = await PredefinedMenuItem.new({\n  text: 'undo-text',\n  item: 'Undo',\n});\n\nconst redo = await PredefinedMenuItem.new({\n  text: 'redo-text',\n  item: 'Redo',\n});\n\nconst cut = await PredefinedMenuItem.new({\n  text: 'cut-text',\n  item: 'Cut',\n});\n\nconst paste = await PredefinedMenuItem.new({\n  text: 'paste-text',\n  item: 'Paste',\n});\n\nconst select_all = await PredefinedMenuItem.new({\n  text: 'select_all-text',\n  item: 'SelectAll',\n});\n\nconst menu = await Menu.new({\n  items: [copy, separator, undo, redo, cut, paste, select_all],\n});\n\nawait menu.setAsAppMenu();\n```\n\n----------------------------------------\n\nTITLE: Async State Management in Commands\nDESCRIPTION: Shows how to handle state in async commands using Tokio's async Mutex with proper error handling.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nasync fn increase_counter(state: State<'_, Mutex<AppState>>) -> Result<u32, ()> {\n  let mut state = state.lock().await;\n  state.counter += 1;\n  Ok(state.counter)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Programmatically in Rust\nDESCRIPTION: Creates Tauri windows programmatically in Rust by setting up multiple WebviewWindowBuilder instances with different labels and properties in the app's setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/capabilities-for-windows-and-platforms.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n    .invoke_handler(tauri::generate_handler![greet])\n    .setup(|app| {\n        let webview_url = tauri::WebviewUrl::App(\"index.html\".into());\n        // First window\n        tauri::WebviewWindowBuilder::new(app, \"first\", webview_url.clone())\n            .title(\"First\")\n            .build()?;\n        // Second window\n        tauri::WebviewWindowBuilder::new(app, \"second\", webview_url)\n            .title(\"Second\")\n            .build()?;\n        Ok(())\n    })\n    .run(context)\n    .expect(\"error while running tauri application\");\n```\n\n----------------------------------------\n\nTITLE: Initializing CLI Plugin in Rust\nDESCRIPTION: Code snippet showing how to initialize the CLI plugin in the Tauri application's lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_cli::init());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments for iOS Plugin\nDESCRIPTION: Demonstrates how to define and parse command arguments for an iOS Tauri plugin. The example includes structs for nested arguments and shows how to use them in a command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nclass OpenAppArgs: Decodable {\n  let name: String\n  var timeout: Int?\n}\n\nclass OpenArgs: Decodable {\n  let requiredArg: String\n  var allowEdit: Bool?\n  var quality: UInt8?\n  var app: OpenAppArgs?\n}\n\nclass ExamplePlugin: Plugin {\n\t@objc public func openCamera(_ invoke: Invoke) throws {\n    let args = try invoke.parseArgs(OpenArgs.self)\n\n    invoke.resolve([\"path\": \"/path/to/photo.jpg\"])\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Localhost Plugin in Tauri App\nDESCRIPTION: Rust code demonstrating how to configure the localhost plugin with a specific port and create a webview window using the localhost URL in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/localhost.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{webview::WebviewWindowBuilder, WebviewUrl};\n\npub fn run() {\n  let port: u16 = 9527;\n\n  tauri::Builder::default()\n      .plugin(tauri_plugin_localhost::Builder::new(port).build())\n      .setup(move |app| {\n          let url = format!(\"http://localhost:{}\", port).parse().unwrap();\n          WebviewWindowBuilder::new(app, \"main\".to_string(), WebviewUrl::External(url))\n              .title(\"Localhost Example\")\n              .build()?;\n          Ok(())\n      })\n      .run(tauri::generate_context!())\n      .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Default Permissions of the Filesystem Plugin\nDESCRIPTION: The default permission configuration file for the Tauri filesystem plugin, showing the schema reference, permission description, and the granted permission set.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n\"$schema\" = \"schemas/schema.json\"\n\n[default]\ndescription = \"\"\"\n# Tauri `fs` default permissions\n\nThis configuration file defines the default permissions granted\nto the filesystem.\n\n### Granted Permissions\n\nThis default permission set enables all read-related commands and\nallows access to the `$APP` folder and sub directories created in it.\nThe location of the `$APP` folder depends on the operating system,\nwhere the application is run.\n\nIn general the `$APP` folder needs to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\n### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n\"\"\"\npermissions = [\"read-all\", \"scope-app-recursive\", \"deny-default\"]\n\n```\n\n----------------------------------------\n\nTITLE: Webview Event Listening in Rust\nDESCRIPTION: Demonstrates how to listen to webview-specific events in Rust using the Tauri Manager trait.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{Listener, Manager};\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let webview = app.get_webview_window(\"main\").unwrap();\n      webview.listen(\"logged-in\", |event| {\n        let session_token = event.data;\n        // save token..\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Building File Picker Dialog in Rust\nDESCRIPTION: Implementation of a blocking file picker dialog in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::DialogExt;\n\nlet file_path = app.dialog().file().blocking_pick_file();\n```\n\n----------------------------------------\n\nTITLE: Using the Opener Plugin in JavaScript\nDESCRIPTION: Example of how to use the Opener plugin in JavaScript to open files with default or specified applications.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/opener.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openPath } from '@tauri-apps/plugin-opener';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { openPath } = window.__TAURI__.opener;\n\n// opens a file using the default program:\nawait openPath('/path/to/file');\n// opens a file using `vlc` command on Windows:\nawait openPath('C:/path/to/file', 'vlc');\n```\n\n----------------------------------------\n\nTITLE: Filtering NFC Tags in Rust\nDESCRIPTION: Rust implementation for filtering NFC tag scans based on mime type, URI parameters, and technology types for specific tag detection.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n  .setup(|app| {\n    #[cfg(mobile)]\n    {\n      use tauri_plugin_nfc::NfcExt;\n\n      app.handle().plugin(tauri_plugin_nfc::init());\n\n      let tag = app\n        .nfc()\n        .scan(tauri_plugin_nfc::ScanRequest {\n            kind: tauri_plugin_nfc::ScanKind::Ndef {\n                mime_type: Some(\"text/plain\".to_string()),\n                uri: Some(tauri_plugin_nfc::UriFilter {\n                  scheme: Some(\"https\".to_string()),\n                  host: Some(\"my.domain.com\".to_string()),\n                  path_prefix: Some(\"/app\".to_string()),\n                }),\n                tech_list: Some(vec![\n                  vec![tauri_plugin_nfc::TechKind::Ndef],\n                ]),\n            },\n        })?\n        .tag;\n    }\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Listening to Webview Events in TypeScript\nDESCRIPTION: Shows how to listen to webview-specific events using the getCurrentWebviewWindow API. Demonstrates handling webview-scoped events.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentWebviewWindow } from '@tauri-apps/api/webviewWindow';\n\nconst appWebview = getCurrentWebviewWindow();\nappWebview.listen<string>('logged-in', (event) => {\n  localStorage.setItem('session-token', event.payload);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Level Menu in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a multi-level menu with submenus in JavaScript. It creates 'File' and 'Edit' submenus with multiple items, along with a top-level 'Quit' item.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu, MenuItem, Submenu } from '@tauri-apps/api/menu';\n\nconst fileSubmenu = await Submenu.new({\n  text: 'File',\n  items: [\n    await MenuItem.new({\n      id: 'new',\n      text: 'New',\n      action: () => {\n        console.log('New clicked');\n      },\n    }),\n    await MenuItem.new({\n      id: 'open',\n      text: 'Open',\n      action: () => {\n        console.log('Open clicked');\n      },\n    }),\n    await MenuItem.new({\n      id: 'save_as',\n      text: 'Save As...',\n      action: () => {\n        console.log('Save As clicked');\n      },\n    }),\n  ],\n});\n\nconst editSubmenu = await Submenu.new({\n  text: 'Edit',\n  items: [\n    await MenuItem.new({\n      id: 'undo',\n      text: 'Undo',\n      action: () => {\n        console.log('Undo clicked');\n      },\n    }),\n    await MenuItem.new({\n      id: 'redo',\n      text: 'Redo',\n      action: () => {\n        console.log('Redo clicked');\n      },\n    }),\n  ],\n});\n\nconst menu = await Menu.new({\n  items: [\n    fileSubmenu,\n    editSubmenu,\n    await MenuItem.new({\n      id: 'quit',\n      text: 'Quit',\n      action: () => {\n        console.log('Quit pressed');\n      },\n    }),\n  ],\n});\n\nmenu.setAsAppMenu();\n```\n\n----------------------------------------\n\nTITLE: Initializing Biometric Plugin in Rust Application\nDESCRIPTION: Code snippet showing how to initialize the biometric plugin in the Tauri application's lib.rs file. The plugin is conditionally initialized only on mobile platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(mobile)]\n            app.handle().plugin(tauri_plugin_biometric::Builder::new().build());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI Arguments in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to get and use CLI argument matches from within the Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getMatches } from '@tauri-apps/plugin-cli';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { getMatches } = window.__TAURI__.cli;\n\nconst matches = await getMatches();\nif (matches.subcommand?.name === 'run') {\n  // `./your-app run $ARGS` was executed\n  const args = matches.subcommand.matches.args;\n  if (args.debug?.value === true) {\n    // `./your-app run --debug` was executed\n  }\n  if (args.release?.value === true) {\n    // `./your-app run --release` was executed\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Non-Blocking File Save Dialog in Rust\nDESCRIPTION: Implementation of a non-blocking file save dialog with file type filters in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::DialogExt;\n\napp.dialog()\n    .file()\n    .add_filter(\"My Filter\", &[\"png\", \"jpeg\"])\n    .pick_file(|file_path| {\n        // return a file_path `Option`, or `None` if the user closes the dialog\n    });\n```\n\n----------------------------------------\n\nTITLE: Opening Files in Read Mode - JavaScript\nDESCRIPTION: Opens a file in read-only mode, reads its contents into a buffer, and decodes it as text.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open, BaseDirectory } from '@tauri-apps/plugin-fs';\nconst file = await open('foo/bar.txt', {\n  read: true,\n  baseDir: BaseDirectory.AppData,\n});\n\nconst stat = await file.stat();\nconst buf = new Uint8Array(stat.size);\nawait file.read(buf);\nconst textContents = new TextDecoder().decode(buf);\nawait file.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Links in Tauri Desktop Application\nDESCRIPTION: Rust code demonstrating how to initialize and register deep links in a Tauri desktop application. Includes platform-specific registration for Windows and Linux using the register_all function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_deep_link::DeepLinkExt;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_deep_link::init())\n        .setup(|app| {\n            #[cfg(any(windows, target_os = \"linux\"))]\n            {\n                use tauri_plugin_deep_link::DeepLinkExt;\n                app.deep_link().register_all()?;\n            }\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Command Arguments Implementation\nDESCRIPTION: Shows how to implement commands that accept arguments from JavaScript\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-rust.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nfn my_custom_command(invoke_message: String) {\n\tprintln!(\"I was invoked from JavaScript, with this message: {}\", invoke_message);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Code in Tauri Config\nDESCRIPTION: JSON configuration for setting a custom version code in tauri.conf.json for Android builds. This allows specifying a custom version code scheme instead of using the default derived version code.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/google-play.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"android\": {\n      \"versionCode\": 100\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Biometric Authentication in Rust\nDESCRIPTION: Rust code that demonstrates how to prompt the user for biometric authentication using the Tauri biometric plugin's authenticate method with configurable AuthOptions for both Android and iOS platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_biometric::{BiometricExt, AuthOptions};\n\nfn bio_auth(app_handle: tauri::AppHandle) {\n\n    let options = AuthOptions {\n        // Set True if you want the user to be able to authenticate using phone password\n        allow_device_credential:false,\n        cancel_title: Some(\"Feature won't work if Canceled\".to_string()),\n\n        // iOS only feature\n        fallback_title: Some(\"Sorry, authentication failed\".to_string()),\n\n        // Android only features\n        title: Some(\"Tauri feature\".to_string()),\n        subtitle: Some(\"Authenticate to access the locked Tauri function\".to_string()),\n        confirmation_required: Some(true),\n    };\n\n    // if the authentication was successful, the function returns Result::Ok()\n    // otherwise returns Result::Error()\n    match app_handle.biometric().authenticate(\"This feature is locked\".to_string(), options) {\n        Ok(_) => {\n            println!(\"Hooray! Successfully Authenticated! We can now perform the locked Tauri function!\");\n        }\n        Err(e) => {\n            println!(\"Oh no! Authentication failed because : {e}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting OS Platform in Rust\nDESCRIPTION: Rust code example showing how to access the current operating system platform using the OS plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/os-info.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet platform = tauri_plugin_os::platform();\nprintln!(\"Platform: {}\", platform);\n// Prints \"windows\" to the terminal\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Node.js Sidecar Script\nDESCRIPTION: A simple Node.js script that processes commands from command line arguments and responds through stdout. It handles a 'ping' command and returns an error for unknown commands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/sidecar-nodejs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst command = process.argv[2];\n\nswitch (command) {\n  case 'ping':\n    const message = process.argv[3];\n    console.log(`pong, ${message}`);\n    break;\n  default:\n    console.error(`unknown command ${command}`);\n    process.exit(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Opener Plugin in Rust\nDESCRIPTION: Example of how to use the Opener plugin in Rust to open files with default or specified applications using the OpenerExt trait.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/opener.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_opener::OpenerExt;\n\n// opens a file using the default program:\napp.opener().open_path(\"/path/to/file\", None::<&str>);\n// opens a file using `vlc` command on Windows:\napp.opener().open_path(\"C:/path/to/file\", Some(\"vlc\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Default Window Icon as Tray Icon in Rust\nDESCRIPTION: Shows how to use the application's default window icon as the tray icon in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet tray = TrayIconBuilder::new()\n  .icon(app.default_window_icon().unwrap().clone())\n  .build(app)?;\n```\n\n----------------------------------------\n\nTITLE: Combining Allow and Deny Scopes in Tauri Fs Plugin\nDESCRIPTION: Demonstrates merging allow and deny scopes to create a balanced access control configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/scope.mdx#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[set]]\nidentifier = \"scope-applocaldata-reasonable\"\ndescription = '''\nThis scope set allows access to the `APPLOCALDATA` folder and\nsubfolders except for linux,\nwhile it denies access to dangerous Tauri relevant files and\nfolders by default on windows.\n'''\npermissions = [\"scope-applocaldata-recursive\", \"deny-default\"]\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Tauri Clipboard plugin to write and read text from the clipboard in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { writeText, readText } from '@tauri-apps/plugin-clipboard-manager';\nawait writeText('Tauri is awesome!');\nassert(await readText(), 'Tauri is awesome!');\n```\n\n----------------------------------------\n\nTITLE: Writing to NFC Tags in Rust (Low-level API)\nDESCRIPTION: Rust code demonstrating the low-level API for writing data to NFC tags by creating NFC records and handling the write operation.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n  .setup(|app| {\n    #[cfg(mobile)]\n    {\n      use tauri_plugin_nfc::NfcExt;\n\n      app.handle().plugin(tauri_plugin_nfc::init());\n\n      app\n        .nfc()\n        .write(vec![\n          tauri_plugin_nfc::NfcRecord {\n            format: tauri_plugin_nfc::NFCTypeNameFormat::NfcWellKnown,\n            kind: vec![0x55], // URI record\n            id: vec![],\n            payload: vec![], // insert payload here\n          }\n        ])?;\n    }\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Tauri Integration (TypeScript)\nDESCRIPTION: TypeScript configuration for Nuxt to work with Tauri, enabling SSG, setting up the development server, and configuring Vite for better Tauri support. It includes settings for environment variables and consistent port usage.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nuxt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // (optional) Enable the Nuxt devtools\n  devtools: { enabled: true },\n  // Enable SSG\n  ssr: false,\n  // Enables the development server to be discoverable by other devices when running on iOS physical devices\n  devServer: { host: process.env.TAURI_DEV_HOST || 'localhost' },\n  vite: {\n    // Better support for Tauri CLI output\n    clearScreen: false,\n    // Enable environment variables\n    // Additional environment variables can be found at\n    // https://v2.tauri.app/reference/environment-variables/\n    envPrefix: ['VITE_', 'TAURI_'],\n    server: {\n      // Tauri requires a consistent port\n      strictPort: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Shortcut in Rust\nDESCRIPTION: Rust code example showing how to register and handle global shortcuts using the global-shortcut plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/global-shortcut.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            {\n                use tauri_plugin_global_shortcut::{Code, GlobalShortcutExt, Modifiers, Shortcut, ShortcutState};\n\n                let ctrl_n_shortcut = Shortcut::new(Some(Modifiers::CONTROL), Code::KeyN);\n                app.handle().plugin(\n                    tauri_plugin_global_shortcut::Builder::new().with_handler(move |_app, shortcut, event| {\n                        println!(\"{:?}\", shortcut);\n                        if shortcut == &ctrl_n_shortcut {\n                            match event.state() {\n                              ShortcutState::Pressed => {\n                                println!(\"Ctrl-N Pressed!\");\n                              }\n                              ShortcutState::Released => {\n                                println!(\"Ctrl-N Released!\");\n                              }\n                            }\n                        }\n                    })\n                    .build(),\n                )?;\n\n                app.global_shortcut().register(ctrl_n_shortcut)?\n            }\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking NFC Availability in Rust\nDESCRIPTION: Rust code to check if the device supports NFC functionality by initializing the plugin and querying its availability.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n  .setup(|app| {\n    #[cfg(mobile)]\n    {\n      use tauri_plugin_nfc::NfcExt;\n\n      app.handle().plugin(tauri_plugin_nfc::init());\n\n      let can_scan_nfc = app.nfc().is_available()?;\n    }\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Saving Window State in JavaScript\nDESCRIPTION: Example of using the saveWindowState function to manually save the window state in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { saveWindowState, StateFlags } from '@tauri-apps/plugin-window-state';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { saveWindowState, StateFlags } = window.__TAURI__.windowState;\n\nsaveWindowState(StateFlags.ALL);\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Files in JavaScript\nDESCRIPTION: Example showing how to access bundled resource files using JavaScript with the Tauri API\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolveResource } from '@tauri-apps/api/path';\nimport { readTextFile } from '@tauri-apps/plugin-fs';\n\nconst resourcePath = await resolveResource('lang/de.json');\nconst langDe = JSON.parse(await readTextFile(resourcePath));\nconsole.log(langDe.hello); // This will print 'Guten Tag!' to the devtools console\n```\n\n----------------------------------------\n\nTITLE: Opening File Selector Dialog in JavaScript\nDESCRIPTION: Implementation of a file/directory selection dialog with multiple selection options.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open } from '@tauri-apps/plugin-dialog';\n\nconst file = await open({\n  multiple: false,\n  directory: false,\n});\nconsole.log(file);\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Rust in Tauri\nDESCRIPTION: Rust code example showing how to use the reqwest crate re-exported by the HTTP plugin to make a GET request.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/http-client.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_http::reqwest;\n\nlet res = reqwest::get(\"http://my.api.host/data.json\").await;\nprintln!(\"{:?}\", res.status()); // e.g. 200\nprintln!(\"{:?}\", res.text().await); // e.g Ok(\"{ Content }\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom File Writing Command in Rust\nDESCRIPTION: Implementation of a new command 'write_custom_file' in the commands.rs file that writes user input to a temporary file, extending the plugin's functionality.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, command, Runtime};\n\nuse crate::models::*;\nuse crate::Result;\nuse crate::TestExt;\n\n#[command]\npub(crate) async fn ping<R: Runtime>(\n    app: AppHandle<R>,\n    payload: PingRequest,\n) -> Result<PingResponse> {\n    app.test1().ping(payload)\n}\n\n#[command]\npub(crate) async fn write_custom_file<R: Runtime>(\n    user_input: String,\n    app: AppHandle<R>,\n) -> Result<String> {\n    std::fs::write(app.path().temp_dir().unwrap(), user_input)?;\n    Ok(\"success\".to_string())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Store Plugin in Rust\nDESCRIPTION: Example of using the Tauri Store plugin in Rust to create, read, and write to a persistent store using the StoreExt trait.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Wry;\nuse tauri_plugin_store::StoreExt;\nuse serde_json::json;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_store::Builder::default().build())\n        .setup(|app| {\n            // Create a new store or load the existing one\n            // this also put the store in the app's resource table\n            // so your following calls `store` calls (from both rust and js)\n            // will reuse the same store\n            let store = app.store(\"store.json\")?;\n\n            // Note that values must be serde_json::Value instances,\n            // otherwise, they will not be compatible with the JavaScript bindings.\n            store.set(\"some-key\", json!({ \"value\": 5 }));\n\n            // Get a value from the store.\n            let value = store.get(\"some-key\").expect(\"Failed to get value from store\");\n            println!(\"{}\", value); // {\"value\":5}\n\n            // Remove the store from the resource table\n            store.close_resource();\n\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tauri Application with egui Integration\nDESCRIPTION: Demonstrates how to integrate the egui login form into a Tauri application. Creates an egui window, initializes the login layout, and handles the authentication result in a separate thread.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Manager;\nfn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      app.wry_plugin(tauri_egui::EguiPluginBuilder::new(app.handle()));\n\n      // the closure that is called when the submit button is clicked - validate the password\n      let password_checker: Box<dyn Fn(&str) -> bool + Send> = Box::new(|s| s == \"tauri-egui-released\");\n\n      let (egui_app, rx) = LoginLayout::new(\n        password_checker,\n        vec![\"John\".into(), \"Jane\".into(), \"Joe\".into()],\n      );\n      let native_options = tauri_egui::eframe::NativeOptions {\n        resizable: false,\n        ..Default::default()\n      };\n\n      app\n        .state::<tauri_egui::EguiPluginHandle>()\n        .create_window(\n          \"login\".to_string(),\n          Box::new(|_cc| Box::new(egui_app)),\n          \"Sign in\".into(),\n          native_options,\n        )\n        .unwrap();\n\n      // wait for the window to be closed with the user data on another thread\n      // you don't need to spawn a thread when using e.g. an async command\n      std::thread::spawn(move || {\n        if let Ok(signal) = rx.recv() {\n          dbg!(signal);\n        }\n      });\n\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sidecar from Rust\nDESCRIPTION: Rust code showing how to spawn and interact with a sidecar binary using the shell plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\nuse tauri_plugin_shell::process::CommandEvent;\n\nlet sidecar_command = app.shell().sidecar(\"my-sidecar\").unwrap();\nlet (mut rx, mut _child) = sidecar_command\n  .spawn()\n  .expect(\"Failed to spawn sidecar\");\n\ntauri::async_runtime::spawn(async move {\n  // read events such as stdout\n  while let Some(event) = rx.recv().await {\n    if let CommandEvent::Stdout(line_bytes) = event {\n      let line = String::from_utf8_lossy(&line_bytes);\n      window\n        .emit(\"message\", Some(format!(\"'{}'\", line)))\n        .expect(\"failed to emit event\");\n      // write to stdin\n      child.write(\"message from Rust\\n\".as_bytes()).unwrap();\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Request Parameters in JavaScript\nDESCRIPTION: This snippet demonstrates how to set custom request timeout, proxy, and headers when checking for updates using the Tauri updater plugin in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { check } from '@tauri-apps/plugin-updater';\n\nconst update = await check({\n  proxy: '<proxy url>',\n  timeout: 30000 /* milliseconds */,\n  headers: {\n    Authorization: 'Bearer <token>',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking and Installing Updates with Rust in Tauri\nDESCRIPTION: This snippet shows how to check for updates, download, and install them using the Tauri updater plugin in Rust. It includes progress tracking and app restart.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\n\npub fn run() {\n  tauri::Builder::default()\n    .setup(|app| {\n      let handle = app.handle().clone();\n      tauri::async_runtime::spawn(async move {\n        update(handle).await.unwrap();\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .unwrap();\n}\n\nasync fn update(app: tauri::AppHandle) -> tauri_plugin_updater::Result<()> {\n  if let Some(update) = app.updater()?.check().await? {\n    let mut downloaded = 0;\n\n    // alternatively we could also call update.download() and update.install() separately\n    update\n      .download_and_install(\n        |chunk_length, content_length| {\n          downloaded += chunk_length;\n          println!(\"downloaded {downloaded} from {content_length:?}\");\n        },\n        || {\n          println!(\"download finished\");\n        },\n      )\n      .await?;\n\n    println!(\"update installed\");\n    app.restart();\n  }\n\n  Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base-Level Window Menu in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a base-level native window menu using the Menu.new static function in JavaScript. It creates a menu with a 'Quit' item and sets it as the app menu.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Menu } from '@tauri-apps/api/menu';\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'quit',\n      text: 'Quit',\n      action: () => {\n        console.log('quit pressed');\n      },\n    },\n  ],\n});\n\n// If a window was not created with an explicit menu or had one set explicitly,\n// this menu will be assigned to it.\nmenu.setAsAppMenu().then((res) => {\n  console.log('menu set success', res);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plugin APIs in Tauri Application\nDESCRIPTION: Example of how to use plugin APIs in a Tauri application by accessing the plugin's exposed functionality.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_global_shortcut::GlobalShortcutExt;\n\ntauri::Builder::default()\n  .plugin(tauri_plugin_global_shortcut::init())\n  .setup(|app| {\n    app.global_shortcut().register(...);\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Formatting in Rust\nDESCRIPTION: Example of customizing the log format using the log plugin builder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .format(|out, message, record| {\n    out.finish(format_args!(\n      \"[{} {}] {}\",\n      record.level(),\n      record.target(),\n      message\n    ))\n  })\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Building Non-Blocking File Picker Dialog in Rust\nDESCRIPTION: Implementation of a non-blocking file picker dialog in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::DialogExt;\n\napp.dialog().file().pick_file(|file_path| {\n    // return a file_path `Option`, or `None` if the user closes the dialog\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Plugin Permissions\nDESCRIPTION: JSON configuration for setting up permissions for the Tauri Shell plugin in the capabilities file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    {\n      \"identifier\": \"shell:allow-execute\",\n      \"allow\": [\n        {\n          \"name\": \"exec-sh\",\n          \"cmd\": \"sh\",\n          \"args\": [\n            \"-c\",\n            {\n              \"validator\": \"\\\\S+\"\n            }\n          ],\n          \"sidecar\": false\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON5/TOML Configuration in Cargo.toml\nDESCRIPTION: Shows how to enable alternative configuration formats (JSON5 or TOML) by adding feature flags to Tauri dependencies in Cargo.toml.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build-dependencies]\ntauri-build = { version = \"2.0.0\", features = [ \"config-json5\" ] }\n\n[dependencies]\ntauri = { version = \"2.0.0\", features = [  \"config-json5\" ] }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tray Event Handler for Positioner Plugin\nDESCRIPTION: Rust code to set up the on_tray_event handler for the Tauri Positioner plugin, enabling tray-relative positions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub fn run() {\n    tauri::Builder::default()\n        // This is required to get tray-relative positions to work\n        .setup(|app| {\n            #[cfg(desktop)]\n            {\n                app.handle().plugin(tauri_plugin_positioner::init());\n                tauri::tray::TrayIconBuilder::new()\n                    .on_tray_icon_event(|tray_handle, event| {\n                        tauri_plugin_positioner::on_tray_event(tray_handle.app_handle(), &event);\n                    })\n                    .build(app)?\n            }\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Yes/No Dialog in JavaScript\nDESCRIPTION: Implementation of a Yes/No dialog using the ask function from the dialog plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ask } from '@tauri-apps/plugin-dialog';\n\nconst answer = await ask('This action cannot be reverted. Are you sure?', {\n  title: 'Tauri',\n  kind: 'warning',\n});\n\nconsole.log(answer);\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents in JavaScript\nDESCRIPTION: Shows how to read file contents using the base directory and path API in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFile } from '@tauri-apps/plugin-fs';\nimport * as path from '@tauri-apps/api/path';\nconst home = await path.homeDir();\nconst contents = await readFile(await path.join(home, 'avatars/tauri.png'));\n```\n\n----------------------------------------\n\nTITLE: Registering Command Handler in Rust\nDESCRIPTION: Shows how to expose a command to the webview by registering it in the plugin builder configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nBuilder::new(\"<plugin-name>\")\n    .invoke_handler(tauri::generate_handler![commands::upload])\n```\n\n----------------------------------------\n\nTITLE: Adding Mobile Command to iOS Plugin\nDESCRIPTION: Shows how to add a mobile command to an iOS Tauri plugin. The example demonstrates a command that simulates opening a camera and returning a photo path.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass ExamplePlugin: Plugin {\n\t@objc public func openCamera(_ invoke: Invoke) throws {\n    invoke.resolve([\"path\": \"/path/to/photo.jpg\"])\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shell Plugin in JavaScript\nDESCRIPTION: Example of using the Tauri Shell plugin to execute a shell command in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command } from '@tauri-apps/plugin-shell';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { Command } = window.__TAURI__.shell;\n\nlet result = await Command.create('exec-sh', [\n  '-c',\n  \"echo 'Hello World!'\",\n]).execute();\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Emitting Webview-Specific Events in Tauri\nDESCRIPTION: Shows how to emit events to specific webview listeners using emit_to function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/calling-frontend.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{AppHandle, Emitter};\n\n#[tauri::command]\nfn login(app: AppHandle, user: String, password: String) {\n  let authenticated = user == \"tauri-apps\" && password == \"tauri\";\n  let result = if authenticated { \"loggedIn\" } else { \"invalidCredentials\" };\n  app.emit_to(\"login\", \"login-result\", result).unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Scripts for Vite and Tauri\nDESCRIPTION: Defines npm scripts for Vite development, build, preview, and Tauri commands in package.json.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"tauri\": \"tauri\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Setup Tasks and Splashscreen Logic\nDESCRIPTION: Rust code for implementing fake heavy setup tasks in the backend, managing setup state, and controlling the splashscreen window.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/splashscreen.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::Mutex;\nuse tauri::async_runtime::spawn;\nuse tauri::{AppHandle, Manager, State};\nuse tokio::time::{sleep, Duration};\n\nstruct SetupState {\n    frontend_task: bool,\n    backend_task: bool,\n}\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .manage(Mutex::new(SetupState {\n            frontend_task: false,\n            backend_task: false,\n        }))\n        .invoke_handler(tauri::generate_handler![greet, set_complete])\n        .setup(|app| {\n            spawn(setup(app.handle().clone()));\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n\n#[tauri::command]\nfn greet(name: String) -> String {\n    format!(\"Hello {name} from Rust!\")\n}\n\n#[tauri::command]\nasync fn set_complete(\n    app: AppHandle,\n    state: State<'_, Mutex<SetupState>>,\n    task: String,\n) -> Result<(), ()> {\n    let mut state_lock = state.lock().unwrap();\n    match task.as_str() {\n        \"frontend\" => state_lock.frontend_task = true,\n        \"backend\" => state_lock.backend_task = true,\n        _ => panic!(\"invalid task completed!\"),\n    }\n    if state_lock.backend_task && state_lock.frontend_task {\n        let splash_window = app.get_webview_window(\"splashscreen\").unwrap();\n        let main_window = app.get_webview_window(\"main\").unwrap();\n        splash_window.close().unwrap();\n        main_window.show().unwrap();\n    }\n    Ok(())\n}\n\nasync fn setup(app: AppHandle) -> Result<(), ()> {\n    println!(\"Performing really heavy backend setup task...\");\n    sleep(Duration::from_secs(3)).await;\n    println!(\"Backend setup task completed!\");\n    set_complete(\n        app.clone(),\n        app.state::<Mutex<SetupState>>(),\n        \"backend\".to_string(),\n    )\n    .await?\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for System Tray in Cargo.toml\nDESCRIPTION: Updates the Cargo.toml file to include the necessary feature for system tray functionality in Tauri.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntauri = { version = \"2.0.0\", features = [ \"tray-icon\" ] }\n```\n\n----------------------------------------\n\nTITLE: Using MenuItemBuilder in Rust\nDESCRIPTION: Demonstrates how to use the new MenuItemBuilder API to create custom menu items in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::MenuItemBuilder;\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::new(\"Toggle\").accelerator(\"Ctrl+Shift+T\").build(app)?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Appending to Files - JavaScript\nDESCRIPTION: Opens a file in append mode to add content without overwriting existing data.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { open, BaseDirectory } from '@tauri-apps/plugin-fs';\nconst file = await open('foo/bar.txt', {\n  append: true,\n  baseDir: BaseDirectory.AppData,\n});\nawait file.write(new TextEncoder().encode('world'));\nawait file.close();\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Machine Install Mode for Tauri App\nDESCRIPTION: Demonstrates how to configure the Tauri application installer to use per-machine install mode, which requires Administrator privileges but installs the app system-wide.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"nsis\": {\n        \"installMode\": \"perMachine\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shell Plugin in JavaScript\nDESCRIPTION: Example of using the shell plugin to execute commands and open URLs in JavaScript\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command, open } from '@tauri-apps/plugin-shell';\nconst output = await Command.create('echo', 'message').execute();\n\nawait open('https://github.com/tauri-apps/tauri');\n```\n\n----------------------------------------\n\nTITLE: Registering Global Shortcut in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to register a global shortcut using the global-shortcut plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/global-shortcut.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { register } from '@tauri-apps/plugin-global-shortcut';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { register } = window.__TAURI__.globalShortcut;\n\nawait register('CommandOrControl+Shift+C', () => {\n  console.log('Shortcut triggered');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Behavior in Rust\nDESCRIPTION: Examples of configuring log file size and rotation strategy.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .max_file_size(50_000 /* bytes */)\n  .build()\n```\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .rotation_strategy(tauri_plugin_log::RotationStrategy::KeepAll)\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for Nuxt Integration (JSON)\nDESCRIPTION: This snippet shows how to configure the Tauri build settings in tauri.conf.json for different package managers (npm, yarn, pnpm). It sets up build commands, development path, and output directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/frontend/nuxt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run generate\",\n    \"devPath\": \"http://localhost:3000\",\n    \"distDir\": \"../dist\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn generate\",\n    \"devPath\": \"http://localhost:3000\",\n    \"distDir\": \"../dist\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"pnpm dev\",\n    \"beforeBuildCommand\": \"pnpm generate\",\n    \"devPath\": \"http://localhost:3000\",\n    \"distDir\": \"../dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LazyStore in JavaScript\nDESCRIPTION: Example of using the LazyStore high-level API in JavaScript which only loads the store on first access.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LazyStore } from '@tauri-apps/plugin-store';\n\nconst store = new LazyStore('settings.json');\n```\n\n----------------------------------------\n\nTITLE: Using OS Plugin in Rust\nDESCRIPTION: Shows how to use the OS plugin to get the system architecture in a Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_os::init())\n        .setup(|app| {\n            let os_arch = tauri_plugin_os::arch();\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Window Icon as Tray Icon in JavaScript\nDESCRIPTION: Demonstrates how to use the application's default window icon as the tray icon in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TrayIcon } from '@tauri-apps/api/tray';\nimport { defaultWindowIcon } from '@tauri-apps/api/app';\n\nconst options = {\n  icon: await defaultWindowIcon(),\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView Ready Handler\nDESCRIPTION: Shows how to implement the on_webview_ready lifecycle hook to handle window initialization events.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::plugin::Builder;\n\nBuilder::new(\"<plugin-name>\")\n  .on_webview_ready(|window| {\n    window.listen(\"content-loaded\", |event| {\n      println!(\"webview content has been loaded\");\n    });\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Permissions in Tauri Capabilities\nDESCRIPTION: JSON configuration showing how to modify the default capabilities file to add the specific file-system permission needed to write to a text file in the home directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"default\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\n    \"main\"\n  ],\n  \"permissions\": [\n    \"path:default\",\n    \"event:default\",\n    \"window:default\",\n    \"app:default\",\n    \"image:default\",\n    \"resources:default\",\n    \"menu:default\",\n    \"tray:default\",\n    \"shell:allow-open\",\n    \"fs:default\",\n    \"fs:allow-write-text-file\",\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"default\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\n    \"main\"\n  ],\n  \"permissions\": [\n    \"path:default\",\n    \"event:default\",\n    \"window:default\",\n    \"app:default\",\n    \"image:default\",\n    \"resources:default\",\n    \"menu:default\",\n    \"tray:default\",\n    \"shell:allow-open\",\n    \"fs:allow-write-text-file\",\n    {\n      \"identifier\": \"fs:allow-write-text-file\",\n      \"allow\": [{ \"path\": \"$HOME/test.txt\" }]\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Event Listeners in Rust\nDESCRIPTION: Shows different patterns for unregistering event listeners in Rust, including cleanup outside handler scope and conditional unlistening.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// unlisten outside of the event handler scope:\nlet event_id = app.listen(\"download-started\", |event| {});\napp.unlisten(event_id);\n\n// unlisten when some event criteria is matched\nlet handle = app.handle().clone();\napp.listen(\"status-changed\", |event| {\n  if event.data == \"ready\" {\n    handle.unlisten(event.id);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for SvelteKit Integration\nDESCRIPTION: JSON configuration for Tauri to work with SvelteKit. It sets up build commands, development URL, and frontend distribution directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/sveltekit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run build\",\n    \"devUrl\": \"http://localhost:5173\",\n    \"frontendDist\": \"../build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended tasks.json for Windows Debugging\nDESCRIPTION: Extended task configuration for Windows debugging that includes build tasks and development server setup with group dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/vscode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"build:debug\",\n      \"type\": \"cargo\",\n      \"command\": \"build\"\n    },\n    {\n      \"label\": \"ui:dev\",\n      \"type\": \"shell\",\n      \"isBackground\": true,\n      \"command\": \"yarn\",\n      \"args\": [\"dev\"]\n    },\n    {\n      \"label\": \"dev\",\n      \"dependsOn\": [\"build:debug\", \"ui:dev\"],\n      \"group\": {\n        \"kind\": \"build\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Notification Channels in Tauri\nDESCRIPTION: JavaScript example to retrieve a list of all existing notification channels in the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { channels } from '@tauri-apps/plugin-notification';\n\nconst existingChannels = await channels();\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Plugin Permissions\nDESCRIPTION: JSON configuration to enable the process plugin permissions in the application's capabilities configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/process.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"process:default\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Tauri Windows\nDESCRIPTION: Shows how to mock multiple Tauri windows using mockWindows() function, including current window identification and verification of window labels.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/mocking.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { beforeAll, expect, test } from 'vitest';\nimport { randomFillSync } from 'crypto';\n\nimport { mockWindows } from '@tauri-apps/api/mocks';\n\n// jsdom doesn't come with a WebCrypto implementation\nbeforeAll(() => {\n  Object.defineProperty(window, 'crypto', {\n    value: {\n      // @ts-ignore\n      getRandomValues: (buffer) => {\n        return randomFillSync(buffer);\n      },\n    },\n  });\n});\n\ntest('invoke', async () => {\n  mockWindows('main', 'second', 'third');\n\n  const { getCurrent, getAll } = await import('@tauri-apps/api/webviewWindow');\n\n  expect(getCurrent()).toHaveProperty('label', 'main');\n  expect(getAll().map((w) => w.label)).toEqual(['main', 'second', 'third']);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing fs Plugin in Rust\nDESCRIPTION: Adds the fs plugin to the Tauri application builder in the lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n  tauri::Builder::default()\n    .plugin(tauri_plugin_fs::init())\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Process Plugin in Rust\nDESCRIPTION: Rust example demonstrating how to exit the application or restart it using the process plugin with an AppHandle instance.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/process.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// exits the app with the given status code\napp.exit(0);\n\n// restarts the app\napp.restart();\n```\n\n----------------------------------------\n\nTITLE: Initializing Shell Plugin in Rust\nDESCRIPTION: Code snippet showing how to initialize the Tauri Shell plugin in the Rust application entry point.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Child Process Output in Rust\nDESCRIPTION: Example of spawning a child process and capturing its output using the shell plugin\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_61\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let output = tauri::async_runtime::block_on(async move { app.shell().command(\"echo\").args([\"TAURI\"]).output().await.unwrap() });\n            assert!(output.status.success());\n            assert_eq!(String::from_utf8(output.stdout).unwrap(), \"TAURI\");\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Events in Rust\nDESCRIPTION: Demonstrates how to handle menu events using the new on_menu_event API in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::{CheckMenuItemBuilder, MenuBuilder, MenuItemBuilder};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::with_id(\"toggle\", \"Toggle\").build(app)?;\n        let check = CheckMenuItemBuilder::new(\"Mark\").build(app)?;\n        let menu = MenuBuilder::new(app).items(&[&toggle, &check]).build()?;\n\n        app.set_menu(menu)?;\n\n        app.on_menu_event(move |app, event| {\n            if event.id() == check.id() {\n                println!(\"`check` triggered, do something! is checked? {}\", check.is_checked().unwrap());\n            } else if event.id() == \"toggle\" {\n                println!(\"toggle triggered!\");\n            }\n        });\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Using PredefinedMenuItem in Rust\nDESCRIPTION: Shows how to use the new PredefinedMenuItem API to add predefined menu items in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::{MenuBuilder, PredefinedMenuItem};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let menu = MenuBuilder::new(app).item(&PredefinedMenuItem::copy(app)?).build()?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Getting OS Platform in JavaScript\nDESCRIPTION: JavaScript code example demonstrating how to retrieve the current operating system platform using the OS plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/os-info.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { platform } from '@tauri-apps/plugin-os';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { platform } = window.__TAURI__.os;\n\nconst currentPlatform = platform();\nconsole.log(currentPlatform);\n// Prints \"windows\" to the console\n```\n\n----------------------------------------\n\nTITLE: Rust Permission Handling Implementation\nDESCRIPTION: Shows how to implement permission checking and requesting in Rust using Tauri's plugin runtime with proper type definitions and error handling.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Serialize, Deserialize};\nuse tauri::{plugin::PermissionState, Runtime};\n\n#[derive(Deserialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct PermissionResponse {\n  pub post_notification: PermissionState,\n}\n\n#[derive(Serialize)]\n#[serde(rename_all = \"camelCase\")]\nstruct RequestPermission {\n  post_notification: bool,\n}\n\nimpl<R: Runtime> Notification<R> {\n  pub fn request_post_notification_permission(&self) -> crate::Result<PermissionState> {\n    self.0\n      .run_mobile_plugin::<PermissionResponse>(\"requestPermissions\", RequestPermission { post_notification: true })\n      .map(|r| r.post_notification)\n      .map_err(Into::into)\n  }\n\n  pub fn check_permissions(&self) -> crate::Result<PermissionResponse> {\n    self.0\n      .run_mobile_plugin::<PermissionResponse>(\"checkPermissions\", ())\n      .map_err(Into::into)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OS Plugin in Tauri JavaScript\nDESCRIPTION: Illustrates how to use the OS plugin in a Tauri JavaScript project. It includes adding the npm dependency and using the plugin to get system architecture information.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-os\": \"^2.0.0\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { arch } from '@tauri-apps/plugin-os';\nconst architecture = await arch();\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration for Next.js and Tauri\nDESCRIPTION: Script definitions in package.json for running Next.js development server, building the application, and Tauri commands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\",\n  \"tauri\": \"tauri\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Non-Blocking Ask Dialog in Rust\nDESCRIPTION: Implementation of a non-blocking question dialog with custom buttons in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::{DialogExt, MessageDialogButtons};\n\napp.dialog()\n    .message(\"Tauri is Awesome\")\n    .title(\"Tauri is Awesome\")\n   .buttons(MessageDialogButtons::OkCancelCustom(\"Absolutely\", \"Totally\"))\n    .show(|result| match result {\n        true => // do something,\n        false =>// do something,\n    });\n```\n\n----------------------------------------\n\nTITLE: Restoring Window State in JavaScript\nDESCRIPTION: Example of using the restoreStateCurrent function to manually restore a window's state from disk in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  restoreStateCurrent,\n  StateFlags,\n} from '@tauri-apps/plugin-window-state';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { restoreStateCurrent, StateFlags } = window.__TAURI__.windowState;\n\nrestoreStateCurrent(StateFlags.ALL);\n```\n\n----------------------------------------\n\nTITLE: Home Directory Scope Permission\nDESCRIPTION: Defines a permission configuration for accessing files in the home directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[permission]]\nidentifier = \"scope-home\"\ndescription = \"\"\"This scope permits access to all files and\nlist content of top level directories in the `$HOME`folder.\"\"\"\n\n[[scope.allow]]\npath = \"$HOME/*\"\n```\n\n----------------------------------------\n\nTITLE: Using Tauri Positioner Plugin in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to use the Tauri Positioner plugin's APIs in the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { moveWindow, Position } from '@tauri-apps/plugin-positioner';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { moveWindow, Position } = window.__TAURI__.positioner;\n\nmoveWindow(Position.TopRight);\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Configuration in tauri.conf.json\nDESCRIPTION: JSON configuration for the CLI plugin in tauri.conf.json, defining arguments and subcommands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"cli\": {\n      \"description\": \"Tauri CLI Plugin Example\",\n      \"args\": [\n        {\n          \"short\": \"v\",\n          \"name\": \"verbose\",\n          \"description\": \"Verbosity level\"\n        }\n      ],\n      \"subcommands\": {\n        \"run\": {\n          \"description\": \"Run the application\",\n          \"args\": [\n            {\n              \"name\": \"debug\",\n              \"description\": \"Run application in debug mode\"\n            },\n            {\n              \"name\": \"release\",\n              \"description\": \"Run application in release mode\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Permissions in Rust\nDESCRIPTION: Example of using AppManifest to specify allowed commands in the build script.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri_build::try_build(\n        tauri_build::Attributes::new()\n            .app_manifest(tauri_build::AppManifest::new().commands(&[\"your_command\"])),\n    )\n    .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning Child Process with Status Code in Rust\nDESCRIPTION: Example of spawning a child process and retrieving its status code using the shell plugin\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_60\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let status = tauri::async_runtime::block_on(async move { app.shell().command(\"which\").args([\"ls\"]).status().await.unwrap() });\n            println!(\"`which` finished with status: {:?}\", status.code());\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Action Types for Mobile Notifications in Tauri\nDESCRIPTION: JavaScript example showing how to register interactive action types that can be used with notifications on mobile platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerActionTypes } from '@tauri-apps/plugin-notification';\n\nawait registerActionTypes([\n  {\n    id: 'messages',\n    actions: [\n      {\n        id: 'reply',\n        title: 'Reply',\n        input: true,\n        inputButtonTitle: 'Send',\n        inputPlaceholder: 'Type your reply...',\n      },\n      {\n        id: 'mark-read',\n        title: 'Mark as Read',\n        foreground: false,\n      },\n    ],\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Load Lifecycle Event for iOS Plugin\nDESCRIPTION: Demonstrates how to implement the load lifecycle event for an iOS Tauri plugin. This event is called when the plugin is loaded into the web view and can be used for plugin initialization.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass ExamplePlugin: Plugin {\n  @objc public override func load(webview: WKWebView) {\n    let timeout = self.config[\"timeout\"] as? Int ?? 30\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Notification Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Notification plugin to send a notification in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sendNotification } from '@tauri-apps/plugin-notification';\nsendNotification('Tauri is awesome!');\n```\n\n----------------------------------------\n\nTITLE: Executing Sidecar Commands from Rust\nDESCRIPTION: Rust code that creates a Tauri command to execute the 'ping' command in the Node.js sidecar and return the response to the frontend.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/sidecar-nodejs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[tauri::command]\nasync fn ping(app: tauri::AppHandle, message: String) -> String {\n  let sidecar_command = app\n    .shell()\n    .sidecar(\"app\")\n    .unwrap()\n    .arg(\"ping\")\n    .arg(message);\n  let output = sidecar_command.output().unwrap();\n  let response = String::from_utf8(output.stdout).unwrap();\n  response\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing with argon2 password hash function\nDESCRIPTION: Example of initializing the Stronghold plugin with the built-in argon2 password hash function in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/stronghold.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Manager;\n\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            let salt_path = app\n                .path()\n                .app_local_data_dir()\n                .expect(\"could not resolve app local data path\")\n                .join(\"salt.txt\");\n            app.handle().plugin(tauri_plugin_stronghold::Builder::with_argon2(&salt_path).build())?;\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Updates in Rust\nDESCRIPTION: Shows how to check for updates using the updater plugin in a Rust Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_updater::Builder::new().build())\n        .setup(|app| {\n            let handle = app.handle();\n            tauri::async_runtime::spawn(async move {\n                let response = handle.updater().check().await;\n            });\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Binding for Upload Command\nDESCRIPTION: Creates a TypeScript function to easily invoke the upload command from JavaScript with progress tracking.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { invoke, Channel } from '@tauri-apps/api/core'\n\nexport async function upload(url: string, onProgressHandler: (progress: number) => void): Promise<void> {\n  const onProgress = new Channel<number>()\n  onProgress.onmessage = onProgressHandler\n  await invoke('plugin:<plugin-name>|upload', { url, onProgress })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Preload in Tauri Config\nDESCRIPTION: This JSON snippet shows how to configure the SQL plugin in the Tauri configuration file to preload a specific database connection.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"sql\": {\n      \"preload\": [\"sqlite:mydatabase.db\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Arguments for CLI\nDESCRIPTION: JSON configuration for named arguments in the CLI plugin, which are key-value pairs with possible values and support for multiple values.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": [\n    {\n      \"name\": \"type\",\n      \"short\": \"t\",\n      \"takesValue\": true,\n      \"multiple\": true,\n      \"possibleValues\": [\"foo\", \"bar\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Websocket Plugin in Rust\nDESCRIPTION: Rust code to initialize the Tauri Websocket plugin in the application's main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/websocket.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin-websocket::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing with custom password hash function\nDESCRIPTION: Example of initializing the Stronghold plugin with a custom password hash function using argon2 in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/stronghold.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn run() {\n    tauri::Builder::default()\n        .plugin(\n            tauri_plugin_stronghold::Builder::new(|password| {\n                // Hash the password here with e.g. argon2, blake2b or any other secure algorithm\n                // Here is an example implementation using the `rust-argon2` crate for hashing the password\n                use argon2::{hash_raw, Config, Variant, Version};\n\n                let config = Config {\n                    lanes: 4,\n                    mem_cost: 10_000,\n                    time_cost: 10,\n                    variant: Variant::Argon2id,\n                    version: Version::Version13,\n                    ..Default::default()\n                };\n                let salt = \"your-salt\".as_bytes();\n                let key = hash_raw(password.as_ref(), salt, &config).expect(\"failed to hash password\");\n\n                key.to_vec()\n            })\n            .build(),\n        )\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Plugin in Rust\nDESCRIPTION: Rust code to initialize a Tauri plugin, including conditional compilation for iOS and Android platforms. This code sets up the plugin and registers it with the Tauri runtime.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-4.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri:{\n  plugin::{Builder, TauriPlugin},\n  Manager, Runtime,\n};\n\n#[cfg(target_os = \"ios\")]\ntauri::ios_plugin_binding!(init_plugin_example);\n\npub fn init<R: Runtime>() -> TauriPlugin<R> {\n  Builder::new(\"example\")\n    .setup(|app, api| {\n      #[cfg(target_os = \"android\")]\n      api.register_android_plugin(\"com.plugin.example\", \"ExamplePlugin\")?;\n      #[cfg(target_os = \"ios\")]\n      api.register_ios_plugin(init_plugin_example)?;\n      Ok(())\n    })\n    .build()\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Plugin Event Listener Implementation\nDESCRIPTION: Demonstrates how to implement event listening in JavaScript using the addPluginListener helper function from Tauri's core API.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addPluginListener, PluginListener } from '@tauri-apps/api/core';\n\nexport async function onRequest(\n\thandler: (url: string) => void\n): Promise<PluginListener> {\n\treturn await addPluginListener(\n\t\t'<plugin-name>',\n\t\t'event-name',\n\t\thandler\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Deep Links in JavaScript\nDESCRIPTION: JavaScript code to set up a listener for deep link events in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onOpenUrl } from '@tauri-apps/plugin-deep-link';\n\nawait onOpenUrl((urls) => {\n  console.log('deep link:', urls);\n});\n```\n\n----------------------------------------\n\nTITLE: File Read Operations Permission\nDESCRIPTION: Configures permissions for file read-related commands without path restrictions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[permission]]\nidentifier = \"read-files\"\ndescription = \"\"\"This enables all file read related\ncommands without any pre-configured accessible paths.\"\"\"\ncommands.allow = [\n    \"read_file\",\n    \"read\",\n    \"open\",\n    \"read_text_file\",\n    \"read_text_file_lines\",\n    \"read_text_file_lines_next\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Keybindings for Debugging in Neovim\nDESCRIPTION: Defines various keybindings for controlling the debugging session, including starting/stopping the debugger, stepping through code, and toggling breakpoints.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/neovim.mdx#2025-04-22_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.keymap.set('n', '<F5>', function() dap.continue() end)\nvim.keymap.set('n', '<F6>', function() dap.disconnect({ terminateDebuggee = true }) end)\nvim.keymap.set('n', '<F10>', function() dap.step_over() end)\nvim.keymap.set('n', '<F11>', function() dap.step_into() end)\nvim.keymap.set('n', '<F12>', function() dap.step_out() end)\nvim.keymap.set('n', '<Leader>b', function() dap.toggle_breakpoint() end)\nvim.keymap.set('n', '<Leader>o', function() overseer.toggle() end)\nvim.keymap.set('n', '<Leader>R', function() overseer.run_template() end)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Link Permissions in Tauri\nDESCRIPTION: JSON configuration for enabling deep link permissions in Tauri application capabilities.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/mobile-schema.json\",\n  \"identifier\": \"mobile-capability\",\n  \"windows\": [\"main\"],\n  \"platforms\": [\"iOS\", \"android\"],\n  \"permissions\": [\n    \"core:event:default\",\n    \"deep-link:default\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration Example - Base Config\nDESCRIPTION: Example of a base Tauri configuration file showing product name, bundle resources, and plugin configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productName\": \"MyApp\",\n  \"bundle\": {\n    \"resources\": [\"./resources\"]\n  },\n  \"plugins\": {\n    \"deep-link\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Migrations in Rust\nDESCRIPTION: This snippet demonstrates how to define a SQL migration using the Migration struct in Rust for the Tauri SQL plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_sql::{Migration, MigrationKind};\n\nlet migration = Migration {\n    version: 1,\n    description: \"create_initial_tables\",\n    sql: \"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT);\",\n    kind: MigrationKind::Up,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Shell Plugin in Tauri JavaScript\nDESCRIPTION: Demonstrates how to use the Shell plugin in a Tauri JavaScript project. It includes adding the npm dependency and using the plugin to execute shell commands and open URLs.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-shell\": \"^2.0.0\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command, open } from '@tauri-apps/plugin-shell';\nconst output = await Command.create('echo', 'message').execute();\n\nawait open('https://github.com/tauri-apps/tauri');\n```\n\n----------------------------------------\n\nTITLE: Migrating from v1/v2 to v3 in Rust\nDESCRIPTION: Shows the migration from v1/v2 to v3 of the Tauri Store plugin in Rust by changing the store API usage.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- with_store(app.handle().clone(), stores, path, |store| {\n-     store.insert(\"some-key\".to_string(), json!({ \"value\": 5 }))?;\n-     Ok(())\n- });\n+ let store = app.store(path)?;\n+ store.set(\"some-key\".to_string(), json!({ \"value\": 5 }));\n```\n\n----------------------------------------\n\nTITLE: Updated Core Plugin Permissions with New Namespace\nDESCRIPTION: Demonstrates the new RC version format for core plugin permissions using the 'core:' namespace prefix in the capabilities configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-release-candidate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"permissions\": [\n        \"core:path:default\",\n        \"core:event:default\",\n        \"core:window:default\",\n        \"core:app:default\",\n        \"core:image:default\",\n        \"core:resources:default\",\n        \"core:menu:default\",\n        \"core:tray:default\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for WebDriver Testing in Tauri Applications\nDESCRIPTION: A GitHub Actions workflow configuration that sets up a Linux environment with all dependencies needed for running WebDriver tests on a Tauri application. It installs system dependencies, sets up Rust and Node.js environments, builds the Tauri application, installs tauri-driver, and runs WebdriverIO tests in a headless environment using Xvfb.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/ci.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# run this action when the repository is pushed to\non: [push]\n\n# the name of our workflow\nname: WebDriver\n\njobs:\n  # a single job named test\n  test:\n    # the display name of the test job\n    name: WebDriverIO Test Runner\n\n    # we want to run on the latest linux environment\n    runs-on: ubuntu-22.04\n\n    # the steps our job runs **in order**\n    steps:\n      # checkout the code on the workflow runner\n      - uses: actions/checkout@v4\n\n      # install system dependencies that Tauri needs to compile on Linux.\n      # note the extra dependencies for `tauri-driver` to run which are: `webkit2gtk-driver` and `xvfb`\n      - name: Tauri dependencies\n        run: |\n          sudo apt update && sudo apt install -y \\\n            libwebkit2gtk-4.1-dev \\\n            build-essential \\\n            curl \\\n            wget \\\n            file \\\n            libxdo-dev \\\n            libssl-dev \\\n            libayatana-appindicator3-dev \\\n            librsvg2-dev \\\n            webkit2gtk-driver \\\n            xvfb\n\n      - name: Setup rust-toolchain stable\n        id: rust-toolchain\n        uses: dtolnay/rust-toolchain@stable\n\n      # we run our rust tests before the webdriver tests to avoid testing a broken application\n      - name: Cargo test\n        run: cargo test\n\n      # build a release build of our application to be used during our WebdriverIO tests\n      - name: Cargo build\n        run: cargo build --release\n\n      # install the latest stable node version at the time of writing\n      - name: Node 20\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          cache: 'yarn'\n\n      # install our Node.js dependencies with Yarn\n      - name: Yarn install\n        run: yarn install --frozen-lockfile\n        working-directory: webdriver/webdriverio\n\n      # install the latest version of `tauri-driver`.\n      # note: the tauri-driver version is independent of any other Tauri versions\n      - name: Install tauri-driver\n        run: cargo install tauri-driver --locked\n\n      # run the WebdriverIO test suite.\n      # we run it through `xvfb-run` (the dependency we installed earlier) to have a fake\n      # display server which allows our application to run headless without any changes to the code\n      - name: WebdriverIO\n        run: xvfb-run yarn test\n        working-directory: webdriver/webdriverio\n```\n\n----------------------------------------\n\nTITLE: Using SubmenuBuilder in Rust\nDESCRIPTION: Shows how to use the new SubmenuBuilder API to create submenus in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::{MenuBuilder, SubmenuBuilder};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let submenu = SubmenuBuilder::new(app, \"Sub\")\n            .text(\"Tauri\")\n            .separator()\n            .check(\"Is Awesome\")\n            .build()?;\n        let menu = MenuBuilder::new(app).item(&submenu).build()?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Using Process Plugin in Rust\nDESCRIPTION: Shows how to use the Process plugin to exit and restart the application in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_53\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_process::init())\n        .setup(|app| {\n            // exit the app with a status code\n            app.handle().exit(1);\n            // restart the app\n            app.handle().restart();\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering NFC Tags in JavaScript\nDESCRIPTION: JavaScript code for filtering NFC tag scans by mime type, URI format, and technology types, allowing for more specific tag detection.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scan, TechKind } from '@tauri-apps/plugin-nfc';\n\nconst techLists = [\n  // capture anything using NfcF\n  [TechKind.NfcF],\n  // capture all MIFARE Classics with NDEF payloads\n  [TechKind.NfcA, TechKind.MifareClassic, TechKind.Ndef],\n];\n\nconst tag = await scan({\n  type: 'ndef', // or 'tag'\n  mimeType: 'text/plain',\n  uri: {\n    scheme: 'https',\n    host: 'my.domain.com',\n    pathPrefix: '/app',\n  },\n  techLists,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Flatpak Manifest for Tauri Applications\nDESCRIPTION: YAML configuration that defines how to package a Tauri application as a Flatpak. It specifies runtime dependencies, permissions, and build instructions for packaging a .deb file into a Flatpak bundle.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid: org.your.id\n\nruntime: org.gnome.Platform\nruntime-version: '46'\nsdk: org.gnome.Sdk\n\ncommand: tauri-app\nfinish-args:\n  - --socket=wayland # Permission needed to show the window\n  - --socket=fallback-x11 # Permission needed to show the window\n  - --device=dri # OpenGL, not necessary for all projects\n  - --share=ipc\n\nmodules:\n  - name: binary\n    buildsystem: simple\n    sources:\n      - type: file\n        url: https://github.com/your_username/your_repository/releases/download/v1.0.1/yourapp_1.0.1_amd64.deb\n        sha256: 08305b5521e2cf0622e084f2b8f7f31f8a989fc7f407a7050fa3649facd61469 # This is required if you are using a remote source\n        only-arches: [x86_64] #This source is only used on x86_64 Computers\n        # This path points to the binary file which was created in the .deb bundle.\n        # Tauri also creates a folder which corresponds to the content of the unpacked .deb.\n    build-commands:\n      - ar -x *.deb\n      - tar -xf data.tar.gz\n      - 'install -Dm755 usr/bin/tauri-app /app/bin/tauri-app'\n      - install -Dm644 usr/share/applications/yourapp.desktop /app/share/applications/org.your.id.desktop\n      - install -Dm644 usr/share/icons/hicolor/128x128/apps/yourapp.png /app/share/icons/hicolor/128x128/apps/org.your.id.png\n      - install -Dm644 usr/share/icons/hicolor/32x32/apps/yourapp.png /app/share/icons/hicolor/32x32/apps/org.your.id.png\n      - install -Dm644 usr/share/icons/hicolor/256x256@2/apps/yourapp.png /app/share/icons/hicolor/256x256@2/apps/org.your.id.png\n      - install -Dm644 org.your.id.metainfo.xml /app/share/metainfo/org.your.id.rosary.metainfo.xml\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Layout Structure with egui\nDESCRIPTION: Defines a struct that represents a login interface with fields for users, passwords, and a validation function. Includes a constructor that initializes the layout and returns a channel for communication.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::mpsc::{channel, Receiver, Sender};\nuse tauri_egui::{eframe, egui};\n\npub struct LoginLayout {\n  heading: String,\n  users: Vec<String>,\n  user: String,\n  password: String,\n  password_checker: Box<dyn Fn(&str) -> bool + Send + 'static>,\n  tx: Sender<String>,\n  texture: Option<egui::TextureHandle>,\n}\n\nimpl LoginLayout {\n  pub fn new(\n    password_checker: Box<dyn Fn(&str) -> bool + Send + 'static>,\n    users: Vec<String>,\n  ) -> (Self, Receiver<String>) {\n    let (tx, rx) = channel();\n    let initial_user = users.iter().next().cloned().unwrap_or_else(String::new);\n    (\n      Self {\n        heading: \"Sign in\".into(),\n        users,\n        user: initial_user,\n        password: \"\".into(),\n        password_checker,\n        tx,\n        texture: None,\n      },\n      rx,\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing NFC Plugin in Rust\nDESCRIPTION: Code modification for the lib.rs file to initialize the NFC plugin for mobile platforms in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(mobile)]\n            app.handle().plugin(tauri_plugin_nfc::init());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Menu to Tray Icon in JavaScript\nDESCRIPTION: Illustrates how to create a menu and attach it to the tray icon in JavaScript, including setting the menu to appear on left click.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TrayIcon } from '@tauri-apps/api/tray';\nimport { Menu } from '@tauri-apps/api/menu';\n\nconst menu = await Menu.new({\n  items: [\n    {\n      id: 'quit',\n      text: 'Quit',\n    },\n  ],\n});\n\nconst options = {\n  menu,\n  menuOnLeftClick: true,\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\n----------------------------------------\n\nTITLE: Configuring External Binaries in Tauri Config\nDESCRIPTION: Configuration snippet showing how to specify external binaries in tauri.conf.json using the externalBin property.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"externalBin\": [\n      \"/absolute/path/to/sidecar\",\n      \"../relative/path/to/binary\",\n      \"binaries/my-sidecar\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Autostart Plugin in Rust\nDESCRIPTION: Code snippet showing how to initialize the autostart plugin in the Tauri application's lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/autostart.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_autostart::init(tauri_plugin_autostart::MacosLauncher::LaunchAgent, Some(vec![\"--flag1\", \"--flag2\"]) /* arbitrary number of args to pass to your app */));\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Link Plugin in Tauri\nDESCRIPTION: JSON configuration for the deep-link plugin in Tauri, defining mobile and desktop URL schemes.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"deep-link\": {\n      \"mobile\": [\n        { \"host\": \"your.website.com\", \"pathPrefix\": [\"/open\"] },\n        { \"host\": \"another.site.br\" }\n      ],\n      \"desktop\": {\n        \"schemes\": [\"something\", \"my-tauri-app\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command with Scope Checking\nDESCRIPTION: Shows how to use CommandScope to read command-specific scope permissions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::ipc::CommandScope;\nuse crate::scope::Entry;\n\nasync fn spawn<R: tauri::Runtime>(app: tauri::AppHandle<R>, command_scope: CommandScope<'_, Entry>) -> Result<()> {\n  let allowed = command_scope.allows();\n  let denied = command_scope.denies();\n  todo!()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Loop Handler\nDESCRIPTION: Demonstrates how to implement the on_event lifecycle hook to handle various application events including cleanup on exit.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse std::{collections::HashMap, fs::write, sync::Mutex};\nuse tauri::{plugin::Builder, Manager, RunEvent};\n\nstruct DummyStore(Mutex<HashMap<String, String>>);\n\nBuilder::new(\"<plugin-name>\")\n  .setup(|app, _api| {\n    app.manage(DummyStore(Default::default()));\n    Ok(())\n  })\n  .on_event(|app, event| {\n    match event {\n      RunEvent::ExitRequested { api, .. } => {\n        api.prevent_exit();\n      }\n      RunEvent::Exit => {\n        let store = app.state::<DummyStore>();\n        write(\n          app.path().app_local_data_dir().unwrap().join(\"store.json\"),\n          serde_json::to_string(&*store.0.lock().unwrap()).unwrap(),\n        )\n        .unwrap();\n      }\n      _ => {}\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Platform-Specific Capabilities\nDESCRIPTION: Enhances the filesystem capability to be platform-specific by limiting it to only Linux and Windows platforms, demonstrating how to target capabilities to specific operating systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/capabilities-for-windows-and-platforms.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identifier\": \"fs-read-home\",\n  \"description\": \"Allow access file access to home directory\",\n  \"local\": true,\n  \"windows\": [\"first\"],\n  \"permissions\": [\n    \"fs:allow-home-read\",\n  ],\n  \"platforms\": [\"linux\", \"windows\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions for Tauri Websocket Plugin\nDESCRIPTION: JSON configuration to enable the Tauri Websocket plugin permissions in the application's capabilities.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/websocket.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\"websocket:default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Subprocess Events with Shell Plugin in Tauri Rust\nDESCRIPTION: Illustrates how to create subprocesses and handle their events asynchronously using the Shell plugin in a Tauri Rust application. It demonstrates spawning a process and reading its output events.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::{ShellExt, process::CommandEvent};\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let handle = app.handle().clone();\n            tauri::async_runtime::spawn(async move {\n                let (mut rx, mut child) = handle.shell().command(\"cargo\")\n                    .args([\"tauri\", \"dev\"])\n                    .spawn()\n                    .expect(\"Failed to spawn cargo\");\n\n                let mut i = 0;\n                while let Some(event) = rx.recv().await {\n                    if let CommandEvent::Stdout(line) = event {\n                        println!(\"got: {}\", String::from_utf8(line).unwrap());\n                       i += 1;\n                       if i == 4 {\n                           child.write(\"message from Rust\\n\".as_bytes()).unwrap();\n                           i = 0;\n                       }\n                   }\n                }\n            });\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Biometric Authentication Status in Rust\nDESCRIPTION: Rust code that demonstrates how to check if biometric authentication is available on the device using the Tauri biometric plugin's status method from the BiometricExt trait.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_biometric::BiometricExt;\n\nfn check_biometric(app_handle: tauri::AppHandle) {\n    let status = app_handle.biometric().status().unwrap();\n    if status.is_available {\n        println!(\"Yes! Biometric Authentication is available\");\n    } else {\n        println!(\"No! Biometric Authentication is not available due to: {}\", status.error.unwrap());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Tauri Plugin from Frontend\nDESCRIPTION: JavaScript code to call the Tauri plugin command from the frontend. This example demonstrates how to use the 'invoke' function to interact with the native plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-4.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { invoke } from '@tauri-apps/api/tauri';\ninvoke('plugin:example|ping', { value: 'Tauri' }).then(({ value }) =>\n  console.log('Response', value)\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting WebView2 Fixed Version Runtime in PowerShell\nDESCRIPTION: PowerShell command to extract the WebView2 fixed version runtime CAB file to the Tauri project's core folder. This is part of the process for using a fixed WebView2 version.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nExpand .\\Microsoft.WebView2.FixedVersionRuntime.128.0.2739.42.x64.cab -F:* ./src-tauri\n```\n\n----------------------------------------\n\nTITLE: One-time Event Listening in JavaScript\nDESCRIPTION: Demonstrates using the once() utility function to listen for a single event occurrence in both global and webview contexts.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { once } from '@tauri-apps/api/event';\nimport { getCurrentWebviewWindow } from '@tauri-apps/api/webviewWindow';\n\nonce('ready', (event) => {});\n\nconst appWebview = getCurrentWebviewWindow();\nappWebview.once('ready', () => {});\n```\n\n----------------------------------------\n\nTITLE: Initializing OS Plugin in Rust\nDESCRIPTION: Modification to the Rust lib.rs file to initialize the OS plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/os-info.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_os::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clipboard Plugin in Rust\nDESCRIPTION: Shows how to use the Tauri Clipboard plugin to write text to the clipboard in a Rust application's setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_clipboard::{ClipboardExt, ClipKind};\ntauri::Builder::default()\n    .plugin(tauri_plugin_clipboard::init())\n    .setup(|app| {\n        app.clipboard().write(ClipKind::PlainText {\n            label: None,\n            text: \"Tauri is awesome!\".into(),\n        })?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for Tauri 2.0 Beta\nDESCRIPTION: Shows the Vite configuration for Tauri 2.0 beta, including settings for mobile development and HMR (Hot Module Replacement).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-2-beta.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\nimport { internalIpV4Sync } from 'internal-ip';\n\nconst mobile = !!/android|ios/.exec(process.env.TAURI_ENV_PLATFORM);\n\nexport default defineConfig({\n  plugins: [svelte()],\n  clearScreen: false,\n  server: {\n    host: mobile ? '0.0.0.0' : false,\n    port: 1420,\n    strictPort: true,\n    hmr: mobile\n      ? {\n          protocol: 'ws',\n          host: internalIpV4Sync(),\n          port: 1421,\n        }\n      : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sidecar Permissions Configuration\nDESCRIPTION: JSON configuration for granting sidecar execution permissions in Tauri capabilities.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    \"core:default\",\n    {\n      \"identifier\": \"shell:allow-execute\",\n      \"allow\": [\n        {\n          \"name\": \"binaries/app\",\n          \"sidecar\": true\n        }\n      ]\n    },\n    \"shell:allow-open\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating AppImage Signature\nDESCRIPTION: Commands to validate the signature of an AppImage using the AppImage validate tool. This process allows end users to verify the authenticity of the application package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/linux.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x validate-$PLATFORM.AppImage\n./validate-$PLATFORM.AppImage $TAURI_OUTPUT.AppImage\n```\n\n----------------------------------------\n\nTITLE: Global Event Listening in Rust\nDESCRIPTION: Shows how to listen to global events from the Rust backend using Tauri's Builder pattern and event system.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Listener;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n  tauri::Builder::default()\n    .setup(|app| {\n      app.listen(\"download-started\", |event| {\n        if let Ok(payload) = serde_json::from_str::<DownloadStarted>(&event.payload()) {\n          println!(\"downloading {}\", payload.url);\n        }\n      });\n      Ok(())\n    })\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tasks.json for Build Commands\nDESCRIPTION: Task configuration file for VS Code that defines development and build commands to be executed before launching the debugger.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/vscode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"ui:dev\",\n      \"type\": \"shell\",\n      \"isBackground\": true,\n      \"command\": \"yarn\",\n      \"args\": [\"dev\"]\n    },\n    {\n      \"label\": \"ui:build\",\n      \"type\": \"shell\",\n      \"command\": \"yarn\",\n      \"args\": [\"build\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialog Capabilities for Multiple Windows\nDESCRIPTION: Creates a dialog capability that enables both the 'first' and 'second' windows to create Yes/No dialogs, demonstrating how to share capabilities across multiple windows.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/capabilities-for-windows-and-platforms.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identifier\": \"dialog\",\n  \"description\": \"Allow to open a dialog\",\n  \"local\": true,\n  \"windows\": [\"first\", \"second\"],\n  \"permissions\": [\"dialog:allow-ask\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic DevTools Control in Rust\nDESCRIPTION: Shows how to programmatically control the WebView developer tools visibility in Tauri applications.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n  .setup(|app| {\n    #[cfg(debug_assertions)] // only include this code on debug builds\n    {\n      let window = app.get_webview_window(\"main\").unwrap();\n      window.open_devtools();\n      window.close_devtools();\n    }\n    Ok(())\n  });\n```\n\n----------------------------------------\n\nTITLE: Executing Sidecar Commands from JavaScript\nDESCRIPTION: JavaScript code that uses Tauri's shell plugin to execute the 'ping' command in the Node.js sidecar and capture the response from stdout.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/sidecar-nodejs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Command } from '@tauri-apps/plugin-shell';\n\nconst message = 'Tauri';\n\nconst command = Command.sidecar('binaries/app', ['ping', message]);\nconst output = await command.execute();\nconst response = output.stdout;\n```\n\n----------------------------------------\n\nTITLE: Using CLI Plugin in Rust\nDESCRIPTION: Shows how to use the Tauri CLI plugin to access command-line argument matches in a Rust application's setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    use tauri_plugin_cli::CliExt;\n    tauri::Builder::default()\n        .plugin(tauri_plugin_cli::init())\n        .setup(|app| {\n            let cli_matches = app.cli().matches()?;\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Permissions for Resource Access\nDESCRIPTION: Configuration for the access control list to enable filesystem APIs and resource access permissions\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"path:default\",\n    \"event:default\",\n    \"window:default\",\n    \"app:default\",\n    \"resources:default\",\n    \"menu:default\",\n    \"tray:default\",\n    \"fs:allow-read-text-file\",\n    \"fs:allow-resource-read-recursive\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Bindings for the Command\nDESCRIPTION: Exposes the new command in the TypeScript frontend module, allowing it to be called from the application using the Tauri invoke API.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { invoke } from '@tauri-apps/api/core'\n\nexport async function ping(value: string): Promise<string | null> {\n  return await invoke<{value?: string}>('plugin:test|ping', {\n    payload: {\n      value,\n    },\n  }).then((r) => (r.value ? r.value : null));\n}\n\nexport async function writeCustomFile(user_input: string): Promise<string> {\n return await invoke('plugin:test|write_custom_file',{userInput: user_input});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Channels in Tauri\nDESCRIPTION: JavaScript code showing how to create a notification channel with specific properties for categorizing and configuring notification behavior.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createChannel,\n  Importance,\n  Visibility,\n} from '@tauri-apps/plugin-notification';\n\nawait createChannel({\n  id: 'messages',\n  name: 'Messages',\n  description: 'Notifications for new messages',\n  importance: Importance.High,\n  visibility: Visibility.Private,\n  lights: true,\n  lightColor: '#ff0000',\n  vibration: true,\n  sound: 'notification_sound',\n});\n```\n\n----------------------------------------\n\nTITLE: Logging in Rust with log Crate\nDESCRIPTION: Demonstrates how to create logs on the Rust side using the log crate.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlog::error!(\"something bad happened!\");\nlog::info!(\"Tauri is awesome!\");\n```\n\n----------------------------------------\n\nTITLE: Organizing Capability Files in Project Structure\nDESCRIPTION: Shows the recommended project structure for Tauri applications with capability files organized by category in the src-tauri/capabilities directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/capabilities-for-windows-and-platforms.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/src\n/src-tauri\n  /capabilities\n    filesystem.json\n    dialog.json\n  tauri.conf.json\npackage.json\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific Mobile Capability\nDESCRIPTION: Example of a capability configuration specific to mobile platforms (iOS, Android).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/mobile-schema.json\",\n  \"identifier\": \"mobile-capability\",\n  \"windows\": [\"main\"],\n  \"platforms\": [\"iOS\", \"android\"],\n  \"permissions\": [\n    \"nfc:allow-scan\",\n    \"biometric:allow-authenticate\",\n    \"barcode-scanner:allow-scan\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Handling for Android Plugin\nDESCRIPTION: Demonstrates how to define and handle permissions in a Tauri Android plugin using the TauriPlugin annotation with specific permission declarations.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\n@TauriPlugin(\n  permissions = [\n    Permission(strings = [Manifest.permission.POST_NOTIFICATIONS], alias = \"postNotification\")\n  ]\n)\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Positional Arguments for CLI\nDESCRIPTION: JSON configuration for positional arguments in the CLI plugin, which are identified by their position in the arguments list.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": [\n    {\n      \"name\": \"source\",\n      \"index\": 1,\n      \"takesValue\": true\n    },\n    {\n      \"name\": \"destination\",\n      \"index\": 2,\n      \"takesValue\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Signing with Relic\nDESCRIPTION: Configuration file for relic to use Azure Key Vault certificate for code signing. Requires Key Vault name and certificate name to be specified in the URL.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/windows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\ntokens:\n  azure:\n    type: azure\n\nkeys:\n  azure:\n    token: azure\n    id: https://\\<KEY_VAULT_NAME\\>.vault.azure.net/certificates/\\<CERTIFICATE_NAME\\>\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Code Signing in Tauri Config\nDESCRIPTION: JSON configuration for Windows code signing in tauri.conf.json, specifying the certificate thumbprint, digest algorithm, and timestamp URL.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/windows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"windows\": {\n        \"certificateThumbprint\": \"A1B1A2B2A3B3A4B4A5B5A6B6A7B7A8B8A9B9A0B0\",\n        \"digestAlgorithm\": \"sha256\",\n        \"timestampUrl\": \"http://timestamp.comodoca.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capabilities in tauri.conf.json\nDESCRIPTION: Example of referencing predefined capabilities in the Tauri configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app\": {\n    \"security\": {\n      \"capabilities\": [\"my-capability\", \"main-capability\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Sidecar and Shell Command Events\nDESCRIPTION: Demonstrates how to mock IPC requests for sidecar and shell commands by handling event callbacks and simulating process output and termination events.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/mocking.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmockIPC(async (cmd, args) => {\n  if (args.message.cmd === 'execute') {\n    const eventCallbackId = `_${args.message.onEventFn}`;\n    const eventEmitter = window[eventCallbackId];\n\n    // 'Stdout' event can be called multiple times\n    eventEmitter({\n      event: 'Stdout',\n      payload: 'some data sent from the process',\n    });\n\n    // 'Terminated' event must be called at the end to resolve the promise\n    eventEmitter({\n      event: 'Terminated',\n      payload: {\n        code: 0,\n        signal: 'kill',\n      },\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for Trunk Integration\nDESCRIPTION: This JSON configuration for Tauri specifies build commands, development URL, frontend distribution folder, and enables global Tauri variable.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/trunk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"trunk serve\",\n    \"beforeBuildCommand\": \"trunk build\",\n    \"devUrl\": \"http://localhost:8080\",\n    \"frontendDist\": \"../dist\"\n  },\n  \"app\": {\n    \"withGlobalTauri\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Mutex-Protected State\nDESCRIPTION: Shows how to modify state that is protected by a Mutex by acquiring and releasing the lock.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet state = app.state::<Mutex<AppState>>();\n\n// Lock the mutex to get mutable access:\nlet mut state = state.lock().unwrap();\n\n// Modify the state:\nstate.counter += 1;\n```\n\n----------------------------------------\n\nTITLE: Static Update JSON Configuration Schema\nDESCRIPTION: JSON schema for static update configuration file that defines version, platform-specific URLs, and signatures for Tauri application updates. Required for CDN-based update distribution.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"\",\n  \"notes\": \"\",\n  \"pub_date\": \"\",\n  \"platforms\": {\n    \"linux-x86_64\": {\n      \"signature\": \"\",\n      \"url\": \"\"\n    },\n    \"windows-x86_64\": {\n      \"signature\": \"\",\n      \"url\": \"\"\n    },\n    \"darwin-x86_64\": {\n      \"signature\": \"\",\n      \"url\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration Example - Linux Config\nDESCRIPTION: Example of a Linux-specific Tauri configuration that gets merged with the base configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productName\": \"my-app\",\n  \"bundle\": {\n    \"resources\": [\"./linux-assets\"]\n  },\n  \"plugins\": {\n    \"cli\": {\n      \"description\": \"My app\",\n      \"subcommands\": {\n        \"update\": {}\n      }\n    },\n    \"deep-link\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Android Plugin for Tauri\nDESCRIPTION: Kotlin code for creating an Android plugin that takes a string value and resolves an object. This example demonstrates the structure and annotations required for a Tauri Android plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-4.mdx#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.plugin.example\n\nimport android.app.Activity\nimport app.tauri.annotation.Command\nimport app.tauri.annotation.TauriPlugin\nimport app.tauri.plugin.JSObject\nimport app.tauri.plugin.Plugin\nimport app.tauri.plugin.Invoke\n\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n    @Command\n    fun ping(invoke: Invoke) {\n        val value = invoke.getString(\"value\") ?: \"\"\n        val ret = JSObject()\n        ret.put(\"value\", value)\n        invoke.resolve(ret)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in JavaScript\nDESCRIPTION: Uses the fs plugin to check if a file exists in the AppData directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exists, BaseDirectory } from '@tauri-apps/plugin-fs';\n\n// Check if the `$APPDATA/avatar.png` file exists\nawait exists('avatar.png', { baseDir: BaseDirectory.AppData });\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Notification Plugin in Rust\nDESCRIPTION: Code snippet showing how to initialize the notification plugin in the Tauri application's lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_notification::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Application Settings\nDESCRIPTION: JSON configuration file for Tauri that specifies build settings, window properties, and application identifiers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"distDir\": \"dist\"\n  },\n  \"tauri\": {\n    \"bundle\": {\n      \"identifier\": \"studio.tauri.hello_tauri_webdriver\",\n      \"icon\": [\"icon.png\"]\n    },\n    \"allowlist\": {\n      \"all\": false\n    },\n    \"windows\": [\n      {\n        \"width\": 800,\n        \"height\": 600,\n        \"resizable\": true,\n        \"fullscreen\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions for Tauri Positioner Plugin\nDESCRIPTION: JSON configuration to enable the default permissions for the Tauri Positioner plugin in the capabilities file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"positioner:default\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Level Menu in Rust\nDESCRIPTION: This snippet shows how to create a multi-level menu with submenus in Rust. It creates a 'File' submenu, a 'language' submenu with checkable items, and a menu item with an icon.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-menu.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::{CheckMenuItemBuilder, MenuBuilder, SubmenuBuilder};\n\nfn main() {\n  tauri::Builder::default()\n        .setup(|app| {\n            let file_menu = SubmenuBuilder::new(app, \"File\")\n                .text(\"open\", \"Open\")\n                .text(\"quit\", \"Quit\")\n                .build()?;\n\n            let lang_str = \"en\";\n            let check_sub_item_1 = CheckMenuItemBuilder::new(\"English\")\n                .id(\"en\")\n                .checked(lang_str == \"en\")\n                .build(app)?;\n\n            let check_sub_item_2 = CheckMenuItemBuilder::new(\"Chinese\")\n                .id(\"en\")\n                .checked(lang_str == \"en\")\n                .enabled(false)\n                .build(app)?;\n\n             // Load icon from path\n            let icon_image = Image::from_bytes(include_bytes!(\"../icons/icon.png\")).unwrap();\n\n            let icon_item = IconMenuItemBuilder::new(\"icon\")\n                .icon(icon_image)\n                .build(app)?;\n\n            let other_item = SubmenuBuilder::new(app, \"language\")\n                .item(&check_sub_item_1)\n                .item(&check_sub_item_2)\n                .build()?;\n\n            let menu = MenuBuilder::new(app)\n                .items(&[&file_menu, &other_item,&icon_item])\n                .build()?;\n\n            app.set_menu(menu)?;\n\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Profile for Stable Rust\nDESCRIPTION: Cargo profile configuration for stable Rust toolchain that optimizes binary size and build performance through various compiler settings.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/size.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\nincremental = true # Compile your binary in smaller steps.\n\n[profile.release]\ncodegen-units = 1 # Allows LLVM to perform better optimization.\nlto = true # Enables link-time-optimizations.\nopt-level = \"s\" # Prioritizes small binary size. Use `3` if you prefer speed.\npanic = \"abort\" # Higher performance by disabling panic handlers.\nstrip = true # Ensures debug symbols are removed.\n```\n\n----------------------------------------\n\nTITLE: Adding NFC Permission to Tauri Capabilities Configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to add the NFC permission to the default capabilities configuration file in a Tauri project. It includes the 'nfc:default' permission in the permissions array.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"nfc:default\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Log Plugin in Rust\nDESCRIPTION: Registers the log plugin with Tauri in the main Rust file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_log::{Target, TargetKind};\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_log::Builder::new().build())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Selenium WebDriver Tests with Mocha\nDESCRIPTION: Complete test implementation using Selenium WebDriver with Mocha and Chai, including WebDriver setup, test cases for UI validation, and proper teardown procedures.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/selenium.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst os = require('os');\nconst path = require('path');\nconst { expect } = require('chai');\nconst { spawn, spawnSync } = require('child_process');\nconst { Builder, By, Capabilities } = require('selenium-webdriver');\n\nconst application = path.resolve(\n  __dirname,\n  '..',\n  '..',\n  '..',\n  'target',\n  'release',\n  'hello-tauri-webdriver'\n);\n\nlet driver;\nlet tauriDriver;\n\nbefore(async function () {\n  this.timeout(120000);\n\n  spawnSync('cargo', ['build', '--release']);\n\n  tauriDriver = spawn(\n    path.resolve(os.homedir(), '.cargo', 'bin', 'tauri-driver'),\n    [],\n    { stdio: [null, process.stdout, process.stderr] }\n  );\n\n  const capabilities = new Capabilities();\n  capabilities.set('tauri:options', { application });\n  capabilities.setBrowserName('wry');\n\n  driver = await new Builder()\n    .withCapabilities(capabilities)\n    .usingServer('http://127.0.0.1:4444/')\n    .build();\n});\n\nafter(async function () {\n  await driver.quit();\n  tauriDriver.kill();\n});\n\ndescribe('Hello Tauri', () => {\n  it('should be cordial', async () => {\n    const text = await driver.findElement(By.css('body > h1')).getText();\n    expect(text).to.match(/^[hH]ello/);\n  });\n\n  it('should be excited', async () => {\n    const text = await driver.findElement(By.css('body > h1')).getText();\n    expect(text).to.match(/!$/);\n  });\n\n  it('should be easy on the eyes', async () => {\n    const text = await driver\n      .findElement(By.css('body'))\n      .getCssValue('background-color');\n\n    const rgb = text.match(/^rgb\\((?<r>\\d+), (?<g>\\d+), (?<b>\\d+)\\)$/).groups;\n    expect(rgb).to.have.all.keys('r', 'g', 'b');\n\n    const luma = 0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b;\n    expect(luma).to.be.lessThan(100);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Default Deny Scopes in Tauri Fs Plugin\nDESCRIPTION: Creates a combined set of deny permissions for default security restrictions across platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/scope.mdx#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[set]]\nidentifier = \"deny-default\"\ndescription = '''\nThis denies access to dangerous Tauri relevant files and\nfolders by default.\n'''\npermissions = [\"deny-webview-data-linux\", \"deny-webview-data-windows\"]\n```\n\n----------------------------------------\n\nTITLE: Rust Implementation for Transparent Titlebar on macOS\nDESCRIPTION: Rust code that creates a main window with a transparent titlebar and custom background color specifically for macOS. This implementation uses platform-specific APIs through the cocoa crate.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{TitleBarStyle, WebviewUrl, WebviewWindowBuilder};\n\npub fn run() {\n\ttauri::Builder::default()\n\t\t.setup(|app| {\n\t\t\tlet win_builder =\n\t\t\t\tWebviewWindowBuilder::new(app, \"main\", WebviewUrl::default())\n\t\t\t\t\t.title(\"Transparent Titlebar Window\")\n\t\t\t\t\t.inner_size(800.0, 600.0);\n\n\t\t\t// set transparent title bar only when building for macOS\n\t\t\t#[cfg(target_os = \"macos\")]\n\t\t\tlet win_builder = win_builder.title_bar_style(TitleBarStyle::Transparent);\n\n\t\t\tlet window = win_builder.build().unwrap();\n\n\t\t\t// set background color only when building for macOS\n\t\t\t#[cfg(target_os = \"macos\")]\n\t\t\t{\n\t\t\t\tuse cocoa::appkit::{NSColor, NSWindow};\n\t\t\t\tuse cocoa::base::{id, nil};\n\n\t\t\t\tlet ns_window = window.ns_window().unwrap() as id;\n\t\t\t\tunsafe {\n\t\t\t\t\tlet bg_color = NSColor::colorWithRed_green_blue_alpha_(\n\t\t\t\t\t\t\tnil,\n\t\t\t\t\t\t\t50.0 / 255.0,\n\t\t\t\t\t\t\t158.0 / 255.0,\n\t\t\t\t\t\t\t163.5 / 255.0,\n\t\t\t\t\t\t\t1.0,\n\t\t\t\t\t);\n\t\t\t\t\tns_window.setBackgroundColor_(bg_color);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tOk(())\n\t\t})\n\t\t.run(tauri::generate_context!())\n\t\t.expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ok/Cancel Dialog in JavaScript\nDESCRIPTION: Implementation of an Ok/Cancel confirmation dialog using the confirm function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@tauri-apps/plugin-dialog';\n\nconst confirmation = await confirm(\n  'This action cannot be reverted. Are you sure?',\n  { title: 'Tauri', kind: 'warning' }\n);\n\nconsole.log(confirmation);\n```\n\n----------------------------------------\n\nTITLE: Adding SQL Migrations to Plugin Builder in Rust\nDESCRIPTION: This snippet shows how to add SQL migrations to the Tauri SQL plugin builder in the main Rust file of a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_sql::{Builder, Migration, MigrationKind};\n\nfn main() {\n    let migrations = vec![\n        // Define your migrations here\n        Migration {\n            version: 1,\n            description: \"create_initial_tables\",\n            sql: \"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT);\",\n            kind: MigrationKind::Up,\n        }\n    ];\n\n    tauri::Builder::default()\n        .plugin(\n            tauri_plugin_sql::Builder::default()\n                .add_migrations(\"sqlite:mydatabase.db\", migrations)\n                .build(),\n        )\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri to Recognize the Sidecar Binary\nDESCRIPTION: JSON configuration in tauri.conf.json that adds the sidecar binary to the externalBin array, allowing Tauri to handle its bundling.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/sidecar-nodejs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"externalBin\": [\"binaries/app\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML for Manual Drag Region Implementation\nDESCRIPTION: Modified HTML for the titlebar that removes the data-tauri-drag-region attribute and adds an id for manual JavaScript drag implementation.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"titlebar\" class=\"titlebar\">\n    <!-- ... -->\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Build Hooks in tauri.conf.json\nDESCRIPTION: Configuration snippet for tauri.conf.json that demonstrates how to hook the frontend build and development scripts into the Tauri workflow using beforeDevCommand and beforeBuildCommand.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tauri Isolation Hook\nDESCRIPTION: JavaScript implementation of the Tauri isolation hook that intercepts all IPC messages. This example logs the payload without modification but can be extended to implement security checks.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/Inter-Process Communication/isolation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.__TAURI_ISOLATION_HOOK__ = (payload) => {\n  // let's not verify or modify anything, just print the content from the hook\n  console.log('hook', payload);\n  return payload;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Events in Rust\nDESCRIPTION: Shows how to handle menu click events in Rust using the TrayIconBuilder::on_menu_event method.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::tray::TrayIconBuilder;\n\nTrayIconBuilder::new()\n  .on_menu_event(|app, event| match event.id.as_ref() {\n    \"quit\" => {\n      println!(\"quit menu item was clicked\");\n      app.exit(0);\n    }\n    _ => {\n      println!(\"menu item {:?} not handled\", event.id);\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Using Tauri Manager for Path Operations\nDESCRIPTION: Shows how to use the Tauri Manager to perform path operations that were previously in the tauri::api::path module.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{path::BaseDirectory, Manager};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let home_dir_path = app.path().home_dir().expect(\"failed to get home dir\");\n\n        let path = app.path().resolve(\"path/to/something\", BaseDirectory::Config)?;\n\n        Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Persisted Scope Plugin in Rust\nDESCRIPTION: Code modification for the lib.rs file to initialize the persisted-scope plugin in a Tauri application. The plugin is added to the Tauri builder chain.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/persisted-scope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_persisted_scope::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onNewIntent Lifecycle Event for Android Plugin\nDESCRIPTION: Shows how to implement the onNewIntent lifecycle event for an Android Tauri plugin. This event is called when the activity is re-launched and can be used to handle application re-launch scenarios.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Activity\nimport android.content.Intent\nimport app.tauri.annotation.TauriPlugin\n\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n  override fun onNewIntent(intent: Intent) {\n    // handle new intent event\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Build Settings with PNPM\nDESCRIPTION: Configuration for Tauri's build settings when using PNPM as the package manager, specifying build commands and frontend distribution directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"pnpm dev\",\n    \"beforeBuildCommand\": \"pnpm build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../out\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Webview2 Version for Tauri App\nDESCRIPTION: Illustrates how to specify a minimum required Webview2 version for a Tauri application, ensuring the installer verifies and potentially updates the Webview2 runtime.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"nsis\": {\n        \"minimumWebview2Version\": \"110.0.1531.0\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Window Decorations in tauri.conf.json\nDESCRIPTION: JSON configuration to disable window decorations in tauri.conf.json, which is necessary for implementing a custom titlebar.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"tauri\": {\n\t\t\"windows\": [\n\t\t\t{\n\t\t\t\t\"decorations\": false\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Tauri Dialog plugin to open a save file dialog in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { save } from '@tauri-apps/plugin-dialog';\nconst filePath = await save({\n  filters: [\n    {\n      name: 'Image',\n      extensions: ['png', 'jpeg'],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing the Command in the Plugin Initializer\nDESCRIPTION: Modifies the Tauri plugin initialization in lib.rs to register the new write_custom_file command, making it available to the frontend.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn init<R: Runtime>() -> TauriPlugin<R> {\nBuilder::new(\"test\")\n    .invoke_handler(tauri::generate_handler![\n        commands::ping,\n        commands::write_custom_file,\n    ])\n    .setup(|app, api| {\n        #[cfg(mobile)]\n        let test = mobile::init(app, api)?;\n        #[cfg(desktop)]\n        let test = desktop::init(app, api)?;\n        app.manage(test);\n\n        // manage state so it is accessible by the commands\n        app.manage(MyState::default());\n        Ok(())\n    })\n    .build()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Localhost Plugin in Rust\nDESCRIPTION: Code snippet showing how to initialize the localhost plugin in the main Rust file of a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/localhost.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_localhost::Builder::new().build())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: DevTools Feature Configuration in Cargo.toml\nDESCRIPTION: TOML configuration to enable DevTools feature in production builds through Cargo dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri = { version = \"...\", features = [\"...\", \"devtools\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in tauri.conf.json with Object Syntax\nDESCRIPTION: Example configuration showing how to specify resource files using an object mapping source paths to destination paths in tauri.conf.json\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"resources\": {\n      \"/absolute/path/to/textfile.txt\": \"resources/textfile.txt\",\n      \"relative/path/to/jsonfile.json\": \"resources/jsonfile.json\",\n      \"resources/**/*\": \"resources/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dialog Plugin in Rust\nDESCRIPTION: Modification to lib.rs to initialize the dialog plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_dialog::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in tauri.conf.json with Array Syntax\nDESCRIPTION: Example configuration showing how to specify resource files using an array of paths in tauri.conf.json. Supports absolute paths, relative paths, and glob patterns.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"resources\": [\n      \"/absolute/path/to/textfile.txt\",\n      \"relative/path/to/jsonfile.json\",\n      \"resources/**/*\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using File System Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Tauri File System plugin to create a directory in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mkdir, BaseDirectory } from '@tauri-apps/plugin-fs';\nawait mkdir('db', { baseDir: BaseDirectory.AppLocalData });\n```\n\n----------------------------------------\n\nTITLE: Initializing CrabNebula DevTools in Tauri Application\nDESCRIPTION: Rust code snippet demonstrating how to initialize the CrabNebula DevTools plugin in a Tauri application's main function. It shows conditional compilation for debug builds and proper integration with the Tauri builder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/crabnebula-devtools.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    // This should be called as early in the execution of the app as possible\n    #[cfg(debug_assertions)] // only enable instrumentation in development builds\n    let devtools = tauri_plugin_devtools::init();\n\n    let mut builder = tauri::Builder::default();\n\n    #[cfg(debug_assertions)]\n    {\n        builder = builder.plugin(devtools);\n    }\n\n    builder\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Permissions in TOML Configuration\nDESCRIPTION: Updates the default.toml permissions file to include the new command, allowing it to be used by default when the plugin is installed.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n\"$schema\" = \"schemas/schema.json\"\n[default]\ndescription = \"Default permissions for the plugin\"\npermissions = [\"allow-ping\", \"allow-write-custom-file\"]\n```\n\n----------------------------------------\n\nTITLE: Renaming Packaged Binary for Tauri Sidecar Format\nDESCRIPTION: A Node.js script that renames the packaged binary to match Tauri's expected sidecar filename format. It detects the platform target triple using Rust and moves the binary to the correct location.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/sidecar-nodejs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\nconst ext = process.platform === 'win32' ? '.exe' : '';\n\nconst rustInfo = execSync('rustc -vV');\nconst targetTriple = /host: (\\S+)/g.exec(rustInfo)[1];\nif (!targetTriple) {\n  console.error('Failed to determine platform target triple');\n}\nfs.renameSync(\n  `app${ext}`,\n  `../src-tauri/binaries/app-${targetTriple}${ext}`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels and Filters in Rust\nDESCRIPTION: Examples of setting maximum log levels and filters for the log plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .level(log::LevelFilter::Info)\n  .build()\n```\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .level(log::LevelFilter::Info)\n  .level_for(\"my_crate_name::commands\", log::LevelFilter::Trace)\n  .build()\n```\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .filter(|metadata| metadata.target() != \"hyper\")\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with Channel ID in Tauri\nDESCRIPTION: JavaScript example showing how to send a notification using a specific channel ID to apply channel-specific behavior.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sendNotification } from '@tauri-apps/plugin-notification';\n\nsendNotification({\n  title: 'New Message',\n  body: 'You have a new message',\n  channelId: 'messages',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WiX Localization Strings for Tauri Installer\nDESCRIPTION: XML configuration for WiX localization strings used in a Tauri application's Windows Installer. This example defines custom strings for various installer messages and features.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<WixLocalization\n  Culture=\"en-US\"\n  xmlns=\"http://schemas.microsoft.com/wix/2006/localization\"\n>\n  <String Id=\"LaunchApp\"> Launch MyApplicationName </String>\n  <String Id=\"DowngradeErrorMessage\">\n    A newer version of MyApplicationName is already installed.\n  </String>\n  <String Id=\"PathEnvVarFeature\">\n    Add the install location of the MyApplicationName executable to\n    the PATH system environment variable. This allows the\n    MyApplicationName executable to be called from any location.\n  </String>\n  <String Id=\"InstallAppFeature\">\n    Installs MyApplicationName.\n  </String>\n</WixLocalization>\n```\n\n----------------------------------------\n\nTITLE: Configuring Biometric Plugin Permissions in Capabilities\nDESCRIPTION: JSON configuration for the Tauri capabilities file that adds the required permission for using the biometric plugin in the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\"biometric:default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating System Tray at Runtime in Rust\nDESCRIPTION: Example of creating a system tray at runtime using Tauri's new SystemTray API in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{Builder, CustomMenuItem, SystemTray, SystemTrayEvent, SystemTrayMenu};\nBuilder::default()\n    .setup(|app| {\n        let handle = app.handle();\n        SystemTray::new()\n            .with_id(\"main\")\n            .with_menu(\n                SystemTrayMenu::new().add_item(CustomMenuItem::new(\"quit\", \"Quit\"))\n            )\n            .on_event(move |event| {\n                let tray_handle = handle.tray_handle_by_id(\"main\").unwrap();\n                if let SystemTrayEvent::MenuItemClick { id, .. } = event {\n                    if id == \"quit\" {\n                        tray_handle.destroy().unwrap();\n                    }\n                }\n            })\n            .build(&handle)\n            .expect(\"unable to create tray\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Entitlements Configuration\nDESCRIPTION: XML configuration for App Sandbox and team identifier entitlements required for App Store distribution\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.application-identifier</key>\n    <string>$TEAM_ID.$IDENTIFIER</string>\n    <key>com.apple.developer.team-identifier</key>\n    <string>$TEAM_ID</string>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Using Shell Plugin in Rust\nDESCRIPTION: Example of using the Tauri Shell plugin to execute a shell command in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n\nlet shell = app_handle.shell();\nlet output = tauri::async_runtime::block_on(async move {\n\t\tshell\n\t\t\t\t.command(\"echo\")\n\t\t\t\t.args([\"Hello from Rust!\"])\n\t\t\t\t.output()\n\t\t\t\t.await\n\t\t\t\t.unwrap()\n});\nif output.status.success() {\n\t\tprintln!(\"Result: {:?}\", String::from_utf8(output.stdout));\n} else {\n\t\tprintln!(\"Exit with code: {}\", output.status.code().unwrap());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Load Lifecycle Event for Android Plugin\nDESCRIPTION: Shows how to implement the load lifecycle event for an Android Tauri plugin. This event is called when the plugin is loaded into the web view and can be used for plugin initialization.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Activity\nimport android.webkit.WebView\nimport app.tauri.annotation.TauriPlugin\n\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n  override fun load(webView: WebView) {\n    // perform plugin setup here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Window State Plugin in Rust\nDESCRIPTION: Modification to lib.rs to initialize the window-state plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_window_state::Builder::default().build());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Update Target in JavaScript\nDESCRIPTION: This snippet shows how to set a custom target for updates, which can be useful for specific build flavors or universal binaries in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { check } from '@tauri-apps/plugin-updater';\n\nconst update = await check({\n  target: 'macos-universal',\n});\n```\n\n----------------------------------------\n\nTITLE: Using MenuBuilder in Rust\nDESCRIPTION: Demonstrates how to use the new MenuBuilder API to create a menu in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::MenuBuilder;\n\ntauri::Builder::default()\n    .setup(|app| {\n        let menu = MenuBuilder::new(app)\n            .copy()\n            .paste()\n            .separator()\n            .undo()\n            .redo()\n            .text(\"open-url\", \"Open URL\")\n            .check(\"toggle\", \"Toggle\")\n            .icon(\"show-app\", \"Show App\", app.default_window_icon().cloned().unwrap())\n            .build()?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for Tauri signing on Mac/Linux\nDESCRIPTION: Shell commands for setting environment variables required for signing Tauri applications on Mac/Linux systems. These variables specify the private key location and optional password.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport TAURI_SIGNING_PRIVATE_KEY=\"Path or content of your private key\"\n# optionally also add a password\nexport TAURI_SIGNING_PRIVATE_KEY_PASSWORD=\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Frontend for Tauri App\nDESCRIPTION: Minimal HTML file with basic styling that serves as the frontend for the Tauri application. Includes centered layout and custom color scheme.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello Tauri!</title>\n    <style>\n      body {\n        /* Add a nice colorscheme */\n        background-color: #222831;\n        color: #ececec;\n\n        /* Make the body the exact size of the window */\n        margin: 0;\n        height: 100vh;\n        width: 100vw;\n\n        /* Vertically and horizontally center children of the body tag */\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Hello, Tauri!</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tray Icon in JavaScript\nDESCRIPTION: Demonstrates how to create a new tray icon using the TrayIcon.new static function in JavaScript. It allows for customization through options.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TrayIcon } from '@tauri-apps/api/tray';\n\nconst options = {\n  // here you can add a tray menu, title, tooltip, event handler, etc\n};\n\nconst tray = await TrayIcon.new(options);\n```\n\n----------------------------------------\n\nTITLE: Using Updater Plugin in JavaScript\nDESCRIPTION: Demonstrates how to check for updates, download, install, and relaunch the application using the updater plugin in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { check } from '@tauri-apps/plugin-updater';\nimport { relaunch } from '@tauri-apps/plugin-process';\n\nconst update = await check();\nif (update.response.available) {\n  console.log(\n    `Update to ${update.response.latestVersion} available! Date: ${update.response.date}`\n  );\n  console.log(`Release notes: ${update.response.body}`);\n  await update.downloadAndInstall();\n  // nécéssite le plugin `process`\n  await relaunch();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in egui\nDESCRIPTION: Implements the login form submission logic, handling both Enter key press and button click events. Validates the password, sends the result through a channel, and closes the window on success.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nif (textfield.lost_focus() && ui.input().key_pressed(egui::Key::Enter)) || button.clicked()\n{\n  if password_checker(&password) {\n    let _ = tx.send(password.clone());\n    password.clear();\n    frame.close();\n  } else {\n    *heading = \"Invalid password\".into();\n    textfield.request_focus();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Save File Dialog in JavaScript\nDESCRIPTION: Implementation of a file save dialog with file type filters.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { save } from '@tauri-apps/plugin-dialog';\n\nconst path = await save({\n  filters: [\n    {\n      name: 'My Filter',\n      extensions: ['png', 'jpeg'],\n    },\n  ],\n});\nconsole.log(path);\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Store Plugin in Rust\nDESCRIPTION: Code that initializes the Store plugin in a Tauri Rust application by adding it to the Tauri builder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_store::Builder::new().build())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OS Plugin Dependency in Cargo.toml\nDESCRIPTION: Adds the tauri-plugin-os dependency to the Cargo.toml file for a Rust project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_44\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-os = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Debian Package Extraction PKGBUILD\nDESCRIPTION: Complete PKGBUILD example for extracting and packaging a Tauri application from a Debian package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Maintainer:\n# Contributor:\npkgname=<pkgname>\npkgver=1.0.0\npkgrel=1\npkgdesc=\"Description of your app\"\narch=('x86_64' 'aarch64')\nurl=\"https://github.com/<user>/<project>\"\nlicense=('MIT')\ndepends=('cairo' 'desktop-file-utils' 'gdk-pixbuf2' 'glib2' 'gtk3' 'hicolor-icon-theme' 'libsoup' 'pango' 'webkit2gtk-4.1')\noptions=('!strip' '!debug')\ninstall=${pkgname}.install\nsource_x86_64=(\"${url}/releases/download/v${pkgver}/appname_${pkgver}_amd64.deb\")\nsource_aarch64=(\"${url}/releases/download/v${pkgver}/appname_${pkgver}_arm64.deb\")\nsha256sums_x86_64=('ca85f11732765bed78f93f55397b4b4cbb76685088553dad612c5062e3ec651f')\nsha256sums_aarch64=('ed2dc3169d34d91188fb55d39867713856dd02a2360ffe0661cb2e19bd701c3c')\npackage() {\n\t# Extract package data\n\ttar -xvf data.tar.gz -C \"${pkgdir}\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Plugin Permissions\nDESCRIPTION: JSON configuration for setting up log plugin permissions in Tauri capabilities.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\"log:default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Info.plist Export Compliance\nDESCRIPTION: XML configuration for declaring encryption usage in the app for App Store compliance\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>ITSAppUsesNonExemptEncryption</key>\n\t<false/>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Setting Stronghold plugin permissions in capabilities\nDESCRIPTION: Example of enabling the Stronghold plugin permissions in a Tauri capabilities configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/stronghold.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...,\n\t\"permissions\": [\n\t\t\"stronghold:default\",\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri with Deno Build Settings\nDESCRIPTION: Configuration settings in tauri.conf.json for Deno-based Qwik projects, specifying build paths and commands for development and production builds.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/qwik.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"devUrl\": \"http://localhost:5173\"\n    \"frontendDist\": \"../dist\",\n    \"beforeDevCommand\": \"deno task dev\",\n    \"beforeBuildCommand\": \"deno task build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri App with create-tauri-app in Bash\nDESCRIPTION: Command to create a new Tauri application using the create-tauri-app tool. This is the recommended way to start a new Tauri project, setting up the necessary files and configurations.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create tauri-app\n```\n\n----------------------------------------\n\nTITLE: Defining Android Plugin Configuration in Kotlin\nDESCRIPTION: Shows how to define and access plugin configuration for an Android Tauri plugin. The example includes a Config class with a timeout property and demonstrates accessing it in the plugin's load method.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Activity\nimport android.webkit.WebView\nimport app.tauri.annotation.TauriPlugin\nimport app.tauri.annotation.InvokeArg\n\n@InvokeArg\nclass Config {\n    var timeout: Int? = 3000\n}\n\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n  private var timeout: Int? = 3000\n\n  override fun load(webView: WebView) {\n    getConfig(Config::class.java).let {\n       this.timeout = it.timeout\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Plugin in Tauri Application\nDESCRIPTION: Rust code modification to initialize the HTTP plugin in the Tauri builder configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/http-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_http::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Development Server Settings\nDESCRIPTION: JSON configuration for Tauri's development server settings, including devUrl for the development server address and beforeDevCommand for the startup script.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"devUrl\": \"http://localhost:3000\",\n    \"beforeDevCommand\": \"npm run dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri with npm Build Settings\nDESCRIPTION: Configuration settings in tauri.conf.json for npm-based Qwik projects, defining build paths and commands for development and production.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/qwik.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"devUrl\": \"http://localhost:5173\"\n    \"frontendDist\": \"../dist\",\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Process Plugin in Rust\nDESCRIPTION: Modification to the src-tauri/src/lib.rs file to initialize the process plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/process.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_process::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Scope Checking\nDESCRIPTION: Demonstrates how to use GlobalScope to read plugin-wide scope permissions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::ipc::GlobalScope;\nuse crate::scope::Entry;\n\nasync fn spawn<R: tauri::Runtime>(app: tauri::AppHandle<R>, scope: GlobalScope<'_, Entry>) -> Result<()> {\n  let allowed = scope.allows();\n  let denied = scope.denies();\n  todo!()\n}\n```\n\n----------------------------------------\n\nTITLE: Using CLI Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Tauri CLI plugin to get command-line argument matches in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getMatches } from '@tauri-apps/plugin-cli';\nconst matches = await getMatches();\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Plugin to Cargo Dependencies\nDESCRIPTION: Adds the Tauri HTTP plugin to the Cargo.toml file as a dependency for Rust projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_28\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-http = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Windows Before-Exit Hook for Tauri Updater in Rust\nDESCRIPTION: This code shows how to use the on_before_exit function in the Tauri updater builder to perform an action before the application exits on Windows during an update. This is necessary due to limitations of Windows installers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\n\nlet update = app\n  .updater_builder()\n  .on_before_exit(|| {\n    println!(\"app is about to exit on Windows!\");\n  })\n  .build()?\n  .check()\n  .await?;\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Cards for Tauri Security Topics\nDESCRIPTION: This JSX code renders a CardGrid component containing LinkCard components for various Tauri security-related topics, including plugin permissions and capabilities for different windows and platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard\n    title=\"Using Plugin Permissions\"\n    href=\"/learn/security/using-plugin-permissions/\"\n  />\n  <LinkCard\n    title=\"Capabilities for Different Windows and Platforms\"\n    href=\"/learn/security/capabilities-for-windows-and-platforms/\"\n  />\n  <LinkCard\n    title=\"Writing Plugin Permissions\"\n    href=\"/learn/security/writing-plugin-permissions/\"\n  />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Initializing Dialog Plugin in Rust\nDESCRIPTION: Demonstrates how to initialize the Tauri Dialog plugin in a Rust application's main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_dialog::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Home Directory Read Permission Set\nDESCRIPTION: Creates a permission set that combines multiple filesystem-related permissions for home directory access.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[set]]\nidentifier = \"allow-home-read-extended\"\ndescription = \"\"\" This allows non-recursive read access to files and to create directories\nin the `$HOME` folder.\n\"\"\"\npermissions = [\n    \"fs:read-files\",\n    \"fs:scope-home\",\n    \"fs:allow-mkdir\"\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Language Selector for Tauri Installer\nDESCRIPTION: Shows how to configure the Tauri NSIS installer to display a language selector before the installer contents are rendered, allowing users to choose their preferred language.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"nsis\": {\n        \"displayLanguageSelector\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Process Plugin in JavaScript\nDESCRIPTION: JavaScript example showing how to use the process plugin to exit the application or relaunch it, with support for both module imports and global Tauri access.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/process.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit, relaunch } from '@tauri-apps/plugin-process';\n// when using `\"withGlobalTauri\": true`, you may use\n// const { exit, relaunch } = window.__TAURI__.process;\n\n// exits the app with the given status code\nawait exit(0);\n\n// restarts the app\nawait relaunch();\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions for Autostart Plugin in JSON\nDESCRIPTION: JSON configuration for setting up the necessary permissions in the capabilities file to enable autostart functionality.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/autostart.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"autostart:allow-enable\",\n    \"autostart:allow-disable\",\n    \"autostart:allow-is-enabled\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Core Plugin Permissions Configuration\nDESCRIPTION: Shows the new simplified way to enable all default core plugin permissions using the single 'core:default' permission.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-release-candidate.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"permissions\": [\n        \"core:default\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Process Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the Process plugin to exit and relaunch the application in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit, relaunch } from '@tauri-apps/plugin-process';\nawait exit(0);\nawait relaunch();\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Plugin for Tauri\nDESCRIPTION: Swift code for creating an iOS plugin that takes a string value and resolves an object. This example shows the structure and initialization required for a Tauri iOS plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-4.mdx#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport WebKit\nimport Tauri\n\nclass ExamplePlugin: Plugin {\n\t@objc public func ping(_ invoke: Invoke) throws {\n\t\tlet value = invoke.getString(\"value\")\n\t\tinvoke.resolve([\"value\": value as Any])\n\t}\n}\n\n@_cdecl(\"init_plugin_example\")\nfunc initPlugin(name: SRString, webview: WKWebView?) {\n\tTauri.registerPlugin(webview: webview, name: name.toString(), plugin: ExamplePlugin())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Desktop Entry Point\nDESCRIPTION: New main.rs file implementation that calls the shared run function for desktop builds.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\n\nfn main() {\n  app_lib::run();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Desktop Deep Links at Runtime in Rust\nDESCRIPTION: Rust code to register a deep link scheme at runtime for desktop platforms in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_deep_link::DeepLinkExt;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_deep_link::init())\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.deep_link().register(\"my-app\")?;\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Console Printing\nDESCRIPTION: Shows how to print debug messages to the Rust console using println macro.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nprintln!(\"Message from Rust: {}\", msg);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for Vite Integration\nDESCRIPTION: Update tauri.conf.json to use Vite's development server and build output. This example shows configuration for npm, but alternatives for yarn, pnpm, and deno are also provided.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run build\",\n    \"devUrl\": \"http://localhost:5173\",\n    \"frontendDist\": \"../dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Dependencies for Tauri\nDESCRIPTION: Cargo.toml configuration with necessary Tauri dependencies and build settings. Includes release profile optimizations for binary size and performance.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello-tauri-webdriver\"\nversion = \"0.1.0\"\nedition = \"2021\"\nrust-version = \"1.56\"\n\n[build-dependencies]\ntauri-build = \"1\"\n\n[dependencies]\ntauri = { version = \"1\", features = [\"custom-protocol\"] }\n\n[profile.release]\nincremental = false\ncodegen-units = 1\npanic = \"abort\"\nopt-level = \"s\"\nlto = true\n```\n\n----------------------------------------\n\nTITLE: Adding the Filesystem Plugin to a Tauri App\nDESCRIPTION: Two methods to add the filesystem plugin to a Tauri application: using the tauri CLI helper and manually adding the dependency with cargo and initializing it in the code.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm tauri add fs\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-fs\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\nfn run() {\n  tauri::Builder::default()\n    .plugin(tauri_plugin_fs::init())\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tauri Upload Plugin in Rust\nDESCRIPTION: This snippet shows how to initialize the Tauri upload plugin in the Rust backend of a Tauri application. It modifies the lib.rs file to include the plugin in the Tauri builder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/upload.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n  tauri::Builder::default()\n    .plugin(tauri_plugin_upload::init())\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Updater Plugin in Rust\nDESCRIPTION: Initializes the updater plugin in the main function of a Rust Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_updater::Builder::new().build())\n}\n```\n\n----------------------------------------\n\nTITLE: Tauri Configuration in JSON5 Format\nDESCRIPTION: Example of Tauri configuration using JSON5 format, which allows comments and more flexible syntax.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json5\nCODE:\n```\n{\n  build: {\n    // devServer URL (comments are allowed!)\n    devPath: 'http://localhost:8000',\n    distDir: '../dist',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Frontend Source Directory\nDESCRIPTION: JSON configuration specifying the frontend source code directory for Tauri's built-in development server.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"frontendDist\": \"./src\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Android Signing Setup\nDESCRIPTION: GitHub Actions workflow step to configure Android signing using encrypted secrets. Sets up keystore properties and decodes base64-encoded keystore file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/android.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: setup Android signing\n  run: |\n    cd src-tauri/gen/android\n    echo \"keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}\" > keystore.properties\n    echo \"password=${{ secrets.ANDROID_KEY_PASSWORD }}\" >> keystore.properties\n    base64 -d <<< \"${{ secrets.ANDROID_KEY_BASE64 }}\" > $RUNNER_TEMP/keystore.jks\n    echo \"storeFile=$RUNNER_TEMP/keystore.jks\" >> keystore.properties\n```\n\n----------------------------------------\n\nTITLE: Initializing CLI Plugin in Rust\nDESCRIPTION: Demonstrates how to initialize the Tauri CLI plugin in a Rust application's main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_cli::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tauri Core Architecture with D2\nDESCRIPTION: A diagram showing the relationships between core Tauri components and upstream dependencies. Illustrates connections between tauri-runtime, WRY, TAO and other key architectural elements.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/architecture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: d2\nCODE:\n```\ndirection: up\n\nCore: {\n  shape: rectangle\n  \"tauri\": {\n    \"tauri-runtime\"\n    \"tauri-macros\"\n    \"tauri-utils\"\n  }\n\n  \"tauri-build\"\n  \"tauri-codegen\"\n  \"tauri-runtime-wry\"\n}\n\nUpstream: {\n  shape: rectangle\n  direction: right\n  WRY\n  TAO\n}\n\nCore.\"tauri\".\"tauri-runtime\" -> Core.\"tauri-runtime-wry\"{style.animated: true}\n\nUpstream.WRY -> Upstream.TAO{style.animated: true}\nCore.\"tauri-runtime-wry\" -> Upstream.Wry {style.animated: true}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Permissions in TOML\nDESCRIPTION: Configuration for command permissions that allow or deny specific plugin commands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n\"$schema\" = \"schemas/schema.json\"\n\n[[permission]]\nidentifier = \"allow-start-server\"\ndescription = \"Enables the start_server command.\"\ncommands.allow = [\"start_server\"]\n\n[[permission]]\nidentifier = \"deny-start-server\"\ndescription = \"Denies the start_server command.\"\ncommands.deny = [\"start_server\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Files in Rust Setup Handler\nDESCRIPTION: Example showing how to access bundled resource files in Rust using the App setup handler and PathResolver\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ntauri::Builder::default()\n  .setup(|app| {\n    // The path specified must follow the same syntax as defined in\n    // `tauri.conf.json > bundle > resources`\n    let resource_path = app.path().resolve(\"lang/de.json\", BaseDirectory::Resource)?;\n\n    let file = std::fs::File::open(&resource_path).unwrap();\n    let lang_de: serde_json::Value = serde_json::from_reader(file).unwrap();\n\n    // This will print 'Guten Tag!' to the terminal\n    println!(\"{}\", lang_de.get(\"hello\").unwrap());\n\n    Ok(())\n  })\n```\n\n----------------------------------------\n\nTITLE: Tauri Configuration in TOML Format\nDESCRIPTION: Example of Tauri configuration using TOML format in Tauri.toml file, newly supported in version 1.1.0.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[build]\ndev-path = \"http://localhost:8000\"\ndist-dir = \"../dist\"\n```\n\n----------------------------------------\n\nTITLE: Adding Window Plugin Dependency in Rust\nDESCRIPTION: Adds the tauri-plugin-window dependency to the Cargo.toml file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-window = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Tauri Runtime Integration with Verso\nDESCRIPTION: Shows how to integrate Verso with Tauri using the tauri-runtime-verso custom runtime. Includes setup for verso path and resource directory configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-verso-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_runtime_verso:{\n    INVOKE_SYSTEM_SCRIPTS, VersoRuntime, set_verso_path, set_verso_resource_directory,\n};\n\nfn main() {\n    set_verso_path(\"../verso/target/debug/versoview\");\n    set_verso_resource_directory(\"../verso/resources\");\n    tauri::Builder::<VersoRuntime>::new()\n        .invoke_system(INVOKE_SYSTEM_SCRIPTS.to_owned())\n        .run(tauri::generate_context!())\n        .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Core Module Import in JavaScript\nDESCRIPTION: Updates the import statement for the core Tauri module, which has been renamed from '@tauri-apps/api/tauri' to '@tauri-apps/api/core'.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n- import { invoke } from \"@tauri-apps/api/tauri\"\n+ import { invoke } from \"@tauri-apps/api/core\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Clipboard Plugin in Rust\nDESCRIPTION: Rust code snippet to initialize the clipboard plugin in the Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/clipboard.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_clipboard_manager::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Core Plugin Permissions in JSON Configuration\nDESCRIPTION: Demonstrates how to update Tauri core plugin permission identifiers in the capabilities configuration. It shows the old beta format and the new release candidate format with the 'core:' prefix.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-2-beta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"permissions\": [\n        \"path:default\",\n        \"event:default\",\n        \"window:default\",\n        \"app:default\",\n        \"image:default\",\n        \"resources:default\",\n        \"menu:default\",\n        \"tray:default\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"permissions\": [\n        \"core:path:default\",\n        \"core:event:default\",\n        \"core:window:default\",\n        \"core:app:default\",\n        \"core:image:default\",\n        \"core:resources:default\",\n        \"core:menu:default\",\n        \"core:tray:default\"\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"permissions\": [\n        \"core:default\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Positioner Plugin in Rust\nDESCRIPTION: Rust code to initialize the Tauri Positioner plugin in the application setup.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_positioner::init());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Tauri Debugging with Visual Studio Windows Debugger\nDESCRIPTION: JSON configuration for .vscode/launch.json to set up debugging for Tauri applications on Windows using the Visual Studio Windows Debugger. It defines a configuration for launching the application in debug mode.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/develop/Debug/vscode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch App Debug\",\n      \"type\": \"cppvsdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/src-tauri/target/debug/your-app-name-here.exe\",\n      \"cwd\": \"${workspaceRoot}\",\n      \"preLaunchTask\": \"ui:dev\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SQL Plugin in Rust\nDESCRIPTION: This snippet shows how to initialize the SQL plugin in the Rust backend of a Tauri application. It adds the plugin to the Tauri builder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_sql::Builder::default().build())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri JSON for Trunk Integration\nDESCRIPTION: This configuration specifies the build commands for development and production, sets the development server path, configures the distribution directory, and enables the global Tauri object for WASM-bindgen.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/frontend/trunk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// tauri.conf.json\n{\n  \"build\": {\n    \"beforeDevCommand\": \"trunk serve\",\n    \"beforeBuildCommand\": \"trunk build\",\n    \"devPath\": \"http://localhost:8080\",\n    \"distDir\": \"../dist\"\n  },\n  \"app\": {\n    \"withGlobalTauri\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Notification Plugin in Rust\nDESCRIPTION: Initializes the Notification plugin in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_notification::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote API Access\nDESCRIPTION: Example of allowing remote sources to access certain Tauri Commands for specific domains.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/capabilities.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/remote-schema.json\",\n  \"identifier\": \"remote-tag-capability\",\n  \"windows\": [\"main\"],\n  \"remote\": {\n    \"urls\": [\"https://*.tauri.app\"]\n  },\n  \"platforms\": [\"iOS\", \"android\"],\n  \"permissions\": [\"nfc:allow-scan\", \"barcode-scanner:allow-scan\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Windows Debugger\nDESCRIPTION: VS Code configuration for debugging Tauri applications using the Visual Studio Windows Debugger (cppvsdbg).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/vscode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch App Debug\",\n      \"type\": \"cppvsdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/src-tauri/target/debug/your-app-name-here.exe\",\n      \"cwd\": \"${workspaceRoot}\",\n      \"preLaunchTask\": \"ui:dev\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tauri Plugin using CLI Commands\nDESCRIPTION: Shell commands to bootstrap a new Tauri plugin project using the Tauri CLI. This includes creating a directory structure, initializing the plugin, and building it.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p tauri-learning\ncd tauri-learning\ncargo tauri plugin new test\ncd tauri-plugin-test\npnpm install\npnpm build\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Using Tauri Positioner Plugin in Rust\nDESCRIPTION: Rust code showing how to use the Tauri Positioner plugin's Window trait extension directly in the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_positioner::{WindowExt, Position};\n\nlet mut win = app.get_webview_window(\"main\").unwrap();\nlet _ = win.as_ref().window().move_window(Position::TopRight);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in Next.js Configuration\nDESCRIPTION: Example of setting HTTP headers in the Next.js configuration file (next.config.js) for Next.js projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/http-headers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  //...\n  async headers() {\n    return [\n      {\n        source: '/*',\n        headers: [\n          {\n            key: 'Cross-Origin-Opener-Policy',\n            value: 'same-origin',\n          },\n          {\n            key: 'Cross-Origin-Embedder-Policy',\n            value: 'require-corp',\n          },\n          {\n            key: 'Timing-Allow-Origin',\n            value: 'https://developer.mozilla.org, https://example.com',\n          },\n          {\n            key: 'Access-Control-Expose-Headers',\n            value: 'Tauri-Custom-Header',\n          },\n          {\n            key: 'Tauri-Custom-Header',\n            value: \"key1 'value1' 'value2'; key2 'value3'\",\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Plugin in Rust\nDESCRIPTION: Initializes the HTTP plugin in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_http::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Template for Tauri Isolation Pattern\nDESCRIPTION: Basic HTML template that loads the isolation pattern JavaScript code. This file serves as the entry point for the isolation application running in the sandboxed iframe.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/Inter-Process Communication/isolation.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Isolation Secure Script</title>\n  </head>\n  <body>\n    <script src=\"index.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers for Yew and Leptos\nDESCRIPTION: Example of setting HTTP headers in the Trunk configuration file (Trunk.toml) for Yew and Leptos projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/http-headers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n#...\n[serve]\n#...\nheaders = { \n  \"Cross-Origin-Opener-Policy\" = \"same-origin\",\n  \"Cross-Origin-Embedder-Policy\" = \"require-corp\",\n  \"Timing-Allow-Origin\" = \"https://developer.mozilla.org, https://example.com\",\n  \"Access-Control-Expose-Headers\" = \"Tauri-Custom-Header\",\n  \"Tauri-Custom-Header\" = \"key1 'value1' 'value2'; key2 'value3'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Mobile Command from Rust in Tauri Plugin\nDESCRIPTION: Demonstrates how to call a mobile command from Rust code in a Tauri plugin. The example shows defining structures for request and response, and using PluginHandle to execute the mobile command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse std::path::PathBuf;\nuse serde::{Deserialize, Serialize};\nuse tauri::Runtime;\n\n#[derive(Serialize)]\n#[serde(rename_all = \"camelCase\")]\npub struct CameraRequest {\n  quality: usize,\n  allow_edit: bool,\n}\n\n#[derive(Deserialize)]\npub struct Photo {\n  path: PathBuf,\n}\n\n\nimpl<R: Runtime> <plugin-name;pascal-case><R> {\n  pub fn open_camera(&self, payload: CameraRequest) -> crate::Result<Photo> {\n    self\n      .0\n      .run_mobile_plugin(\"openCamera\", payload)\n      .map_err(Into::into)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Windows in Tauri Configuration File\nDESCRIPTION: Defines multiple windows in the Tauri configuration file (tauri.conf.json) by specifying window labels, titles, and dimensions for each window.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/capabilities-for-windows-and-platforms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  \"productName\": \"multiwindow\",\n  ...\n  \"app\": {\n    \"windows\": [\n      {\n        \"label\": \"first\",\n        \"title\": \"First\",\n        \"width\": 800,\n        \"height\": 600\n      },\n      {\n        \"label\": \"second\",\n        \"title\": \"Second\",\n        \"width\": 800,\n        \"height\": 600\n      }\n    ],\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Files in AppImage Bundle using Tauri Configuration\nDESCRIPTION: Example configuration showing how to include custom files and directories in the AppImage bundle using the tauri.conf.json file. The configuration maps destination paths in the AppImage to source paths on the filesystem, with all destination paths required to begin with /usr/.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/appimage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"linux\": {\n      \"appimage\": {\n        \"files\": {\n          \"/usr/share/README.md\": \"../README.md\",\n          \"/usr/assets\": \"../assets/\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Opener Plugin in Rust\nDESCRIPTION: Code snippet showing how to modify the lib.rs file to initialize the Opener plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/opener.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_opener::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Update Server Response Schema\nDESCRIPTION: JSON schema for dynamic update server responses, including version information, update URL, and signature. Used when implementing a custom update server.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"\",\n  \"pub_date\": \"\",\n  \"url\": \"\",\n  \"signature\": \"\",\n  \"notes\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OS Plugin in Rust\nDESCRIPTION: Initializes the OS plugin in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_45\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_os::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Deep Links on Windows\nDESCRIPTION: Command to trigger deep links on Windows using the start command in terminal.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nstart <scheme>://url\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for Nuxt Integration (JSON)\nDESCRIPTION: JSON configuration for Tauri to work with Nuxt, specifying build commands, development URL, and frontend distribution directory. Variants are provided for npm, yarn, pnpm, and deno package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nuxt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run generate\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn generate\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"pnpm dev\",\n    \"beforeBuildCommand\": \"pnpm generate\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"deno task dev\",\n    \"beforeBuildCommand\": \"deno task generate\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Notification Plugin with Cargo\nDESCRIPTION: Command to add the notification plugin to the project's dependencies in Cargo.toml using cargo in the src-tauri folder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-notification\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Store Plugin via Command Line\nDESCRIPTION: Command to add the store plugin to a Tauri project directory manually.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-store\n```\n\n----------------------------------------\n\nTITLE: Installing Global Shortcut Plugin via Cargo in Rust\nDESCRIPTION: Command to add the global-shortcut plugin as a dependency in the Cargo.toml file for Tauri projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/global-shortcut.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-global-shortcut --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Setup Tasks\nDESCRIPTION: TypeScript code for implementing fake heavy setup tasks in the frontend using setTimeout.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/splashscreen.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Utility function to implement a sleep function in TypeScript\nfunction sleep(seconds: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\n\n// Setup function\nasync function setup() {\n    // Fake perform some really heavy setup task\n    console.log('Performing really heavy frontend setup task...')\n    await sleep(3);\n    console.log('Frontend setup task complete!')\n    // Set the frontend task as being completed\n    invoke('set_complete', {task: 'frontend'})\n}\n\n// Effectively a JavaScript main function\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    setup()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Profile for Nightly Rust\nDESCRIPTION: Enhanced Cargo profile configuration for nightly Rust toolchain with additional optimizations and compiler flags for better performance and smaller binary size.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/size.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[profile.dev]\nincremental = true # Compile your binary in smaller steps.\nrustflags = [\"-Zthreads=8\"] # Better compile performance.\n\n[profile.release]\ncodegen-units = 1 # Allows LLVM to perform better optimization.\nlto = true # Enables link-time-optimizations.\nopt-level = \"s\" # Prioritizes small binary size. Use `3` if you prefer speed.\npanic = \"abort\" # Higher performance by disabling panic handlers.\nstrip = true # Ensures debug symbols are removed.\ntrim-paths = \"all\" # Removes potentially privileged information from your binaries.\nrustflags = [\"-Cdebuginfo=0\", \"-Zthreads=8\"] # Better compile performance.\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Manifest for Mobile Support\nDESCRIPTION: Changes required in Cargo.toml to support mobile targets by producing a shared library alongside desktop executable.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[lib]\nname = \"app_lib\"\ncrate-type = [\"staticlib\", \"cdylib\", \"rlib\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Tauri Debugging with vscode-lldb\nDESCRIPTION: JSON configuration for .vscode/launch.json to set up debugging for Tauri applications in development and production modes using the vscode-lldb extension. It defines two configurations for building and loading the Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/develop/Debug/vscode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Tauri Development Debug\",\n      \"cargo\": {\n        \"args\": [\n          \"build\",\n          \"--manifest-path=./src-tauri/Cargo.toml\",\n          \"--no-default-features\"\n        ]\n      },\n      \"preLaunchTask\": \"ui:dev\"\n    },\n    {\n      \"type\": \"lldb\",\n      \"request\": \"launch\",\n      \"name\": \"Tauri Production Debug\",\n      \"cargo\": {\n        \"args\": [\"build\", \"--release\", \"--manifest-path=./src-tauri/Cargo.toml\"]\n      },\n      \"preLaunchTask\": \"ui:build\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for Tauri signing on Windows\nDESCRIPTION: PowerShell commands for setting environment variables required for signing Tauri applications on Windows systems. These variables specify the private key location and optional password.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:TAURI_SIGNING_PRIVATE_KEY=\"Path or content of your private key\"\n<# optionally also add a password #>\n$env:TAURI_SIGNING_PRIVATE_KEY_PASSWORD=\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Deep Link Plugin in Rust\nDESCRIPTION: Rust code to initialize the deep-link plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_deep_link::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing File System Plugin in Rust\nDESCRIPTION: Demonstrates how to initialize the Tauri File System plugin in a Rust application's main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_fs::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Installer for WebView2 in Tauri\nDESCRIPTION: JSON configuration for using the offline installer mode for WebView2 in a Tauri application. This significantly increases the installer size (by about 127MB) but allows installation without an internet connection.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"webviewInstallMode\": {\n        \"type\": \"offlineInstaller\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using Yarn\nDESCRIPTION: Command to initialize a new Tauri application using Yarn's create command with the tauri-app package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn create tauri-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Autogeneration in build.rs\nDESCRIPTION: Adds the new command to the COMMANDS constant in build.rs to enable automatic permission generation for the write_custom_file command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nconst COMMANDS: &[&str] = &[\"ping\", \"write_custom_file\"];\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Development Server for Tauri 2.0.0-rc\nDESCRIPTION: Updated RC version configuration for Vite development server using TAURI_DEV_HOST environment variable instead of internal-ip package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-release-candidate.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport Unocss from 'unocss/vite';\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\n\nconst host = process.env.TAURI_DEV_HOST;\n\nexport default defineConfig({\n  plugins: [svelte()],\n  clearScreen: false,\n  server: {\n    host: host || false,\n    port: 1420,\n    strictPort: true,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host: host,\n          port: 1430,\n        }\n      : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Barcode Scanner Plugin with Cargo in Rust\nDESCRIPTION: Command to add the barcode scanner plugin as a dependency in the Cargo.toml file for Android and iOS targets.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/barcode-scanner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-barcode-scanner --target 'cfg(any(target_os = \"android\", target_os = \"ios\"))'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Settings for Leptos Integration\nDESCRIPTION: Tauri configuration file that sets up build commands, development URL, and enables global Tauri API access. It specifies commands for Trunk serve and build operations, along with frontend distribution path.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/leptos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"trunk serve\",\n    \"devUrl\": \"http://localhost:1420\",\n    \"beforeBuildCommand\": \"trunk build\",\n    \"frontendDist\": \"../dist\"\n  },\n  \"app\": {\n    \"withGlobalTauri\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Plugin to Cargo Dependencies\nDESCRIPTION: Command to add the Tauri Shell plugin to the project's Cargo dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-shell\n```\n\n----------------------------------------\n\nTITLE: Creating a Tray Icon in Rust\nDESCRIPTION: Shows how to create a new tray icon using TrayIconBuilder in Rust within the Tauri setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/system-tray.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::tray::TrayIconBuilder;\n\ntauri::Builder::default()\n.setup(|app| {\nlet tray = TrayIconBuilder::new().build(app)?;\nOk(())\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OS Plugin Permissions\nDESCRIPTION: JSON configuration for enabling the OS plugin permissions in the Tauri capabilities file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/os-info.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"os:default\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Websocket Plugin with Package Manager\nDESCRIPTION: Commands to install the Tauri Websocket plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/websocket.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run tauri add websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run tauri add websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm tauri add websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun tauri add websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno task tauri add websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo tauri add websocket\n```\n\n----------------------------------------\n\nTITLE: Defining WiX Fragment for Registry Entries in Tauri\nDESCRIPTION: XML configuration for a WiX fragment that adds registry entries to the Windows Installer for a Tauri application. This example creates two registry values under a specific key.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">\n  <Fragment>\n    <DirectoryRef Id=\"TARGETDIR\">\n      <Component Id=\"MyFragmentRegistryEntries\" Guid=\"*\">\n        <RegistryKey\n          Root=\"HKCU\"\n          Key=\"Software\\MyCompany\\MyApplicationName\"\n          Action=\"createAndRemoveOnUninstall\"\n        >\n          <RegistryValue\n            Type=\"integer\"\n            Name=\"SomeIntegerValue\"\n            Value=\"1\"\n            KeyPath=\"yes\"\n          />\n          <RegistryValue Type=\"string\" Value=\"Default Value\" />\n        </RegistryKey>\n      </Component>\n    </DirectoryRef>\n  </Fragment>\n</Wix>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Files in Tauri Debian Package\nDESCRIPTION: Example configuration showing how to include custom files and directories in a Debian package through tauri.conf.json. Demonstrates mapping local files to package paths and handling both individual files and directories.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/debian.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"linux\": {\n      \"deb\": {\n        \"files\": {\n          \"/usr/share/README.md\": \"../README.md\",\n          \"/usr/share/assets\": \"../assets/\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tasks.json for Tauri Debugging with Visual Studio Windows Debugger\nDESCRIPTION: JSON configuration for .vscode/tasks.json to define tasks for building and running the development server in Tauri applications on Windows. It includes tasks for cargo build, running the dev server, and a combined task for both.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/develop/Debug/vscode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"build:debug\",\n      \"type\": \"cargo\",\n      \"command\": \"build\"\n    },\n    {\n      \"label\": \"ui:dev\",\n      \"type\": \"shell\",\n      \"isBackground\": true,\n      \"command\": \"yarn\",\n      \"args\": [\"dev\"]\n    },\n    {\n      \"label\": \"dev\",\n      \"dependsOn\": [\"build:debug\", \"ui:dev\"],\n      \"group\": {\n        \"kind\": \"build\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Events in Tauri Rust\nDESCRIPTION: Demonstrates how to set up and handle menu events using the new Tauri API in Rust. It shows creating menu items, building a menu, and setting up event handlers for menu interactions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::menu::{CheckMenuItemBuilder, MenuBuilder, MenuItemBuilder};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::with_id(\"toggle\", \"Toggle\").build(app);\n        let check = CheckMenuItemBuilder::new(\"Mark\").build(app);\n        let menu = MenuBuilder::new(app).items(&[&toggle, &check]).build()?;\n\n        app.set_menu(menu)?;\n\n        app.on_menu_event(move |app, event| {\n            if event.id() == check.id() {\n                println!(\"`check` triggered, do something! is checked? {}\", check.is_checked().unwrap());\n            } else if event.id() == \"toggle\" {\n                println!(\"toggle triggered!\");\n            }\n        });\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in Nuxt Configuration\nDESCRIPTION: Example of setting HTTP headers in the Nuxt configuration file (nuxt.config.ts) for Nuxt projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/http-headers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  //...\n  vite: {\n    //...\n    server: {\n      //...\n      headers:{\n        'Cross-Origin-Opener-Policy': 'same-origin',\n        'Cross-Origin-Embedder-Policy': 'require-corp',\n        'Timing-Allow-Origin': 'https://developer.mozilla.org, https://example.com',\n        'Access-Control-Expose-Headers': 'Tauri-Custom-Header',\n        'Tauri-Custom-Header': \"key1 'value1' 'value2'; key2 'value3'\"\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Window Permissions in Capabilities Configuration\nDESCRIPTION: JSON configuration defining window-related permissions in the capabilities file, which is required to enable window manipulation functions like dragging and minimizing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\"core:window:default\", \"core:window:allow-start-dragging\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend UI to Test the Plugin in Svelte\nDESCRIPTION: Modifies the example application's Svelte component to add a button that calls the new write_custom_file command and displays the response.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/writing-plugin-permissions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Greet from './lib/Greet.svelte'\n  import { ping, writeCustomFile } from 'tauri-plugin-test-api'\n\n  let response = ''\n\n  function updateResponse(returnValue) {\n    response += `[${new Date().toLocaleTimeString()}]` + (typeof returnValue === 'string' ? returnValue : JSON.stringify(returnValue)) + '<br>'\n  }\n\n  function _writeCustomFile() {\n    writeCustomFile(\"HELLO FROM TAURI PLUGIN\").then(updateResponse).catch(updateResponse)\n  }\n</script>\n\n<main class=\"container\">\n  <h1>Welcome to Tauri!</h1>\n\n  <div class=\"row\">\n    <a href=\"https://vitejs.dev\" target=\"_blank\">\n      <img src=\"/vite.svg\" class=\"logo vite\" alt=\"Vite Logo\" />\n    </a>\n    <a href=\"https://tauri.app\" target=\"_blank\">\n      <img src=\"/tauri.svg\" class=\"logo tauri\" alt=\"Tauri Logo\" />\n    </a>\n    <a href=\"https://svelte.dev\" target=\"_blank\">\n      <img src=\"/svelte.svg\" class=\"logo svelte\" alt=\"Svelte Logo\" />\n    </a>\n  </div>\n\n  <p>\n    Click on the Tauri, Vite, and Svelte logos to learn more.\n  </p>\n\n  <div class=\"row\">\n    <Greet />\n  </div>\n\n  <div>\n    <button on:click=\"{_writeCustomFile}\">Write</button>\n    <div>{@html response}</div>\n  </div>\n\n\n</main>\n\n<style>\n  .logo.vite:hover {\n    filter: drop-shadow(0 0 2em #747bff);\n  }\n\n  .logo.svelte:hover {\n    filter: drop-shadow(0 0 2em #ff3e00);\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Downloaded Bootstrapper for WebView2 in Tauri\nDESCRIPTION: JSON configuration for using the downloaded bootstrapper installation mode for WebView2 in a Tauri application. This is the default setting, requiring an internet connection but resulting in a smaller installer size.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"webviewInstallMode\": {\n        \"type\": \"downloadBootstrapper\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Isolation Pattern\nDESCRIPTION: JSON configuration in tauri.conf.json that enables the isolation pattern and specifies the directory containing the isolation application files.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/Inter-Process Communication/isolation.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"distDir\": \"../dist\"\n  },\n  \"app\": {\n    \"security\": {\n      \"pattern\": {\n        \"use\": \"isolation\",\n        \"options\": {\n          \"dir\": \"../dist-isolation\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tauri Configuration in JSON Format\nDESCRIPTION: Example of Tauri configuration using JSON format in tauri.conf.json file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"devPath\": \"http://localhost:8000\",\n    \"distDir\": \"../dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Event Communication in Tauri using D2\nDESCRIPTION: Sequence diagram showing bidirectional Event communication between the Webview Frontend and Core Backend. Events are fire-and-forget, one-way IPC messages used for lifecycle events and state changes.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/Inter-Process Communication/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: d2\nCODE:\n```\nshape: sequence_diagram\n\nFrontend: {\n  shape: rectangle\n  label: \"Webview\\nFrontend\"\n}\nCore: {\n  shape: rectangle\n  label: \"Core\\nBackend\"\n}\n\nFrontend -> Core: \"Event\"{style.animated: true}\nCore -> Frontend: \"Event\"{style.animated: true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Targets in Rust\nDESCRIPTION: Examples of configuring different log targets using the log plugin builder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .target(tauri_plugin_log::Target::new(\n    tauri_plugin_log::TargetKind::Stdout,\n  ))\n  .build()\n```\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .target(tauri_plugin_log::Target::new(\n    tauri_plugin_log::TargetKind::Webview,\n  ))\n  .build()\n```\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .target(tauri_plugin_log::Target::new(\n    tauri_plugin_log::TargetKind::LogDir {\n      file_name: Some(\"logs\".to_string()),\n    },\n  ))\n  .build()\n```\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .target(tauri_plugin_log::Target::new(\n    tauri_plugin_log::TargetKind::Folder {\n      path: std::path::PathBuf::from(\"/path/to/logs\"),\n      file_name: None,\n    },\n  ))\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Static Export with Tauri\nDESCRIPTION: Next.js configuration setup for static site generation (SSG) with Tauri integration. Includes settings for image optimization and asset prefix configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isProd = process.env.NODE_ENV === 'production';\n\nconst internalHost = process.env.TAURI_DEV_HOST || 'localhost';\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\noutput: 'export',\nimages: {\n    unoptimized: true,\n},\nassetPrefix: isProd ? undefined : `http://${internalHost}:3000`,\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: RPM Pre-installation Script Example\nDESCRIPTION: Example of a pre-installation script that outputs installation status information\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/rpm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"-------------\"\necho \"This is pre\"\necho \"Install Value: $1\"\necho \"Upgrade Value: $1\"\necho \"Uninstall Value: $1\"\necho \"-------------\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Bootstrapper for WebView2 in Tauri\nDESCRIPTION: JSON configuration for using the embedded bootstrapper installation mode for WebView2 in a Tauri application. This increases the installer size by about 1.8MB but improves compatibility with Windows 7 systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"webviewInstallMode\": {\n        \"type\": \"embedBootstrapper\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit with Static Adapter\nDESCRIPTION: JavaScript configuration for SvelteKit using the static adapter. It sets up the adapter with a fallback option and uses vitePreprocess for preprocessing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/sveltekit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-static';\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  // Consult https://kit.svelte.dev/docs/integrations#preprocessors\n  // for more information about preprocessors\n  preprocess: vitePreprocess(),\n\n  kit: {\n    adapter: adapter({\n      fallback: 'index.html',\n    }),\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for NixOS\nDESCRIPTION: Creates a development shell with all necessary dependencies for Tauri development on NixOS, including Rust and Node.js.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\nin\npkgs.mkShell {\n  nativeBuildInputs = with pkgs; [\n    pkg-config\n    gobject-introspection\n    cargo\n    cargo-tauri\n    nodejs\n  ];\n\n  buildInputs = with pkgs;[\n    at-spi2-atk\n    atkmm\n    cairo\n    gdk-pixbuf\n    glib\n    gtk3\n    harfbuzz\n    librsvg\n    libsoup_3\n    pango\n    webkitgtk_4_1\n    openssl\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Updater Plugin with Cargo\nDESCRIPTION: Command to add the Tauri updater plugin as a dependency in the project's Cargo.toml file. The target configuration ensures the plugin is only included for desktop platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-updater --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Universal Links JSON\nDESCRIPTION: JSON configuration for iOS universal links, specifying app IDs and URL components for deep linking.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"details\": [\n      {\n        \"appIDs\": [\"$DEVELOPMENT_TEAM_ID.$APP_BUNDLE_ID\"],\n        \"components\": [\n          {\n            \"/\": \"/open/*\",\n            \"comment\": \"Matches any URL whose path starts with /open/\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bundle Configuration for macOS Frameworks\nDESCRIPTION: Configuration for including dylib files in macOS app bundles through the tauri.conf.json configuration\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-3.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tauri\": {\n    \"bundle\": {\n      \"macOS\": {\n        \"frameworks\": [\n          \"path/to/library.dylib\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions for Global Shortcut Plugin\nDESCRIPTION: JSON configuration to set up necessary permissions for the global-shortcut plugin in a Tauri application's capabilities file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/global-shortcut.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"global-shortcut:allow-is-registered\",\n    \"global-shortcut:allow-register\",\n    \"global-shortcut:allow-unregister\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: UI Template Selection for Different Languages\nDESCRIPTION: Series of prompts for selecting UI templates based on the chosen frontend language.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/create-project.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n? Choose your UI template ›\nVanilla\nYew\nLeptos\nSycamore\n```\n\n----------------------------------------\n\nTITLE: Initializing Stronghold plugin in Tauri\nDESCRIPTION: Basic code to initialize the Stronghold plugin in a Tauri application's lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/stronghold.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n\t\ttauri::Builder::default()\n\t\t\t\t.plugin(tauri_plugin_stronghold::Builder::new(|password| {}).build())\n\t\t\t\t.run(tauri::generate_context!())\n\t\t\t\t.expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Tauri configuration for v1 compatible updater artifacts\nDESCRIPTION: JSON configuration for enabling v1 compatible updater artifact creation in the Tauri bundle settings. This option is for transitioning from older Tauri versions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"createUpdaterArtifacts\": \"v1Compatible\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tauri Process Model with D2\nDESCRIPTION: A diagram showing Tauri's process model architecture with a Core process managing multiple WebView processes. The diagram illustrates the communication flow between the Core process and WebView processes through Events & Commands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/process-model.md#2025-04-22_snippet_0\n\nLANGUAGE: d2\nCODE:\n```\ndirection: right\n\nCore: {\n  shape: diamond\n}\n\n\"Events & Commands 1\": {\n  WebView1: WebView\n}\n\n\"Events & Commands 2\": {\n  WebView2: WebView\n}\n\n\"Events & Commands 3\": {\n  WebView3: WebView\n}\n\nCore -> \"Events & Commands 1\"{style.animated: true}\nCore -> \"Events & Commands 2\"{style.animated: true}\nCore -> \"Events & Commands 3\"{style.animated: true}\n\n\"Events & Commands 1\" -> WebView1{style.animated: true}\n\"Events & Commands 2\" -> WebView2{style.animated: true}\n\"Events & Commands 3\" -> WebView3{style.animated: true}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Dialog in JavaScript\nDESCRIPTION: Implementation of a simple message dialog with an Ok button.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { message } from '@tauri-apps/plugin-dialog';\n\nawait message('File not found', { title: 'Tauri', kind: 'error' });\n```\n\n----------------------------------------\n\nTITLE: Removing a Notification Channel in Tauri\nDESCRIPTION: JavaScript code demonstrating how to remove a specific notification channel by its ID.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { removeChannel } from '@tauri-apps/plugin-notification';\n\nawait removeChannel('messages');\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Rendering in SvelteKit\nDESCRIPTION: TypeScript configuration to disable server-side rendering in SvelteKit, which is necessary for using Tauri APIs that depend on the global window object.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/sveltekit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ssr = false;\n```\n\n----------------------------------------\n\nTITLE: Async Child Process Events in Rust\nDESCRIPTION: Example of spawning a child process and reading its events asynchronously using the shell plugin\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_62\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::{ShellExt, process::CommandEvent};\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            let handle = app.handle().clone();\n            tauri::async_runtime::spawn(async move {\n                let (mut rx, mut child) = handle.shell().command(\"cargo\")\n                    .args([\"tauri\", \"dev\"])\n                    .spawn()\n                    .expect(\"Failed to spawn cargo\");\n\n                let mut i = 0;\n                while let Some(event) = rx.recv().await {\n                    if let CommandEvent::Stdout(line) = event {\n                        println!(\"got: {}\", String::from_utf8(line).unwrap());\n                       i += 1;\n                       if i == 4 {\n                           child.write(\"message from Rust\\n\".as_bytes()).unwrap();\n                           i = 0;\n                       }\n                   }\n                }\n            });\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Plugin in Tauri Rust\nDESCRIPTION: Illustrates how to add and initialize the Shell plugin in a Tauri Rust project. This includes adding the Cargo dependency and initializing the plugin in the main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-shell = \"2\"\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CLI Plugin in Tauri Project (Manual)\nDESCRIPTION: Command to add the CLI plugin to the project's dependencies in Cargo.toml, targeting desktop platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-cli --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Window Permission Table in Markdown\nDESCRIPTION: A markdown table defining the complete set of Tauri window permissions. Each row contains a permission identifier and its corresponding description, covering operations like window creation, manipulation, state checking, and monitor handling.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/acl/core-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Identifier                                        | Description                                                                           |\n| ------------------------------------------------- | ------------------------------------------------------------------------------------- |\n| `core:window:allow-available-monitors`            | Enables the `available_monitors` command without any pre-configured scope.            |\n| `core:window:deny-available-monitors`             | Denies the `available_monitors` command without any pre-configured scope.             |\n| `core:window:allow-center`                        | Enables the `center` command without any pre-configured scope.                        |\n| `core:window:deny-center`                         | Denies the `center` command without any pre-configured scope.                         |\n```\n\n----------------------------------------\n\nTITLE: Configuring Tray Icon in Tauri Rust\nDESCRIPTION: Shows how to set up a tray icon with menu and event handling in a Tauri Rust application. It demonstrates creating a tray icon, building a menu, and handling both menu and tray events.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::{\n    menu::{MenuBuilder, MenuItemBuilder},\n    tray::{MouseButton, MouseButtonState, TrayIconBuilder, TrayIconEvent},\n};\n\ntauri::Builder::default()\n    .setup(|app| {\n        let toggle = MenuItemBuilder::with_id(\"toggle\", \"Toggle\").build(app);\n        let menu = MenuBuilder::new(app).items(&[&toggle]).build()?;\n        let tray = TrayIconBuilder::new()\n            .menu(&menu)\n            .on_menu_event(move |app, event| match event.id().as_ref() {\n                \"toggle\" => {\n                    println!(\"toggle clicked\");\n                }\n                _ => (),\n            })\n            .on_tray_event(|tray, event| {\n                if let TrayIconEvent::Click {\n                        button: MouseButton::Left,\n                        button_state: MouseButtonState::Up,\n                        ..\n                } = event\n                {\n                    let app = tray.app_handle();\n                    if let Some(webview_window) = app.get_webview_window(\"main\") {\n                    let _ = webview_window.show();\n                    let _ = webview_window.set_focus();\n                    }\n                }\n            })\n            .build(app)?;\n\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Window State Plugin Permissions\nDESCRIPTION: JSON configuration to enable the window-state plugin permissions in the Tauri capabilities file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"window-state:default\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Plugin Permissions in Tauri Capabilities\nDESCRIPTION: This JSON snippet demonstrates how to set permissions for the SQL plugin in the Tauri capabilities configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/sql.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"sql:default\",\n    \"sql:allow-execute\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX for Tauri Documentation\nDESCRIPTION: This code snippet imports various components used in the Tauri documentation page, including Card, CardGrid, and LinkCard from Starlight, as well as custom components like AwesomeTauri and BookItem.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardGrid, LinkCard } from '@astrojs/starlight/components';\nimport AwesomeTauri from '@components/AwesomeTauri.astro';\nimport BookItem from '@components/BookItem.astro';\nimport RoseRustBook from '@assets/learn/community/HTML_CSS_JavaScript_and_Rust_for_Beginners_A_Guide_to_Application_Development_with_Tauri.png';\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Plugin Permissions in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure permissions for the Tauri upload plugin in the capabilities configuration file. It adds the 'upload:default' permission to allow the plugin to function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/upload.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"upload:default\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rust on Linux and macOS\nDESCRIPTION: Installs Rust programming language on Linux and macOS systems using the rustup tool.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Trigger for Version Tags\nDESCRIPTION: YAML configuration showing how to trigger a GitHub Actions workflow when version tags are pushed.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Pipelines/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'publish'\n\non:\n  push:\n    tags:\n      - 'app-v*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Timezone in Rust\nDESCRIPTION: Example of configuring the timezone for log dates.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_log::Builder::new()\n  .timezone_strategy(tauri_plugin_log::TimezoneStrategy::UseLocal)\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Package Manager Selection for TypeScript/JavaScript\nDESCRIPTION: CLI prompt for selecting the package manager when using TypeScript/JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/create-project.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n? Choose your package manager ›\npnpm\nyarn\nnpm\nbun\n```\n\n----------------------------------------\n\nTITLE: Using OS Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the OS plugin to get the system architecture in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport { arch } from '@tauri-apps/plugin-os';\nconst architecture = await arch();\n```\n\n----------------------------------------\n\nTITLE: Installing Window State Plugin with Cargo in Rust\nDESCRIPTION: Command to add the window-state plugin to the project's dependencies in Cargo.toml.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-window-state --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Configuring OS Plugin in Tauri Rust\nDESCRIPTION: Shows how to add and initialize the OS plugin in a Tauri Rust project. This snippet demonstrates adding the necessary Cargo dependency and initializing the plugin in the main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-os = \"2\"\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_os::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Plugin with Cargo Command\nDESCRIPTION: Command to add the HTTP plugin as a dependency in your Tauri project using Cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/http-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-http\n```\n\n----------------------------------------\n\nTITLE: Initializing Shell Plugin in Rust\nDESCRIPTION: Basic initialization of the Tauri shell plugin in a Rust application\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_56\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Updater Permissions in Tauri Capabilities JSON\nDESCRIPTION: This JSON snippet shows how to modify the permissions in the Tauri capabilities configuration to enable the updater plugin. It adds the 'updater:default' permission to the list of allowed permissions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"updater:default\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Notification Plugin in Rust\nDESCRIPTION: Shows how to use the Notification plugin to request permission and send a notification in a Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_notification::NotificationExt;\nuse tauri::plugin::PermissionState;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_notification::init())\n        .setup(|app| {\n            if app.notification().permission_state()? == PermissionState::Unknown {\n                app.notification().request_permission()?;\n            }\n            if app.notification().permission_state()? == PermissionState::Granted {\n                app.notification()\n                    .builder()\n                    .body(\"Tauri is awesome!\")\n                    .show()?;\n            }\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Tauri Publishing\nDESCRIPTION: GitHub Actions workflow configuration for automated building and publishing of Tauri applications across multiple platforms with Windows code signing support.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/windows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'publish'\non:\n  push:\n    branches:\n      - release\n\njobs:\n  publish-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: setup node\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - name: install Rust stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n      - name: install webkit2gtk (ubuntu only)\n        if: matrix.platform == 'ubuntu-latest'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y webkit2gtk-4.0\n      - name: install app dependencies and build it\n        run: yarn && yarn build\n      - uses: tauri-apps/tauri-action@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tagName: app-v__VERSION__\n          releaseName: 'App v__VERSION__'\n          releaseBody: 'See the assets to download this version and install.'\n          releaseDraft: true\n          prerelease: false\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpak Tools on Arch Linux\nDESCRIPTION: Command to install the flatpak and flatpak-builder tools on Arch Linux, which are required for building and testing Flatpak packages locally.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S --needed flatpak flatpak-builder\n```\n\n----------------------------------------\n\nTITLE: Configuring Trunk for Tauri Integration\nDESCRIPTION: This TOML configuration for Trunk sets up file watching to ignore the Tauri source directory and configures the WebSocket protocol for development.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/trunk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[watch]\nignore = [\"./src-tauri\"]\n\n[serve]\nws_protocol = \"ws\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Opener Plugin Permissions\nDESCRIPTION: JSON configuration showing how to set up permissions for the Opener plugin in the capabilities configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/opener.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    {\n      \"identifier\": \"opener:allow-open-path\",\n      \"allow\": [\n        {\n          \"path\": \"/path/to/file\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using Deno\nDESCRIPTION: Command to initialize a new Tauri application using Deno, running the create-tauri-app npm package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndeno run -A npm:create-tauri-app\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Plugin in JavaScript\nDESCRIPTION: Demonstrates how to use the HTTP plugin to make a fetch request in a JavaScript application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetch } from '@tauri-apps/plugin-http';\nconst response = await fetch(\n  'https://raw.githubusercontent.com/tauri-apps/tauri/dev/package.json'\n);\n```\n\n----------------------------------------\n\nTITLE: Building Message Dialog in Rust\nDESCRIPTION: Implementation of a blocking message dialog with an Ok button in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::{DialogExt, MessageDialogKind};\n\nlet ans = app.dialog()\n    .message(\"File not found\")\n    .kind(MessageDialogKind::Error)\n    .title(\"Warning\")\n    .blocking_show();\n```\n\n----------------------------------------\n\nTITLE: Adding OS Plugin Dependency in package.json\nDESCRIPTION: Adds the @tauri-apps/plugin-os dependency to the package.json file for a JavaScript project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-os\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Update Target in Rust\nDESCRIPTION: This snippet demonstrates how to set a custom target for updates using either the plugin builder or updater builder in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\ntauri_plugin_updater::Builder::new().target(\"macos-universal\").build()\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_updater::UpdaterExt;\nlet update = app\n  .updater_builder()\n  .target(\"macos-universal\")\n  .build()?\n  .check()\n  .await?;\n```\n\n----------------------------------------\n\nTITLE: Using Window Plugin in Rust\nDESCRIPTION: Demonstrates how to use the window plugin to set the window title in a Rust Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::Manager;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_window::init())\n        .setup(|app| {\n            let window = app.get_window(\"main\").unwrap();\n            window.set_title(\"Tauri\")?;\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Biometric Plugin with Cargo\nDESCRIPTION: Command to add the tauri-plugin-biometric dependency to the project's Cargo.toml file, specifically targeting Android and iOS platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-biometric --target 'cfg(any(target_os = \"android\", target_os = \"ios\"))'\n```\n\n----------------------------------------\n\nTITLE: Adding Process Plugin Dependency in Cargo.toml\nDESCRIPTION: Adds the tauri-plugin-process dependency to the Cargo.toml file for a Rust project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_49\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-process = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Verso Browser Implementation in Rust\nDESCRIPTION: Demonstrates the basic implementation of Verso browser with panel support and maximized window. Shows how to initialize a browser window pointing to example.com.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-verso-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::env::current_exe;\nuse std::thread::sleep;\nuse std::time::Duration;\nuse url::Url;\nuse verso::VersoBuilder;\n\nfn main() {\n    let versoview_path = current_exe().unwrap().parent().unwrap().join(\"versoview\");\n    let controller = VersoBuilder::new()\n        .with_panel(true)\n        .maximized(true)\n        .build(versoview_path, Url::parse(\"https://example.com\").unwrap());\n    loop {\n        sleep(Duration::MAX);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tauri Entitlements Path Configuration\nDESCRIPTION: JSON configuration in tauri.conf.json to specify the entitlements file path.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"entitlements\": \"./Entitlements.plist\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Permission Identifier Constants\nDESCRIPTION: Defines the constants used for permission identifier validation including maximum lengths and naming conventions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nconst IDENTIFIER_SEPARATOR: u8 = b':';\nconst PLUGIN_PREFIX: &str = \"tauri-plugin-\";\n\n// https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field\nconst MAX_LEN_PREFIX: usize = 64 - PLUGIN_PREFIX.len();\nconst MAX_LEN_BASE: usize = 64;\nconst MAX_LEN_IDENTIFIER: usize = MAX_LEN_PREFIX + 1 + MAX_LEN_BASE;\n```\n\n----------------------------------------\n\nTITLE: Initializing Process Plugin in Rust\nDESCRIPTION: Initializes the Process plugin in a Tauri Rust application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_50\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_process::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Creation Permission\nDESCRIPTION: Defines a permission configuration for the mkdir command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[[permission]]\nidentifier = \"allow-mkdir\"\ndescription = \"This enables the mkdir command.\"\ncommands.allow = [\n    \"mkdir\"\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Tokio Dependency to Rust Backend\nDESCRIPTION: Shell command to add the Tokio crate to the Rust backend for asynchronous operations.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/splashscreen.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Run this command where the `Cargo.toml` file is\ncd src-tauri\n# Add the Tokio crate\ncargo add tokio\n# Optionally go back to the top folder to keep developing\n# `tauri dev` can figure out where to run automatically\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri with pnpm Build Settings\nDESCRIPTION: Configuration settings in tauri.conf.json for pnpm-based Qwik projects, defining build paths and commands for development and production environments.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/qwik.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"devUrl\": \"http://localhost:5173\"\n    \"frontendDist\": \"../dist\",\n    \"beforeDevCommand\": \"pnpm dev\",\n    \"beforeBuildCommand\": \"pnpm build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Shortcut Plugin in Rust\nDESCRIPTION: Rust code snippet to initialize the global-shortcut plugin in a Tauri application's lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/global-shortcut.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_global_shortcut::Builder::new().build());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Arch Linux\nDESCRIPTION: Installs the necessary system packages for Tauri development on Arch Linux using the pacman package manager.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -Syu\nsudo pacman -S --needed \\\n  webkit2gtk-4.1 \\\n  base-devel \\\n  curl \\\n  wget \\\n  file \\\n  openssl \\\n  appmenu-gtk-module \\\n  libappindicator-gtk3 \\\n  librsvg\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for openSUSE\nDESCRIPTION: Sets up the required system libraries and development tools for Tauri on openSUSE using the zypper package manager.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo zypper up\nsudo zypper in webkit2gtk3-devel \\\n  libopenssl-devel \\\n  curl \\\n  wget \\\n  file \\\n  libappindicator3-1 \\\n  librsvg-devel\nsudo zypper in -t pattern devel_basis\n```\n\n----------------------------------------\n\nTITLE: Configuring Android App Links JSON\nDESCRIPTION: JSON configuration for Android app links, defining the relationship and target package for deep linking.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n    \"target\": {\n      \"namespace\": \"android_app\",\n      \"package_name\": \"$APP_BUNDLE_ID\",\n      \"sha256_cert_fingerprints\": [\n        $CERT_FINGERPRINT\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Alpine Linux\nDESCRIPTION: Installs the necessary system packages for Tauri development on Alpine Linux using the apk package manager.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo apk add \\\n  build-base \\\n  webkit2gtk \\\n  curl \\\n  wget \\\n  file \\\n  openssl \\\n  libayatana-appindicator-dev \\\n  librsvg\n```\n\n----------------------------------------\n\nTITLE: Adding Notification Plugin Dependency in package.json\nDESCRIPTION: Adds the @tauri-apps/plugin-notification dependency to the package.json file for a JavaScript project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-notification\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WiX Installer Language in Tauri\nDESCRIPTION: JSON configuration examples for setting the language of the WiX Installer in a Tauri application. It shows how to set a single language or multiple languages for the installer.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"wix\": {\n        \"language\": \"fr-FR\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"wix\": {\n        \"language\": [\"en-US\", \"pt-BR\", \"fr-FR\"]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"wix\": {\n        \"language\": {\n          \"en-US\": null,\n          \"pt-BR\": {\n            \"localePath\": \"./wix/locales/pt-BR.wxl\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CrabNebula DevTools Crate for Tauri\nDESCRIPTION: Command to add the tauri-plugin-devtools crate to your Tauri project using Cargo. This is the first step in enabling CrabNebula DevTools for your application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/crabnebula-devtools.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-devtools@2.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Positioner Plugin (Manual - Cargo)\nDESCRIPTION: Command to manually add the Tauri Positioner plugin as a dependency in Cargo.toml.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-positioner --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Adding Global Shortcut Plugin to package.json\nDESCRIPTION: Adds the Tauri Global Shortcut plugin as a dependency in the package.json file for JavaScript projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-global-shortcut\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Usage Description for iOS\nDESCRIPTION: XML configuration for the Info.ios.plist file to set the NSCameraUsageDescription required for iOS camera access.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/barcode-scanner.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\t<dict>\n\t\t<key>NSCameraUsageDescription</key>\n\t\t<string>Read QR codes</string>\n\t</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Configuring Trunk Settings for Leptos Development\nDESCRIPTION: Trunk configuration that sets up build target, watch settings, and server configuration. Includes specific websocket protocol setting required for mobile development and ignores Tauri source directory during watch.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/leptos.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build]\ntarget = \"./index.html\"\n\n[watch]\nignore = [\"./src-tauri\"]\n\n[serve]\nport = 1420\nopen = false\nws_protocol = \"ws\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for Vite Integration\nDESCRIPTION: Updates tauri.conf.json to use Vite's development server and build commands, specifying the frontend distribution folder and development URL.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/vite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run build\",\n    \"devUrl\": \"http://localhost:5173\",\n    \"frontendDist\": \"../dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Build Settings with Deno\nDESCRIPTION: Configuration for Tauri's build settings when using Deno as the runtime, specifying build commands and frontend distribution directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nextjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"deno task dev\",\n    \"beforeBuildCommand\": \"deno task build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../out\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LLVM on macOS\nDESCRIPTION: Homebrew command to install LLVM on macOS systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbrew install llvm\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Plugin Permissions\nDESCRIPTION: JSON configuration for enabling the CLI plugin in the capabilities configuration, which is required to use the plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"main-capability\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\"cli:default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Update Target in Rust\nDESCRIPTION: Demonstrates how to set a custom update target for macOS using the updater plugin in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    let mut updater = tauri_plugin_updater::Builder::new();\n    #[cfg(target_os = \"macos\")]\n    {\n        updater = updater.target(\"darwin-universal\");\n    }\n    tauri::Builder::default()\n        .plugin(updater.build())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing snapcraft\nDESCRIPTION: Command to install the snapcraft tool for building snap packages.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install snapcraft --classic\n```\n\n----------------------------------------\n\nTITLE: Building Non-Blocking Message Dialog in Rust\nDESCRIPTION: Implementation of a non-blocking message dialog with custom button in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_dialog::{DialogExt, MessageDialogButtons, MessageDialogKind};\n\napp.dialog()\n    .message(\"Tauri is Awesome\")\n    .kind(MessageDialogKind::Info)\n    .title(\"Information\")\n    .buttons(MessageDialogButtons::OkCustom(\"Absolutely\"))\n    .show(|result| match result {\n        true => // do something,\n        false => // do something,\n    });\n```\n\n----------------------------------------\n\nTITLE: Importing Log Functions in JavaScript\nDESCRIPTION: Imports logging functions from the Tauri log plugin in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  warn,\n  debug,\n  trace,\n  info,\n  error,\n  attachConsole,\n  attachLogger,\n} from '@tauri-apps/plugin-log';\n```\n\n----------------------------------------\n\nTITLE: Defining NSIS Hooks for Tauri Installer\nDESCRIPTION: Demonstrates how to create NSIS hooks for pre-install, post-install, pre-uninstall, and post-uninstall actions in a Tauri application installer.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_17\n\nLANGUAGE: nsh\nCODE:\n```\n!macro NSIS_HOOK_PREINSTALL\n  MessageBox MB_OK \"PreInstall\"\n!macroend\n\n!macro NSIS_HOOK_POSTINSTALL\n  MessageBox MB_OK \"PostInstall\"\n!macroend\n\n!macro NSIS_HOOK_PREUNINSTALL\n  MessageBox MB_OK \"PreUnInstall\"\n!macroend\n\n!macro NSIS_HOOK_POSTUNINSTALL\n  MessageBox MB_OK \"PostUninstall\"\n!macroend\n```\n\n----------------------------------------\n\nTITLE: Using Global Shortcut Plugin in Rust\nDESCRIPTION: Shows how to use the Tauri Global Shortcut plugin to register a global shortcut in a Rust application's setup function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_global_shortcut::GlobalShortcutExt;\n\ntauri::Builder::default()\n    .plugin(\n        tauri_plugin_global_shortcut::Builder::new().with_handler(|app, shortcut| {\n            println!(\"Shortcut triggered: {:?}\", shortcut);\n        })\n        .build(),\n    )\n    .setup(|app| {\n        // register a global shortcut\n        // on macOS, the Cmd key is used\n        // on Windows and Linux, the Ctrl key is used\n        app.global_shortcut().register(\"CmdOrCtrl+Y\")?;\n        Ok(())\n    })\n```\n\n----------------------------------------\n\nTITLE: Installing NFC Plugin with Cargo\nDESCRIPTION: Command to add the Tauri NFC plugin as a dependency specifically for mobile platforms (Android and iOS).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-nfc --target 'cfg(any(target_os = \"android\", target_os = \"ios\"))'\n```\n\n----------------------------------------\n\nTITLE: Adding Clipboard Plugin Dependency in Cargo.toml\nDESCRIPTION: Command to add the clipboard plugin as a dependency in the Cargo.toml file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/clipboard.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-clipboard-manager\n```\n\n----------------------------------------\n\nTITLE: Allowing Directory Access in Rust\nDESCRIPTION: Demonstrates how to allow access to a specific directory using the fs plugin in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_fs::FsExt;\n\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n  tauri::Builder::default()\n      .plugin(tauri_plugin_fs::init())\n      .setup(|app| {\n          // allowed the given directory\n          let scope = app.fs_scope();\n        \tscope.allow_directory(\"/path/to/directory\", false);\n          dbg!(scope.allowed());\n\n          Ok(())\n       })\n       .run(tauri::generate_context!())\n       .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Notification Actions in Tauri\nDESCRIPTION: JavaScript code to set up a listener for notification action events, which triggers when users interact with notification buttons.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/notification.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onAction } from '@tauri-apps/plugin-notification';\n\nawait onAction((notification) => {\n  console.log('Action performed:', notification);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NSIS Hooks in Tauri Configuration\nDESCRIPTION: Shows how to configure Tauri to use custom NSIS hooks by specifying the path to the hooks file in the tauri.conf.json configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"nsis\": {\n        \"installerHooks\": \"./windows/hooks.nsi\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Privacy Info for File Access\nDESCRIPTION: Creates a PrivacyInfo.xcprivacy file with required privacy access information for iOS.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>NSPrivacyAccessedAPITypes</key>\n    <array>\n      <dict>\n        <key>NSPrivacyAccessedAPIType</key>\n        <string>NSPrivacyAccessedAPICategoryFileTimestamp</string>\n        <key>NSPrivacyAccessedAPITypeReasons</key>\n        <array>\n          <string>C617.1</string>\n        </array>\n      </dict>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri File Watch Ignore Rules\nDESCRIPTION: Sample .taurignore file configuration to exclude specific paths and files from Tauri's file watching mechanism. This file uses gitignore syntax to prevent automatic rebuilds when specified files change.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\nbuild/\nsrc/generated/*.rs\ndeny.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring WiX Fragment Paths and References in Tauri\nDESCRIPTION: JSON configuration to specify WiX fragment paths and component references in a Tauri application. This is used to include custom WiX fragments in the Windows Installer.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"wix\": {\n        \"fragmentPaths\": [\"./windows/fragments/registry.wxs\"],\n        \"componentRefs\": [\"MyFragmentRegistryEntries\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cargo Dependencies via Command Line\nDESCRIPTION: Commands to navigate to the src-tauri directory and update Cargo dependencies using the cargo update command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/updating-dependencies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd src-tauri\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI with cargo-binstall\nDESCRIPTION: Commands to install and use Tauri CLI using cargo-binstall, which downloads pre-built Rust binaries.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cargo install cargo-binstall\n$ cargo binstall tauri-cli\n$ cargo tauri dev # run any Tauri command!\n```\n\n----------------------------------------\n\nTITLE: Original Core Plugin Permissions Configuration in JSON\nDESCRIPTION: Shows the previous beta version format for configuring Tauri core plugin permissions in the capabilities configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-release-candidate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"permissions\": [\n        \"path:default\",\n        \"event:default\",\n        \"window:default\",\n        \"app:default\",\n        \"image:default\",\n        \"resources:default\",\n        \"menu:default\",\n        \"tray:default\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring snapcraft.yaml for Tauri App\nDESCRIPTION: Example snapcraft.yaml configuration for a Tauri application. Includes app metadata, layout, parts, and build instructions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: appname\nbase: core22\nversion: '0.1.0'\nsummary: Your summary # 79 char long summary\ndescription: |\n  Your description\n\ngrade: stable\nconfinement: strict\n\nlayout:\n  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/webkit2gtk-4.1:\n    bind: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/webkit2gtk-4.1\n\napps:\n  appname:\n    command: usr/bin/appname\n    desktop: usr/share/applications/appname.desktop\n    extensions: [gnome]\n    #plugs:\n    #  - network\n    # Add whatever plugs you need here, see https://snapcraft.io/docs/snapcraft-interfaces for more info.\n    # The gnome extension already includes [ desktop, desktop-legacy, gsettings, opengl, wayland, x11, mount-observe, calendar-service ]\n\npackage-repositories:\n  - type: apt\n    components: [main]\n    suites: [noble]\n    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D\n    url: http://ppa.launchpad.net/snappy-dev/snapcraft-daily/ubuntu\n\nparts:\n  build-app:\n    plugin: dump\n    build-snaps:\n      - node/20/stable\n      - rustup/latest/stable\n    build-packages:\n      - libwebkit2gtk-4.1-dev\n      - build-essential\n      - curl\n      - wget\n      - file\n      - libxdo-dev\n      - libssl-dev\n      - libayatana-appindicator3-dev\n      - librsvg2-dev\n      - dpkg\n    stage-packages:\n      - libwebkit2gtk-4.1-0\n      - libayatana-appindicator3-1\n    source: .\n    override-build: |\n      set -eu\n      npm install\n      npm run tauri build -- --bundles deb\n      dpkg -x src-tauri/target/release/bundle/deb/*.deb $SNAPCRAFT_PART_INSTALL/\n      sed -i -e \"s|Icon=appname|Icon=/usr/share/icons/hicolor/32x32/apps/appname.png|g\" $SNAPCRAFT_PART_INSTALL/usr/share/applications/appname.desktop\n```\n\n----------------------------------------\n\nTITLE: Adding NFC Capability in iOS Entitlements\nDESCRIPTION: XML configuration for the app entitlements file to add the NFC tag reading capability, required for iOS applications to use NFC functionality.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>com.apple.developer.nfc.readersession.formats</key>\n\t<array>\n\t\t<string>TAG</string>\n\t</array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Application Directory Structure\nDESCRIPTION: Shows the recommended directory structure for a Tauri application including permission and capability configuration files.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/permissions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntauri-app\n├── index.html\n├── package.json\n├── src\n├── src-tauri\n│   ├── Cargo.toml\n│   ├── permissions\n│      └── <identifier>.toml\n|   ├── capabilities\n│      └── <identifier>.json/.toml\n│   ├── src\n│   ├── tauri.conf.json\n```\n\n----------------------------------------\n\nTITLE: Installing Opener Plugin Manually with Cargo\nDESCRIPTION: Command to add the Tauri Opener plugin to the project's dependencies in Cargo.toml using cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/opener.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-opener\n```\n\n----------------------------------------\n\nTITLE: Visualizing Command Invocation Flow in Tauri using D2\nDESCRIPTION: Sequence diagram illustrating the Command invocation process in Tauri. Shows how the Webview Frontend sends an IPC request to the Core Backend, which invokes a handler function and returns the serialized response.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/Inter-Process Communication/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: d2\nCODE:\n```\nshape: sequence_diagram\n\n\nFrontend: {\n  label: \"Webview\\nFrontend\"\n}\n\nCore: {\n  label: \"Core\\nBackend\"\n}\nInvokeHandler: {\n  label: \"Invoke\\nHandler\"\n}\n\nFrontend -> Core: \"IPC Request\"{style.animated: true}\nCore -> InvokeHandler: \"Invoke command\"{style.animated: true}\nInvokeHandler -> Core: \"Serialize return\"{style.animated: true}\nCore -> Frontend: \"Response\"{style.animated: true}\n```\n\n----------------------------------------\n\nTITLE: Gradle Signing Configuration - Kotlin\nDESCRIPTION: Gradle build configuration in Kotlin for Android app signing. Sets up signing configs and applies them to release builds using properties from keystore.properties file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/android.mdx#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.io.FileInputStream\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nsigningConfigs {\n    create(\"release\") {\n        val keystorePropertiesFile = rootProject.file(\"keystore.properties\")\n        val keystoreProperties = Properties()\n        if (keystorePropertiesFile.exists()) {\n            keystoreProperties.load(FileInputStream(keystorePropertiesFile))\n        }\n\n        keyAlias = keystoreProperties[\"keyAlias\"] as String\n        keyPassword = keystoreProperties[\"password\"] as String\n        storeFile = file(keystoreProperties[\"storeFile\"] as String)\n        storePassword = keystoreProperties[\"password\"] as String\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nbuildTypes {\n    getByName(\"release\") {\n        signingConfig = signingConfigs.getByName(\"release\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Tauri iOS App with Various Package Managers\nDESCRIPTION: Commands for building a Tauri iOS app using different package managers (npm, yarn, pnpm, deno, bun, cargo). The --export-method flag is set to app-store-connect for App Store submission.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run tauri ios build -- --export-method app-store-connect\nyarn tauri ios build --export-method app-store-connect\npnpm tauri ios build --export-method app-store-connect\ndeno task tauri ios build --export-method app-store-connect\nbun tauri ios build --export-method app-store-connect\ncargo tauri ios build --export-method app-store-connect\n```\n\n----------------------------------------\n\nTITLE: Configuring DMG Icon Positions in Tauri Config\nDESCRIPTION: JSON configuration for customizing the positions of the application icon and Applications folder icon in the DMG installer window.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/dmg.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"dmg\": {\n        \"appPosition\": {\n          \"x\": 180,\n          \"y\": 220\n        },\n        \"applicationFolderPosition\": {\n          \"x\": 480,\n          \"y\": 220\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dialog Plugin to package.json\nDESCRIPTION: Adds the Tauri Dialog plugin as a dependency in the package.json file for JavaScript projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-dialog\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Barcode Scanner Plugin in Rust\nDESCRIPTION: Modification to the lib.rs file to initialize the barcode scanner plugin in the Tauri application setup.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/barcode-scanner.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(mobile)]\n            app.handle().plugin(tauri_plugin_barcode_scanner::init());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Window State in Rust\nDESCRIPTION: Example of using the save_window_state() method to manually save the window state in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_window_state::{AppHandleExt, StateFlags};\n\n// `tauri::AppHandle` now has the following additional method\napp.save_window_state(StateFlags::all()); // will save the state of all open windows to disk\n```\n\n----------------------------------------\n\nTITLE: Sidecar Arguments Configuration\nDESCRIPTION: JSON configuration for defining allowed sidecar command arguments in Tauri capabilities.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/desktop-schema.json\",\n  \"identifier\": \"default\",\n  \"description\": \"Capability for the main window\",\n  \"windows\": [\"main\"],\n  \"permissions\": [\n    \"core:default\",\n    {\n      \"identifier\": \"shell:allow-execute\",\n      \"allow\": [\n        {\n          \"args\": [\n            \"arg1\",\n            \"-a\",\n            \"--arg2\",\n            {\n              \"validator\": \"\\\\S+\"\n            }\n          ],\n          \"name\": \"binaries/my-sidecar\",\n          \"sidecar\": true\n        }\n      ]\n    },\n    \"shell:allow-open\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Webview2 Installer for Microsoft Store\nDESCRIPTION: JSON configuration file for setting up offline Webview2 installer mode specifically for Microsoft Store distribution.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/microsoft-store.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"webviewInstallMode\": {\n        \"type\": \"offlineInstaller\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Plugin Dependency in Cargo.toml\nDESCRIPTION: Adds the tauri-plugin-http dependency to the Cargo.toml file for a Rust project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_29\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-http = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using Cargo\nDESCRIPTION: Commands to install and run create-tauri-app using Rust's Cargo package manager. This requires two steps: installing the package and then running it.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo install create-tauri-app --locked\ncargo create-tauri-app\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Fedora\nDESCRIPTION: Sets up the required system libraries and development tools for Tauri on Fedora using the dnf package manager.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf check-update\nsudo dnf install webkit2gtk4.1-devel \\\n  openssl-devel \\\n  curl \\\n  wget \\\n  file \\\n  libappindicator-gtk3-devel \\\n  librsvg2-devel\nsudo dnf group install \"c-development\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Window State in Rust\nDESCRIPTION: Example of using the restore_state() method to manually restore a window's state from disk in Rust.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/window-state.mdx#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_window_state::{WindowExt, StateFlags};\n\n// all `Window` types now have the following additional method\nwindow.restore_state(StateFlags::all()); // will restore the window's state from disk\n```\n\n----------------------------------------\n\nTITLE: Adding Clipboard Plugin to Cargo Dependencies\nDESCRIPTION: Adds the Tauri Clipboard plugin to the Cargo.toml file as a dependency for Rust projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-clipboard-manager = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Windows Certificate Import Step for GitHub Actions\nDESCRIPTION: GitHub Actions step for importing and configuring Windows code signing certificate in the CI/CD pipeline.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/windows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: import windows certificate\n  if: matrix.platform == 'windows-latest'\n  env:\n    WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}\n    WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}\n  run: |\n    New-Item -ItemType directory -Path certificate\n    Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE\n    certutil -decode certificate/tempCert.txt certificate/certificate.pfx\n    Remove-Item -path certificate -include tempCert.txt\n    Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\\CurrentUser\\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)\n```\n\n----------------------------------------\n\nTITLE: Basic Cargo.toml Configuration for Tauri\nDESCRIPTION: Example of a minimal Cargo.toml configuration for a Tauri project, showing required dependencies and basic package metadata.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/configuration-files.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"app\"\nversion = \"0.1.0\"\ndescription = \"A Tauri App\"\nauthors = [\"you\"]\nlicense = \"\"\nrepository = \"\"\ndefault-run = \"app\"\nedition = \"2021\"\nrust-version = \"1.57\"\n\n[build-dependencies]\ntauri-build = { version = \"2.0.0\" }\n\n[dependencies]\nserde_json = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\ntauri = { version = \"2.0.0\", features = [ ] }\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Plugin Dependency in package.json\nDESCRIPTION: Adds the @tauri-apps/plugin-http dependency to the package.json file for a JavaScript project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-http\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Plugin Dependency in Cargo.toml\nDESCRIPTION: Adds the tauri-plugin-shell dependency to the Cargo.toml file for a Rust project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_54\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-shell = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Setting DMG Window Position in Tauri Config\nDESCRIPTION: Configuration for specifying the initial position of the DMG installer window using windowPosition in tauri.conf.json.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/dmg.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"dmg\": {\n        \"windowPosition\": {\n          \"x\": 400,\n          \"y\": 400\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Plugin Configuration in Swift\nDESCRIPTION: Demonstrates how to define and access plugin configuration for an iOS Tauri plugin. The example includes a Config struct with a timeout property and shows how to parse and use it in the plugin's load method.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Config: Decodable {\n  let timeout: Int?\n}\n\nclass ExamplePlugin: Plugin {\n  var timeout: Int? = 3000\n\n  @objc public override func load(webview: WKWebView) {\n    do {\n      let config = try parseConfig(Config.self)\n      self.timeout = config.timeout\n    } catch {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Tauri Features and Community Resources with Search Component\nDESCRIPTION: Implements a searchable section containing Tauri's built-in features and community resources using the Search component. Includes links to official features, community plugins, and integrations with an option for contributions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Search>\n  ## Features\n  <FeaturesList />\n  ## Community Resources\n  <LinkCard\n    title=\"Have something to share?\"\n    description=\"Open a pull request to show us your amazing resource.\"\n    href=\"https://github.com/tauri-apps/awesome-tauri/pulls\"\n  />\n  ### Plugins\n  <AwesomeTauri section=\"plugins-no-official\" />\n  ### Integrations\n  <AwesomeTauri section=\"integrations\" />\n</Search>\n```\n\n----------------------------------------\n\nTITLE: Minimum System Version Configuration\nDESCRIPTION: JSON configuration to set the minimum required macOS version for the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"minimumSystemVersion\": \"12.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in Vite for JavaScript/TypeScript Frameworks\nDESCRIPTION: Example of setting HTTP headers in the Vite configuration file (vite.config.ts) for JavaScript/TypeScript frameworks like Qwik, React, Solid, Svelte, and Vue.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/http-headers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  // ...\n  server: {\n      // ...\n      headers: {\n        'Cross-Origin-Opener-Policy': 'same-origin',\n        'Cross-Origin-Embedder-Policy': 'require-corp',\n        'Timing-Allow-Origin': 'https://developer.mozilla.org, https://example.com',\n        'Access-Control-Expose-Headers': 'Tauri-Custom-Header',\n        'Tauri-Custom-Header': \"key1 'value1' 'value2'; key2 'value3'\"\n      },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using PowerShell\nDESCRIPTION: Command to initialize a new Tauri application using PowerShell, fetching the script from create.tauri.app.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nirm https://create.tauri.app/ps | iex\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tauri Dependencies\nDESCRIPTION: Commands to update Tauri NPM and Cargo dependencies to version 1.4.0. Shows different package manager options for frontend dependencies and Cargo for Rust dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-4.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@latest @tauri-apps/api@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI and Running Migration Script\nDESCRIPTION: Commands for installing the latest Tauri CLI and running the migration helper for upgrading from previous versions to Tauri v2.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@next\nnpm run tauri migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli@next\nyarn tauri migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli@next\npnpm tauri migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo install tauri-cli --version \"^2.0.0\" --locked\ncargo tauri migrate\n```\n\n----------------------------------------\n\nTITLE: Displaying Tauri Plugin Compatibility Table\nDESCRIPTION: Renders a compatibility table for Tauri plugins with hover notes for additional information, using the TableCompatibility component.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Support Table\n\nHover \"*\" to see notes. For more details visit the plugin page\n\n<TableCompatibility />\n```\n\n----------------------------------------\n\nTITLE: Simple IPC Request Mocking in JavaScript with Vitest\nDESCRIPTION: Demonstrates basic IPC request mocking using Tauri's mockIPC function to simulate a simple addition command. Includes WebCrypto polyfill setup for jsdom environment.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/mocking.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { beforeAll, expect, test } from \"vitest\";\nimport { randomFillSync } from \"crypto\";\n\nimport { mockIPC } from \"@tauri-apps/api/mocks\";\nimport { invoke } from \"@tauri-apps/api/core\";\n\n// jsdom doesn't come with a WebCrypto implementation\nbeforeAll(() => {\n  Object.defineProperty(window, 'crypto', {\n    value: {\n      // @ts-ignore\n      getRandomValues: (buffer) => {\n        return randomFillSync(buffer);\n      },\n    },\n  });\n});\n\n\ntest(\"invoke simple\", async () => {\n  mockIPC((cmd, args) => {\n    // simulated rust command called \"add\" that just adds two numbers\n    if(cmd === \"add\") {\n      return (args.a as number) + (args.b as number);\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Plugin to Cargo Dependencies\nDESCRIPTION: Adds the Tauri CLI plugin to the Cargo.toml file as a dependency for Rust projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-cli = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Uploading iOS App Package to App Store using altool\nDESCRIPTION: Command for uploading an iOS application package (.ipa) to the Apple App Store using the altool CLI. Specifies the path to the built IPA file and requires App Store Connect API credentials.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nxcrun altool --upload-app --type ios --file \"src-tauri/gen/apple/build/arm64/$APPNAME.ipa\" --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_ISSUER\n```\n\n----------------------------------------\n\nTITLE: iOS Plugin Event Implementation\nDESCRIPTION: Shows how to implement event triggering in an iOS Tauri plugin for load and camera events using the trigger function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nclass ExamplePlugin: Plugin {\n  @objc public override func load(webview: WKWebView) {\n    trigger(\"load\", data: [:])\n  }\n\n  @objc public func openCamera(_ invoke: Invoke) {\n    trigger(\"camera\", data: [\"open\": true])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Single Instance Plugin in Tauri Rust Code\nDESCRIPTION: Rust code snippet showing how to initialize the Single Instance plugin in the Tauri application's lib.rs file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/single-instance.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_single_instance::init(|app, args, cwd| {}));\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components for Tauri Documentation\nDESCRIPTION: Imports various Astro components for structuring the Tauri documentation page, including link cards, feature lists, community lists, search functionality, and compatibility tables.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { LinkCard } from '@astrojs/starlight/components';\nimport FeaturesList from '@components/list/Features.astro';\nimport CommunityList from '@components/list/Community.astro';\nimport Search from '@components/CardGridSearch.astro';\nimport AwesomeTauri from '@components/AwesomeTauri.astro';\nimport TableCompatibility from '@components/plugins/TableCompatibility.astro';\n```\n\n----------------------------------------\n\nTITLE: Creating RPM Script Directory Structure\nDESCRIPTION: Commands to create the necessary directory structure and script files for RPM package scripts\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/rpm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src-tauri/scripts\n\ntouch src-tauri/scripts/postinstall.sh \\\ntouch src-tauri/scripts/preinstall.sh \\\ntouch src-tauri/scripts/preremove.sh \\\ntouch src-tauri/scripts/postremove.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for iOS Development\nDESCRIPTION: JavaScript configuration for Vite to support iOS development, including dynamic host configuration and WebSocket HMR setup.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nconst host = process.env.TAURI_DEV_HOST;\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  clearScreen: false,\n  server: {\n    host: host || false,\n    port: 1420,\n    strictPort: true,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host,\n          port: 1421,\n        }\n      : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Deep Link Feature to Single Instance Plugin\nDESCRIPTION: TOML configuration to add the deep-link feature to the single instance plugin in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[target.\"cfg(any(target_os = \\\"macos\\\", windows, target_os = \\\"linux\\\"))\".dependencies]\ntauri-plugin-single-instance = { version = \"2.0.0\", features = [\"deep-link\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for WebdriverIO Testing\nDESCRIPTION: Package.json configuration for WebdriverIO test setup including dependencies and test script definition.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/webdriverio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"webdriverio\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"wdio run wdio.conf.js\"\n  },\n  \"dependencies\": {\n    \"@wdio/cli\": \"^7.9.1\"\n  },\n  \"devDependencies\": {\n    \"@wdio/local-runner\": \"^7.9.1\",\n    \"@wdio/mocha-framework\": \"^7.9.1\",\n    \"@wdio/spec-reporter\": \"^7.9.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nvim-dap for Rust Debugging in Neovim\nDESCRIPTION: Sets up the nvim-dap plugin for debugging Rust applications, specifically Tauri apps. It configures the codelldb adapter and defines a launch configuration for Rust programs.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/neovim.mdx#2025-04-22_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal dap = require(\"dap\")\n\ndap.adapters.codelldb = {\n  type = 'server',\n  port = \"${port}\",\n  executable = {\n    -- Change this to your path!\n    command = '/opt/codelldb/adapter/codelldb',\n    args = {\"--port\", \"${port}\"},\n  }\n}\n\ndap.configurations.rust= {\n  {\n    name = \"Launch file\",\n    type = \"codelldb\",\n    request = \"launch\",\n    program = function()\n      return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/target/debug/', 'file')\n    end,\n    cwd = '${workspaceFolder}',\n    stopOnEntry = false\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore - macOS/Linux\nDESCRIPTION: Command to generate a Java Keystore file for Android app signing on macOS/Linux systems using keytool CLI. Creates a 2048-bit RSA key valid for 10000 days.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/android.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkey -v -keystore ~/upload-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying a PNG Image in egui\nDESCRIPTION: Loads a PNG image from embedded binary data, converts it to a texture, and adds it to the UI. This demonstrates how to include graphical elements in an egui interface.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet texture: &egui::TextureHandle = self.texture.get_or_insert_with(|| {\n  let mut reader = png::Decoder::new(std::io::Cursor::new(include_bytes!(\"icons/32x32.png\")))\n  .read_info()\n  .unwrap();\n  let mut buffer = Vec::new();\n  while let Ok(Some(row)) = reader.next_row() {\n    buffer.extend(row.data());\n  }\n  let icon_size = [reader.info().width as usize, reader.info().height as usize];\n  // Load the texture only once.\n  ctx.load_texture(\n    \"icon\",\n    egui::ColorImage::from_rgba_unmultiplied(icon_size, &buffer),\n    egui::TextureFilter::Linear,\n  )\n});\nlogo_and_heading(\n  ui,\n  egui::Image::new(texture, texture.size_vec2()),\n  heading.as_str(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unused Command Removal in Tauri\nDESCRIPTION: Configuration for removing unused commands in Tauri applications to reduce binary size. Requires Tauri 2.4, tauri-build 2.1, tauri-plugin 2.1 and tauri-cli 2.4.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/size.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"removeUnusedCommands\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dialog Plugin to Cargo Dependencies\nDESCRIPTION: Adds the Tauri Dialog plugin to the Cargo.toml file as a dependency for Rust projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-dialog = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Source Build PKGBUILD\nDESCRIPTION: PKGBUILD example for building a Tauri application from source code.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n# Maintainer:\npkgname=<pkgname>-git\npkgver=<pkgver>\npkgrel=1\npkgdesc=\"Description of your app\"\narch=('x86_64' 'aarch64')\nurl=\"https://github.com/<user>/<project>\"\nlicense=('MIT')\ndepends=('cairo' 'desktop-file-utils' 'gdk-pixbuf2' 'glib2' 'gtk3' 'hicolor-icon-theme' 'libsoup' 'pango' 'webkit2gtk-4.1')\nmakedepends=('git' 'openssl' 'appmenu-gtk-module' 'libappindicator-gtk3' 'librsvg' 'cargo' 'pnpm' 'nodejs')\nprovides=('<pkgname>')\nconflicts=('<binname>' '<pkgname>')\nsource=(\"git+${url}.git\")\nsha256sums=('SKIP')\n\npkgver() {\n\tcd <project>\n\t( set -o pipefail\n\t  git describe --long --abbrev=7 2>/dev/null | sed 's/\\([^-]*-g\\)/r\\1/;s/-/./g' ||\n\t  printf \"r%s.%s\" \"$(git rev-list --count HEAD)\" \"$(git rev-parse --short=7 HEAD)\"\n\t)\n}\n\nprepare() {\n\tcd <project>\n\tpnpm install\n}\n\nbuild() {\n\tcd <project>\n\tpnpm tauri build -b deb\n}\n\npackage() {\n\tcp -a <project>/src-tauri/target/release/bundle/deb/<project>_${pkgver}_*/data/* \"${pkgdir}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the eframe::App Trait for LoginLayout\nDESCRIPTION: Implements the App trait from eframe to define how the login UI should be rendered. Sets up the basic window size and layout structure.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl eframe::App for LoginLayout {\n  // Called each time the UI needs repainting\n  // see https://docs.rs/eframe/latest/eframe/trait.App.html#tymethod.update for more details\n  fn update(&mut self, ctx: &egui::Context, frame: &mut eframe::Frame) {\n    let Self {\n      heading,\n      users,\n      user,\n      password,\n      password_checker,\n      tx,\n      ..\n    } = self;\n\n    let size = egui::Vec2 { x: 320., y: 240. };\n    // set the window size\n    frame.set_window_size(size);\n\n    // adds a panel that covers the remainder of the screen\n    egui::CentralPanel::default().show(ctx, |ui| {\n      // our layout will be top-down and centered\n      ui.with_layout(egui::Layout::top_down(egui::Align::Center), |ui| {\n        // we will start adding elements here in the next sections\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Publisher Configuration\nDESCRIPTION: Corrected configuration with a distinct publisher name to avoid conflicts with the product name for Microsoft Store distribution.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/microsoft-store.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productName\": \"Example\",\n  \"identifier\": \"com.example.app\",\n  \"bundle\": {\n    \"publisher\": \"Example Inc.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Package License Configuration\nDESCRIPTION: Configuration for adding license information to the package in Cargo.toml\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/rpm.mdx#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"tauri-app\"\nversion = \"0.0.0\"\ndescription = \"A Tauri App\"\nauthors = [\"you\"]\nedition = \"2021\"\nlicense = \"MIT\"\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Bindings for Tauri Websocket Plugin\nDESCRIPTION: Commands to install the JavaScript bindings for the Tauri Websocket plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/websocket.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/plugin-websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tauri-apps/plugin-websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @tauri-apps/plugin-websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno add npm:@tauri-apps/plugin-websocket\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @tauri-apps/plugin-websocket\n```\n\n----------------------------------------\n\nTITLE: Navigation Card Grid Implementation\nDESCRIPTION: Implementation of a grid layout using CardGrid and LinkCard components to create navigation links to core Tauri concept documentation pages.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard\n    title=\"Tauri Architecture\"\n    href=\"/concept/architecture/\"\n    description=\"Architecture and ecosystem.\"\n  />\n  <LinkCard\n    title=\"Inter-Process Communication (IPC)\"\n    href=\"/concept/inter-process-communication/\"\n    description=\"The inner workings on the IPC.\"\n  />\n  <LinkCard\n    title=\"Security\"\n    href=\"/security/\"\n    description=\"How Tauri enforces security practices.\"\n  />\n  <LinkCard\n    title=\"Process Model\"\n    href=\"/concept/process-model/\"\n    description=\"Which processes Tauri manages and why.\"\n  />\n  <LinkCard\n    title=\"App Size\"\n    href=\"/concept/size/\"\n    description=\"How to make your app as small as possible.\"\n  />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Configuring MSI Bundle Version with Pre-release Identifiers\nDESCRIPTION: Example of valid version formats for MSI bundles with pre-release identifiers and build numbers. Version must be semver compatible and only numeric identifiers are allowed.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0-1\",  // Valid pre-release identifier\n  \"version\": \"1.0.0+1\",  // Valid build number\n  \"version\": \"1.0.0-1+1\" // Valid combination\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore - Windows\nDESCRIPTION: Command to generate a Java Keystore file for Android app signing on Windows systems using keytool CLI. Creates a 2048-bit RSA key valid for 10000 days.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/android.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkey -v -keystore $env:USERPROFILE\\upload-keystore.jks -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 -alias upload\n```\n\n----------------------------------------\n\nTITLE: Adding Cocoa Dependency for macOS-specific Features\nDESCRIPTION: Cargo.toml configuration to add the cocoa crate dependency, which is needed for accessing macOS native API for window customization.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/window-customization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[target.\"cfg(target_os = \\\"macos\\\")\".dependencies]\ncocoa = \"0.26\"\n```\n\n----------------------------------------\n\nTITLE: Forwarding Console Messages to Log Plugin\nDESCRIPTION: Function to automatically forward all console messages to the log plugin in TypeScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { warn, debug, trace, info, error } from '@tauri-apps/plugin-log';\n\nfunction forwardConsole(\n  fnName: 'log' | 'debug' | 'info' | 'warn' | 'error',\n  logger: (message: string) => Promise<void>\n) {\n  const original = console[fnName];\n  console[fnName] = (message) => {\n    original(message);\n    logger(message);\n  };\n}\n\nforwardConsole('log', trace);\nforwardConsole('debug', debug);\nforwardConsole('info', info);\nforwardConsole('warn', warn);\nforwardConsole('error', error);\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI with npm\nDESCRIPTION: Command to install the Tauri CLI using npm package manager. This adds the CLI as a development dependency to the current project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/_cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @tauri-apps/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Bundle Version in Tauri\nDESCRIPTION: JSON configuration for setting a custom bundle version for iOS apps in tauri.conf.json\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"ios\": {\n      \"bundleVersion\": \"100\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI with cargo\nDESCRIPTION: Command to install the Tauri CLI using cargo package manager. This installs the CLI globally with a specific version range and locked dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/_cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo install tauri-cli --version \"^2.0.0\" --locked\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows in Tauri Configuration\nDESCRIPTION: JSON configuration for registering main and splashscreen windows in tauri.conf.json.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/splashscreen.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"windows\": [\n        {\n            \"label\": \"main\",\n            \"visible\": false\n        },\n        {\n            \"label\": \"splashscreen\",\n            \"url\": \"/splashscreen\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the tauri-egui Plugin in Tauri Application\nDESCRIPTION: Initializes the tauri-egui plugin in the application setup phase by registering it with the Tauri application instance.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n  tauri::Builder::default()\n    .setup(|app| {\n      app.wry_plugin(tauri_egui::EguiPluginBuilder::new(app.handle()));\n      Ok(())\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NSIS on Fedora with Manual Plugin Setup\nDESCRIPTION: Commands to install NSIS on Fedora and manually set up required stubs and plugins.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf in mingw64-nsis\nwget https://github.com/tauri-apps/binary-releases/releases/download/nsis-3/nsis-3.zip\nunzip nsis-3.zip\nsudo cp nsis-3.08/Stubs/* /usr/share/nsis/Stubs/\nsudo cp -r nsis-3.08/Plugins/** /usr/share/nsis/Plugins/\n```\n\n----------------------------------------\n\nTITLE: Adding log Crate Dependency\nDESCRIPTION: Adds the log crate as a dependency in the Cargo.toml file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nlog = \"0.4\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Windows Sign Command for Azure Code Signing\nDESCRIPTION: Tauri configuration for using Azure Code Signing with trusted-signing-cli, including endpoint specification and signing parameters.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/windows.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"signCommand\": \"trusted-signing-cli -e https://wus2.codesigning.azure.net -a MyAccount -c MyProfile -d MyApp %1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Log Functions in JavaScript\nDESCRIPTION: Demonstrates how to use the log functions in JavaScript code.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/logging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { warn, debug, trace, info, error } from '@tauri-apps/plugin-log';\n\ntrace('Trace');\ninfo('Info');\nerror('Error');\n```\n\n----------------------------------------\n\nTITLE: Uploading macOS App Package to App Store using altool\nDESCRIPTION: Command for uploading a macOS application package (.pkg) to the Apple App Store using the altool CLI. Requires an App Store Connect API key for authentication.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nxcrun altool --upload-app --type macos --file \"$APPNAME.pkg\" --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Plugin NPM Package\nDESCRIPTION: Commands to install the clipboard plugin NPM package using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/clipboard.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/plugin-clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tauri-apps/plugin-clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @tauri-apps/plugin-clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno add npm:@tauri-apps/plugin-clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @tauri-apps/plugin-clipboard-manager\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Tasks for Tauri Development Server\nDESCRIPTION: Defines a VS Code task configuration for running a Tauri development server using trunk. This can be used with the overseer plugin in Neovim to manage background tasks.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/neovim.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"process\",\n      \"label\": \"dev server\",\n      \"command\": \"trunk\",\n      \"args\": [\"serve\"],\n      \"isBackground\": true,\n      \"presentation\": {\n        \"revealProblems\": \"onProblem\"\n      },\n      \"problemMatcher\": {\n        \"pattern\": {\n          \"regexp\": \"^error:.*\",\n          \"file\": 1,\n          \"line\": 2\n        },\n        \"background\": {\n          \"activeOnStart\": false,\n          \"beginsPattern\": \".*Rebuilding.*\",\n          \"endsPattern\": \".*server listening at:.*\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Targets to Rust\nDESCRIPTION: Adds Android compilation targets to Rust using rustup for cross-platform development.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nrustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Linux AppImage Signing\nDESCRIPTION: Creates a new GPG key that can be used for signing AppImage packages. This is a prerequisite step before signing can be performed.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/linux.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngpg2 --full-gen-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Windows Sign Command for Azure Key Vault\nDESCRIPTION: Tauri configuration to specify the signing command using relic with Azure Key Vault certificate.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/windows.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"signCommand\": \"relic sign --file %1 --key azure --config relic.conf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Previous Versions of create-tauri-app\nDESCRIPTION: Commands for installing and using previous versions of create-tauri-app (v2) across different package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/create-tauri-app-version-3-released.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\npnpm create tauri-app@2\n\n# yarn\nyarn create tauri-app@2\n\n# npm\nnpm create tauri-app@2\n\n# Cargo\ncargo install create-tauri-app --version 2.8.0 --locked\ncargo create-tauri-app\n\n# Bash\nsh <(curl https://create.tauri.app/v/2.8.0/sh)\n\n# Powershell\niwr -useb https://create.tauri.app/v/2.8.0/ps | iex\n```\n\n----------------------------------------\n\nTITLE: Installing NSIS on macOS\nDESCRIPTION: Homebrew command to install NSIS on macOS systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install nsis\n```\n\n----------------------------------------\n\nTITLE: Configuring Flag Arguments for CLI\nDESCRIPTION: JSON configuration for flag arguments in the CLI plugin, which are standalone keys that can be present or absent.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": [\n    {\n      \"name\": \"verbose\",\n      \"short\": \"v\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: New Template Selection Interface\nDESCRIPTION: Example of the new streamlined template selection prompt in create-tauri-app v3.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/create-tauri-app-version-3-released.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n✔ Choose your package manager · pnpm\n? Choose your UI template ›\n  Vanilla\n❯ Vue\n  Svelte\n  React\n  Solid\n  Angular\n  Next\n  SvelteKit\n  ClojureScript\n  Preact\n```\n\n----------------------------------------\n\nTITLE: Keystore Properties Configuration\nDESCRIPTION: Properties file configuration containing keystore credentials and file location. Defines the password, key alias, and store file location for Android signing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/android.mdx#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\npassword=<password defined when keytool was executed>\nkeyAlias=upload\nstoreFile=<location of the key store file, such as /Users/<user name>/upload-keystore.jks or C:\\\\Users\\\\<user name>\\\\upload-keystore.jks>\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebKit Version on macOS\nDESCRIPTION: This shell command retrieves the WebKit version used by WKWebView on macOS. It extracts the CFBundleVersion from the WebKit framework's Info.plist file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/webview-versions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nawk '/CFBundleVersion/{getline;gsub(/<[^>]*>/,\"\");print}' /System/Library/Frameworks/WebKit.framework/Resources/Info.plist\n```\n\n----------------------------------------\n\nTITLE: Adding File System Plugin to package.json\nDESCRIPTION: Adds the Tauri File System plugin as a dependency in the package.json file for JavaScript projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-fs\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Window Plugin in JavaScript\nDESCRIPTION: Shows how to use the window plugin to set the window title in JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { appWindow } from '@tauri-apps/plugin-window';\nawait appWindow.setTitle('Tauri');\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Plugin NPM Package\nDESCRIPTION: Package.json configuration for the Tauri shell plugin JavaScript package\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-shell\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Support Links for 404 Page\nDESCRIPTION: HTML paragraph containing support links to GitHub issues and Discord for users experiencing navigation problems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/404.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>\n  If you're having trouble navigating, please <a href=\"https://github.com/tauri-apps/tauri-docs/issues/new/choose\">create an issue on GitHub</a> or <a href=\"https://discord.com/invite/tauri\"\n    >report on Discord</a\n  >.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Brownfield Pattern in Tauri\nDESCRIPTION: Configuration snippet showing how to explicitly set the Brownfield pattern in Tauri's configuration file. This is optional since Brownfield is the default pattern.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/Inter-Process Communication/brownfield.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tauri\": {\n    \"pattern\": {\n      \"use\": \"brownfield\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Target Triple Appending Script\nDESCRIPTION: Node.js script to automatically append the target triple to a binary filename.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\nconst extension = process.platform === 'win32' ? '.exe' : '';\n\nconst rustInfo = execSync('rustc -vV');\nconst targetTriple = /host: (\\S+)/g.exec(rustInfo)[1];\nif (!targetTriple) {\n  console.error('Failed to determine platform target triple');\n}\nfs.renameSync(\n  `src-tauri/binaries/sidecar${extension}`,\n  `src-tauri/binaries/sidecar-${targetTriple}${extension}`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri for Trunk Integration\nDESCRIPTION: JSON configuration for tauri.conf.json that defines build commands, development URL, frontend distribution path, and enables global Tauri API access.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/trunk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// tauri.conf.json\n{\n  \"build\": {\n    \"beforeDevCommand\": \"trunk serve\",\n    \"beforeBuildCommand\": \"trunk build\",\n    \"devUrl\": \"http://localhost:8080\",\n    \"frontendDist\": \"../dist\"\n  },\n  \"app\": {\n    \"withGlobalTauri\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Flavor Selection\nDESCRIPTION: Example of the additional template flavor selection prompt for choosing between TypeScript and JavaScript.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/create-tauri-app-version-3-released.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n✔ Choose your package manager · pnpm\n✔ Choose your UI template · Vue - (https://vuejs.org)\n? Choose your UI flavor ›\n❯ TypeScript\n  JavaScript\n```\n\n----------------------------------------\n\nTITLE: Setting FIPS Compliance in PowerShell\nDESCRIPTION: PowerShell command to enable FIPS compliance for MSI bundle generation.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$env:TAURI_FIPS_COMPLIANT=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Opening URLs with Shell Plugin in Rust\nDESCRIPTION: Example of using the shell plugin to open URLs in a Rust application\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_59\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri_plugin_shell::ShellExt;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_shell::init())\n        .setup(|app| {\n            app.shell().open(\"https://github.com/tauri-apps/tauri\", None)?;\n            Ok(())\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying AppImage Embedded Signature\nDESCRIPTION: Command to display the signature embedded in an AppImage file. The variables $APPNAME and $VERSION need to be replaced with the actual application name and version from your configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/linux.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./src-tauri/target/release/bundle/appimage/$APPNAME_$VERSION_amd64.AppImage --appimage-signature\n```\n\n----------------------------------------\n\nTITLE: JavaScript Permission Handling Implementation\nDESCRIPTION: Demonstrates how to check and request permissions from JavaScript using Tauri's invoke API with proper type definitions and error handling.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { invoke, PermissionState } from '@tauri-apps/api/core'\n\ninterface Permissions {\n  postNotification: PermissionState\n}\n\n// check permission state\nconst permission = await invoke<Permissions>('plugin:<plugin-name>|checkPermissions')\n\nif (permission.postNotification === 'prompt-with-rationale') {\n  // show information to the user about why permission is needed\n}\n\n// request permission\nif (permission.postNotification.startsWith('prompt')) {\n  const state = await invoke<Permissions>('plugin:<plugin-name>|requestPermissions', { permissions: ['postNotification'] })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Splashscreen HTML Page\nDESCRIPTION: HTML code for the splashscreen page, displaying a simple message.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/splashscreen.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"/src/styles.css\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Tauri App</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Tauri used Splash!</h1>\n        <div class=\"row\">\n            <h5>It was super effective!</h5>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Clipboard Plugin to package.json\nDESCRIPTION: Adds the Tauri Clipboard plugin as a dependency in the package.json file for JavaScript projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-clipboard-manager\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Development Server Configuration in Tauri Config\nDESCRIPTION: Example configuration from tauri.conf.json showing the beforeDevCommand setting that specifies the development server startup command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/rustrover.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"beforeDevCommand\": \"pnpm dev\"\n```\n\n----------------------------------------\n\nTITLE: Converting iOS Provisioning Profile to Base64 in Bash\nDESCRIPTION: This command converts the iOS provisioning profile (.mobileprovision file) to a base64 encoded string and copies it to the clipboard. The resulting value is used as the IOS_MOBILE_PROVISION environment variable for manual signing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/ios.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbase64 -i <path-to-profile.mobileprovision> | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Rust Targets\nDESCRIPTION: Adds the required Rust compilation targets for iOS development including aarch64 and x86_64 architectures.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nrustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim\n```\n\n----------------------------------------\n\nTITLE: Localizing Info.plist Strings in German\nDESCRIPTION: Example of InfoPlist.strings file for German localization of usage descriptions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nNSCameraUsageDescription = \"Kamera Zugriff wird benötigt für WebRTC Funktionalität\";\nNSMicrophoneUsageDescription = \"Mikrofon Zugriff wird benötigt für WebRTC Funktionalität\";\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Positioner Plugin (Automatic)\nDESCRIPTION: Commands to automatically install the Tauri Positioner plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run tauri add positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run tauri add positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm tauri add positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun tauri add positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno task tauri add positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo tauri add positioner\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Plugin Dependencies\nDESCRIPTION: Cargo.toml dependency configuration for the Tauri shell plugin\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_55\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-shell = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Setting up nvim-dap-ui for Automatic Debugger View in Neovim\nDESCRIPTION: Configures the nvim-dap-ui plugin to automatically open and close the debugger view when debugging sessions start and stop.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/neovim.mdx#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlocal dapui = require(\"dapui\")\ndapui.setup()\n\ndap.listeners.before.attach.dapui_config = function()\n  dapui.open()\nend\ndap.listeners.before.launch.dapui_config = function()\n  dapui.open()\nend\ndap.listeners.before.event_terminated.dapui_config = function()\n  dapui.close()\nend\ndap.listeners.before.event_exited.dapui_config = function()\n  dapui.close()\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Card for Community Contributions\nDESCRIPTION: This JSX code renders a LinkCard component encouraging users to contribute their own resources to the Tauri documentation by opening a pull request.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkCard\n  title=\"Have something to share?\"\n  description=\"Open a pull request to show us your amazing resource.\"\n  href=\"https://github.com/tauri-apps/awesome-tauri/pulls\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Entitlements Path Configuration\nDESCRIPTION: JSON configuration for specifying the entitlements file path in tauri.conf.json\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"entitlements\": \"./Entitlements.plist\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tauri Project\nDESCRIPTION: Shell commands to install dependencies and run the initial Tauri project template.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/splashscreen.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you're in the right directory\ncd splashscreen-lab\n# Install dependencies\npnpm install\n# Build and run the app\npnpm tauri dev\n```\n\n----------------------------------------\n\nTITLE: Minimum System Version Configuration\nDESCRIPTION: JSON configuration for setting the minimum macOS version requirement\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"minimumSystemVersion\": \"12.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linux/macOS Debug Backtrace Command\nDESCRIPTION: Shell command to enable detailed Rust backtrace for debugging on Linux and macOS systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUST_BACKTRACE=1 tauri dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Scripts for Vite and Tauri\nDESCRIPTION: Update package.json with scripts for Vite development, build, preview, and Tauri commands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/vite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"tauri\": \"tauri\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri Positioner Plugin JavaScript Bindings\nDESCRIPTION: Commands to install the JavaScript guest bindings for the Tauri Positioner plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/plugin-positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tauri-apps/plugin-positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @tauri-apps/plugin-positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno add npm:@tauri-apps/plugin-positioner\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @tauri-apps/plugin-positioner\n```\n\n----------------------------------------\n\nTITLE: Frontend Language Selection Prompt\nDESCRIPTION: CLI prompt for selecting the frontend language for the Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/create-project.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n? Choose which language to use for your frontend ›\nRust  (cargo)\nTypeScript / JavaScript  (pnpm, yarn, npm, bun)\n.NET  (dotnet)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS NFC Permissions in Info.plist\nDESCRIPTION: XML configuration for the Info.plist file to add NFC reader usage description, required for iOS applications to access NFC functionality.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/nfc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\t<dict>\n\t\t<key>NFCReaderUsageDescription</key>\n\t\t<string>Read and write various NFC tags</string>\n\t</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Plugin via Cargo\nDESCRIPTION: Command to add the dialog plugin to the project's Cargo dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/dialog.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-dialog\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tauri Dependencies with Package Managers\nDESCRIPTION: Command options for updating Tauri CLI and API dependencies to version 1.5.0 using different package managers including npm, yarn, pnpm, and cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-5.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@latest @tauri-apps/api@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Windows Debug Backtrace Command\nDESCRIPTION: PowerShell command to enable detailed Rust backtrace for debugging on Windows systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:RUST_BACKTRACE=1\ntauri dev\n```\n\n----------------------------------------\n\nTITLE: RPM Key Configuration\nDESCRIPTION: RPM macros configuration for package signing\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/rpm.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n%_signature gpg\n%_gpg_path /home/johndoe/.gnupg\n%_gpg_name Tauri-App\n%_gpgbin /usr/bin/gpg2\n%__gpg_sign_cmd %{__gpg} \\\n    gpg --force-v3-sigs --digest-algo=sha1 --batch --no-verbose --no-armor \\\n    --passphrase-fd 3 --no-secmem-warning -u \"%{_gpg_name}\" \\\n    -sbo %{__signature_filename} %{__plaintext_filename}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments for Android Plugin\nDESCRIPTION: Shows how to define and parse command arguments for an Android Tauri plugin. The example includes classes for nested arguments and demonstrates how to use them in a command.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Activity\nimport android.webkit.WebView\nimport app.tauri.annotation.Command\nimport app.tauri.annotation.InvokeArg\nimport app.tauri.annotation.TauriPlugin\n\n@InvokeArg\ninternal class OpenAppArgs {\n  lateinit var name: String\n  var timeout: Int? = null\n}\n\n@InvokeArg\ninternal class OpenArgs {\n  lateinit var requiredArg: String\n  var allowEdit: Boolean = false\n  var quality: Int = 100\n  var app: OpenAppArgs? = null\n}\n\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n  @Command\n  fun openCamera(invoke: Invoke) {\n    val args = invoke.parseArgs(OpenArgs::class.java)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cocoapods via Homebrew\nDESCRIPTION: Installs the Cocoapods dependency manager for iOS development using Homebrew.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nbrew install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Installing Rust on Windows using winget\nDESCRIPTION: Installs Rust programming language on Windows using the winget package manager in PowerShell.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install --id Rustlang.Rustup\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions for External Storage\nDESCRIPTION: Adds necessary permissions to the AndroidManifest.xml file for accessing external storage on Android.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter configuration for a 404 error page, specifying template settings and metadata.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/404.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '404'\ntemplate: doc\neditUrl: false\ntableOfContents: false\nlastUpdated: false\npagefind: false\nnext: false\nprev: false\nhero:\n  title: '404'\n  tagline: Page not found. Check the URL or try using the search bar.\n---\n```\n\n----------------------------------------\n\nTITLE: Building Tauri Application with Package Managers\nDESCRIPTION: Commands for building a Tauri application using different package managers and Cargo. These commands compile and package the application for distribution.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run tauri build\nyarn tauri build\npnpm tauri build\ndeno task tauri build\nbun tauri build\ncargo tauri build\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri 1.6.0 Dependencies via Package Managers\nDESCRIPTION: Commands to update Tauri CLI and API dependencies using different package managers (NPM, Yarn, PNPM) and Cargo for the latest 1.6.0 release.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-6.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@latest @tauri-apps/api@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri File System Plugin for Dotfile Access\nDESCRIPTION: This JSON configuration disables the requirement for literal leading dots in file paths, allowing easier access to dotfiles and dotfolders on Unix-based systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/file-system.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n \"plugins\": {\n    \"fs\": {\n      \"requireLiteralLeadingDot\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Platform Icons Display Layout\nDESCRIPTION: HTML/CSS layout structure for displaying platform support icons in a horizontal flex container with consistent spacing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"display:flex; flex-direction: row; justify-content: center; align-items: center\">\n  <div style=\"padding-inline-end: 10px\">\n    <svg width=\"48\" height=\"48\">\n      <use xlink:href=\"/assets/platforms.svg#wpf-android-os\"></use>\n    </svg>\n  </div>\n  <div style=\"padding-inline-end: 10px\">\n    <svg width=\"48\" height=\"48\">\n      <use xlink:href=\"/assets/platforms.svg#simple-icons-ios\"></use>\n    </svg>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Frontend Language Selection Prompt\nDESCRIPTION: Example of the improved CLI prompt for selecting frontend language in create-tauri-app v3.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/create-tauri-app-version-3-released.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n? Choose which language to use for your frontend ›\n  Rust\n❯ TypeScript / JavaScript  (pnpm, yarn, npm)\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Step for Importing Windows Certificate\nDESCRIPTION: YAML configuration for a GitHub Actions step to import a Windows code signing certificate.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/Sign/windows.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n- name: import windows certificate\n  if: matrix.platform == 'windows-latest'\n  env:\n    WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}\n    WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}\n  run: |\n    New-Item -ItemType directory -Path certificate\n    Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE\n    certutil -decode certificate/tempCert.txt certificate/certificate.pfx\n    Remove-Item -path certificate -include tempCert.txt\n    Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\\CurrentUser\\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)\n```\n\n----------------------------------------\n\nTITLE: Publishing to AUR\nDESCRIPTION: Git commands for publishing the package to AUR.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n\ngit commit -m \"Initial Commit\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Installing Clipboard Plugin via Package Manager\nDESCRIPTION: Commands to install the clipboard plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/clipboard.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run tauri add clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run tauri add clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm tauri add clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun tauri add clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno task tauri add clipboard-manager\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo tauri add clipboard-manager\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables on Windows\nDESCRIPTION: Sets ANDROID_HOME and NDK_HOME environment variables for Android development on Windows systems using PowerShell.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n[System.Environment]::SetEnvironmentVariable(\"ANDROID_HOME\", \"$env:LocalAppData\\Android\\Sdk\", \"User\")\n$VERSION = Get-ChildItem -Name \"$env:LocalAppData\\Android\\Sdk\\ndk\"\n[System.Environment]::SetEnvironmentVariable(\"NDK_HOME\", \"$env:LocalAppData\\Android\\Sdk\\ndk\\$VERSION\", \"User\")\n```\n\n----------------------------------------\n\nTITLE: Releasing Snap Package Manually\nDESCRIPTION: Commands to log in to Snapcraft and upload the built snap package for release to the stable channel.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsnapcraft login # Login with your UbuntuOne credentials\nsnapcraft upload --release=stable mysnap_latest_amd64.snap\n```\n\n----------------------------------------\n\nTITLE: Getting Target Triple on Windows\nDESCRIPTION: PowerShell command to extract the target triple on Windows systems using rustc.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nrustc -Vv | Select-String \"host:\" | ForEach-Object {$_.Line.split(\" \")[1]}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Flathub Repository Directory\nDESCRIPTION: Shell command to enter the cloned Flathub repository directory, preparing for creating a new branch for your application submission.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd flathub\n```\n\n----------------------------------------\n\nTITLE: Adding Updater Plugin Dependency in JavaScript\nDESCRIPTION: Adds the @tauri-apps/plugin-updater dependency to the package.json file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-updater\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Process Plugin Dependency in package.json\nDESCRIPTION: Adds the @tauri-apps/plugin-process dependency to the package.json file for a JavaScript project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-process\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Cleanup\nDESCRIPTION: Shows how to implement the on_drop lifecycle hook for plugin cleanup when the plugin is destroyed.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse tauri::plugin::Builder;\n\nBuilder::new(\"<plugin-name>\")\n  .on_drop(|app| {\n    // plugin has been destroyed...\n  })\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in Markdown Table\nDESCRIPTION: This code snippet presents a markdown table listing notable contributors to the Tauri project, their GitHub profiles, specific contributions, and the repositories they contributed to.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| GitHub Profile    | Contribution                                                                                     | Repository                              |\n| :---------------- | :----------------------------------------------------------------------------------------------- | :-------------------------------------- |\n| @malyn            | Fixed http stream                                                                                | `wry`                                   |\n| @wravery          | windows-rs support, webview2-rs                                                                  | `tao`, `wry`                            |\n| @liushuyu         | Added headers feature to webkit2gtk                                                              | `wry`                                   |\n| @emirror-de       | System tray support                                                                              | `tao`                                   |\n| @lorenzolewis     | tauri.app updates                                                                                | `tauri-docs`                            |\n| @probablykasper   | Support for more accelerators, restructured documentation                                        | `tao`, `tauri-docs`                     |\n| @grbd             | Added an example to use tauri as a C++ DLL                                                       | `tauri`                                 |\n| @youngsing        | Added macOS vibrancy                                                                             | `tauri-plugin-vibrancy`                 |\n| @lemarier         | Updater, menus, system tray, iOS, clipboard api, bytes-stream & ++                               | `wry`, `tao`, `tauri`                   |\n| @JonasKruckenberg | Tauri plugin upgrades and documentation overhaul                                                 | `tauri-plugin-*`, `tauri-docs`          |\n| @ImmaZoni         | Code signing guides for macOS and Windows                                                        | `tauri-docs`                            |\n| @chippers         | Isolation pattern, shell scope, compile-time code generation and several other security features | `tauri`                                 |\n| @fabianlars       | Community support, AppImage fixes, code review                                                   | all repos, mainly `tauri`, `tauri-docs` |\n| @amrbashir        | TAO and WRY features and fixes, overall OS guru                                                  | `tao`, `wry`                            |\n| @wusyong          | TAO and WRY founder and researcher                                                               | `tao`, `wry`                            |\n| @nklayman         | custom protocol                                                                                  | `tauri`                                 |\n```\n\n----------------------------------------\n\nTITLE: Creating a Tauri Application with CLI\nDESCRIPTION: Commands to create a new Tauri application using create-tauri-app CLI tool, showing the interactive prompts and responses for project setup.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create tauri-app\n```\n\nLANGUAGE: shell\nCODE:\n```\n✔ Project name · plugin-permission-demo\n✔ Choose which language to use for your frontend · TypeScript / JavaScript - (pnpm, yarn, npm, bun)\n✔ Choose your package manager · pnpm\n✔ Choose your UI template · Vanilla\n✔ Choose your UI flavor · TypeScript\n\nTemplate created! To get started run:\ncd plugin-permission-demo\npnpm install\npnpm tauri dev\n```\n\n----------------------------------------\n\nTITLE: macOS Frameworks Configuration\nDESCRIPTION: JSON configuration for including additional macOS frameworks and dylib files in the application bundle.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"frameworks\": [\n        \"CoreAudio\",\n        \"./libs/libmsodbcsql.18.dylib\",\n        \"./frameworks/MyApp.framework\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Snap Package\nDESCRIPTION: Command to run the installed snap package for testing purposes.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsnap run your-app\n```\n\n----------------------------------------\n\nTITLE: Rendering Link Cards for Tauri Features\nDESCRIPTION: This JSX code renders a CardGrid component containing LinkCard components for Tauri features such as splashscreen and using Node.js as a sidecar.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard title=\"Splashcreen\" href=\"/learn/splashscreen/\" />\n  <LinkCard title=\"Node.js as a Sidecar\" href=\"/learn/sidecar-nodejs/\" />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Adding Mobile Command to Android Plugin\nDESCRIPTION: Demonstrates how to add a mobile command to an Android Tauri plugin. The example shows a command that simulates opening a camera and returning a photo path.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Activity\nimport app.tauri.annotation.Command\nimport app.tauri.annotation.TauriPlugin\n\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n  @Command\n  fun openCamera(invoke: Invoke) {\n    val ret = JSObject()\n    ret.put(\"path\", \"/path/to/photo.jpg\")\n    invoke.resolve(ret)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Persisted Scope Plugin via Command Line\nDESCRIPTION: Command to add the persisted-scope plugin to a Tauri project's dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/persisted-scope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-persisted-scope\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager\nDESCRIPTION: Downloads and runs the Homebrew installation script using bash.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Version WebView2 Runtime in Tauri\nDESCRIPTION: JSON configuration for using a fixed version of the WebView2 runtime in a Tauri application. This allows control over the WebView2 distribution but significantly increases the installer size.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"webviewInstallMode\": {\n        \"type\": \"fixedRuntime\",\n        \"path\": \"./Microsoft.WebView2.FixedVersionRuntime.98.0.1108.50.x64/\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tauri Websocket Plugin to Cargo Dependencies\nDESCRIPTION: Command to add the Tauri Websocket plugin to the project's Cargo dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/websocket.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-websocket\n```\n\n----------------------------------------\n\nTITLE: Converting iOS Certificate to Base64 in Bash\nDESCRIPTION: This command converts the iOS signing certificate (.p12 file) to a base64 encoded string and copies it to the clipboard. The resulting value is used as the IOS_CERTIFICATE environment variable for manual signing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Sign/ios.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 -i <path-to-certificate.p12> | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI with yarn\nDESCRIPTION: Command to install the Tauri CLI using yarn package manager. This adds the CLI as a development dependency to the current project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/_cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @tauri-apps/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Permissions Error Message in Tauri\nDESCRIPTION: The error message displayed when attempting to use a function without the proper permissions configured, showing the available permissions needed for the operation.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n[Error] Unhandled Promise Rejection: fs.write_text_file not allowed. Permissions associated with this command: fs:allow-app-write, fs:allow-app-write-recursive, fs:allow-appcache-write, fs:allow-appcache-write-recursive, fs:allow-appconf...\n(anonymous function) (main.ts:5)\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for UI Components\nDESCRIPTION: Creates utility functions for rendering consistent UI elements such as logo with heading and control labels with appropriate spacing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn logo_and_heading(ui: &mut egui::Ui, logo: egui::Image, heading: &str) {\n  let original_item_spacing_y = ui.style().spacing.item_spacing.y;\n  ui.style_mut().spacing.item_spacing.y = 8.;\n  ui.add(logo);\n  ui.style_mut().spacing.item_spacing.y = 16.;\n  ui.heading(egui::RichText::new(heading));\n  ui.style_mut().spacing.item_spacing.y = original_item_spacing_y;\n}\n\nfn control_label(ui: &mut egui::Ui, label: &str) {\n  let original_item_spacing_y = ui.style().spacing.item_spacing.y;\n  ui.style_mut().spacing.item_spacing.y = 8.;\n  ui.label(label);\n  ui.style_mut().spacing.item_spacing.y = original_item_spacing_y;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Cards with Astro Starlight Components\nDESCRIPTION: Uses Astro Starlight's CardGrid and LinkCard components to create a navigation interface for migration guides. The cards link to detailed documentation for upgrading from Tauri 1.0 and migrating from Tauri 2.0 beta.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard\n    title=\"Upgrade from Tauri 1.0\"\n    href=\"/start/migrate/from-tauri-1/\"\n    description=\"Read more about the updates you need to make to a version 1 project in order to upgrade to version 2.\"\n  />\n  <LinkCard\n    title=\"Migrate from Tauri 2.0 beta\"\n    href=\"/start/migrate/from-tauri-2-beta/\"\n    description=\"Read more about the updates required for the 2.0 beta project to upgrade to 2.0.\"\n  />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Recreating Mobile Projects for Tauri\nDESCRIPTION: Shell commands to remove existing mobile project files and reinitialize Android and iOS projects to use new features.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-4.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrm -r src-tauri/gen\ntauri android init\ntauri ios init\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI with pnpm\nDESCRIPTION: Command to install the Tauri CLI using pnpm package manager. This adds the CLI as a development dependency to the current project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/_cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @tauri-apps/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView2 Installation Skip in Tauri\nDESCRIPTION: JSON configuration to skip the WebView2 runtime installation check in a Tauri application. This option should be used with caution as the application won't work if the runtime is not installed.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"webviewInstallMode\": {\n        \"type\": \"skip\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Snap Package Manually\nDESCRIPTION: Commands to login to snapcraft and upload the built snap package to the Snap Store.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsnapcraft login # 用你的 UbuntuOne 凭证登录\nsnapcraft upload --release=stable mysnap_latest_amd64.snap\n```\n\n----------------------------------------\n\nTITLE: Customizing Breakpoint Display in Neovim\nDESCRIPTION: Changes the default appearance of breakpoints and stopped points in the Neovim editor using custom signs.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/neovim.mdx#2025-04-22_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nvim.fn.sign_define('DapBreakpoint',{ text ='🟥', texthl ='', linehl ='', numhl =''})\nvim.fn.sign_define('DapStopped',{ text ='▶️', texthl ='', linehl ='', numhl =''})\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpak Tools on Debian\nDESCRIPTION: Command to install the flatpak and flatpak-builder tools on Debian-based systems, which are required for building and testing Flatpak packages locally.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install flatpak flatpak-builder\n```\n\n----------------------------------------\n\nTITLE: Tauri Resource Configuration for Info.plist Localization\nDESCRIPTION: JSON configuration in tauri.conf.json for including localized InfoPlist resources.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"resources\": {\n      \"infoplist/**\": \"./\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring snapcraft.yaml for Tauri App\nDESCRIPTION: YAML configuration for packaging a Tauri application as a snap. Includes app metadata, layout, dependencies, and build instructions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: appname\nbase: core22\nversion: '0.1.0'\nsummary: Your summary # 79 char long summary\ndescription: |\n  Your description\n\ngrade: stable\nconfinement: strict\n\nlayout:\n  /usr/libexec/webkit2gtk-4.1:\n    symlink: $SNAP/usr/libexec/webkit2gtk-4.1\n  /usr/lib/x86_64-linux-gnu/webkit2gtk-4.1:\n    symlink: $SNAP/usr/lib/x86_64-linux-gnu/webkit2gtk-4.1\n  /usr/lib/aarch64-linux-gnu/webkit2gtk-4.1:\n    symlink: $SNAP/usr/lib/aarch64-linux-gnu/webkit2gtk-4.1\n  /usr/lib/webkit2gtk-4.1/injected-bundle:\n    symlink: $SNAP/usr/lib/webkit2gtk-4.1/injected-bundle\n\napps:\n  appname:\n    command: usr/bin/appname\n    desktop: usr/share/applications/appname.desktop\n    plugs:\n      - wayland\n      - x11\n\npackage-repositories:\n  - type: apt\n    components: [main]\n    suites: [noble]\n    key-id: 78E1918602959B9C59103100F1831DDAFC42E99D\n    url: http://ppa.launchpad.net/snappy-dev/snapcraft-daily/ubuntu\n\nparts:\n  build-app:\n    plugin: dump\n    build-snaps:\n      - node/20/stable\n      - rustup/latest/stable\n    build-packages:\n      - libwebkit2gtk-4.1-dev\n      - build-essential\n      - curl\n      - wget\n      - file\n      - libxdo-dev\n      - libssl-dev\n      - libayatana-appindicator3-dev\n      - librsvg2-dev\n      - dpkg\n    stage-packages:\n      - libwebkit2gtk-4.1-0\n      - libayatana-appindicator3-1\n      - libglu1-mesa\n      - freeglut3\n    source: .\n    override-build: |\n      set -eu\n      npm install\n      npm run tauri build -- --bundles deb\n      dpkg -x src-tauri/target/release/bundle/deb/*.deb $SNAPCRAFT_PART_INSTALL/\n      sed -i -e \"s|Icon=appname|Icon=/usr/share/icons/hicolor/32x32/apps/appname.png|g\" $SNAPCRAFT_PART_INSTALL/usr/share/applications/appname.desktop\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Shortcut Plugin in Rust\nDESCRIPTION: Demonstrates how to initialize the Tauri Global Shortcut plugin in a Rust application's main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_global_shortcut::Builder::default().build())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using npm\nDESCRIPTION: Command to initialize a new Tauri application using npm's create command with the tauri-app package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm create tauri-app@latest\n```\n\n----------------------------------------\n\nTITLE: OS Version to WebKit/Safari Version Mapping Table\nDESCRIPTION: A markdown table that maps OS versions to WebKit and Safari versions, including verification notes for specific hardware configurations.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/webview-versions.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| OS Name     | OS Version                       | WebKit Version   | Safari Version | Notes                                                         |\n| ----------- | -------------------------------- | ---------------- | -------------- | ------------------------------------------------------------- |\n| Sonoma      | 14.0 (Beta)                      | 616.1.14.11.11   | 17.0           | Verified on a 2023 M2 14\" MacBook Pro                         |\n| Ventura     | 13.4.1                           | 615.2.9.11.7     | 16.5.1         | Verified on a 2023 M2 14\" MacBook Pro                         |\n```\n\n----------------------------------------\n\nTITLE: Building Snap Package\nDESCRIPTION: Command to build the snap package using snapcraft.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo snapcraft\n```\n\n----------------------------------------\n\nTITLE: Triggering App Links on iOS Simulator\nDESCRIPTION: Command to trigger app links on iOS simulator using simctl CLI.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nxcrun simctl openurl booted https://<host>/path\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Install Mode in Tauri\nDESCRIPTION: Configuration for specifying the Windows update installation mode in tauri.conf.json. Supports passive, basicUi, and quiet modes for controlling update installation behavior.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": {\n    \"updater\": {\n      \"windows\": {\n        \"installMode\": \"passive\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing create-tauri-app with Alpha Support\nDESCRIPTION: Command examples for installing create-tauri-app using different package managers with alpha flag enabled. Shows installation methods via pnpm, yarn, npm, Cargo, Bash, and Powershell.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/create-tauri-app-version-3-released.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# pnpm\npnpm create tauri-app --alpha\n\n# yarn\nyarn create tauri-app --alpha\n\n# npm\nnpm create tauri-app -- --alpha\n\n# Cargo\ncargo install create-tauri-app --locked\ncargo create-tauri-app --alpha\n\n# Bash\nsh <(curl https://create.tauri.app/sh) --alpha\n\n# Powershell\n$env:CTA_ARGS=\"--alpha\";iwr -useb https://create.tauri.app/ps | iex\n```\n\n----------------------------------------\n\nTITLE: Installing tauri-driver with Cargo\nDESCRIPTION: Command to install or update the tauri-driver tool which provides a cross-platform wrapper around native WebDriver implementations. The --locked flag ensures reproducible builds by using the exact dependency versions specified in the Cargo.lock file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install tauri-driver --locked\n```\n\n----------------------------------------\n\nTITLE: Installing snap on Debian\nDESCRIPTION: Command to install the snap package manager on Debian-based systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install snapd\n```\n\n----------------------------------------\n\nTITLE: Installing Snapcraft\nDESCRIPTION: Command to install the Snapcraft tool using snap with classic confinement.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install snapcraft --classic\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables on macOS\nDESCRIPTION: Sets ANDROID_HOME and NDK_HOME environment variables for Android development on macOS systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Library/Android/sdk\"\nexport NDK_HOME=\"$ANDROID_HOME/ndk/$(ls -1 $ANDROID_HOME/ndk)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DMG Window Size in Tauri Config\nDESCRIPTION: JSON configuration for customizing the DMG installer window dimensions using windowSize property in tauri.conf.json.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/dmg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"dmg\": {\n        \"windowSize\": {\n          \"width\": 800,\n          \"height\": 600\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tasks.json for Tauri Debugging\nDESCRIPTION: JSON configuration for .vscode/tasks.json to define tasks for the beforeDevCommand and beforeBuildCommand in Tauri applications. It includes tasks for running the development server and building the UI.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/develop/Debug/vscode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"ui:dev\",\n      \"type\": \"shell\",\n      \"isBackground\": true,\n      \"command\": \"yarn\",\n      \"args\": [\"dev\"]\n    },\n    {\n      \"label\": \"ui:build\",\n      \"type\": \"shell\",\n      \"command\": \"yarn\",\n      \"args\": [\"build\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using Bash\nDESCRIPTION: Command to initialize a new Tauri application using a bash shell script fetched from create.tauri.app.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsh <(curl https://create.tauri.app/sh)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum SDK Version in Tauri Config\nDESCRIPTION: JSON configuration for specifying the minimum supported Android SDK version in tauri.conf.json. This allows setting a higher minimum Android version requirement than the default Android 7.0 (SDK 24).\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/google-play.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"android\": {\n      \"minSdkVersion\": 28\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering App Links on Android Emulator\nDESCRIPTION: Command to trigger app links on Android emulator using adb CLI.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nadb shell am start -a android.intent.action.VIEW -d https://<host>/path <bundle-identifier>\n```\n\n----------------------------------------\n\nTITLE: Installing WebKit2GTK-4.1 on Linux Distributions\nDESCRIPTION: Package installation commands for WebKit2GTK-4.1 on different Linux distributions including Arch Linux/Manjaro, Debian/Ubuntu, and Fedora. Required for Tauri 2.0-alpha.3 and later versions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-3.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# On Arch Linux / Manjaro:\nsudo pacman -S webkit2gtk-4.1\n# On Debian / Ubuntu:\nsudo apt install libwebkit2gtk-4.1-dev\n# On Fedora:\nsudo dnf install webkit2gtk4.1-devel\n```\n\n----------------------------------------\n\nTITLE: Installing Single Instance Plugin via Cargo in Tauri\nDESCRIPTION: Command to add the Single Instance plugin as a dependency in the Cargo.toml file for desktop platforms.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/single-instance.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-single-instance --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Gentoo\nDESCRIPTION: Installs the necessary system packages for Tauri development on Gentoo Linux using the emerge package manager.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo emerge --ask \\\n  net-libs/webkit-gtk:4.1 \\\n  dev-libs/libappindicator \\\n  net-misc/curl \\\n  net-misc/wget \\\n  sys-apps/file\n```\n\n----------------------------------------\n\nTITLE: Installing LLVM Dependencies on Ubuntu\nDESCRIPTION: Command to install LLVM and LLD linker on Ubuntu for cross-compilation support.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install lld llvm\n```\n\n----------------------------------------\n\nTITLE: Adding File System Plugin to Cargo Dependencies\nDESCRIPTION: Adds the Tauri File System plugin to the Cargo.toml file as a dependency for Rust projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-fs = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Installing snap core22\nDESCRIPTION: Command to install the snap core22 base system.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install core22\n```\n\n----------------------------------------\n\nTITLE: Displaying RSS Feed Links Using LinkCard Component in Markdown\nDESCRIPTION: This snippet demonstrates how to use the LinkCard component from @astrojs/starlight to create clickable cards for different RSS feeds. It includes three feeds: all updates, blog updates, and pages updates.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/rss.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<LinkCard\n  title=\"All updates\"\n  description=\"Get notified about any updates across the entire site.\"\n  href=\"/feed.xml\"\n/>\n\n<LinkCard\n  title=\"Blog updates\"\n  description=\"Stay up-to-date with the latest blog posts and articles.\"\n  href=\"/blog/rss.xml\"\n/>\n\n<LinkCard\n  title=\"Pages updates\"\n  description=\"Receive updates for the main website pages.\"\n  href=\"/pages.xml\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting DMG Background Image in Tauri Config\nDESCRIPTION: Configuration for adding a custom background image to the DMG installation window using the tauri.conf.json file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/dmg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"dmg\": {\n        \"background\": \"./images/\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight Components in JSX\nDESCRIPTION: Imports CardGrid and LinkCard components from the Astrojs Starlight library for creating a grid-based navigation interface.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/concept/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CardGrid, LinkCard } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Installing snap on Fedora\nDESCRIPTION: Commands to install snap on Fedora and enable classic snap support.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install snapd\n# Enable classic snap support\nsudo ln -s /var/lib/snapd/snap /snap\n```\n\n----------------------------------------\n\nTITLE: Tauri configuration for standard updater artifacts\nDESCRIPTION: JSON configuration for enabling standard updater artifact creation in the Tauri bundle settings. This is the recommended setting for Tauri v2 applications.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"createUpdaterArtifacts\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing snap on Debian\nDESCRIPTION: Command to install the snap package manager on Debian-based systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install snapd\n```\n\n----------------------------------------\n\nTITLE: Installing Stronghold plugin with Cargo\nDESCRIPTION: Command to add the Stronghold plugin to your Tauri project's dependencies using Cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/stronghold.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-stronghold\n```\n\n----------------------------------------\n\nTITLE: Installing NSIS on Ubuntu\nDESCRIPTION: Command to install NSIS package on Ubuntu Linux distribution.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install nsis\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable on Linux\nDESCRIPTION: Sets the JAVA_HOME environment variable for Android development on Linux systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport JAVA_HOME=/opt/android-studio/jbr\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Variable Priority in Markdown\nDESCRIPTION: A markdown tip block explaining the priority of environment variables versus CLI flags in Tauri.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip[Environment Variable Priority]\n\nIf both environment variable and CLI flag are used, the CLI flag will have priority.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Configuring External IPC Access Security in Tauri\nDESCRIPTION: JSON configuration for enabling remote IPC access to specific domains in Tauri applications. Allows granular control over window access, plugin availability, and API enablement for trusted domains.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"security\": {\n    \"dangerousRemoteUrlIpcAccess\": [\n      {\n        \"windows\": [\"main\", \"settings\"],\n        \"domain\": \"trusted.example\",\n        \"plugins\": [\"trusted-plugin\"],\n        \"enableTauriAPI\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows 7 Notification Support\nDESCRIPTION: Cargo dependency configuration to enable Windows 7 compatibility for notifications.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/windows-installer.mdx#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-notification = { version = \"2.0.0\", features = [ \"windows7-compat\" ] }\n```\n\n----------------------------------------\n\nTITLE: Testing Snap Package\nDESCRIPTION: Command to test the built snap package by running the application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsnap run your-app\n```\n\n----------------------------------------\n\nTITLE: Updating Tauri Dependencies with Package Managers\nDESCRIPTION: Commands to update Tauri CLI and API dependencies using npm, yarn, pnpm, and cargo package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@latest @tauri-apps/api@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables on Linux\nDESCRIPTION: Sets ANDROID_HOME and NDK_HOME environment variables for Android development on Linux systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport NDK_HOME=\"$ANDROID_HOME/ndk/$(ls -1 $ANDROID_HOME/ndk)\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Book Item Component for Tauri Learning Resource\nDESCRIPTION: This JSX code renders a BookItem component for a Tauri-related book, including the book's image, title, author, and purchase links.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<BookItem\n  image={RoseRustBook}\n  title=\"HTML, CSS, JavaScript, and Rust for Beginners: A Guide to Application Development with Tauri\"\n  alt=\"HTML, CSS, JavaScript, and Rust for Beginners Book Cover\"\n  author=\"James Alexander Rose\"\n  links={[\n    {\n      preText: 'Paperback on Amazon:',\n      text: 'Buy Here',\n      url: 'https://www.amazon.com/dp/B0DR6KZVVW',\n    },\n    {\n      preText: 'Free PDF version:',\n      text: 'Download (PDF 4MB)',\n      url: '/assets/learn/community/HTML_CSS_JavaScript_and_Rust_for_Beginners_A_Guide_to_Application_Development_with_Tauri.pdf',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Tray-Icon Feature to Cargo.toml\nDESCRIPTION: TOML configuration to add the tray-icon feature to the Tauri Positioner plugin in Cargo.toml.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/positioner.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-positioner = { version = \"2.0.0\", features = [\"tray-icon\"] }\n```\n\n----------------------------------------\n\nTITLE: Updating Vite Configuration for Tauri 2.0 Release Candidate\nDESCRIPTION: Demonstrates the updated Vite configuration for Tauri 2.0 release candidate, adapting to changes in the built-in development server and network exposure.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-2-beta.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport Unocss from 'unocss/vite';\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\n\nconst host = process.env.TAURI_DEV_HOST;\n\nexport default defineConfig({\n  plugins: [svelte()],\n  clearScreen: false,\n  server: {\n    host: host || false,\n    port: 1420,\n    strictPort: true,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host: host,\n          port: 1430,\n        }\n      : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable on Windows\nDESCRIPTION: Sets the JAVA_HOME environment variable for Android development on Windows systems using PowerShell.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n[System.Environment]::SetEnvironmentVariable(\"JAVA_HOME\", \"C:\\Program Files\\Android\\Android Studio\\jbr\", \"User\")\n```\n\n----------------------------------------\n\nTITLE: Building Snap Package\nDESCRIPTION: Command to build the snap package using Snapcraft with sudo privileges.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo snapcraft\n```\n\n----------------------------------------\n\nTITLE: Initializing Tauri Updater Plugin in Rust application\nDESCRIPTION: Code snippet to initialize the Tauri updater plugin in the application's entry point. This adds the plugin to the Tauri application builder configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/updater.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    tauri::Builder::default()\n        .setup(|app| {\n            #[cfg(desktop)]\n            app.handle().plugin(tauri_plugin_updater::Builder::new().build());\n            Ok(())\n        })\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SRCINFO\nDESCRIPTION: Command to generate the required .SRCINFO file from PKGBUILD.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmakepkg --printsrcinfo > .SRCINFO\n```\n\n----------------------------------------\n\nTITLE: Invalid Publisher Configuration Example\nDESCRIPTION: Example of an invalid configuration where the publisher name matches the product name, which is not allowed in Microsoft Store.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/microsoft-store.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productName\": \"Example\",\n  \"identifier\": \"com.example.app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in Tauri JSON Config\nDESCRIPTION: Example of how to configure a plugin in the Tauri application's tauri.conf.json file, showing how to set plugin-specific configuration options.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": { ... },\n  \"tauri\": { ... },\n  \"plugins\": {\n    \"plugin-name\": {\n      \"timeout\": 30\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File References in Markdown\nDESCRIPTION: References to configuration settings and paths demonstrating options for distribution across different platforms and app stores.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Apple Appstore: https://v2.tauri.app/distribute/app-store/\n- Google Play: https://v2.tauri.app/distribute/google-play/\n- Microsoft Store: https://v2.tauri.app/distribute/microsoft-store/\n- CrabNebula Cloud: https://v2.tauri.app/distribute/crabnebula-cloud/\n- Flathub: https://v2.tauri.app/distribute/flatpak/\n- Snapcraft: https://v2.tauri.app/distribute/snapcraft/\n- AUR: https://v2.tauri.app/distribute/aur/\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Handling for iOS Plugin\nDESCRIPTION: Shows how to implement permission checking and requesting in a Tauri iOS plugin by overriding checkPermissions and requestPermissions functions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nclass ExamplePlugin: Plugin {\n  @objc open func checkPermissions(_ invoke: Invoke) {\n    invoke.resolve([\"postNotification\": \"prompt\"])\n  }\n\n  @objc public override func requestPermissions(_ invoke: Invoke) {\n    // request permissions here\n    // then resolve the request\n    invoke.resolve([\"postNotification\": \"granted\"])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Flathub Repository Fork\nDESCRIPTION: Git command to clone your fork of the Flathub repository, specifically targeting the new-pr branch which is used for submitting new applications to Flathub.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --branch=new-pr git@github.com:your_github_username/flathub.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Tauri Build Script\nDESCRIPTION: Build script that configures Tauri build-time helpers and sets up directory watching for recompilation.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    println!(\"cargo:rerun-if-changed=dist\");\n    tauri_build::build()\n}\n```\n\n----------------------------------------\n\nTITLE: WebKit Version Table - Linux Distributions\nDESCRIPTION: Markdown table showing WebKit and WebKitGTK versions across different Linux distributions including Debian, Ubuntu, and CentOS. Maps distribution versions to corresponding WebKit versions and Safari equivalents.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/webview-versions.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Distro                                                            | `webkitgtk` Version | WebKit Version | Safari Equivalent |\n| ----------------------------------------------------------------- | ------------------- | -------------- | ----------------- |\n| Debian 11 (with update), Ubuntu 20.04 (with update), Ubuntu 22.04 | 2.36                | [614.1.6]      | TP 140 (16.0)     |\n| Debian 10 (with update)                                           | 2.34                | [613.1.1]      | 15.4              |\n| Debian 11, Ubuntu 18.04 (with update), centos 8 (non-stream)      | 2.32                | [612.1.6]      | 15.0              |\n| Ubuntu 20.04                                                      | 2.28                | [610.1.1]      | 14.0              |\n| Debian 9 (with backport), Debian 10                               | 2.24                | [608.1.6]      | 13.0              |\n| Ubuntu 18.04                                                      | 2.20                | [606.1.4]      | 12.0              |\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Tauri Integration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure Nuxt (version 3.7+) to work with Tauri. It includes settings for SSG, Vite configuration, environment variables, and development server setup for cross-device compatibility.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/frontend/nuxt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // (optionnel) Activez les outils de développement Nuxt\n  devtools: { enabled: true },\n  // Activez SSG\n  ssr: false,\n  vite: {\n    // Meilleur compatibilité pour la sortie \"Tauri CLI\"\n    clearScreen: false,\n    // Activez les variables d'environnement\n    // Vous pouvez trouver les variables d'environnements additionnelles sur\n    // https://v2.tauri.app/reference/environment-variables/\n    envPrefix: ['VITE_', 'TAURI_'],\n    server: {\n      // Tauri requiert un port constant\n      strictPort: true,\n      // Active le serveur de développement pour être visible par les autres appareils pour le développement mobile\n      host: '0.0.0.0',\n      hmr: {\n        // Utilisez le websocket pour le rechargement à chaud\n\n        protocol: 'ws',\n        // Assurez-vous que ce soit disponible sur le réseau\n        host: '0.0.0.0',\n        // Utilisez un port spécifique pour hmr\n        port: 5183,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing and Managing Flatpak Installations\nDESCRIPTION: Shell commands for installing, running, and updating a locally built Flatpak package during development and testing phases.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Install the flatpak\nflatpak -y --user install <local repo name> <your flatpak id>\n\n# Run it\nflatpak run <your flatpak id>\n\n# Update it\nflatpak -y --user update <your flatpak id>\n```\n\n----------------------------------------\n\nTITLE: Updating Main Function for Mobile Support\nDESCRIPTION: Modification of the main function to support mobile execution using the mobile_entry_point macro.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n    // your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Build Script for Plugin Schema Generation\nDESCRIPTION: Build script configuration that generates JSON schema for plugin scope configuration.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[path = \"src/scope.rs\"]\nmod scope;\n\nconst COMMANDS: &[&str] = &[];\n\nfn main() {\n    tauri_plugin::Builder::new(COMMANDS)\n        .global_scope_schema(schemars::schema_for!(scope::Entry))\n        .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpak Runtime for Tauri Apps\nDESCRIPTION: Command to install the GNOME Platform and SDK runtime version 46, which are the base dependencies required for running Tauri applications in a Flatpak environment.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflatpak install flathub org.gnome.Platform//46 org.gnome.Sdk//46\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Biometric Authentication Permissions\nDESCRIPTION: XML configuration for iOS Info.plist file that adds the required NSFaceIDUsageDescription property, which is necessary for using biometric authentication on iOS devices.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/biometric.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\t<dict>\n\t\t<key>NSFaceIDUsageDescription</key>\n\t\t<string>Authenticate with biometric</string>\n\t</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Basic PKGBUILD Configuration\nDESCRIPTION: Basic PKGBUILD file template for Tauri applications with essential package metadata and dependencies.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\npkgname=<pkgname>\npkgver=1.0.0\npkgrel=1\npkgdesc=\"Description of your app\"\narch=('x86_64' 'aarch64')\nurl=\"https://github.com/<user>/<project>\"\nlicense=('MIT')\ndepends=('cairo' 'desktop-file-utils' 'gdk-pixbuf2' 'glib2' 'gtk3' 'hicolor-icon-theme' 'libsoup' 'pango' 'webkit2gtk-4.1')\noptions=('!strip' '!emptydirs')\ninstall=${pkgname}.install\nsource_x86_64=(\"${url}/releases/download/v${pkgver}/appname_${pkgver}_amd64.deb\")\nsource_aarch64=(\"${url}/releases/download/v${pkgver}/appname_\"${pkgver}_arm64.deb\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts for Next.js and Tauri\nDESCRIPTION: Script configurations in package.json for running Next.js development server, building the application, and Tauri commands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nextjs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\",\n  \"tauri\": \"tauri\"\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Tauri App Publishing\nDESCRIPTION: YAML configuration for a GitHub Actions workflow to build and publish a Tauri application, including steps for Windows code signing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/Sign/windows.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nname: 'publish'\non:\n  push:\n    branches:\n      - release\n\njobs:\n  publish-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: setup node\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - name: install Rust stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n      - name: install webkit2gtk (ubuntu only)\n        if: matrix.platform == 'ubuntu-latest'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y webkit2gtk-4.0\n      - name: install app dependencies and build it\n        run: yarn && yarn build\n      - uses: tauri-apps/tauri-action@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tagName: app-v__VERSION__ # this action will automatically replace __VERSION__ with the app version\n          releaseName: 'App v__VERSION__'\n          releaseBody: 'See the assets to download this version and install.'\n          releaseDraft: true\n          prerelease: false\n```\n\n----------------------------------------\n\nTITLE: Cloning AUR Repository\nDESCRIPTION: Command to clone an empty AUR git repository for package publishing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://aur.archlinux.org/your-repo-name\n```\n\n----------------------------------------\n\nTITLE: Adding a Password Input Field to egui Form\nDESCRIPTION: Creates a password text field with masked input. Configures the layout and spacing for the password control with an appropriate label.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nui.style_mut().spacing.item_spacing.y = 20.;\n\nlet textfield = ui\n  .with_layout(egui::Layout::top_down(egui::Align::Min), |ui| {\n    ui.style_mut().spacing.item_spacing.y = 0.;\n    control_label(ui, \"Password\");\n    ui.horizontal_wrapped(|ui| {\n      let field = ui.add_sized(\n        [ui.available_width(), 18.],\n        egui::TextEdit::singleline(password).password(true),\n      );\n      field\n    })\n    .inner\n  })\n  .inner;\n```\n\n----------------------------------------\n\nTITLE: Creating a Submit Button in egui Form\nDESCRIPTION: Adds an 'Unlock' button to the form with conditional enabling based on whether the password field is empty. Positions the button appropriately in the layout.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet mut button = ui.add_enabled(!password.is_empty(), egui::Button::new(\"Unlock\"));\nbutton.rect.min.x = 100.;\nbutton.rect.max.x = 100.;\n```\n\n----------------------------------------\n\nTITLE: Adding Global Shortcut Plugin to Cargo Dependencies\nDESCRIPTION: Adds the Tauri Global Shortcut plugin to the Cargo.toml file as a dependency for Rust projects, excluding Android and iOS targets.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\n[target.\"cfg(not(any(target_os = \\\"android\\\", target_os = \\\"ios\\\")))\".dependencies]\ntauri-plugin-global-shortcut = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a User Selection Dropdown in egui\nDESCRIPTION: Implements a ComboBox (dropdown) control for user selection with proper styling and layout. The control displays the currently selected user and allows selecting from a predefined list.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nui.with_layout(egui::Layout::top_down(egui::Align::Min), |ui| {\n  control_label(ui, \"User\");\n  egui::ComboBox::from_id_source(\"user\")\n    .width(ui.available_width() - 8.)\n    .selected_text(egui::RichText::new(user.clone()).family(egui::FontFamily::Monospace))\n    .show_ui(ui, move |ui| {\n      for user_name in users {\n        ui.selectable_value(user, user_name.clone(), user_name.clone());\n      }\n    })\n    .response;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tauri CLI with deno\nDESCRIPTION: Command to install the Tauri CLI using deno package manager. This adds the CLI as a development dependency to the current project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/reference/_cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno add -D npm:@tauri-apps/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Installing tauri-egui Dependencies in Cargo.toml\nDESCRIPTION: Adds the tauri-egui plugin to the project dependencies in the Cargo.toml file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-egui-0-1.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-egui = \"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Guest Bindings\nDESCRIPTION: Commands to install the JavaScript guest bindings for the Tauri Shell plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/plugin-shell\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tauri-apps/plugin-shell\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @tauri-apps/plugin-shell\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno add npm:@tauri-apps/plugin-shell\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @tauri-apps/plugin-shell\n```\n\n----------------------------------------\n\nTITLE: Initializing Selenium Project Configuration\nDESCRIPTION: Package.json configuration for Selenium WebDriver testing setup with Mocha test framework and Chai assertions library.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/selenium.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"selenium\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"dependencies\": {\n    \"chai\": \"^4.3.4\",\n    \"mocha\": \"^9.0.3\",\n    \"selenium-webdriver\": \"^4.0.0-beta.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Plugin via Package Manager\nDESCRIPTION: Commands to install the Tauri Shell plugin using various package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/shell.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run tauri add shell\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run tauri add shell\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm tauri add shell\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno task tauri add shell\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun tauri add shell\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo tauri add shell\n```\n\n----------------------------------------\n\nTITLE: Installing Process Plugin with Shell Command\nDESCRIPTION: Command to add the process plugin to the project's dependencies in Cargo.toml, executed in the src-tauri folder.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/process.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-process\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Plugin Permissions\nDESCRIPTION: JSON configuration for enabling the store plugin permissions in the Tauri capabilities system.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\n    ...,\n    \"store:default\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OS Plugin with Package Manager\nDESCRIPTION: Command to install the OS Information plugin using various package managers in a Tauri project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/os-info.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-os\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Workspace for Tauri Project\nDESCRIPTION: Creates a Cargo workspace configuration to include the src-tauri directory as a workspace member. This setup is necessary when the root directory doesn't have a Cargo.toml file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/rustrover.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"src-tauri\"]\n```\n\n----------------------------------------\n\nTITLE: WebdriverIO Configuration Setup\nDESCRIPTION: Configuration file for WebdriverIO that sets up test specs, capabilities, and session management for Tauri application testing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Tests/WebDriver/Example/webdriverio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst os = require('os');\nconst path = require('path');\nconst { spawn, spawnSync } = require('child_process');\n\nlet tauriDriver;\n\nexports.config = {\n  specs: ['./develop/tests/specs/**/*.js'],\n  maxInstances: 1,\n  capabilities: [\n    {\n      maxInstances: 1,\n      'tauri:options': {\n        application: '../../target/release/hello-tauri-webdriver',\n      },\n    },\n  ],\n  reporters: ['spec'],\n  framework: 'mocha',\n  mochaOpts: {\n    ui: 'bdd',\n    timeout: 60000,\n  },\n\n  onPrepare: () => spawnSync('cargo', ['build', '--release']),\n\n  beforeSession: () =>\n    (tauriDriver = spawn(\n      path.resolve(os.homedir(), '.cargo', 'bin', 'tauri-driver'),\n      [],\n      { stdio: [null, process.stdout, process.stderr] }\n    )),\n\n  afterSession: () => tauriDriver.kill(),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Localhost Plugin via Command Line\nDESCRIPTION: Commands to install the localhost plugin using different package managers in a Tauri project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/localhost.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run tauri add localhost\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn run tauri add localhost\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm tauri add localhost\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno task tauri add localhost\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun tauri add localhost\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo tauri add localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Subcommands for CLI\nDESCRIPTION: JSON configuration for subcommands in the CLI plugin, allowing for nested command interfaces similar to git's subcommands.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    ...\n    \"subcommands\": {\n      \"branch\": {\n        \"args\": []\n      },\n      \"push\": {\n        \"args\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Plugin Event Implementation\nDESCRIPTION: Demonstrates how to implement event triggering in an Android Tauri plugin using the trigger function for various events like load, new intent, and camera operations.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/develop-mobile.mdx#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n@TauriPlugin\nclass ExamplePlugin(private val activity: Activity): Plugin(activity) {\n    override fun load(webView: WebView) {\n      trigger(\"load\", JSObject())\n    }\n\n    override fun onNewIntent(intent: Intent) {\n      // handle new intent event\n      if (intent.action == Intent.ACTION_VIEW) {\n        val data = intent.data.toString()\n        val event = JSObject()\n        event.put(\"data\", data)\n        trigger(\"newIntent\", event)\n      }\n    }\n\n    @Command\n    fun openCamera(invoke: Invoke) {\n      val payload = JSObject()\n      payload.put(\"open\", true)\n      trigger(\"camera\", payload)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsafe Headers in Cargo.toml\nDESCRIPTION: Cargo dependency configuration to enable unsafe headers feature flag for the HTTP plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/http-client.mdx#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-http = { version = \"2\", features = [\"unsafe-headers\"] }\n```\n\n----------------------------------------\n\nTITLE: Legacy Template Selection Interface\nDESCRIPTION: Example of the previous template selection prompt showing all available options before the v3 update.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/create-tauri-app-version-3-released.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n✔ Choose your package manager · pnpm\n? Choose your UI template ›\n  vanilla\n  vanilla-ts\n  vue\n❯ vue-ts\n  svelte\n  svelte-ts\n  react\n  react-ts\n  solid\n  solid-ts\n  next\n  next-ts\n  preact\n  preact-ts\n  angular\n  clojurescript\n  svelte-kit\n  svelte-kit-ts\n```\n\n----------------------------------------\n\nTITLE: Updating Tauri Dependencies for Mobile Alpha Release\nDESCRIPTION: Commands to update NPM and Cargo dependencies for Tauri 2.0.0-alpha.0. This includes updating the CLI, API, and installing the new tauri-cli.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-mobile-alpha.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@next @tauri-apps/api@next\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli@next @tauri-apps/api@next\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli@next @tauri-apps/api@next\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo add tauri@2.0.0-alpha.0\ncargo add tauri-build@2.0.0-alpha.0 --build\ncargo install tauri-cli --version \"^2.0.0-alpha\" --locked\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Tauri Compatibility\nDESCRIPTION: Customize vite.config.js for optimal performance with Tauri, including server settings, environment variables, and build options.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/vite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n  clearScreen: false,\n  server: {\n    port: 1420,\n    strictPort: true,\n    host: host || false,\n    hmr: host\n      ? {\n          protocol: 'ws',\n          host,\n          port: 1421,\n        }\n      : undefined,\n    watch: {\n      ignored: ['**/src-tauri/**'],\n    },\n  },\n  envPrefix: ['VITE_', 'TAURI_ENV_*'],\n  build: {\n    target:\n      process.env.TAURI_ENV_PLATFORM == 'windows'\n        ? 'chrome105'\n        : 'safari13',\n    minify: !process.env.TAURI_ENV_DEBUG ? 'esbuild' : false,\n    sourcemap: !!process.env.TAURI_ENV_DEBUG,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Build Settings with NPM\nDESCRIPTION: Configuration for Tauri's build settings when using NPM as the package manager, specifying build commands and frontend distribution directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../out\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tauri Dependencies with Package Managers\nDESCRIPTION: Commands to update Tauri CLI and API dependencies to the latest alpha release using various package managers and Cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-alpha-4.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/cli@next @tauri-apps/api@next\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn upgrade @tauri-apps/cli@next @tauri-apps/api@next\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm update @tauri-apps/cli@next @tauri-apps/api@next\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri@2.0.0-alpha.4\ncargo add tauri-build@2.0.0-alpha.2 --build\ncargo install tauri-cli --version \"^2.0.0-alpha\" --locked\n```\n\n----------------------------------------\n\nTITLE: Initializing Clipboard Plugin in Rust\nDESCRIPTION: Demonstrates how to initialize the Tauri Clipboard plugin in a Rust application's main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_clipboard_manager::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Development Server for Tauri 2.0.0-beta Mobile\nDESCRIPTION: Beta version configuration for Vite development server with mobile platform detection and network exposure settings using internal-ip package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-2-0-0-release-candidate.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\nimport { internalIpV4Sync } from 'internal-ip';\n\nconst mobile = !!/android|ios/.exec(process.env.TAURI_ENV_PLATFORM);\n\nexport default defineConfig({\n  plugins: [svelte()],\n  clearScreen: false,\n  server: {\n    host: mobile ? '0.0.0.0' : false,\n    port: 1420,\n    strictPort: true,\n    hmr: mobile\n      ? {\n          protocol: 'ws',\n          host: internalIpV4Sync(),\n          port: 1421,\n        }\n      : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: App Store Configuration for macOS\nDESCRIPTION: Example of a separate Tauri configuration file for App Store submissions with entitlements and provisioning profile settings\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"entitlements\": \"./Entitlements.plist\",\n      \"files\": {\n        \"embedded.provisionprofile\": \"path/to/profile-name.provisionprofile\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Plugin to package.json\nDESCRIPTION: Adds the Tauri CLI plugin as a dependency in the package.json file for JavaScript projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-cli\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri Build Settings for Different Package Managers\nDESCRIPTION: Configuration examples for Tauri's build settings using different package managers (npm, yarn, pnpm, deno). Specifies build commands, development URL, and frontend distribution directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"build\": {\n    \"beforeDevCommand\": \"npm run dev\",\n    \"beforeBuildCommand\": \"npm run build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"build\": {\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"build\": {\n    \"beforeDevCommand\": \"pnpm dev\",\n    \"beforeBuildCommand\": \"pnpm build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../dist\"\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"build\": {\n    \"beforeDevCommand\": \"deno task dev\",\n    \"beforeBuildCommand\": \"deno task build\",\n    \"devUrl\": \"http://localhost:3000\",\n    \"frontendDist\": \"../out\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: macOS Entitlements Configuration\nDESCRIPTION: Example of Entitlements.plist file configuring app sandbox permission.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Configuring Barcode Scanner Permissions in JSON\nDESCRIPTION: JSON configuration for the mobile capabilities file to set permissions for using the barcode scanner plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/barcode-scanner.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"../gen/schemas/mobile-schema.json\",\n  \"identifier\": \"mobile-capability\",\n  \"windows\": [\"main\"],\n  \"platforms\": [\"iOS\", \"android\"],\n  \"permissions\": [\"barcode-scanner:allow-scan\", \"barcode-scanner:allow-cancel\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brownfield Mode in Tauri's JSON Configuration\nDESCRIPTION: This snippet shows how to explicitly set the Brownfield mode in the tauri.conf.json file. It demonstrates the use of the 'tauri > pattern' object to specify the mode, although this configuration is optional as Brownfield is the default mode.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/concept/Inter-Process Communication/brownfield.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tauri\": {\n    \"pattern\": {\n      \"use\": \"brownfield\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: App Category Configuration\nDESCRIPTION: JSON configuration for setting the app category in the App Store\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"category\": \"Utility\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in Angular Configuration\nDESCRIPTION: Example of setting HTTP headers in the Angular configuration file (angular.json) for Angular projects.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/security/http-headers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  //...\n  \"projects\":{\n    //...\n    \"insert-project-name\":{\n      //...\n      \"architect\":{\n        //...\n        \"serve\":{\n          //...\n          \"options\":{\n            //...\n            \"headers\":{\n              \"Cross-Origin-Opener-Policy\": \"same-origin\",\n              \"Cross-Origin-Embedder-Policy\": \"require-corp\",\n              \"Timing-Allow-Origin\": \"https://developer.mozilla.org, https://example.com\",\n              \"Access-Control-Expose-Headers\": \"Tauri-Custom-Header\",\n              \"Tauri-Custom-Header\": \"key1 'value1' 'value2'; key2 'value3'\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: macOS App Bundle Info.plist Configuration\nDESCRIPTION: Example Info.plist configuration for requesting camera and microphone access in a Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>NSCameraUsageDescription</key>\n\t<string>Request camera access for WebRTC</string>\n\t<key>NSMicrophoneUsageDescription</key>\n\t<string>Request microphone access for WebRTC</string>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Passing GitHub Token to Workflow in YAML\nDESCRIPTION: This YAML snippet demonstrates how to pass the GitHub token to a workflow as an environment variable. The token is automatically issued by GitHub for each workflow run and is accessed using the secrets context.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/Pipelines/github.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Installing Persisted Scope Plugin in Cargo.toml\nDESCRIPTION: Add the tauri-plugin-persisted-scope dependency to the Cargo.toml file. It can be installed either from crates.io or directly from the GitHub repository.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/plugin/persisted-scope.mdx#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-persisted-scope = \"2.0.0\"\n# 或者使用 Git：\ntauri-plugin-persisted-scope = { git = \"https://github.com/tauri-apps/plugins-workspace\", branch = \"v2\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Code Signing in tauri.conf.json\nDESCRIPTION: JSON configuration for specifying certificate thumbprint, digest algorithm, and timestamp URL in the Tauri configuration file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/Sign/windows.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"windows\": {\n        \"certificateThumbprint\": \"A1B1A2B2A3B3A4B4A5B5A6B6A7B7A8B8A9B9A0B0\",\n        \"digestAlgorithm\": \"sha256\",\n        \"timestampUrl\": \"http://timestamp.comodoca.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Profile Configuration\nDESCRIPTION: JSON configuration for including the provisioning profile in the app bundle\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/app-store.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"files\": {\n        \"embedded.provisionprofile\": \"path/to/profile-name.provisionprofile\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME Environment Variable on macOS\nDESCRIPTION: Sets the JAVA_HOME environment variable for Android development on macOS systems.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/prerequisites.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport JAVA_HOME=\"/Applications/Android Studio.app/Contents/jbr/Contents/Home\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trunk for Tauri Integration\nDESCRIPTION: TOML configuration for Trunk.toml that specifies directories to ignore during watching and sets the WebSocket protocol to support mobile development hot reloading.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/start/frontend/trunk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Trunk.toml\n[watch]\nignore = [\"./src-tauri\"]\n\n[serve]\nws_protocol = \"ws\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri with yarn Build Settings\nDESCRIPTION: Configuration settings in tauri.conf.json for yarn-based Qwik projects, specifying build paths and commands for development and production.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/frontend/qwik.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": {\n    \"devUrl\": \"http://localhost:5173\"\n    \"frontendDist\": \"../dist\",\n    \"beforeDevCommand\": \"yarn dev\",\n    \"beforeBuildCommand\": \"yarn build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Persisted Scope Plugin in Rust\nDESCRIPTION: Modify the lib.rs file to initialize the persisted-scope plugin in the Tauri application builder. This enables the plugin's functionality in the Tauri app.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/plugin/persisted-scope.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn run() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_persisted_scope::init())\n        .run(tauri::generate_context!())\n        .expect(\"error while running tauri application\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Plugin in Tauri Rust\nDESCRIPTION: Demonstrates how to add and initialize the Process plugin in a Tauri Rust project. This includes adding the Cargo dependency and initializing the plugin in the main function.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-process = \"2\"\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_process::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing snap on Arch Linux\nDESCRIPTION: Series of commands to install snap on Arch Linux from the AUR and enable required services.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/snapcraft.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S --needed git base-devel\ngit clone https://aur.archlinux.org/snapd.git\ncd snapd\nmakepkg -si\nsudo systemctl enable --now snapd.socket\nsudo systemctl start snapd.socket\nsudo systemctl enable --now snapd.apparmor.service\n```\n\n----------------------------------------\n\nTITLE: Tauri RPM Configuration\nDESCRIPTION: JSON configuration for RPM package settings including scripts and dependencies in tauri.conf.json\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/rpm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"linux\": {\n      \"rpm\": {\n        \"epoch\": 0,\n        \"files\": {},\n        \"release\": \"1\",\n        \"preInstallScript\": \"/path/to/your/project/src-tauri/scripts/prescript.sh\",\n        \"postInstallScript\": \"/path/to/your/project/src-tauri/scripts/postscript.sh\",\n        \"preRemoveScript\": \"/path/to/your/project/src-tauri/scripts/prescript.sh\",\n        \"postRemoveScript\": \"/path/to/your/project/src-tauri/scripts/postscript.sh\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rust Compiler Error Example\nDESCRIPTION: Example of a Rust compiler error output showing variable naming issue.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Debug/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nerror[E0425]: cannot find value `sun` in this scope\n  --> src/main.rs:11:5\n   |\n11 |     sun += i.to_string().parse::<u64>().unwrap();\n   |     ^^^ help: a local variable with a similar name exists: `sum`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpak Tools on Gentoo\nDESCRIPTION: Command to install the flatpak and flatpak-builder tools on Gentoo Linux, which are required for building and testing Flatpak packages locally.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo emerge --ask \\\nsys-apps/flatpak \\\ndev-util/flatpak-builder\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trunk TOML Configuration for Tauri Projects\nDESCRIPTION: This Trunk configuration ignores the Tauri source directory when watching for file changes to prevent unnecessary rebuilds.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/frontend/trunk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# Trunk.toml\n[watch]\nignore = [\"./src-tauri\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tauri to Use Azure Key Vault for Signing\nDESCRIPTION: JSON configuration in tauri.conf.json to use the Relic tool with Azure Key Vault for code signing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/Sign/windows.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"windows\": {\n      \"signCommand\": \"relic sign --file %1 --key azure --config relic.conf\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relic for Azure Key Vault Signing\nDESCRIPTION: YAML configuration for the Relic tool to use Azure Key Vault for code signing.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/zh-cn/distribute/Sign/windows.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\ntokens:\n  azure:\n    type: azure\n\nkeys:\n  azure:\n    token: azure\n    id: https://<KEY_VAULT_NAME>.vault.azure.net/certificates/<CERTIFICATE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Migrating from v1/v2 to v3 in JavaScript\nDESCRIPTION: Shows the migration from v1/v2 to v3 of the Tauri Store plugin in JavaScript by changing the import statement.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/store.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { Store } from '@tauri-apps/plugin-store';\n+ import { LazyStore } from '@tauri-apps/plugin-store';\n```\n\n----------------------------------------\n\nTITLE: Updating Tauri dependencies with package managers\nDESCRIPTION: Commands to update Tauri dependencies to version 1.7.0 using various package managers (npm, yarn, pnpm) and Cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-7.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tauri-apps/cli@latest @tauri-apps/api@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Sample i18n Resource File\nDESCRIPTION: Example JSON file showing the structure of an i18n resource file that can be bundled with the application\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"Guten Tag!\",\n  \"bye\": \"Auf Wiedersehen!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package Installation Script\nDESCRIPTION: Installation script for handling post-install, post-upgrade, and post-remove actions.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/aur.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\npost_install() {\n\tgtk-update-icon-cache -q -t -f usr/share/icons/hicolor\n\tupdate-desktop-database -q\n}\n\npost_upgrade() {\n\tpost_install\n}\n\npost_remove() {\n\tgtk-update-icon-cache -q -t -f usr/share/icons/hicolor\n\tupdate-desktop-database -q\n}\n```\n\n----------------------------------------\n\nTITLE: One-time Event Listening in Rust\nDESCRIPTION: Shows how to use the once() utility function in Rust to listen for a single event occurrence.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/_sections/frontend-listen.mdx#2025-04-22_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\napp.once(\"ready\", |event| {\n  println!(\"app is ready\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Autostart Plugin with Shell Command\nDESCRIPTION: Command to add the autostart plugin to a Tauri project's dependencies in Cargo.toml using cargo.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/autostart.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo add tauri-plugin-autostart --target 'cfg(any(target_os = \"macos\", windows, target_os = \"linux\"))'\n```\n\n----------------------------------------\n\nTITLE: Updating Tauri Dependencies\nDESCRIPTION: Commands to update Tauri CLI and API dependencies using different package managers.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/blog/tauri-1-1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tauri-apps/cli@latest @tauri-apps/api@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn upgrade @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm update @tauri-apps/cli @tauri-apps/api --latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo update\n```\n\n----------------------------------------\n\nTITLE: Adding Window Plugin Dependency in JavaScript\nDESCRIPTION: Adds the @tauri-apps/plugin-window dependency to the package.json file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@tauri-apps/plugin-window\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Managed State in Tauri\nDESCRIPTION: Shows how to access managed state using the State type with any type implementing the Manager trait.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/state-management.mdx#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet data = app.state::<AppData>();\n```\n\n----------------------------------------\n\nTITLE: Custom Files Configuration\nDESCRIPTION: JSON configuration for adding custom files to the macOS application bundle.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/macos-application-bundle.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundle\": {\n    \"macOS\": {\n      \"files\": {\n        \"embedded.provisionprofile\": \"./profile-name.provisionprofile\",\n        \"SharedSupport/docs.md\": \"./docs/index.md\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Updater Plugin Dependency in Rust\nDESCRIPTION: Adds the tauri-plugin-updater dependency to the Cargo.toml file.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntauri-plugin-updater = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Window Plugin in Rust\nDESCRIPTION: Initializes the window plugin in the main function of a Rust Tauri application.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/fr/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_window::init())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Notification Plugin Dependency in Cargo.toml\nDESCRIPTION: Adds the tauri-plugin-notification dependency to the Cargo.toml file for a Rust project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/migrate/from-tauri-1.mdx#2025-04-22_snippet_34\n\nLANGUAGE: toml\nCODE:\n```\n# Cargo.toml\n[dependencies]\ntauri-plugin-notification = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Navigation Cards using Astro Starlight Components\nDESCRIPTION: JSX component implementation using Astro Starlight's LinkCard and CardGrid components to create a navigation menu for key Tauri documentation sections\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/about/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard\n    title=\"Tauri Philosophy\"\n    href=\"/about/philosophy/\"\n    description=\"Learn more about the approach behind Tauri\"\n  />\n  <LinkCard\n    title=\"Governance\"\n    href=\"/about/governance/\"\n    description=\"Understand how the Tauri governance structure is setup\"\n  />\n  <LinkCard\n    title=\"Trademark\"\n    href=\"/about/trademark/\"\n    description=\"Guidelines for using the Tauri trademark\"\n  />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Adding Localhost Plugin Dependency in Cargo.toml\nDESCRIPTION: Command to add the localhost plugin as a dependency in the Cargo.toml file of a Tauri project.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/localhost.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo add tauri-plugin-localhost\n```\n\n----------------------------------------\n\nTITLE: Tauri Init Configuration Prompts\nDESCRIPTION: Configuration prompts shown during manual Tauri initialization using the CLI.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/start/create-project.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n✔ What is your app name? tauri-app\n✔ What should the window title be? tauri-app\n✔ Where are your web assets located? ..\n✔ What is the url of your dev server? http://localhost:5173\n✔ What is your frontend dev command? pnpm run dev\n✔ What is your frontend build command? pnpm run build\n```\n\n----------------------------------------\n\nTITLE: Rendering AwesomeTauri Component for Guides and Tutorials\nDESCRIPTION: This JSX code renders AwesomeTauri components to display community-created guides and video tutorials for Tauri.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AwesomeTauri section=\"guides-no-official-no-video\" />\n\n#### Video Guides\n\n<AwesomeTauri section=\"guides-no-official-only-video\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using pnpm\nDESCRIPTION: Command to initialize a new Tauri application using pnpm's create command with the tauri-app package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm create tauri-app\n```\n\n----------------------------------------\n\nTITLE: Defining Scope Entry Structure\nDESCRIPTION: Rust struct definition for scope data that specifies allowed binaries for a shell plugin.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/Plugins/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, schemars::JsonSchema)]\npub struct Entry {\n    pub binary: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using Fish Shell\nDESCRIPTION: Command to initialize a new Tauri application using the Fish shell, downloading and executing a script from create.tauri.app.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsh (curl -sSL https://create.tauri.app/sh | psub)\n```\n\n----------------------------------------\n\nTITLE: Triggering Deep Links on Linux\nDESCRIPTION: Command to trigger deep links on Linux using xdg-open in terminal.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/plugin/deep-linking.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nxdg-open <scheme>://url\n```\n\n----------------------------------------\n\nTITLE: Installing core22 snap\nDESCRIPTION: Command to install the core22 base snap, which is a prerequisite for using Snapcraft.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo snap install core22\n```\n\n----------------------------------------\n\nTITLE: Installing snap on Fedora\nDESCRIPTION: Commands to install snap on Fedora and enable classic snap support. Requires a system reboot afterwards.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install snapd\n# Enable classic snap support\nsudo ln -s /var/lib/snapd/snap /snap\n```\n\n----------------------------------------\n\nTITLE: Installing snap on Arch Linux\nDESCRIPTION: Series of commands to install the snap package manager on Arch Linux from the AUR.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/snapcraft.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S --needed git base-devel\ngit clone https://aur.archlinux.org/snapd.git\ncd snapd\nmakepkg -si\nsudo systemctl enable --now snapd.socket\nsudo systemctl start snapd.socket\nsudo systemctl enable --now snapd.apparmor.service\n```\n\n----------------------------------------\n\nTITLE: Creating Tauri App using Bun\nDESCRIPTION: Command to initialize a new Tauri application using Bun's create command with the tauri-app package.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/_fragments/cta.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun create tauri-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Flathub Submission\nDESCRIPTION: Git command to create a new branch named after your application, which will contain your Flatpak manifest and be used for the pull request to Flathub.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b your_app_name\n```\n\n----------------------------------------\n\nTITLE: Testing Permissions in a Tauri Application\nDESCRIPTION: Commands to run the Tauri application in development mode and verify that the file was successfully written to the specified location in the home directory.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/learn/Security/using-plugin-permissions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run tauri dev\n```\n\nLANGUAGE: shell\nCODE:\n```\ncat $HOME/test.txt\n```\n\n----------------------------------------\n\nTITLE: Getting Target Triple on Unix Systems\nDESCRIPTION: Shell command to extract the target triple on Unix-based systems using rustc.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/develop/sidecar.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrustc -Vv | grep host | cut -f2 -d' '\n```\n\n----------------------------------------\n\nTITLE: Installing Flatpak Tools on Fedora\nDESCRIPTION: Command to install the flatpak and flatpak-builder tools on Fedora, which are required for building and testing Flatpak packages locally.\nSOURCE: https://github.com/tauri-apps/tauri-docs/blob/v2/src/content/docs/distribute/flatpak.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install flatpak flatpak-builder\n```"
  }
]