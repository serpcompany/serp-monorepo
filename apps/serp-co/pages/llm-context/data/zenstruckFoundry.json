[
  {
    "owner": "zenstruck",
    "repo": "foundry",
    "content": "TITLE: Repository Access Methods (PHP)\nDESCRIPTION: Demonstrates various repository methods provided by Zenstruck Foundry for accessing and manipulating entities in the database. Includes examples for retrieving the last object, truncating the table, counting entities, finding entities by criteria, and fetching random objects.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$repository->last(); // get the last object (assumes an auto-incremented \"id\" column)\n$repository->last('createdAt'); // assuming \"createdAt\" is a datetime column, this will return oldest object\n\n$repository->truncate(); // empty the database table\n$repository->count(); // the number of persisted Post's\n$repository->all(); // Post[]|Proxy[] all the persisted Post's\n\n$repository->findBy(['author' => 'kevin']); // Post[]|Proxy[] matching the filter\n\n$repository->find(5); // Post|Proxy with the id of 5\n$repository->find(['title' => 'My First Post']); // Post|Proxy matching the filter\n\n// get a random object that has been persisted\n$repository->random(); // returns Post|Proxy\n$repository->random(['author' => 'kevin']); // filter by the passed attributes\n\n// get a random set of objects that have been persisted\n$repository->randomSet(4); // array containing 4 \"Post|Proxy\" objects\n$repository->randomSet(4, ['author' => 'kevin']); // filter by the passed attributes\n\n// random range of persisted objects\n$repository->randomRange(0, 5); // array containing 0-5 \"Post|Proxy\" objects\n$repository->randomRange(0, 5, ['author' => 'kevin']); // filter by the passed attributes\n```\n\n----------------------------------------\n\nTITLE: AAA Testing Pattern with Foundry (PHP)\nDESCRIPTION: Illustrates using Zenstruck Foundry in a test following the Arrange-Act-Assert (AAA) pattern. It shows how to create a post using a factory, perform pre-assertions, act on the application, and make post-assertions using Foundry's assertion features.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\npublic function test_can_post_a_comment(): void\n{\n    // 1. \"Arrange\"\n    $post = PostFactory::new() // New Post factory\n        ->published()          // Make the post in a \"published\" state\n        ->create([             // Instantiate Post object and persist\n            'slug' => 'post-a' // This test only requires the slug field - all other fields are random data\n        ])\n    ;\n\n    // 1a. \"Pre-Assertions\"\n    $this->assertCount(0, $post->getComments());\n\n    // 2. \"Act\"\n    static::ensureKernelShutdown(); // Note kernel must be shutdown if you use factories before create client\n    $client = static::createClient();\n    $client->request('GET', '/posts/post-a'); // Note the slug from the arrange step\n    $client->submitForm('Add', [\n        'comment[name]' => 'John',\n        'comment[body]' => 'My comment',\n    ]);\n\n    // 3. \"Assert\"\n    self::assertResponseRedirects('/posts/post-a');\n\n    $this->assertCount(1, $post->_refresh()->getComments()); // Refresh $post from the database and call ->getComments()\n\n    CommentFactory::assert()->exists([ // Doctrine repository assertions\n        'name' => 'John',\n        'body' => 'My comment',\n    ]);\n\n    CommentFactory::assert()->count(2, ['post' => $post]); // assert given $post has 2 comments\n}\n```\n\n----------------------------------------\n\nTITLE: Object and Factory Assertions in PHPUnit\nDESCRIPTION: Demonstrates how to use assertion methods on object proxies and factories within PHPUnit tests. These assertions help verify whether an object is persisted, check the number of database records, and determine the existence of records based on criteria.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_55\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n$post = PostFactory::createOne();\n$post->_assertPersisted();\n$post->_assertNotPersisted();\n\nPostFactory::assert()->empty();\nPostFactory::assert()->count(3);\nPostFactory::assert()->countGreaterThan(3);\nPostFactory::assert()->countGreaterThanOrEqual(3);\nPostFactory::assert()->countLessThan(3);\nPostFactory::assert()->countLessThanOrEqual(3);\nPostFactory::assert()->exists(['title' => 'My Title']);\nPostFactory::assert()->notExists(['title' => 'My Title']);\n```\n\n----------------------------------------\n\nTITLE: Using Object Proxy (PHP)\nDESCRIPTION: Demonstrates the use of object proxies to access and manipulate Doctrine entities like Active Record. Explains methods to get the real object, set properties, save, refresh, and delete.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n$post = PostFactory::createOne(['title' => 'My Title']); // instance of Zenstruck\\Foundry\\Proxy\n\n// get the wrapped object\n$realPost = $post->_real(); // instance of Post\n\n// call any Post method\n$post->getTitle(); // \"My Title\"\n\n// set property and save to the database\n$post->setTitle('New Title');\n$post->_save();\n\n// refresh from the database\n$post->_refresh();\n\n// delete from the database\n$post->_delete();\n\n$post->_repository(); // repository proxy wrapping PostRepository (see Repository Proxy section below)\n```\n\n----------------------------------------\n\nTITLE: Using Factory without Proxy (PHP)\nDESCRIPTION: Explains how to create factories that directly return the 'real' object without wrapping it in a Proxy. This is achieved by inheriting from `PersistentObjectFactory` instead of `PersistentProxyObjectFactory`.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\nuse App\\Factory\\PostFactory;\n```\n\n----------------------------------------\n\nTITLE: Creating and Persisting Post Objects with PostFactory (PHP)\nDESCRIPTION: Demonstrates how to use the PostFactory to create and persist single and multiple Post objects, both with random data from the defaults() method and with specific property values. It also covers finding or creating objects, retrieving first/last objects, truncating tables, counting objects, and retrieving all objects.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n// create/persist Post with random data from `defaults()`\nPostFactory::createOne();\n\n// or provide values for some properties (others will be random)\nPostFactory::createOne(['title' => 'My Title']);\n\n// createOne() returns the persisted Post object wrapped in a Proxy object\n$post = PostFactory::createOne();\n\n// the \"Proxy\" magically calls the underlying Post methods and is type-hinted to \"Post\"\n$title = $post->getTitle(); // getTitle() can be autocompleted by your IDE!\n\n// if you need the actual Post object, use ->_real()\n$realPost = $post->_real();\n\n// create/persist 5 Posts with random data from defaults()\nPostFactory::createMany(5); // returns Post[]|Proxy[]\nPostFactory::createMany(5, ['title' => 'My Title']);\n\n// Create 5 posts with incremental title\nPostFactory::createMany(\n    5,\n    static function(int $i) {\n        return ['title' => \"Title $i\"]; // \"Title 1\", \"Title 2\", ... \"Title 5\"\n    }\n);\n\n// find a persisted object for the given attributes, if not found, create with the attributes\nPostFactory::findOrCreate(['title' => 'My Title']); // returns Post|Proxy\n\nPostFactory::first(); // get the first object (assumes an auto-incremented \"id\" column)\nPostFactory::first('createdAt'); // assuming \"createdAt\" is a datetime column, this will return latest object\nPostFactory::last(); // get the last object (assumes an auto-incremented \"id\" column)\nPostFactory::last('createdAt'); // assuming \"createdAt\" is a datetime column, this will return oldest object\n\nPostFactory::truncate(); // empty the database table\n\nPostFactory::count(); // the number of persisted Posts\nPostFactory::count(['category' => $category]); // the number of persisted Posts with the given category\n\nPostFactory::all(); // Post[]|Proxy[] all the persisted Posts\n\nPostFactory::findBy(['author' => 'kevin']); // Post[]|Proxy[] matching the filter\n\n$post = PostFactory::find(5); // Post|Proxy with the id of 5\n$post = PostFactory::find(['title' => 'My First Post']); // Post|Proxy matching the filter\n\n// get a random object that has been persisted\n$post = PostFactory::random(); // returns Post|Proxy\n$post = PostFactory::random(['author' => 'kevin']); // filter by the passed attributes\n\n// or automatically persist a new random object if none exists\n$post = PostFactory::randomOrCreate();\n$post = PostFactory::randomOrCreate(['author' => 'kevin']); // filter by or create with the passed attributes\n\n// get a random set of objects that have been persisted\n$posts = PostFactory::randomSet(4); // array containing 4 \"Post|Proxy\" objects\n$posts = PostFactory::randomSet(4, ['author' => 'kevin']); // filter by the passed attributes\n\n// random range of persisted objects\n$posts = PostFactory::randomRange(0, 5); // array containing 0-5 \"Post|Proxy\" objects\n$posts = PostFactory::randomRange(0, 5, ['author' => 'kevin']); // filter by the passed attributes\n```\n\n----------------------------------------\n\nTITLE: Creating Repository Proxies in PHP\nDESCRIPTION: Demonstrates how to create repository proxies using Zenstruck Foundry for interacting with database entities. Includes examples for both factory-created and manually specified repositories. The repository proxy provides helpful methods such as inner(), count(), first(), last(), truncate(), and random().\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_54\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Zenstruck\\Foundry\\Persistence\\repository;\n\n// instance of RepositoryProxy that wraps PostRepository\n$repository = PostFactory::repository();\n\n// alternative to above for proxying repository you haven't created factories for\n$repository = repository(Post::class);\n\n// helpful methods - all returned object(s) are proxied\n$repository->inner(); // the real \"wrapped\" repository\n$repository->count(); // number of rows in the database table\ncount($repository); // equivalent to above (RepositoryProxy implements \\Countable)\n$repository->first(); // get the first object (assumes an auto-incremented \"id\" column)\n$repository->first('createdAt'); // assuming \"createdAt\" is a datetime column, this will return latest object\n$repository->last(); // get the last object (assumes an auto-incremented \"id\" column)\n$repository->last('createdAt'); // assuming \"createdAt\" is a datetime column, this will return oldest object\n$repository->truncate(); // delete all rows in the database table\n$repository->random(); // get a random object\n$repository->random(['author' => 'kevin']); // get a random object filtered by the passed criteria\n$repository->randomSet(5); // get 5 random objects\n$repository->randomSet(5, ['author' => 'kevin']); // get 5 random objects filtered by the passed criteria\n$repository->randomRange(0, 5); // get 0-5 random objects\n$repository->randomRange(0, 5, ['author' => 'kevin']); // get 0-5 random objects filtered by the passed criteria\n\n// instance of ObjectRepository - all returned object(s) are proxied\n$repository->find(1); // Proxy|Post|null\n$repository->find(['title' => 'My Title']); // Proxy|Post|null\n$repository->findOneBy(['title' => 'My Title']); // Proxy|Post|null\n$repository->findAll(); // Proxy[]|Post[]\niterator_to_array($repository); // equivalent to above (RepositoryProxy implements \\IteratorAggregate)\n$repository->findBy(['title' => 'My Title']); // Proxy[]|Post[]\n\n// can call methods on the underlying repository - returned object(s) are proxied\n$repository->findOneByTitle('My Title'); // Proxy|Post|null\n```\n\n----------------------------------------\n\nTITLE: Custom Instantiator - PHP\nDESCRIPTION: This code demonstrates how to customize object instantiation within a factory using the instantiateWith() method. This allows you to control how objects are created and hydrated, including using named constructors, callables, or ignoring the constructor altogether. Several instantiation options are displayed including disabling the constructor, allowing extra attributes, forcing attributes to be set or defining a custom callable.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\nuse App\\Factory\\PostFactory;\nuse Zenstruck\\Foundry\\Object\\Instantiator;\n\n// set the instantiator for the current factory\nPostFactory::new()\n    // instantiate the object without calling the constructor\n    ->instantiateWith(Instantiator::withoutConstructor())\n\n    // \"foo\" and \"bar\" attributes are ignored when instantiating\n    ->instantiateWith(Instantiator::withConstructor()->allowExtra('foo', 'bar'))\n\n    // all extra attributes are ignored when instantiating\n    ->instantiateWith(Instantiator::withConstructor()->allowExtra())\n\n    // force set \"title\" and \"body\" when instantiating\n    ->instantiateWith(Instantiator::withConstructor()->alwaysForce(['title', 'body']))\n\n    // never use setters, always \"force set\" properties (even private/protected, does not use setter)\n    ->instantiateWith(Instantiator::withConstructor()->alwaysForce())\n\n    // can combine the different \"modes\"\n    ->instantiateWith(Instantiator::withoutConstructor()->allowExtra()->alwaysForce())\n\n    // use a \"namedConstructor\"\n    ->instantiateWith(Instantiator::namedConstructor(\"methodName\"))\n\n    // use a callable: it will be passed the attributes matching its parameters names,\n    // remaining attributes will be used in the hydration phase\n    ->instantiateWith(Instantiator::use(function(string $title): object {\n        return new Post($title); // ... your own instantiation logic\n    }))\n;\n```\n\n----------------------------------------\n\nTITLE: Factory Hooks - PHP\nDESCRIPTION: This example demonstrates how to use beforeInstantiate, afterInstantiate and afterPersist hooks within a factory. The beforeInstantiate hook allows modifying parameters before object instantiation. The afterInstantiate hook allows operating on the created object after instantiation, and the afterPersist hook allows operating on the persisted object after it has been persisted to the database.  Each hook receives the parameters, the instantiated object (where applicable), and the factory instance.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\nuse Zenstruck\\Foundry\\Proxy;\n\nPostFactory::new()\n    ->beforeInstantiate(function(array $parameters, string $class, static $factory): array {\n        // $parameters is what will be used to instantiate the object, manipulate as required\n        // $class is the class of the object being instantiated\n        // $factory is the factory instance which creates the object\n        $parameters['title'] = 'Different title';\n\n        return $parameters; // must return the final $parameters\n    })\n    ->afterInstantiate(function(Post $object, array $parameters, static $factory): void {\n        // $object is the instantiated object\n        // $parameters contains the attributes used to instantiate the object and any extras\n        // $factory is the factory instance which creates the object\n    })\n    ->afterPersist(function(Post $object, array $parameters, static $factory) {\n        // this event is only called if the object was persisted\n        // $object is the persisted Post object\n        // $parameters contains the attributes used to instantiate the object and any extras\n        // $factory is the factory instance which creates the object\n    })\n\n    // multiple events are allowed\n    ->beforeInstantiate(function($parameters) { return $parameters; })\n    ->afterInstantiate(function() {})\n    ->afterPersist(function() {})\n;\n```\n\n----------------------------------------\n\nTITLE: Zenstruck Foundry Bundle Configuration Migration\nDESCRIPTION: This diff illustrates the changes required in the Zenstruck Foundry bundle configuration file. It highlights the deprecated configurations in red and the new configurations in green. The instantiator configuration has changed from `without_constructor: false` to `use_constructor: true`. New sections for `orm` and `mongo` have been added for auto-persistence and reset configurations. The `database_resetter` section has been removed and its functionalities are now incorporated into the `orm` and `mongo` sections.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nzenstruck_foundry:\n-    auto_refresh_proxies: null\n    instantiator:\n-        without_constructor:  false\n+        use_constructor:  true\n+    orm:\n+        auto_persist:         true\n+        reset:\n+            connections: [default]\n+            entity_managers: [default]\n+            mode: schema\n+    mongo:\n+        auto_persist:         true\n+        reset:\n+            document_managers: [default]\n-    database_resetter:\n-        enabled:              true\n-        orm:\n-            connections:          []\n-            object_managers:      []\n-            reset_mode:           schema\n-        odm:\n-            object_managers:      []\n```\n\n----------------------------------------\n\nTITLE: Generated PostFactory Class (PHP)\nDESCRIPTION: The generated PostFactory class provides methods for creating and managing Post entity instances. It extends PersistentProxyObjectFactory, defining default values for properties like createdAt and title using Faker. The class also includes stubs for customization through the initialize method.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Factory/PostFactory.php\nnamespace App\\Factory;\n\nuse App\\Entity\\Post;\nuse App\\Repository\\PostRepository;\nuse Zenstruck\\Foundry\\Persistence\\PersistentProxyObjectFactory;\nuse Zenstruck\\Foundry\\Persistence\\Proxy;\nuse Zenstruck\\Foundry\\Persistence\\ProxyRepositoryDecorator;\n\n/**\n * @extends PersistentProxyObjectFactory<Post>\n */\nfinal class PostFactory extends PersistentProxyObjectFactory\n{\n    /**\n     * @see https://symfony.com/bundles/ZenstruckFoundryBundle/current/index.html#factories-as-services\n     *\n     * @todo inject services if required\n     */\n    public function __construct()\n    {\n    }\n\n    public static function class(): string\n    {\n        return Post::class;\n    }\n\n    /**\n     * @see https://symfony.com/bundles/ZenstruckFoundryBundle/current/index.html#factories\n     *\n     * @todo add your default values here\n     */\n    protected function defaults(): array|callable\n    {\n        return [\n            'createdAt' => \\DateTimeImmutable::createFromMutable(self::faker()->dateTime()),\n            'title' => self::faker()->text(255),\n        ];\n    }\n\n    /**\n     * @see https://symfony.com/bundles/ZenstruckFoundryBundle/current/index.html#initialization\n     */\n    protected function initialize(): static\n    {\n        return $this\n            // ->afterInstantiate(function(Post $post): void {})\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Default Zenstruck Foundry Bundle Configuration in YAML\nDESCRIPTION: This YAML configuration shows the full default configuration options for the Zenstruck Foundry bundle.  This includes settings for the Faker, Instantiator, ORM/Mongo resetting, global state, and generation configurations for factories and stories.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_82\n\nLANGUAGE: YAML\nCODE:\n```\nzenstruck_foundry:\n\n    # Configure faker to be used by your factories.\n    faker:\n\n        # Change the default faker locale.\n        locale:               null # Example: fr_FR\n\n        # Customize the faker service.\n        service:              null # Example: my_faker\n\n    # Configure the default instantiator used by your factories.\n    instantiator:\n\n        # Use the constructor to instantiate objects.\n        use_constructor:      ~\n\n        # Whether or not to allow extra attributes.\n        allow_extra_attributes: false\n\n        # Whether or not to skip setters and force set object properties (public/private/protected) directly.\n        always_force_properties: false\n\n        # Customize the instantiator service.\n        service:              null # Example: my_instantiator\n    orm:\n        reset:\n\n            # DBAL connections to reset with ResetDatabase trait\n            connections:\n\n                # Default:\n                - default\n\n            # Entity Managers to reset with ResetDatabase trait\n            entity_managers:\n\n                # Default:\n                - default\n\n            # Reset mode to use with ResetDatabase trait\n            mode:                 schema # One of \"schema\"; \"migrate\"\n            migrations:\n\n                # Migration configurations\n                configurations:       []\n\n    mongo:\n        reset:\n\n            # Document Managers to reset with ResetDatabase trait\n            document_managers:\n\n                # Default:\n                - default\n\n    # Array of stories that should be used as global state.\n    global_state:         []\n\n    make_factory:\n\n        # Default namespace where factories will be created by maker.\n        default_namespace:    Factory\n\n        # Add \"beginner\" hints in the created factory.\n        add_hints:    true\n    make_story:\n\n        # Default namespace where stories will be created by maker.\n        default_namespace:    Story\n```\n\n----------------------------------------\n\nTITLE: Story as Service (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to define a Foundry story as a service, injecting dependencies into the story's constructor.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n// src/Story/PostStory.php\nnamespace App\\Story;\n\nuse App\\Factory\\PostFactory;\nuse App\\Service\\MyService;\nuse Zenstruck\\Foundry\\Story;\n\nfinal class PostStory extends Story\n{\n    public function __construct(\n        private MyService $myService,\n    ) {\n    }\n\n    public function build(): void\n    {\n        // $this->myService can be used here to help build this story\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Attributes for PostFactory (PHP)\nDESCRIPTION: Demonstrates how to override default attribute values when creating Post objects using the `new()` and `with()` methods. Attributes can be provided as arrays or callables, allowing for dynamic and random data generation.  This example also shows how Factory relationships are handled.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Category;\nuse App\\Entity\\Post;\nuse App\\Factory\\CategoryFactory;\nuse App\\Factory\\PostFactory;\nuse function Zenstruck\\Foundry\\faker;\n\n// The first argument to \"new()\" allows you to overwrite the default\n// values that are defined in the `PostFactory::defaults()`\n$posts = PostFactory::new(['title' => 'Post A'])\n    ->with([\n        'body' => 'Post Body...',\n\n        // CategoryFactory will be used to create a new Category for each Post\n        'category' => CategoryFactory::new(['name' => 'php']),\n    ])\n    ->with([\n        // Proxies are automatically converted to their wrapped object\n        // will override previous category\n        'category' => CategoryFactory::createOne(['name' => 'Symfony']),\n    ])\n    ->with(function() { return ['createdAt' => faker()->dateTime()]; }) // see faker section below\n\n    // create \"2\" Post's\n    ->many(2)->create(['title' => 'Different Title'])\n;\n```\n\n----------------------------------------\n\nTITLE: Create Posts with Tags (Many-to-Many)\nDESCRIPTION: Illustrates creating Posts with multiple Tags using the `tags` attribute and `TagFactory`. It showcases creating posts with pre-created tags, creating posts with random sets or ranges of tags, and creating multiple posts with unique tags.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\nuse App\\Factory\\TagFactory;\n\n// Example 1: pre-create Tags and attach to Post\n$tags = TagFactory::createMany(3);\n\nPostFactory::createOne(['tags' => $tags]);\n\n// Example 2: pre-create Tags and choose a random set\nTagFactory::createMany(10);\n\nPostFactory::new()\n    ->many(5) // create 5 posts\n    ->create(function() { // note the callback - this ensures that each of the 5 posts has a different random set\n        return ['tags' => TagFactory::randomSet(2)]; // each post uses 2 random tags from those already in the database\n    })\n;\n\n// Example 3: pre-create Tags and choose a random range\nTagFactory::createMany(10);\n\nPostFactory::new()\n    ->many(5) // create 5 posts\n    ->create(function() { // note the callback - this ensures that each of the 5 posts has a different random range\n        return ['tags' => TagFactory::randomRange(0, 5)]; // each post uses between 0 and 5 random tags from those already in the database\n    })\n;\n\n// Example 4: create 3 Posts each with 3 unique Tags\nPostFactory::createMany(3, ['tags' => TagFactory::new()->many(3)]);\n\n// Example 5: create 3 Posts each with between 0 and 3 unique Tags\nPostFactory::createMany(3, ['tags' => TagFactory::new()->many(0, 3)]);\n```\n\n----------------------------------------\n\nTITLE: Anonymous Factories\nDESCRIPTION: Demonstrates creating factories for entities without explicitly defining a factory class. It uses `proxy_factory` function and shows how to access stored data using the `repository()` helper. It illustrates the usage of methods like create, many, instantiateWith, beforeInstantiate, afterInstantiate and afterPersist.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\nuse function Zenstruck\\Foundry\\Persistence\\persist_proxy;\nuse function Zenstruck\\Foundry\\Persistence\\proxy_factory;\nuse function Zenstruck\\Foundry\\Persistence\\repository;\n\n$factory = proxy_factory(Post::class);\n\n// has the same API as non-anonymous factories\n$factory->create(['field' => 'value']);\n$factory->many(5)->create(['field' => 'value']);\n$factory->instantiateWith(function () {});\n$factory->beforeInstantiate(function () {});\n$factory->afterInstantiate(function () {});\n$factory->afterPersist(function () {});\n\n// in order to access stored data, use `repository()` helper:\n$repository = repository(Post::class);\n\n$repository->first(); // get the first object (assumes an auto-incremented \"id\" column)\n$repository->first('createdAt'); // assuming \"createdAt\" is a datetime column, this will return latest object\n```\n\n----------------------------------------\n\nTITLE: Sample Post Entity Definition (PHP)\nDESCRIPTION: Defines a Post entity with attributes such as ID, body, createdAt, publishedAt, category and title. It uses Doctrine ORM annotations to map the class to a database table and specifies the repository class. The constructor initializes the title and creation timestamp.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Entity;\n\nuse App\\Repository\\PostRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity(repositoryClass: PostRepository::class)]\nclass Post\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'int')]\n    private ?int $id = null;\n\n    #[ORM\\Column(type: 'text', nullable: true)]\n    private ?string $body = null;\n\n    #[ORM\\Column(type: 'datetime_immutable')]\n    private \\DateTimeImmutable $createdAt;\n\n    #[ORM\\Column(type: 'datetime_immutable', nullable: true)]\n    private ?\\DateTimeImmutable $publishedAt = null;\n\n    #[ORM\\ManyToOne]\n    private ?Category $category = null;\n\n    public function __construct(\n        #[ORM\\Column]\n        private string $title\n    )\n    {\n        $this->title = $title;\n        $this->createdAt = new \\DateTimeImmutable('now');\n    }\n\n    // ... getters/setters\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Database Reset Mechanism with Decorators (PHP)\nDESCRIPTION: Demonstrates how to extend the database reset mechanism using Symfony's service decoration feature. This allows for custom actions to be performed before or after the default database reset process. The resetter is decorated in the 'test' environment.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsDecorator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\When;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Zenstruck\\Foundry\\ORM\\ResetDatabase\\OrmResetter;\n\n// The decorator should be declared in test environment only.\n#[When('test')]\n// You can also decorate `MongoResetter::class`.\n#[AsDecorator(OrmResetter::class)]\nfinal readonly class DecorateDatabaseResetter implements OrmResetter\n{\n    public function __construct(\n        private OrmResetter $decorated\n    ) {}\n\n    public function resetBeforeFirstTest(KernelInterface $kernel): void\n    {\n        // do something once per test suite (for instance: install a PostgreSQL extension)\n\n        $this->decorated->resetBeforeFirstTest($kernel);\n    }\n\n    public function resetBeforeEachTest(KernelInterface $kernel): void\n    {\n        // do something once per test case (for instance: restart PostgreSQL sequences)\n\n        $this->decorated->resetBeforeEachTest($kernel);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Values\nDESCRIPTION: Shows how to use `LazyValue` to defer the calculation of attribute values in a factory. This is useful for values that have side effects or that should only be calculated once. The example shows how to create lazy values for both creating random categories and ensuring the same user is used for both a project and a task's owner.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Zenstruck\\Foundry\\Attributes\\LazyValue;\n\nclass TaskFactory extends PersistentProxyObjectFactory\n{\n    // ...\n\n    protected function defaults(): array\n    {\n        $owner = LazyValue::memoize(fn() => UserFactory::createOne());\n\n        return [\n            // Call CategoryFactory::random() everytime this factory is instantiated\n            'category' => LazyValue::new(fn() => CategoryFactory::random()),\n            // The same User instance will be both added to the Project and set as the Task owner\n            'project' => ProjectFactory::new(['users' => [$owner]]),\n            'owner'   => $owner,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Distributing Values Over a Collection with PostFactory (PHP)\nDESCRIPTION: Shows how to distribute values from a collection (e.g., categories) over a set of objects created by a factory using the `distribute()` method. Each object will receive a value from the provided collection, ensuring an even distribution of attributes.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// let's say we have 2 categories...\n$categories = CategoryFactory::createSequence(\n    [\n        ['name' => 'category 1'],\n        ['name' => 'category 2'],\n    ]\n);\n\n// ...that we want to \"distribute\" over 2 posts\n$posts = PostFactory::new()\n    ->sequence(\n        [\n            ['name' => 'post 1'],\n            ['name' => 'post 2'],\n        ]\n    )\n\n    // \"post 1\" will have \"category 1\" and \"post 2\" will have \"category 2\"\n    ->distribute('category', $categories)\n\n    // you can even chain \"distribute()\" methods:\n    // first post is published today, second post is published tomorrow\n    ->distribute('publishedAt', [new \\DateTimeImmutable('today'), new \\DateTimeImmutable('tomorrow')])\n\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: Bootstrap for Disabling Debug Mode in Tests (PHP)\nDESCRIPTION: This PHP snippet checks if the `APP_DEBUG` environment variable is set to false and `TEST_TOKEN` is null. If both are true, the test cache directory is removed to ensure a fresh cache when debug mode is disabled, particularly in Paratest environments. The check for `TEST_TOKEN` ensures this only runs once at the start.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n// tests/bootstrap.php\n// ...\nif (false === (bool) $_SERVER['APP_DEBUG'] && null === ($_SERVER['TEST_TOKEN'] ?? null)) {\n    /*\n     * Ensure a fresh cache when debug mode is disabled. When using paratest, this\n     * file is required once at the very beginning, and once per process. Checking that\n     * TEST_TOKEN is not set ensures this is only run once at the beginning.\n     */\n    (new Filesystem())->remove(__DIR__.'/../var/cache/test');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Story Pools with ProvinceStory in PHP\nDESCRIPTION: This code defines a ProvinceStory class extending Zenstruck\\Foundry\\Story to create and manage pools of Province objects using ProvinceFactory. It demonstrates adding multiple provinces to a pool, as well as adding a single object to both a pool and a specific state.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_77\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Story/ProvinceStory.php\nnamespace App\\Story;\n\nuse App\\Factory\\ProvinceFactory;\nuse Zenstruck\\Foundry\\Story;\n\nfinal class ProvinceStory extends Story\n{\n    public function build(): void\n    {\n        // add collection to a \"pool\"\n        $this->addToPool('be', ProvinceFactory::createMany(5, ['country' => 'BE']));\n\n        // equivalent to above\n        $this->addToPool('be', ProvinceFactory::new(['country' => 'BE'])->many(5));\n\n        // add single object to a pool\n        $this->addToPool('be', ProvinceFactory::createOne(['country' => 'BE']));\n\n        // add single object to single pool and make available as \"state\"\n        $this->addState('be-1', ProvinceFactory::createOne(['country' => 'BE']), 'be');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Objects Without Persisting (PHP)\nDESCRIPTION: Demonstrates how to create objects using persistent factories without persisting them initially. Includes examples for creating single objects, accessing the underlying object, and creating multiple objects.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Entity\\Post;\nuse App\\Factory\\PostFactory;\nuse function Zenstruck\\Foundry\\object;\nuse function Zenstruck\\Foundry\\Persistence\\proxy_factory;\n\n$post = PostFactory::new()->withoutPersisting()->create(); // returns Post|Proxy\n$post->setTitle('something else'); // do something with object\n$post->_save(); // persist the Post (save() is a method on Proxy)\n\n$post = PostFactory::new()->withoutPersisting()->create()->object(); // actual Post object\n\n$posts = PostFactory::new()->withoutPersisting()->many(5)->create(); // returns Post[]|Proxy[]\n\n// anonymous factories:\n$factory = proxy_factory(Post::class);\n\n$entity = $factory->withoutPersisting()->create(['field' => 'value']); // returns Post|Proxy\n\n$entity = $factory->withoutPersisting()->create(['field' => 'value'])->object(); // actual Post object\n\n$entities = $factory->withoutPersisting()->many(5)->create(['field' => 'value']); // returns Post[]|Proxy[]\n\n// convenience functions\n$entity = object(Post::class, ['field' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Forcing Property Value - PHP\nDESCRIPTION: This code demonstrates using the `force()` helper function to bypass setters and directly set a property's value during object creation. This is useful for temporarily overriding setter behavior or setting properties that don't have setters.  The constructor behavior can be disabled as well.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\nuse function Zenstruck\\Foundry\\force;\n\n// in this case, the \"body\" attribute will be set directly, without using the setter\nPostFactory::createOne(['body' => force('some body')]) ;\n\n// in this case, the \"title\" attribute will still be used in the constructor (otherwise an error would be thrown)\nPostFactory::createOne(['title' => force('some title')]) ;\n// ...unless we disable the constructor:\nPostFactory::new()\n    ->instantiateWith(Instantiator::withoutConstructor())\n    ->create(['title' => force('some title')]) ;\n```\n\n----------------------------------------\n\nTITLE: Non-Kernel Test Example (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to use Foundry in a standard PHPUnit test (not extending KernelTestCase). It shows how to configure Foundry manually when the bundle configuration isn't available, as well as showcasing that Factories are not persisted automatically.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\nuse PHPUnit\\Framework\\TestCase;\nuse Zenstruck\\Foundry\\Test\\Factories;\n\nclass MyUnitTest extends TestCase\n{\n    use Factories;\n\n    public function some_test(): void\n    {\n        $post = PostFactory::createOne();\n\n        // $post is not persisted to the database\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Instantiator Configuration - YAML\nDESCRIPTION: This YAML configuration shows how to globally configure the instantiator for all factories within the zenstruck_foundry configuration. This allows setting default instantiation behavior, such as disabling the constructor or ignoring extra attributes. A service can also be provided to fully control instantiation. This should be limited to the dev environment.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@dev: # see Bundle Configuration section about sharing this in the test environment\n    zenstruck_foundry:\n        instantiator:\n            use_constructor: false # always instantiate objects without calling the constructor\n            allow_extra_attributes: true # always ignore extra attributes\n            always_force_properties: true # always \"force set\" properties\n            # or\n            service: my_instantiator # your own invokable service for complete control\n```\n\n----------------------------------------\n\nTITLE: Factories as Services\nDESCRIPTION: Demonstrates how to define a factory as a service and inject dependencies. This example uses `UserPasswordHasherInterface` to encode passwords. It shows how to define the constructor, defaults, and initialize methods for the factory.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// src/Factory/UserFactory.php\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n\nfinal class UserFactory extends PersistentProxyObjectFactory\n{\n    // the injected service should be nullable in order to be used in unit test, without container\n    public function __construct(\n        private ?UserPasswordHasherInterface $passwordHasher = null\n    ) {\n        parent::__construct();\n    }\n\n    public static function class(): string\n    {\n        return User::class;\n    }\n\n    protected function defaults(): array\n    {\n        return [\n            'email' => self::faker()->unique()->safeEmail(),\n            'password' => '1234',\n        ];\n    }\n\n    protected function initialize(): static\n    {\n        return $this\n            ->afterInstantiate(function(User $user) {\n                if ($this->passwordHasher !== null) {\n                    $user->setPassword($this->passwordHasher->hashPassword($user, $user->getPassword()));\n                }\n            })\n        ;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nUserFactory::createOne(['password' => 'mypass'])->getPassword(); // \"mypass\" encoded\nUserFactory::createOne()->getPassword(); // \"1234\" encoded (because \"1234\" is set as the default password)\n```\n\n----------------------------------------\n\nTITLE: Doctrine Many-to-One Relationship - PHP\nDESCRIPTION: This code demonstrates how to handle Doctrine Many-to-One relationships in factories.  It shows how to create and associate a `Post` with a `Comment` using different methods, like pre-creating the `Post`, selecting a random `Post`, or creating multiple `Comment` entities with a random `Post` each.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\CommentFactory;\nuse App\\Factory\\PostFactory;\n\n// Example 1: pre-create Post and attach to Comment\n$post = PostFactory::createOne(); // instance of Proxy\n\nCommentFactory::createOne(['post' => $post]);\nCommentFactory::createOne(['post' => $post->_real()]); // functionally the same as above\n\n// Example 2: pre-create Posts and choose a random one\nPostFactory::createMany(5); // create 5 Posts\n\nCommentFactory::createOne(['post' => PostFactory::random()]);\n\n// or create many, each with a different random Post\nCommentFactory::createMany(\n    5, // create 5 comments\n```\n\n----------------------------------------\n\nTITLE: Handling Unsaved Changes Exception with Auto-Refresh (PHP)\nDESCRIPTION: Explains how to avoid the 'unsaved changes' exception when using auto-refresh and modifying object state with multiple method calls. Uses _disableAutoRefresh and _enableAutoRefresh or _withoutAutoRefresh.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\nuse App\\Factory\\PostFactory;\n\n$post = PostFactory::new(['title' => 'Original Title', 'body' => 'Original Body'])\n    ->create()\n    ->_enableAutoRefresh()\n;\n\n$post->_disableAutoRefresh();\n$post->setTitle('New Title'); // or using ->forceSet('title', 'New Title')\n$post->setBody('New Body'); // or using ->forceSet('body', 'New Body')\n$post->_enableAutoRefresh();\n$post->_save();\n\n$post->getBody(); // \"New Body\"\n$post->getTitle(); // \"New Title\"\n\n// alternatively, use the ->_withoutAutoRefresh() helper which first disables auto-refreshing, then re-enables after\n// executing the callback.\n$post->_withoutAutoRefresh(function (Post $post) { // can pass either Post or Proxy to the callback\n    $post->setTitle('New Title');\n    $post->setBody('New Body');\n});\n$post->_save();\n```\n\n----------------------------------------\n\nTITLE: Defining relationship defaults for Comments\nDESCRIPTION: Defines different ways to specify the 'post' attribute (a PostFactory instance) in the default attributes of a CommentFactory. Demonstrates creating new PostFactory instances, creating single posts, and using lazy values for deferred post creation.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nprotected function defaults(): array\n{\n    return [\n        // RECOMMENDED\n        // The Post will only be created when the factory is instantiated\n        'post' => PostFactory::new(),\n        'post' => PostFactory::new()->published(),\n        // The callback will be called when the factory is instantiated, creating the Post\n        'post' => LazyValue::new(fn () => PostFactory::createOne()),\n        'post' => lazy(fn () => PostFactory::new()->published()->create()),\n\n        // NOT RECOMMENDED\n        // Will potentially result in extra unintended Posts (if you override the value during instantiation)\n        'post' => PostFactory::createOne(),\n        'post' => PostFactory::new()->published()->create(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using with DoctrineFixturesBundle (PHP)\nDESCRIPTION: Demonstrates how to use Zenstruck Foundry factories and stories within Doctrine Fixtures. Includes creating multiple categories, tags, and posts with relationships.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\n// src/DataFixtures/AppFixtures.php\nnamespace App\\DataFixtures;\n\nuse App\\Factory\\CategoryFactory;\nuse App\\Factory\\CommentFactory;\nuse App\\Factory\\PostFactory;\nuse App\\Factory\\TagFactory;\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Persistence\\ObjectManager;\n\nclass AppFixtures extends Fixture\n{\n    public function load(ObjectManager $manager)\n    {\n        // create 10 Category's\n        CategoryFactory::createMany(10);\n\n        // create 20 Tag's\n        TagFactory::createMany(20);\n\n        // create 50 Post's\n        PostFactory::createMany(50, function() {\n            return [\n                // each Post will have a random Category (chosen from those created above)\n                'category' => CategoryFactory::random(),\n\n                // each Post will have between 0 and 6 Tag's (chosen from those created above)\n                'tags' => TagFactory::randomRange(0, 6),\n\n                // each Post will have between 0 and 10 Comment's that are created new\n                'comments' => CommentFactory::new()->range(0, 10),\n            ];\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Initialization - PHP\nDESCRIPTION: This example shows how to override the initialize() method in a factory to add default state and logic. Within this method, you can configure default states, custom instantiation logic, and default event handlers. This pattern encapsulates common factory setup logic within the factory class itself. This example shows how to set default states and add an afterPersist hook.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfinal class PostFactory extends PersistentProxyObjectFactory\n{\n    // ...\n\n    protected function initialize(): static\n    {\n        return $this\n            ->published() // published by default\n            ->instantiateWith(function (array $attributes) {\n                return new Post(); // custom instantiation for this factory\n            })\n            ->afterPersist(function () {}) // default event for this factory\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence of Objects with PostFactory (PHP)\nDESCRIPTION: Explains how to use sequences to create multiple objects with varying attributes in a single call. Sequences can be defined as arrays of attribute sets or as a callable that yields attribute sets.  Demonstrates sequences with states as well.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n// create/persist 2 posts based on a sequence of attributes\nPostFactory::createSequence(\n    [\n        ['name' => 'title 1'],\n        ['name' => 'title 2'],\n    ]\n);\n\n// create 10 posts using a sequence callback with an incremental index\nPostFactory::createSequence(\n    function() {\n        foreach (range(1, 10) as $i) {\n            yield ['name' => \"title $i\"];\n        }\n    }\n);\n\n// sequences could also be used with a factory with states\n$posts = PostFactory::new()\n    ->unpublished()\n    ->sequence(\n        [\n            ['name' => 'title 1'],\n            ['name' => 'title 2'],\n        ]\n    )->create();\n```\n\n----------------------------------------\n\nTITLE: Defining Factory States for PostFactory (PHP)\nDESCRIPTION: Shows how to define custom states within a factory to create objects with specific characteristics. These states can be chained to create complex object configurations, improving test readability and maintainability. States are methods returning `$this->with([...])`.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfinal class PostFactory extends PersistentProxyObjectFactory\n{\n    // ...\n\n    public function published(): self\n    {\n        // call setPublishedAt() and pass a random DateTime\n        return $this->with(['published_at' => self::faker()->dateTime()]);\n    }\n\n    public function unpublished(): self\n    {\n        return $this->with(['published_at' => null]);\n    }\n\n    public function withViewCount(?int $count = null): self\n    {\n        return $this->with(function () use ($count) {\n            return ['view_count' => $count ?? self::faker()->numberBetween(0, 10000)];\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Post Story Build Method (PHP)\nDESCRIPTION: This PHP snippet shows the `build` method of a Foundry story, defining the creation and relationships of multiple factories (Category, Tag, Post) and using `random()` and `randomRange()` functions.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n// src/Story/PostStory.php\nnamespace App\\Story;\n\nuse App\\Factory\\CategoryFactory;\nuse App\\Factory\\PostFactory;\nuse App\\Factory\\TagFactory;\nuse Zenstruck\\Foundry\\Story;\n\nfinal class PostStory extends Story\n{\n    public function build(): void\n    {\n        // create 10 Category's\n        CategoryFactory::createMany(10);\n\n        // create 20 Tag's\n        TagFactory::createMany(20);\n\n        // create 50 Post's\n        PostFactory::createMany(50, function() {\n            return [\n                // each Post will have a random Category (created above)\n                'category' => CategoryFactory::random(),\n\n                // each Post will between 0 and 6 Tag's (created above)\n                'tags' => TagFactory::randomRange(0, 6),\n            ];\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Data Provider without Foundry Extension\nDESCRIPTION: Demonstrates how to use factories in PHPUnit data providers when the Foundry extension is not enabled. The data provider returns instances of `Factory`, and the `create()` method is called within the test.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_58\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n/**\n * @dataProvider postDataProvider\n */\npublic function test_post_via_data_provider(PostFactory $factory): void\n{\n    $post = $factory->create();\n\n    // ...\n}\n\npublic static function postDataProvider(): iterable\n{\n    yield [PostFactory::new()];\n    yield [PostFactory::new()->published()];\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Immutability - PHP\nDESCRIPTION: This example illustrates that factories are immutable. Each method call that modifies a factory's configuration returns a new factory instance rather than modifying the original one. The factory is cloned instead of mutated when any method on the factory is called.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n$factory = PostFactory::new();\n$factory1 = $factory->with([]); // returns a new PostFactory object\n$factory2 = $factory->instantiateWith(function () {}); // returns a new PostFactory object\n$factory3 = $factory->beforeInstantiate(function () {}); // returns a new PostFactory object\n$factory4 = $factory->afterInstantiate(function () {}); // returns a new PostFactory object\n$factory5 = $factory->afterPersist(function () {}); // returns a new PostFactory object\n```\n\n----------------------------------------\n\nTITLE: Setting Doctrine object-manager path in Rector config\nDESCRIPTION: This configures Rector to use the `tests/object-manager.php` file to resolve Doctrine persistence information. This is needed for projects that define Doctrine mappings in XML, YAML, or PHP configuration files.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rector\\Config\\RectorConfig;\nuse Zenstruck\\Foundry\\Utils\\Rector\\PersistenceResolver;\nuse Zenstruck\\Foundry\\Utils\\Rector\\FoundrySetList;\n\nreturn static function (RectorConfig $rectorConfig): void {\n    $rectorConfig->paths(['tests']); // add all paths where Foundry is used\n    $rectorConfig->sets([FoundrySetList::UP_TO_FOUNDRY_2]);\n    $rectorConfig->singleton(\n        PersistenceResolver::class,\n        static fn() => new PersistenceResolver(__DIR__ . '/tests/object-manager.php')\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Faker Service - YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to register a custom Faker\\Generator service within the zenstruck_foundry configuration.  This allows you to use your own Faker instance with custom providers or configurations instead of the default Foundry Faker instance. Ensure this configuration is only active in the dev environment to avoid unexpected behavior in production.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@dev: # see Bundle Configuration section about sharing this in the test environment\n    zenstruck_foundry:\n        faker:\n            service: my_faker # service id for your own instance of Faker\\Generator\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Object with Foundry in PHP\nDESCRIPTION: This code snippet demonstrates how to use Zenstruck Foundry to create and persist a `Post` object. It utilizes the `PostFactory` to define the object's state and attributes, setting a specific `slug` while randomizing other fields.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$post = PostFactory::new() // Create the factory for Post objects\n    ->published()          // Make the post in a \"published\" state\n    ->create([             // create & persist the Post object\n        'slug' => 'post-a' // This Post object only requires the slug field - all other fields are random data\n    ])\n;\n```\n\n----------------------------------------\n\nTITLE: Zenstruck Foundry Bundle Configuration in YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure Zenstruck Foundry within a Symfony application, specifically targeting the `dev` and `test` environments using YAML anchors. It covers faker configuration, instantiator settings, ORM and MongoDB reset configurations, global stories, and maker configurations for factories and stories.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_81\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@dev: &dev\n    zenstruck_foundry:\n        # ... put all your config here\n\nwhen@test: *dev # \"copies\" the config from above\n```\n\n----------------------------------------\n\nTITLE: Auto-refresh problem mitigation with _withoutAutoRefresh()\nDESCRIPTION: This code snippet demonstrates how to wrap modifications to proxy objects within the `_withoutAutoRefresh()` method to prevent `RefreshObjectFailed` errors caused by accessing the proxy after modification. This ensures consistency and avoids unintended auto-refresh behavior.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$proxyPost = PostProxyFactory::createOne();\n-$proxyPost->setTitle();\n-$proxyPost->setBody(); // 💥\n+$proxyPost->_withoutAutoRefresh(\n+   function(Post $object) {\n+       $proxyPost->setTitle();\n+       $proxyPost->setBody();\n+   }\n+);\n```\n\n----------------------------------------\n\nTITLE: Using Factory States to Create Post Objects (PHP)\nDESCRIPTION: Illustrates how to use defined factory states to create and persist Post objects with specific properties.  The `new()` method initializes the factory, and states can be chained before calling `create()` to persist the model with the specified states.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// never use the constructor (i.e. \"new PostFactory()\"), but use the\n// \"new()\" method. After defining the states, call \"create()\" to create\n// and persist the model.\n$post = PostFactory::new()->unpublished()->create();\n$post = PostFactory::new()->withViewCount(3)->create();\n\n// combine multiple states\n$post = PostFactory::new()\n    ->unpublished()\n    ->withViewCount(10)\n    ->create()\n;\n```\n\n----------------------------------------\n\nTITLE: Security Encoder Configuration for Tests (YAML)\nDESCRIPTION: This YAML snippet configures the password encoders for testing, setting the `cost`, `time_cost`, and `memory_cost` parameters to their lowest possible values. This significantly speeds up password encoding during tests that involve user authentication.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/test/security.yaml\nencoders:\n    # use your user class name here\n    App\\Entity\\User:\n        # This should be the same value as in config/packages/security.yaml\n        algorithm: auto\n        cost: 4 # Lowest possible value for bcrypt\n        time_cost: 3 # Lowest possible value for argon\n        memory_cost: 10 # Lowest possible value for argon\n```\n\n----------------------------------------\n\nTITLE: User Factory with Pre-encoded Password (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to define a constant for the default password and set a pre-encoded version of the password in a user factory. This avoids needing to re-encode the password during tests, improving performance.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nclass UserFactory extends PersistentProxyObjectFactory\n{\n    public const DEFAULT_PASSWORD = '1234'; // the password used to create the pre-encoded version below\n\n    protected function defaults(): array\n    {\n        return [\n            // ...\n            'password' => '$argon2id$v=19$m=65536,t=4,p=1$pLFF3D2gnvDmxMuuqH4BrA$3vKfv0cw+6EaNspq9btVAYc+jCOqrmWRstInB2fRPeQ',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Database Resetting\nDESCRIPTION: Configures Zenstruck Foundry to reset the database schema or run migrations before each test. This snippet demonstrates how to specify connections, entity managers, and the reset mode (schema or migrate).\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@dev: # see Bundle Configuration section about sharing this in the test environment\n    zenstruck_foundry:\n        orm:\n            reset:\n                connections:\n                    - orm_connection_1\n                    - orm_connection_2\n                entity_managers:\n                    - orm_object_manager_1\n                    - orm_object_manager_2\n                mode: schema # default value, enables resetting the schema with doctrine:schema commands\n        mongo:\n            reset:\n                document_managers:\n                    - odm_object_manager_1\n                    - odm_object_manager_2\n```\n\n----------------------------------------\n\nTITLE: Setting Faker Seed via Environment Variable - Terminal Command\nDESCRIPTION: This terminal command shows how to set the FOUNDRY_FAKER_SEED environment variable before running PHPUnit. This freezes the Faker seed, ensuring that Faker generates the same data on each test run. This is useful for ensuring reproducibility in tests that rely on Faker-generated data.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_17\n\nLANGUAGE: terminal\nCODE:\n```\n$ FOUNDRY_FAKER_SEED=1234 vendor/bin/phpunit\n\n...................................                               35 / 35 (100%)\n\nFaker seed: 1234\n\nTime: 00:00.047, Memory: 48.50 MB\n```\n\n----------------------------------------\n\nTITLE: Reuse Objects in Relationships\nDESCRIPTION: Demonstrates how to force Foundry to use the same object for all ManyToOne and OneToOne relationships using the `reuse()` method. In this example, all posts and their comments will have the same author (User). Requires Foundry 2.4 or higher.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// let's say both Post and Comment classes have a ManyToOne field \"author\" of class User\n$user = UserFactory::createOne();\n\nPostFactory::new([\n    'comments' => CommentFactory::new()->many(5),\n])\n    // by calling reuse, the post and all its comments will have the same author\n    ->reuse($user)\n    ->create();\n```\n\n----------------------------------------\n\nTITLE: FactoryCollection Passed Directly to Test Case in PHPUnit\nDESCRIPTION: Demonstrates how to pass a `FactoryCollection` object directly to the test case as a data provider. This allows for creating several objects for the same test.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n/**\n * @dataProvider postDataProvider\n */\npublic function test_post_via_data_provider(FactoryCollection $factoryCollection): void\n{\n    $factoryCollection->create();\n\n    // ...\n}\n\npublic static function postDataProvider(): iterable\n{\n    // 3 posts will be created for the first test case\n    yield PostFactory::new()->sequence(\n        [\n            ['title' => 'foo 1'],\n            ['title' => 'bar 1'],\n            ['title' => 'baz 1'],\n        ]\n    );\n\n    // 2 posts will be created for the second test case\n    yield PostFactory::new()->sequence(\n        [\n            ['title' => 'foo 2'],\n            ['title' => 'bar 2'],\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Create Post with Comments (One-to-Many)\nDESCRIPTION: Demonstrates creating a Post with multiple Comments using the `comments` attribute and `CommentFactory`. It showcases creating a single post with a fixed number of comments, creating multiple posts with a fixed number of comments each, and creating multiple posts with a range of comments.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\CommentFactory;\nuse App\\Factory\\PostFactory;\n\n// Example 1: Create a Post with 6 Comments\nPostFactory::createOne(['comments' => CommentFactory::new()->many(6)]);\n\n// Example 2: Create 6 Posts each with 4 Comments (24 Comments total)\nPostFactory::createMany(6, ['comments' => CommentFactory::new()->many(4)]);\n\n// Example 3: Create 6 Posts each with between 0 and 10 Comments\nPostFactory::createMany(6, ['comments' => CommentFactory::new()->range(0, 10)]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Values in Factory (PHP)\nDESCRIPTION: Customize the defaults method in the factory class to define default values for object properties. Utilizes the Faker library for generating realistic random data for fields like title and body, and creates a DateTimeImmutable instance for the createdAt field.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function defaults(): array\n{\n    return [\n        // use the built-in Faker integration to generate good random values...\n        'title' => self::faker()->unique()->sentence(),\n        'body' => self::faker()->sentence(),\n\n        // ...or generate the values yourself if you prefer\n        'createdAt' => new \\DateTimeImmutable('today'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap for Clearing Test Cache (PHP)\nDESCRIPTION: This PHP snippet removes the test cache directory in `tests/bootstrap.php` if debug mode is disabled (`APP_DEBUG=0`).  This is important to ensure that tests run without debug mode use a fresh cache, avoiding potential issues caused by cached data.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n// tests/bootstrap.php\n// ...\nif (false === (bool) $_SERVER['APP_DEBUG']) {\n    // ensure fresh cache\n    (new Symfony\\Component\\Filesystem\\Filesystem())->remove(__DIR__.'/../var/cache/test');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Instantiator with Callable - PHP\nDESCRIPTION: This code shows how to provide a custom callable to the instantiateWith() method of a factory. The callable receives an array of attributes and the class name, allowing for complete control over object instantiation and hydration. The provided example demonstrates constructing a 'Post' object.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n->instantiateWith(function(array $attributes, string $class): object {\n    return new Post(); // ... your own logic\n})\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Database Resetting with Migrations\nDESCRIPTION: Configures Zenstruck Foundry to reset the database using Doctrine migrations. This allows for a more controlled database setup during testing. Optionally, it allows passing configurations to the doctrine:migrations:migrate command.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@dev: # see Bundle Configuration section about sharing this in the test environment\n    zenstruck_foundry:\n        orm:\n            reset:\n                mode: migrate # enables resetting with migrations\n\n                # optional: allows you to pass additional configuration to the doctrine:migrations:migrate command\n                migrations:\n                    configurations:\n                        - '%kernel.root_dir%/migrations/configuration.php'\n                        - 'migrations/configuration.yaml'\n```\n\n----------------------------------------\n\nTITLE: Category Story with Magic Method (PHP)\nDESCRIPTION: This PHP snippet enhances a Story with a magic method to improve autocompletion and static analysis when accessing the Story's state. It leverages PHPDoc to define the return type of the magic method.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n// src/Story/CategoryStory.php\nnamespace App\\Story;\n\nuse App\\Factory\\CategoryFactory;\nuse Zenstruck\\Foundry\\Persistence\\Proxy;\nuse Zenstruck\\Foundry\\Story;\n\n/**\n * @method static Category&Proxy<Category> php()\n */\nfinal class CategoryStory extends Story\n{\n    public function build(): void\n    {\n        $this->addState('php', CategoryFactory::createOne(['name' => 'php']));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Doctrine ORM InvalidArgumentException (Text)\nDESCRIPTION: Example exception message. It appears if a proxy has been passed to ``EntityManager::persist()``. To fix this, you should pass the \"real\" object, by calling ``$proxyfiedObject->_real()``.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_52\n\nLANGUAGE: text\nCODE:\n```\n> Doctrine\\ORM\\ORMInvalidArgumentException: A new entity was found through the relationship\n'App\\Entity\\Post#category' that was not configured to cascade persist operations for entity: AppEntityCategoryProxy@3082.\nTo solve this issue: Either explicitly call EntityManager#persist() on this unknown entity or configure cascade persist\nthis association in the mapping for example @ManyToOne(..,cascade={\"persist\"}). If you cannot find out which entity\ncauses the problem implement 'App\\Entity\\Category#__toString()' to get a clue.\n```\n\n----------------------------------------\n\nTITLE: Create Story with Maker Command (Terminal)\nDESCRIPTION: This command creates a new story class using the Symfony MakerBundle.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_70\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console make:story Post\n```\n\n----------------------------------------\n\nTITLE: Configuring Global State with YAML\nDESCRIPTION: Shows how to configure global state in the zenstruck_foundry.yaml file.  Global state allows for initializing database state before each test. The example demonstrates loading stories as services, global stories, and invokable services.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_56\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@test: # see Bundle Configuration section about sharing this in the test environment\n    zenstruck_foundry:\n        global_state:\n            - App\\Story\\StoryThatIsAService\n            - App\\Story\\GlobalStory\n            - invokable.service # just a service with ::invoke()\n            - ...\n```\n\n----------------------------------------\n\nTITLE: Using #[WithStory] Attribute in PHPUnit Test\nDESCRIPTION: This code demonstrates how to use the #[WithStory] attribute to load a Story in a PHPUnit test class or method. The CategoryStory will be loaded before each test method if the attribute is applied at the class level.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_78\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Story\\CategoryStory;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Zenstruck\\Foundry\\Attribute\\WithStory;\n\n// You can use the attribute on the class...\n#[WithStory(CategoryStory::class)]\nfinal class NeedsCategoriesTest extends KernelTestCase\n{\n    // ... or on the method\n    #[WithStory(CategoryStory::class)]\n    public function testThatNeedStories(): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating tests/object-manager.php for Doctrine config\nDESCRIPTION: This PHP file is created to expose the Doctrine configuration for Rector to understand the mapping. It is necessary if the mapping is defined outside the code (XML, YAML, or PHP).\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse App\\Kernel;\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n(new Dotenv())->bootEnv(__DIR__ . '/../.env');\n\n$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);\n$kernel->boot();\nreturn $kernel->getContainer()->get('doctrine')->getManager();\n```\n\n----------------------------------------\n\nTITLE: Overriding Database Configuration in .env.local\nDESCRIPTION: This snippet shows how to override the default database configuration by setting the `DATABASE_URL` variable in the `.env.local` file. This allows using PostgreSQL or SQLite instead of the default database.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# .env.local\n\n# change the database to postgreSQL...\nDATABASE_URL=\"postgresql://zenstruck:zenstruck@127.0.0.1:5433/zenstruck_foundry?serverVersion=15\"\n# ...or to SQLite\nDATABASE_URL=\"sqlite:///%kernel.project_dir%/var/data.db\"\n```\n\n----------------------------------------\n\nTITLE: Creating rector.php for Foundry 2.0 Migration\nDESCRIPTION: This PHP configuration file defines the settings for Rector to automate the upgrade to Foundry 2.0.  It specifies the paths to be processed and the Foundry rule set to be applied.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rector\\Config\\RectorConfig;\nuse Zenstruck\\Foundry\\Utils\\Rector\\FoundrySetList;\n\nreturn RectorConfig::configure()\n    ->withPaths([\n        // add all paths where your factories are defined and where Foundry is used\n        'src/Factory',\n        'tests'\n    ])\n    ->withSets([FoundrySetList::UP_TO_FOUNDRY_2])\n;\n```\n\n----------------------------------------\n\nTITLE: Paratest Execution with WrapperRunner\nDESCRIPTION: This command line snippet shows how to execute Paratest with the `WrapperRunner`.  This ensures the database is reset once per process, rather than once per test class, which is required when using `DAMADoctrineTestBundle` with older versions of `paratestphp/paratest`.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_63\n\nLANGUAGE: terminal\nCODE:\n```\nvendor/bin/paratest --runner WrapperRunner\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Schema Reset using PHPUnit\nDESCRIPTION: This command uses PHPUnit to execute tests within the 'reset-database' testsuite, ensuring a clean schema before each test run. It relies on the 'tests/bootstrap-reset-database.php' file for environment setup.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./phpunit --testsuite reset-database --bootstrap tests/bootstrap-reset-database.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Faker Locale (YAML)\nDESCRIPTION: Demonstrates how to configure the Faker locale in the `zenstruck_foundry.yaml` configuration file to customize the generated random data according to a specific language or region.  This is generally done in the dev environment to ensure consistency in tests.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nwhen@dev: # see Bundle Configuration section about sharing this in the test environment\n    zenstruck_foundry:\n        faker:\n            locale: fr_FR # set the locale\n```\n\n----------------------------------------\n\nTITLE: Doctrine DBAL Configuration for Paratest (YAML)\nDESCRIPTION: This YAML snippet configures the Doctrine database connection to use a different database name for each parallel process in Paratest by appending a suffix based on the `TEST_TOKEN` environment variable. This prevents data conflicts during parallel testing.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/doctrine.yaml\nwhen@test:\n    doctrine:\n        dbal:\n            dbname_suffix: '_test%env(default::TEST_TOKEN)%' \n```\n\n----------------------------------------\n\nTITLE: Post Factory Using Category Story State (PHP)\nDESCRIPTION: This PHP snippet shows how to use the state (specifically the 'php' category) of a CategoryStory when creating a PostFactory object. It demonstrates retrieving the stored object from the story.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_75\n\nLANGUAGE: php\nCODE:\n```\nPostFactory::createOne(['category' => CategoryStory::get('php')]);\n\n// or use the magic method (functionally equivalent to above)\nPostFactory::createOne(['category' => CategoryStory::php()]);\n```\n\n----------------------------------------\n\nTITLE: Array Factory Example (PHP)\nDESCRIPTION: Demonstrates how to create an array factory by extending `Zenstruck\\Foundry\\ArrayFactory`. It shows how to define default values and override them when creating instances.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\nuse Zenstruck\\Foundry\\ArrayFactory;\n\nfinal class SomeArrayFactory extends ArrayFactory\n{\n    protected function defaults(): array|callable\n    {\n        return [\n            'prop1' => 'default value 1',\n            'prop2' => 'default value 2',\n        ];\n    }\n}\n\n// somewhere in a test\n\n// will create ['prop1' => 'foo', 'prop2' => 'default value 2']\n$array = SomeArrayFactory::createOne(['prop1' => 'foo']);\n```\n\n----------------------------------------\n\nTITLE: Faker with Callable Attributes in PHPUnit Data Provider\nDESCRIPTION: Illustrates how to use Faker with callable attributes within a data provider when the Foundry extension is not enabled. This is necessary because the Faker instance is not directly available in the data provider.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_59\n\nLANGUAGE: PHP\nCODE:\n```\npublic function published(): self\n{\n    // This won't work in a data provider!\n    // return $this->with(['published_at' => self::faker()->dateTime()]);\n\n    // use this instead:\n    return $this->with(\n        static fn() => [\n            'published_at' => self::faker()->dateTime()\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Symfony Deprecations Helper in phpunit.xml/env\nDESCRIPTION: This snippet demonstrates how to set the `SYMFONY_DEPRECATIONS_HELPER` variable in `phpunit.xml` or `.env.local` file to activate the deprecation helper for identifying and fixing deprecations during the migration process.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSYMFONY_DEPRECATIONS_HELPER=\"max[self]=0&amp;max[direct]=0&amp;quiet[]=indirect&amp;quiet[]=other\"\n```\n\n----------------------------------------\n\nTITLE: Foundry Unit Test Configuration (PHP)\nDESCRIPTION: This PHP snippet configures Zenstruck Foundry for use in standard PHPUnit tests, defining the instantiator and faker to be used by the factories. It needs to be placed in the tests/bootstrap.php file.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n// tests/bootstrap.php\n// ...\n\nZenstruck\\Foundry\\Test\\UnitTestConfig::configure(\n    instantiator: Zenstruck\\Foundry\\Object\\Instantiator::withoutConstructor()\n        ->allowExtra()\n        ->alwaysForce(),\n    faker: Faker\\Factory::create('fr_FR')\n);\n```\n\n----------------------------------------\n\nTITLE: Running the Documentation Linter\nDESCRIPTION: This command runs the documentation linter inside a Docker container, ensuring that the document syntax adheres to the required standards. It mounts the `docs` directory from the host to the container.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -e DOCS_DIR='/docs' -v ${PWD}/docs:/docs  oskarstark/doctor-rst:latest\n```\n\n----------------------------------------\n\nTITLE: Running Rector to Process or Modify Files\nDESCRIPTION: These commands run Rector to either preview the changes (dry-run) or to apply the changes to the files. Rector will automatically update your codebase based on the specified rules.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# you can run Rector in \"dry run\" mode, in order to see which files will be modified\nvendor/bin/rector process --dry-run\n\n# actually modify files\nvendor/bin/rector process\n```\n\n----------------------------------------\n\nTITLE: Sample Category Entity Definition (PHP)\nDESCRIPTION: Defines a Category entity with an ID and a name. It uses Doctrine ORM annotations to map the class to a database table and specifies the repository class.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Entity;\n\nuse App\\Repository\\CategoryRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity(repositoryClass: CategoryRepository::class)]\nclass Category\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column(type: 'int')]\n    private ?int $id = null;\n\n    public function __construct(\n        #[ORM\\Column]\n        private string $name\n    ) {\n    }\n\n    // ... getters/setters\n}\n```\n\n----------------------------------------\n\nTITLE: Factory defaults() method prototype update\nDESCRIPTION: This code snippet illustrates the required change in the `getDefaults()` method prototype in Foundry factories. In Foundry 2.0, `getDefaults()` is renamed to `defaults()` and must return either an array or a callable.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// before\nprotected function getDefaults(): array\n{\n    // ...\n}\n\n// after\nprotected function defaults(): array|callable\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Faker to Generate Random Data (PHP)\nDESCRIPTION: Illustrates the usage of the Faker library, wrapped by Zenstruck Foundry, for generating random data within factories. This helps populate object attributes with realistic and varied values during object creation.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse function Zenstruck\\Foundry\\faker;\n\nfaker()->email(); // random email\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Extension in XML\nDESCRIPTION: This code snippet shows how to configure the PHPUnit extension for Zenstruck Foundry by modifying the phpunit.xml.dist file.  The extension is added within the <extensions> tag and registers Zenstruck\\Foundry\\PHPUnit\\FoundryExtension as a bootstrap class.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_80\n\nLANGUAGE: XML\nCODE:\n```\n<phpunit>\n    <extensions>\n        <bootstrap class=\"Zenstruck\\Foundry\\PHPUnit\\FoundryExtension\"/>\n    </extensions>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: FactoryCollection for Data Providers in PHPUnit\nDESCRIPTION: Shows the usage of `FactoryCollection` with `ObjectFactory::new()->sequence()` to generate data providers for PHPUnit. This allows passing multiple objects to the test case.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_60\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n/**\n * @dataProvider postDataProvider\n */\npublic function test_post_via_data_provider(PostFactory $factory): void\n{\n    $factory->create();\n\n    // ...\n}\n\npublic static function postDataProvider(): iterable\n{\n    yield from PostFactory::new()->sequence(\n        [\n            ['title' => 'foo'],\n            ['title' => 'bar'],\n        ]\n    )->asDataProvider();\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Data Provider with Foundry Extension\nDESCRIPTION: Example of using Foundry factories with the PHPUnit Extension in data providers. Demonstrates how to create objects in the data provider and use them in tests.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Factory\\PostFactory;\nuse PHPUnit\\Framework\\Attributes\\DataProvider;\n\n#[DataProvider('createMultipleObjectsInDataProvider')]\npublic function test_post_via_data_provider(Post $post): void\n{\n    // at this point, `$post` exists, and is already stored in database\n}\n\npublic static function postDataProvider(): iterable\n{\n    yield [PostFactory::createOne()];\n    yield [PostWithServiceFactory::createOne()];\n    yield [PostFactory::createOne(['body' => faker()->sentence()];\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed Flushing with Return Value (PHP)\nDESCRIPTION: Illustrates using `flush_after` where the callback returns values that are then used. This is helpful for getting the created objects within a test.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Zenstruck\\Foundry\\Persistence\\flush_after;\n\n[$category, $tag] = flush_after(fn() => [\n    CategoryFactory::createOne(),\n    TagFactory::createOne(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Factory class() method prototype update\nDESCRIPTION: This code snippet illustrates the required change in the `getClass()` method prototype in Foundry factories. In Foundry 2.0, `getClass()` is renamed to `class()` and must be a public static method.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// before\nprotected static function getClass(): string\n{\n    // ...\n}\n\n// after\npublic static function class(): string\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed Flushing with flush_after (PHP)\nDESCRIPTION: Demonstrates how to use the `flush_after` function to delay database flushing for improved performance when creating and persisting multiple factories at once.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nuse function Zenstruck\\Foundry\\Persistence\\flush_after;\n\nflush_after(function() {\n    CategoryFactory::createMany(100); // instantiated/persisted but not flushed\n    TagFactory::createMany(200); // instantiated/persisted but not flushed\n}); // single flush\n```\n\n----------------------------------------\n\nTITLE: Setting Migration Configuration File in .env.local\nDESCRIPTION: This snippet demonstrates how to set the migration configuration file by defining the `MIGRATION_CONFIGURATION_FILE` variable in the `.env.local` file.  This is only relevant for the \"reset-database\" testsuite.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nMIGRATION_CONFIGURATION_FILE=\"tests/Fixture/MigrationTests/configs/migration-configuration.php\"\n```\n\n----------------------------------------\n\nTITLE: Overriding MySQL Port in .env.local\nDESCRIPTION: This snippet shows how to override the MySQL port in the `.env.local` file to match the overridden docker-compose configuration. It assumes that MySQL is running on port 3308.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_14\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL=\"mysql://root:1234@127.0.0.1:3308/foundry_test?serverVersion=5.7.42\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Override Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to override the default docker-compose configuration to expose MySQL on port 3308. It modifies the `ports` section of the `mysql` service.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\n\nservices:\n    mysql:\n        ports:\n            - \"3308:3306\"\n```\n\n----------------------------------------\n\nTITLE: Setting PHPUnit Version in .env.local\nDESCRIPTION: This snippet shows how to set the PHPUnit version by setting the `PHPUNIT_VERSION` variable in the `.env.local` file.  Possible values are 9, 10, 11, and 11.4.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPHPUNIT_VERSION=\"11\" # possible values: 9, 10, 11, 11.4\n```\n\n----------------------------------------\n\nTITLE: Installing Rector and phpstan-doctrine\nDESCRIPTION: This command installs Rector and phpstan-doctrine as development dependencies using Composer. These tools aid in automating code refactoring and detecting potential issues during the migration to Foundry 2.0.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require --dev rector/rector phpstan/phpstan-doctrine\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Migration Reset using Composer\nDESCRIPTION: This command uses composer to execute the test suite with the 'migrate' reset database strategy. This strategy applies database migrations to bring the database to the latest state before running tests.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer test-migrate\n```\n\n----------------------------------------\n\nTITLE: Category Story with State (PHP)\nDESCRIPTION: This PHP snippet showcases storing objects within a Story's state for later retrieval and reuse.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n// src/Story/CategoryStory.php\nnamespace App\\Story;\n\nuse App\\Factory\\CategoryFactory;\nuse Zenstruck\\Foundry\\Story;\n\nfinal class CategoryStory extends Story\n{\n    public function build(): void\n    {\n        $this->addState('php', CategoryFactory::createOne(['name' => 'php']));\n\n        // factories are created when added as state\n        $this->addState('symfony', CategoryFactory::new(['name' => 'symfony']));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Factory Namespace (YAML)\nDESCRIPTION: Globally configure the default namespace for generated factories in the zenstruck_foundry configuration file. This setting specifies the root namespace under which new factory classes will be created.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nzenstruck_foundry:\n    make_factory:\n        default_namespace: 'App\\MyFactories'\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Refresh on Object Proxy (PHP)\nDESCRIPTION: Demonstrates how to enable auto-refreshing for an object proxy. This automatically refreshes the object from the database before calling any methods, useful in integration tests.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Factory\\PostFactory;\n\n$post = PostFactory::new(['title' => 'Original Title'])\n    ->create()\n    ->_enableAutoRefresh()\n;\n```\n\n----------------------------------------\n\nTITLE: ObjectFactory Usage (PHP)\nDESCRIPTION: Shows how to create plain PHP objects (not wrapped with a proxy) by extending `Zenstruck\\Foundry\\ObjectFactory` when persistence is not required.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nWhen dealing with objects which are not aimed to be persisted, you can make your factory inherit from\n``Zenstruck\\Foundry\\ObjectFactory``. This will create plain objects, that does not interact with database (these objects\nwon't be wrapped with a :ref:`proxy object <object-proxy>`).\n```\n\n----------------------------------------\n\nTITLE: Enabling DAMA Doctrine Test Bundle in .env.local\nDESCRIPTION: This snippet shows how to enable the `dama/doctrine-test-bundle` by setting `USE_DAMA_DOCTRINE_TEST_BUNDLE` to \"1\" in the `.env.local` file.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nUSE_DAMA_DOCTRINE_TEST_BUNDLE=\"1\" # enables dama/doctrine-test-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Zenstruck Foundry with Composer\nDESCRIPTION: Installs the zenstruck/foundry package as a development dependency using Composer. This command adds the Foundry library to your project for creating database fixtures and test data.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ composer require --dev zenstruck/foundry\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Migration Reset using PHPUnit\nDESCRIPTION: This command directly calls PHPUnit to run tests, employing the 'reset-database' test suite. It uses the migrate reset database strategy.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./phpunit\n```\n\n----------------------------------------\n\nTITLE: Disabling Hints in Generated Factory (YAML)\nDESCRIPTION: Configure zenstruck_foundry to remove beginner hints from generated factory files.  Setting add_hints to false in the zenstruck_foundry configuration prevents the inclusion of commented hints in the generated factory class.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/zenstruck_foundry.yaml\nzenstruck_foundry:\n    make_factory:\n        add_hints: false\n```\n\n----------------------------------------\n\nTITLE: Factory initialize() method prototype update\nDESCRIPTION: This code snippet illustrates the required change in the `initialize()` method prototype in Foundry factories. In Foundry 2.0, the method must return static.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/UPGRADE-2.0.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// before\nprotected function initialize()\n{\n    // ...\n}\n\n// after\nprotected function initialize(): static\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Foundry Story (PHP)\nDESCRIPTION: This snippet shows how to load a Zenstruck Foundry story, which executes the build() method and sets the desired state for the tests.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_72\n\nLANGUAGE: php\nCODE:\n```\nPostStory::load(); // loads the state defined in PostStory::build()\n\nPostStory::load(); // does nothing - already loaded\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Schema Reset using Composer\nDESCRIPTION: This command uses composer to run the test suite with the 'schema' reset database strategy. This strategy resets the database schema before running tests.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer test-schema\n```\n\n----------------------------------------\n\nTITLE: Database Reset with ResetDatabase Trait (PHP)\nDESCRIPTION: Shows how to use the `ResetDatabase` trait to ensure the database is reset before each test when using Zenstruck Foundry.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_44\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nuse Zenstruck\\Foundry\\Test\\Factories;\nuse Zenstruck\\Foundry\\Test\\ResetDatabase;\n\nclass MyTest extends WebTestCase\n{\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers\nDESCRIPTION: This command starts the Docker containers defined in the docker-compose.yml file in detached mode. It's a prerequisite for running the test suite.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --detach\n```\n\n----------------------------------------\n\nTITLE: Disabling Mongo in .env.local\nDESCRIPTION: This snippet shows how to disable the Mongo database connection by setting `MONGO_URL` to an empty string in the `.env.local` file.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_URL=\"\" # disables Mongo\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit with Overrides\nDESCRIPTION: This command executes PHPUnit with the environment variables overridden by the `.env.local` file. This enables testing with different database configurations like PostgreSQL or SQLite.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Generating a Foundry Factory with Maker\nDESCRIPTION: Generates a Foundry factory class for a specified entity using the Symfony MakerBundle. The command prompts for the entity class and creates a factory file in the src/Factory directory.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ php bin/console make:factory\n```\n\n----------------------------------------\n\nTITLE: Enabling Zenstruck Foundry Psalm Plugin\nDESCRIPTION: This command shows how to enable the Zenstruck Foundry extension for Psalm to provide static analysis support for Foundry factories and stories.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_79\n\nLANGUAGE: Bash\nCODE:\n```\n$ vendor/bin/psalm-plugin enable zenstruck/foundry\n```\n\n----------------------------------------\n\nTITLE: Persisting Proxy Object (PHP)\nDESCRIPTION: Shows how to persist a proxy object using the `persist_proxy` helper function. It creates a new entity and saves it to the database.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$entity = persist_proxy(Post::class, ['field' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Enable Foundry in TestCase (PHP)\nDESCRIPTION: Demonstrates how to enable Zenstruck Foundry in a Symfony WebTestCase by using the `Factories` trait.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Factory\\PostFactory;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nuse Zenstruck\\Foundry\\Test\\Factories;\n\nclass MyTest extends WebTestCase\n{\n    use Factories;\n\n    public function test_1(): void\n    {\n        $post = PostFactory::createOne();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Force Setting Non-Public Properties (PHP)\nDESCRIPTION: Shows how to use helper methods to access and modify non-public properties of an object wrapped in a proxy.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n// set private/protected properties\n$post->_set('createdAt', new \\DateTime());\n\n// get private/protected properties\n$post->_get('createdAt');\n```\n\n----------------------------------------\n\nTITLE: Override Initialize Method (PHP)\nDESCRIPTION: Shows how to override the `initialize()` method in a factory to set `withoutPersisting()` as the default behavior.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/docs/index.rst#_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\nprotected function initialize(): static\n{\n    return $this\n        ->withoutPersisting()\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command uses composer to install all the dependencies defined in composer.json.\nSOURCE: https://github.com/zenstruck/foundry/blob/2.x/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ composer update\n```"
  }
]