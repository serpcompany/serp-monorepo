[
  {
    "owner": "get-convex",
    "repo": "workflow",
    "content": "TITLE: Defining a Basic Workflow in TypeScript with Convex\nDESCRIPTION: Example of defining a workflow that computes a transcription and then an embedding. This workflow demonstrates how to chain actions with delays between steps and pass data between them.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkflowManager } from \"@convex-dev/workflow\";\nimport { components } from \"./_generated/api\";\n\nexport const workflow = new WorkflowManager(components.workflow);\n\nexport const exampleWorkflow = workflow.define({\n  args: {\n    storageId: v.id(\"_storage\"),\n  },\n  handler: async (step, args): Promise<number[]> => {\n    const transcription = await step.runAction(\n      internal.index.computeTranscription,\n      { storageId: args.storageId },\n    );\n\n    const embedding = await step.runAction(\n      internal.index.computeEmbedding,\n      { transcription },\n      // Run this a month after the transcription is computed.\n      { runAfter: 30 * 24 * 60 * 60 * 1000 },\n    );\n    return embedding;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow with Query and Action Steps\nDESCRIPTION: Example workflow definition showing how to run queries and actions in sequence, passing results between steps. Includes the query and action implementation details.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const exampleWorkflow = workflow.define({\n  args: { name: v.string() },\n  handler: async (step, args): Promise<string> => {\n    const queryResult = await step.runQuery(\n      internal.example.exampleQuery,\n      args,\n    );\n    const actionResult = await step.runAction(\n      internal.example.exampleAction,\n      { queryResult }, // pass in results from previous steps!\n    );\n    return actionResult;\n  },\n});\n\nexport const exampleQuery = internalQuery({\n  args: { name: v.string() },\n  handler: async (ctx, args) => {\n    return `The query says... Hi ${args.name}!`;\n  },\n});\n\nexport const exampleAction = internalAction({\n  args: { queryResult: v.string() },\n  handler: async (ctx, args) => {\n    return args.queryResult + \" The action says... Hi back!\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow Manager Instance\nDESCRIPTION: Code to initialize a workflow manager in a Convex project by pointing it to the installed workflow component.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/index.ts\nimport { WorkflowManager } from \"@convex-dev/workflow\";\nimport { components } from \"./_generated/api\";\n\nexport const workflow = new WorkflowManager(components.workflow);\n```\n\n----------------------------------------\n\nTITLE: Starting a Workflow from a Convex Mutation\nDESCRIPTION: Example of how to start a defined workflow from a Convex mutation function, passing the necessary arguments.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const kickoffWorkflow = mutation({\n  handler: async (ctx) => {\n    const workflowId = await workflow.start(\n      ctx,\n      internal.example.exampleWorkflow,\n      { name: \"James\" },\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Workflow Completion with onComplete Handler\nDESCRIPTION: Implementation of workflow start with onComplete handler to process the results of a workflow, including handling success, error, and cancellation scenarios.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vWorkflowId } from \"@convex-dev/workflow\";\nimport { vResultValidator } from \"@convex-dev/workpool\";\n\nexport const foo = mutation({\n  handler: async (ctx) => {\n    const name = \"James\";\n    const workflowId = await workflow.start(\n      ctx,\n      internal.example.exampleWorkflow,\n      { name },\n      {\n        onComplete: internal.example.handleOnComplete,\n        context: name, // can be anything\n      },\n    );\n  },\n});\n\nexport const handleOnComplete = mutation({\n  args: {\n    workflowId: vWorkflowId,\n    result: vResultValidator,\n    context: v.any(), // used to pass through data from the start site.\n  }\n  handler: async (ctx, args) => {\n    const name = (args.context as { name: string }).name;\n    if (args.result.kind === \"success\") {\n      const text = args.result.returnValue;\n      console.log(`${name} result: ${text}`);\n    } else if (args.result.kind === \"error\") {\n      console.error(\"Workflow failed\", args.result.error);\n    } else if (args.result.kind === \"canceled\") {\n      console.log(\"Workflow canceled\", args.context);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Workflow Steps in Parallel\nDESCRIPTION: Example of executing multiple workflow steps concurrently using Promise.all() to improve performance when steps don't depend on each other.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const exampleWorkflow = workflow.define({\n  args: { name: v.string() },\n  handler: async (step, args): Promise<void> => {\n    const [result1, result2] = await Promise.all([\n      step.runAction(internal.example.myAction, args),\n      step.runAction(internal.example.myAction, args),\n    ]);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Behavior for Workflows\nDESCRIPTION: Example of specifying retry behavior for workflows at the manager level, workflow level, and step level. Shows different ways to configure retries for handling transient failures.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst workflow = new WorkflowManager(components.workflow, {\n  defaultRetryBehavior: {\n    maxAttempts: 3,\n    initialBackoffMs: 100,\n    base: 2,\n  },\n  // If specified, this sets the defaults, overridden per-workflow or per-step.\n  workpoolOptions: { ... }\n});\n\nexport const exampleWorkflow = workflow.define({\n  args: { name: v.string() },\n  handler: async (step, args): Promise<void> => {\n    // Uses default retry behavior & retryActionsByDefault\n    await step.runAction(internal.example.myAction, args);\n    // Retries will be attempted with the default behavior\n    await step.runAction(internal.example.myAction, args, { retry: true });\n    // No retries will be attempted\n    await step.runAction(internal.example.myAction, args, { retry: false });\n    // Custom retry behavior will be used\n    await step.runAction(internal.example.myAction, args, {\n      retry: { maxAttempts: 2, initialBackoffMs: 100, base: 2 },\n    });\n  },\n  // If specified, this will override the workflow manager's default\n  workpoolOptions: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Parallel Workflow Limits with maxParallelism\nDESCRIPTION: Configuration to limit the number of workflows that can run in parallel by setting the maxParallelism option in the workflow manager.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst workflow = new WorkflowManager(components.workflow, {\n  workpoolOptions: {\n    // You must only set this to one value per components.xyz!\n    // You can set different values if you \"use\" multiple different components\n    // in convex.config.ts.\n    maxParallelism: 10,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Workflow Status Using workflow.status() in TypeScript\nDESCRIPTION: Demonstrates how to start a workflow and check its status after a delay using workflow.status(). This pattern is useful for monitoring the progress of asynchronous workflows in Convex applications.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const kickoffWorkflow = action({\n  handler: async (ctx) => {\n    const workflowId = await workflow.start(\n      ctx,\n      internal.example.exampleWorkflow,\n      { name: \"James\" },\n    );\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    const status = await workflow.status(ctx, workflowId);\n    console.log(\"Workflow status after 1s\", status);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling a Workflow with workflow.cancel() in TypeScript\nDESCRIPTION: Shows how to cancel a running workflow after starting it. The workflow.cancel() method halts execution immediately, though any in-progress action steps will be allowed to complete.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const kickoffWorkflow = action({\n  handler: async (ctx) => {\n    const workflowId = await workflow.start(\n      ctx,\n      internal.example.exampleWorkflow,\n      { name: \"James\" },\n    );\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // Cancel the workflow after 1 second.\n    await workflow.cancel(ctx, workflowId);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Completed Workflows with workflow.cleanup() in TypeScript\nDESCRIPTION: Demonstrates how to poll for workflow completion and then clean up its resources using workflow.cleanup(). This is necessary as completed workflows are not automatically cleaned up by the system.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const kickoffWorkflow = action({\n  handler: async (ctx) => {\n    const workflowId = await workflow.start(\n      ctx,\n      internal.example.exampleWorkflow,\n      { name: \"James\" },\n    );\n    try {\n      while (true) {\n        const status = await workflow.status(ctx, workflowId);\n        if (status.type === \"inProgress\") {\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n          continue;\n        }\n        console.log(\"Workflow completed with status:\", status);\n        break;\n      }\n    } finally {\n      await workflow.cleanup(ctx, workflowId);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Step Names in Convex Workflows\nDESCRIPTION: Shows how to provide custom names for workflow steps to make log events more descriptive. By default, steps use the file/folder:function naming pattern.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const exampleWorkflow = workflow.define({\n  args: { name: v.string() },\n  handler: async (step, args): Promise<void> => {\n    await step.runAction(internal.example.myAction, args, { name: \"FOO\" });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Circular Dependencies in Convex Workflows with Explicit Types\nDESCRIPTION: Demonstrates how to resolve circular dependency issues by explicitly typing workflow and function return values. This is particularly important when workflows depend on other Convex functions.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const supportAgentWorkflow = workflow.define({\n  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },\n+  handler: async (step, { prompt, userId, threadId }): Promise<string> => {\n     // ...\n   },\n });\n\n // And regular functions too:\n export const myFunction = action({\n   args: { prompt: v.string() },\n+  handler: async (ctx, { prompt }): Promise<string> => {\n     // ...\n   },\n });\n```\n\n----------------------------------------\n\nTITLE: Simplifying Workflow Syntax with Internal Function References\nDESCRIPTION: Shows a technique for creating more concise workflows by using a variable to reference internal steps, reducing the verbosity of the internal.foo.* syntax pattern.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst s = internal.steps;\n\nexport const myWorkflow = workflow.define({\n  args: { prompt: v.string() },\n  handler: async (step, args): Promise<string> => {\n+    const result = await step.runAction(s.myAction, args);\n    return result;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Workflow in Configuration File\nDESCRIPTION: Configuration for integrating the workflow component in the Convex application using the convex.config.ts file.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport workflow from \"@convex-dev/workflow/convex.config\";\nimport { defineApp } from \"convex/server\";\n\nconst app = defineApp();\napp.use(workflow);\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Workflow Package via NPM\nDESCRIPTION: Command to install the @convex-dev/workflow package in a Convex project using npm.\nSOURCE: https://github.com/get-convex/workflow/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @convex-dev/workflow\n```\n\n----------------------------------------\n\nTITLE: Running Convex Workflow Locally with npm\nDESCRIPTION: Commands for setting up and running the Convex workflow project in a local development environment. This involves installing dependencies in both the main project and example directory, then starting the Convex development server.\nSOURCE: https://github.com/get-convex/workflow/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\ncd example\nnpm i\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Testing Convex Workflow Project\nDESCRIPTION: Series of commands to run the test suite for the Convex workflow project. This includes building the project, type checking, running tests, and linting the example code to ensure quality and correctness.\nSOURCE: https://github.com/get-convex/workflow/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm run typecheck\nnpm run test\ncd example\nnpm run lint\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Building a One-off Package for Convex Workflow\nDESCRIPTION: Commands to create a local package of the Convex workflow project without publishing it. This is useful for testing the package locally or sharing it for review before official publication.\nSOURCE: https://github.com/get-convex/workflow/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Version of Convex Workflow\nDESCRIPTION: Process for publishing a new version of the Convex workflow package to npm. Includes version bumping, verification with dry-run, publishing, and pushing git tags to maintain version control synchronization.\nSOURCE: https://github.com/get-convex/workflow/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# this will change the version and commit it (if you run it in the root directory)\nnpm version patch\nnpm publish --dry-run\n# sanity check files being included\nnpm publish\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Deploying an Alpha Release of Convex Workflow\nDESCRIPTION: Commands for publishing an alpha (prerelease) version of the Convex workflow package. This creates a version that will only be installed when specifically requesting the alpha tag.\nSOURCE: https://github.com/get-convex/workflow/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm version prerelease --preid alpha\nnpm publish --tag alpha\n```"
  }
]