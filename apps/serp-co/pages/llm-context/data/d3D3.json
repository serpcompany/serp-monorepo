[
  {
    "owner": "d3",
    "repo": "d3",
    "content": "TITLE: Using D3.js with Local UMD Bundle\nDESCRIPTION: This snippet shows how to use D3.js with a locally stored UMD bundle. It loads the D3 library from a local file, creates a basic chart with axes, and appends it to the page.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"container\"></div>\n<script src=\"d3.js\"></script>\n<script type=\"module\">\n\n// Declare the chart dimensions and margins.\nconst width = 640;\nconst height = 400;\nconst marginTop = 20;\nconst marginRight = 20;\nconst marginBottom = 30;\nconst marginLeft = 40;\n\n// Declare the x (horizontal position) scale.\nconst x = d3.scaleUtc()\n    .domain([new Date(\"2023-01-01\"), new Date(\"2024-01-01\")])\n    .range([marginLeft, width - marginRight]);\n\n// Declare the y (vertical position) scale.\nconst y = d3.scaleLinear()\n    .domain([0, 100])\n    .range([height - marginBottom, marginTop]);\n\n// Create the SVG container.\nconst svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n// Add the x-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x));\n\n// Add the y-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(${marginLeft},0)`)\n    .call(d3.axisLeft(y));\n\n// Append the SVG element.\ncontainer.append(svg.node());\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing Exit Selection in D3.js\nDESCRIPTION: Demonstrates removing DOM elements that no longer have corresponding data using exit() selection.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndiv.exit().remove();\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Components and Importing Dependencies for D3 Visualization\nDESCRIPTION: Sets up Vue components with necessary imports for D3 and Observable Plot. Imports functionality from various libraries and defines local components for rendering visualizations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/what-is-d3.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {useData} from \"vitepress\";\nimport {computed} from \"vue\";\nimport LogoDiagram from \"./components/LogoDiagram.vue\";\nimport PlotRender from \"./components/PlotRender.js\";\n\nconst {site: {value: {themeConfig: {sidebar}}}} = useData();\n\nconst paths = computed(() => {\n  const paths = [];\n  (function visit(node, path) {\n    paths.push({path, link: node.link && `.${node.link}`});\n    if (node.items) {\n      for (const item of node.items) {\n        visit(item, (path === \"/\" ? path : path + \"/\") + item.text);\n      }\n    }\n  })({items: sidebar}, \"/D3\");\n  return paths;\n});\n\n// https://github.com/observablehq/plot/issues/1703\nfunction computeTreeWidth(paths) {\n  const root = d3.tree().nodeSize([1, 1])(d3.stratify().path((d) => d.path)(paths));\n  const [x1, x2] = d3.extent(root, (d) => d.x);\n  return x2 - x1;\n}\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing CSV Files with d3.csv\nDESCRIPTION: Shows how to load and parse a CSV file using d3.csv(). This method fetches a CSV file and automatically parses it into an array of objects, with each object representing a row in the CSV.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.csv(\"hello-world.csv\"); // [{\"Hello\": \"world\"}, …]\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Table from Matrix using D3.js Data Join\nDESCRIPTION: Demonstrates how to create an HTML table by binding a 2D array of numbers using nested data joins with D3.js selection methods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst matrix = [\n  [11975,  5871, 8916, 2868],\n  [ 1951, 10048, 2060, 6171],\n  [ 8010, 16145, 8090, 8045],\n  [ 1013,   990,  940, 6907]\n];\n\nd3.select(\"body\")\n  .append(\"table\")\n  .selectAll(\"tr\")\n  .data(matrix)\n  .join(\"tr\")\n  .selectAll(\"td\")\n  .data(d => d)\n  .join(\"td\")\n    .text(d => d);\n```\n\n----------------------------------------\n\nTITLE: Using D3.js with UMD Bundle via CDN\nDESCRIPTION: This snippet demonstrates how to use D3.js via a UMD bundle loaded from a CDN. It creates a basic chart with x and y axes using the global D3 object and appends it to the DOM.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"container\"></div>\n<script src=\"https://cdn.jsdelivr.net/npm/d3@7\"></script>\n<script type=\"module\">\n\n// Declare the chart dimensions and margins.\nconst width = 640;\nconst height = 400;\nconst marginTop = 20;\nconst marginRight = 20;\nconst marginBottom = 30;\nconst marginLeft = 40;\n\n// Declare the x (horizontal position) scale.\nconst x = d3.scaleUtc()\n    .domain([new Date(\"2023-01-01\"), new Date(\"2024-01-01\")])\n    .range([marginLeft, width - marginRight]);\n\n// Declare the y (vertical position) scale.\nconst y = d3.scaleLinear()\n    .domain([0, 100])\n    .range([height - marginBottom, marginTop]);\n\n// Create the SVG container.\nconst svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n// Add the x-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x));\n\n// Add the y-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(${marginLeft},0)`)\n    .call(d3.axisLeft(y));\n\n// Append the SVG element.\ncontainer.append(svg.node());\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using D3.js with ES Modules in HTML via CDN\nDESCRIPTION: This snippet shows how to use D3.js with ES modules in vanilla HTML via a CDN. It imports D3, creates chart dimensions and scales, builds an SVG chart with axes, and appends it to the DOM.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"container\"></div>\n<script type=\"module\">\n\nimport * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\n\n// Declare the chart dimensions and margins.\nconst width = 640;\nconst height = 400;\nconst marginTop = 20;\nconst marginRight = 20;\nconst marginBottom = 30;\nconst marginLeft = 40;\n\n// Declare the x (horizontal position) scale.\nconst x = d3.scaleUtc()\n    .domain([new Date(\"2023-01-01\"), new Date(\"2024-01-01\")])\n    .range([marginLeft, width - marginRight]);\n\n// Declare the y (vertical position) scale.\nconst y = d3.scaleLinear()\n    .domain([0, 100])\n    .range([height - marginBottom, marginTop]);\n\n// Create the SVG container.\nconst svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n// Add the x-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x));\n\n// Add the y-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(${marginLeft},0)`)\n    .call(d3.axisLeft(y));\n\n// Append the SVG element.\ncontainer.append(svg.node());\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a D3 Line Generator for Time Series Data\nDESCRIPTION: Creates a line generator that maps date and value data to x and y coordinates using scale functions. This demonstrates how to configure a D3 line generator with accessors for data mapping.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line()\n    .x((d) => x(d.date))\n    .y((d) => y(d.value));\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronized Transitions Across Multiple Selections in D3.js\nDESCRIPTION: Demonstrates how to create a synchronized transition across multiple element selections using a shared transition instance. The example shows applying different fill colors to apple and orange elements over 750ms with linear easing.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\nd3.selectAll(\".apple\").transition(t)\n    .style(\"fill\", \"red\");\n\nd3.selectAll(\".orange\").transition(t)\n    .style(\"fill\", \"orange\");\n```\n\n----------------------------------------\n\nTITLE: General Update Pattern in D3.js v4.0\nDESCRIPTION: The updated general update pattern for D3.js version 4.0, using the new merge() method to combine enter and update selections after data joining.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER\n    .style(\"fill\", \"green\")\n  .merge(circle) // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\n```\n\n----------------------------------------\n\nTITLE: Merging Selections in D3.js\nDESCRIPTION: Example of merging odd and even selections using select() and merge() methods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst odd = selection.select(function(d, i) { return i & 1 ? this : null; ));\nconst even = selection.select(function(d, i) { return i & 1 ? null : this; ));\nconst merged = odd.merge(even);\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for D3 Treemap Layout in JavaScript\nDESCRIPTION: Shows the process of preparing hierarchical data for a treemap layout, including summing values and sorting nodes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Construct the treemap layout.\nconst treemap = d3.treemap();\ntreemap.size([width, height]);\ntreemap.padding(2);\n\n// Sum and sort the data.\nroot.sum((d) => d.value);\nroot.sort((a, b) => b.height - a.height || b.value - a.value);\n\n// Compute the treemap layout.\ntreemap(root);\n\n// Retrieve all descendant nodes.\nconst nodes = root.descendants();\n```\n\n----------------------------------------\n\nTITLE: Chaining D3 Selection Methods\nDESCRIPTION: Example demonstrating D3's method chaining pattern for creating and modifying SVG elements with proper indentation to show context changes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.select(\"body\")\n  .append(\"svg\")\n    .attr(\"width\", 960)\n    .attr(\"height\", 500)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(20,20)\")\n  .append(\"rect\")\n    .attr(\"width\", 920)\n    .attr(\"height\", 460);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content with D3 Selection\nDESCRIPTION: Sets the text content of all selected elements to \"Hello, world!\", replacing any existing child elements. The text method provides a safe way to update content without HTML parsing.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nselection.text(\"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: Basic D3.js Join Pattern\nDESCRIPTION: Simple example of using selection.join() to handle enter, update, and exit states when binding data to SVG circles.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\"circle\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"black\");\n```\n\n----------------------------------------\n\nTITLE: General Update Pattern in D3.js v3.x\nDESCRIPTION: Example of the general update pattern for data joins in D3.js version 3.x, which modifies the update selection in-place when appending entering elements.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar circle = svg.selectAll(\"circle\").data(data) // UPDATE\n    .style(\"fill\", \"blue\");\n\ncircle.exit().remove(); // EXIT\n\ncircle.enter().append(\"circle\") // ENTER; modifies UPDATE! 🌶\n    .style(\"fill\", \"green\");\n\ncircle // ENTER + UPDATE\n    .style(\"stroke\", \"black\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Chart with D3.js in Observable\nDESCRIPTION: This snippet demonstrates how to create a basic SVG chart with D3.js in an Observable notebook. It sets up chart dimensions, defines x and y scales, creates an SVG container, and adds x and y axes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Declare the chart dimensions and margins.\n  const width = 640;\n  const height = 400;\n  const marginTop = 20;\n  const marginRight = 20;\n  const marginBottom = 30;\n  const marginLeft = 40;\n\n  // Declare the x (horizontal position) scale.\n  const x = d3.scaleUtc()\n      .domain([new Date(\"2023-01-01\"), new Date(\"2024-01-01\")])\n      .range([marginLeft, width - marginRight]);\n\n  // Declare the y (vertical position) scale.\n  const y = d3.scaleLinear()\n      .domain([0, 100])\n      .range([height - marginBottom, marginTop]);\n\n  // Create the SVG container.\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n  // Add the x-axis.\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${height - marginBottom})`)\n      .call(d3.axisBottom(x));\n\n  // Add the y-axis.\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(${marginLeft},0)`)\n      .call(d3.axisLeft(y));\n\n  // Return the SVG element.\n  return svg.node();\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-order Tree Traversal in D3.js\nDESCRIPTION: Method that traverses a node and its descendants in pre-order, executing a callback function for each node. The function receives the current descendant, traversal index, and source node as parameters. Ensures ancestors are visited before descendants.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnode.eachBefore(function, that)\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Structure\nDESCRIPTION: Shows the final HTML structure after data binding operations are complete.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div>1</div>\n<div>2</div>\n<div>4</div>\n<div>8</div>\n<div>16</div>\n<div>32</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Pointer Coordinates in D3.js\nDESCRIPTION: Retrieves the x and y coordinates of a pointer event relative to its target. Used for interaction with visualization elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [x, y] = d3.pointer(event);\n```\n\n----------------------------------------\n\nTITLE: Entering New Data Elements in D3.js\nDESCRIPTION: Shows how to append new DOM elements for entering data using the enter() selection.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndiv.enter().append(\"div\").text(d => d);\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with D3 and React (Declarative Approach)\nDESCRIPTION: This snippet demonstrates how to create a line plot using D3 modules in React without direct DOM manipulation. It uses d3-scale for scaling and d3-line for path generation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as d3 from \"d3\";\n\nexport default function LinePlot({\n  data,\n  width = 640,\n  height = 400,\n  marginTop = 20,\n  marginRight = 20,\n  marginBottom = 20,\n  marginLeft = 20\n}) {\n  const x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);\n  const y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);\n  const line = d3.line((d, i) => x(i), y);\n  return (\n    <svg width={width} height={height}>\n      <path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" d={line(data)} />\n      <g fill=\"white\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n        {data.map((d, i) => (<circle key={i} cx={x(i)} cy={y(d)} r=\"2.5\" />))}\n      </g>\n    </svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Enter Selection Example in D3.js\nDESCRIPTION: Demonstrates using enter() selection to create new DOM elements from data where none existed before.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = d3.select(\"body\")\n  .selectAll(\"div\")\n  .data([4, 8, 15, 16, 23, 42])\n  .enter().append(\"div\")\n    .text(d => d);\n```\n\n----------------------------------------\n\nTITLE: Creating HCL Color in D3 JavaScript\nDESCRIPTION: Constructs a new HCL (CIELCh<sub>ab</sub>) color using d3.hcl() function. The example shows creating a yellow color in HCL space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nd3.hcl(\"yellow\") // {h: 99.57458688693687, c: 94.70776566727464, l: 97.60712516622824, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Brush in D3.js\nDESCRIPTION: Creates a brush and attaches it to an SVG group element using selection.call(). The brush has an event listener for the 'brush' event that calls a function named 'brushed' when the brush selection changes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"g\")\n    .attr(\"class\", \"brush\")\n    .call(d3.brush().on(\"brush\", brushed));\n```\n\n----------------------------------------\n\nTITLE: Migrating from rangeBands to Band Scales in D3.js v4\nDESCRIPTION: Comparison between D3.js v3.x ordinal scales with rangeBands and the new band scales in v4.0, which provide more flexible control over band layout.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangeBands([0, width]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = d3.scaleBand()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\n```\n\n----------------------------------------\n\nTITLE: Getting an Array of Elements from a D3 Selection\nDESCRIPTION: Demonstrates using the .nodes() method to get all (non-null) elements in a D3 selection as a standard JavaScript array. This allows using native array methods on the selection elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\").nodes() // [p, p, p, …]\n```\n\n----------------------------------------\n\nTITLE: Custom Curve Interface Implementation in D3.js\nDESCRIPTION: Interface specification for implementing custom curves in D3.js. Includes methods for handling area segments, line segments, and individual points. Used for creating custom curve implementations when built-in curves are insufficient.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Curve {\n  areaStart(): void;  // Indicates start of new area segment\n  areaEnd(): void;    // Indicates end of current area segment\n  lineStart(): void;  // Indicates start of new line segment\n  lineEnd(): void;    // Indicates end of current line segment\n  point(x: number, y: number): void;  // Adds point to current line segment\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Selection in D3.js\nDESCRIPTION: Demonstrates binding new data array to existing DOM elements using D3's data() method with a key function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndiv = div.data([1, 2, 4, 8, 16, 32], d => d);\n```\n\n----------------------------------------\n\nTITLE: Adding Click Event Listener in D3.js\nDESCRIPTION: Adds a click event listener to all paragraph elements on the page. When clicked, the event object is logged to the console.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\").on(\"click\", (event) => console.log(event))\n```\n\n----------------------------------------\n\nTITLE: Applying Zoom Behavior to a Selection in D3\nDESCRIPTION: Applies a zoom behavior to a D3 selection with a callback function that's triggered on zoom events. This pattern is commonly used to initialize zoom functionality on elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nselection.call(d3.zoom().on(\"zoom\", zoomed));\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Elements with D3 SelectorAll\nDESCRIPTION: Demonstrates two equivalent ways to select all descendant div elements using D3's selectAll method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = selection.selectAll(\"div\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = selection.selectAll(d3.selectorAll(\"div\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with D3 and React (Imperative Approach)\nDESCRIPTION: This snippet shows how to create a line plot using D3 modules in React, including DOM-manipulating modules like d3-axis. It uses useRef and useEffect hooks to interact with the DOM.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as d3 from \"d3\";\nimport {useRef, useEffect} from \"react\";\n\nexport default function LinePlot({\n  data,\n  width = 640,\n  height = 400,\n  marginTop = 20,\n  marginRight = 20,\n  marginBottom = 30,\n  marginLeft = 40\n}) {\n  const gx = useRef();\n  const gy = useRef();\n  const x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);\n  const y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);\n  const line = d3.line((d, i) => x(i), y);\n  useEffect(() => void d3.select(gx.current).call(d3.axisBottom(x)), [gx, x]);\n  useEffect(() => void d3.select(gy.current).call(d3.axisLeft(y)), [gy, y]);\n  return (\n    <svg width={width} height={height}>\n      <g ref={gx} transform={`translate(0,${height - marginBottom})`} />\n      <g ref={gy} transform={`translate(${marginLeft},0)`} />\n      <path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" d={line(data)} />\n      <g fill=\"white\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n        {data.map((d, i) => (<circle key={i} cx={x(i)} cy={y(d)} r=\"2.5\" />))}\n      </g>\n    </svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: D3 Selection Filtering Examples\nDESCRIPTION: Examples of filtering D3 selections using both selector strings and functions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst even = d3.selectAll(\"tr\").filter(\":nth-child(even)\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst even = d3.selectAll(\"tr:nth-child(even)\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst even = d3.selectAll(\"tr\").filter((d, i) => i & 1);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst even = d3.selectAll(\"tr\").select(function(d, i) { return i & 1 ? this : null; });\n```\n\n----------------------------------------\n\nTITLE: Loading Text Files with d3.text\nDESCRIPTION: Demonstrates fetching plain text content using d3.text(). This method returns a promise that resolves to the raw text content of the file at the specified URL.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = await d3.text(\"example.txt\");\n```\n\n----------------------------------------\n\nTITLE: Basic Element Modification with D3 Selection Method Chaining\nDESCRIPTION: Sets the class attribute to \"graf\" and the color style to \"red\" on all paragraph elements in the document using method chaining for concise multiple operations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\")\n    .attr(\"class\", \"graf\")\n    .style(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Grouping Data with d3.group() in JavaScript\nDESCRIPTION: Creates an InternMap from key to array of values. This example demonstrates grouping a penguins dataset by species field to create a map of species to arrays of penguins.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst species = d3.group(penguins, (d) => d.species);\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean with D3.js\nDESCRIPTION: Shows how to use d3.mean() to compute the arithmetic mean of numbers, demonstrating both direct array input and accessor function usage.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nd3.mean([1, 2, 2, 2, NaN, 3, null])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.mean(penguins, (d) => d.body_mass_g)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Force in D3 Force Simulation in JavaScript\nDESCRIPTION: Creates a custom force function that moves nodes toward the origin. The function applies a force proportional to each node's distance from the origin, scaled by the alpha parameter and a constant factor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction force(alpha) {\n  for (let i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {\n    node = nodes[i];\n    node.vx -= node.x * k;\n    node.vy -= node.y * k;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Tabular Data to Hierarchy using d3.stratify\nDESCRIPTION: Shows how to transform tabular data representing parent-child relationships into a hierarchical structure using D3's stratify operator. This sets up id and parentId accessors to identify nodes and their relationships.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst root = d3.stratify()\n    .id((d) => d.name)\n    .parentId((d) => d.parent)\n  (table);\n```\n\n----------------------------------------\n\nTITLE: Applying Zoom Transform to HTML Elements via CSS\nDESCRIPTION: Example of applying a D3 zoom transform to HTML elements using CSS transform and transform-origin properties for proper scaling and translation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ndiv.style(\"transform\", \"translate(\" + transform.x + \"px,\" + transform.y + \"px) scale(\" + transform.k + \")\");\ndiv.style(\"transform-origin\", \"0 0\");\n```\n\n----------------------------------------\n\nTITLE: Computing Sum with D3.js\nDESCRIPTION: Demonstrates using d3.sum() to calculate the sum of numbers in an array, with examples of both direct values and accessor function usage. Handles NaN and null values by ignoring them.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd3.sum([1, 2, 2, 2, NaN, 3, null])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.sum(penguins, (d) => d.body_mass_g)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rainbow Color Interpolator with D3.js\nDESCRIPTION: Example showing how to create a custom HSL-based rainbow color interpolator using attrTween. This function returns an interpolator that generates HSL colors based on the transition progress.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.attrTween(\"fill\", () => (t) => `hsl(${t * 360},100%,50%)`);\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Tick Values with D3.js axis.tickValues()\nDESCRIPTION: Demonstrates how to override the automatic tick generator by specifying explicit tick values for a D3.js axis. This example applies specific numeric values to the bottom axis of a visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst axis = d3.axisBottom(x).tickValues([1, 2, 3, 5, 8, 13, 21]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Function with D3 Selection .call() Method\nDESCRIPTION: Demonstrates how to define a reusable function that can be applied to selections using the .call() method. This pattern allows for cleaner code organization and reuse of common selection manipulations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction name(selection, first, last) {\n  selection\n      .attr(\"first-name\", first)\n      .attr(\"last-name\", last);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Stacked Data with D3 and SVG\nDESCRIPTION: Shows how to use the stacked data generated by d3.stack() to create a visualization with SVG. This example creates rectangular elements for each data point in the stack, positioning them according to their stack values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"g\")\n  .selectAll(\"g\")\n  .data(series)\n  .join(\"g\")\n    .attr(\"fill\", d => color(d.key))\n  .selectAll(\"rect\")\n  .data(D => D)\n  .join(\"rect\")\n    .attr(\"x\", d => x(d.data[0]))\n    .attr(\"y\", d => y(d[1]))\n    .attr(\"height\", d => y(d[0]) - y(d[1]))\n    .attr(\"width\", x.bandwidth());\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Date Formatters with D3\nDESCRIPTION: Demonstrates how to create a date formatter using d3.utcFormat with a format specifier and apply it to a Date object to generate a human-readable string representation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatTime = d3.utcFormat(\"%B %d, %Y\");\nformatTime(new Date()); // \"May 31, 2023\"\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with d3.csv\nDESCRIPTION: Demonstrates loading a CSV file using d3.csv(), which is a convenience wrapper around d3.dsv with comma as the delimiter. Returns parsed data as an array of objects.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.csv(\"example.csv\");\n```\n\n----------------------------------------\n\nTITLE: Inverting Values with D3 Linear Scale\nDESCRIPTION: Demonstrates how to use the invert() method to convert range values back to their corresponding domain values. Useful for user interactions like determining data values from mouse positions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([10, 130], [0, 960]);\nx.invert(80); // 20\nx.invert(320); // 50\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes to Elements with D3 Selection\nDESCRIPTION: Adds the CSS class \"foo\" to the selected elements by setting the value parameter to true. The classed method modifies the class attribute or classList property of elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nselection.classed(\"foo\", true)\n```\n\n----------------------------------------\n\nTITLE: D3 Element Selection Examples\nDESCRIPTION: Various examples of selecting DOM elements using D3's select() and selectAll() methods with different selector types.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst svg = d3.select(\"#chart\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst anchor = d3.select(\"a\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.select(document.body).style(\"background\", \"red\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\").on(\"click\", (event) => d3.select(event.currentTarget).style(\"color\", \"red\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.selectAll(\"p\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(document.links).style(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Constructing a D3 Line Generator\nDESCRIPTION: Creates a new line generator with explicit x and y accessors, which will be used to generate SVG path data from an array of data points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line((d) => x(d.Date), (d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Setting the Y Accessor for a D3 Line Generator\nDESCRIPTION: Configures a line generator by setting its y accessor function, which transforms each data point to determine its y-coordinate position.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().y((d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Using bisect() Function on an Array of Dates in JavaScript\nDESCRIPTION: Uses the bisect function (alias for bisectRight) to find an insertion point in a mapped array of dates. This example finds where January 2, 2014 would be inserted in an array of dates extracted from the aapl dataset.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisect(aapl.map((d) => d.Date), new Date(\"2014-01-02\")) // 163\n```\n\n----------------------------------------\n\nTITLE: Applying a bin generator to data in D3\nDESCRIPTION: Demonstrates how to apply a bin generator to a dataset (penguins) to create bins of data points based on the culmen_length_mm property.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bins = d3.bin().value((d) => d.culmen_length_mm)(penguins);\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Scale in D3.js\nDESCRIPTION: Shows how to create a linear scale in D3.js that maps values in the domain [0, 10] to range [0, 100].\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar linear = d3.scaleLinear().domain([0, 10]).range([0, 100]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Features as Separate Paths in D3\nDESCRIPTION: Demonstrates how to render multiple geographic features as separate SVG path elements using D3's data join pattern.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.selectAll()\n  .data(features)\n  .join(\"path\")\n    .attr(\"d\", d3.geoPath());\n```\n\n----------------------------------------\n\nTITLE: Creating a Force Simulation in D3.js\nDESCRIPTION: Demonstrates how to create a new force simulation with an array of nodes. The simulation starts automatically and can be controlled with various methods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst simulation = d3.forceSimulation(nodes);\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Features as a FeatureCollection in D3\nDESCRIPTION: Illustrates how to combine multiple geographic features into a FeatureCollection and render them as a single SVG path.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\")\n    .datum({type: \"FeatureCollection\", features: features})\n    .attr(\"d\", d3.geoPath());\n```\n\n----------------------------------------\n\nTITLE: Accessing Zoom Transform in Event Listener Context\nDESCRIPTION: Shows how to access the current zoom transform within an event listener context using the current element (this) as the node reference.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar transform = d3.zoomTransform(this);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Bisector with a Comparator Function in JavaScript\nDESCRIPTION: Creates a bisector using a comparator function that compares the Date property of an element with a search value. This is equivalent to the accessor version but allows for more control over the comparison logic.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bisector = d3.bisector((d, x) => d.Date - x);\n```\n\n----------------------------------------\n\nTITLE: Explicit D3.js Join Pattern\nDESCRIPTION: Extended version of join() showing explicit enter, update, and exit selections with their default behaviors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\n    enter => enter.append(\"circle\"),\n    update => update,\n    exit => exit.remove()\n  )\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"black\");\n```\n\n----------------------------------------\n\nTITLE: Applying a D3 Transition to Change Background Color in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a D3 transition that smoothly changes the background color of the body element to red. It selects the body, initiates a transition, and then applies the style change.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.select(\"body\")\n  .transition()\n    .style(\"background-color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Collide Force in D3\nDESCRIPTION: This snippet demonstrates how to create a new circle collide force with a specified radius accessor function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/collide.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst collide = d3.forceCollide((d) => d.r);\n```\n\n----------------------------------------\n\nTITLE: Computing Cumulative Sum with D3.js\nDESCRIPTION: Shows how to calculate running totals using d3.cumsum(), returning a Float64Array of cumulative sums. Demonstrates both direct array and accessor function usage.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nd3.cumsum([1, 1, 2, 3, 5])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.cumsum(penguins, (d) => d.body_mass_g)\n```\n\n----------------------------------------\n\nTITLE: D3 Albers Projection Configuration\nDESCRIPTION: Configuration for D3's Albers projection specifically optimized for US map visualization with custom scale and translation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoAlbers().scale(1300 / 975 * width * 0.8).translate([width / 2, height / 2])\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Offset with stackOffsetExpand in D3.js\nDESCRIPTION: Sets the stack offset using d3.stackOffsetExpand, which normalizes the values for each point such that the topline is always at 100%. Used for showing proportional contributions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().offset(d3.stackOffsetExpand);\n```\n\n----------------------------------------\n\nTITLE: Using d3.min to find minimum values in JavaScript\nDESCRIPTION: Returns the minimum value in the given iterable using natural order. Ignores undefined, null and NaN values. An optional accessor function can be used to transform values before comparison.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min([3, 2, 1, 1, 6, 2, 4]) // 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min([\"bob\", \"alice\", \"carol\"]) // \"alice\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min([new Date(\"2018-01-01\"), new Date(\"2011-03-09\")]) // 2011-03-09\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min([3, 2, 1, NaN, 4]) // 1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min(alphabet, (d) => d.frequency) // 0.00074\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min(alphabet, (d) => d.letter === \"Z\" ? NaN : d.frequency) // 0.00095\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min([]) // undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.min(alphabet, (d) => d.doesnotexist) // undefined\n```\n\n----------------------------------------\n\nTITLE: Checking if an Element Has a CSS Class with D3 Selection\nDESCRIPTION: Checks if the first non-null element in the selection has the class \"foo\" and returns a boolean. This is useful when you need to test for the presence of a specific class.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nselection.classed(\"foo\") // true, perhaps\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Wheel Behavior in D3 Zoom\nDESCRIPTION: Example of how to prevent the default wheel behavior when using D3 zoom, regardless of the scale extent.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection\n    .call(zoom)\n    .on(\"wheel\", event => event.preventDefault());\n```\n\n----------------------------------------\n\nTITLE: Importing Specific D3 Modules via CDN\nDESCRIPTION: This snippet demonstrates how to import specific D3 modules (d3-force) via a CDN. It shows how to create a force simulation with collision and x-force, setting up a basic physics-based visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n\nimport {forceSimulation, forceCollide, forceX} from \"https://cdn.jsdelivr.net/npm/d3-force@3/+esm\";\n\nconst nodes = [{}, {}];\nconst simulation = forceSimulation(nodes)\n    .force(\"x\", forceX())\n    .force(\"collide\", forceCollide(5))\n    .on(\"tick\", () => console.log(nodes[0].x));\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying D3 Drag Behavior to a Selection\nDESCRIPTION: Demonstrates how to instantiate a drag behavior and apply it to a selection of elements with the class 'node'. The 'start' event listener is set to a function named 'started'.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\".node\").call(d3.drag().on(\"start\", started));\n```\n\n----------------------------------------\n\nTITLE: Creating Detached Elements with D3.js\nDESCRIPTION: Examples of creating detached DOM elements using d3.create() with different namespace specifications. Shows how to create SVG and HTML elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nd3.create(\"svg\") // equivalent to svg:svg\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.create(\"svg:svg\") // more explicitly\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.create(\"svg:g\") // an SVG G element\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.create(\"g\") // an HTML G (unknown) element\n```\n\n----------------------------------------\n\nTITLE: Creating a Diverging Color Scale with D3 Linear Scale\nDESCRIPTION: Creates a piecewise linear scale with multiple domain and range values to produce a diverging color scale, interpolating between red, white, and green.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear([-1, 0, 1], [\"red\", \"white\", \"green\"]);\ncolor(-0.5); // \"rgb(255, 128, 128)\"\ncolor(+0.5); // \"rgb(128, 192, 128)\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Different Date Components with D3\nDESCRIPTION: Shows how to extract and format specific components of a date using d3.timeFormat with different format specifiers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatMonth = d3.timeFormat(\"%B\"),\n    formatDay = d3.timeFormat(\"%A\"),\n    date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)\n\nformatMonth(date); // \"May\"\nformatDay(date); // \"Thursday\"\n```\n\n----------------------------------------\n\nTITLE: Setting the X Accessor for a D3 Line Generator\nDESCRIPTION: Configures a line generator by setting its x accessor function, which transforms each data point to determine its x-coordinate position.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().x((d) => x(d.Date));\n```\n\n----------------------------------------\n\nTITLE: Styling D3 Axes in D3 v3.x\nDESCRIPTION: Demonstrates the old way of styling axes in D3 version 3.x, requiring both CSS styling and JavaScript code to render properly formatted axes.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<style>\n\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font: 10px sans-serif;\n}\n\n</style>\n<script>\n\nd3.select(\".axis\")\n    .call(d3.svg.axis()\n        .scale(x)\n        .orient(\"bottom\"));\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Path with a D3 Line Generator\nDESCRIPTION: Shows how to generate an SVG path element using a line generator with data, applying a stroke color using the 'currentColor' value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\").attr(\"d\", line(data)).attr(\"stroke\", \"currentColor\");\n```\n\n----------------------------------------\n\nTITLE: Initializing D3.js Pie Generator in JavaScript\nDESCRIPTION: Creates a new pie generator with default settings using d3.pie(). This generator can be used to compute the necessary angles for pie or donut charts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie();\n```\n\n----------------------------------------\n\nTITLE: Generating Ticks with D3.js in JavaScript\nDESCRIPTION: The d3.ticks() function generates an array of uniformly-spaced, nicely-rounded values between start and stop. It returns approximately count + 1 values, each being a power of ten multiplied by 1, 2 or 5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.ticks(1, 9, 5) // [2, 4, 6, 8]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.ticks(1, 9, 20) // [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9]\n```\n\n----------------------------------------\n\nTITLE: D3 Standard SI Prefix Formatting\nDESCRIPTION: Shows D3's standard SI-prefix formatting behavior using the 's' format directive.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = d3.format(\".0s\");\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1M\"\n```\n\n----------------------------------------\n\nTITLE: Chaining Transitions with Relative Delays in D3.js\nDESCRIPTION: Shows how to chain multiple transitions with relative delays. The delay of each transition is now relative to the previous transition in the chain, making it easier to create sequential animations.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\n```\n\n----------------------------------------\n\nTITLE: Key-based Data Joining with D3.js\nDESCRIPTION: Example of joining data to elements using a key function that matches elements by name/id, demonstrating object constancy in data binding.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  {name: \"Locke\", number: 4},\n  {name: \"Reyes\", number: 8},\n  {name: \"Ford\", number: 15},\n  {name: \"Jarrah\", number: 16},\n  {name: \"Shephard\", number: 23},\n  {name: \"Kwon\", number: 42}\n];\n\nd3.selectAll(\"div\")\n  .data(data, function(d) { return d ? d.name : this.id; })\n    .text(d => d.number);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Scale Time Formatting in D3\nDESCRIPTION: Creates a conditional time formatting function that selects different format patterns based on the time scale (milliseconds, seconds, minutes, etc.) using d3 time intervals.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatMillisecond = d3.utcFormat(\".%L\"),\n    formatSecond = d3.utcFormat(\":%S\"),\n    formatMinute = d3.utcFormat(\"%I:%M\"),\n    formatHour = d3.utcFormat(\"%I %p\"),\n    formatDay = d3.utcFormat(\"%a %d\"),\n    formatWeek = d3.utcFormat(\"%b %d\"),\n    formatMonth = d3.utcFormat(\"%B\"),\n    formatYear = d3.utcFormat(\"%Y\");\n\nfunction multiFormat(date) {\n  return (d3.utcSecond(date) < date ? formatMillisecond\n      : d3.utcMinute(date) < date ? formatSecond\n      : d3.utcHour(date) < date ? formatMinute\n      : d3.utcDay(date) < date ? formatHour\n      : d3.utcMonth(date) < date ? (d3.utcWeek(date) < date ? formatDay : formatWeek)\n      : d3.utcYear(date) < date ? formatMonth\n      : formatYear)(date);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with D3 and Svelte (Reactive Approach)\nDESCRIPTION: This snippet shows how to create a line plot using D3 modules in Svelte, including DOM-manipulating modules like d3-axis. It uses Svelte's reactive statements for efficient updates.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import * as d3 from 'd3';\n\n  export let data;\n  export let width = 640;\n  export let height = 400;\n  export let marginTop = 20;\n  export let marginRight = 20;\n  export let marginBottom = 30;\n  export let marginLeft = 40;\n\n  let gx;\n  let gy;\n\n  $: x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);\n  $: y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);\n  $: line = d3.line((d, i) => x(i), y);\n  $: d3.select(gy).call(d3.axisLeft(y));\n  $: d3.select(gx).call(d3.axisBottom(x));\n</script>\n<svg width={width} height={height}>\n  <g bind:this={gx} transform=\"translate(0,{height - marginBottom})\" />\n  <g bind:this={gy} transform=\"translate({marginLeft},0)\" />\n  <path fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" d={line(data)} />\n  <g fill=\"white\" stroke=\"currentColor\" stroke-width=\"1.5\">\n    {#each data as d, i}\n      <circle key={i} cx={x(i)} cy={y(d)} r=\"2.5\" />\n    {/each}\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering an Area Path with D3 in SVG in JavaScript\nDESCRIPTION: Shows how to use an area generator to create an SVG path. The area generator is called with data and the resulting path data string is set as the 'd' attribute of a path element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\").attr(\"d\", area(data));\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with D3 and Svelte (Declarative Approach)\nDESCRIPTION: This snippet demonstrates how to create a line plot using D3 modules in Svelte without direct DOM manipulation. It uses d3-shape for line generation and d3-scale for scaling.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import * as d3 from 'd3';\n\n  export let data;\n  export let width = 640;\n  export let height = 400;\n  export let marginTop = 20;\n  export let marginRight = 20;\n  export let marginBottom = 20;\n  export let marginLeft = 20;\n\n  $: x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);\n  $: y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);\n  $: line = d3.line((d, i) => x(i), y);\n</script>\n<svg width={width} height={height}>\n  <path fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" d={line(data)} />\n  <g fill=\"white\" stroke=\"currentColor\" stroke-width=\"1.5\">\n    {#each data as d, i}\n      <circle key={i} cx={x(i)} cy={y(d)} r=\"2.5\" />\n    {/each}\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using the Global tickFormat Function in D3.js\nDESCRIPTION: Demonstrates using the standalone tickFormat function to create a formatter with automatically computed precision based on fixed intervals between values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = d3.tickFormat(0, 1, 20);\nf(1); // \"1.00\"\n```\n\n----------------------------------------\n\nTITLE: Getting Text Content with D3 Selection\nDESCRIPTION: Retrieves the text content from the first non-null element in the selection. This returns the combined text of the element and its descendants without any HTML tags.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nselection.text() // \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Precision for Symbol Path Generation\nDESCRIPTION: Configures a symbol generator to use 3 digits of precision after the decimal point in path data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = d3.symbol().digits(3);\n```\n\n----------------------------------------\n\nTITLE: Generating Ranges with D3.js in JavaScript\nDESCRIPTION: The d3.range() function returns an array containing an arithmetic progression. It's often used to iterate over a sequence of uniformly-spaced numeric values, such as array indexes or linear scale ticks.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.range(6) // [0, 1, 2, 3, 4, 5]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.range(5, -1, -1) // [5, 4, 3, 2, 1, 0]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.range(Infinity) // []\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.range(0, 1, 0.2) // [0, 0.2, 0.4, 0.6000000000000001, 0.8]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.range(0, 1, 1 / 49) // 👎 returns 50 elements!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.range(49).map((d) => d / 49) // 👍 returns 49 elements\n```\n\n----------------------------------------\n\nTITLE: Using d3.format for Consistent Number Formatting\nDESCRIPTION: This example demonstrates how to use d3.format to create a formatter function that consistently formats decimal numbers to one decimal place.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = d3.format(\".1f\");\nfor (let i = 0; i < 10; ++i) {\n  console.log(f(0.1 * i));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 Arc Generator in Vue.js\nDESCRIPTION: Sets up reactive variables for arc generator parameters in a Vue.js component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport ExampleArcs from \"../components/ExampleArcs.vue\";\nimport {ref} from \"vue\";\n\nconst cornerRadius = ref(18);\nconst padAngle = ref(0.03);\nconst padRadius = ref(200);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: D3 Negative Number Formatting\nDESCRIPTION: Demonstrates different options for formatting negative numbers, including parentheses and currency symbols.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\"+.0f\")(-42);  // \"-42\"\nd3.format(\"(.0f\")(-42);  // \"(42)\"\nd3.format(\"+$.0f\")(-42); // \"-$42\"\nd3.format(\"($.0f\")(-42); // \"($42)\"\n```\n\n----------------------------------------\n\nTITLE: Custom Percentage Formatting with Global tickFormat in D3.js\nDESCRIPTION: Shows how to create a custom percentage format using the standalone tickFormat function with a format specifier and range parameters.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = d3.tickFormat(-1, 1, 5, \"+%\");\nf(-0.5); // \"-50%\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Groups with d3.groupSort() in JavaScript\nDESCRIPTION: Groups elements by a key function, sorts the groups by a comparator, and returns an array of keys in sorted order. This example sorts penguin species by ascending median body mass.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nd3.groupSort(penguins, (D) => d3.median(D, (d) => d.body_mass_g), (d) => d.species) // [\"Adelie\", \"Chinstrap\", \"Gentoo\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Cartesian Product with d3.cross in JavaScript\nDESCRIPTION: Creates a Cartesian product of multiple iterables, returning all possible combinations as arrays. Can optionally use a reducer function to transform each combination.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.cross([1, 2], [\"x\", \"y\"]) // [[1, \"x\"], [1, \"y\"], [2, \"x\"], [2, \"y\"]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.cross([1, 2], [\"x\", \"y\"], (a, b) => a + b) // [\"1x\", \"1y\", \"2x\", \"2y\"]\n```\n\n----------------------------------------\n\nTITLE: Using D3 timeFormat Method\nDESCRIPTION: Demonstrates the basic usage of d3.timeFormat method to create a date formatter with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeFormat(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Sequential Color Scale\nDESCRIPTION: Example of creating a continuous sequential color scale using D3's Blues interpolator with scaleSequential\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential(d3.interpolateBlues);\n```\n\n----------------------------------------\n\nTITLE: Setting Domain for D3 Linear Scale\nDESCRIPTION: Sets the domain (input values) for a linear scale. The domain must contain two or more numeric values in ascending or descending order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear().domain([10, 130]);\n```\n\n----------------------------------------\n\nTITLE: Setting Tick Format via axis.ticks() in D3.js\nDESCRIPTION: Demonstrates setting both the number of ticks and their format in a single method call. This approach automatically determines appropriate format precision based on the tick interval.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naxis.ticks(10, \",f\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Scale with Domain and Range in D3.js\nDESCRIPTION: Constructs a new linear scale with specified domain and range. This example creates a scale that maps values from 0-100 to colors from red to blue.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.scaleLinear([0, 100], [\"red\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with D3 and Plot for Delaunay/Voronoi Visualization\nDESCRIPTION: Sets up a Vue component that creates a random set of points and uses d3's random number generator with a fixed seed for reproducibility. The script imports the necessary libraries and prepares data for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef} from \"vue\";\nimport PlotRender from \"./components/PlotRender.js\";\n\nconst random = d3.randomNormal.source(d3.randomLcg(42))();\nconst points = Array.from({length: 1000}, () => [random(), random()]);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Searching D3 Quadtree within Rectangular Extent\nDESCRIPTION: Implements a search function that visits the quadtree and returns all nodes within a specified rectangular extent. It uses the quadtree.visit() method and ignores quads that cannot contain relevant nodes for efficiency.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction search(quadtree, xmin, ymin, xmax, ymax) {\n  const results = [];\n  quadtree.visit((node, x1, y1, x2, y2) => {\n    if (!node.length) {\n      do {\n        let d = node.data;\n        if (d[0] >= xmin && d[0] < xmax && d[1] >= ymin && d[1] < ymax) {\n          results.push(d);\n        }\n      } while (node = node.next);\n    }\n    return x1 >= xmax || y1 >= ymax || x2 < xmin || y2 < ymin;\n  });\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a D3.js Quantile Scale\nDESCRIPTION: Demonstrates how to create an exact copy of a quantile scale, which can then be modified independently without affecting the original scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst c1 = d3.scaleQuantile(d3.schemeBlues[5]);\nconst c2 = c1.copy();\n```\n\n----------------------------------------\n\nTITLE: Using Ordinal Scale for Value Mapping\nDESCRIPTION: Shows how to use an ordinal scale to map a domain value to its corresponding range value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolor(\"a\") // \"red\"\n```\n\n----------------------------------------\n\nTITLE: Chaining D3.js Transitions with transition.transition()\nDESCRIPTION: Demonstrates how to create a sequence of chained transitions on selected elements. This example first transitions the fill color to green, then to red, and finally to brown after a delay before removing the elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Logarithmic Scale in D3.js\nDESCRIPTION: Creates a new logarithmic scale with a domain of [1, 10] and range of [0, 960]. Used for mapping values using logarithmic transformation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLog([1, 10], [0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Applying Color Encoding with D3 Linear Scale\nDESCRIPTION: Shows how to use a linear scale for color encoding. The scale interpolates between brown and steelblue based on input values between 10 and 100.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear([10, 100], [\"brown\", \"steelblue\"]);\ncolor(20); // \"rgb(154, 52, 57)\"\ncolor(50); // \"rgb(123, 81, 103)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Names with d3.csv in D3.js\nDESCRIPTION: Demonstrates how to access column names from parsed CSV data using the new columns property in D3.js v4. This example loads a CSV file and logs the column names to the console.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csv(\"cars.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data.columns); // [\"Year\", \"Make\", \"Model\", \"Length\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Copy Node Subtree in D3.js\nDESCRIPTION: Creates a deep copy of a node's subtree while maintaining references to the original data. The copied node becomes the root of a new tree with null parent and zero depth.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnode.copy()\n```\n\n----------------------------------------\n\nTITLE: Generating Ticks with D3.js Time Scales\nDESCRIPTION: Example of generating representative dates (ticks) from a time scale's domain. These ticks are uniformly-spaced, have sensible values, and are guaranteed to be within the extent of the domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleTime();\nx.ticks(10);\n// [Sat Jan 01 2000 00:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 03:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 06:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 09:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 12:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 15:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 18:00:00 GMT-0800 (PST),\n//  Sat Jan 01 2000 21:00:00 GMT-0800 (PST),\n//  Sun Jan 02 2000 00:00:00 GMT-0800 (PST)]\n```\n\n----------------------------------------\n\nTITLE: Smooth Transition to Reset Zoom in D3\nDESCRIPTION: Creates an animated transition that resets the zoom transform to the identity transform over 750 milliseconds. This provides a smoother user experience than instant resets.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nselection.transition().duration(750).call(zoom.transform, d3.zoomIdentity);\n```\n\n----------------------------------------\n\nTITLE: Configuring a D3 Line Generator with Method Chaining\nDESCRIPTION: Demonstrates configuring a line generator using method chaining to set x and y accessors separately, which is functionally equivalent to providing accessors to the constructor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line()\n    .x((d) => x(d.Date))\n    .y((d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Applying Position Encoding with D3 Linear Scale\nDESCRIPTION: Demonstrates how to apply a linear scale for position encoding. The scale maps domain values from 10-130 to range values from 0-960.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([10, 130], [0, 960]);\nx(20); // 80\nx(50); // 320\n```\n\n----------------------------------------\n\nTITLE: Creating a Band Scale in D3.js\nDESCRIPTION: Constructs a new band scale with the specified domain and range. Band scales are typically used for bar charts with categorical dimensions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]);\n```\n\n----------------------------------------\n\nTITLE: D3 Axis Initialization\nDESCRIPTION: Example of creating and positioning a D3 axis within an SVG container using transform attribute.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst gx = svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x));\n```\n\n----------------------------------------\n\nTITLE: Setting the size of a D3 treemap layout\nDESCRIPTION: Sets the treemap layout's size to the specified [width, height] array or returns the current size if no argument is provided. Default size is [1, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.size(*size*)\n```\n\n----------------------------------------\n\nTITLE: Getting Unknown Value Setting of D3 Linear Scale\nDESCRIPTION: Retrieves the current unknown value setting of a linear scale using the unknown() method without arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.unknown() // \"#ccc\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Center Accessor for D3 Geo Circle\nDESCRIPTION: The default accessor function for a circle's center in the geoCircle generator, returning [0, 0] coordinates (null island) in degrees.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction center() {\n  return [0, 0];\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Elements with D3.js Selection\nDESCRIPTION: Example of cloning selected elements and inserting them immediately after the original elements. The deep parameter determines whether descendant nodes are also cloned.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nselection.select(function() {\n  return this.parentNode.insertBefore(this.cloneNode(deep), this.nextSibling);\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Quantiles with D3.js\nDESCRIPTION: Examples of computing quantiles using d3.quantile() with various probability values (p). Uses R-7 method for quantile calculation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [0, 10, 30];\nd3.quantile(numbers, 0);\nd3.quantile(numbers, 0.5);\nd3.quantile(numbers, 1);\nd3.quantile(numbers, 0.25);\nd3.quantile(numbers, 0.75);\nd3.quantile(numbers, 0.1);\n```\n\n----------------------------------------\n\nTITLE: Using Time Intervals for Custom Ticks in D3.js\nDESCRIPTION: Example of generating ticks at specific time intervals using d3-time's interval.every method. This allows for precise control over tick spacing in a time scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleUtc().domain([new Date(\"2000-01-01T00:00Z\"), new Date(\"2000-01-01T02:00Z\")]);\nx.ticks(d3.utcMinute.every(15));\n// [2000-01-01T00:00Z,\n//  2000-01-01T00:15Z,\n//  2000-01-01T00:30Z,\n//  2000-01-01T00:45Z,\n//  2000-01-01T01:00Z,\n//  2000-01-01T01:15Z,\n//  2000-01-01T01:30Z,\n//  2000-01-01T01:45Z,\n//  2000-01-01T02:00Z]\n```\n\n----------------------------------------\n\nTITLE: Configuring Orthographic Projection in D3.js\nDESCRIPTION: Creates an orthographic projection with rotation, extent fitting, and precision settings. This projection simulates viewing the Earth from an infinite distance.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoOrthographic().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: \"Sphere\"}).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Default Y-Coordinate Accessor for Y Force in D3\nDESCRIPTION: Defines the default y-coordinate accessor function for the y-axis force. This function returns a constant value of 0, setting the default target y-position for nodes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction y() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using precisionFixed for Decimal Precision in D3.js\nDESCRIPTION: The precisionFixed function calculates appropriate decimal precision for fixed-point notation based on the step size between values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.precisionFixed(0.01) // 2\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Link Shorthand in D3.js\nDESCRIPTION: Demonstrates the shorthand method for creating a link with curveBumpX, suitable for tree diagrams rooted on the left edge of the display.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.link(d3.curveBumpX);\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Point in D3 Quadtree\nDESCRIPTION: Demonstrates how to use the quadtree.find() method to locate the closest point to given coordinates. The method returns the datum closest to the specified position within an optional search radius.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntree.find({{findState.x.toFixed(3)}}, {{findState.y.toFixed(3)}}) // {{points[findState.i] && `[${points[findState.i].map((p) => p.toFixed(3)).join(\", \")}]`}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.find(10, 10, 1) // undefined\n```\n\n----------------------------------------\n\nTITLE: Multi-level Grouping with d3.group() in JavaScript\nDESCRIPTION: Creates a nested InternMap by specifying multiple key functions. This example groups penguins first by species and then by sex.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesSex = d3.group(penguins, (d) => d.species, (d) => d.sex)\n```\n\n----------------------------------------\n\nTITLE: D3 Albers USA Projection Configuration\nDESCRIPTION: Configuration for D3's Albers USA projection, a composite projection specifically designed for US map visualization including Alaska and Hawaii.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoAlbersUsa().scale(1300 / 975 * width * 0.8).translate([width / 2, height / 2])\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Scale in D3.js\nDESCRIPTION: Example of creating a time scale with specified domain and range, and using it to map dates to positions and vice versa. The scale converts dates to numerical values and back.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleTime([new Date(2000, 0, 1), new Date(2000, 0, 2)], [0, 960]);\nx(new Date(2000, 0, 1, 5)); // 200\nx(new Date(2000, 0, 1, 16)); // 640\nx.invert(200); // Sat Jan 01 2000 05:00:00 GMT-0800 (PST)\nx.invert(640); // Sat Jan 01 2000 16:00:00 GMT-0800 (PST)\n```\n\n----------------------------------------\n\nTITLE: Creating a Category-Based Symbol Type Generator\nDESCRIPTION: Creates a symbol generator that dynamically determines the symbol type based on a category property using an ordinal scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbolType = d3.scaleOrdinal(d3.symbolsFill);\nconst symbol = d3.symbol().type((d) => symbolType(d.category));\n```\n\n----------------------------------------\n\nTITLE: Formatting CSV with Specific Column Order\nDESCRIPTION: Formats data as a CSV string with explicit control over which columns to include and their order, using the optional columns parameter to d3.csvFormat.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst string = d3.csvFormat(data, [\"year\", \"make\", \"model\", \"length\"]);\n```\n\n----------------------------------------\n\nTITLE: Interpolating arrays in D3.js\nDESCRIPTION: Shows how d3.interpolateArray can be used to interpolate between two arrays. The function creates interpolators for corresponding elements and uses static values for extra elements in the second array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateArray([0, 0, 0], [1, 2, 3])(0.5) // [0.5, 1, 1.5]\n```\n\n----------------------------------------\n\nTITLE: Full-Precision Summation with D3 fsum in JavaScript\nDESCRIPTION: Calculates the full-precision sum of an array of numbers using D3's fsum function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.fsum([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]) // 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Defined Accessor\nDESCRIPTION: Shows how to retrieve the currently configured defined accessor function from a line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nline.defined() // (d) => !isNaN(d.Close)\n```\n\n----------------------------------------\n\nTITLE: Creating a D3 Drag Behavior in JavaScript\nDESCRIPTION: Creates a new drag behavior that can be applied to DOM elements. The returned behavior is both an object and a function that can be applied to selections via selection.call.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst drag = d3.drag();\n```\n\n----------------------------------------\n\nTITLE: Loading Text Files with d3.text\nDESCRIPTION: Demonstrates how to load a text file using d3.text(). This method fetches a text file from a specified URL and returns a promise that resolves to the file's contents as a string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = await d3.text(\"hello-world.txt\"); // \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Using the squarify tiling method in D3 treemap\nDESCRIPTION: The default tiling method that implements the squarified treemap algorithm by Bruls et al., which seeks to produce rectangles with a given aspect ratio, typically the golden ratio.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemapSquarify(*node*, *x0*, *y0*, *x1*, *y1*)\n```\n\n----------------------------------------\n\nTITLE: Creating Pairs from Adjacent Elements with d3.pairs in JavaScript\nDESCRIPTION: Returns an array of adjacent pairs of elements from an iterable. Can also use a reducer function to transform each pair into a single value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.pairs([1, 2, 3, 4]) // [[1, 2], [2, 3], [3, 4]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.pairs([1, 1, 2, 3, 5], (a, b) => b - a) // [0, 1, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: Computing Convex Hull of Points with D3\nDESCRIPTION: This function computes the convex hull of a set of points using Andrew's monotone chain algorithm. It returns an array of points forming the hull in counterclockwise order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.polygonHull(points) // [[3.0872864263338777, -1.300100095019402], [1.6559368816733773, -2.5092525689499605], …]\n```\n\n----------------------------------------\n\nTITLE: Creating a Brighter Color in D3.js\nDESCRIPTION: Demonstrates how to create a brighter version of a color using the brighter() method with a specified intensity.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").brighter(1) // {r: 100, g: 185.71428571428572, b: 257.14285714285717, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Using D3's interpolateTransformSvg Function in JavaScript\nDESCRIPTION: Demonstrates using the d3.interpolateTransformSvg function to interpolate between two SVG transform strings. The example shows interpolation between a skew transform and a combined skew/translate transform.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/transform.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nd3.interpolateTransformSvg(\"skewX(-60)\", \"skewX(60) translate(280,0)\") // \"translate(140,0) skewX(0)\"\n```\n\n----------------------------------------\n\nTITLE: Custom Row Conversion with d3.dsv\nDESCRIPTION: Demonstrates how to use a row conversion function with d3.dsv() to transform and filter data during parsing. The conversion function maps each row to a more specific representation with type conversions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.dsv(\",\", \"example.csv\", (d) => {\n  return {\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\n    make: d.Make,\n    model: d.Model,\n    length: +d.Length // convert \"Length\" column to number\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a D3 Area Generator with Method Chaining in JavaScript\nDESCRIPTION: Demonstrates how to create an area generator using method chaining to set x, y0, and y1 accessors. This is equivalent to the previous example but uses a more explicit syntax with separate method calls.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area()\n    .x((d) => x(d.Date))\n    .y0(y(0))\n    .y1((d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Iterating Over D3 Hierarchy Descendants in JavaScript\nDESCRIPTION: Demonstrates how to iterate over the descendants of a D3 hierarchy node using the iterator protocol.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const descendant of node) {\n  console.log(descendant);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rainbow Sequential Scale in JavaScript\nDESCRIPTION: Creates a sequential scale with a custom interpolator function that generates a rainbow color scheme. The interpolator converts a t-value (0-1) to an HSL color string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rainbow = d3.scaleSequential((t) => d3.hsl(t * 360, 1, 0.5) + \"\");\n```\n\n----------------------------------------\n\nTITLE: Applying Partition Layout to Hierarchical Data in D3\nDESCRIPTION: Applies the partition layout to a root hierarchy node, assigning x0, y0, x1, and y1 properties to each node for positioning. Requires prior calling of root.sum() and optionally root.sort().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/partition.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n*partition*(*root*)\n```\n\n----------------------------------------\n\nTITLE: Applying a D3 Line Generator to SVG Path Element\nDESCRIPTION: Shows how to use a line generator to compute the 'd' attribute of an SVG path element from data. This binds data to the path and sets the path definition using the line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npath.datum(data).attr(\"d\", line);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the current value accessor from a bin generator in D3\nDESCRIPTION: Shows how to retrieve the current value accessor function from a bin generator, which by default returns the accessor that extracts the culmen_length_mm property.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbin.value() // (d) => d.culmen_length_mm\n```\n\n----------------------------------------\n\nTITLE: Getting Band Width in D3 Scale\nDESCRIPTION: Returns the width of each band in the band scale. This is the actual width of the rectangular space allocated for each value in the domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nx.bandwidth() // 50.8235294117647\n```\n\n----------------------------------------\n\nTITLE: Setting the Curve Factory for a D3 Line Generator\nDESCRIPTION: Configures a line generator to use a specific curve interpolation method, in this case using a step function to create a stepped line.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().curve(d3.curveStep);\n```\n\n----------------------------------------\n\nTITLE: Merging Arrays with d3.merge in JavaScript\nDESCRIPTION: Flattens an iterable of iterables into a single array. More convenient than array.concat when working with arrays of arrays or iterables of iterables.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.merge([[1], [2, 3]]) // [1, 2, 3]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.merge(new Set([new Set([1]), new Set([2, 3])])) // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using D3 timeParse Method\nDESCRIPTION: Shows the basic usage of d3.timeParse method to create a date parser with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeParse(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Controlling Step Size in nice() Method with Count Parameter in D3.js\nDESCRIPTION: Demonstrates how to use the count parameter with nice() to have greater control over the step size used to extend the domain bounds.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([0.241079, 0.969679], [0, 960]).nice(40);\nx.domain(); // [0.24, 0.98]\n```\n\n----------------------------------------\n\nTITLE: Setting Staggered Transition Delay in D3\nDESCRIPTION: Sets a staggered delay for transitions across a set of elements. The delay is calculated as a multiple of the element's index.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.delay((d, i) => i * 10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Zoom Interpolator in JavaScript using D3\nDESCRIPTION: Demonstrates how to create a zoom interpolator between two views using d3.interpolateZoom. The interpolator calculates intermediate values for smooth transitions between different zoom levels and positions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/zoom.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.interpolateZoom([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 126.04761005270991]\n```\n\n----------------------------------------\n\nTITLE: Creating HSL Color in D3 JavaScript\nDESCRIPTION: Constructs a new HSL color using d3.hsl() function. The example shows creating a yellow color in HSL space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nd3.hsl(\"yellow\") // {h: 60, s: 1, l: 0.5, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Using d3.extent to find value range in JavaScript\nDESCRIPTION: Returns the minimum and maximum values in an iterable as a two-element array [min, max]. An optional accessor function can be provided to transform values before comparison.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.extent([3, 2, 1, 1, 6, 2, 4]) // [1, 6]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.extent(alphabet, (d) => d.frequency) // [0.00074, 0.12702]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.extent(alphabet, (d) => d.doesnotexist) // [undefined, undefined]\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV Data with d3.csvParse\nDESCRIPTION: Parses a CSV string into an array of objects with column names as properties. The result includes a columns property with the column names in order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nd3.csvParse(\"foo,bar\\n1,2\") // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Documents with d3.html\nDESCRIPTION: Shows how to fetch and parse an HTML file using d3.html(). This method fetches the file as text and then parses it as HTML, returning a DOM Document object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await d3.html(\"example.html\");\n```\n\n----------------------------------------\n\nTITLE: Constructing D3 Arc Generator with Default Settings\nDESCRIPTION: Shows how to create a new D3 arc generator with default settings.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc();\n```\n\n----------------------------------------\n\nTITLE: Using Quantile Scales to Map Values in D3.js\nDESCRIPTION: Demonstrates how to use a quantile scale to map numeric values to corresponding values in the output range, in this case mapping penguin weights to color values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolor(3000); // \"#eff3ff\"\ncolor(4000); // \"#6baed6\"\ncolor(5000); // \"#08519c\"\n```\n\n----------------------------------------\n\nTITLE: Chained D3 Treemap Layout Configuration in JavaScript\nDESCRIPTION: Demonstrates a more concise way to configure and apply a D3 treemap layout using method chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.treemap()\n    .size([width, height])\n    .padding(2)\n  (root\n      .sum((d) => d.value)\n      .sort((a, b) => b.height - a.height || b.value - a.value))\n  .descendants()\n```\n\n----------------------------------------\n\nTITLE: Creating a Geographic Path Generator for SVG in JavaScript\nDESCRIPTION: Demonstrates how to create a new geographic path generator with a specified projection for rendering SVG paths.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.geoPath(projection); // for SVG\n```\n\n----------------------------------------\n\nTITLE: Setting Band Scale Alignment in D3\nDESCRIPTION: Sets the alignment of the band scale which determines how outer padding is distributed in the range. The alignment value must be in the range [0, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]).align({{align}});\n```\n\n----------------------------------------\n\nTITLE: Generating Bates Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Shows how to use d3.randomBates() to generate random numbers with a Bates distribution, using 3 independent variables.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomBates(3) // generates numbers between 0 and 1\n```\n\n----------------------------------------\n\nTITLE: Creating a D3 Quadtree\nDESCRIPTION: Demonstrates different ways to create a new quadtree using d3.quadtree(), including with and without initial data and custom accessors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().addAll(data);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().x(x).y(y).addAll(data);\n```\n\n----------------------------------------\n\nTITLE: Using d3.least to find minimum elements with custom comparators in JavaScript\nDESCRIPTION: Returns the least element of an iterable according to a specified comparator or accessor function. The comparator can be a two-argument function or a single-argument accessor with natural ordering.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.least(alphabet, (a, b) => a.frequency - b.frequency) // {letter: \"Z\", frequency: 0.00074}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.least(alphabet, (a, b) => b.frequency - a.frequency) // {letter: \"E\", frequency: 0.12702}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.least(alphabet, (d) => d.frequency) // {letter: \"Z\", frequency: 0.00074}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.least(alphabet, (d) => -d.frequency) // {letter: \"E\", frequency: 0.12702}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.least(alphabet.map((d) => d.frequency)) // 0.00074\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.least([]) // undefined\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequential Scale with Default Domain in JavaScript\nDESCRIPTION: Creates a sequential scale with the default domain [0, 1] and the Blues color interpolator. When domain is not specified, it defaults to [0, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential(d3.interpolateBlues);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Events in JavaScript\nDESCRIPTION: Shows how to dispatch custom events after handling a native click event, preserving the current context and arguments using the apply() method of the dispatch object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on(\"click\", function() {\n  dispatch.apply(\"custom\", this, arguments);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Render Context for D3 Geographic Path Generator\nDESCRIPTION: Illustrates how to set the render context for a geographic path generator to use Canvas rendering.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst path = d3.geoPath().context(context);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequential Scale with Array Output Range in JavaScript\nDESCRIPTION: Creates a sequential scale with an array output range instead of an interpolator function. The array is automatically converted to an interpolator using d3.interpolate.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential([\"red\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Context for D3.js Arc Generator\nDESCRIPTION: Demonstrates how to set the rendering context for a D3 arc generator to draw on a canvas element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst arc = d3.arc().context(context);\n```\n\n----------------------------------------\n\nTITLE: Initializing a D3 Force Simulation with Multiple Forces in JavaScript\nDESCRIPTION: Creates a new D3 force simulation with nodes and assigns multiple forces including charge repulsion, link constraints, and centering force. This is a common pattern for graph layout visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst simulation = d3.forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"link\", d3.forceLink(links))\n    .force(\"center\", d3.forceCenter());\n```\n\n----------------------------------------\n\nTITLE: Creating a Format Function with d3.format\nDESCRIPTION: This snippet shows how to create a reusable format function using d3.format, which can be used to format numbers with two decimal places.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = d3.format(\".2f\");\n```\n\n----------------------------------------\n\nTITLE: Applying a treemap layout to hierarchical data in D3\nDESCRIPTION: Lays out the specified hierarchy root node, assigning rectangle coordinates to each node in the hierarchy. Requires calling root.sum() before using the layout.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*(*root*)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Diverging Scale in D3.js\nDESCRIPTION: Constructs a new diverging scale with a specified domain and interpolator function. This example uses the RdBu color interpolator with a domain from -1 to 1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleDiverging([-1, 0, 1], d3.interpolateRdBu);\n```\n\n----------------------------------------\n\nTITLE: D3 Interval Filter Example\nDESCRIPTION: Demonstrates how to create a filtered interval that returns specific dates of each month using a test function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.filter((d) => (d.getDate() - 1) % 10 === 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Padding in D3 Partition Layout\nDESCRIPTION: Sets or gets the padding between adjacent children in the partition layout. The padding is specified as a number. Default padding is zero.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/partition.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n*partition*.padding(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Setting End Angle for D3.js Pie Generator in JavaScript\nDESCRIPTION: Configures the overall end angle for the pie chart generated by a D3.js pie generator. The angle is specified in radians, with 0 at 12 o'clock and positive angles proceeding clockwise.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie().endAngle(Math.PI);\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with D3 Matcher\nDESCRIPTION: Demonstrates two equivalent ways to filter div elements in a D3 selection using the filter method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = selection.filter(\"div\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = selection.filter(d3.matcher(\"div\"));\n```\n\n----------------------------------------\n\nTITLE: Using d3.minIndex to find index of minimum value in JavaScript\nDESCRIPTION: Returns the index of the minimum value in an iterable rather than the value itself. An optional accessor function can be used to transform values before comparison.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.minIndex([3, 2, 1, 1, 6, 2, 4]) // 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.minIndex(alphabet, (d) => d.frequency) // 25\n```\n\nLANGUAGE: javascript\nCODE:\n```\nalphabet[d3.minIndex(alphabet, (d) => d.frequency)] // {letter: \"Z\", frequency: 0.00074}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle with Canvas Methods in JavaScript\nDESCRIPTION: A function that draws a circle on a 2D context using moveTo and arc methods. This demonstrates the type of canvas code that can be used with d3-path.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Maximum Digits for a D3 Line Generator\nDESCRIPTION: Configures a line generator to use a specific number of digits after the decimal separator when generating SVG path data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().digits(3);\n```\n\n----------------------------------------\n\nTITLE: Formatting Objects as CSV with Column Selection\nDESCRIPTION: Formats an array of objects as a CSV string, allowing specification of which columns to include and their order. This example only includes the 'foo' column.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nd3.csvFormat([{foo: \"1\", bar: \"2\"}]) // \"foo,bar\\n1,2\"\n```\n\nLANGUAGE: js\nCODE:\n```\nd3.csvFormat([{foo: \"1\", bar: \"2\"}], [\"foo\"]) // \"foo\\n1\"\n```\n\n----------------------------------------\n\nTITLE: Sorting D3 Hierarchy Nodes for Circle Packing in JavaScript\nDESCRIPTION: Shows how to sort nodes in a D3 hierarchy for optimal circle packing layout.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nroot\n    .sum((d) => d.value)\n    .sort((a, b) => b.value - a.value);\n```\n\n----------------------------------------\n\nTITLE: Mapping Iterables with d3.map in JavaScript\nDESCRIPTION: Like Array.map but works with any iterable. Returns a new array with the results of calling the provided function on every element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.map(new Set([0, 2, 3, 4]), (d) => d & 1) // [0, 0, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Interpolating Text with Integer Values from 0 to 100 in D3.js\nDESCRIPTION: Example demonstrating how to use textTween to animate text with integer values from 0 to 100. This uses d3.interpolateRound to create smooth transitions between integer values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.textTween(() => d3.interpolateRound(0, 100));\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Tree Layout Example\nDESCRIPTION: Sets up a Vue component that imports Plot from Observable and defines a data structure of hierarchical 'gods' to be displayed in a tree layout.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport PlotRender from \"../components/PlotRender.js\";\n\nconst gods = [\n  \"Chaos/Gaia/Mountains\",\n  \"Chaos/Gaia/Pontus\",\n  \"Chaos/Gaia/Uranus\",\n  \"Chaos/Eros\",\n  \"Chaos/Erebus\",\n  \"Chaos/Tartarus\"\n];\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack Generator with Tidy Data in D3\nDESCRIPTION: Demonstrates how to compute stacked series from tidy data by indexing the data by date and fruit, then using the d3.stack() generator to create a layered data structure suitable for stacked visualizations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = d3.stack()\n    .keys(d3.union(data.map(d => d.fruit))) // apples, bananas, cherries, …\n    .value(([, group], key) => group.get(key).sales)\n  (d3.index(data, d => d.date, d => d.fruit));\n```\n\n----------------------------------------\n\nTITLE: Disabling Double-click Zoom Transitions in D3\nDESCRIPTION: Example showing how to disable double-click and double-tap zoom transitions by removing the zoom behavior's dblclick event listener after applying the zoom behavior to a selection.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nselection\n    .call(zoom)\n    .on(\"dblclick.zoom\", null);\n```\n\n----------------------------------------\n\nTITLE: Formatting a Color as Hexadecimal with Alpha in D3.js\nDESCRIPTION: Demonstrates formatting a color as an 8-digit hexadecimal string (including alpha channel) using formatHex8().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").formatHex8() // \"#4682b4ff\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Equal Earth Projection with D3 and Vue\nDESCRIPTION: This snippet illustrates the use of D3's geoEqualEarth() function to create an Equal Earth projection. It configures the projection with specific height, rotation, extent, and precision settings for display in a WorldMap component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#2025-04-11_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<WorldMap :height=\"width * 0.49\" :projection='d3.geoEqualEarth().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width * 0.49 - 1]], {type: \"Sphere\"}).precision(0.2)' />\n```\n\n----------------------------------------\n\nTITLE: Background-Safe Animation Scheduling in D3 4.0\nDESCRIPTION: Shows the preferred approach in D3 4.0 using d3.interval instead of setInterval to prevent transitions from accumulating in background tabs.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // GOOD\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cubehelix Color Interpolation with Custom Gamma in D3.js\nDESCRIPTION: Shows how to use Cubehelix color interpolation with a custom gamma value of 3 for a linear scale transitioning from brown to steelblue.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear()\n    .domain([10, 100])\n    .range([\"brown\", \"steelblue\"])\n    .interpolate(d3.interpolateCubehelix.gamma(3));\n```\n\n----------------------------------------\n\nTITLE: Self-terminating Timer in D3 3.x\nDESCRIPTION: Shows how to create a timer in D3 3.x that stops itself after one second by returning true from the callback function.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timer(function(elapsed) {\n  console.log(elapsed);\n  return elapsed >= 1000;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting the tiling method for a D3 treemap layout\nDESCRIPTION: Sets the tiling method to the specified function or returns the current tiling method if no argument is provided. The default is treemapSquarify.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.tile(*tile*)\n```\n\n----------------------------------------\n\nTITLE: Manipulating Color Properties in D3.js\nDESCRIPTION: Example of how to modify color properties (hue and saturation) in HSL color space and convert back to a string representation in RGB format.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nc.h += 90;\nc.s += 0.2;\nc + \"\"; // rgb(198, 45, 205)\n```\n\n----------------------------------------\n\nTITLE: Applying a Function to a D3 Selection Using .call()\nDESCRIPTION: Shows how to apply a previously defined function to a D3 selection using the .call() method. This approach maintains method chaining as .call() always returns the selection itself.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").call(name, \"John\", \"Snow\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbol Generator with a Cross Symbol\nDESCRIPTION: Creates an SVG path element and sets its 'd' attribute using a D3 symbol generator with the symbolCross type.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\").attr(\"d\", d3.symbol(d3.symbolCross));\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV Data with d3.csvParse in JavaScript\nDESCRIPTION: Demonstrates how to parse CSV text into an array of objects using D3's csvParse function. This converts raw CSV text into structured data objects with name and parent properties.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nname,parent\nEve,\nCain,Eve\nSeth,Eve\nEnos,Seth\nNoam,Seth\nAbel,Eve\nAwan,Eve\nEnoch,Awan\nAzura,Eve\n```\n\nLANGUAGE: js\nCODE:\n```\nconst table = d3.csvParse(text);\n```\n\n----------------------------------------\n\nTITLE: Examining FormatSpecifier Object Structure in D3.js\nDESCRIPTION: Example of the object structure returned by formatSpecifier with properties corresponding to format specifications.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFormatSpecifier {\n  \"fill\": \" \",\n  \"align\": \">\",\n  \"sign\": \"-\",\n  \"symbol\": \"\",\n  \"zero\": false,\n  \"width\": undefined,\n  \"comma\": false,\n  \"precision\": undefined,\n  \"trim\": false,\n  \"type\": \"s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Default Circle Symbol Path Data\nDESCRIPTION: Invokes a default symbol generator with no arguments, which produces a circle path with a size of 64 square pixels.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.symbol()() // \"M4.514,0A4.514,4.514,0,1,1,-4.514,0A4.514,4.514,0,1,1,4.514,0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Partition Layout in D3\nDESCRIPTION: Creates a new partition layout with default settings. This is the starting point for using the partition layout in D3.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/partition.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npartition()\n```\n\n----------------------------------------\n\nTITLE: Formatting Tick Labels with D3.js axis.tickFormat()\nDESCRIPTION: Shows how to set a custom formatter for axis tick labels using D3's formatting system. This example applies comma-grouping for thousands with no decimal places.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\naxis.tickFormat(d3.format(\",.0f\"));\n```\n\n----------------------------------------\n\nTITLE: Packing Sibling Circles in D3\nDESCRIPTION: Packs an array of circles efficiently using the front-chain packing algorithm. Each input circle must have a radius (r property), and the function computes x and y coordinates for each circle's center.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npackSiblings(*circles*)\n```\n\n----------------------------------------\n\nTITLE: Representing Tabular Data in JavaScript for D3 Stack\nDESCRIPTION: Example of how to represent tidy tabular data as a JavaScript array of objects for use with D3's stack generator. The data shows monthly fruit sales across different time periods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  {date: new Date(\"2015-01-01\"), fruit: \"apples\", sales: 3840},\n  {date: new Date(\"2015-01-01\"), fruit: \"bananas\", sales: 1920},\n  {date: new Date(\"2015-01-01\"), fruit: \"cherries\", sales: 960},\n  {date: new Date(\"2015-01-01\"), fruit: \"durians\", sales: 400},\n  {date: new Date(\"2015-02-01\"), fruit: \"apples\", sales: 1600},\n  {date: new Date(\"2015-02-01\"), fruit: \"bananas\", sales: 1440},\n  {date: new Date(\"2015-02-01\"), fruit: \"cherries\", sales: 960},\n  {date: new Date(\"2015-02-01\"), fruit: \"durians\", sales: 400},\n  {date: new Date(\"2015-03-01\"), fruit: \"apples\", sales: 640},\n  {date: new Date(\"2015-03-01\"), fruit: \"bananas\", sales: 960},\n  {date: new Date(\"2015-03-01\"), fruit: \"cherries\", sales: 640},\n  {date: new Date(\"2015-03-01\"), fruit: \"durians\", sales: 400},\n  {date: new Date(\"2015-04-01\"), fruit: \"apples\", sales: 320},\n  {date: new Date(\"2015-04-01\"), fruit: \"bananas\", sales: 480},\n  {date: new Date(\"2015-04-01\"), fruit: \"cherries\", sales: 640},\n  {date: new Date(\"2015-04-01\"), fruit: \"durians\", sales: 400}\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Log Scale in D3.js\nDESCRIPTION: Example of creating a logarithmic scale in D3.js with a custom base of 2 for mapping values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar log = d3.scaleLog().base(2).domain([1, 4]).range([0, 100]);\n```\n\n----------------------------------------\n\nTITLE: Indexing Data with d3.index() in JavaScript\nDESCRIPTION: Creates an index map where each key maps to a single value. This example indexes stock data by date for quick lookup, throwing an error if multiple values exist for the same date.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst aaplDate = d3.index(aapl, (d) => d.Date);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Order with stackOrderInsideOut in D3.js\nDESCRIPTION: Sets the stack order using d3.stackOrderInsideOut, which places earliest series (by maximum value) on the inside and later series on the outside. Recommended for streamgraphs with wiggle offset.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderInsideOut);\n```\n\n----------------------------------------\n\nTITLE: Getting an Element Attribute with D3 Selection\nDESCRIPTION: Retrieves the current value of the \"color\" attribute from the first non-null element in the selection. This is useful when you know the selection contains exactly one element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nselection.attr(\"color\") // \"red\"\n```\n\n----------------------------------------\n\nTITLE: Various d3.format Examples\nDESCRIPTION: This series of examples showcases different formatting options available in d3-format, including percentages, currencies, padding, SI prefixes, and more.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\".0%\")(0.123) // rounded percentage, \"12%\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\"($.2f\")(-3.5) // localized fixed-point currency, \"(£3.50)\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\"+20\")(42) // space-filled and signed, \"                 +42\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\".^20\")(42) // dot-filled and centered, \".........42.........\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\".2s\")(42e6) // SI-prefix with two significant digits, \"42M\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\"#x\")(48879) // prefixed lowercase hexadecimal, \"0xbeef\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\",.2r\")(4223) // grouped thousands with two significant digits, \"4,200\"\n```\n\n----------------------------------------\n\nTITLE: Multi-level Reduction with d3.rollup() in JavaScript\nDESCRIPTION: Creates a nested InternMap of reduced values using multiple key functions. This example counts penguins by both species and sex.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesSexCount = d3.rollup(penguins, (D) => D.length, (d) => d.species, (d) => d.sex);\n```\n\n----------------------------------------\n\nTITLE: Setting a custom threshold function for a bin generator in D3\nDESCRIPTION: Configures a bin generator with a custom threshold function that uses the median of the values as a single threshold, resulting in two bins.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().thresholds((values) => [d3.median(values)]);\n```\n\n----------------------------------------\n\nTITLE: Setting a domain for a bin generator in D3\nDESCRIPTION: Sets the domain (range of values to consider) for a bin generator to [0, 1]. Values outside this domain will be ignored when generating bins.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().domain([0, 1]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Threshold Scale in D3.js\nDESCRIPTION: Demonstrates how to construct a new threshold scale with specified domain and range values. The example creates a color scale with thresholds at 0 and 1, mapping to red, white, and blue colors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleThreshold([0, 1], [\"red\", \"white\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Iterables with d3.filter in JavaScript\nDESCRIPTION: Like Array.filter but works with any iterable. Returns a new array containing values that pass the test function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.filter(new Set([0, 2, 3, 4]), (d) => d & 1) // [3]\n```\n\n----------------------------------------\n\nTITLE: Setting an Element Attribute with D3 Selection\nDESCRIPTION: Sets the \"color\" attribute to \"red\" on the selected elements. The attr method is used to modify element attributes and returns the selection for chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselection.attr(\"color\", \"red\")\n```\n\n----------------------------------------\n\nTITLE: Rendering a Radial Line Path in SVG using D3.js\nDESCRIPTION: Demonstrates how to use a radial line generator to create an SVG path element with the generated line data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\").attr(\"d\", line(data)).attr(\"stroke\", \"currentColor\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Bisector with an Accessor Function in JavaScript\nDESCRIPTION: Creates a new bisector using an accessor function that extracts the Date property from each data object. This allows bisection operations on arrays of objects sorted by their Date property.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bisector = d3.bisector((d) => d.Date);\n```\n\n----------------------------------------\n\nTITLE: Checking if a D3 Selection is Empty\nDESCRIPTION: Shows how to use the .empty() method to check if a D3 selection contains any (non-null) elements. Returns true if the selection is empty and false otherwise.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\").empty() // false, here\n```\n\n----------------------------------------\n\nTITLE: Using schemeReds array in D3.js\nDESCRIPTION: A discrete sequential color scheme array with Red hues. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeReds[k]\n```\n\n----------------------------------------\n\nTITLE: Generating Pie Data from Array in JavaScript\nDESCRIPTION: Uses a D3.js pie generator to compute angles for a pie chart based on an array of numeric data. The result is an array of objects representing each datum's arc angles.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [1, 1, 2, 3, 5, 8, 13, 21];\nconst pie = d3.pie();\nconst arcs = pie(data);\n```\n\n----------------------------------------\n\nTITLE: D3.js Join with Different Enter/Update Styles\nDESCRIPTION: Advanced join pattern showing different handling of enter and update selections with distinct styling.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\n    enter => enter.append(\"circle\").attr(\"fill\", \"green\"),\n    update => update.attr(\"fill\", \"blue\")\n  )\n    .attr(\"stroke\", \"black\");\n```\n\n----------------------------------------\n\nTITLE: Unbinding Zoom Behavior from a Selection in D3\nDESCRIPTION: Removes the zoom behavior from a D3 selection by unbinding all zoom-related event listeners. This disables zoom functionality on the selected elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on(\".zoom\", null);\n```\n\n----------------------------------------\n\nTITLE: Setting Angle Accessor for Radial Area\nDESCRIPTION: Configures the angle accessor function that determines the angular position in radians.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial().angle((d) => a(d.Date));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Random Number Sources with D3 Random Functions\nDESCRIPTION: Demonstrates how to use a custom random number generator as the source for D3's random distribution functions. This example creates a normal distribution random generator with a seeded linear congruential generator as its source.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst seed = 0.44871573888282423; // any number in [0, 1)\nconst random = d3.randomNormal.source(d3.randomLcg(seed))(0, 1);\nrandom(); // -0.6253955998897069\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements with D3 Selector\nDESCRIPTION: Shows two equivalent ways to select the first descendant div element using D3's select method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = selection.select(\"div\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = selection.select(d3.selector(\"div\"));\n```\n\n----------------------------------------\n\nTITLE: Sorting Array in Ascending Order using D3.js\nDESCRIPTION: Demonstrates the use of d3.ascending as a comparator function with Array.sort() to arrange elements in ascending order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[39, 21, 1, 104, 22].sort(d3.ascending) // [1, 21, 22, 39, 104]\n```\n\n----------------------------------------\n\nTITLE: Rendering Internal Edges of Delaunay Triangulation in D3.js\nDESCRIPTION: Shows how to render the internal edges of a Delaunay triangulation using the halfedges and triangles data from the Delaunay object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {points, halfedges, triangles} = delaunay;\nfor (let i = 0, n = halfedges.length; i < n; ++i) {\n  const j = halfedges[i];\n  if (j < i) continue;\n  const ti = triangles[i];\n  const tj = triangles[j];\n  context.moveTo(points[ti * 2], points[ti * 2 + 1]);\n  context.lineTo(points[tj * 2], points[tj * 2 + 1]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LCH Color in D3 JavaScript\nDESCRIPTION: Constructs a new LCH (CIELCh<sub>ab</sub>) color using d3.lch() function. The example shows creating a yellow color in LCH space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nd3.lch(\"yellow\") // {h: 99.57458688693687, c: 94.70776566727464, l: 97.60712516622824, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Node and Link Definition Using Numeric Indices in D3.js\nDESCRIPTION: Example of defining nodes and links using the default index-based node identification, where source and target are specified as indices into the nodes array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nconst links = [\n  {\"source\": 0, \"target\": 1}, // Alice → Bob\n  {\"source\": 1, \"target\": 2} // Bob → Carol\n];\n```\n\n----------------------------------------\n\nTITLE: Converting HSL to RGB Color Space in D3.js\nDESCRIPTION: Demonstrates creating an RGB color from an HSL color string using d3.rgb().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nd3.rgb(\"hsl(60, 100%, 50%)\") // {r: 255, g: 255, b: 0, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dispatch in JavaScript\nDESCRIPTION: Demonstrates how to create a dispatch object for 'start' and 'end' events using d3.dispatch().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst dispatch = d3.dispatch(\"start\", \"end\");\n```\n\n----------------------------------------\n\nTITLE: Setting Pad Angle in D3.js Pie Generator\nDESCRIPTION: Creates a pie generator with a specified pad angle that determines the angular separation between adjacent arcs in radians.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie().padAngle({{padAngle}});\n```\n\n----------------------------------------\n\nTITLE: Descending Group Sort with d3.groupSort() in JavaScript\nDESCRIPTION: Demonstrates how to sort groups in descending order by negating the group value. This example sorts penguin species by descending median body mass.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.groupSort(penguins, (D) => -d3.median(D, (d) => d.body_mass_g), (d) => d.species) // [\"Gentoo\", \"Adelie\", \"Chinstrap\"]\n```\n\n----------------------------------------\n\nTITLE: Finding Median with D3.js\nDESCRIPTION: Examples of using d3.median() to find the middle value in a dataset using the R-7 method. Shows both direct array usage and accessor function implementation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.median([1, 2, 2, 2, NaN, 3, null])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.median(penguins, (d) => d.body_mass_g)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Quadtree Data in D3.js v4.0\nDESCRIPTION: Example of how to iterate over all data points in a quadtree using the visit method in D3.js version 4.0. This code distinguishes between leaf nodes and internal nodes.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nquadtree.visit(function(node) {\n  if (!node.length) {\n    do {\n      console.log(node.data);\n    } while (node = node.next)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using quantize to Sample Uniform Values from an Interpolator in JavaScript\nDESCRIPTION: Demonstrates d3.quantize which returns uniformly-spaced samples from a specified interpolator. This example creates 4 evenly spaced color values between red and blue.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nd3.quantize(d3.interpolate(\"red\", \"blue\"), 4) // [\"rgb(255, 0, 0)\", \"rgb(170, 0, 85)\", \"rgb(85, 0, 170)\", \"rgb(0, 0, 255)\"]\n```\n\n----------------------------------------\n\nTITLE: Getting a Sequential Scale's Interpolator in JavaScript\nDESCRIPTION: Retrieves the current interpolator function from a sequential scale. This is useful for examining or reusing the interpolator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.interpolator() // d3.interpolateBlues\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in RGB color space using d3.interpolateRgb\nDESCRIPTION: Creates an RGB color space interpolator between two colors. The colors are converted to RGB using d3.rgb. Returns an RGB string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateRgb(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Sorting Array in Descending Order using D3.js\nDESCRIPTION: Demonstrates the use of d3.descending as a comparator function with Array.sort() to arrange elements in descending order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n[39, 21, 1, 104, 22].sort(d3.descending) // [104, 39, 22, 21, 1]\n```\n\n----------------------------------------\n\nTITLE: Default Y Accessor Implementation\nDESCRIPTION: The default implementation of the y accessor function used by D3 line generators, which assumes data points are two-element arrays.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y(d) {\n  return d[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Wheel-Driven Zooming in D3\nDESCRIPTION: Applies a zoom behavior but then specifically removes the wheel event listener, allowing native scrolling to work while maintaining other zoom functionality (like drag panning or touch pinch).\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselection\n    .call(zoom)\n    .on(\"wheel.zoom\", null);\n```\n\n----------------------------------------\n\nTITLE: Setting Curve Interpolation\nDESCRIPTION: Configures the curve interpolation method for the radial area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial().curve(d3.curveBasisClosed);\n```\n\n----------------------------------------\n\nTITLE: Creating a B-spline interpolator in D3.js\nDESCRIPTION: Demonstrates the use of d3.interpolateBasis to create a uniform nonrational B-spline interpolator through a specified array of numeric values. This function is useful for creating smooth interpolations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateBasis([0, 0.1, 0.4, 1])(0.5) // 0.2604166666666667\n```\n\n----------------------------------------\n\nTITLE: Permuting Array Elements using D3.js\nDESCRIPTION: Shows how to use d3.permute to create a new array by rearranging elements of the source array based on the provided keys.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.permute([\"a\", \"b\", \"c\"], [1, 2, 0]) // returns [\"b\", \"c\", \"a\"]\n```\n\n----------------------------------------\n\nTITLE: Default Node ID Accessor in D3.js Link Force\nDESCRIPTION: The default node ID accessor function used by the link force, which returns the numeric index of each node.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction id(d) {\n  return d.index;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating D3 Local Variable\nDESCRIPTION: Demonstrates how to declare a new local variable in D3 using d3.local(). Each local creates a distinct symbolic reference scoped by the DOM.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/locals.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = d3.local();\n```\n\n----------------------------------------\n\nTITLE: Accessing Grouped Data with d3.group() in JavaScript\nDESCRIPTION: Shows how to retrieve elements from a grouped dataset. In this example, we access all penguins of the 'Adelie' species from the previously grouped data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nspecies.get(\"Adelie\") // Array(152)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pow Scale in D3.js\nDESCRIPTION: Shows how to create a power scale in D3.js that uses a power of 2.2 for mapping values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pow = d3.scalePow().exponent(2.2).domain([1, 2]).range([0, 100]);\n```\n\n----------------------------------------\n\nTITLE: Creating Repeating Transitions with d3.active()\nDESCRIPTION: Shows how to create an infinite loop of transitions using the d3.active() method, which retrieves the active transition on an element. This example creates a 'disco mode' by cycling through red, green, and blue fills repeatedly.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"circle\").transition()\n    .delay((d, i) => i * 50)\n    .on(\"start\", function repeat() {\n        d3.active(this)\n            .style(\"fill\", \"red\")\n          .transition()\n            .style(\"fill\", \"green\")\n          .transition()\n            .style(\"fill\", \"blue\")\n          .transition()\n            .on(\"start\", repeat);\n      });\n```\n\n----------------------------------------\n\nTITLE: Applying Zoom Transform to Canvas 2D Context\nDESCRIPTION: Shows how to apply a D3 zoom transform to an HTML Canvas 2D context using the context's translate and scale methods in the correct order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.translate(transform.x, transform.y);\ncontext.scale(transform.k, transform.k);\n```\n\n----------------------------------------\n\nTITLE: Calculating Tick Step with D3.js in JavaScript\nDESCRIPTION: The d3.tickStep() function returns the difference between adjacent tick values for given start, stop, and count. It returns a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.tickStep(1, 9, 5) // 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.tickStep(9, 1, 5) // -2\n```\n\n----------------------------------------\n\nTITLE: Using schemeOrRd array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Orange to Red. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeOrRd[k]\n```\n\n----------------------------------------\n\nTITLE: Using a Quantize Scale with Multiple Thresholds in D3.js\nDESCRIPTION: Shows how a quantize scale divides the domain into equal parts based on the range length. This example maps values from 10-100 to three different stroke widths.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = d3.scaleQuantize([10, 100], [1, 2, 4]);\nwidth(20); // 1\nwidth(50); // 2\nwidth(80); // 4\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Documents with d3.svg\nDESCRIPTION: Shows how to fetch and parse an SVG file using d3.svg(). This fetches the file as text and then parses it as SVG, returning a DOM Document object that can be manipulated or rendered.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await d3.svg(\"example.svg\");\n```\n\n----------------------------------------\n\nTITLE: Permuting Object Properties using D3.js\nDESCRIPTION: Demonstrates how d3.permute can be used with objects to extract specific properties in a desired order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst object = {yield: 27, variety: \"Manchuria\", year: 1931, site: \"University Farm\"};\n\nd3.permute(object, [\"site\", \"variety\", \"yield\"]) // [\"University Farm\", \"Manchuria\", 27]\n```\n\n----------------------------------------\n\nTITLE: Generating Ticks for Logarithmic Scale in D3.js\nDESCRIPTION: Demonstrates tick generation for a logarithmic scale. Returns uniformly spaced ticks within each integer power of the base.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLog([1, 100], [0, 960]);\nconst T = x.ticks(); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity Scale in D3.js\nDESCRIPTION: Demonstrates creating an identity scale where the domain and range are identical, making the scale function equivalent to the identity function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleIdentity([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Automatic Type Inference with d3.autoType\nDESCRIPTION: Shows how to use d3.autoType as a row accessor function when parsing CSV data to automatically convert string values to appropriate JavaScript types such as numbers, dates, booleans, and null values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csvParse(string, d3.autoType)\n```\n\n----------------------------------------\n\nTITLE: Setting the Range for a Band Scale\nDESCRIPTION: Sets the scale's range to the specified two-element array of numbers and returns the modified scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleBand().range([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Setting the Domain of a Threshold Scale in D3.js\nDESCRIPTION: Demonstrates how to set the domain of an existing threshold scale. The domain values must be in ascending order, and if there are n+1 values in the range, there must be n values in the domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleThreshold([\"red\", \"white\", \"green\"]).domain([0, 1]);\n```\n\n----------------------------------------\n\nTITLE: Using d3.groups() to Create Arrays of Key-Value Pairs in JavaScript\nDESCRIPTION: Similar to d3.group() but returns an array of [key, value] entries instead of a map. This example groups penguins by species and returns an array of entries.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst species = d3.groups(penguins, (d) => d.species); // [[\"Adelie\", Array(152)], …]\n```\n\n----------------------------------------\n\nTITLE: Rendering Mercator Projection with D3 and Vue\nDESCRIPTION: This snippet shows how to create a Mercator projection using D3's geoMercator() function. It configures the projection to fit within a square extent and sets a specific precision for the WorldMap component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<WorldMap resolution=\"50m\" :height=\"width\" :projection='d3.geoMercator().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width - 1]], {type: \"Sphere\"}).precision(0.2)' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Voronoi Diagram from Delaunay Triangulation in D3.js\nDESCRIPTION: Demonstrates how to create a Voronoi diagram from a Delaunay triangulation of points using D3.js. The diagram is clipped to specified bounds.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/voronoi.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst delaunay = d3.Delaunay.from([[0, 0], [0, 100], [100, 0], [100, 100]]);\nconst voronoi = delaunay.voronoi([0, 0, 640, 480]);\n```\n\n----------------------------------------\n\nTITLE: Creating Voronoi Diagram from Delaunay Triangulation in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Voronoi diagram from a Delaunay triangulation using D3. It first creates a Delaunay object from a set of points, then generates a Voronoi diagram with specified bounds.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst delaunay = d3.Delaunay.from(points);\nconst voronoi = delaunay.voronoi([0, 0, 640, 480]);\n```\n\n----------------------------------------\n\nTITLE: Creating Delaunay Triangulation from Object Array with Accessors in D3.js\nDESCRIPTION: Demonstrates creating a Delaunay triangulation from an array of objects using custom accessor functions for x and y coordinates in D3.js.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst delaunay = d3.Delaunay.from([{x: 0, y: 0}, {x: 0, y: 1}, {x: 1, y: 0}, {x: 1, y: 1}], (d) => d.x, (d) => d.y);\n```\n\n----------------------------------------\n\nTITLE: Creating a Center Force in D3\nDESCRIPTION: Creates a new center force with x and y coordinates set to the center of the visualization area. This centers the force simulation in the middle of the available space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/center.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst center = d3.forceCenter(width / 2, height / 2);\n```\n\n----------------------------------------\n\nTITLE: Point Scale Range Configuration\nDESCRIPTION: Shows how to set the range for a point scale using numeric values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scalePoint().range([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Reversing Iterable using D3.js\nDESCRIPTION: Shows how to use d3.reverse to create a new array with the elements of an iterable in reverse order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.reverse(new Set([0, 2, 3, 1])) // [1, 3, 2, 0]\n```\n\n----------------------------------------\n\nTITLE: Defining Valid Data Points for D3.js Radial Line Generator\nDESCRIPTION: Sets a custom function to determine which data points should be considered valid and included in the radial line.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.lineRadial().defined((d) => !isNaN(d.temperature));\n```\n\n----------------------------------------\n\nTITLE: Formatting with Significant Digits using precisionRound in D3.js\nDESCRIPTION: Example showing how to format numbers with significant digits using precisionRound for small step values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.precisionRound(0.01, 1.01);\nconst f = d3.format(\".\" + p + \"r\");\nf(0.99); // \"0.990\"\nf(1.0);  // \"1.00\"\nf(1.01); // \"1.01\"\n```\n\n----------------------------------------\n\nTITLE: Appending HTML element to SVG foreignObject using D3.js\nDESCRIPTION: Demonstrates how to append an HTML div element to an SVG foreignObject element using D3.js, specifying the XHTML namespace.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/namespaces.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.create(\"svg\")\n  .append(\"foreignObject\")\n    .attr(\"width\", 300)\n    .attr(\"height\", 100)\n  .append(\"xhtml:div\")\n    .text(\"Hello, HTML!\");\n```\n\n----------------------------------------\n\nTITLE: D3 Conic Equal Area Projection Configuration\nDESCRIPTION: Configuration for D3's conic equal area projection with specific parallels, rotation, scale, and other parameters for world map visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoConicEqualArea().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Many-body Force in D3.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a new many-body force with a negative strength value (-100), which will cause nodes to repel each other like electrostatic charges.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/many-body.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst manyBody = d3.forceManyBody().strength(-100);\n```\n\n----------------------------------------\n\nTITLE: Using rangeRound with a Band Scale\nDESCRIPTION: Sets the scale's range while also enabling rounding to avoid antialiasing artifacts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleBand().rangeRound([0, 960]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nband.range(range).round(true)\n```\n\n----------------------------------------\n\nTITLE: Creating and using a d3 timer with callback and delay\nDESCRIPTION: Shows how to create a timer that repeatedly invokes a callback until stopped. The example sets a 150ms delay before starting and stops the timer when the elapsed time exceeds 200ms.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-timer.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst t = d3.timer((elapsed) => {\n  console.log(elapsed);\n  if (elapsed > 200) t.stop();\n}, 150);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Zoom Transform with Scale and Translation\nDESCRIPTION: Demonstrates how to create a custom zoom transform with specific scale and translation values using the zoomIdentity object as a starting point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = d3.zoomIdentity.translate(x, y).scale(k);\n```\n\n----------------------------------------\n\nTITLE: Creating a D3.js Line with Cardinal Curve\nDESCRIPTION: Example of creating a D3.js line generator with a cardinal curve and specific tension parameter that affects the curvature of the spline between points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().curve(d3.curveCardinal.tension(0.5));\n```\n\n----------------------------------------\n\nTITLE: Finding Domain Extent for a Range Value in D3.js Quantile Scales\nDESCRIPTION: Uses invertExtent to find the domain values that correspond to specific range values in a quantile scale, useful for determining threshold boundaries of each color class.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.invertExtent(\"#eff3ff\"); // [2700, 3475]\ncolor.invertExtent(\"#6baed6\"); // [3800, 4300]\ncolor.invertExtent(\"#08519c\"); // [4950, 6300]\n```\n\n----------------------------------------\n\nTITLE: Using d3.maxIndex to find index of maximum value in JavaScript\nDESCRIPTION: Returns the index of the maximum value in an iterable rather than the value itself. An optional accessor function can be used to transform values before comparison.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.maxIndex([3, 2, 1, 1, 6, 2, 4]) // 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.maxIndex(alphabet, (d) => d.frequency) // 0\n```\n\nLANGUAGE: javascript\nCODE:\n```\nalphabet[d3.maxIndex(alphabet, (d) => d.frequency)] // {letter: \"E\", frequency: 0.12702}\n```\n\n----------------------------------------\n\nTITLE: Default Separation Function for Tree Layout\nDESCRIPTION: The default separation function used by D3's tree layout to determine spacing between nodes. It places sibling nodes closer together than non-siblings.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction separation(a, b) {\n  return a.parent == b.parent ? 1 : 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Start Angle for D3 Arc Generator\nDESCRIPTION: Demonstrates how to set the start angle for a D3 arc generator and retrieve the current start angle accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().startAngle(Math.PI / 4);\n\narc.startAngle() // () => 0.7853981633974483\n```\n\n----------------------------------------\n\nTITLE: Setting inner padding for a D3 treemap layout\nDESCRIPTION: Sets the inner padding to the specified number or function, or returns the current inner padding function if no argument is provided. Inner padding separates adjacent child nodes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.paddingInner(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Opacity in D3.js\nDESCRIPTION: Shows how to change the opacity of a color and get the resulting RGBA string representation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nc.opacity = 0.8;\nc + \"\"; // rgba(198, 45, 205, 0.8)\n```\n\n----------------------------------------\n\nTITLE: Custom Subject Accessor for Canvas-Based Circle Dragging\nDESCRIPTION: A custom subject accessor function that finds the closest circle to the pointer within a given radius. This is useful for canvas-based visualizations where exact element detection is needed.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction subject(event) {\n  let n = circles.length,\n      i,\n      dx,\n      dy,\n      d2,\n      s2 = radius * radius,\n      circle,\n      subject;\n\n  for (i = 0; i < n; ++i) {\n    circle = circles[i];\n    dx = event.x - circle.x;\n    dy = event.y - circle.y;\n    d2 = dx * dx + dy * dy;\n    if (d2 < s2) subject = circle, s2 = d2;\n  }\n\n  return subject;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function for Many-body Force in D3.js (JavaScript)\nDESCRIPTION: This function shows the default strength accessor used by the many-body force when no custom strength is specified. It returns -30, creating a repulsive force between nodes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/many-body.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength() {\n  return -30;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Outer Padding for a Band Scale\nDESCRIPTION: Sets the outer padding to specify the amount of blank space before the first band and after the last band, typically in the range [0, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript-vue\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]).paddingOuter({{paddingOuter}});\n```\n\nLANGUAGE: javascript-vue\nCODE:\n```\nx.paddingOuter() // {{paddingOuter}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with Curve Parameters\nDESCRIPTION: Vue setup script that initializes reactive variables for controlling curve parameters such as alpha, beta, and tension, along with tick marks for visualization examples.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport {ref} from \"vue\";\nimport ExampleCurve from \"../components/ExampleCurve.vue\";\n\nconst alpha = ref(0.5);\nconst beta = ref(0.85);\nconst tension = ref(0);\nconst ticks = [0, 0.25, 0.5, 0.75, 1];\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Default Symbol Type Accessor Function\nDESCRIPTION: Shows the default implementation of the symbol type accessor, which returns a circle symbol.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction type() {\n  return circle;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Band Scale Alignment in D3\nDESCRIPTION: Returns the current alignment value of the band scale, which defaults to 0.5 if not previously set.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nx.align() // {{align}}\n```\n\n----------------------------------------\n\nTITLE: Using the slice-and-dice tiling method in D3 treemap\nDESCRIPTION: A tiling method that alternates between horizontal and vertical subdivision by depth. It delegates to treemapSlice for odd-depth nodes and treemapDice for even-depth nodes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemapSliceDice(*node*, *x0*, *y0*, *x1*, *y1*)\n```\n\n----------------------------------------\n\nTITLE: Interpolating between two numbers in D3.js\nDESCRIPTION: Shows how to use d3.interpolateNumber to create an interpolator between two numbers. The interpolator is then called with a value between 0 and 1 to get the interpolated result.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateNumber(20, 620)(0.8) // 500\n```\n\n----------------------------------------\n\nTITLE: Generating UTC Time Ticks Example\nDESCRIPTION: Demonstrates how to generate UTC time ticks between two dates with a specified count. The example shows creating evenly spaced dates between 1970 and 1996 with approximately 4 intervals.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = new Date(\"1970-03-01\");\nconst stop = new Date(\"1996-03-19\");\nconst count = 4;\nconst ticks = d3.utcTicks(start, stop, count); // [1975-01-01, 1980-01-01, 1985-01-01, 1990-01-01, 1995-01-01]\n```\n\n----------------------------------------\n\nTITLE: Creating Ordinal Scale with Domain and Range\nDESCRIPTION: Demonstrates how to construct a new ordinal scale with specified domain and range arrays for mapping categories to colors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal([\"a\", \"b\", \"c\"], [\"red\", \"green\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in CIELCh color space using d3.interpolateHcl\nDESCRIPTION: Returns a CIELCh(ab) color space interpolator between two colors. Uses the shortest path between hues. The colors are converted to CIELCh using d3.hcl. Returns an RGB string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateHcl(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: D3.js Stack Generator Output Format\nDESCRIPTION: Example showing the output format of the D3.js 4.0 stack generator. Each series contains points with lower and upper values defining the baseline and topline positions for visualization in stacked charts.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // dates\n]\n```\n\n----------------------------------------\n\nTITLE: Using interpolateYlOrBr function in D3.js\nDESCRIPTION: A function that returns colors from the 'YlOrBr' (Yellow-Orange-Brown) sequential color scheme. It accepts a value t between 0 and 1 and returns an RGB string representing the corresponding color.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.interpolateYlOrBr(t)\n```\n\n----------------------------------------\n\nTITLE: Setting Inner Tick Size in D3.js\nDESCRIPTION: Shows how to configure only the inner tick size for a D3.js axis. Inner tick size controls the length of tick lines extending from the axis line.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst axis = d3.axisBottom(x).tickSizeInner(0);\n```\n\n----------------------------------------\n\nTITLE: Node and Link Definition Using String Identifiers in D3.js\nDESCRIPTION: Example of defining nodes and links using string-based node identification, where source and target are specified by node id strings instead of indices.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nconst links = [\n  {\"source\": \"Alice\", \"target\": \"Bob\"},\n  {\"source\": \"Bob\", \"target\": \"Carol\"}\n];\n```\n\n----------------------------------------\n\nTITLE: Iterating Through D3 Selection Elements with a For-Of Loop\nDESCRIPTION: Demonstrates how to use the iterator functionality of D3 selections to iterate through the selected (non-null) elements using a standard JavaScript for-of loop.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const element of selection) {\n  console.log(element);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting top padding for a D3 treemap layout\nDESCRIPTION: Sets the top padding to the specified number or function, or returns the current top padding function if no argument is provided. Top padding separates a node's top edge from its children.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.paddingTop(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Migrating from Category10 Scale to schemeCategory10 Array\nDESCRIPTION: Comparison between D3.js v3.x categorical color scales and the new scheme arrays in v4.0, showing how to create an ordinal scale with a color scheme.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = d3.scale.category10();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Y1 Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current y1 accessor from an area generator. This returns a function that was previously set with the y1() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\narea.y1() // (d) => y(d.Close)\n```\n\n----------------------------------------\n\nTITLE: Using interval.count for hour of week in D3.js v4.0\nDESCRIPTION: Example of using the interval.count method in D3.js version 4.0 to calculate the hour within the current week, demonstrating a more general use case for the method, such as creating a heatmap.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeHour.count(d3.timeWeek(now), now); // 64\n```\n\n----------------------------------------\n\nTITLE: Creating Radial Force in D3 Force Simulation\nDESCRIPTION: Creates a new radial position force that pushes nodes towards a circle of specified radius centered at the given x and y coordinates. This can be used to create circular layouts or constrain nodes to a circular area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst radial = d3.forceRadial(r, width / 2, height / 2);\n```\n\n----------------------------------------\n\nTITLE: Setting Range for D3 Linear Scale\nDESCRIPTION: Sets the range (output values) for a linear scale. The range must contain two or more values compatible with the scale's interpolator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear().range([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Function Call Without Using .call() in D3\nDESCRIPTION: Demonstrates the equivalent way to call a function on a selection without using .call(). The key difference is that this approach doesn't preserve method chaining as it returns the function's return value instead of the selection.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nname(d3.selectAll(\"div\"), \"John\", \"Snow\");\n```\n\n----------------------------------------\n\nTITLE: Setting the Domain for a Band Scale\nDESCRIPTION: Setting the domain for a band scale with an array of values. The first element is mapped to the first band, and so on.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript-vue\nCODE:\n```\nconst x = d3.scaleBand([0, 960]).domain([{{d3.csvParseRows(domain).flat().map(JSON.stringify).join(\", \")}});\n```\n\n----------------------------------------\n\nTITLE: D3 Time Range Generation Example\nDESCRIPTION: Demonstrates how to generate a range of dates for weekly intervals within a month using d3.timeWeek.range().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = d3.timeMonth.floor(new Date(2015, 0, 15)); // 2015-01-01T00:00\nconst stop = d3.timeMonth.ceil(new Date(2015, 0, 15)); // 2015-02-01T00:00\nconst weeks = d3.timeWeek.range(start, stop); // [2015-01-04T00:00, 2015-01-11T00:00, 2015-01-18T00:00, 2015-01-25T00:00]\n```\n\n----------------------------------------\n\nTITLE: Rendering Natural Earth 1 Projection with D3 and Vue\nDESCRIPTION: This code shows how to implement the Natural Earth 1 projection using D3's geoNaturalEarth1() function. It sets up the projection with specific height, rotation, extent, and precision parameters for use in a WorldMap component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#2025-04-11_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<WorldMap :height=\"width * 0.5\" :projection='d3.geoNaturalEarth1().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width * 0.5 - 1]], {type: \"Sphere\"}).precision(0.2)' />\n```\n\n----------------------------------------\n\nTITLE: D3.js Step Curve Functions\nDESCRIPTION: Collection of step function implementations including standard step, step-after, and step-before variations. Creates piecewise constant functions with alternating horizontal and vertical lines.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncurveStep(context)\ncurveStepAfter(context)\ncurveStepBefore(context)\n```\n\n----------------------------------------\n\nTITLE: Sorting Iterable using D3.js\nDESCRIPTION: Demonstrates the use of d3.sort to create a new sorted array from an iterable, with optional custom comparator or accessor function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.sort(new Set([0, 2, 3, 1])) // [0, 1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Setting Projection for D3 Geographic Path Generator\nDESCRIPTION: Shows how to set the projection for a geographic path generator using path.projection().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.geoPath().projection(d3.geoAlbers());\n```\n\n----------------------------------------\n\nTITLE: Canvas Container Accessor for D3 Drag Behavior\nDESCRIPTION: A container accessor function for canvas-based drag operations that uses the element itself as the container rather than its parent node.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction container() {\n  return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting numeric threshold count for a bin generator in D3\nDESCRIPTION: Configures a bin generator to create approximately 20 bins by dividing the domain uniformly. The exact number may differ based on the domain's extent.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().thresholds(20);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Number Formats with formatSpecifier in D3.js\nDESCRIPTION: Example showing how to create a custom number format by modifying a formatSpecifier object with calculated precision.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst s = d3.formatSpecifier(\"f\");\ns.precision = d3.precisionFixed(0.01);\nconst f = d3.format(s);\nf(42); // \"42.00\";\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Range of a D3 Linear Scale\nDESCRIPTION: Retrieves a copy of the scale's current range using the range() method without arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nx.range() // [0, 960]\n```\n\n----------------------------------------\n\nTITLE: D3.js 3.x Time Format Parser Definition\nDESCRIPTION: Example of how to define a time parser in D3.js 3.x using the format.parse method. This approach has been deprecated in D3.js 4.0 in favor of dedicated parser constructors.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar parseTime = d3.time.format(\"%c\").parse;\n```\n\n----------------------------------------\n\nTITLE: Using bisectLeft() Function on an Array of Dates in JavaScript\nDESCRIPTION: Uses the bisectLeft function to find an insertion point before any existing equivalent dates. This example finds where January 2, 2014 would be inserted before any existing instances in an array of dates.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisectLeft(aapl.map((d) => d.Date), new Date(\"2014-01-02\")) // 162\n```\n\n----------------------------------------\n\nTITLE: Creating a Quadtree in D3.js v4.0\nDESCRIPTION: Updated example of creating a quadtree using the new d3.quadtree method in D3.js version 4.0. This approach directly creates a quadtree and adds data to it.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar quadtree = d3.quadtree()\n    .extent([[0, 0], [width, height]])\n    .addAll(data);\n```\n\n----------------------------------------\n\nTITLE: Using HCL Color Interpolation in D3.js Linear Scales\nDESCRIPTION: Demonstrates configuring a linear scale to use HCL color space interpolation between brown and steelblue colors for a domain from 10 to 100.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear()\n    .domain([10, 100])\n    .range([\"brown\", \"steelblue\"])\n    .interpolate(d3.interpolateHcl);\n```\n\n----------------------------------------\n\nTITLE: Setting X0 Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the x0 accessor (baseline x coordinate) for an area generator. This example uses a constant x-coordinate as the baseline, suitable for vertically-oriented areas.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().x0(x(0));\n```\n\n----------------------------------------\n\nTITLE: Finding Centroid of a Geographic Feature in D3\nDESCRIPTION: Demonstrates how to use path.centroid() to find the projected planar centroid of a GeoJSON object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npath.centroid(california) // [82.08679434495191, 288.14204870673404]\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV with Column Headers\nDESCRIPTION: Demonstrates parsing a CSV string with d3.csvParse, which expects the first line to be a header with column names. These column names become properties in the resulting objects.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nd3.csvParse(\"foo,bar\\n1,2\") // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\n```\n\n----------------------------------------\n\nTITLE: Generating Poisson Distribution Random Numbers in JavaScript with D3\nDESCRIPTION: Creates a function that generates random numbers following a Poisson distribution with mean (lambda) 400. The Poisson distribution is used to model the number of events occurring in a fixed interval of time or space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomPoisson(400)\n```\n\n----------------------------------------\n\nTITLE: Converting RGB to HSL Color in D3.js\nDESCRIPTION: Shows how to convert a color from RGB to HSL color space using d3.hsl(), which transforms the color representation to hue, saturation, and lightness values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nc = d3.hsl(c); // {h: 207.27…, s: 0.44, l: 0.4902…, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Generating Beta Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Demonstrates how to use d3.randomBeta() to generate random numbers with a beta distribution, with shape parameters alpha=3 and beta=1.5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomBeta(3, 1.5)\n```\n\n----------------------------------------\n\nTITLE: Interpolating Colors with D3\nDESCRIPTION: This snippet demonstrates color interpolation using D3's interpolateLab function. It finds the perceptual midpoint between steelblue and brown.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateLab(\"steelblue\", \"brown\")(0.5); // \"rgb(142, 92, 109)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Source Accessor from D3.js Link Generator\nDESCRIPTION: Shows how to retrieve the current source accessor function from a link generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlink.source() // (d) => d[0]\n```\n\n----------------------------------------\n\nTITLE: Using precisionPrefix for SI Unit Formatting in D3.js\nDESCRIPTION: The precisionPrefix function calculates appropriate decimal precision for SI prefix notation based on step size and reference value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd3.precisionPrefix(1e5, 1.3e6) // 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current X0 Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current x0 accessor from an area generator. This returns a function that was previously set with the x0() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\narea.x0() // () => 20\n```\n\n----------------------------------------\n\nTITLE: Setting Inner Radius for D3 Arc Generator\nDESCRIPTION: Shows how to set the inner radius for a D3 arc generator and retrieve the current inner radius accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().innerRadius(40);\n\narc.innerRadius() // () => 40\n```\n\n----------------------------------------\n\nTITLE: Finding Polygon Centroid with D3\nDESCRIPTION: This function calculates the centroid (geometric center) of a given polygon using D3's polygonCentroid method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.polygonCentroid([[1, 1], [1.5, 0], [2, 1]]) // [1.5, 0.6666666666666666]\n```\n\n----------------------------------------\n\nTITLE: Setting Angle Accessor for D3.js Radial Line Generator\nDESCRIPTION: Configures the angle accessor for a radial line generator, which determines the angle in radians for each data point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.lineRadial().angle((d) => a(d.Date));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Floating Point Precision Issues\nDESCRIPTION: This snippet shows how JavaScript's floating point arithmetic can lead to unexpected results when printing decimal numbers in a loop.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 10; ++i) {\n  console.log(0.1 * i);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Images with d3.image\nDESCRIPTION: Demonstrates how to load an image using d3.image(). This returns a promise that resolves to an HTMLImageElement when the image has finished loading.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = await d3.image(\"example.png\");\n```\n\n----------------------------------------\n\nTITLE: Formatting a Color as Hexadecimal in D3.js\nDESCRIPTION: Shows how to format a color as a hexadecimal string using the formatHex() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").formatHex() // \"#4682b4\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Constraint Function in JavaScript\nDESCRIPTION: Default implementation of the zoom constraint function. It ensures that the viewport extent does not go outside the translate extent.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction constrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Summing Node Values in D3 Hierarchy (JavaScript)\nDESCRIPTION: Demonstrates how to sum values in a hierarchy, useful for preparing data for treemap or circle packing layouts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nroot.sum((d) => d.value ? 1 : 0);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tick Format Function for a Linear Scale in D3.js\nDESCRIPTION: Shows how to create a number format function for displaying tick values with automatically computed precision based on the interval between ticks.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([0.1, 1], [\"red\", \"blue\"]);\nconst f = x.tickFormat();\nf(0.1); // \"0.1\"\nf(1); // \"1.0\"\n```\n\n----------------------------------------\n\nTITLE: Checking Point Containment in Polygon with D3\nDESCRIPTION: This function determines whether a given point is inside a specified polygon using D3's polygonContains method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.polygonContains([[1, 1], [1.5, 0], [2, 1]], [1.5, 0.667]) // true\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Grouped Data in JavaScript\nDESCRIPTION: Demonstrates how to retrieve elements from a nested grouped dataset. This example accesses female Adelie penguins from data that was grouped by species and then by sex.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nspeciesSex.get(\"Adelie\").get(\"FEMALE\") // Array(73)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Stack Order with Reverse Key Order\nDESCRIPTION: Example of defining a custom stack order function that reverses the order of the series. This demonstrates how to manipulate the arrangement of layers in a stacked visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(series => d3.range(series.length).reverse());\n```\n\n----------------------------------------\n\nTITLE: Adding Data to D3 Quadtree\nDESCRIPTION: Illustrates methods for adding single data points or multiple data points to a quadtree, using the current x and y accessors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().add([0, 0]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().addAll([[0, 0], [1, 2]]);\n```\n\n----------------------------------------\n\nTITLE: Equivalent SelectAll Transition Method in D3.js\nDESCRIPTION: Shows the equivalent method for transition.selectAll() using selection and transition chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransition\n  .selection()\n  .selectAll(selector)\n  .transition(transition)\n```\n\n----------------------------------------\n\nTITLE: Creating a Darker Color in D3.js\nDESCRIPTION: Shows how to create a darker version of a color using the darker() method with a specified intensity.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").darker(1) // {r: 49, g: 91, b: 126, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Using geoBounds to determine spherical bounding box\nDESCRIPTION: Returns the spherical bounding box for a GeoJSON object as a two-dimensional array of coordinate pairs representing the corners in degrees.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngeoBounds(object)\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Values\nDESCRIPTION: Demonstrates how to handle unknown input values by setting a specific unknown value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal([\"a\", \"b\", \"c\"], d3.schemeTableau10).unknown(null);\ncolor(\"a\"); // \"#4e79a7\"\ncolor(\"b\"); // \"#f28e2c\"\ncolor(\"c\"); // \"#e15759\"\ncolor(\"d\"); // null\n```\n\n----------------------------------------\n\nTITLE: Setting Inner Padding for a Band Scale\nDESCRIPTION: Sets the inner padding to specify the proportion of the range reserved for blank space between bands. A value of 0 means no space between bands.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript-vue\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]).paddingInner({{paddingInner}});\n```\n\nLANGUAGE: javascript-vue\nCODE:\n```\nx.paddingInner() // {{paddingInner}}\n```\n\n----------------------------------------\n\nTITLE: Loading TSV Data with d3.tsv\nDESCRIPTION: Shows how to load a tab-separated values file using d3.tsv(). This is a convenience wrapper around d3.dsv with tab as the delimiter, returning parsed data as an array of objects.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.tsv(\"example.tsv\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Y Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current y0 accessor from an area generator. This returns the function that was previously set with the y() or y0() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\narea.y() // (d) => y(d.Date)\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporary Drag Event Listeners in D3.js\nDESCRIPTION: Example of using event.on to register temporary drag and end event listeners within a start event handler. This pattern creates closure functions that manage the visual state of a dragged circle element during a drag operation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction started(event) {\n  const circle = d3.select(this).classed(\"dragging\", true);\n  const dragged = (event, d) => circle.raise().attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n  const ended = () => circle.classed(\"dragging\", false);\n  event.on(\"drag\", dragged).on(\"end\", ended);\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting a Threshold Scale in D3.js\nDESCRIPTION: Shows how to use the invertExtent method to find the domain values corresponding to a range value. This returns the lower and upper bounds of the domain that map to the given range value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleThreshold([0, 1], [\"red\", \"white\", \"green\"]);\ncolor.invertExtent(\"red\"); // [undefined, 0]\ncolor.invertExtent(\"white\"); // [0, 1]\ncolor.invertExtent(\"green\"); // [1, undefined]\n```\n\n----------------------------------------\n\nTITLE: Interpolating Fill Attribute from Red to Blue using attrTween in D3.js\nDESCRIPTION: Example showing how to use attrTween to interpolate the fill attribute from red to blue. This uses d3.interpolateRgb to create a smooth color transition between two fixed values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.attrTween(\"fill\", () => d3.interpolateRgb(\"red\", \"blue\"));\n```\n\n----------------------------------------\n\nTITLE: Importing D3.js in JavaScript Applications\nDESCRIPTION: These snippets demonstrate different ways to import D3.js in a JavaScript application after installing it via a package manager. They show importing the entire library, specific functions, or from submodules.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as d3 from \"d3\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {select, selectAll} from \"d3\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {mean, median} from \"d3-array\";\n```\n\n----------------------------------------\n\nTITLE: Removing a Force from a D3 Simulation in JavaScript\nDESCRIPTION: Demonstrates how to remove a force from an existing D3 force simulation by passing null as the force parameter. This example shows removing the charge force.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/simulation.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsimulation.force(\"charge\", null);\n```\n\n----------------------------------------\n\nTITLE: Creating B-spline interpolator with multiple colors using d3.interpolateRgbBasis\nDESCRIPTION: Returns a uniform nonrational B-spline interpolator through an array of colors, converted to RGB color space. Generates implicit control points such that the interpolator returns first color at t=0 and last color at t=1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateRgbBasis([\"purple\", \"green\", \"orange\"])\n```\n\n----------------------------------------\n\nTITLE: External Timer Control with d3.timeout in D3 4.0\nDESCRIPTION: Shows how to use d3.timeout to stop a timer externally, demonstrating the separation of concerns and improved resource management in D3 4.0.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n});\n\nd3.timeout(function() {\n  t.stop();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Using geoDistance to calculate great-arc distance\nDESCRIPTION: Returns the great-arc distance in radians between two points specified as longitude/latitude arrays in degrees.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngeoDistance(a, b)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Y0 Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current y0 accessor from an area generator. This returns a function that was previously set with the y0() method or the default implementation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\narea.y0() // () => 360\n```\n\n----------------------------------------\n\nTITLE: Setting Pixel Offset in D3.js Axis\nDESCRIPTION: Shows how to set a pixel offset for a D3.js axis. This can be used to ensure crisp rendering on various display resolutions by adjusting the position of the entire axis.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst axis = d3.axisBottom(x).offset(0);\n```\n\n----------------------------------------\n\nTITLE: Using D3 utcParse Method\nDESCRIPTION: Shows the basic usage of d3.utcParse method to create a UTC date parser with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.utcParse(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Setting Outer Radius for D3 Arc Generator\nDESCRIPTION: Demonstrates how to set the outer radius for a D3 arc generator and retrieve the current outer radius accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().outerRadius(240);\n\narc.outerRadius() // () => 240\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data with d3.json\nDESCRIPTION: Demonstrates how to fetch and parse a JSON file using d3.json(). This method automatically parses the response as JSON and returns the resulting JavaScript object or array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.json(\"example.json\");\n```\n\n----------------------------------------\n\nTITLE: Using geoLength to measure great-arc length\nDESCRIPTION: Returns the great-arc length of a GeoJSON object in radians, calculating perimeters for polygons including exterior and interior rings.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngeoLength(object)\n```\n\n----------------------------------------\n\nTITLE: Default Y0 Accessor Implementation in D3 Area Generator\nDESCRIPTION: Shows the default implementation of the y0 accessor in D3's area generator. By default, it returns a constant value of 0, which represents the top of the chart in SVG's default coordinate system.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Clamping Behavior in D3 Linear Scale\nDESCRIPTION: Shows the effect of enabling clamping on a linear scale, comparing behavior with and without clamping for values outside the domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([10, 130], [0, 960]); // clamping disabled by default\nx(-10); // -160, outside range\nx.invert(-160); // -10, outside domain\nx.clamp(true); // enable clamping\nx(-10); // 0, clamped to range\nx.invert(-160); // 10, clamped to domain\n```\n\n----------------------------------------\n\nTITLE: Implementing Default 10° Global Graticule Generator with D3\nDESCRIPTION: A convenience function that creates the default 10° global graticule as a GeoJSON MultiLineString. It demonstrates how to use the geoGraticule function directly.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction geoGraticule10() {\n  return d3.geoGraticule()();\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Equirectangular Projection with D3 and Vue\nDESCRIPTION: This code demonstrates how to create an equirectangular projection using D3's geoEquirectangular() function. It sets up the projection parameters and fits it to a specific extent within a WorldMap component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<WorldMap :height=\"width / 2\" :projection='d3.geoEquirectangular().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width / 2 - 1]], {type: \"Sphere\"}).precision(0.2)' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Square Root Scale in D3.js\nDESCRIPTION: Constructs a square root scale (power scale with exponent 0.5) with a domain of [0, 100] and a range of [\"red\", \"blue\"]. This creates a scale where output changes more rapidly for smaller input values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleSqrt([0, 100], [\"red\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 and WorldMap Component in Vue\nDESCRIPTION: This snippet sets up the necessary imports and constants for using D3 geo projections with a WorldMap component in a Vue.js application. It imports D3 and a custom WorldMap component, and defines width and height constants for the map display.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport WorldMap from \"../components/WorldMap.vue\";\n\nconst width = 688;\nconst height = 400;\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Y-Axis Force in D3 Force Simulation\nDESCRIPTION: Creates a new position force along the y-axis towards the center of the height. This force can be used to push nodes vertically towards a specific position.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst y = d3.forceY(height / 2);\n```\n\n----------------------------------------\n\nTITLE: Setting Curve Factory for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the curve factory for an area generator, which determines how points are connected. This example uses a step curve, which creates a stepped area rather than a smooth one.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().curve(d3.curveStep);\n```\n\n----------------------------------------\n\nTITLE: Setting Defined Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Sets a defined accessor that determines which data points should be included in the area. This example skips data points where the Close value is NaN, creating disconnected segments for missing data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().defined((d) => !isNaN(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Applying rotation to coordinates\nDESCRIPTION: Applies the rotation to a point and returns a new array of coordinates in degrees representing the rotated point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrotation(point)\n```\n\n----------------------------------------\n\nTITLE: Using a bin generator with a linear scale in D3\nDESCRIPTION: Demonstrates how to configure a bin generator to work with a D3 linear scale by using the scale's domain and generating thresholds from the scale's ticks.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().domain(x.domain()).thresholds(x.ticks(20));\n```\n\n----------------------------------------\n\nTITLE: Managing Extent of D3 Quadtree\nDESCRIPTION: Demonstrates how to set and retrieve the extent of a quadtree, which defines the boundaries of the space it covers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().extent([[0, 0], [1, 1]]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.extent() // [[0, 0], [2, 2]]\n```\n\n----------------------------------------\n\nTITLE: Setting X1 Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the x1 accessor (topline x coordinate) for an area generator. This example maps the Close property of each data point to an x-coordinate, suitable for vertically-oriented areas.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().x1((d) => x(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Setting Rounded Range for D3 Linear Scale\nDESCRIPTION: Uses rangeRound() to set the range while also configuring the scale to use rounded interpolation, which helps avoid antialiasing artifacts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear().rangeRound([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Data Reduction with d3.rollup() in JavaScript\nDESCRIPTION: Groups and reduces values into an InternMap from key to reduced value. This example counts penguins by species by using a reducer function that returns array length.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesCount = d3.rollup(penguins, (D) => D.length, (d) => d.species);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Symlog Scale in D3.js\nDESCRIPTION: Demonstrates how to create a basic symlog scale with domain [0, 100] mapping to range [0, 960]. This scale allows for logarithmic-like transformation that can handle zero values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleSymlog([0, 100], [0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Using D3 locale.parse Method\nDESCRIPTION: Shows the basic usage of locale.parse (via d3.timeParse) to create a date parser with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeParse(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Converting D3 Selection to Array Using Spread Syntax\nDESCRIPTION: Shows how to flatten a D3 selection into an array using JavaScript's spread syntax, which utilizes the selection's built-in iterator functionality.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst elements = [...selection];\n```\n\n----------------------------------------\n\nTITLE: Alternative Way to Get an Array from D3 Selection Using Array.from()\nDESCRIPTION: Shows an equivalent way to convert a D3 selection to an array using the Array.from() method, which leverages the selection's iterator functionality.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nArray.from(selection)\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Accessor Function in D3.js\nDESCRIPTION: Shows how to use d3.sort with an accessor function to sort an array of objects based on a specific property.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.sort(data, (d) => d.value)\n```\n\n----------------------------------------\n\nTITLE: Using D3's interpolateTransformCss Function in JavaScript\nDESCRIPTION: Demonstrates using the d3.interpolateTransformCss function to interpolate between two CSS transform strings. The interpolator function returns a transform string at the specified position (0.5) between the start and end transforms.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/transform.md#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nd3.interpolateTransformCss(\"translateY(12px) scale(2)\", \"translateX(30px) rotate(5deg)\")(0.5) // \"translate(15px,6px) rotate(2.5deg) scale(1.5,1.5)\"\n```\n\n----------------------------------------\n\nTITLE: Inverting rotation for coordinates\nDESCRIPTION: The inverse operation of rotation, returns the original coordinates when given rotated coordinates as a two-element array of longitude and latitude in degrees.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrotation.invert(point)\n```\n\n----------------------------------------\n\nTITLE: Accessing Indexed Data in JavaScript\nDESCRIPTION: Shows how to retrieve values from an indexed dataset. This example looks up the closing price of an Apple stock on a specific date.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\naaplDate.get(new Date(\"2013-12-31\")).Close // 80.145714\n```\n\n----------------------------------------\n\nTITLE: Initializing Delaunay Triangulation Data in Vue.js\nDESCRIPTION: Sets up data for a Delaunay triangulation example using D3.js and Vue.js. It generates random points and initializes state variables for finding neighbors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {shallowRef} from \"vue\";\nimport PlotRender from \"../components/PlotRender.js\";\n\nconst random = d3.randomNormal.source(d3.randomLcg(42))();\nconst points = Array.from({length: 1000}, () => [random(), random()]);\nconst findState = shallowRef({x: 0, y: 0, i: -1});\nconst neighborsState = shallowRef({i: -1, N: []});\n```\n\n----------------------------------------\n\nTITLE: Implementing easeBounceInOut in D3.js\nDESCRIPTION: Example of using the easeBounceInOut function for symmetric bounce easing. Creates an array with a single easing function for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[{y: d3.easeBounceInOut}]\n```\n\n----------------------------------------\n\nTITLE: Applying Pack Layout to a Hierarchy in D3\nDESCRIPTION: Applies the pack layout to a hierarchy root node, computing x and y coordinates for circle centers and radius values for each node. Requires calling root.sum() before use and optionally root.sort() for better layouts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n*pack*(*root*)\n```\n\n----------------------------------------\n\nTITLE: Setting Fractional Digits for SVG Path Coordinates in D3\nDESCRIPTION: Shows how to set the number of fractional digits for coordinates in SVG path strings using path.digits().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.geoPath().digits(3);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the current domain from a bin generator in D3\nDESCRIPTION: Shows how to retrieve the current domain from a bin generator, which in this example returns [0, 1] as the domain range.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbin.domain() // [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Creating a Value-Based Symbol Size Generator\nDESCRIPTION: Creates a symbol generator that dynamically determines symbol size based on a data value using a linear scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbolSize = d3.scaleLinear([0, 100]);\nconst symbol = d3.symbol().size((d) => symbolSize(d.value));\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Link Shorthand in D3.js\nDESCRIPTION: Demonstrates the shorthand method for creating a link with curveBumpY, suitable for tree diagrams rooted on the top edge of the display.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.link(d3.curveBumpY);\n```\n\n----------------------------------------\n\nTITLE: Generating Ticks from a Linear Scale in D3.js\nDESCRIPTION: Demonstrates how to generate uniformly spaced tick values from a linear scale's domain, with default count of 10 if not specified.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([10, 100], [\"red\", \"blue\"]);\nx.ticks(); // [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n```\n\n----------------------------------------\n\nTITLE: D3 Time Range with Step Example\nDESCRIPTION: Shows how to generate date ranges with specific step intervals, demonstrating both odd and even day ranges.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.range(new Date(2015, 0, 1), new Date(2015, 0, 7), 2) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]\n```\n\n----------------------------------------\n\nTITLE: Using schemeGnBu array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Green to Blue. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeGnBu[k]\n```\n\n----------------------------------------\n\nTITLE: Custom Node ID Accessor for String Identifiers in D3.js\nDESCRIPTION: A custom ID accessor function that returns the id string property of each node, allowing links to reference nodes by name instead of index.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction id(d) {\n  return d.id;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Quantile Scale in D3.js\nDESCRIPTION: Creates a new quantile scale with a domain of penguin body mass values and a range using the Blues color scheme with 5 classes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantile(penguins.map((d) => d.body_mass_g), d3.schemeBlues[5]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Digits Precision\nDESCRIPTION: Retrieves the current maximum fraction digits setting from a symbol generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsymbol.digits() // 3\n```\n\n----------------------------------------\n\nTITLE: Calculating Tick Increment with D3.js in JavaScript\nDESCRIPTION: The d3.tickIncrement() function calculates the tick step for given start, stop, and count values. It returns the negative inverse tick step if the calculated step would be less than one.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.tickIncrement(1, 9, 5) // 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.tickIncrement(1, 9, 20) // -2, meaning a tick step 0.5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Projection from D3 Path Generator\nDESCRIPTION: Demonstrates how to retrieve the current projection set for the path generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\npath.projection() // a d3.geoAlbers instance\n```\n\n----------------------------------------\n\nTITLE: Advanced CSV Parsing with Row Conversion Function\nDESCRIPTION: Demonstrates using a row conversion function to transform parsed CSV data. This example converts a CSV row with year and length values into a custom object with type conversion.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst data = d3.csvParse(string, (d) => {\n  return {\n    year: new Date(+d.Year, 0, 1), // lowercase and convert \"Year\" to Date\n    make: d.Make, // lowercase\n    model: d.Model, // lowercase\n    length: +d.Length // lowercase and convert \"Length\" to number\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Domain for a D3.js Quantile Scale\nDESCRIPTION: Shows how to set the domain of a quantile scale after construction, using an array of penguin body mass values that will be internally sorted and analyzed for threshold computation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantile(d3.schemeBlues[5]);\ncolor.domain(penguins.map((d) => d.body_mass_g));\n```\n\n----------------------------------------\n\nTITLE: Appending Elements with D3.js Selection\nDESCRIPTION: Examples of appending paragraph elements to all div elements using d3.selectAll().append() method. Shows three equivalent implementations with different approaches.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").append(\"p\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").append(() => document.createElement(\"p\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").select(function() {\n  return this.appendChild(document.createElement(\"p\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Symbol Type with a Constant Value\nDESCRIPTION: Configures a symbol generator to use the cross symbol type, returning the modified generator for chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = d3.symbol().type(d3.symbolCross);\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Generator with Custom Curve in D3.js\nDESCRIPTION: Creates a new link generator using the curveBumpY curve type, with custom x and y accessors. This is suitable for visualizing links in a tree diagram rooted on the top edge of the display.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.link(d3.curveBumpY)\n    .x((d) => d.x)\n    .y((d) => d.y);\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks with Dispatch in JavaScript\nDESCRIPTION: Shows how to register multiple callbacks for different event types using the on() method of the dispatch object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch.on(\"start\", callback1);\ndispatch.on(\"start.foo\", callback2);\ndispatch.on(\"end\", callback3);\n```\n\n----------------------------------------\n\nTITLE: Using a Band Scale to Get a Band Position\nDESCRIPTION: Using the band scale to convert a domain value to its corresponding band position in the output range. Returns undefined for values not in the domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]);\nx(\"a\"); // 0\nx(\"b\"); // 320\nx(\"c\"); // 640\nx(\"d\"); // undefined\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom DSV Parser for a Specific Delimiter\nDESCRIPTION: Creates a new DSV parser and formatter for the specified delimiter character. This example creates a CSV parser using a comma as the delimiter.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst csv = d3.dsvFormat(\",\");\n```\n\n----------------------------------------\n\nTITLE: Converting a Color to String in D3.js\nDESCRIPTION: Shows how to convert a color to its string representation using toString(), which is an alias for formatRgb().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"yellow\").toString() // \"rgb(255, 255, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Domain\nDESCRIPTION: Shows how to retrieve the current domain of an ordinal scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.domain() // [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Point Radius from D3 Path Generator\nDESCRIPTION: Demonstrates how to retrieve the current point radius setting from the path generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npath.pointRadius() // 10\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DSV Parser with d3.dsvFormat\nDESCRIPTION: Creates a custom delimiter-separated values parser and formatter using a specified delimiter character. This example uses a pipe character as the delimiter.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nd3.dsvFormat(\"|\").parse(\"foo|bar\\n1|2\")) // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current X Accessor\nDESCRIPTION: Shows how to retrieve the currently configured x accessor function from a line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nline.x() // (d) => x(d.Date)\n```\n\n----------------------------------------\n\nTITLE: Resetting Zoom Transform Instantly in D3\nDESCRIPTION: Resets the zoom transform to the identity transform (no zoom, no pan) instantly. This is useful for implementing 'reset view' functionality in a visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nselection.call(zoom.transform, d3.zoomIdentity);\n```\n\n----------------------------------------\n\nTITLE: Creating CIELAB Color in D3 JavaScript\nDESCRIPTION: Constructs a new CIELAB color using d3.lab() function. The example shows creating a red color in CIELAB space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nd3.lab(\"red\") // {l: 54.29173376861782, a: 80.8124553179771, b: 69.88504032350531, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Single Row as CSV with d3.csvFormatRow\nDESCRIPTION: Shows how to format a single array of values as a CSV row. This function handles escaping of special characters like commas, quotes, and newlines within the values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csvFormatRow([\"foo\", \"bar\"]) // \"foo,bar\"\n```\n\n----------------------------------------\n\nTITLE: Sorting D3 Hierarchy Nodes for Treemaps and Icicles in JavaScript\nDESCRIPTION: Demonstrates sorting nodes in a D3 hierarchy for treemap and icicle layouts, prioritizing height and value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nroot\n    .sum((d) => d.value)\n    .sort((a, b) => b.height - a.height || b.value - a.value);\n```\n\n----------------------------------------\n\nTITLE: Creating D3 Ribbon Generator\nDESCRIPTION: Creates a new ribbon generator with default settings for chord diagrams.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = d3.ribbon();\n```\n\n----------------------------------------\n\nTITLE: Using closePath Method with D3 Path Object\nDESCRIPTION: Demonstrates the closePath method which ends the current subpath and draws a straight line from the current point to the initial point. Equivalent to context.closePath in canvas.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npath.closePath();\n```\n\n----------------------------------------\n\nTITLE: Rendering a Triangle from Delaunay Triangulation in D3.js\nDESCRIPTION: Illustrates how to render a single triangle from a Delaunay triangulation using the triangles and points data from the Delaunay object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {points, triangles} = delaunay;\nconst t0 = triangles[i * 3 + 0];\nconst t1 = triangles[i * 3 + 1];\nconst t2 = triangles[i * 3 + 2];\ncontext.moveTo(points[t0 * 2], points[t0 * 2 + 1]);\ncontext.lineTo(points[t1 * 2], points[t1 * 2 + 1]);\ncontext.lineTo(points[t2 * 2], points[t2 * 2 + 1]);\ncontext.closePath();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Date Parsers with D3\nDESCRIPTION: Shows how to create a date parser using d3.utcParse with a format specifier and use it to convert a string representation of a date into a Date object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst parseTime = d3.utcParse(\"%B %d, %Y\");\nparseTime(\"June 30, 2015\"); // 2023-05-31\n```\n\n----------------------------------------\n\nTITLE: Using a Quantize Scale with Binary Output in D3.js\nDESCRIPTION: Demonstrates how to apply a quantize scale to map continuous values to discrete outputs. Values below the middle threshold map to \"brown\", while values above map to \"steelblue\".\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantize([0, 1], [\"brown\", \"steelblue\"]);\ncolor(0.49); // \"brown\"\ncolor(0.51); // \"steelblue\"\n```\n\n----------------------------------------\n\nTITLE: Copying Ordinal Scale\nDESCRIPTION: Shows how to create an exact copy of an ordinal scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst c1 = d3.scaleOrdinal([\"a\", \"b\", \"c\"], d3.schemeTableau10);\nconst c2 = c1.copy();\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Order with stackOrderDescending in D3.js\nDESCRIPTION: Sets the stack order using d3.stackOrderDescending, which arranges series so that the largest (by sum of values) appears at the bottom of the stack.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderDescending);\n```\n\n----------------------------------------\n\nTITLE: Fetching Binary Data as Blob with d3.blob\nDESCRIPTION: Demonstrates how to fetch a binary file as a Blob using d3.blob(). This is useful for handling binary data like database files or images that need to be processed as Blob objects.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst blob = await d3.blob(\"example.db\");\n```\n\n----------------------------------------\n\nTITLE: Default Source Accessor\nDESCRIPTION: Default function for accessing source data in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction source(d) {\n  return d.source;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Smallest Enclosing Circle in D3\nDESCRIPTION: Computes the smallest circle that encloses a given array of circles. Each input circle must have radius (r) and center coordinates (x, y). Uses the Matoušek-Sharir-Welzl algorithm to find the optimal enclosing circle.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npackEnclose(*circles*)\n```\n\n----------------------------------------\n\nTITLE: Implementing Spherical Mercator Projection in JavaScript\nDESCRIPTION: This function implements the spherical Mercator projection, converting longitude (lambda) and latitude (phi) in radians to x and y coordinates on a plane. It demonstrates a basic point transformation approach to map projections.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mercator(lambda, phi) {\n  const x = lambda;\n  const y = Math.log(Math.tan(Math.PI / 4 + phi / 2));\n  return [x, y];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Range from a D3.js Quantile Scale\nDESCRIPTION: Demonstrates how to get the current range values from a quantile scale, which returns the array of discrete output values that domain values are mapped to.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.range() // [\"#eff3ff\", \"#bdd7e7\", \"#6baed6\", \"#3182bd\", \"#08519c\"]\n```\n\n----------------------------------------\n\nTITLE: Default Pad Angle Accessor\nDESCRIPTION: Default function for accessing pad angle in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction padAngle() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using moveTo Method with D3 Path Object\nDESCRIPTION: Shows how to use the moveTo method with a d3.path object to move to a specific point. This is equivalent to context.moveTo in canvas and SVG's moveto command.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npath.moveTo(100, 100);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Curve Factory\nDESCRIPTION: Shows how to retrieve the currently configured curve factory from a line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nline.curve() // d3.curveStep\n```\n\n----------------------------------------\n\nTITLE: Using d3.max to find maximum values in JavaScript\nDESCRIPTION: Returns the maximum value in the given iterable using natural order. Ignores undefined, null and NaN values. An optional accessor function can be used to transform values before comparison.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max([3, 2, 1, 1, 6, 2, 4]) // 6\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max([\"bob\", \"alice\", \"carol\"]) // \"carol\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max([new Date(\"2018-01-01\"), new Date(\"2011-03-09\")]) // 2018-01-01\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max([3, 2, 1, NaN, 4]) // 4\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max(alphabet, (d) => d.frequency) // 0.12702\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max(alphabet, (d) => d.letter === \"E\" ? NaN : d.frequency) // 0.09056\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max([]) // undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.max(alphabet, (d) => d.doesnotexist) // undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Radial Link Generator in D3\nDESCRIPTION: Demonstrates how to create a radial link generator for visualizing links in a tree diagram with elements positioned using angle and radius. This example shows the basic setup where angle is mapped to the node's x coordinate and radius to the y coordinate.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-link.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.linkRadial()\n    .angle((d) => d.x)\n    .radius((d) => d.y);\n```\n\n----------------------------------------\n\nTITLE: Disjoint Check in D3.js - JavaScript\nDESCRIPTION: Shows how to check if two iterables are disjoint, returning true if they have no values in common.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.disjoint([1, 3], [2, 4]) // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Angle for D3.js Pie Generator in JavaScript\nDESCRIPTION: Sets the overall start angle for the pie chart generated by a D3.js pie generator. The angle is specified in radians, with 0 at 12 o'clock and positive angles proceeding clockwise.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie().startAngle(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Y Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Demonstrates setting the y accessor for a D3 area generator, which internally sets y0 to the specified accessor and y1 to null. This is used for vertically-oriented areas where time flows from top to bottom.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().y((d) => y(d.Date));\n```\n\n----------------------------------------\n\nTITLE: Using lineTo Method with D3 Path Object\nDESCRIPTION: Shows how to use the lineTo method to draw a straight line from the current point to a specified point. Equivalent to context.lineTo in canvas.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npath.lineTo(200, 200);\n```\n\n----------------------------------------\n\nTITLE: Using arcTo Method with D3 Path Object\nDESCRIPTION: Demonstrates the arcTo method which draws a circular arc segment with a specified radius, tangent to lines between given points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npath.arcTo(150, 150, 300, 10, 40);\n```\n\n----------------------------------------\n\nTITLE: Using arc Method with D3 Path Object\nDESCRIPTION: Shows how to draw a circular arc segment with the arc method, specifying center point, radius, start angle, and end angle.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npath.arc(80, 80, 70, 0, Math.PI * 2);\n```\n\n----------------------------------------\n\nTITLE: Setting Size for Pack Layout in D3\nDESCRIPTION: Sets or gets the size of the pack layout as a two-element array [width, height]. The default size is [1, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n*pack*.size(*size*)\n```\n\n----------------------------------------\n\nTITLE: Creating Constant Functions in D3\nDESCRIPTION: Implementation of a helper function that replaces the removed d3.functor method. This pattern creates a function that always returns the same constant value regardless of the arguments passed to it.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Precision from D3.js Link Generator\nDESCRIPTION: Shows how to retrieve the current maximum fraction digits setting from a link generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlink.digits() // 3\n```\n\n----------------------------------------\n\nTITLE: Generating Binomial Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Shows how to use d3.randomBinomial() to generate random numbers with a binomial distribution, with 40 trials and a success probability of 0.5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomBinomial(40, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current X Accessor from D3.js Link Generator\nDESCRIPTION: Shows how to retrieve the current x accessor function from a link generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlink.x() // (d) => x(d.x)\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component for Force Simulation Example\nDESCRIPTION: Vue script setup block that imports the ExampleDisjointForce component to be used in the documentation page as a demonstration of d3-force capabilities.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport ExampleDisjointForce from \"./components/ExampleDisjointForce.vue\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the d3.color Function with a Color Name\nDESCRIPTION: Example of parsing a CSS color name into an RGB color object using d3.color().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\") // {r: 70, g: 130, b: 180, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Using schemePurples array in D3.js\nDESCRIPTION: A discrete sequential color scheme array with Purple hues. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemePurples[k]\n```\n\n----------------------------------------\n\nTITLE: Initializing InternMap with Date keys in D3\nDESCRIPTION: Creates a new InternMap for storing values indexed by Date objects. This allows date-based lookups that match by value rather than reference, bypassing JavaScript's default object equality checking.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst valueByDate = new d3.InternMap([\n  [new Date(\"2021-01-01\"), 42],\n  [new Date(\"2022-01-01\"), 12],\n  [new Date(\"2023-01-01\"), 45]\n]);\n```\n\n----------------------------------------\n\nTITLE: Full-Precision Summation with Accessor using D3 fsum in JavaScript\nDESCRIPTION: Calculates the full-precision sum of values extracted from an array of objects using an accessor function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.fsum(penguins, (d) => d.body_mass_g) // 1437000\n```\n\n----------------------------------------\n\nTITLE: Formatting Tick Values with D3.js Time Scales\nDESCRIPTION: Example of creating a time format function for displaying tick values. The function automatically chooses appropriate formats based on the tick interval.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleUtc().domain([new Date(\"2000-01-01T00:00Z\"), new Date(\"2000-01-01T02:00Z\")]);\nconst T = x.ticks(); // [2000-01-01T00:00Z, 2000-01-01T00:15Z, 2000-01-01T00:30Z, …]\nconst f = x.tickFormat();\nT.map(f); // [\"2000\", \"12:15\", \"12:30\", \"12:45\", \"01 AM\", \"01:15\", \"01:30\", \"01:45\", \"02 AM\"]\n```\n\n----------------------------------------\n\nTITLE: Using d3.time.days with step parameter in D3.js v3.x\nDESCRIPTION: Example of using d3.time.days with a step parameter in D3.js version 3.x, which filtered returned dates based on field number. This returns only odd days of the month from the date range.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nd3.time.days(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\n```\n\n----------------------------------------\n\nTITLE: Default Y Accessor Function for D3.js Link Generator\nDESCRIPTION: The default y accessor function used by D3.js link generators, which extracts the second element from the input data array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y(d) {\n  return d[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Gamma Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Illustrates the usage of d3.randomGamma() to generate random numbers with a gamma distribution, with shape parameter k=2 and scale parameter theta=1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomGamma(2, 1)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Key-based Data Joining\nDESCRIPTION: Sample HTML structure showing div elements with IDs that will be used for key-based data joining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"Ford\"></div>\n<div id=\"Jarrah\"></div>\n<div id=\"Kwon\"></div>\n<div id=\"Locke\"></div>\n<div id=\"Reyes\"></div>\n<div id=\"Shephard\"></div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Rolled-up Data in JavaScript\nDESCRIPTION: Demonstrates how to retrieve values from a nested rollup result. This example gets the count of female Adelie penguins from data rolled up by species and sex.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nspeciesSexCount.get(\"Adelie\").get(\"FEMALE\") // 73\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple CSS Classes to Elements with D3 Selection\nDESCRIPTION: Adds multiple CSS classes (\"foo\" and \"bar\") to the selected elements by providing space-separated class names and setting the value to true.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nselection.classed(\"foo bar\", true)\n```\n\n----------------------------------------\n\nTITLE: Default ID Accessor for D3 Stratify\nDESCRIPTION: Shows the default implementation of the id accessor function for the stratify operator. This function extracts the 'id' property from each data object to identify nodes in the hierarchy.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction id(d) {\n  return d.id;\n}\n```\n\n----------------------------------------\n\nTITLE: Lowering Elements in D3.js Selection\nDESCRIPTION: Example of lowering elements to become the first child of their parent using the each() method. This effectively moves elements to the beginning of their parent's child list.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nselection.each(function() {\n  this.parentNode.insertBefore(this, this.parentNode.firstChild);\n});\n```\n\n----------------------------------------\n\nTITLE: Using nice() to Extend Time Scale Domains in D3.js\nDESCRIPTION: Example of extending a time scale's domain to start and end on nice round values. This is useful when domains are computed from data and may have irregular bounds.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleUtc().domain([new Date(\"2000-01-01T12:34Z\"), new Date(\"2000-01-01T12:59Z\")]).nice();\nx.domain(); // [2000-01-01T12:30Z, 2000-01-01T13:00Z]\n```\n\n----------------------------------------\n\nTITLE: Vue.js Component Setup for D3.js Color Schemes\nDESCRIPTION: This code sets up a Vue.js component that imports D3.js and a custom ColorSwatches component. It's used to display and interact with the various color schemes discussed in the document.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/categorical.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport ColorSwatches from \"../components/ColorSwatches.vue\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Accessor for D3 Stack Generator\nDESCRIPTION: Demonstrates setting the value accessor for a D3 stack generator. The value accessor determines how values are extracted from the data for each key (series).\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().value((d, key) => d[key]);\n```\n\n----------------------------------------\n\nTITLE: Constructing a D3 Hierarchy from Data in JavaScript\nDESCRIPTION: Shows how to create a D3 hierarchy object from a hierarchical data structure.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = d3.hierarchy(data);\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Precision for D3.js Arc Generator\nDESCRIPTION: Shows how to set the maximum number of digits after the decimal point for arc path data generation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().digits(3);\n```\n\n----------------------------------------\n\nTITLE: Using schemeYlGnBu array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Yellow to Green to Blue. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeYlGnBu[k]\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom X Accessor for D3.js Link Generator\nDESCRIPTION: Demonstrates how to set a custom x-accessor function for a horizontal link generator that applies a scale function to the x property of the data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.linkHorizontal().x((d) => x(d.x));\n```\n\n----------------------------------------\n\nTITLE: Setting a Diverging Scale's Interpolator in D3.js\nDESCRIPTION: Demonstrates how to set a diverging scale's interpolator function after creation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleDiverging().interpolator(d3.interpolateRdBu);\n```\n\n----------------------------------------\n\nTITLE: Using Creator Function in D3.js\nDESCRIPTION: Examples showing how d3.creator() can be used to create element-generating functions for append() and insert() methods. Shows two equivalent implementations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nselection.append(\"div\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nselection.append(d3.creator(\"div\"));\n```\n\n----------------------------------------\n\nTITLE: Loading XML File with MIME Type in D3.js v4.0\nDESCRIPTION: Example of loading an XML file using d3.xml with a specified MIME type in D3.js version 4.0. This demonstrates the new method chaining approach for setting the MIME type.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nd3.xml(\"file.svg\").mimeType(\"image/svg+xml\").get(function(error, svg) {\n  …\n});\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in Cubehelix color space using d3.interpolateCubehelix\nDESCRIPTION: Returns a Cubehelix color space interpolator between two colors using a configurable gamma. Uses the shortest path between hues. The colors are converted to Cubehelix using d3.cubehelix.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateCubehelix(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Polygon Area with D3\nDESCRIPTION: This function calculates the signed area of a polygon. A positive result indicates counterclockwise vertex order, while a negative result indicates clockwise order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.polygonArea([[1, 1], [1.5, 0], [2, 1]]) // -0.5\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Diverging Scale's Interpolator in D3.js\nDESCRIPTION: Shows how to get the current interpolator function from a diverging scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.interpolator() // d3.interpolateRdBu\n```\n\n----------------------------------------\n\nTITLE: Using Path-Based Hierarchy with D3 Stratify\nDESCRIPTION: Demonstrates how to use the path accessor in stratify to automatically create hierarchies from slash-delimited file paths. This method ignores id and parentId accessors and infers relationships from the path structure.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst paths = [\n  \"axes.js\",\n  \"channel.js\",\n  \"context.js\",\n  \"legends.js\",\n  \"legends/ramp.js\",\n  \"marks/density.js\",\n  \"marks/dot.js\",\n  \"marks/frame.js\",\n  \"scales/diverging.js\",\n  \"scales/index.js\",\n  \"scales/ordinal.js\",\n  \"stats.js\",\n  \"style.js\",\n  \"transforms/basic.js\",\n  \"transforms/bin.js\",\n  \"transforms/centroid.js\",\n  \"warnings.js\",\n];\n```\n\nLANGUAGE: js\nCODE:\n```\nconst root = d3.stratify().path((d) => d)(paths);\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Style Properties with D3 Selection\nDESCRIPTION: Sets the CSS \"color\" style property to \"red\" on the selected elements. The style method allows direct manipulation of inline CSS styles on elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nselection.style(\"color\", \"red\")\n```\n\n----------------------------------------\n\nTITLE: Setting Both Inner and Outer Padding with the padding Method\nDESCRIPTION: A convenience method for setting both inner and outer padding to the same value on a band scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript-vue\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]).padding({{padding}});\n```\n\nLANGUAGE: javascript-vue\nCODE:\n```\nx.padding() // {{padding}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Radial Line Generator in D3.js\nDESCRIPTION: Constructs a new radial line generator with default settings using d3.lineRadial().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.lineRadial();\n```\n\n----------------------------------------\n\nTITLE: Sorting D3 Hierarchy Nodes for Trees and Dendrograms in JavaScript\nDESCRIPTION: Shows how to sort nodes in a D3 hierarchy for tree and dendrogram layouts, considering height and node id.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nroot\n    .sum((d) => d.value)\n    .sort((a, b) => b.height - a.height || d3.ascending(a.id, b.id));\n```\n\n----------------------------------------\n\nTITLE: Using schemeGreys array in D3.js\nDESCRIPTION: A discrete sequential color scheme array with Grey hues. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeGreys[k]\n```\n\n----------------------------------------\n\nTITLE: Creating a D3 Chord Layout\nDESCRIPTION: Initializes a new chord layout with default settings. This is the first step to create a chord diagram, which will later be used to compute angle calculations based on a matrix of values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/chord.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chord = d3.chord();\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with D3 Axis\nDESCRIPTION: Initial setup of a Vue component with D3 axis integration, including reactive domain updates and lifecycle hooks.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst domain = shallowRef([0, 100]);\nconst range = [20, 668];\n\nlet timer;\n\nonMounted(() => {\n  timer = d3.interval(() => {\n    const x = Math.random() * 100;\n    const l = Math.random() * 100;\n    domain.value = [x, x + l];\n  }, 5000);\n});\n\nonUnmounted(() => {\n  timer?.stop();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a value accessor for a bin generator in D3\nDESCRIPTION: Sets the value accessor function for a bin generator to extract the culmen_length_mm property from each data point. This determines which values are used for binning.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().value((d) => d.culmen_length_mm);\n```\n\n----------------------------------------\n\nTITLE: Raising Elements in D3.js Selection\nDESCRIPTION: Example of raising elements to become the last child of their parent using the each() method. This effectively moves elements to the end of their parent's child list.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nselection.each(function() {\n  this.parentNode.appendChild(this);\n});\n```\n\n----------------------------------------\n\nTITLE: Default Weight Accessor in D3 Density Estimation\nDESCRIPTION: Default function for determining point weights in D3's density estimation. Returns a constant weight of 1 for all points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/density.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction weight() {\n  return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Domain of a D3 Linear Scale\nDESCRIPTION: Retrieves a copy of the scale's current domain using the domain() method without arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.domain() // [-1, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Checking Default Unknown Value\nDESCRIPTION: Demonstrates how to check the default unknown value of an ordinal scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal([\"a\", \"b\", \"c\"], d3.schemeTableau10);\ncolor.unknown(); // d3.scaleImplicit\n```\n\n----------------------------------------\n\nTITLE: Using bisectRight() Function on an Array of Dates in JavaScript\nDESCRIPTION: Uses the bisectRight function to find an insertion point after any existing equivalent dates. This returns the same result as bisect() and finds where January 2, 2014 would be inserted after any existing instances.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisectRight(aapl.map((d) => d.Date), new Date(\"2014-01-02\")) // 163\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for Displaying Cluster Example\nDESCRIPTION: A Vue setup script that imports the Plot library and defines a sample hierarchical dataset of gods for visualization with the cluster layout.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/cluster.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport PlotRender from \"../components/PlotRender.js\";\n\nconst gods = [\n  \"Chaos/Gaia/Mountains\",\n  \"Chaos/Gaia/Pontus\",\n  \"Chaos/Gaia/Uranus\",\n  \"Chaos/Eros\",\n  \"Chaos/Erebus\",\n  \"Chaos/Tartarus\"\n];\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Parsing TSV Data with d3.tsvParse\nDESCRIPTION: Parses a TSV (tab-separated values) string into an array of objects with column names as properties. The result includes a columns property with the column names in order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nd3.tsvParse(\"foo\\tbar\\n1\\t2\") // [{foo: \"1\", bar: \"2\"}, columns: [\"foo\", \"bar\"]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving the current threshold generator in D3\nDESCRIPTION: Shows how to retrieve the current threshold generator function from a bin generator, which in this example returns a function that creates thresholds at 0, 0.5, and 1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbin.thresholds() // () => [0, 0.5, 1]\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 Radial Area Generator\nDESCRIPTION: Creates a new radial area generator with default settings.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial();\n```\n\n----------------------------------------\n\nTITLE: Sorting Array with Multiple Accessors in D3.js\nDESCRIPTION: Demonstrates how to use d3.sort with multiple accessor functions to sort an array of objects based on multiple properties.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.sort(points, ({x}) => x, ({y}) => y)\n```\n\n----------------------------------------\n\nTITLE: Creating an Ordinal Scale with Stroke Symbols\nDESCRIPTION: Creates an ordinal scale that maps categories to symbol types designed for stroking.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbolType = d3.scaleOrdinal(d3.symbolsStroke);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Separation Function for Cluster Layout\nDESCRIPTION: The default separation function used by D3's cluster layout to determine the spacing between neighboring leaf nodes. It returns 1 for siblings and 2 for non-siblings.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/cluster.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction separation(a, b) {\n  return a.parent == b.parent ? 1 : 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Fitting New Jersey State Plane Projection\nDESCRIPTION: Example of using fitExtent to scale and translate a Transverse Mercator projection to fit New Jersey GeoJSON data within a 960×500 bounding box with 20px padding.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar projection = d3.geoTransverseMercator()\n    .rotate([74 + 30 / 60, -38 - 50 / 60])\n    .fitExtent([[20, 20], [940, 480]], nj);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with D3 in JavaScript\nDESCRIPTION: Shows the usage of d3.randomInt() to generate random integers with a uniform distribution between 0 and 99.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomInt(100) // generate integers ≥0 and <100\n```\n\n----------------------------------------\n\nTITLE: Custom Percentage Tick Formatting in D3.js Linear Scales\nDESCRIPTION: Demonstrates creating a custom percentage format for ticks where the precision is automatically set by the scale based on the tick interval.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([-1, 1], [0, 960]);\nconst T = x.ticks(5); // [-1, -0.5, 0, 0.5, 1]\nconst f = x.tickFormat(5, \"+%\");\nT.map(f); // [\"−100%\", \"−50%\", \"+0%\", \"+50%\", \"+100%\"]\n```\n\n----------------------------------------\n\nTITLE: Using interval.every with interval.range from different start date in JavaScript\nDESCRIPTION: Creates a range of dates containing only every 2nd day, but starting from January 2 to January 8, 2015. This demonstrates how consistent intervals are maintained regardless of range start date.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.every(2).range(new Date(2015, 0, 2), new Date(2015, 0, 8)) // [2015-01-03T00:00, 2015-01-05T00:00, 2015-01-07T00:00]\n```\n\n----------------------------------------\n\nTITLE: Default Radius Accessor\nDESCRIPTION: Default function for accessing radius in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction radius(d) {\n  return d.radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rounding in D3 Partition Layout\nDESCRIPTION: Enables or disables rounding in the partition layout. When enabled, it rounds the x0, y0, x1, and y1 values to integers. Default is false.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/partition.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n*partition*.round(*round*)\n```\n\n----------------------------------------\n\nTITLE: Qualifying namespace names using d3.namespace function\nDESCRIPTION: Shows how to use the d3.namespace function to qualify a name with a namespace prefix, returning an object with space and local attributes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/namespaces.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.namespace(\"svg:text\") // {space: \"http://www.w3.org/2000/svg\", local: \"text\"}\n```\n\n----------------------------------------\n\nTITLE: Using formatPrefix for Consistent SI Prefix Formatting\nDESCRIPTION: This snippet shows how to use formatPrefix to create a formatter that consistently uses the same SI prefix for a range of values, useful for comparing numbers in the same units.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = d3.formatPrefix(\",.0\", 1e-6);\nf(0.00042); // \"420µ\"\nf(0.0042); // \"4,200µ\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a Linear Scale in D3.js\nDESCRIPTION: Shows how to create an exact copy of a scale that can be modified independently of the original scale using the copy() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst x1 = d3.scaleLinear([0, 100], [\"red\", \"blue\"]);\nconst x2 = x1.copy();\n```\n\n----------------------------------------\n\nTITLE: Transposing Matrices with d3.transpose in JavaScript\nDESCRIPTION: Performs a matrix transpose operation, converting rows to columns and columns to rows. Useful for restructuring tabular data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.transpose([[\"Alice\", \"Bob\", \"Carol\"], [32, 13, 14]]) // [[\"Alice\", 32], [\"Bob\", 13], [\"Carol\", 14]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.transpose([[\"Alice\", 32], [\"Bob\", 13], [\"Carol\", 14]]) // [[\"Alice\", \"Bob\", \"Carol\"], [32, 13, 14]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transition Easing Function in D3\nDESCRIPTION: Returns the current easing function for the first non-null element in the transition. Useful when the transition contains only one element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.ease() // d3.easeCubic\n```\n\n----------------------------------------\n\nTITLE: Applying Box Blur to a 2D Matrix in JavaScript\nDESCRIPTION: Shows how to use d3.blur2() to blur a 2D matrix represented as a flat array with width and height properties. The example blurs a 4×3 matrix with a radius of 1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/blur.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst matrix = {\n  width: 4,\n  height: 3,\n  data: [\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 1\n  ]\n};\n\nd3.blur2(matrix, 1);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a D3 Path Object for SVG Path Generation\nDESCRIPTION: Demonstrates how to create a d3.path object, use it with the drawCircle function, and convert the result to an SVG path data string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.path();\ndrawCircle(path, 40);\npath.toString(); // \"M40,0A40,40,0,1,1,-40,0A40,40,0,1,1,40,0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Time Format Locale in D3.js\nDESCRIPTION: This snippet demonstrates how to create a custom time format locale using d3.timeFormatLocale(). It defines date and time formats, weekday and month names, and other locale-specific settings for English (US).\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst enUs = d3.timeFormatLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays with d3.zip in JavaScript\nDESCRIPTION: Combines multiple arrays by pairing elements at the same index positions. The result is truncated to the length of the shortest input array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.zip([\"Alice\", \"Bob\", \"Carol\"], [32, 13, 14]) // [[\"Alice\", 32], [\"Bob\", 13], [\"Carol\", 14]]\n```\n\n----------------------------------------\n\nTITLE: Using the nice() Method to Round Domain Values in D3.js\nDESCRIPTION: Shows how the nice() method extends a scale's domain to start and end on nice round values, making it more readable for visualization purposes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([0.241079, 0.969679], [0, 960]).nice();\nx.domain(); // [0.2, 1]\n```\n\n----------------------------------------\n\nTITLE: Default X-Coordinate Accessor in D3 Density Estimation\nDESCRIPTION: Default function for accessing x-coordinates from data points in D3's density estimation. Returns the first element of the data point array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/density.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction x(d) {\n  return d[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Using d3.count to count valid numeric values in JavaScript\nDESCRIPTION: Returns the number of valid number values (i.e., not null, NaN, or undefined) in the specified iterable. Accepts an optional accessor function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.count(penguins, (d) => d.body_mass_g) // 342\n```\n\n----------------------------------------\n\nTITLE: Setting Varying Easing Functions in D3 Transitions\nDESCRIPTION: Specifies a factory for creating easing functions for each element in the transition. Allows for dynamic easing based on data or element properties.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.easeVarying((d) => d3.easePolyIn.exponent(d.exponent));\n```\n\n----------------------------------------\n\nTITLE: Setting Base for Logarithmic Scale in D3.js\nDESCRIPTION: Sets the base of the logarithmic scale to 2 instead of the default 10. Affects which ticks are chosen but not the scale encoding.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLog([1, 1024], [0, 960]).base(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Sorting for D3.js Pie Generator in JavaScript\nDESCRIPTION: Sets a custom sorting function for the data used in a D3.js pie generator. This affects the order of the pie slices in the generated chart.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie().sort((a, b) => d3.ascending(a.name, b.name));\n```\n\n----------------------------------------\n\nTITLE: Setting Radius Accessor for D3.js Radial Line Generator\nDESCRIPTION: Configures the radius accessor for a radial line generator, which determines the distance from the origin for each data point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.lineRadial().radius((d) => r(d.temperature));\n```\n\n----------------------------------------\n\nTITLE: Converting Object Arrays to CSV with Map and CsvFormatRows\nDESCRIPTION: Shows how to convert an array of objects to a CSV string by first mapping each object to an array of values, then using csvFormatRows to format the result. This approach allows explicit control over column order and data transformation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = d3.csvFormatRows(data.map((d, i) => {\n  return [\n    d.year.getUTCFullYear(), // Assuming d.year is a Date object.\n    d.make,\n    d.model,\n    d.length\n  ];\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Quickselect Algorithm with D3.js\nDESCRIPTION: Demonstrates the use of d3.quickselect to rearrange array elements and find the k-th smallest element. It modifies the array in-place.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst numbers = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n\nd3.quickselect(numbers, 8)\n```\n\n----------------------------------------\n\nTITLE: Interpolating Fill Style from Red to Blue using styleTween in D3.js\nDESCRIPTION: Example showing how to use styleTween to interpolate the fill style from red to blue. This utilizes d3.interpolateRgb to create a smooth color transition between two fixed values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.styleTween(\"fill\", () => d3.interpolateRgb(\"red\", \"blue\"));\n```\n\n----------------------------------------\n\nTITLE: Using Freedman-Diaconis rule for bin thresholds in D3\nDESCRIPTION: Configures a bin generator to use the Freedman-Diaconis rule to determine the optimal number of bins based on the data distribution.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().thresholds(d3.thresholdFreedmanDiaconis);\n```\n\n----------------------------------------\n\nTITLE: Using easeBackInOut with different overshoot configurations in D3.js\nDESCRIPTION: Demonstration of easeBackInOut function with various overshoot parameters. Creates an array of easing functions with different characteristics for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.ticks(0.5, 3, 6).map((a) => ({y: d3.easeBackInOut.overshoot(a), stroke: a}))\n```\n\n----------------------------------------\n\nTITLE: Calculating Projected Area of a Geographic Feature in D3\nDESCRIPTION: Shows how to use the path.area() method to calculate the projected planar area of a GeoJSON object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npath.area(california) // 17063.1671837991 px²\n```\n\n----------------------------------------\n\nTITLE: Generating a Link Path in D3.js\nDESCRIPTION: Shows how to generate a link path using source and target coordinates. Returns an SVG path string representing a smooth curve between the points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlink({source: [100, 100], target: [300, 300]}) // \"M100,100C200,100,200,300,300,300\"\n```\n\n----------------------------------------\n\nTITLE: Getting UTC Time Tick Interval Example\nDESCRIPTION: Shows how to determine the time interval that would be used for UTC time ticks between two dates. Returns the interval object that would generate the closest number of ticks to the specified count.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = new Date(\"1970-03-01\");\nconst stop = new Date(\"1996-03-19\");\nconst count = 4;\nconst interval = d3.utcTickInterval(start, stop, count); // d3.utcYear.every(5)\n```\n\n----------------------------------------\n\nTITLE: Creating Delaunay Triangulation from Array of Points in D3.js\nDESCRIPTION: Shows how to create a Delaunay triangulation from an array of point coordinates using the Delaunay.from() method in D3.js.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst delaunay = d3.Delaunay.from([[0, 0], [0, 1], [1, 0], [1, 1]]);\n```\n\n----------------------------------------\n\nTITLE: Setting Range for Ordinal Scale\nDESCRIPTION: Shows how to set the range values for an ordinal scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal().range([\"red\", \"green\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Interpolation with D3.js transition.tween()\nDESCRIPTION: Demonstrates how to use the transition.tween() method to create a custom interpolator that transitions an element's fill attribute to blue. The tween function captures the current fill color and creates an interpolator to the target color, then updates the attribute for each frame of the transition.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.tween(\"attr.fill\", function() {\n  const i = d3.interpolateRgb(this.getAttribute(\"fill\"), \"blue\");\n  return function(t) {\n    this.setAttribute(\"fill\", i(t));\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using D3 locale.utcFormat Method\nDESCRIPTION: Demonstrates the basic usage of locale.utcFormat (via d3.utcFormat) to create a UTC date formatter with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.utcFormat(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Using schemePuBuGn array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Purple to Blue to Green. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemePuBuGn[k]\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with D3 Imports\nDESCRIPTION: Initial setup of a Vue component importing D3 and custom color components\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport ColorRamp from \"../components/ColorRamp.vue\";\nimport ColorSwatches from \"../components/ColorSwatches.vue\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Quantile Thresholds in D3.js\nDESCRIPTION: Retrieves the computed quantile thresholds from a quantile scale, which are the boundary values that separate the quantiles of the input domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.quantiles() // [3475, 3800, 4300, 4950]\n```\n\n----------------------------------------\n\nTITLE: Difference Operation in D3.js - JavaScript\nDESCRIPTION: Demonstrates the difference operation that returns a new InternSet containing values from the first iterable that are not present in other iterables.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.difference([0, 1, 2, 0], [1]) // Set {0, 2}\n```\n\n----------------------------------------\n\nTITLE: Using schemeBuGn array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Blue to Green. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeBuGn[k]\n```\n\n----------------------------------------\n\nTITLE: Equivalent SelectChild Transition Method in D3.js\nDESCRIPTION: Demonstrates the equivalent method for transition.selectChild() using selection and transition chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntransition\n  .selection()\n  .selectChild(selector)\n  .transition(transition)\n```\n\n----------------------------------------\n\nTITLE: Using d3.rollups() to Create Arrays of Key-Value Pairs in JavaScript\nDESCRIPTION: Similar to d3.rollup() but returns an array of [key, value] entries instead of a map. This example counts penguins by species and returns an array of entries.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesCounts = d3.rollups(penguins, (D) => D.length, (d) => d.species); // [[\"Adelie\", 152], …]\n```\n\n----------------------------------------\n\nTITLE: Setting Y0 Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the y0 accessor (baseline y coordinate) for an area generator. This example uses the y-scale's zero value as the baseline, which is typical for horizontally-oriented areas.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().y0(y(0));\n```\n\n----------------------------------------\n\nTITLE: Creating a Radial Scale in D3.js\nDESCRIPTION: Shows how to create a radial scale that maps input values linearly to squared output values, useful for visualizations where area corresponds to input values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst r = d3.scaleRadial([100, 200], [0, 480]);\n```\n\n----------------------------------------\n\nTITLE: Default Link Strength Accessor in D3.js\nDESCRIPTION: The default strength accessor function for link forces, which adjusts link strength based on the number of connections each node has to improve simulation stability.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength(link) {\n  return 1 / Math.min(count(link.source), count(link.target));\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element Properties with D3 Selection\nDESCRIPTION: Retrieves the current value of the \"checked\" property from the first non-null element in the selection. This is useful for special properties like form field values that can't be accessed as attributes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nselection.property(\"checked\") // true, perhaps\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Source Accessor for D3.js Link Generator\nDESCRIPTION: Demonstrates how to set a custom source accessor function for a horizontal link generator that extracts the source point from the first element of an array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.linkHorizontal().source((d) => d[0]);\n```\n\n----------------------------------------\n\nTITLE: Element Modification with D3 Selection Using Multiple Statements\nDESCRIPTION: Demonstrates how to modify elements without method chaining by storing the selection in a variable and applying methods separately. This approach is equivalent to the chained version but more verbose.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.selectAll(\"p\");\np.attr(\"class\", \"graf\");\np.style(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Using schemeYlGn array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Yellow to Green. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeYlGn[k]\n```\n\n----------------------------------------\n\nTITLE: Getting Quantiles from a Sequential Quantile Scale in JavaScript\nDESCRIPTION: Creates a sequential quantile scale based on penguin body mass data and gets 4 quantiles (resulting in 5 boundary values). This divides the data into 4 equal-sized groups.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequentialQuantile()\n    .domain(penguins.map((d) => d.body_mass_g))\n    .interpolator(d3.interpolateBlues);\n\ncolor.quantiles(4); // [2700, 3550, 4050, 4750, 6300]\n```\n\n----------------------------------------\n\nTITLE: Setting Value Accessor for D3.js Pie Generator in JavaScript\nDESCRIPTION: Configures the value accessor function for a D3.js pie generator. This function determines how the numeric value is extracted from each data item for pie chart calculations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie().value((d) => d.value);\n```\n\n----------------------------------------\n\nTITLE: Using d3.time.dayOfYear in D3.js v3.x\nDESCRIPTION: Example of using d3.time.dayOfYear in D3.js version 3.x to calculate the day number within the current year.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar now = new Date;\nd3.time.dayOfYear(now); // 165\n```\n\n----------------------------------------\n\nTITLE: Subset Check in D3.js - JavaScript\nDESCRIPTION: Demonstrates checking if one iterable is a subset of another, returning true if all values in the first iterable exist in the second.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.subset([1, 3], [0, 2, 1, 3, 0]) // true\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a Threshold Scale in D3.js\nDESCRIPTION: Demonstrates how to create an exact copy of a threshold scale. Changes to one scale will not affect the other.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst c1 = d3.scaleThreshold(d3.schemeBlues[5]);\nconst c2 = c1.copy();\n```\n\n----------------------------------------\n\nTITLE: Generating Arc Path with Preconfigured D3 Arc Generator\nDESCRIPTION: Demonstrates how to generate an arc path using a D3 arc generator with predefined constant values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.arc()\n    .innerRadius(0)\n    .outerRadius(100)\n    .startAngle(0)\n    .endAngle(Math.PI / 2)\n  (); // \"M0,-100A100,100,0,0,1,100,0L0,0Z\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Polygon Perimeter Length with D3\nDESCRIPTION: This function calculates the length of the perimeter of a given polygon using D3's polygonLength method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.polygonLength([[1, 1], [1.5, 0], [2, 1]]) // 3.23606797749979\n```\n\n----------------------------------------\n\nTITLE: Setting Keys for D3 Stack Generator\nDESCRIPTION: Example of how to configure the keys accessor for a D3 stack generator. The keys specify which series (layers) will be generated in the resulting stack.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().keys([\"apples\", \"bananas\", \"cherries\", \"durians\"]);\n```\n\n----------------------------------------\n\nTITLE: Generating Ribbon Path\nDESCRIPTION: Demonstrates generating a ribbon path from chord data with start/end angles and radius.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nribbon({\n  source: {startAngle: 0.7524114, endAngle: 1.1212972, radius: 240},\n  target: {startAngle: 1.8617078, endAngle: 1.9842927, radius: 240}\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Binary Data as ArrayBuffer with d3.buffer\nDESCRIPTION: Shows how to fetch a binary file as an ArrayBuffer using d3.buffer(). This is useful when you need direct access to binary data for manipulation or when working with typed arrays.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = await d3.buffer(\"example.db\");\n```\n\n----------------------------------------\n\nTITLE: Setting the Exponent for a Power Scale in D3.js\nDESCRIPTION: Creates a power scale and sets its exponent to 2, establishing a quadratic relationship between domain and range values. The exponent determines how the scale transforms input values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scalePow([0, 100], [\"red\", \"blue\"]).exponent(2);\n```\n\n----------------------------------------\n\nTITLE: Enabling Rounding on a Band Scale\nDESCRIPTION: Enables or disables rounding on a band scale, which makes the start and stop of each band integers to avoid antialiasing artifacts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript-vue\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]).round({{round}});\n```\n\nLANGUAGE: javascript-vue\nCODE:\n```\nx.round() // {{round}}\n```\n\n----------------------------------------\n\nTITLE: Using schemePuBu array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Purple to Blue. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemePuBu[k]\n```\n\n----------------------------------------\n\nTITLE: Expanding D3 Quadtree Coverage\nDESCRIPTION: Shows how to expand a quadtree's coverage to include specific points, useful for ensuring all data falls within the tree's extent.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().cover(0, 0).cover(1, 1);\n```\n\n----------------------------------------\n\nTITLE: Using a Threshold Scale in D3.js\nDESCRIPTION: Demonstrates how the threshold scale maps input values to output values. Values below the first threshold map to the first range value, values between thresholds map to the corresponding range value, and values above the highest threshold map to the last range value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleThreshold([0, 1], [\"red\", \"white\", \"green\"]);\ncolor(-1); // \"red\"\ncolor(0); // \"white\"\ncolor(0.5); // \"white\"\ncolor(1); // \"green\"\ncolor(1000); // \"green\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Precision for D3.js Link Generator\nDESCRIPTION: Shows how to set the maximum number of digits after the decimal separator for a link generator, affecting the precision of the generated SVG path data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.link().digits(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Delay in D3\nDESCRIPTION: Sets the transition delay to 250 milliseconds for all selected elements. The delay can be specified as a constant or a function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.delay(250);\n```\n\n----------------------------------------\n\nTITLE: Using interpolateDiscrete for Stepped Value Interpolation in JavaScript\nDESCRIPTION: Shows how to use d3.interpolateDiscrete to create a discrete interpolator that maps specific ranges of t to values in an array. This example demonstrates mapping t=0.5 to the middle value of the array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nd3.interpolateDiscrete([\"red\", \"blue\", \"green\"])(0.5) // \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Using schemePuRd array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Purple to Red. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemePuRd[k]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from D3 Adder in JavaScript\nDESCRIPTION: Returns the IEEE 754 double-precision representation of the adder's current value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nadder.valueOf() // 42\n```\n\n----------------------------------------\n\nTITLE: Setting Arc Pad Angle in D3.js\nDESCRIPTION: Demonstrates how to set the pad angle for a D3 arc generator. The pad angle creates spacing between adjacent arcs in the visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().padAngle(0);\n```\n\n----------------------------------------\n\nTITLE: Generating Arc Path with D3 Arc Generator\nDESCRIPTION: Shows how to generate an arc path using a D3 arc generator with specified parameters.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc();\n\narc({\n  innerRadius: 0,\n  outerRadius: 100,\n  startAngle: 0,\n  endAngle: Math.PI / 2\n}); // \"M0,-100A100,100,0,0,1,100,0L0,0Z\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Sequential Scale's Range with Array in JavaScript\nDESCRIPTION: Sets the range of a sequential scale using a two-element array. The array is converted to an interpolator function using d3.interpolate.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential().range([\"red\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Radius Accessor for Pack Layout in D3\nDESCRIPTION: Sets or gets the radius accessor function for the pack layout. When null (default), radius is derived from node.value. When specified, the function directly determines the radius of each leaf node.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n*pack*.radius(*radius*)\n```\n\n----------------------------------------\n\nTITLE: Configuring easeBackOut with different overshoot values in D3.js\nDESCRIPTION: Example showing how to use easeBackOut with various overshoot parameters. Creates an array of easing functions for visualization purposes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.ticks(0.5, 3, 6).map((a) => ({y: d3.easeBackOut.overshoot(a), stroke: a}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Object from a Name in D3.js\nDESCRIPTION: Demonstrates how to create a color object from a named color using d3.color(), returning an RGB representation with the component values and opacity.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet c = d3.color(\"steelblue\"); // {r: 70, g: 130, b: 180, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Order with stackOrderNone in D3.js\nDESCRIPTION: Sets the stack order using d3.stackOrderNone, which preserves the original series order [0, 1, ..., n-1] as defined by the key accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderNone);\n```\n\n----------------------------------------\n\nTITLE: FormatSpecifier Object Example in D3.js\nDESCRIPTION: Example of a FormatSpecifier object created with the constructor, showing default and specified properties.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nFormatSpecifier {\n  \"fill\": \" \",\n  \"align\": \">\",\n  \"sign\": \"-\",\n  \"symbol\": \"\",\n  \"zero\": false,\n  \"width\": undefined,\n  \"comma\": false,\n  \"precision\": undefined,\n  \"trim\": false,\n  \"type\": \"s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arc Context in D3.js\nDESCRIPTION: Shows how to get the current context from a D3 arc generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\narc.context() // context\n```\n\n----------------------------------------\n\nTITLE: Using schemeRdPu array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Red to Purple. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeRdPu[k]\n```\n\n----------------------------------------\n\nTITLE: Implicit Domain Construction\nDESCRIPTION: Demonstrates how domains can be implicitly constructed through usage when no domain is specified.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal([\"red\", \"green\", \"blue\"]);\ncolor(\"b\"); // \"red\"\ncolor(\"a\"); // \"green\"\ncolor(\"c\"); // \"blue\"\ncolor.domain(); // inferred [\"b\", \"a\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Measuring Length of a Geographic Feature in D3\nDESCRIPTION: Illustrates the use of path.measure() to calculate the projected planar length of a GeoJSON object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npath.measure(california) // 825.7124297512761\n```\n\n----------------------------------------\n\nTITLE: Using bisectCenter() Function to Find Closest Date in JavaScript\nDESCRIPTION: Uses the bisectCenter function to find the index of the closest date to a given value. This example finds the index of the date closest to December 31, 2013 in an array of dates from the aapl dataset.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisectCenter(aapl.map((d) => d.Date), new Date(\"2013-12-31\")) // 161\n```\n\n----------------------------------------\n\nTITLE: Vue Setup Hook for Hero Text Manipulation\nDESCRIPTION: Vue onMounted hook that manipulates the hero text DOM elements after the component mounts, replacing default text with custom content.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {onMounted} from \"vue\";\n\nonMounted(() => {\n  const p = document.querySelector(\".VPHero .text\");\n  const s = document.querySelector(\"#hero-text\");\n  if (!p || !s) return;\n  while (p.lastChild) p.lastChild.remove();\n  p.append(s);\n});\n```\n\n----------------------------------------\n\nTITLE: Using D3 utcFormat Method\nDESCRIPTION: Demonstrates the basic usage of d3.utcFormat method to create a UTC date formatter with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.utcFormat(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequential Scale with Domain and Interpolator in JavaScript\nDESCRIPTION: Creates a new sequential scale with a specified domain and interpolator function. This scale maps values from the domain [0, 100] to colors in the Blues color scheme.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential([0, 100], d3.interpolateBlues);\n```\n\n----------------------------------------\n\nTITLE: Using Bisector's right() Method to Find Insertion Index in JavaScript\nDESCRIPTION: Uses a bisector's right method to find the index where a new date should be inserted after existing equivalent dates. This example finds the index immediately following January 2, 2014 in the aapl dataset.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisector((d) => d.Date).right(aapl, new Date(\"2014-01-02\")) // 163\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying a Color in D3.js\nDESCRIPTION: Shows how to create a copy of a color with modified properties using the copy() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").copy({opacity: 0.5}) // {r: 70, g: 130, b: 180, opacity: 0.5}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Data Structure in JavaScript\nDESCRIPTION: Demonstrates how to structure hierarchical data as a JavaScript object with nested children.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  name: \"Eve\",\n  children: [\n    {name: \"Cain\"},\n    {name: \"Seth\", children: [{name: \"Enos\"}, {name: \"Noam\"}]},\n    {name: \"Abel\"},\n    {name: \"Awan\", children: [{name: \"Enoch\"}]},\n    {name: \"Azura\"}\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Transverse Mercator Projection with D3 and Vue\nDESCRIPTION: This code demonstrates the creation of a Transverse Mercator projection using D3's geoTransverseMercator() function. It sets up the projection with specific rotation, extent, and precision parameters for use in a WorldMap component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/cylindrical.md#2025-04-11_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<WorldMap resolution=\"50m\" :height=\"width\" :projection='d3.geoTransverseMercator().rotate([0, 0]).fitExtent([[1, 1], [width - 1, width - 1]], {type: \"Sphere\"}).precision(0.2)' />\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 and Vue Components for Easing Examples\nDESCRIPTION: This code snippet sets up the necessary imports and reactive variables for the easing function examples. It imports D3, Vue's ref, and a custom ExampleEase component.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport {ref} from \"vue\";\nimport ExampleEase from \"./components/ExampleEase.vue\";\n\nconst amplitude = ref(1);\nconst exponent = ref(2);\nconst period = ref(0.3);\nconst overshoot = ref(1.7);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Superset Check in D3.js - JavaScript\nDESCRIPTION: Shows how to check if one iterable is a superset of another, returning true if all values in the second iterable exist in the first.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.superset([0, 2, 1, 3, 0], [1, 3]) // true\n```\n\n----------------------------------------\n\nTITLE: Using schemeYlOrRd array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Yellow to Orange to Red. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeYlOrRd[k]\n```\n\n----------------------------------------\n\nTITLE: D3 Hero Text Template with SVG Decoration\nDESCRIPTION: Vue template containing the custom hero text with an SVG decoration element that creates a visual underline effect for the 'bespoke' text element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div id=\"hero-text\">The JavaScript library for\n  <span style=\"display: inline-block; position: relative;\">bespoke<svg style=\"color: var(--vp-c-brand); position: absolute; z-index: -1; top: 1em; left: 0.2em; width: calc(100% - 0.7em); height: auto;\" width=\"240\" height=\"11\" viewBox=\"0 0 240 11\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20.766 10.187c.939-.024.386-.885.552-1.401 1.105-.301.553.626.962 1.061.685-.263 1.171-1.1 1.696-1.085.044.144.15.191.044.378.697-.736 2.21-.134 2.995-1.052a.55.55 0 0 1 .127.215 3.35 3.35 0 0 1-.204-1.204c.42-.034.751-.593.94 0-.255 0-.266.23-.377.416l.426-.273c.448.813-.586.316-.553.927.84-.306 1.802-1.037 2.476-.831.182.803-1.525.339-.608 1.023l-1.033-.268c.85 1.248-.625-.057.171 1.276 1.348.177 1.47-.478 2.818-.3.276-.479-.132-.66.144-1.124 1.857-.885 1.602 1.984 2.94.846.337-.555.42-1.582 1.442-1.08l-.276.889c1.298.038.668-1.348 2.06-.784-.226.368-1.005.344-.8.444.917.689.59-.545 1.27-.569l.16.827c1.371-.181 2.863-.827 4.388-1.037-.072.249-.326.512.044.746 1.912-.478 4.123-.058 6.007.368l.68-.727c.05.015.095.04.132.074a.275.275 0 0 1 .077.118c.014.044.015.091.004.136a.27.27 0 0 1-.07.122c.74.243 0-.445.354-.732.414-.062.552.383.315.603 1.248-.636 3.586-1.401 4.973-.694l-.254.22c1.06.249 1.105-1.477 2.127-.855l-.182.129c2.293.23 4.785-.478 6.564.52.293-1.017 2.272.393 2.365-1.022 1.327.664.967.927 2.813 1.348.492.052.702-.899 1.299-1.061l.044.731.79-.794.47.87.552-.205a.66.66 0 0 1-.332-.2.517.517 0 0 1-.132-.33c.873-.354 2.177.477 2.21.831l2.078-.679c-.039.301-.387.411-.657.607 1.105-.779.226.77 1.232.053-.144-.163.06-.44.077-.588.553.435 1.691.416 2.547.205l-.149.512c1.558.1 3.271-.31 5.018-.335-.636-.224-.514-1.109 0-1.204l.226.774c.32-.478-.552-.282.122-.884.652.076.464.875.094 1.138l.784-.287c.056.23-.127.358-.165.655.309-.478 1.387.75 1.834-.096l.05.23c1.746-.03 2.53-.316 3.95-.383 0-.674.553-.535.984-1.085 1.05.196 2.21.707 3.482.63.878-.343.243-.568.635-.955.077.612 1.332.535.69.985a15.353 15.353 0 0 0 3.83-.68c-.21-.243-.447-.353-.331-.563a.738.738 0 0 1 .275.01c.09.02.173.058.245.11a.58.58 0 0 1 .169.188c.04.072.061.151.062.232l-.088.067c2.127-.956 4.973 1.706 6.669.41l-.099.068 1.763-.684c.817.1-.481.478.127.842 1.9-1.043 3.022.12 4.586-.574 1.243 1.793 4.327-.167 5.979.956l-.1-.42c.426-.421.52.234.835.33-.05-.33-.464-.378-.205-.613 3.598-.545 7.438.598 11.129.956 1.348.11.757-2.203 2.465-1.195l-.481.794c2.719-.956 5.564 0 8.233-.77-.154.182-.16.416-.425.416.552.574 2.083.034 2.094-.435.42.053.1.425.354.665.552.339 1.42-.732 1.718-.158.05.09-.16.186-.265.23.37-.278 1.719.076 1.365-.589 1 .32 1.917-.287 2.713.105.553-.736 1.713.364 1.884-.683-.077 1.08 1.752.875 2.387.377-.215.326.553.345.299.794.718 0 1.381-.206 1.265-.76 1.315 1.305 2.686-1.018 3.415.645a45.888 45.888 0 0 1 6.078-1.17c-.082 1.075-2.138.09-2.066 1.218 1.834-.425 2.906-1.343 4.719-1.066.47.153-.276.478-.437.65 1.835-.43 3.537.148 5.172-.42 0 .1-.182.21-.348.291.321-.033.741.167.713-.325l-.315.13c-.497-.718 1.304-1.468 1.365-1.841-.553 1.396 1.602.377.707 2.137a.73.73 0 0 0 .337-.263.58.58 0 0 0 .1-.383c.315.1.409.297.083.665 1.155-.254.757-.78 1.801-.75 0 .233-.221.324-.337.601.553-.478 1.078-.908 1.951-.697-.056.143.044.33-.216.325 1.509-.048 2.603-1.195 4.249-.722-.513 1.023.553.349.625 1.243l.895-.254-.348-.44c.785.034 1.492-.602 2.155-.296l-.591.354 1.47-.139-.824-.354c.807-.444-.055-1.132.978-.86-.21.086.785.029 1.177.56.398-.278.801-.57 1.376-.335.138.291-.149.984-.055 1.176.398-.736 1.834-.168 2.337-.956-.143.227-.192.49-.138.745l.337-.597c.359.2.409.296.337.669 1.105.134-.309-1.138.967-.626-.105.048-.055.138-.27.23 1.287.277 2.519-.335 3.702 0 .326.903-1.05.195-.669.955 1.724-.129 3.592-.999 5.25-.74l-.31-.106c.277-1.262 1.221.66 2.083.086-.21.086-.298.693-.237.555 1.105.234 2.343-.249 4.083-.603l-.226.32c.657.311 1.763.216 2.481.383.226-.315.641-.253.403-.731 2.166 1.912 4.305-.89 6.228.726-.238 0-.553.268-.387.273l1.702-.244c-.111-.554-.21-.34-.553-.784.124-.163.292-.298.489-.392.198-.094.419-.145.644-.148-.774.34-.028.884.287 1.205-.049-.173.072-.354.05-.526.846 1.008.199-1.11 1.376-.407l-.077.287c.458-.134.889-.478 1.37-.401.177.645-.492.282-.552.803.685 0 1.403-1.162 1.994-.507-.298.167-.718.158-1.016.325.641.77.729.583 1.221.717h-.044l1.138.378-.282-.21c.928-1.635 1.752-.25 2.951-1.3-1.166.994-.21.592-.332 1.309.288.21.724.454.586.65.553-.564.89.478 1.696-.34 0 .235.581.044.431.627.713-.163-.149-.411-.077-.703 1.133-.76 2.514 1.061 4.139.029 1.376-.397 1.658-1.171 2.94-1.515.403.392-.393.836-.393.836.267.161.581.255.906.27a1.97 1.97 0 0 0 .934-.184c-.138.196 0 .373.172.64.519-.038.386-.831 1.05-.477a3.24 3.24 0 0 1-.553.918c.619-.192 1.243-.603 1.884-.79.149.412-.409.603-.646.856.718-.153 1.851-.296 2.105-.927l-.442-.248c.26 0 .105.559-.094.669-.63.478-.862-.258-.884-.478l.459-.134c-.387-1.382-1.818.148-2.719.033l.431-.956-.973.784c-.182-.263-.287-.822.166-.956-.624-.516-.591.33-1.105-.239-.055-.086-.028-.134.033-.172l-.646.273c.132-.201-.072-.703.309-.545-1.105-.617-1.873.674-2.26-.096l.099-.057c-1.596.272-.193.721-1.414 1.534l-.713-1.83-.188.721c-.16-.033-.481-.1-.409-.387-.63.478.089.32-.287.78-.752-.699-2.172.229-2.293-.957-.31.545.729.478-.127.813-.183-1.258-.978.181-1.658-.416.254-.636.917-.273.226-.875-.486 1.076-1.386-.282-2-.096-.066.87-1.332.32-2.354.579.078-.292-1.89-.54-2.818-.885l.033-.148c-.221.87-1.182.674-1.901.832a.906.906 0 0 1 .132-.55c.102-.169.258-.31.449-.406h-.669a.979.979 0 0 1-.34.327 1.167 1.167 0 0 1-.478.151l.194-.65c-.885 0-1.813.712-2.94.244-.083.607.84 1.725-.381 2.103-.034-.335-.056-.899.27-1.028-.105.043-.381.263-.585.12l.502-.545c-.508-.258-.287.478-.701.397 0-.478-.293-.35-.221-.722.11-.038.359.205.525 0a1.931 1.931 0 0 1-.691-.264 1.649 1.649 0 0 1-.503-.487c.028.268-.028.636-.37.684-.89 0-.282-.574-.79-.832-.227.325-.78-.033-.824.674-.259 0-.293-.34-.387-.535-.469.3-2.149.033-1.657.793l.116.053s-.05 0-.078.033c-1.525.66-3.105-.478-4.608-.224V3.34c-.895.244-1.984.106-2.636.593a.711.711 0 0 1-.402-.28.553.553 0 0 1-.084-.442c-.691.158-.774.416-1.746 0 .701-.396-.221-.373.713-.287-.879-.224-1.067-.607-2.039 0 .342-.597-.641-.774-1.067-.602l.608.445c-.436.053-.88.039-1.31-.043l.254-.794c-1.784-1.004-3.315 1.578-4.647-.067-.497.545.973.411.553 1.052-.829-.124-1.658-1.286-1.929-1.29-1.132-.479-1.105 1.137-2.282.812a.818.818 0 0 1 .031.774.938.938 0 0 1-.264.323 1.11 1.11 0 0 1-.397.198c-.829-.124-.994-1.214-.464-1.434.205 0 .299.072.288.168.27-.096.629-.21.303-.526l-.116.282c-.403-.297-1.552-.292-1.271-.75-.635.257-.281.477.183.616-1.061-.435-1.658-.053-2.763-.344.171.162.326.478.155.478-1.608-.378-.724.526-1.824.636-.608-.445.249-1.033-.862-.684-.668-.306-.127-.755.149-.985-1.016.536-1.867-.387-2.442-.478l.553-.22a1.892 1.892 0 0 1-.846.12l.293.573c-.309-.105-.553-.11-.553-.348-.326\" data-visualcompletion=\"css-img\"></path></svg></span> data visualization</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Range for a D3.js Quantile Scale\nDESCRIPTION: Shows how to set the range of a quantile scale, in this case using a color scheme array. The number of values in the range determines how many quantiles will be computed.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantile();\ncolor.range(d3.schemeBlues[5]);\n```\n\n----------------------------------------\n\nTITLE: Adding Number to D3 Adder in JavaScript\nDESCRIPTION: Adds a specified number to the adder's current value and returns the adder object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadder.add(42)\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataset with datum()\nDESCRIPTION: Shows how to expose HTML5 custom data attributes using D3's datum() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nselection.datum(function() { return this.dataset; })\n```\n\n----------------------------------------\n\nTITLE: Using d3.greatestIndex with comparators in JavaScript\nDESCRIPTION: Returns the index of the greatest element according to a specified comparator or accessor. Returns -1 if the iterable contains no comparable elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [{foo: 42}, {foo: 91}];\nd3.greatestIndex(array, (a, b) => a.foo - b.foo); // 1\nd3.greatestIndex(array, (a, b) => b.foo - a.foo); // 0\nd3.greatestIndex(array, (d) => d.foo); // 1\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity Scale in D3.js\nDESCRIPTION: Shows how to create an identity scale in D3.js which is a special case of linear scale where the domain and range are identical.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar identity = d3.scaleIdentity().domain([0, 100]);\nidentity(0); // 0\nidentity(100); // 100\n```\n\n----------------------------------------\n\nTITLE: Default Radius Accessor for D3 Collide Force\nDESCRIPTION: This code shows the default radius accessor function used by the collide force when no custom radius is specified.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/collide.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction radius() {\n  return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Diverging Scale with Array-based Range in D3.js\nDESCRIPTION: Creates a diverging scale with an array of colors as the output range, which is automatically converted to an interpolator function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleDiverging([\"blue\", \"white\", \"red\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring a D3.js Line with CurveCatmullRom\nDESCRIPTION: Example of creating a D3.js line generator with x and y accessors, applying a CatmullRom curve with specific alpha parameter for interpolation between points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line()\n    .x((d) => x(d.date))\n    .y((d) => y(d.value))\n    .curve(d3.curveCatmullRom.alpha(0.5));\n```\n\n----------------------------------------\n\nTITLE: Generating Log-Normal Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Demonstrates the usage of d3.randomLogNormal() to generate random numbers with a log-normal distribution, with parameters mu=0 and sigma=1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomLogNormal(0, 1)\n```\n\n----------------------------------------\n\nTITLE: Applying Cubic Easing in D3\nDESCRIPTION: This code demonstrates how to apply cubic easing to a normalized time value using D3's easeCubic function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst te = d3.easeCubic(t);\n```\n\n----------------------------------------\n\nTITLE: Defining Tabular Data for D3.js Stack Layout\nDESCRIPTION: Example of tabular data structure used with d3.stack in D3.js 4.0. The data consists of an array of objects where each object represents a time period with multiple data series (apples, bananas, cherries, dates).\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, dates: 400},\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, dates: 400}\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Layout and Metadata in YAML\nDESCRIPTION: YAML configuration for the VitePress home page layout including page metadata, canonical URL, SEO descriptions, hero section configuration, and feature list definitions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\ntitleTemplate: \"The JavaScript library for bespoke data visualization\"\n\nhead:\n  - - link\n    - rel: canonical\n      href: https://d3js.org\n  - - meta\n    - name: title\n      content: D3\n  - - meta\n    - name: description\n      content: The JavaScript library for bespoke data visualization\n\nhero:\n  name: \"D3\"\n  text: \"The JavaScript library for bespoke data visualization\"\n  tagline: Create custom dynamic visualizations with unparalleled flexibility\n  image:\n    src: /logo.svg\n    alt: D3\n  actions:\n    - theme: brand\n      text: Get started\n      link: /getting-started\n    - theme: alt\n      text: What is D3?\n      link: /what-is-d3\n    - theme: alt\n      text: Examples\n      link: https://observablehq.com/@d3/gallery?utm_source=d3js-org&utm_medium=hero&utm_campaign=try-observable\n      rel: external\n\nfeatures:\n  - title: Selections and transitions\n    details: Create, update, and animate the DOM based on data without the overhead of a virtual DOM.\n    link: /d3-selection\n  - title: Scales and axes\n    details: Encode abstract data into visual values such as position, size, and color. Explain position encodings with axes.\n    link: /d3-scale\n  - title: Shapes\n    details: Render arcs, areas, curves, lines, links, pies, stacks, symbols… and any geometric primitive you might need to visualize data.\n    link: /d3-shape\n  - title: Interactions\n    details: Facilitate exploration with reusable interactive behaviors, including panning, zooming, brushing, and dragging.\n    link: /d3-brush\n  - title: Layouts\n    details: Treemaps, trees, force-directed graphs, Voronoi, contours, chords, circle-packing… a library of layout algorithms at the ready.\n    link: /d3-hierarchy\n  - title: Geographic maps\n    details: More spherical projections than you can shake a stick at, with arbitrary aspects, adaptive sampling, and flexible clipping.\n    link: /d3-geo\n  - title: … and much more!\n    details: CSV parsing, localized date parsing and formatting, color spaces, calendar math, statistics, and can I stop listing features now?\n    link: /d3-array\n  - title: Powering Observable Plot\n    details: The D3 team also builds Observable Plot, a high-level API for quick charts built on top of D3.\n    link: https://observablehq.com/plot?utm_source=d3js-org&utm_medium=features&utm_campaign=try-observable\n    linkText: Try Observable Plot\n    rel: external\n  - title: Built by Observable\n    details: D3 is developed by Observable, the platform for collaborative data analysis.\n    link: https://observablehq.com?utm_source=d3js-org&utm_medium=features&utm_campaign=try-observable\n    linkText: Visit Observable\n    rel: external\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Content with D3 Selection\nDESCRIPTION: Sets the inner HTML of all selected elements to include formatted text with an italic element. The html method allows inserting HTML content directly, replacing any existing child elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nselection.html(\"Hello, <i>world</i>!\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding CSS Classes with D3 Selection\nDESCRIPTION: Uses a function to conditionally add the \"foo\" class to elements. The function returns a random boolean value, demonstrating how to dynamically apply classes based on data or other conditions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nselection.classed(\"foo\", () => Math.random() > 0.5)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Event Listeners in D3.js v4.0\nDESCRIPTION: Example of using the updated selection.on() method to add multiple event listeners simultaneously using whitespace-separated typenames.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on(\"mousedown touchstart\", function() {\n  console.log(d3.event.type);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing InternSet with Date values in D3\nDESCRIPTION: Creates a new InternSet containing Date objects. This allows checking for membership of date values by their temporal value rather than by object reference identity.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst dates = new d3.InternSet([\n  new Date(\"2021-01-01\"),\n  new Date(\"2022-01-01\"),\n  new Date(\"2023-01-01\")\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting left padding for a D3 treemap layout\nDESCRIPTION: Sets the left padding to the specified number or function, or returns the current left padding function if no argument is provided. Left padding separates a node's left edge from its children.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.paddingLeft(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Offset with stackOffsetSilhouette in D3.js\nDESCRIPTION: Sets the stack offset using d3.stackOffsetSilhouette, which shifts the baseline down so the center of the streamgraph is always at zero. Creates symmetrical visualizations around a center line.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().offset(d3.stackOffsetSilhouette);\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in HSL color space using d3.interpolateHsl\nDESCRIPTION: Returns an HSL color space interpolator between two colors. Uses the shortest path between hues. The colors are converted to HSL using d3.hsl. Returns an RGB string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateHsl(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Pointer Coordinates in D3.js\nDESCRIPTION: Retrieves an array of coordinate pairs for all pointers in a multi-touch event relative to a target element. Useful for multi-touch interactions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst points = d3.pointers(event);\n```\n\n----------------------------------------\n\nTITLE: Implementing rescaleY for Transforming Scale Domains in D3\nDESCRIPTION: This function returns a copy of a continuous scale with a transformed domain. It works by applying inverse y-transform on the scale's range and then computing the corresponding domain using the inverse scale. The original scale is not modified.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rescaleY(y) {\n  var range = y.range().map(transform.invertY, transform),\n      domain = range.map(y.invert, y);\n  return y.copy().domain(domain);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a UTC Time Scale in D3.js\nDESCRIPTION: Example of creating a UTC time scale that operates in Coordinated Universal Time rather than local time. This scale behaves more predictably across different time zones.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/time.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleUtc([new Date(\"2000-01-01\"), new Date(\"2000-01-02\")], [0, 960]);\nx(new Date(\"2000-01-01T05:00Z\")); // 200\nx(new Date(\"2000-01-01T16:00Z\")); // 640\nx.invert(200); // 2000-01-01T05:00Z\nx.invert(640); // 2000-01-01T16:00Z\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Color Scale with D3.js Accent Scheme\nDESCRIPTION: This snippet demonstrates how to create a categorical color scale using the Accent color scheme in D3.js. It uses the d3.scaleOrdinal function with d3.schemeAccent as the color range.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/categorical.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal(d3.schemeAccent);\n```\n\n----------------------------------------\n\nTITLE: D3 Descendant Selection Examples\nDESCRIPTION: Examples of selecting descendant elements using select() and selectAll() methods on existing selections.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = d3.selectAll(\"p\").select(\"b\"); // the first <b> in every <p>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst previous = d3.selectAll(\"p\").select(function() {\n  return this.previousElementSibling;\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst b = d3.selectAll(\"p\").selectAll(\"b\"); // every <b> in every <p>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sibling = d3.selectAll(\"p\").selectAll(function() {\n  return [\n    this.previousElementSibling,\n    this.nextElementSibling\n  ];\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling rounding in a D3 treemap layout\nDESCRIPTION: Enables or disables rounding of rectangle coordinates according to the given boolean value, or returns the current rounding state if no argument is provided.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.round(*round*)\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Values in Ordinal Scales with Implicit Extension\nDESCRIPTION: Example demonstrating the default behavior of ordinal scales with unknown values, where the domain is implicitly extended to include the new value.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"]);\n\nx.domain(); // [0, 1]\nx(2); // \"blue\"\nx.domain(); // [0, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV Row by Row with Conversion Function\nDESCRIPTION: Uses d3.csvParseRows with a row conversion function to transform each row during parsing. This approach is useful when the CSV doesn't have a header row.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst data = d3.csvParseRows(string, (d, i) => {\n  return {\n    year: new Date(+d[0], 0, 1), // convert first column to Date\n    make: d[1],\n    model: d[2],\n    length: +d[3] // convert fourth column to number\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: D3 Child Selection\nDESCRIPTION: Example of selecting child elements using the selectChild() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\").selectChild(\"b\") // the first <b> child of every <p>\n```\n\n----------------------------------------\n\nTITLE: Using easeBackIn with configurable overshoot in D3.js\nDESCRIPTION: Example of using the easeBackIn function with different overshoot values. The code creates an array of easing functions with different overshoot parameters for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.ticks(0.5, 3, 6).map((a) => ({y: d3.easeBackIn.overshoot(a), stroke: a}))\n```\n\n----------------------------------------\n\nTITLE: Setting right padding for a D3 treemap layout\nDESCRIPTION: Sets the right padding to the specified number or function, or returns the current right padding function if no argument is provided. Right padding separates a node's right edge from its children.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.paddingRight(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Using Appearance-Based Stack Order in D3\nDESCRIPTION: Shows how to use the stackOrderAppearance ordering function to arrange stack layers so that the earliest appearing series (by maximum value) is placed at the bottom of the stack.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderAppearance);\n```\n\n----------------------------------------\n\nTITLE: Getting HTML Content with D3 Selection\nDESCRIPTION: Retrieves the inner HTML from the first non-null element in the selection. This returns the HTML content as a string including all tags and formatting of child elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nselection.html() // \"Hello, <i>world</i>!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Stack Offset in D3\nDESCRIPTION: Demonstrates how to configure the offset for a D3 stack generator. The offset determines the baseline position for each layer, enabling different types of stacked visualizations like normalized stacks or streamgraphs.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().offset(d3.stackOffsetExpand);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transition Delay in D3\nDESCRIPTION: Returns the current delay value for the first non-null element in the transition. Useful when the transition contains only one element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.delay() // 250\n```\n\n----------------------------------------\n\nTITLE: Setting explicit threshold values for a bin generator in D3\nDESCRIPTION: Sets specific threshold values [0.25, 0.5, 0.75] for a bin generator, creating 4 bins with boundaries at these values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().thresholds([0.25, 0.5, 0.75]);\n```\n\n----------------------------------------\n\nTITLE: Formatting Data as TSV with d3.tsvFormat\nDESCRIPTION: Converts an array of objects into a TSV (tab-separated values) string with a header row containing object property names and data rows containing corresponding values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nd3.tsvFormat([{foo: \"1\", bar: \"2\"}]) // \"foo\\tbar\\n1\\t2\"\n```\n\n----------------------------------------\n\nTITLE: Contour Plot Component Definition\nDESCRIPTION: Defines a contour plot visualization using Observable Plot with specific configurations for rendering topographical data of Maungawhau.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<PlotRender :options='{\n    axis: null,\n    aspectRatio: 1,\n    style: \"margin: 0;\",\n    marks: [\n      Plot.contour(volcano.values, {\n        width: volcano.width,\n        height: volcano.height,\n        fill: Plot.identity,\n        stroke: \"black\",\n        interval: 5\n      })\n    ]\n  }' />\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Path with D3 Arc Generator\nDESCRIPTION: Demonstrates how to use D3's arc generator to create an SVG path for a circular sector.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\")\n    .attr(\"transform\", \"translate(100,100)\")\n    .attr(\"d\", d3.arc()({\n      innerRadius: 100,\n      outerRadius: 200,\n      startAngle: -Math.PI / 2,\n      endAngle: Math.PI / 2\n    }));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Tick Size in D3.js\nDESCRIPTION: Demonstrates how to get the current tick size value from a D3.js axis object. This method returns the inner tick size when called without arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\naxis.tickSize() // 0, as specified above\n```\n\n----------------------------------------\n\nTITLE: Configuring easeBack overshoot parameter in D3.js\nDESCRIPTION: Example showing how to create a new back easing function with a custom overshoot parameter. This creates a single easing function based on the user's input value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[{y: d3.easeBack.overshoot(overshoot)}]\n```\n\n----------------------------------------\n\nTITLE: Generating Grid Values for Goldstein-Price Function\nDESCRIPTION: Creates a 256x256 grid of values for the Goldstein-Price function, used as input for contour generation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar n = 256, m = 256, values = new Array(n * m);\nfor (var j = 0.5, k = 0; j < m; ++j) {\n  for (var i = 0.5; i < n; ++i, ++k) {\n    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Data as CSV with d3.csvFormat\nDESCRIPTION: Converts an array of objects into a CSV string with a header row containing object property names and data rows containing corresponding values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nd3.csvFormat([{foo: \"1\", bar: \"2\"}]) // \"foo,bar\\n1,2\"\n```\n\n----------------------------------------\n\nTITLE: Using d3.now() to get current time in JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current time using d3.now(), which returns the current time as defined by performance.now if available, or Date.now if not.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-timer.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.now() // 1236.3000000715256\n```\n\n----------------------------------------\n\nTITLE: Using interval.count to calculate week of year in JavaScript\nDESCRIPTION: Calculates the current zero-based week-of-year number for Sunday-based weeks by counting the number of Sunday boundaries between the start of the year and now.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeSunday.count(d3.timeYear(now), now) // 25\n```\n\n----------------------------------------\n\nTITLE: Interpolating Fill Style from Current Color to Blue in D3.js\nDESCRIPTION: Example demonstrating how to use styleTween to interpolate from the current fill style to blue. This accesses the current style value through this.style.fill before creating the interpolator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.styleTween(\"fill\", function() {\n  return d3.interpolateRgb(this.style.fill, \"blue\");\n});\n```\n\n----------------------------------------\n\nTITLE: D3 Stream Method Calls Example for a Polygon\nDESCRIPTION: Demonstrates the sequence of stream method calls that would be triggered when processing a GeoJSON Polygon. Shows how D3 handles the polygon's geometry through the stream interface.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/stream.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstream.polygonStart();\nstream.lineStart();\nstream.point(0, 0);\nstream.point(0, 1);\nstream.point(1, 1);\nstream.point(1, 0);\nstream.lineEnd();\nstream.polygonEnd();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Zoom Interpolator Curvature in JavaScript using D3\nDESCRIPTION: Shows how to create a zoom interpolator with a custom curvature using d3.interpolateZoom.rho. The curvature affects the path of the zoom transition, with values close to 0 resulting in more linear interpolation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/zoom.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.interpolateZoom.rho(0.5)([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 51.09549882328188]\n```\n\n----------------------------------------\n\nTITLE: Configuring D3 Arc Generator with Constant Values\nDESCRIPTION: Demonstrates how to configure a D3 arc generator with constant values for radii and angles.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc()\n    .innerRadius(0)\n    .outerRadius(100)\n    .startAngle(0)\n    .endAngle(Math.PI / 2);\n```\n\n----------------------------------------\n\nTITLE: Creating FormatSpecifier Instances with Constructor in D3.js\nDESCRIPTION: Using the FormatSpecifier constructor to create a format specification from an object with format properties.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnew d3.FormatSpecifier({type: \"f\", precision: 1})\n```\n\n----------------------------------------\n\nTITLE: Creating a Quantize Scale with Default Domain in D3.js\nDESCRIPTION: Creates a quantize scale with only the range specified. When domain is not provided, it defaults to [0, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantize(d3.schemeBlues[9]);\n```\n\n----------------------------------------\n\nTITLE: Creating a D3 Area Generator with Explicit Parameters in JavaScript\nDESCRIPTION: Initializes a D3 area generator with specific x, y0, and y1 accessors. This creates an area generator that maps Date values to x-coordinates and Close values to y1 coordinates, with y0 set to the y-scale's zero value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area((d) => x(d.Date), y(0), (d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Default Arrow Head Radius\nDESCRIPTION: Default function for accessing arrow head radius in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction headRadius() {\n  return 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting with SI Prefixes using precisionPrefix in D3.js\nDESCRIPTION: Example showing how to format numbers with SI prefixes (like M for million) using precisionPrefix to calculate appropriate precision.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.precisionPrefix(1e5, 1.3e6);\nconst f = d3.formatPrefix(\".\" + p, 1.3e6);\nf(1.1e6); // \"1.1M\"\nf(1.2e6); // \"1.2M\"\nf(1.3e6); // \"1.3M\"\n```\n\n----------------------------------------\n\nTITLE: Using interpolateBasisClosed for Uniform B-spline Interpolation in JavaScript\nDESCRIPTION: Demonstrates the usage of d3.interpolateBasisClosed to create a uniform nonrational B-spline interpolator through an array of numeric values. The function returns a value at position 0.5 along the interpolation path.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nd3.interpolateBasisClosed([0, 0.1, 0.4, 1])(0.5) // 0.45\n```\n\n----------------------------------------\n\nTITLE: Using quadraticCurveTo Method with D3 Path Object\nDESCRIPTION: Demonstrates drawing a quadratic Bézier curve with the quadraticCurveTo method. This requires a control point and an end point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npath.quadraticCurveTo(200, 0, 200, 200);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tick Padding in D3.js\nDESCRIPTION: Demonstrates how to get the current tick padding value from a D3.js axis object. The default tick padding is 3 pixels if not explicitly set.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\naxis.tickPadding() // 0, as specified above\n```\n\n----------------------------------------\n\nTITLE: Creating Root Element Transition in D3.js\nDESCRIPTION: Shows how to create a transition on the document root element using d3.selection() and transition(name). This is equivalent to using d3.transition() directly.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selection()\n  .transition(name)\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 Adder in JavaScript\nDESCRIPTION: Creates a new adder with an initial value of 0 using the D3.js Adder class.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst adder = new d3.Adder();\n```\n\n----------------------------------------\n\nTITLE: Creating a Quantize Scale with Domain and Range in D3.js\nDESCRIPTION: Constructs a new quantize scale with a specified domain and range. This example creates a scale that maps values from 0-100 to a color scheme with 9 different blues.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantize([0, 100], d3.schemeBlues[9]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Locale for Number Formatting\nDESCRIPTION: This snippet shows how to create a custom locale object with specific formatting rules for thousands separators, grouping, and currency symbols.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst enUs = d3.formatLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current X1 Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current x1 accessor from an area generator. This returns a function that was previously set with the x1() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\narea.x1() // (d) => x(d.Close)\n```\n\n----------------------------------------\n\nTITLE: Parsing Colors with d3.color in D3.js\nDESCRIPTION: Demonstrates using the new d3.color method to parse a CSS color specifier and return a d3.color instance in the appropriate color space.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar red = d3.color(\"hsl(0, 80%, 50%)\"); // {h: 0, l: 0.5, s: 0.8, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Filter Transition Method in D3.js\nDESCRIPTION: Demonstrates the equivalent method for transition.filter() using selection and transition chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntransition\n  .selection()\n  .filter(filter)\n  .transition(transition)\n```\n\n----------------------------------------\n\nTITLE: Generating Normal Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Illustrates how to use d3.randomNormal() to generate random numbers with a normal (Gaussian) distribution, with a mean of 0 and standard deviation of 1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomNormal(0, 1) // mean of 0, and standard deviation of 1\n```\n\n----------------------------------------\n\nTITLE: Using formatSpecifier to Parse Format Strings in D3.js\nDESCRIPTION: The formatSpecifier function parses a format specification string and returns an object with properties that correspond to the format specification mini-language.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.formatSpecifier(\".1f\")\n```\n\n----------------------------------------\n\nTITLE: Interpolating dates in D3.js\nDESCRIPTION: Demonstrates the use of d3.interpolateDate to interpolate between two Date objects. The interpolator returns a new Date object representing the interpolated time.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateDate(new Date(\"2014-01-01\"), new Date(\"2024-01-01\"))(0.5) // 2019-01-01\n```\n\n----------------------------------------\n\nTITLE: Using interpolateYlOrRd function in D3.js\nDESCRIPTION: A function that returns colors from the 'YlOrRd' (Yellow-Orange-Red) sequential color scheme. It accepts a value t between 0 and 1 and returns an RGB string representing the corresponding color.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.interpolateYlOrRd(t)\n```\n\n----------------------------------------\n\nTITLE: Using schemeOranges array in D3.js\nDESCRIPTION: A discrete sequential color scheme array with Orange hues. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeOranges[k]\n```\n\n----------------------------------------\n\nTITLE: Setting X and Y Accessors for D3 Quadtree\nDESCRIPTION: Shows how to set custom x and y accessors for a quadtree, which are used to derive coordinates when adding, removing, or finding data in the tree.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().x((d) => d.x);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.x() // (d) => d.x\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction x(d) {\n  return d[0];\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst tree = d3.quadtree().y((d) => d.y);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.y() // (d) => d.y\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y(d) {\n  return d[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Easing Function in D3\nDESCRIPTION: Specifies the easing function for all selected elements in the transition. The easing function controls the rate of change over time.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.ease(d3.easeCubic);\n```\n\n----------------------------------------\n\nTITLE: Setting X Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Demonstrates setting the x accessor for a D3 area generator, which internally sets x0 to the specified accessor and x1 to null. This is used for horizontally-oriented areas where time flows from left to right.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().x((d) => x(d.Date));\n```\n\n----------------------------------------\n\nTITLE: Default Defined Accessor Implementation in D3 Area Generator\nDESCRIPTION: Shows the default implementation of the defined accessor in D3's area generator. By default, it always returns true, meaning all data points are included in the area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction defined() {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Container Accessor for D3 Drag Behavior\nDESCRIPTION: The default container accessor for a drag gesture, which returns the parent node of the dragged element. This determines the coordinate system for drag events.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction container() {\n  return this.parentNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Link Distance Accessor in D3.js\nDESCRIPTION: The default distance accessor function used by the link force, which returns a constant value of 30 for all links.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction distance() {\n  return 30;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Context for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the rendering context for an area generator to a Canvas 2D context. When a context is set, the area generator renders directly to the canvas using path methods rather than returning a path data string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst area = d3.area().context(context);\n```\n\n----------------------------------------\n\nTITLE: Generating Pareto Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Shows the usage of d3.randomPareto() to generate random numbers with a Pareto distribution, with a shape parameter of 6.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomPareto(6)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup Script\nDESCRIPTION: Imports required Vue components ColorSpan and ExampleChord for the chord diagram visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport ColorSpan from \"./components/ColorSpan.vue\";\nimport ExampleChord from \"./components/ExampleChord.vue\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Zoom Transform to SVG Elements Using toString\nDESCRIPTION: A simplified approach to apply a D3 zoom transform to SVG elements by leveraging the transform's toString method for direct attribute assignment.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ng.attr(\"transform\", transform);\n```\n\n----------------------------------------\n\nTITLE: Using interpolateYlGn function in D3.js\nDESCRIPTION: A function that returns colors from the 'YlGn' (Yellow-Green) sequential color scheme. It accepts a value t between 0 and 1 and returns an RGB string representing the corresponding color.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.interpolateYlGn(t)\n```\n\n----------------------------------------\n\nTITLE: Setting a Sequential Scale's Interpolator in JavaScript\nDESCRIPTION: Sets the interpolator function for an existing sequential scale. This example changes the interpolator to the Blues color scheme.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential().interpolator(d3.interpolateBlues);\n```\n\n----------------------------------------\n\nTITLE: Formatting a Color as HSL in D3.js\nDESCRIPTION: Shows how to format a color as an HSL string using the formatHsl() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"yellow\").formatHsl() // \"hsl(60, 100%, 50%)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a D3.js Line with Bundle Curve\nDESCRIPTION: Example of configuring a D3.js line generator with a bundle curve and specific beta value that controls the bundle strength between points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().curve(d3.curveBundle.beta(0.5));\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Radius Accessor for D3 Geo Circle\nDESCRIPTION: The default accessor function for a circle's radius in the geoCircle generator, returning 90 degrees (quarter of the globe).\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction radius() {\n  return 90;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Single Value for CSV with d3.csvFormatValue\nDESCRIPTION: Demonstrates how to format a single value for inclusion in a CSV file. The function properly escapes the value if it contains special characters that would interfere with CSV parsing.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csvFormatValue(\"foo\") // \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Rolled-up Data in JavaScript\nDESCRIPTION: Shows how to retrieve reduced values from data grouped with d3.rollup(). This example retrieves the count of Adelie penguins.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/group.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nspeciesCount.get(\"Adelie\") // 152\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Digits for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the maximum number of digits after the decimal separator for the area generator. The default value is 3 digits. This setting only applies when the associated context is null.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().digits(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Scale Interpolator in D3.js\nDESCRIPTION: Demonstrates how to customize a linear scale's interpolator to use a different color space (HCL) for color transitions between points in the range.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear([\"red\", \"blue\"]).interpolate(d3.interpolateHcl);\n```\n\n----------------------------------------\n\nTITLE: Creating a Set from Array with Value Accessor in D3\nDESCRIPTION: Example of using d3.set constructor with a value accessor function to extract unique site values from a dataset of crop yields. The accessor function takes the standard arguments (element, index, array) and returns the site property for each data point.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar yields = [\n  {yield: 22.13333, variety: \"Manchuria\",        year: 1932, site: \"Grand Rapids\"},\n  {yield: 26.76667, variety: \"Peatland\",         year: 1932, site: \"Grand Rapids\"},\n  {yield: 28.10000, variety: \"No. 462\",          year: 1931, site: \"Duluth\"},\n  {yield: 38.50000, variety: \"Svansota\",         year: 1932, site: \"Waseca\"},\n  {yield: 40.46667, variety: \"Svansota\",         year: 1931, site: \"Crookston\"},\n  {yield: 36.03333, variety: \"Peatland\",         year: 1932, site: \"Waseca\"},\n  {yield: 34.46667, variety: \"Wisconsin No. 38\", year: 1931, site: \"Grand Rapids\"}\n];\n\nvar sites = d3.set(yields, function(d) { return d.site; }); // Grand Rapids, Duluth, Waseca, Crookston\n```\n\n----------------------------------------\n\nTITLE: Generating Bernoulli Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Illustrates how to use d3.randomBernoulli() to generate random 0 or 1 values with a Bernoulli distribution, with a success probability of 0.5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomBernoulli(0.5)\n```\n\n----------------------------------------\n\nTITLE: Applying Zoom Transform to SVG Elements with Explicit Values\nDESCRIPTION: Demonstrates how to apply a D3 zoom transform to SVG elements by setting the transform attribute with explicit translation and scale values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ng.attr(\"transform\", \"translate(\" + transform.x + \",\" + transform.y + \") scale(\" + transform.k + \")\");\n```\n\n----------------------------------------\n\nTITLE: Creating Symlog Scale with Default Domain\nDESCRIPTION: Shows how to create a symlog scale with only the range specified, using the default domain of [0, 1]. This example creates a color scale between red and blue.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSymlog([\"red\", \"blue\"]) // default domain of [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Using d3.greatest with comparators in JavaScript\nDESCRIPTION: Returns the greatest element of an iterable according to a specified comparator or accessor function. Similar to max, but allows the use of a comparator rather than just an accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [{foo: 42}, {foo: 91}];\nd3.greatest(array, (a, b) => a.foo - b.foo); // {foo: 91}\nd3.greatest(array, (a, b) => b.foo - a.foo); // {foo: 42}\nd3.greatest(array, (d) => d.foo); // {foo: 91}\n```\n\n----------------------------------------\n\nTITLE: D3 Axis HTML Structure\nDESCRIPTION: Example of the HTML structure generated by D3's axis component, showing tick marks and labels.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<g fill=\"none\" font-size=\"10\" font-family=\"sans-serif\" text-anchor=\"middle\">\n  <path class=\"domain\" stroke=\"currentColor\" d=\"M0.5,6V0.5H880.5V6\"></path>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(0.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.0</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(176.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.2</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(352.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.4</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(528.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.6</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(704.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.8</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(880.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">1.0</text>\n  </g>\n</g>\n```\n\n----------------------------------------\n\nTITLE: Example of Structured Data Format for D3 Stratify\nDESCRIPTION: Shows the expected format of tabular data after parsing from CSV. This is the input format that the stratify operator expects, with each object having properties that can be accessed by the id and parentId accessors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"name\": \"Eve\",   \"parent\": \"\"},\n  {\"name\": \"Cain\",  \"parent\": \"Eve\"},\n  {\"name\": \"Seth\",  \"parent\": \"Eve\"},\n  {\"name\": \"Enos\",  \"parent\": \"Seth\"},\n  {\"name\": \"Noam\",  \"parent\": \"Seth\"},\n  {\"name\": \"Abel\",  \"parent\": \"Eve\"},\n  {\"name\": \"Awan\",  \"parent\": \"Eve\"},\n  {\"name\": \"Enoch\", \"parent\": \"Awan\"},\n  {\"name\": \"Azura\", \"parent\": \"Eve\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Exponent from a Power Scale in D3.js\nDESCRIPTION: Gets the current exponent value from a power scale. This method returns the exponent that determines the transformation applied to input values before mapping to the output range.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nx.exponent() // 2\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Data with the Defined Method\nDESCRIPTION: Configures a line generator to skip undefined or NaN values by using the defined method, which determines which data points should be included in the line.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().defined((d) => !isNaN(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Full-Precision Cumulative Sum with D3 fcumsum in JavaScript\nDESCRIPTION: Calculates the full-precision cumulative sum of an array of numbers using D3's fcumsum function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.fcumsum([1, 1e-14, -1]) // [1, 1.00000000000001, 1e-14]\n```\n\n----------------------------------------\n\nTITLE: D3 Root Selection\nDESCRIPTION: Demonstrates selecting the root element and extending the selection prototype with custom methods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/selecting.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst root = d3.selection();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selection.prototype.checked = function(value) {\n  return arguments.length < 1\n      ? this.property(\"checked\")\n      : this.property(\"checked\", !!value);\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"input[type=checkbox]\").checked(true);\n```\n\n----------------------------------------\n\nTITLE: Setting the Canvas Context for a D3 Line Generator\nDESCRIPTION: Configures a line generator to render directly to a canvas 2D context instead of producing SVG path data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst line = d3.line().context(context);\n```\n\n----------------------------------------\n\nTITLE: Formatting a Color as RGB in D3.js\nDESCRIPTION: Demonstrates formatting a color as an RGB string using the formatRgb() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"yellow\").formatRgb() // \"rgb(255, 255, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Support Detection in JavaScript\nDESCRIPTION: Default implementation of the touch support detector. It checks for maximum touch points or the presence of ontouchstart event.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction touchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Symlog Scale Constant\nDESCRIPTION: Demonstrates setting the constant value for a symlog scale to 2. The constant affects the scaling behavior and defaults to 1 if not specified.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleSymlog([0, 100], [0, 960]).constant(2);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Context from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current rendering context from an area generator. This returns the context that was previously set with the context() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\narea.context() // context\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Range Output Values in D3.js Linear Scale\nDESCRIPTION: Example of using a D3.js linear scale with multiple output values in the range, creating a gradient color scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar linear = d3.scaleLinear().domain([0, 10]).range([\"red\", \"blue\"]);\nlinear(5); // \"#800080\" - a purple halfway between red and blue\n```\n\n----------------------------------------\n\nTITLE: Implementing rescaleX for Transforming Scale Domains in D3\nDESCRIPTION: This function returns a copy of a continuous scale with a transformed domain. It works by applying inverse x-transform on the scale's range and then computing the corresponding domain using the inverse scale. The original scale is not modified.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rescaleX(x) {\n  var range = x.range().map(transform.invertX, transform),\n      domain = range.map(x.invert, x);\n  return x.copy().domain(domain);\n}\n```\n\n----------------------------------------\n\nTITLE: Default Source Accessor Function for D3.js Link Generator\nDESCRIPTION: The default source accessor function used by D3.js link generators, which extracts the source property from the input data object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction source(d) {\n  return d.source;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Object Interpolation with D3\nDESCRIPTION: This example shows D3's ability to interpolate complex nested objects, including arrays and color strings. It demonstrates type inference used by the interpolate function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst i = d3.interpolate({colors: [\"red\", \"blue\"]}, {colors: [\"white\", \"black\"]});\ni(0.0); // {colors: [\"rgb(255, 0, 0)\", \"rgb(0, 0, 255)\"]}\ni(0.5); // {colors: [\"rgb(255, 128, 128)\", \"rgb(0, 0, 128)\"]}\ni(1.0); // {colors: [\"rgb(255, 255, 255)\", \"rgb(0, 0, 0)\"]}\n```\n\n----------------------------------------\n\nTITLE: Clamping RGB Color Values in D3.js\nDESCRIPTION: Shows how to clamp RGB color values to ensure they're within the valid range using the clamp() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd3.rgb(300, 200, 100).clamp() // {r: 255, g: 200, b: 100, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Creating a Diverging Scale with Default Domain in D3.js\nDESCRIPTION: Creates a diverging scale with the default domain [0, 0.5, 1] and a specified interpolator function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleDiverging(d3.interpolateRdBu);\n```\n\n----------------------------------------\n\nTITLE: D3.js Monotone X Curve Function\nDESCRIPTION: Creates a cubic spline that preserves monotonicity in y, assuming monotonicity in x. Used for smooth curve interpolation without spurious oscillations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncurveMonotoneX(context)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequential Scale with Default Parameters in JavaScript\nDESCRIPTION: Creates a sequential scale with the default domain [0, 1] and default interpolator (identity function). This creates a basic identity scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst identity = d3.scaleSequential();\n```\n\n----------------------------------------\n\nTITLE: Full-Precision Cumulative Sum with Accessor using D3 fcumsum in JavaScript\nDESCRIPTION: Calculates the full-precision cumulative sum of values extracted from an array of objects using an accessor function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/add.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.fcumsum(penguins, (d) => d.body_mass_g) // [3750, 7550, 10800, 10800, 14250, …]\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a Quantize Scale in D3.js\nDESCRIPTION: Makes an exact copy of a quantize scale. Changes to the original scale won't affect the copy, and vice versa.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst c1 = d3.scaleQuantize(d3.schemeBlues[5]);\nconst c2 = c1.copy();\n```\n\n----------------------------------------\n\nTITLE: Default X Accessor Function for D3.js Link Generator\nDESCRIPTION: The default x accessor function used by D3.js link generators, which extracts the first element from the input data array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction x(d) {\n  return d[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gnomonic Projection in D3.js\nDESCRIPTION: Sets up a gnomonic projection with scale, translation, clipping angle, and precision settings. This projection maps great circles to straight lines but causes significant distortion away from the center.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoGnomonic().scale(width / 6).translate([width / 2, height / 2]).clipAngle(74 - 1e-4).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Context from D3.js Link Generator\nDESCRIPTION: Shows how to retrieve the current rendering context from a link generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlink.context() // context\n```\n\n----------------------------------------\n\nTITLE: Clamping HSL Color Values in D3 JavaScript\nDESCRIPTION: Demonstrates using the clamp() method on an HSL color to restrict channel values to their valid ranges.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nd3.hsl(400, 2, 0.5).clamp() // {h: 40, s: 1, l: 0.5, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in CIELAB color space using d3.interpolateLab\nDESCRIPTION: Returns a CIELAB color space interpolator between two colors. The colors are converted to CIELAB using d3.lab. Returns an RGB string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateLab(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Generating Cauchy Distribution Random Numbers in JavaScript with D3\nDESCRIPTION: Creates a function that generates random numbers following a Cauchy distribution with location parameter 0 and scale parameter 1. The Cauchy distribution has 'fat tails', requiring clipping for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomCauchy(0, 1) // above, clipped to [-5, 5] because \"fat tails\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Offset with stackOffsetDiverging in D3.js\nDESCRIPTION: Sets the stack offset using d3.stackOffsetDiverging, which stacks positive values above zero, negative values below zero, and zero values at zero. Useful for diverging charts.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().offset(d3.stackOffsetDiverging);\n```\n\n----------------------------------------\n\nTITLE: Converting Tabular Data to Hierarchical Structure with d3.stratify in JavaScript\nDESCRIPTION: Creates a hierarchical structure from tabular data using d3.stratify(). This example demonstrates how to convert data with name and parent columns into a hierarchical root node that can be used with D3 hierarchy layouts.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar root = d3.stratify()\n    .id(function(d) { return d.name; })\n    .parentId(function(d) { return d.parent; })\n    (nodes);\n```\n\n----------------------------------------\n\nTITLE: Using bezierCurveTo Method with D3 Path Object\nDESCRIPTION: Shows how to draw a cubic Bézier curve with the bezierCurveTo method. This requires two control points and an end point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npath.bezierCurveTo(200, 0, 0, 200, 200, 200);\n```\n\n----------------------------------------\n\nTITLE: Inserting Elements with D3.js Selection\nDESCRIPTION: Examples of inserting paragraph elements to all div elements using d3.selectAll().insert() method. Shows three equivalent implementations with different approaches.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").insert(\"p\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").insert(() => document.createElement(\"p\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").select(function() {\n  return this.insertBefore(document.createElement(\"p\"), null);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing toString for D3 Transform Representation\nDESCRIPTION: This function returns a string representing the SVG transform corresponding to the current transform object. It combines translation and scaling operations into a standard SVG transform attribute format.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction toString() {\n  return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in Cubehelix color space with gamma adjustment\nDESCRIPTION: Returns a Cubehelix color space interpolator with a specified gamma adjustment, which affects how colors are blended in the interpolation space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateCubehelix.gamma(3)(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Getting Current Pad Angle Value\nDESCRIPTION: Retrieves the current pad angle accessor function from the pie generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npie.padAngle() // () => {{padAngle}}\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Locale for Number Formatting\nDESCRIPTION: This example demonstrates how to set a default locale for all d3-format operations, which affects the behavior of d3.format and d3.formatPrefix globally.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst enUs = d3.formatDefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Interpolating objects in D3.js\nDESCRIPTION: Shows how d3.interpolateObject can be used to interpolate between two objects. The function creates interpolators for corresponding properties and uses static values for extra properties in the second object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateObject({x: 0, y: 1}, {x: 1, y: 10, z: 100})(0.5) // {x: 0.5, y: 5.5, z: 100}\n```\n\n----------------------------------------\n\nTITLE: Generating Irwin-Hall Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Illustrates the use of d3.randomIrwinHall() to generate random numbers with an Irwin-Hall distribution, using 3 independent variables.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomIrwinHall(3) // generates numbers between 0 and 3\n```\n\n----------------------------------------\n\nTITLE: Using schemeBuPu array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Blue to Purple. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeBuPu[k]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Zoom Transform from Selection in D3\nDESCRIPTION: Example demonstrating how to retrieve the current zoom transform from a D3 selection by first accessing its DOM node.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar transform = d3.zoomTransform(selection.node());\n```\n\n----------------------------------------\n\nTITLE: Using precisionRound for Significant Digits in D3.js\nDESCRIPTION: The precisionRound function calculates appropriate decimal precision for formats that round to significant digits based on step size and maximum value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nd3.precisionRound(0.01, 1.01) // 3\n```\n\n----------------------------------------\n\nTITLE: Setting Curve Interpolation for D3.js Radial Line Generator\nDESCRIPTION: Configures the curve interpolation method for the radial line generator, in this case using a basis spline curve.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.lineRadial().curve(d3.curveBasis);\n```\n\n----------------------------------------\n\nTITLE: Interpolating strings with embedded numbers in D3.js\nDESCRIPTION: Shows how d3.interpolateString can be used to interpolate between two strings that contain numeric values. The function identifies and interpolates the numbers while keeping the rest of the string constant.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateString(\"20px\", \"32px\")(0.5) // \"26px\"\n```\n\n----------------------------------------\n\nTITLE: Importing D3 and Observable Plot in Vue.js Component\nDESCRIPTION: Sets up a Vue.js component that imports D3 and Observable Plot libraries, then loads RIAA revenue CSV data when the component is mounted.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {ref, shallowRef, onMounted} from \"vue\";\nimport PlotRender from \"../components/PlotRender.js\";\n\nconst riaa = shallowRef([]);\n\nonMounted(() => {\n  d3.csv(\"../data/riaa-us-revenue.csv\", d3.autoType).then((data) => (riaa.value = data));\n});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Percentage Formatting with precisionFixed in D3.js\nDESCRIPTION: Example showing how to adjust precisionFixed for percentage formatting by subtracting 2 from the calculated precision.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = Math.max(0, d3.precisionFixed(0.05) - 2);\nconst f = d3.format(\".\" + p + \"%\");\nf(0.45); // \"45%\"\nf(0.50); // \"50%\"\nf(0.55); // \"55%\"\n```\n\n----------------------------------------\n\nTITLE: Using Linear Congruential Generator for Seeded Random Numbers in D3\nDESCRIPTION: Creates a linear congruential generator with seed 42 for generating pseudorandom values. This provides reproducible sequences of random numbers with a period of up to 1 billion numbers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomLcg(42)\n```\n\n----------------------------------------\n\nTITLE: Creating a Canvas Drawing Function with D3.js\nDESCRIPTION: Example function for drawing a circle on a canvas context, which can later be used with d3.path for SVG rendering. The function accepts a context and radius parameter.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bisector's left() Method to Find Insertion Index in JavaScript\nDESCRIPTION: Uses a bisector's left method to find the index where a new date should be inserted before existing equivalent dates. This example finds the index of the row for January 2, 2014 in the aapl dataset.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisector((d) => d.Date).left(aapl, new Date(\"2014-01-02\")) // 162\n```\n\n----------------------------------------\n\nTITLE: Computing Ranks with D3.js\nDESCRIPTION: Shows how to determine the rank of values in an iterable using d3.rank(). Supports custom comparators and accessors, handling ties and null values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd3.rank([{x: 1}, {}, {x: 2}, {x: 0}], d => d.x);\nd3.rank([\"b\", \"c\", \"b\", \"a\"]);\nd3.rank([1, 2, 3], d3.descending);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Order with stackOrderReverse in D3.js\nDESCRIPTION: Sets the stack order using d3.stackOrderReverse, which reverses the series order [n-1, n-2, ..., 0] as defined by the key accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderReverse);\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Formatting with precisionRound in D3.js\nDESCRIPTION: Example showing how to adjust precisionRound for scientific notation by subtracting 1 from the calculated precision.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = Math.max(0, d3.precisionRound(0.01, 1.01) - 1);\nconst f = d3.format(\".\" + p + \"e\");\nf(0.01); // \"1.00e-2\"\nf(1.01); // \"1.01e+0\"\n```\n\n----------------------------------------\n\nTITLE: Loading Cross-Origin Images with d3.image\nDESCRIPTION: Shows how to load an image from another domain using d3.image() with CORS settings. This enables anonymous cross-origin requests for images from external domains.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = await d3.image(\"https://example.com/image.png\", {crossOrigin: \"anonymous\"});\n```\n\n----------------------------------------\n\nTITLE: Setting Partition Layout Size in D3\nDESCRIPTION: Sets or gets the size of the partition layout. The size is specified as a two-element array [width, height]. Default size is [1, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/partition.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n*partition*.size(*size*)\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Diverging Color Scale\nDESCRIPTION: Example of creating a continuous color scale using D3's interpolatePiYG color scheme with scaleSequential.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/diverging.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential(d3.interpolatePiYG);\n```\n\n----------------------------------------\n\nTITLE: Formatting Ticks for Logarithmic Scale in D3.js\nDESCRIPTION: Shows how to format tick values using tickFormat(). May return empty strings for some tick labels when there are too many ticks.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLog([1, 100], [0, 960]);\nconst T = x.ticks(); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, …]\nconst f = x.tickFormat();\nT.map(f); // [\"1\", \"2\", \"3\", \"4\", \"5\", \"\", \"\", \"\", \"\", \"10\", …]\n```\n\n----------------------------------------\n\nTITLE: Checking if a Color is Displayable in D3.js\nDESCRIPTION: Demonstrates how to check if a color is displayable on standard hardware using the displayable() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").displayable(1) // true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tick Format for D3.js Log Scale\nDESCRIPTION: Shows how to set custom tick formats for a logarithmic scale in D3.js using scale.ticks() and scale.tickFormat() methods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar log = d3.scaleLog();\nlog.ticks(); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlog.ticks(10); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlog.base(2).ticks(); // [1, 2, 4, 8]\nlog.tickFormat()(1.5); // \"1.5\"\nlog.tickFormat(5, \"+,\")(1.5); // \"+1.5\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Offset with stackOffsetNone in D3.js\nDESCRIPTION: Sets the stack offset using d3.stackOffsetNone, which applies a zero baseline. This is the default offset that creates traditional stacked charts starting from zero.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().offset(d3.stackOffsetNone);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Symbol Context\nDESCRIPTION: Retrieves the current rendering context from a symbol generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsymbol.context() // context\n```\n\n----------------------------------------\n\nTITLE: Using D3 locale.utcParse Method\nDESCRIPTION: Shows the basic usage of locale.utcParse (via d3.utcParse) to create a UTC date parser with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nd3.utcParse(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Loading XML Documents with d3.xml\nDESCRIPTION: Demonstrates how to fetch and parse an XML file using d3.xml(). This method fetches the file as text and then parses it as XML, returning a DOM Document object that can be queried or manipulated.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await d3.xml(\"example.xml\");\n```\n\n----------------------------------------\n\nTITLE: Using the resquarify tiling method in D3 treemap\nDESCRIPTION: A tiling method similar to treemapSquarify, but preserves the topology of the previous layout. This is useful for animating changes to treemaps by maintaining node positions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemapResquarify(*node*, *x0*, *y0*, *x1*, *y1*)\n```\n\n----------------------------------------\n\nTITLE: D3.js Natural Curve Function\nDESCRIPTION: Generates a natural cubic spline with second derivative set to zero at endpoints. Produces smooth curve interpolation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncurveNatural(context)\n```\n\n----------------------------------------\n\nTITLE: Enabling Clamping in D3 Linear Scale\nDESCRIPTION: Enables clamping on a linear scale, which restricts output values to stay within the range and prevents extrapolation beyond the domain.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([0, 960]).clamp(true);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Cluster Dendrogram with Plot\nDESCRIPTION: A Vue component that renders a cluster dendrogram visualization using Plot with custom settings for axis, height, margin, and text stroke styling.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/cluster.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<PlotRender :options='{\n  axis: null,\n  height: 130,\n  margin: 20,\n  marginRight: 120,\n  marks: [\n    Plot.cluster(gods, {textStroke: \"var(--vp-c-bg)\"})\n  ]\n}' />\n```\n\n----------------------------------------\n\nTITLE: HTML Custom Data Attributes Example\nDESCRIPTION: Example HTML structure showing custom data attributes usage in D3.js.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/joining.md#2025-04-11_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ul id=\"list\">\n  <li data-username=\"shawnbot\">Shawn Allen</li>\n  <li data-username=\"mbostock\">Mike Bostock</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with D3 Import\nDESCRIPTION: Sets up a Vue component that imports D3 and a WorldMap component, defining width and height constants for map rendering.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport WorldMap from \"../components/WorldMap.vue\";\n\nconst width = 688;\nconst height = 400;\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Date Difference Calculation Example in JavaScript\nDESCRIPTION: Demonstrates the incorrect way of calculating days between dates using millisecond conversion, showing why simple arithmetic fails due to daylight saving time.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = new Date(2015, 02, 01); // 2015-03-01T00:00\nconst end = new Date(2015, 03, 01); // 2015-04-01T00:00\nconst days = (end - start) / 864e5; // 30.958333333333332, oops! 🤯\n```\n\n----------------------------------------\n\nTITLE: Setting Element Properties with D3 Selection\nDESCRIPTION: Sets the \"checked\" property to true on the selected elements. The property method is used for special properties not addressable by attributes or styles, like form field values or checkbox states.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nselection.property(\"checked\", true)\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup with Plot Import\nDESCRIPTION: Sets up Vue component dependencies by importing Observable Plot library and volcano data for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport {data as volcano} from \"./data/volcano.data.js\";\nimport PlotRender from \"./components/PlotRender.js\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Domain Method with Arrays in D3.js Linear Scale\nDESCRIPTION: Demonstrates setting a domain for linear scale with an array of values, which establishes the input domain as a piecewise scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar linear = d3.scaleLinear().domain([-1, 0, 1]).range([\"red\", \"white\", \"blue\"]);\n```\n\n----------------------------------------\n\nTITLE: Computing bins from an array of numbers in D3\nDESCRIPTION: Shows how to apply a configured bin generator to an array of numbers to produce bins for a histogram or similar visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bins = bin(numbers);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Precision Accessor for D3 Geo Circle\nDESCRIPTION: The default accessor function for a circle's precision in the geoCircle generator, returning 2 degrees which controls the level of detail in the generated polygon approximation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/shape.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction precision() {\n  return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using interval.count for day of year in D3.js v4.0\nDESCRIPTION: Example of using the new interval.count method in D3.js version 4.0 to calculate the day number within the current year, replacing d3.time.dayOfYear from v3.x.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nvar now = new Date;\nd3.timeDay.count(d3.timeYear(now), now); // 165\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Polygon Example in JSON\nDESCRIPTION: Example GeoJSON Polygon object with coordinates forming a square. This shows the input format that would be processed by D3's geoStream function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/stream.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Polygon\",\n  \"coordinates\": [[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]]\n}\n```\n\n----------------------------------------\n\nTITLE: D3 UTC Monday Interval Example\nDESCRIPTION: Shows how to get the latest preceding Monday in UTC time using d3.utcMonday().\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.utcMonday() // the latest preceding Monday, UTC time\n```\n\n----------------------------------------\n\nTITLE: Using the binary tiling method in D3 treemap\nDESCRIPTION: A tiling method that recursively partitions nodes into an approximately-balanced binary tree, choosing horizontal or vertical partitioning based on rectangle dimensions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemapBinary(*node*, *x0*, *y0*, *x1*, *y1*)\n```\n\n----------------------------------------\n\nTITLE: Creating Delaunay Triangulation Object in D3.js\nDESCRIPTION: Demonstrates how to create a new Delaunay triangulation object from a set of points using D3.js. The points are provided as a flat array of coordinates.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/delaunay.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst delaunay = new d3.Delaunay(Float64Array.of(0, 0, 0, 1, 1, 0, 1, 1));\n```\n\n----------------------------------------\n\nTITLE: Testing Array Conditions with D3.js\nDESCRIPTION: Demonstrates the use of d3.every() and d3.some() for testing conditions across array elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nd3.every(new Set([1, 3, 5, 7]), x => x & 1)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.some(new Set([0, 2, 3, 4]), x => x & 1)\n```\n\n----------------------------------------\n\nTITLE: Intersection Operation in D3.js - JavaScript\nDESCRIPTION: Demonstrates the intersection operation that returns a new InternSet containing values common to all provided iterables.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.intersection([0, 2, 1, 0], [1, 3]) // Set {1}\n```\n\n----------------------------------------\n\nTITLE: Including D3.js v4 Default Bundle\nDESCRIPTION: This HTML snippet shows how to include the default D3.js version 4 bundle in a web page using a script tag.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://d3js.org/d3.v4.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: D3 Axis Transition\nDESCRIPTION: Demonstrates how to animate axis updates using D3 transitions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngx.transition()\n    .duration(750)\n    .call(d3.axisBottom(x));\n```\n\n----------------------------------------\n\nTITLE: Creating a Power Scale with Custom Exponent in D3.js\nDESCRIPTION: Constructs a new power scale with a domain of [0, 100], a range of [\"red\", \"blue\"], and sets the exponent to 2. The scale maps input values using a quadratic relationship.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/pow.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scalePow([0, 100], [\"red\", \"blue\"]).exponent(2);\n```\n\n----------------------------------------\n\nTITLE: Setting outer padding for a D3 treemap layout\nDESCRIPTION: Sets all outer padding (top, right, bottom, left) to the specified number or function, or returns the current top padding function if no argument is provided.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.paddingOuter(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Generating Uniform Random Numbers with D3 in JavaScript\nDESCRIPTION: Demonstrates how to use d3.randomUniform() to generate random numbers with a uniform distribution between 0 and 6.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomUniform(6) // generate numbers ≥0 and <6\n```\n\n----------------------------------------\n\nTITLE: Creating custom UTC day time interval in JavaScript\nDESCRIPTION: Demonstrates how to create a custom time interval using d3.timeInterval. This example creates a UTC day interval by specifying floor, offset, count, and field functions that work with UTC date methods.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst utcDay = d3.timeInterval(\n  (date) => date.setUTCHours(0, 0, 0, 0), // floor\n  (date, step) => date.setUTCDate(date.getUTCDate() + step), // offset\n  (start, end) => (end - start) / 864e5, // count\n  (date) => date.getUTCDate() - 1 // field\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Radial Area Generator to Data\nDESCRIPTION: Demonstrates how to use the radial area generator to create an SVG path from data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\").attr(\"d\", area(data));\n```\n\n----------------------------------------\n\nTITLE: Y-Reflection Transform\nDESCRIPTION: Example of creating a custom geometric transform to reflect coordinates along the y-axis using d3.geoTransform.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst reflectY = d3.geoTransform({\n  point(x, y) {\n    this.stream.point(x, -y);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Default Y1 Accessor Implementation in D3 Area Generator\nDESCRIPTION: Shows the default implementation of the y1 accessor in D3's area generator. By default, it extracts the second element of an array, assuming data points are two-element arrays of numbers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y(d) {\n  return d[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Offset in D3.js Axis\nDESCRIPTION: Demonstrates how to get the current pixel offset value from a D3.js axis object. The default offset is device-dependent to ensure crisp edges.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\naxis.offset() // 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Touch Support Detection in D3.js Brush\nDESCRIPTION: Default implementation of the touchable function that detects if the current device supports touch events. It checks for the presence of navigator.maxTouchPoints or the 'ontouchstart' event in the current element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction touchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Domain with Nice Method in D3.js\nDESCRIPTION: Demonstrates the nice() method which extends the domain to integer powers of the base for cleaner tick values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/log.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLog([0.201479, 0.996679], [0, 960]).nice();\nx.domain(); // [0.1, 1]\n```\n\n----------------------------------------\n\nTITLE: Setting bottom padding for a D3 treemap layout\nDESCRIPTION: Sets the bottom padding to the specified number or function, or returns the current bottom padding function if no argument is provided. Bottom padding separates a node's bottom edge from its children.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.paddingBottom(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Generating Logistic Distribution Random Numbers in JavaScript with D3\nDESCRIPTION: Creates a function that generates random numbers following a logistic distribution with location parameter 0 and scale parameter 1. The logistic distribution is used in various statistical models.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomLogistic(0, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Polynomial Easing Functions in D3\nDESCRIPTION: This code snippet demonstrates how to create linear, quadratic, and cubic easing functions using D3's easePoly with different exponents.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst linear = d3.easePoly.exponent(1);\nconst quad = d3.easePoly.exponent(2);\nconst cubic = d3.easePoly.exponent(3);\n```\n\n----------------------------------------\n\nTITLE: Removing Brush Event Listeners in D3.js\nDESCRIPTION: Removes all brush-related event listeners from a selection by setting the '.brush' namespace events to null.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngroup.on(\".brush\", null);\n```\n\n----------------------------------------\n\nTITLE: Formatting Rows of Data as CSV with d3.csvFormatRows\nDESCRIPTION: Demonstrates how to format an array of arrays as comma-separated values. This function converts nested arrays into a CSV string with each inner array becoming a row in the output.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csvFormatRows([[\"foo\", \"bar\"], [\"1\", \"2\"]]) // \"foo,bar\\n1,2\"\n```\n\n----------------------------------------\n\nTITLE: Goldstein-Price Function Implementation\nDESCRIPTION: Implementation of the Goldstein-Price function, a test function for global optimization used in contour visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction goldsteinPrice(x, y) {\n  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))\n      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));\n}\n```\n\n----------------------------------------\n\nTITLE: Using D3 locale.format Method\nDESCRIPTION: Demonstrates the basic usage of locale.format (via d3.timeFormat) to create a date formatter with a specific format specifier.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeFormat(\"%b %d\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Domain from a D3.js Quantile Scale\nDESCRIPTION: Demonstrates how to retrieve the current domain (the set of observed values) from a quantile scale, which returns the sorted array of values used for quantile computation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantile.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.domain() // [2700, 2850, 2850, 2900, 2900, 2900, 2900, …]\n```\n\n----------------------------------------\n\nTITLE: Tree Layout Rendering with Plot\nDESCRIPTION: Shows how to use the PlotRender component to display a tree visualization of the 'gods' data structure with customized rendering options.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<PlotRender :options='{\n  axis: null,\n  height: 100,\n  margin: 20,\n  marginRight: 120,\n  marks: [\n    Plot.tree(gods, {textStroke: \"var(--vp-c-bg)\"})\n  ]\n}' />\n```\n\n----------------------------------------\n\nTITLE: Using interval.count to calculate day of year in JavaScript\nDESCRIPTION: Calculates the current zero-based day-of-year number by counting the number of day boundaries between the start of the year and now. This is useful for determining the current day's position within the year.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.count(d3.timeYear(now), now) // 177\n```\n\n----------------------------------------\n\nTITLE: SVG Structure of a Two-Dimensional Brush in D3.js\nDESCRIPTION: Shows the HTML/SVG structure created by d3-brush, including the overlay rectangle, selection rectangle, and various handle rectangles used for resizing the brush selection.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<g class=\"brush\" fill=\"none\" pointer-events=\"all\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\">\n  <rect class=\"overlay\" pointer-events=\"all\" cursor=\"crosshair\" x=\"0\" y=\"0\" width=\"960\" height=\"500\"></rect>\n  <rect class=\"selection\" cursor=\"move\" fill=\"#777\" fill-opacity=\"0.3\" stroke=\"#fff\" shape-rendering=\"crispEdges\" x=\"112\" y=\"194\" width=\"182\" height=\"83\"></rect>\n  <rect class=\"handle handle--n\" cursor=\"ns-resize\" x=\"107\" y=\"189\" width=\"192\" height=\"10\"></rect>\n  <rect class=\"handle handle--e\" cursor=\"ew-resize\" x=\"289\" y=\"189\" width=\"10\" height=\"93\"></rect>\n  <rect class=\"handle handle--s\" cursor=\"ns-resize\" x=\"107\" y=\"272\" width=\"192\" height=\"10\"></rect>\n  <rect class=\"handle handle--w\" cursor=\"ew-resize\" x=\"107\" y=\"189\" width=\"10\" height=\"93\"></rect>\n  <rect class=\"handle handle--nw\" cursor=\"nwse-resize\" x=\"107\" y=\"189\" width=\"10\" height=\"10\"></rect>\n  <rect class=\"handle handle--ne\" cursor=\"nesw-resize\" x=\"289\" y=\"189\" width=\"10\" height=\"10\"></rect>\n  <rect class=\"handle handle--se\" cursor=\"nwse-resize\" x=\"289\" y=\"272\" width=\"10\" height=\"10\"></rect>\n  <rect class=\"handle handle--sw\" cursor=\"nesw-resize\" x=\"107\" y=\"272\" width=\"10\" height=\"10\"></rect>\n</g>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Symbols with D3's Low-level Interface\nDESCRIPTION: Creates a circle symbol using D3's low-level symbol type interface. This demonstrates how to use the draw method of a symbol type with a path context and size parameter.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.pathRound(3);\nconst circle = d3.symbolCircle.draw(path, 64);\npath.toString(); // \"M4.514,0A4.514,4.514,0,1,1,-4.514,0A4.514,4.514,0,1,1,4.514,0\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Rows from CSV with d3.csvParseRows\nDESCRIPTION: Parses a CSV string into an array of arrays without expecting a header row. Each inner array represents a row with its values as elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nd3.csvParseRows(\"foo,bar\\n1,2\") // [[\"foo\", \"bar\"], [\"1\", \"2\"]]\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Custom Elastic Easing in D3\nDESCRIPTION: This example shows how to create a custom elastic easing function with a specific period and apply it to a normalized time value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ease = d3.easeElastic.period(0.4);\n\n// Then during the animation, apply the easing function:\nconst te = ease(t);\n```\n\n----------------------------------------\n\nTITLE: Using schemeYlOrBr array in D3.js\nDESCRIPTION: A discrete sequential multi-hue color scheme array transitioning from Yellow to Orange to Brown. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeYlOrBr[k]\n```\n\n----------------------------------------\n\nTITLE: Applying a Stratify Operator to Data\nDESCRIPTION: Demonstrates how to apply a configured stratify operator to tabular data to generate a hierarchical structure. This transforms flat data into a root node with nested children.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst root = stratify(data);\n```\n\n----------------------------------------\n\nTITLE: D3 Date Floor Comparison Function\nDESCRIPTION: Example of how to correctly compare floored dates using numeric conversion since direct Date object comparison doesn't work.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns true if the specified date is a day boundary.\nfunction isDay(date) {\n  return +d3.timeDay.floor(date) === +date;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new treemap layout in D3\nDESCRIPTION: Creates a new treemap layout with default settings. The default layout uses the squarified tiling method with the golden ratio.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemap()\n```\n\n----------------------------------------\n\nTITLE: Interpolating and rounding numbers in D3.js\nDESCRIPTION: Demonstrates the use of d3.interpolateRound to create an interpolator that rounds the result to the nearest integer. This is useful for interpolating discrete values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateRound(20, 620)(0.821) // 513\n```\n\n----------------------------------------\n\nTITLE: Computing Thresholds of a Quantize Scale in D3.js\nDESCRIPTION: Retrieves the computed threshold values that divide the domain. The number of thresholds is one less than the length of the range.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.thresholds() // [0.2, 0.4, 0.6, 0.8]\n```\n\n----------------------------------------\n\nTITLE: Default X0 Accessor Implementation in D3 Area Generator\nDESCRIPTION: Shows the default implementation of the x0 accessor in D3's area generator. By default, it extracts the first element of an array, assuming data points are two-element arrays of numbers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction x(d) {\n  return d[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Delimiter-Separated Data with d3.dsv\nDESCRIPTION: Shows how to load a delimiter-separated values file using d3.dsv() with a custom delimiter. This function is the basis for d3.csv and d3.tsv, allowing for any custom delimiter character.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-fetch.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.dsv(\",\", \"example.csv\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Cyclical Continuous Color Scale with Rainbow Scheme in D3.js\nDESCRIPTION: This code demonstrates how to create a cyclical continuous color scale using the D3.js Rainbow color scheme. The scale maps values in the range [0,1] to colors in the Rainbow color space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/cyclical.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential(d3.interpolateRainbow);\n```\n\n----------------------------------------\n\nTITLE: D3 Conic Equidistant Projection Configuration\nDESCRIPTION: Configuration for D3's conic equidistant projection with specific parallels, rotation, scale, and other parameters for world map visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoConicEquidistant().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Using toString Method with D3 Path Object\nDESCRIPTION: Shows how to convert a path object to an SVG path data string using the toString method. This is the key method for generating SVG path data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npath.toString() // \"M40,0A40,40,0,1,1,-40,0A40,40,0,1,1,40,0\"\n```\n\n----------------------------------------\n\nTITLE: Generating Weibull Distribution Random Numbers in JavaScript with D3\nDESCRIPTION: Creates a function that generates random numbers following a Weibull distribution with shape parameter 10. This function can produce values for the generalized extreme value distribution family depending on the shape parameter.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomWeibull(10)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Defined Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current defined accessor from an area generator. This returns a function that was previously set with the defined() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\narea.defined() // (d) => !isNaN(d.Close)\n```\n\n----------------------------------------\n\nTITLE: Creating Diverging Color Scale with Three Colors in D3.js\nDESCRIPTION: Shows how to set up a diverging color scale with a three-point range specification, transitioning from red through white to green based on negative to positive domain values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear([-100, 0, +100], [\"red\", \"white\", \"green\"]);\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 Map Configuration in Vue\nDESCRIPTION: Sets up a Vue component with D3.js imports and defines basic dimensions for map visualizations that will be used with various azimuthal projections.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport WorldMap from \"../components/WorldMap.vue\";\n\nconst width = 688;\nconst height = 400;\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in CIELCh color space with long path using d3.interpolateHclLong\nDESCRIPTION: Similar to interpolateHcl but does not use the shortest path between hues, instead taking the long path around the color wheel.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateHclLong(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Stereographic Projection in D3.js\nDESCRIPTION: Sets up a stereographic projection with scale, translation, rotation, clipping angle, and precision settings. This projection is conformal, preserving angles at every point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoStereographic().scale(width / 4).translate([width / 2, height / 2]).rotate([-27, 0]).clipAngle(135 - 1e-4).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Spherical Mercator Projection\nDESCRIPTION: Example of creating a custom spherical Mercator projection using d3.geoProjection with a raw projection function that handles coordinate transformation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mercator = d3.geoProjection(function(x, y) {\n  return [x, Math.log(Math.tan(Math.PI / 4 + y / 2))];\n});\n```\n\n----------------------------------------\n\nTITLE: D3 Conic Conformal Projection Configuration\nDESCRIPTION: Configuration for D3's conic conformal projection with specific parallels, rotation, scale, and other parameters for world map visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoConicConformal().parallels([35, 65]).rotate([-20, 0]).scale(width * 0.55).center([0, 52]).translate([width / 2, height / 2]).clipExtent([[-1, -1], [width + 1, height + 1]]).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Setting Outer Tick Size in D3.js\nDESCRIPTION: Shows how to configure the outer tick size for a D3.js axis. Outer tick size controls the length of the square ends of the domain path at the extremes of the axis.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst axis = d3.axisBottom(x).tickSizeOuter(0);\n```\n\n----------------------------------------\n\nTITLE: Predefined namespace prefixes in D3.js\nDESCRIPTION: Lists the initial set of registered namespace prefixes in D3.js, including SVG, XHTML, XLink, XML, and XMLNS.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/namespaces.md#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: \"http://www.w3.org/1999/xhtml\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting a Quantize Scale to Find Domain Extents in D3.js\nDESCRIPTION: Uses the invertExtent method to find the domain values that correspond to a specific range value. Useful for interactive features that require mapping from output back to input ranges.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = d3.scaleQuantize([10, 100], [1, 2, 4]);\nwidth.invertExtent(2); // [40, 70]\n```\n\n----------------------------------------\n\nTITLE: Creating a Strict ISO 8601 Parser with D3\nDESCRIPTION: Demonstrates how to create a strict ISO 8601 parser using d3.utcParse with a specific format string, for ensuring input validation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst strictIsoParse = d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n```\n\n----------------------------------------\n\nTITLE: Affine Matrix Transform\nDESCRIPTION: Implementation of an affine matrix transformation using d3.geoTransform for arbitrary geometric transformations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction matrix(a, b, c, d, tx, ty) {\n  return d3.geoTransform({\n    point(x, y) {\n      this.stream.point(a * x + b * y + tx, c * x + d * y + ty);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: D3.js Monotone Y Curve Function\nDESCRIPTION: Creates a cubic spline that preserves monotonicity in x, assuming monotonicity in y. Used for smooth curve interpolation without spurious oscillations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncurveMonotoneY(context)\n```\n\n----------------------------------------\n\nTITLE: Custom Conic Projection Implementation\nDESCRIPTION: Example of implementing a configurable conic projection with adjustable parallels using d3.geoProjectionMutator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/projection.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction conicCustom() {\n  var phi0 = 29.5,\n      phi1 = 45.5,\n      mutate = d3.geoProjectionMutator(conicFactory),\n      projection = mutate(phi0, phi1);\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(phi0 = +_[0], phi1 = +_[1]) : [phi0, phi1];\n  };\n\n  return projection;\n}\n```\n\n----------------------------------------\n\nTITLE: Using geoArea to calculate spherical area of GeoJSON objects\nDESCRIPTION: Returns the spherical area of a specified GeoJSON object in steradians, equivalent to path.area in spherical context.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngeoArea(object)\n```\n\n----------------------------------------\n\nTITLE: Setting Uniform Tick Size in D3.js\nDESCRIPTION: Shows how to set both inner and outer tick sizes to the same value (in this case, zero) for a D3.js axis. Setting tick size to zero effectively hides the tick marks while preserving their labels.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst axis = d3.axisBottom(x).tickSize(0);\n```\n\n----------------------------------------\n\nTITLE: Getting Clamping Status of D3 Linear Scale\nDESCRIPTION: Retrieves the current clamping status of a linear scale using the clamp() method without arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nx.clamp() // true, perhaps\n```\n\n----------------------------------------\n\nTITLE: Using schemeGreens array in D3.js\nDESCRIPTION: A discrete sequential color scheme array with Green hues. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeGreens[k]\n```\n\n----------------------------------------\n\nTITLE: Explicit Timer Stopping with timer.stop() in D3 4.0\nDESCRIPTION: Demonstrates the new timer.stop() method in D3 4.0 which provides explicit control over when a timer should stop running.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nvar t = d3.timer(function(elapsed) {\n  console.log(elapsed);\n  if (elapsed >= 1000) {\n    t.stop();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azimuthal Equal-Area Projection in D3.js\nDESCRIPTION: Creates an azimuthal equal-area projection with specific rotation, extent fitting, and precision settings. This projection preserves the area of all regions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoAzimuthalEqualArea().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: \"Sphere\"}).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Setting Value Sorting for D3.js Pie Generator in JavaScript\nDESCRIPTION: Configures a custom sorting function for the values used in a D3.js pie generator. This affects the order of the pie slices based on their numeric values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pie = d3.pie().sortValues(d3.ascending);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transition Duration in D3\nDESCRIPTION: Returns the current duration value for the first non-null element in the transition. Useful when the transition contains only one element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.duration() // 750\n```\n\n----------------------------------------\n\nTITLE: Setting padding for a D3 treemap layout\nDESCRIPTION: Sets both inner and outer padding to the specified number or function, or returns the current inner padding function if no argument is provided.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n*treemap*.padding(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Using D3 isoFormat Method\nDESCRIPTION: Demonstrates how to use d3.isoFormat to format a date in ISO 8601 format. It uses Date.toISOString where available.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.isoFormat(new Date()) // \"2023-05-31T18:17:36.788Z\"\n```\n\n----------------------------------------\n\nTITLE: Default Start Angle Accessor\nDESCRIPTION: Default function for accessing start angle in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction startAngle(d) {\n  return d.startAngle;\n}\n```\n\n----------------------------------------\n\nTITLE: Using d3.timeDays with step parameter in D3.js v4.0\nDESCRIPTION: Example of using d3.timeDays with a step parameter in D3.js version 4.0, which now behaves like d3.range by simply skipping every nth date rather than filtering by field number.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDays(new Date(2016, 4, 28), new Date(2016, 5, 5), 2);\n// [Sat May 28 2016 00:00:00 GMT-0700 (PDT),\n//  Mon May 30 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\n```\n\n----------------------------------------\n\nTITLE: Adding Column Headers to CSV Output with Concat and CsvFormatRows\nDESCRIPTION: Demonstrates how to include a header row in CSV output by concatenating a header array with the data rows. This technique ensures the column names are included as the first line of the CSV string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = d3.csvFormatRows([[\n    \"year\",\n    \"make\",\n    \"model\",\n    \"length\"\n  ]].concat(data.map((d, i) => {\n  return [\n    d.year.getUTCFullYear(), // Assuming d.year is a Date object.\n    d.make,\n    d.model,\n    d.length\n  ];\n})));\n```\n\n----------------------------------------\n\nTITLE: Using interval.every method in D3.js v4.0\nDESCRIPTION: Example of using the new interval.every method to filter time intervals in D3.js version 4.0, which provides functionality similar to the v3.x filtering behavior for consistent time scale ticks.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.every(2).range(new Date(2016, 4, 28), new Date(2016, 5, 5));\n// [Sun May 29 2016 00:00:00 GMT-0700 (PDT),\n//  Tue May 31 2016 00:00:00 GMT-0700 (PDT),\n//  Wed Jun 01 2016 00:00:00 GMT-0700 (PDT),\n//  Fri Jun 03 2016 00:00:00 GMT-0700 (PDT)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Azimuthal Equidistant Projection in D3.js\nDESCRIPTION: Creates an azimuthal equidistant projection with rotation, extent fitting, and precision settings. This projection preserves distances from the center point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/azimuthal.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.geoAzimuthalEquidistant().rotate([110, -40]).fitExtent([[1, 1], [width - 1, height - 1]], {type: \"Sphere\"}).precision(0.2)\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Y Accessor\nDESCRIPTION: Shows how to retrieve the currently configured y accessor function from a line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nline.y() // (d) => y(d.Close)\n```\n\n----------------------------------------\n\nTITLE: Using piecewise with Gamma-Corrected RGB Interpolation in JavaScript\nDESCRIPTION: Shows how to create a piecewise interpolator that composes interpolators for adjacent pairs of values using gamma correction for RGB color space. This creates a smooth transition between multiple colors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nd3.piecewise(d3.interpolateRgb.gamma(2.2), [\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Default Defined Accessor Implementation\nDESCRIPTION: The default implementation of the defined accessor function used by D3 line generators, which includes all data points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction defined() {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Exponential Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Demonstrates how to use d3.randomExponential() to generate random numbers with an exponential distribution, with a rate of 1/40.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomExponential(1 / 40)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Offset with stackOffsetWiggle in D3.js\nDESCRIPTION: Sets the stack offset using d3.stackOffsetWiggle, which shifts the baseline to minimize the weighted wiggle of layers. Recommended for streamgraphs with inside-out ordering.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().offset(d3.stackOffsetWiggle);\n```\n\n----------------------------------------\n\nTITLE: Interpolating between two values in D3.js\nDESCRIPTION: Demonstrates the use of d3.interpolate to interpolate between two arbitrary values. In this example, it interpolates between two colors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolate(\"red\", \"blue\")(0.5) // \"rgb(128, 0, 128)\"\n```\n\n----------------------------------------\n\nTITLE: Updated D3 Geographic Projection Method Names\nDESCRIPTION: Migration guide showing the renaming of D3 geographic projection methods from d3.geo.* to d3.geo* format. Includes all core geographic operations like graticule, circle, area, bounds, and various map projections.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.geo.graticule ↦ d3.geoGraticule\nd3.geo.circle ↦ d3.geoCircle\nd3.geo.area ↦ d3.geoArea\nd3.geo.bounds ↦ d3.geoBounds\nd3.geo.centroid ↦ d3.geoCentroid\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup with D3 Imports\nDESCRIPTION: Initial setup code for a Vue component that imports D3 and map components, defining basic width and height constants for the visualizations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/conic.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport UsMap from \"../components/UsMap.vue\";\nimport WorldMap from \"../components/WorldMap.vue\";\n\nconst width = 688;\nconst height = 400;\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Target Accessor for D3.js Link Generator\nDESCRIPTION: Demonstrates how to set a custom target accessor function for a horizontal link generator that extracts the target point from the second element of an array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.linkHorizontal().target((d) => d[1]);\n```\n\n----------------------------------------\n\nTITLE: Creating X-Axis Force in D3 Force Simulation\nDESCRIPTION: Creates a new position force along the x-axis towards the center of the width. This force can be used to push nodes horizontally towards a specific position.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst x = d3.forceX(width / 2);\n```\n\n----------------------------------------\n\nTITLE: Generating Geometric Distribution Random Numbers with D3 in JavaScript\nDESCRIPTION: Demonstrates the use of d3.randomGeometric() to generate random numbers with a geometric distribution, with a success probability of 0.1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-random.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nd3.randomGeometric(0.1)\n```\n\n----------------------------------------\n\nTITLE: Default Extent Function for D3.js Brushes\nDESCRIPTION: The default implementation of the extent accessor function used by d3-brush. It determines the brushable area based on the SVG's viewBox or width/height attributes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 Contour Generator\nDESCRIPTION: Creates a new contour generator with specified size and threshold values for generating contour polygons.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst contours = d3.contours()\n    .size([width, height])\n    .thresholds([0, 1, 2, 3, 4]);\n```\n\n----------------------------------------\n\nTITLE: Using geoCentroid to find spherical center point\nDESCRIPTION: Returns the spherical centroid of a specified GeoJSON object, equivalent to path.centroid in spherical context.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngeoCentroid(object)\n```\n\n----------------------------------------\n\nTITLE: Creating a D3.js Line with Catmull-Rom Curve\nDESCRIPTION: Example of configuring a D3.js line generator with a Catmull-Rom curve and specific alpha parameter, which affects how the curve follows the control points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));\n```\n\n----------------------------------------\n\nTITLE: Point Scale Range Rounding\nDESCRIPTION: Demonstrates setting up range rounding for crisp rendering.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scalePoint().rangeRound([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Getting Median Index with D3.js\nDESCRIPTION: Demonstrates the use of d3.medianIndex() to find the index of the element to the left of the median in an array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nd3.medianIndex([1, 2, 2, 2, NaN, 3, null])\n```\n\n----------------------------------------\n\nTITLE: Default ParentID Accessor for D3 Stratify\nDESCRIPTION: Shows the default implementation of the parentId accessor function for the stratify operator. This function extracts the 'parentId' property from each data object to establish parent-child relationships.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfunction parentId(d) {\n  return d.parentId;\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Transitions with d3.transition() in JavaScript\nDESCRIPTION: Demonstrates how to create synchronized transitions using d3.transition(). This allows multiple selections to share the same transition timing and easing.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar t = d3.transition()\n    .duration(750)\n    .ease(d3.easeLinear);\n\nd3.selectAll(\".apple\").transition(t)\n    .style(\"fill\", \"red\");\n\nd3.selectAll(\".orange\").transition(t)\n    .style(\"fill\", \"orange\");\n```\n\n----------------------------------------\n\nTITLE: Getting D3 Local Variable Value\nDESCRIPTION: Shows how to retrieve the value of a local variable from a node. If the node doesn't define the local, it returns the value from the nearest ancestor that defines it.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/locals.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nselection.each(function() {\n  const value = foo.get(this);\n});\n```\n\n----------------------------------------\n\nTITLE: Using D3.js 4.0 Time Formatters\nDESCRIPTION: Example showing the usage of various time formatters in D3.js 4.0. Demonstrates how to format the current date in different styles including full date-time, date-only, and time-only representations.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nvar now = new Date;\nd3.timeFormat(\"%c\")(new Date); // \"6/23/2016, 2:01:33 PM\"\nd3.timeFormat(\"%x\")(new Date); // \"6/23/2016\"\nd3.timeFormat(\"%X\")(new Date); // \"2:01:38 PM\"\n```\n\n----------------------------------------\n\nTITLE: Using d3.scan Method in JavaScript\nDESCRIPTION: Demonstrates how to use d3.scan to find the index of the minimum value in an array of objects by providing a comparator function that compares the 'value' property of objects.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = [\n  {name: \"Alice\", value: 2},\n  {name: \"Bob\", value: 3},\n  {name: \"Carol\", value: 1},\n  {name: \"Dwayne\", value: 5}\n];\n\nvar i = d3.scan(data, function(a, b) { return a.value - b.value; }); // 2\ndata[i]; // {name: \"Carol\", value: 1}\n```\n\n----------------------------------------\n\nTITLE: Using geoContains to test point containment\nDESCRIPTION: Returns true if the specified GeoJSON object contains the given point (specified as longitude/latitude array), using exact tests for points and epsilon threshold for other geometries.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngeoContains(object, point)\n```\n\n----------------------------------------\n\nTITLE: Setting D3 Local Variable Using Selection.property\nDESCRIPTION: Demonstrates an alternative method to set a local variable using selection.property(). This is a more concise approach when setting a single variable.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/locals.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselection.property(foo, (d) => d.value);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Transition Selection Method in D3.js\nDESCRIPTION: Demonstrates the equivalent method for transition.select() using selection and transition chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntransition\n  .selection()\n  .select(selector)\n  .transition(transition)\n```\n\n----------------------------------------\n\nTITLE: Setting the Context for D3.js Link Generator\nDESCRIPTION: Shows how to set the rendering context for a link generator to a canvas 2D context, which causes the link to be rendered directly to the canvas rather than returning a path string.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst link = d3.link().context(context);\n```\n\n----------------------------------------\n\nTITLE: Removing D3 Local Variable\nDESCRIPTION: Demonstrates how to remove a local variable's value from a specific node. This operation does not affect ancestor definitions of the same local.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/locals.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nselection.each(function() {\n  foo.remove(this);\n});\n```\n\n----------------------------------------\n\nTITLE: Using interval.every with interval.range to generate odd days in JavaScript\nDESCRIPTION: Creates a range of dates containing only every 2nd day (odd days) from January 1 to January 7, 2015. The resulting array contains dates at two-day intervals starting from the range's beginning.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.every(2).range(new Date(2015, 0, 1), new Date(2015, 0, 7)) // [2015-01-01T00:00, 2015-01-03T00:00, 2015-01-05T00:00]\n```\n\n----------------------------------------\n\nTITLE: Using rect Method with D3 Path Object\nDESCRIPTION: Demonstrates creating a rectangle with the rect method. This creates a closed subpath with four points connected by straight lines.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npath.rect(10, 10, 140, 140);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inner Tick Size in D3.js\nDESCRIPTION: Demonstrates how to get the current inner tick size value from a D3.js axis object. The default inner tick size is 6 pixels if not explicitly set.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\naxis.tickSizeInner() // 0, as specified above\n```\n\n----------------------------------------\n\nTITLE: Getting the Domain of a Threshold Scale in D3.js\nDESCRIPTION: Shows how to retrieve the current domain of a threshold scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.domain() // [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Symbol Size Accessor\nDESCRIPTION: Retrieves the current symbol size accessor function from a symbol generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsymbol.size() // () => 100\n```\n\n----------------------------------------\n\nTITLE: Using the dice tiling method in D3 treemap\nDESCRIPTION: A tiling method that divides the rectangular area horizontally according to each child node's value. Children are positioned in order from left to right.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemapDice(*node*, *x0*, *y0*, *x1*, *y1*)\n```\n\n----------------------------------------\n\nTITLE: Converting HSL to RGB Color in D3.js\nDESCRIPTION: Demonstrates converting a color from HSL to RGB format using the rgb() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"hsl(120, 50%, 20%)\").rgb() // {r: 25.5, g: 76.5, b: 25.5, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Constructing a D3 Stratify Operator\nDESCRIPTION: Shows how to create a new stratify operator with default settings using d3.stratify(). This operator can then be configured with custom accessors and applied to data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/stratify.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst stratify = d3.stratify();\n```\n\n----------------------------------------\n\nTITLE: Creating Infinitely Repeating Transitions in D3.js\nDESCRIPTION: Demonstrates how to create an infinitely repeating transition using d3.active(). This technique allows for continuous animation between two states without explicit timing loops.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.select(\"circle\")\n  .transition()\n    .on(\"start\", function repeat() {\n        d3.active(this)\n            .style(\"fill\", \"red\")\n          .transition()\n            .style(\"fill\", \"blue\")\n          .transition()\n            .on(\"start\", repeat);\n      });\n```\n\n----------------------------------------\n\nTITLE: Setting End Angle for D3 Arc Generator\nDESCRIPTION: Shows how to set the end angle for a D3 arc generator and retrieve the current end angle accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().endAngle(Math.PI);\n\narc.endAngle() // () => 3.141592653589793\n```\n\n----------------------------------------\n\nTITLE: Creating closed B-spline interpolator with multiple colors using d3.interpolateRgbBasisClosed\nDESCRIPTION: Returns a uniform nonrational B-spline interpolator through an array of colors, with cyclical C² continuity. Control points are implicitly repeated, useful for creating cyclical color scales.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateRgbBasisClosed([\"purple\", \"green\", \"orange\"])\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of rangeRound in D3\nDESCRIPTION: Shows the equivalent implementation of rangeRound() by manually setting the range and interpolator. This demonstrates how rangeRound is a convenience method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlinear.range(range).interpolate(d3.interpolateRound)\n```\n\n----------------------------------------\n\nTITLE: Default Symbol Size Accessor Function\nDESCRIPTION: Shows the default implementation of the symbol size accessor, which returns 64 square pixels.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction size() {\n  return 64;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pack Layout in D3\nDESCRIPTION: Creates a new pack layout with default settings. This is the primary constructor for circle packing layouts in D3.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npack()\n```\n\n----------------------------------------\n\nTITLE: Setting the Domain of a Quantize Scale in D3.js\nDESCRIPTION: Demonstrates how to set the domain of an existing quantize scale using the domain method. The domain must be a two-element array of numbers in ascending order.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantize(d3.schemeBlues[9]);\ncolor.domain([0, 100]);\n```\n\n----------------------------------------\n\nTITLE: Setting a Sequential Scale's Interpolator Directly in JavaScript\nDESCRIPTION: Creates a sequential scale with a custom interpolator created from two color values. This is equivalent to using the range method with the same values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/sequential.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleSequential(d3.interpolate(\"red\", \"blue\"));\n```\n\n----------------------------------------\n\nTITLE: Using Bisector's center() Method to Find Closest Value in JavaScript\nDESCRIPTION: Uses a bisector's center method to find the index of the value closest to a given date in a sorted array. This example finds the index of the row closest to December 31, 2013 in the aapl dataset.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bisect.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.bisector((d) => d.Date).center(aapl, new Date(\"2013-12-31\")) // 161\n```\n\n----------------------------------------\n\nTITLE: Using d3.mode to find most frequent value in JavaScript\nDESCRIPTION: Returns the mode of the given iterable, which is the value that appears most often. Ignores undefined, null and NaN values. An optional accessor function can be provided.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nd3.mode([1, 2, 2, 2, 3, 3]) // 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.mode(penguins, (d) => d.island) // \"Biscoe\"\n```\n\n----------------------------------------\n\nTITLE: Creating a D3.js Stack Generator\nDESCRIPTION: Example showing how to create and apply a stack generator in D3.js 4.0. The stack generator is configured with data keys, stack order, and offset options before being applied to the data.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nvar stack = d3.stack()\n    .keys([\"apples\", \"bananas\", \"cherries\", \"dates\"])\n    .order(d3.stackOrderNone)\n    .offset(d3.stackOffsetNone);\n\nvar series = stack(data);\n```\n\n----------------------------------------\n\nTITLE: Using D3.js Path Serializer for SVG Rendering\nDESCRIPTION: Example showing how to use d3.path serializer to convert canvas-style drawing commands to SVG path data. This demonstrates the path serializer's ability to support both Canvas and SVG outputs.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar context = d3.path();\ndrawCircle(context, 40);\npathElement.setAttribute(\"d\", context.toString());\n```\n\n----------------------------------------\n\nTITLE: Formatting CSV with Specified Columns in D3.js\nDESCRIPTION: Shows how to format data as CSV with an explicit subset of columns using d3.csvFormat in D3.js v4. This feature allows controlling which columns are included and their order in the output.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar string = d3.csvFormat(data, [\"Year\", \"Model\", \"Length\"]);\n```\n\n----------------------------------------\n\nTITLE: Applying gamma correction to RGB color interpolation\nDESCRIPTION: Creates an RGB interpolator with a specified gamma correction of 2.2, which can provide more perceptually uniform color transitions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Using schemeBlues array in D3.js\nDESCRIPTION: A discrete sequential color scheme array with Blue hues. The parameter k specifies the size of the color array to use, which must be between 3 and 9 inclusive.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.schemeBlues[k]\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Y Accessor from D3.js Link Generator\nDESCRIPTION: Shows how to retrieve the current y accessor function from a link generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlink.y() // (d) => y(d.y)\n```\n\n----------------------------------------\n\nTITLE: Controlling Unknown Value Handling in Ordinal Scales\nDESCRIPTION: Example showing how to prevent domain extension by setting the unknown method, which is useful for scenarios like choropleth maps where you want to assign a specific value to missing data.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = d3.scaleOrdinal()\n    .domain([0, 1])\n    .range([\"red\", \"green\", \"blue\"])\n    .unknown(undefined);\n\nx.domain(); // [0, 1]\nx(2); // undefined\nx.domain(); // [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Setting Domain for Ordinal Scale\nDESCRIPTION: Example of creating an ordinal scale with a range first, then setting its domain and accessing values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/ordinal.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal([\"red\", \"green\", \"blue\"]).domain([\"a\", \"b\", \"c\"]);\ncolor(\"a\"); // \"red\"\ncolor(\"b\"); // \"green\"\ncolor(\"c\"); // \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Using Sturges' formula for bin thresholds in D3\nDESCRIPTION: Configures a bin generator to use Sturges' formula to determine the number of bins, which is the default threshold calculation method in D3's bin generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().thresholds(d3.thresholdSturges);\n```\n\n----------------------------------------\n\nTITLE: Object Interpolation Behavior in D3.js v4.0\nDESCRIPTION: Example showing how d3.interpolateObject behaves in D3.js version 4.0, where properties in the start value that don't exist in the end value are ignored during interpolation.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {foo: 2.5} in 4.0\n```\n\n----------------------------------------\n\nTITLE: D3 Voronoi API Changes\nDESCRIPTION: Documents the renaming of key Voronoi methods and properties in D3. The d3.geom.voronoi is now d3.voronoi, and voronoi.clipExtent is now voronoi.extent. The polygon.point property has been renamed to polygon.data.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nd3.voronoi() // formerly d3.geom.voronoi\n.extent([[x0, y0], [x1, y1]]) // formerly clipExtent\n```\n\n----------------------------------------\n\nTITLE: Hair Color Transition Matrix Definition\nDESCRIPTION: Defines a 4x4 matrix representing hair color transition data. Each row represents the starting color (black, blond, brown, red) and each column represents the ending color, with values indicating the number of people who transitioned between colors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst matrix = [\n  // to black, blond, brown, red\n  [11975,  5871, 8916, 2868], // from black\n  [ 1951, 10048, 2060, 6171], // from blond\n  [ 8010, 16145, 8090, 8045], // from brown\n  [ 1013,   990,  940, 6907]  // from red\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Nice Intervals with D3.js in JavaScript\nDESCRIPTION: The d3.nice() function returns a new interval [niceStart, niceStop] covering the given interval [start, stop], where niceStart and niceStop align with the corresponding tick step.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/ticks.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nd3.nice(1, 9, 5) // [0, 10]\n```\n\n----------------------------------------\n\nTITLE: Promoting Values to Functions in D3\nDESCRIPTION: Pattern for promoting a value to a function if it isn't already one, replacing the functionality of the removed d3.functor method. This is useful when an API accepts either a constant value or a function.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar fx = typeof x === \"function\" ? x : constant(x);\n```\n\n----------------------------------------\n\nTITLE: Implementing a basic number interpolator in JavaScript\nDESCRIPTION: Provides an example of how a basic number interpolator function could be implemented. This function linearly interpolates between two numbers based on a parameter t.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction interpolator(t) {\n  return a * (1 - t) + b * t;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Sequential Color Scale\nDESCRIPTION: Example of creating a discrete sequential color scale using D3's Blues scheme with 9 colors using scaleOrdinal\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/sequential.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal(d3.schemeBlues[9]);\n```\n\n----------------------------------------\n\nTITLE: Default Target Accessor Function for D3.js Link Generator\nDESCRIPTION: The default target accessor function used by D3.js link generators, which extracts the target property from the input data object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction target(d) {\n  return d.target;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Order with stackOrderAscending in D3.js\nDESCRIPTION: Sets the stack order using d3.stackOrderAscending, which arranges series so that the smallest (by sum of values) appears at the bottom of the stack.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderAscending);\n```\n\n----------------------------------------\n\nTITLE: Timer execution output example in JavaScript\nDESCRIPTION: Shows the console output produced by the timer execution, displaying the elapsed time at each callback invocation. The values demonstrate the timing pattern of the timer callbacks.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-timer.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n3\n25\n48\n65\n85\n106\n125\n146\n167\n189\n209\n```\n\n----------------------------------------\n\nTITLE: Computing Contour Polygons\nDESCRIPTION: Generates contour polygons from a grid of values using the configured contour generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/contour.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst polygons = contours(grid);\n```\n\n----------------------------------------\n\nTITLE: Using d3.leastIndex with comparators in JavaScript\nDESCRIPTION: Returns the index of the least element according to a specified comparator or accessor. Returns -1 if the iterable contains no comparable elements.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/summarize.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [{foo: 42}, {foo: 91}];\nd3.leastIndex(array, (a, b) => a.foo - b.foo); // 0\nd3.leastIndex(array, (a, b) => b.foo - a.foo); // 1\nd3.leastIndex(array, (d) => d.foo); // 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Rebinding Pattern in D3 Components\nDESCRIPTION: Demonstrates how to implement the method rebinding pattern to replace the removed d3.rebind method. This pattern allows wrapper methods to preserve the chainability of the original getter-setter methods.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ncomponent.on = function() {\n  var value = dispatch.on.apply(dispatch, arguments);\n  return value === dispatch ? component : value;\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from rangePoints to Point Scales in D3.js v4\nDESCRIPTION: Comparison between D3.js v3.x ordinal scales with rangePoints and the new point scales in v4.0, which provide more consistent API for point-based layouts.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = d3.scale.ordinal()\n    .domain([\"a\", \"b\", \"c\"])\n    .rangePoints([0, width]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = d3.scalePoint()\n    .domain([\"a\", \"b\", \"c\"])\n    .range([0, width]);\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Ticks with d3.ticks\nDESCRIPTION: Shows how to generate human-readable numeric ticks using the d3.ticks method, which creates evenly spaced values within a specified range and count.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar ticks = d3.ticks(0, 10, 5); // [0, 2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: D3.js Linear Closed Curve Function\nDESCRIPTION: Function that produces a closed polyline through specified points by repeating the first point at the end.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/curve.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncurveLinearClosed(context)\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with D3 Exponential Notation\nDESCRIPTION: Demonstrates D3's new default precision behavior for number formatting using exponential notation, showing consistent results with floating point numbers.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = d3.format(\"e\");\nf(42);        // \"4.200000e+1\"\nf(0.1 + 0.2); // \"3.000000e-1\"\n```\n\n----------------------------------------\n\nTITLE: Importing D3 and Component in Vue.js\nDESCRIPTION: This snippet demonstrates how to import the D3 library and a custom ColorRamp component in a Vue.js setup script.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport ColorRamp from \"./components/ColorRamp.vue\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Diverging Color Scale\nDESCRIPTION: Example of creating a discrete nine-color scale using D3's PiYG color scheme with scaleOrdinal.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/diverging.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleOrdinal(d3.schemePiYG[9]);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Decimal Digits from D3 Area Generator in JavaScript\nDESCRIPTION: Retrieves the current maximum fraction digits setting from the area generator. Returns the number of digits after the decimal point that the generator will use.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\narea.digits() // 3\n```\n\n----------------------------------------\n\nTITLE: Setting Inner Radius\nDESCRIPTION: Configures the inner radius accessor for the radial area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial().radius((d) => r(d.low));\n```\n\n----------------------------------------\n\nTITLE: Reducing Iterables with d3.reduce in JavaScript\nDESCRIPTION: Like Array.reduce but works with any iterable. Applies a function against an accumulator and each element to reduce it to a single value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/transform.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.reduce(new Set([0, 2, 3, 4]), (p, v) => p + v, 0) // 9\n```\n\n----------------------------------------\n\nTITLE: Default Children Accessor Function for D3 Hierarchy in JavaScript\nDESCRIPTION: Defines the default function used to access children in a hierarchical data structure.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction children(d) {\n  return d.children;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing d3.arc with Canvas Context Support in D3 v4\nDESCRIPTION: Creates an arc generator that can render to Canvas by providing a CanvasRenderingContext2D. This allows rendering D3 shapes directly to Canvas instead of only SVG.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nvar arc = d3.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(0)\n    .context(context);\n```\n\n----------------------------------------\n\nTITLE: Applying Box Blur to a 1D Array in JavaScript\nDESCRIPTION: Demonstrates how to use d3.blur() to smooth a random walk by applying a box blur with radius 5. The function processes the data in-place and returns the modified array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/blur.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = d3.cumsum({length: 1000}, () => Math.random() - 0.5);\nd3.blur(numbers, 5); // a smoothed random walk\n```\n\n----------------------------------------\n\nTITLE: Blurring ImageData with D3 in JavaScript\nDESCRIPTION: Demonstrates how to use d3.blurImage() to apply a box blur to an ImageData object with radius 5. This function blurs each RGBA channel independently and modifies the ImageData in-place.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/blur.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst imageData = context.getImageData(0, 0, width, height);\nd3.blurImage(imageData, 5);\n```\n\n----------------------------------------\n\nTITLE: Generating Descending Ticks with Linear Scale in D3.js v4\nDESCRIPTION: Example showing how linear scales now generate ticks in the same order as the domain. In this case, a descending domain results in descending ticks.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nd3.scaleLinear().domain([10, 0]).ticks(5); // [10, 8, 6, 4, 2, 0]\n```\n\n----------------------------------------\n\nTITLE: Simplified Axis Creation in D3 v4\nDESCRIPTION: Shows the new simplified syntax for creating axes in D3 version 4, using the dedicated constructor methods (d3.axisBottom in this case) which provide better default styling.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\nd3.select(\".axis\")\n    .call(d3.axisBottom(x));\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Callback in D3 v4\nDESCRIPTION: This snippet demonstrates how to load a CSV file using the asynchronous callback pattern in D3 version 4. It includes error handling and logging the data to the console.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csv(\"file.csv\", function(error, data) {\n  if (error) throw error;\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Catmull-Rom Spline Curve in D3 v4\nDESCRIPTION: Creates a line generator with a custom Catmull-Rom spline curve configuration. The alpha parameter is set to 0 to create a uniform Catmull-Rom spline instead of the default centripetal spline.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar line = d3.line()\n    .curve(d3.curveCatmullRom.alpha(0));\n```\n\n----------------------------------------\n\nTITLE: Interpolating Numbers with D3\nDESCRIPTION: This example shows how to create and use a number interpolator function in D3. It interpolates between 10 and 20 for different t values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst i = d3.interpolateNumber(10, 20);\ni(0.0); // 10\ni(0.2); // 12\ni(0.5); // 15\ni(1.0); // 20\n```\n\n----------------------------------------\n\nTITLE: Initializing D3 Quadtree with Vue 3 Setup\nDESCRIPTION: Sets up a Vue 3 component with D3 and Plot imports, creates random points, and initializes a quadtree with those points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport {computed, shallowRef, onMounted} from \"vue\";\nimport ExampleAnimatedQuadtree from \"./components/ExampleAnimatedQuadtree.vue\";\nimport PlotRender from \"./components/PlotRender.js\";\nimport quadtree_findVisited from \"./components/quadtreeFindVisited.js\";\nimport quadtree_nodes from \"./components/quadtreeNodes.js\";\n\nconst random = d3.randomNormal.source(d3.randomLcg(42))();\nconst points = Array.from({length: 1000}, () => [random(), random()]);\nconst tree = d3.quadtree(d3.range(points.length), (i) => points[i][0], (i) => points[i][1]);\nconst findState = shallowRef({x: 0, y: 0, i: -1});\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Curve Factory from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current curve factory from an area generator. This returns the curve factory that was previously set with the curve() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\narea.curve() // d3.curveStep\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Maximum Digits\nDESCRIPTION: Shows how to retrieve the currently configured maximum fraction digits from a line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nline.digits() // 3\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of D3 Band Scale\nDESCRIPTION: Creates an exact copy of the band scale. Changes to the original scale will not affect the copied scale, and vice versa.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst x1 = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]);\nconst x2 = x1.copy();\n```\n\n----------------------------------------\n\nTITLE: Styling D3 Hero Section with CSS Variables\nDESCRIPTION: CSS styling for the D3 homepage hero section, defining gradient text colors and hiding duplicate names to improve visual presentation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --vp-home-hero-name-color: transparent;\n  --vp-home-hero-name-background: linear-gradient(-30deg, #f9a03c, #b84e51);\n}\n\n.VPHero .name {\n  display: none; /* too similar to the logo */\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a D3 Arc to Canvas using Context\nDESCRIPTION: Demonstrates how to use a D3 arc generator to draw a path on a Canvas context for a given data point. The arc generator creates the path which is then filled on the canvas.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.beginPath();\narc(d);\ncontext.fill();\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Promises in D3 v5\nDESCRIPTION: This snippet shows how to load a CSV file using Promises in D3 version 5. It demonstrates the simplified structure of asynchronous code using the .then() method.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.csv(\"file.csv\").then(function(data) {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: D3 Zoom API Changes\nDESCRIPTION: Shows the renaming of zoom behavior from d3.behavior.zoom to d3.zoom and demonstrates new transform methods for programmatic zooming.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nd3.zoom() // formerly d3.behavior.zoom\n.translateExtent([[x0, y0], [x1, y1]])\n.scaleBy(selection, k)\n.translateBy(selection, x, y)\n.scaleTo(selection, k)\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Points with D3 and Vue.js\nDESCRIPTION: This snippet sets up a Vue.js component and generates 1000 random points using D3's random normal distribution. It also imports the Plot library from Observable.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-polygon.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\n\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport PlotRender from \"./components/PlotRender.js\";\n\nconst random = d3.randomNormal.source(d3.randomLcg(42))();\nconst points = Array.from({length: 1000}, () => [random(), random()]);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Copying and Accessing D3 Quadtree\nDESCRIPTION: Demonstrates how to create a copy of a quadtree and access its root node, data, and size.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst t1 = d3.quadtree(data);\nconst t2 = t1.copy();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.root() // [{…}, empty × 2, {…}]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.data() // [[0, 0], [1, 2]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.size() // 2\n```\n\n----------------------------------------\n\nTITLE: Setting Corner Radius for D3 Arc Generator\nDESCRIPTION: Shows how to set the corner radius for a D3 arc generator and retrieve the current corner radius accessor.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc().cornerRadius(18);\n\narc.cornerRadius() // () => 18\n```\n\n----------------------------------------\n\nTITLE: Interpolating typed number arrays in D3.js\nDESCRIPTION: Demonstrates the use of d3.interpolateNumberArray to interpolate between two arrays of numbers, including typed arrays. This function is optimized for numeric arrays.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateNumberArray([0, 1], Float64Array.of(1, 3))(0.5) // [0.5, 2]\n```\n\n----------------------------------------\n\nTITLE: Children Accessor for Map Data in D3 Hierarchy (JavaScript)\nDESCRIPTION: Defines the default children accessor function when the input data is a Map object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/hierarchy.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction children(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using .each() Method in D3 Selections with Parent and Child Data Access\nDESCRIPTION: Demonstrates how to use the .each() method to create a context that allows accessing both parent and child data simultaneously. This example shows setting text content of child elements based on both parent and child data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/control-flow.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nparent.each(function(p, j) {\n  d3.select(this)\n    .selectAll(\".child\")\n      .text(d => `child ${d.name} of ${p.name}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Including D3.js v4 with ColorBrewer Plugin\nDESCRIPTION: This HTML snippet demonstrates how to include both the D3.js version 4 default bundle and the ColorBrewer scales plugin in a web page.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://d3js.org/d3.v4.js\"></script>\n<script src=\"https://d3js.org/d3-scale-chromatic.v0.3.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using interval.count for week of year in D3.js v4.0\nDESCRIPTION: Example of using the interval.count method in D3.js version 4.0 to calculate the week number within the current year, replacing d3.time.weekOfYear from v3.x.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeWeek.count(d3.timeYear(now), now); // 24\n```\n\n----------------------------------------\n\nTITLE: Problematic Background Transitions in D3 3.x\nDESCRIPTION: Illustrates a problematic pattern in D3 3.x where transitions scheduled in the background could accumulate and cause the browser to hang when returning to the foreground.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nsetInterval(function() {\n  d3.selectAll(\"div\").transition().call(someAnimation); // BAD\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML After Element Ordering\nDESCRIPTION: The resulting HTML structure after executing the D3.js element ordering example, showing how new elements are inserted in order before existing elements.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<div>a</div>\n<div>b</div>\n<div>c</div>\n<div>d</div>\n<div>e</div>\n<div>f</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Diverging Scale's Range with Piecewise Interpolation in D3.js\nDESCRIPTION: Shows the equivalent operation of setting a range using d3.piecewise to create an interpolator from an array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleDiverging(d3.piecewise([\"blue\", \"white\", \"red\"]));\n```\n\n----------------------------------------\n\nTITLE: D3 Number Alignment Formatting\nDESCRIPTION: Shows how to use D3's alignment options for formatting numbers with padding and signs.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\">6d\")(-42);  // \"   -42\"\nd3.format(\"=6d\")(-42);  // \"-   42\"\nd3.format(\">(6d\")(-42); // \"  (42)\"\nd3.format(\"=(6d\")(-42); // \"(  42)\"\n```\n\n----------------------------------------\n\nTITLE: Default Subject Accessor for D3 Drag Behavior\nDESCRIPTION: The default subject accessor function that determines what is being dragged. It uses the datum of the element or falls back to the pointer coordinates if no datum exists.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction subject(event, d) {\n  return d == null ? {x: event.x, y: event.y} : d;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function for X and Y Forces in D3\nDESCRIPTION: Defines the default strength accessor function for x and y position forces. This function returns a constant value of 0.1, determining how quickly nodes move towards their target positions.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction strength() {\n  return 0.1;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Pad Angle Accessor in D3.js\nDESCRIPTION: Shows the default implementation of the pad angle accessor function that retrieves the padAngle property from the data object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction padAngle() {\n  return d && d.padAngle;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Event Filter for D3 Drag Behavior\nDESCRIPTION: The default filter function for drag events, which ignores events with the ctrl key pressed or from secondary mouse buttons (such as right clicks).\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction filter(event) {\n  return !event.ctrlKey && !event.button;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Outer Tick Size in D3.js\nDESCRIPTION: Demonstrates how to get the current outer tick size value from a D3.js axis object. Setting outer tick size to 0 suppresses the square ends of the domain path.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naxis.tickSizeOuter() // 0, as specified above\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Threshold Scale in D3.js\nDESCRIPTION: Shows how to create a threshold scale with a default domain of [0.5]. The resulting scale maps values below 0.5 to \"red\" and values above 0.5 to \"blue\".\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleThreshold([\"red\", \"blue\"]);\ncolor(0); // \"red\"\ncolor(1); // \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Setting D3 Local Variable Using Selection.each\nDESCRIPTION: Shows how to set a local variable's value on specific nodes using selection.each(). This method allows setting the local variable for each element in a selection.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/locals.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nselection.each(function(d) {\n  foo.set(this, d.value);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current X Accessor from D3 Area Generator in JavaScript\nDESCRIPTION: Shows how to get the current x0 accessor from an area generator. This returns the function that was previously set with the x() or x0() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\narea.x() // (d) => x(d.Date)\n```\n\n----------------------------------------\n\nTITLE: Gamma-Corrected RGB Color Interpolation in D3.js\nDESCRIPTION: Example of creating a gamma-corrected color interpolator between purple and orange with a gamma value of 2.2 using d3.interpolateRgb.gamma method.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar interpolate = d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\");\n```\n\n----------------------------------------\n\nTITLE: Using Scott's rule for bin thresholds in D3\nDESCRIPTION: Configures a bin generator to use Scott's normal reference rule to determine the optimal number of bins based on the data distribution and assuming normality.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().thresholds(d3.thresholdScott);\n```\n\n----------------------------------------\n\nTITLE: Using geoInterpolate for great arc interpolation\nDESCRIPTION: Returns an interpolator function for two points that takes a parameter t (0-1) and returns a point along the great arc between them.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngeoInterpolate(a, b)\n```\n\n----------------------------------------\n\nTITLE: Basic Point Scale Usage\nDESCRIPTION: Demonstrates creating and using a point scale with a domain and range, showing how values are mapped to points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scalePoint([\"a\", \"b\", \"c\"], [0, 960]);\nx(\"a\"); // 0\nx(\"b\"); // 480\nx(\"c\"); // 960\nx(\"d\"); // undefined\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in D3.js v3.x\nDESCRIPTION: Shows how to dispatch a 'foo' event using the old D3.js v3.x syntax, where event types were directly accessible on the dispatcher object.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndispatcher.foo.call(that, \"Hello, Foo!\");\n```\n\n----------------------------------------\n\nTITLE: Updated D3 Geographic Property Names\nDESCRIPTION: Changes to geographic object property names for improved consistency, affecting circle and graticule objects.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\ncircle.origin ↦ circle.center\ncircle.angle ↦ circle.radius\ngraticule.majorExtent ↦ graticule.extentMajor\ngraticule.minorExtent ↦ graticule.extentMinor\ngraticule.majorStep ↦ graticule.stepMajor\ngraticule.minorStep ↦ graticule.stepMinor\n```\n\n----------------------------------------\n\nTITLE: Setting Tick Padding in D3.js\nDESCRIPTION: Shows how to set padding between tick lines and their labels in a D3.js axis. Tick padding controls the space between the tick marks and tick text labels.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-axis.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst axis = d3.axisBottom(x).tickPadding(0);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in D3.js v4.0\nDESCRIPTION: Demonstrates the new way to dispatch events in D3.js v4.0 using the generic call method, which takes the event type as the first argument.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ndispatcher.call(\"foo\", that, \"Hello, Foo!\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Quadtree in D3.js v3.x\nDESCRIPTION: Example of creating a quadtree using the old d3.geom.quadtree method in D3.js version 3.x. This approach uses a quadtree generator function.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar quadtree = d3.geom.quadtree()\n    .extent([[0, 0], [width, height]])\n    (data);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Event Listeners in D3.js v4.0\nDESCRIPTION: Shows how to add listeners for multiple events simultaneously using the new dispatch.on method syntax in D3.js v4.0.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ndispatcher.on(\"foo bar\", function(message) {\n  console.log(message);\n});\n```\n\n----------------------------------------\n\nTITLE: D3 Format Prefix for Thousands\nDESCRIPTION: Demonstrates the new formatPrefix method for consistent SI-prefix formatting of numbers.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = d3.formatPrefix(\",.0\", 1e3);\nf(1e3); // \"1k\"\nf(1e4); // \"10k\"\nf(1e5); // \"100k\"\nf(1e6); // \"1,000k\"\n```\n\n----------------------------------------\n\nTITLE: Setting Y1 Accessor for D3 Area Generator in JavaScript\nDESCRIPTION: Sets the y1 accessor (topline y coordinate) for an area generator. This example maps the Close property of each data point to a y-coordinate, creating the top line of the area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/area.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().y1((d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Equivalent SelectChildren Transition Method in D3.js\nDESCRIPTION: Shows the equivalent method for transition.selectChildren() using selection and transition chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntransition\n  .selection()\n  .selectChildren(selector)\n  .transition(transition)\n```\n\n----------------------------------------\n\nTITLE: Format Numbers with Calculated Precision in D3.js\nDESCRIPTION: Example showing how to format numbers with precision calculated by precisionFixed based on step value 0.5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.precisionFixed(0.5);\nconst f = d3.format(\".\" + p + \"f\");\nf(1);   // \"1.0\"\nf(1.5); // \"1.5\"\nf(2);   // \"2.0\"\n```\n\n----------------------------------------\n\nTITLE: Default X Accessor Implementation\nDESCRIPTION: The default implementation of the x accessor function used by D3 line generators, which assumes data points are two-element arrays.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction x(d) {\n  return d[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Using interval.every method with d3.unixDay in JavaScript\nDESCRIPTION: Creates a filtered view of the unixDay interval representing every 3rd day. This method returns dates that are uniformly spaced regardless of month boundaries.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nd3.unixDay.every(3)\n```\n\n----------------------------------------\n\nTITLE: Setting the Range of a Quantize Scale in D3.js\nDESCRIPTION: Demonstrates how to set the range of an existing quantize scale. The range can be any array of values, not necessarily numbers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleQuantize();\ncolor.range(d3.schemeBlues[5]);\n```\n\n----------------------------------------\n\nTITLE: Setting Stack Order in D3\nDESCRIPTION: Shows how to configure the order of series in a D3 stack. The stack order determines how the layers are arranged vertically in the visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/stack.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst stack = d3.stack().order(d3.stackOrderNone);\n```\n\n----------------------------------------\n\nTITLE: D3 Integer Directive Formatting\nDESCRIPTION: Demonstrates D3's handling of non-integer values with various base formatting directives.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\"b\")(41.9); // \"101010\"\nd3.format(\"o\")(41.9); // \"52\"\nd3.format(\"d\")(41.9); // \"42\"\nd3.format(\"x\")(41.9); // \"2a\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Scale with Default Domain in D3.js\nDESCRIPTION: Creates a linear scale with only the range specified. When domain is not provided, it defaults to [0, 1].\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.scaleLinear([\"red\", \"blue\"]) // default domain of [0, 1]\n```\n\n----------------------------------------\n\nTITLE: Default Y-Coordinate Accessor in D3 Density Estimation\nDESCRIPTION: Default function for accessing y-coordinates from data points in D3's density estimation. Returns the second element of the data point array.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-contour/density.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y(d) {\n  return d[1];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Y Accessor for D3.js Link Generator\nDESCRIPTION: Demonstrates how to set a custom y-accessor function for a horizontal link generator that applies a scale function to the y property of the data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.linkHorizontal().y((d) => y(d.y));\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Symbol Type Accessor\nDESCRIPTION: Retrieves the current symbol type accessor function from a symbol generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsymbol.type() // () => d3.symbolCross\n```\n\n----------------------------------------\n\nTITLE: Creating a Prefix Format Function with d3.formatPrefix\nDESCRIPTION: This example demonstrates how to create a format function that uses SI prefixes based on a reference value, useful for formatting numbers in a consistent scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = d3.formatPrefix(\",.0\", 1e-6);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Canvas Context\nDESCRIPTION: Shows how to retrieve the currently configured canvas context from a line generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/line.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nline.context() // context\n```\n\n----------------------------------------\n\nTITLE: Setting Default Time Format Locale in D3.js\nDESCRIPTION: This snippet shows how to set a default time format locale using d3.timeFormatDefaultLocale(). It defines the same locale settings as the previous example but also redefines global D3 time formatting functions to use this locale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst enUs = d3.timeFormatDefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic Shuffle Function in D3.js\nDESCRIPTION: Shows how to create a deterministic shuffle function using d3.shuffler with a custom random number generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.shuffler(d3.randomLcg(42))([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) // [5, 3, 7, 6, 8, 9, 1, 4, 0, 2]\n```\n\n----------------------------------------\n\nTITLE: Styling D3 Brushes with CSS\nDESCRIPTION: CSS styling for D3 brush components that was previously required but is now applied by default as attributes in D3 v4. This stylesheet defines the appearance of the brush's extent element with white stroke, low opacity fill, and crisp edge rendering.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.brush .extent {\n  stroke: #fff;\n  fill-opacity: .125;\n  shape-rendering: crispEdges;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Element Order Example\nDESCRIPTION: Simple HTML structure showing a series of div elements that will be used to demonstrate element ordering in D3.js selections.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_50\n\nLANGUAGE: html\nCODE:\n```\n<div>a</div>\n<div>b</div>\n<div>f</div>\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Style Property Values with D3 Selection\nDESCRIPTION: Retrieves the current value of the \"color\" style property from the first non-null element in the selection, returning either the inline value or computed value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/modifying.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nselection.style(\"color\") // \"red\"\n```\n\n----------------------------------------\n\nTITLE: Default Touch Support Detector for D3 Drag Behavior\nDESCRIPTION: The default detector function that determines if touch event listeners should be registered, by checking browser touch capabilities.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction touchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Symbol Size with a Constant Value\nDESCRIPTION: Configures a symbol generator to use a fixed size of 100 square pixels.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = d3.symbol().size(100);\n```\n\n----------------------------------------\n\nTITLE: Using easeBounceOut in D3.js\nDESCRIPTION: Example of implementing the easeBounceOut function for reverse bounce easing effects. Creates an array with a single easing function for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n[{y: d3.easeBounceOut}]\n```\n\n----------------------------------------\n\nTITLE: Integer Formatting with precisionFixed in D3.js\nDESCRIPTION: Example showing how to format integers with precision calculated by precisionFixed based on step value 1.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.precisionFixed(1);\nconst f = d3.format(\".\" + p + \"f\");\nf(1); // \"1\"\nf(2); // \"2\"\nf(3); // \"3\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Target Accessor from D3.js Link Generator\nDESCRIPTION: Shows how to retrieve the current target accessor function from a link generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/link.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlink.target() // (d) => d[1]\n```\n\n----------------------------------------\n\nTITLE: Installing D3.js with Package Managers\nDESCRIPTION: These snippets show how to install D3.js using different JavaScript package managers (yarn, npm, and pnpm). They demonstrate the command syntax for adding D3 as a dependency to a Node.js project.\nSOURCE: https://github.com/d3/d3/blob/main/docs/getting-started.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add d3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install d3\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add d3\n```\n\n----------------------------------------\n\nTITLE: Range Rounding Alternative Method\nDESCRIPTION: Shows an alternative way to enable range rounding using separate method calls.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/point.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npoint.range(range).round(true)\n```\n\n----------------------------------------\n\nTITLE: Accessing Voronoi Neighbors in Vue.js Template\nDESCRIPTION: Shows how to access and display the neighbors of a Voronoi cell in a Vue.js template using reactive state.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/voronoi.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvoronoi.neighbors({{neighborsState.i}}) // [{{neighborsState.N.join(\", \")}}]\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for D3 Color Schemes\nDESCRIPTION: Initial setup code importing D3 and color-related Vue components for displaying color schemes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale-chromatic/diverging.md#2025-04-11_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n\nimport * as d3 from \"d3\";\nimport ColorRamp from \"../components/ColorRamp.vue\";\nimport ColorSwatches from \"../components/ColorSwatches.vue\";\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using pathRound Method to Limit Decimal Digits\nDESCRIPTION: Demonstrates the pathRound method which creates a path object that limits the number of digits after the decimal point, useful for reducing SVG path data size.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-path.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.pathRound(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Context for Symbol Generator\nDESCRIPTION: Configures a symbol generator to render to a 2D canvas context instead of returning path data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst symbol = d3.symbol().context(context);\n```\n\n----------------------------------------\n\nTITLE: Invoking Callbacks with Context and Arguments in JavaScript\nDESCRIPTION: Demonstrates how to call callbacks with a specific context object and additional arguments using the call() method of the dispatch object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch.call(\"start\", {about: \"I am a context object\"}, \"I am an argument\");\n```\n\n----------------------------------------\n\nTITLE: Significant Digit Formatting with Larger Steps in D3.js\nDESCRIPTION: Example showing how to format numbers with significant digits using precisionRound for larger step values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-format.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = d3.precisionRound(0.1, 1.1);\nconst f = d3.format(\".\" + p + \"r\");\nf(0.9); // \"0.90\"\nf(1.0); // \"1.0\"\nf(1.1); // \"1.1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing easeBounceIn in D3.js\nDESCRIPTION: Example of using the easeBounceIn function for bounce easing effects. Creates an array with a single bounce easing function for visualization.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-ease.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[{y: d3.easeBounceIn}]\n```\n\n----------------------------------------\n\nTITLE: Setting Aspect Ratio for Treemap Rectangles in D3\nDESCRIPTION: The squarify.ratio() method specifies the desired aspect ratio of rectangles generated in a treemap layout. The ratio must be a number greater than or equal to one, with the default being the golden ratio. This method serves as a hint to the tiling algorithm rather than a strict constraint.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsquarify.ratio(ratio)\n```\n\n----------------------------------------\n\nTITLE: Creating a bin generator with a value accessor in D3\nDESCRIPTION: Constructs a new D3 bin generator with a value accessor function that extracts the culmen_length_mm property from each data point.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/bin.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst bin = d3.bin().value((d) => d.culmen_length_mm);\n```\n\n----------------------------------------\n\nTITLE: Getting Symlog Scale Constant\nDESCRIPTION: Shows how to retrieve the current constant value from a symlog scale. Returns the previously set constant value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/symlog.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nx.constant() // 2\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Click Event in D3.js\nDESCRIPTION: Dispatches a synthetic click event to a paragraph element. This triggers any click event listeners attached to the element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-selection/events.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.select(\"p\").dispatch(\"click\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Ordinal Scale with Fill Symbols\nDESCRIPTION: Creates an ordinal scale that maps categories to symbol types designed for filling.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbolType = d3.scaleOrdinal(d3.symbolsFill);\n```\n\n----------------------------------------\n\nTITLE: Rendering Delaunay and Voronoi Visualizations with Plot\nDESCRIPTION: Configures a PlotRender component to display both a Delaunay triangulation and Voronoi diagram of the same point set. The visualization includes mesh lines for both structures and dots representing the original points.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay.md#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<PlotRender defer :options='{\n  axis: null,\n  width: 688,\n  height: 688,\n  x: {domain: [-4, 3.5]},\n  y: {domain: [-3, 3.5]},\n  marks: [\n    Plot.delaunayMesh(points, {stroke: \"currentColor\", strokeOpacity: 0.3}),\n    Plot.voronoiMesh(points, {stroke: \"var(--vp-c-brand)\", strokeOpacity: 1}),\n    Plot.dot(points, {r: 2, fill: \"currentColor\"}),\n  ]\n}' />\n```\n\n----------------------------------------\n\nTITLE: Creating a Geographic Path Generator for Canvas in JavaScript\nDESCRIPTION: Shows how to create a new geographic path generator with a specified projection and context for rendering on Canvas.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.geoPath(projection, context); // for canvas\n```\n\n----------------------------------------\n\nTITLE: Union Operation in D3.js - JavaScript\nDESCRIPTION: Shows the union operation that combines distinct values from all provided iterables into a new InternSet, maintaining order based on first occurrence.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sets.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.union([0, 2, 1, 0], [1, 3]) // Set {0, 2, 1, 3}\n```\n\n----------------------------------------\n\nTITLE: Default End Angle Accessor\nDESCRIPTION: Default function for accessing end angle in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction endAngle(d) {\n  return d.endAngle;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating rotation functions with geoRotation\nDESCRIPTION: Returns a rotation function for the given angles array [lambda, phi, gamma] specified in degrees that can transform coordinates according to those rotation angles.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/math.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngeoRotation(angles)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Decimal Precision from D3.js Arc Generator\nDESCRIPTION: Demonstrates how to get the current maximum fraction digits setting from a D3 arc generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\narc.digits() // 3\n```\n\n----------------------------------------\n\nTITLE: Converting Polar to Cartesian Coordinates with D3's pointRadial Function\nDESCRIPTION: Demonstrates the use of D3's pointRadial function to convert an angle and radius to Cartesian [x, y] coordinates. The angle is in radians with 0 at 12 o'clock and clockwise rotation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/symbol.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd3.pointRadial(Math.PI / 3, 100) // [86.60254037844386, -50]\n```\n\n----------------------------------------\n\nTITLE: Setting Point Radius for D3 Geographic Path Generator\nDESCRIPTION: Shows how to set the radius used to display Point and MultiPoint geometries in the path generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = d3.geoPath().pointRadius(10);\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in Cubehelix color space with long path\nDESCRIPTION: Similar to interpolateCubehelix but does not use the shortest path between hues, instead taking the long path around the color wheel.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateCubehelixLong(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Diverging Scale with Default Parameters in D3.js\nDESCRIPTION: Creates a diverging scale with both default domain [0, 0.5, 1] and default identity interpolator function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst identity = d3.scaleDiverging();\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Force with Node ID Accessor in D3.js\nDESCRIPTION: Creates a new link force with links array and configures an ID accessor function to identify nodes by their id property.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/link.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = d3.forceLink(links).id((d) => d.id);\n```\n\n----------------------------------------\n\nTITLE: D3 String Padding Formatting\nDESCRIPTION: Shows how to use D3's character formatting for string padding and alignment.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nd3.format(\">10c\")(\"foo\"); // \"       foo\"\nd3.format(\"^10c\")(\"foo\"); // \"   foo    \"\nd3.format(\"<10c\")(\"foo\"); // \"foo       \"\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Scale in D3.js\nDESCRIPTION: Demonstrates creating a time scale in D3.js that maps date/time values to a range, useful for time-based visualizations.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar time = d3.scaleTime()\n    .domain([new Date(2000, 0, 1), new Date(2000, 0, 2)])\n    .range([0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Points and Voronoi State in Vue.js\nDESCRIPTION: Sets up random points using D3's random normal distribution and initializes a reactive state for Voronoi neighbors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-delaunay/voronoi.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst random = d3.randomNormal.source(d3.randomLcg(42))();\nconst points = Array.from({length: 1000}, () => [random(), random()]);\nconst neighborsState = shallowRef({i: -1, N: []});\n```\n\n----------------------------------------\n\nTITLE: Setting the Range of a Threshold Scale in D3.js\nDESCRIPTION: Demonstrates how to set the range of an existing threshold scale. If there are n values in the domain, there must be n+1 values in the range.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleThreshold().range([\"red\", \"white\", \"green\"]);\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in Cubehelix color space with long path and gamma adjustment\nDESCRIPTION: Cubehelix interpolator that uses the long path between hues and applies a gamma adjustment of 3 to the interpolation space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateCubehelixLong.gamma(3)(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Wheel Delta Calculation in JavaScript\nDESCRIPTION: Default implementation of the wheel delta function. It calculates the scaling factor based on the wheel event properties.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction wheelDelta(event) {\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);\n}\n```\n\n----------------------------------------\n\nTITLE: D3 Number Formatting with Precision\nDESCRIPTION: Shows how to use D3's number formatting with specific precision to trim insignificant trailing zeros.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar f = d3.format(\".3\");\nf(0.12345);   // \"0.123\"\nf(0.10000);   // \"0.1\"\nf(0.1 + 0.2); // \"0.3\"\n```\n\n----------------------------------------\n\nTITLE: Creating Gray CIELAB Color in D3 JavaScript\nDESCRIPTION: Constructs a new gray CIELAB color using d3.gray() function with specified lightness value.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nd3.gray(50) // {l: 50, a: 0, b: 0, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Domain of a Quantize Scale in D3.js\nDESCRIPTION: Shows how to get the current domain of a quantize scale using the domain method with no arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.domain() // [0, 100]\n```\n\n----------------------------------------\n\nTITLE: Default Pad Angle Function\nDESCRIPTION: The default pad angle accessor function that returns zero, resulting in no padding between arcs.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/pie.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction padAngle() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using piecewise with Default Interpolator in JavaScript\nDESCRIPTION: Demonstrates the simplified syntax of d3.piecewise when using the default interpolate function. This creates a piecewise interpolator between the provided color values.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/value.md#2025-04-11_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nd3.piecewise([\"red\", \"green\", \"blue\"])\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Opacity in D3.js\nDESCRIPTION: Shows how to access the opacity property of a color object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd3.color(\"steelblue\").opacity // 1\n```\n\n----------------------------------------\n\nTITLE: D3 Time Day Count Example\nDESCRIPTION: Shows the correct way to count days between dates using d3.timeDay.count() method.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd3.timeDay.count(start, end) // 31 😌\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Range of a Quantize Scale in D3.js\nDESCRIPTION: Shows how to get the current range of a quantize scale using the range method with no arguments.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/quantize.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.range() // [\"#eff3ff\", \"#bdd7e7\", \"#6baed6\", \"#3182bd\", \"#08519c\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving values from InternMap using Date keys in D3\nDESCRIPTION: Demonstrates retrieving a value from an InternMap using a Date key. Even though the Date object is newly created, it can successfully look up values because InternMap compares by value rather than reference.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvalueByDate.get(new Date(\"2022-01-01\")) // 12\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized Elastic Easing Function in D3.js v4\nDESCRIPTION: Demonstrates how to create a parameterized elastic easing function in D3.js v4 using the new method-based approach with named parameters instead of the string-based configuration used in D3.js v3.x.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar e = d3.easeElastic.amplitude(1.2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Rainbow Style Interpolator with D3.js\nDESCRIPTION: Example showing how to create a custom HSL-based rainbow color interpolator for styles using styleTween. This function returns an interpolator that generates HSL colors based on the transition progress.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.styleTween(\"fill\", () => (t) => `hsl(${t * 360},100%,50%)`);\n```\n\n----------------------------------------\n\nTITLE: Understanding Interpolator Creation in D3.js Linear Scales\nDESCRIPTION: Explains how multiple interpolators are created internally by the scale based on adjacent values in the range, showing the equivalent manual creation of these interpolators.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst i0 = d3.interpolate(\"red\", \"white\");\nconst i1 = d3.interpolate(\"white\", \"green\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Fractional Digits Setting in D3 Path Generator\nDESCRIPTION: Demonstrates how to retrieve the current number of fractional digits set for the path generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npath.digits() // 3\n```\n\n----------------------------------------\n\nTITLE: Invoking Callbacks with Dispatch in JavaScript\nDESCRIPTION: Illustrates how to call all registered callbacks for a specific event type using the call() method of the dispatch object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dispatch.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndispatch.call(\"start\");\n```\n\n----------------------------------------\n\nTITLE: D3.js 4.0 Time Format Parser Definition\nDESCRIPTION: Example of how to define a time parser in D3.js 4.0 using the new dedicated parser constructor. This replaces the format.parse method from version 3.x with a cleaner syntax.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nvar parseTime = d3.timeParse(\"%c\");\n```\n\n----------------------------------------\n\nTITLE: Defining Data Point Validity\nDESCRIPTION: Sets a function to determine which data points should be included in the area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial().defined((d) => !isNaN(d.temperature));\n```\n\n----------------------------------------\n\nTITLE: Setting a Diverging Scale's Range in D3.js\nDESCRIPTION: Sets the range of a diverging scale using a three-element array, which is converted to an interpolator function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/diverging.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleDiverging().range([\"blue\", \"white\", \"red\"]);\n```\n\n----------------------------------------\n\nTITLE: Default Target Accessor\nDESCRIPTION: Default function for accessing target data in ribbon generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction target(d) {\n  return d.target;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sqrt Scale in D3.js\nDESCRIPTION: Demonstrates creating a square root scale in D3.js, which is a convenience method for a power scale with exponent 0.5.\nSOURCE: https://github.com/d3/d3/blob/main/docs/index.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sqrt = d3.scaleSqrt().domain([1, 4]).range([0, 200]);\n```\n\n----------------------------------------\n\nTITLE: Creating Cubehelix Color in D3 JavaScript\nDESCRIPTION: Constructs a new Cubehelix color using d3.cubehelix() function. The example shows creating a yellow color in Cubehelix space.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-color.md#2025-04-11_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nd3.cubehelix(\"yellow\") // {h: 56.942171677321085, s: 4.614386868039714, l: 0.8900004504279901, opacity: 1}\n```\n\n----------------------------------------\n\nTITLE: Setting Outer Radius\nDESCRIPTION: Configures the outer radius accessor for the radial area.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial().radius((d) => r(d.high));\n```\n\n----------------------------------------\n\nTITLE: Interpolating between colors in HSL color space with long path using d3.interpolateHslLong\nDESCRIPTION: Similar to interpolateHsl but does not use the shortest path between hues, instead taking the long path around the color wheel.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateHslLong(\"purple\", \"orange\")\n```\n\n----------------------------------------\n\nTITLE: Getting the Range of a Threshold Scale in D3.js\nDESCRIPTION: Shows how to retrieve the current range of a threshold scale.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/threshold.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncolor.range() // [\"red\", \"white\", \"green\"]\n```\n\n----------------------------------------\n\nTITLE: Formatting CSV Body without Header Row\nDESCRIPTION: Formats the body of a CSV file without the header row. Useful when appending data to an existing CSV file that already has headers.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-dsv.md#2025-04-11_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nd3.csvFormatBody([{foo: \"1\", bar: \"2\"}]) // \"1,2\"\n```\n\nLANGUAGE: js\nCODE:\n```\nd3.csvFormatBody([{foo: \"1\", bar: \"2\"}], [\"foo\"]) // \"1\"\n```\n\n----------------------------------------\n\nTITLE: Radial Separation Function for Tree Layout\nDESCRIPTION: A variation of the separation function that's more appropriate for radial layouts, reducing the separation gap proportionally to the node depth.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/tree.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction separation(a, b) {\n  return (a.parent == b.parent ? 1 : 2) / a.depth;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radius Accessor\nDESCRIPTION: Sets the radius accessor function that determines the distance from origin.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.areaRadial().radius((d) => r(d.temperature));\n```\n\n----------------------------------------\n\nTITLE: Removing D3 Drag Behavior from a Selection\nDESCRIPTION: Shows how to unbind a drag behavior from a selection by setting the '.drag' namespace event listeners to null.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-drag.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselection.on(\".drag\", null);\n```\n\n----------------------------------------\n\nTITLE: Equivalent Merge Transition Method in D3.js\nDESCRIPTION: Shows the equivalent method for transition.merge() using selection and transition chaining.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/selecting.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntransition\n  .selection()\n  .merge(other.selection())\n  .transition(transition)\n```\n\n----------------------------------------\n\nTITLE: Default Filter Function for D3.js Brushes\nDESCRIPTION: The default implementation of the filter function used by d3-brush. It ignores mousedown events with the control key pressed or from secondary mouse buttons.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-brush.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction filter(event) {\n  return !event.ctrlKey && !event.button;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Data in D3 Quadtree Leaf Node\nDESCRIPTION: Shows how to iterate over all data points in a leaf node of a D3 quadtree. This snippet demonstrates how to distinguish between leaf and internal nodes and access the data within a leaf node.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (!node.length) do console.log(node.data); while (node = node.next);\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Context\nDESCRIPTION: Configures the rendering context for canvas-based rendering.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-area.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst area = d3.areaRadial().context(context);\n```\n\n----------------------------------------\n\nTITLE: Removing Data from D3 Quadtree\nDESCRIPTION: Shows how to remove single data points or multiple data points from a quadtree, using the current x and y accessors.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-quadtree.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntree.remove(data[0]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntree.removeAll(data);\n```\n\n----------------------------------------\n\nTITLE: Using the slice tiling method in D3 treemap\nDESCRIPTION: A tiling method that divides the rectangular area vertically according to each child node's value. Children are positioned in order from top to bottom.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/treemap.md#2025-04-11_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ntreemapSlice(*node*, *x0*, *y0*, *x1*, *y1*)\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Event Filter in JavaScript\nDESCRIPTION: Default implementation of the zoom event filter. It ignores mousedown events on secondary buttons and allows wheel events without the ctrl key.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-zoom.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction filter(event) {\n  return (!event.ctrlKey || event.type === 'wheel') && !event.button;\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Fill Attribute from Current Color to Blue in D3.js\nDESCRIPTION: Example demonstrating how to use attrTween to interpolate from the current fill color to blue. This accesses the current attribute value using this.getAttribute() before creating the interpolator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/modifying.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.attrTween(\"fill\", function() {\n  return d3.interpolateRgb(this.getAttribute(\"fill\"), \"blue\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Rendering Context for D3.js Radial Line Generator\nDESCRIPTION: Configures the rendering context for the radial line generator, allowing it to render directly to a canvas element.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/radial-line.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = canvas.getContext(\"2d\");\nconst line = d3.lineRadial().context(context);\n```\n\n----------------------------------------\n\nTITLE: Checking membership in InternSet using Date values in D3\nDESCRIPTION: Demonstrates checking if a date exists in an InternSet. Even though the Date object is newly created, the membership test works because InternSet compares dates by value rather than by reference.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/intern.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndates.has(new Date(\"2022-01-01\")) // true\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Async/Await in D3 v5\nDESCRIPTION: This snippet illustrates how to load a CSV file using the async/await syntax in D3 version 5, showing the most concise way to handle asynchronous data loading.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await d3.csv(\"file.csv\");\nconsole.log(data);\n```\n\n----------------------------------------\n\nTITLE: Getting Band Step Size in D3 Scale\nDESCRIPTION: Returns the distance between the starts of adjacent bands in a band scale. This includes both the band width and any padding between bands.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/band.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nx.step() // 63.529411764705884\n```\n\n----------------------------------------\n\nTITLE: Setting Unknown Value Handling in D3 Linear Scale\nDESCRIPTION: Configures how the scale handles undefined or NaN input values by setting a specific output value for these cases.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-scale/linear.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear([0, 100], [\"red\", \"blue\"]).unknown(\"#ccc\");\ncolor(NaN); // \"#ccc\"\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Duration in D3\nDESCRIPTION: Sets the transition duration to 750 milliseconds for all selected elements. The duration can be specified as a constant or a function.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-transition/timing.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.duration(750);\n```\n\n----------------------------------------\n\nTITLE: Object Interpolation Behavior in D3.js v3.x\nDESCRIPTION: Example showing how d3.interpolateObject behaved in D3.js version 3.x, where properties in the start value that don't exist in the end value were preserved during interpolation.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateObject({foo: 2, bar: 1}, {foo: 3})(0.5); // {bar: 1, foo: 2.5} in 3.x\n```\n\n----------------------------------------\n\nTITLE: Computing Bounding Box for a Geographic Feature in D3\nDESCRIPTION: Illustrates the use of path.bounds() to compute the projected planar bounding box for a GeoJSON object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-geo/path.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npath.bounds(california) // [[18.48513821663947, 159.95146883594333], [162.7651668852596, 407.09641570706725]]\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array using D3.js\nDESCRIPTION: Demonstrates the use of d3.shuffle to randomize the order of elements in an array using the Fisher–Yates shuffle algorithm.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-array/sort.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.shuffle([...\"abcdefg\"]) // [\"e\", \"c\", \"a\", \"d\", \"b\", \"g\", \"f\"], perhaps\n```\n\n----------------------------------------\n\nTITLE: Using D3 isoParse Method\nDESCRIPTION: Shows how to use d3.isoParse to parse an ISO 8601 formatted date string into a Date object.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-time-format.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.isoParse(\"2023-05-31T18:17:36.788Z\")\n```\n\n----------------------------------------\n\nTITLE: Interpolating between two hue angles using d3.interpolateHue\nDESCRIPTION: Creates an interpolator between two hue angles, using the shortest path between them. Returns a number in the range [0, 360).\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-interpolate/color.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nd3.interpolateHue(20, 340)(0.5) // 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arc Pad Angle in D3.js\nDESCRIPTION: Shows how to get the current pad angle accessor function from a D3 arc generator.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape/arc.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\narc.padAngle() // () => 0\n```\n\n----------------------------------------\n\nTITLE: Default X-Coordinate Accessor for X Force in D3\nDESCRIPTION: Defines the default x-coordinate accessor function for the x-axis force. This function returns a constant value of 0, setting the default target x-position for nodes.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-force/position.md#2025-04-11_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction x() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering D3 Line to Canvas Context\nDESCRIPTION: Demonstrates how to render a line generated by D3 to a Canvas 2D context. This approach sets the context for the line generator and then immediately calls it with data.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-shape.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nline.context(context)(data);\n```\n\n----------------------------------------\n\nTITLE: D3.js v4.0 Element Ordering Example\nDESCRIPTION: Code demonstrating how D3.js v4.0 preserves the relative order of elements when inserting new elements during a data join operation.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar div = d3.select(\"body\").selectAll(\"div\")\n  .data([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], function(d) { return d || this.textContent; });\n\ndiv.enter().append(\"div\")\n    .text(function(d) { return d; });\n```\n\n----------------------------------------\n\nTITLE: Setting Padding for Pack Layout in D3\nDESCRIPTION: Sets or gets the padding accessor for the pack layout. Padding determines the space between tangent sibling circles and between parent and child circles. Default is zero.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-hierarchy/pack.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n*pack*.padding(*padding*)\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Ribbon Radius\nDESCRIPTION: Example of setting a fixed radius for ribbon generation.\nSOURCE: https://github.com/d3/d3/blob/main/docs/d3-chord/ribbon.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ribbon = d3.ribbon().radius(240);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nribbon({\n  source: {startAngle: 0.7524114, endAngle: 1.1212972},\n  target: {startAngle: 1.8617078, endAngle: 1.9842927}\n})\n```\n\n----------------------------------------\n\nTITLE: Including D3 Selection Module Standalone\nDESCRIPTION: This HTML snippet shows how to include only the D3 selection module as a standalone library, demonstrating D3's modularity in version 4.\nSOURCE: https://github.com/d3/d3/blob/main/CHANGES.md#2025-04-11_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://d3js.org/d3-selection.v1.js\"></script>\n```"
  }
]