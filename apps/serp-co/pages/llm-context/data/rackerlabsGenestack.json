[
  {
    "owner": "rackerlabs",
    "repo": "genestack",
    "content": "TITLE: Running Genestack Bootstrap Script in Shell\nDESCRIPTION: Command to run the bootstrap script which installs ansible, ansible collection, and helm to set up Kubernetes and OpenStack Helm. The script is located in the root of the Genestack repository.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/opt/genestack/bootstrap.sh\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl on Linux\nDESCRIPTION: Downloads and installs the kubectl command-line tool for Kubernetes from the official repository. This script automatically selects the latest stable version and configures it with appropriate permissions in the system path.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Scoped Token in OpenStack CLI\nDESCRIPTION: This command issues a scoped token associated with a specific project. It requires authentication URL, username, password, user domain name, project domain name, and project name as parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-getting-started-cli.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack token issue --os-auth-url ${AUTH_URL} \\\n                      --os-username ${USERNAME} \\\n                      --os-password ${PASSWORD} \\\n                      --os-user-domain-name ${DOMAIN_NAME} \\\n                      --os-project-domain-name ${DOMAIN_NAME} \\\n                      --os-project-name ${PROJECT_NAME}\n```\n\n----------------------------------------\n\nTITLE: Example: Creating and Configuring OpenStack Router with Subnets\nDESCRIPTION: A practical example showing the complete workflow to create a router, attach a subnet, and set up external gateway connectivity using PUBLICNET for outbound network access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router create {router_name}\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add subnet {router_name} {subnet_name}\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router set --external-gateway PUBLICNET {router_name}\n```\n\n----------------------------------------\n\nTITLE: Provisioning a Kubernetes Cluster with High Availability\nDESCRIPTION: Creates a Kubernetes cluster with 3 master nodes for high availability and 4 worker nodes. Includes specific version labels for components like containerd, cloud provider, and auto-healing capabilities using the magnum-auto-healer controller.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack coe cluster create new-k8s-cluster \\\n          --cluster-template new-cluster-template \\\n          --master-count 3 \\\n          --node-count 4 \\\n          --keypair mykey \\\n          --labels kube_tag=v1.27.8-rancher2,container_runtime=containerd,containerd_version=1.6.28,containerd_tarball_sha256=f70736e52d61e5ad225f4fd21643b5ca1220013ab8b6c380434caeefb572da9b,cloud_provider_tag=v1.27.3,cinder_csi_plugin_tag=v1.27.3,k8s_keystone_auth_tag=v1.27.3,magnum_auto_healer_tag=v1.27.3,octavia_ingress_controller_tag=v1.27.3,calico_tag=v3.26.4,auto_healing_enabled=True,auto_healing_controller=magnum-auto-healer\n```\n\n----------------------------------------\n\nTITLE: Creating New OpenStack Server\nDESCRIPTION: Command to create a new OpenStack server with various configuration options including image, flavor, security group, and networking settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-servers.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create\n    (--image <image> | --volume <volume>)\n    --flavor <flavor>\n    [--security-group <security-group>]\n    [--key-name <key-name>]\n    [--property <key=value>]\n    [--file <dest-filename=source-filename>]\n    [--user-data <user-data>]\n    [--availability-zone <zone-name>]\n    [--block-device-mapping <dev-name=mapping>]\n    [--nic <net-id=net-uuid,v4-fixed-ip=ip-addr,v6-fixed-ip=ip-addr,port-id=port-uuid,auto,none>]\n    [--network <network>]\n    [--port <port>]\n    [--hint <key=value>]\n    [--config-drive <config-drive-volume>|True]\n    [--min <count>]\n    [--max <count>]\n    [--wait]\n    <server-name>\n```\n\n----------------------------------------\n\nTITLE: Executing Placement Installation Script in OpenStack\nDESCRIPTION: This shows how to run the Placement deployment script located at bin/install-placement.sh. The script is part of the Genestack project for deploying OpenStack Placement service.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-placement.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-placement.sh\"\n```\n\n----------------------------------------\n\nTITLE: Adding External Gateway to Router in OpenStack\nDESCRIPTION: This command adds an external Internet gateway to the previously created router. It uses 'PUBLICNET' as the name of the public Internet network, which should be replaced with the appropriate name or ID for your installation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router set --external-gateway PUBLICNET tester-router\n```\n\n----------------------------------------\n\nTITLE: Creating Placement Secrets in Kubernetes for OpenStack\nDESCRIPTION: Creates Kubernetes secrets for the Placement service, including database password and admin credentials. These secrets contain randomly generated passwords for secure authentication.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-secrets.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic placement-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic placement-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Example Floating IP Assignment Workflow\nDESCRIPTION: Complete example showing the process of creating and assigning a floating IP to a server.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip create PUBLICNET\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server list\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server add floating ip $UUID $VIP\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenStack Network with CLI\nDESCRIPTION: Command to create a new OpenStack network with various configuration options including sharing settings, project assignment, MTU configuration, and provider network parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} network create\n    [--extra-property type=<property_type>,name=<property_name>,value=<property_value>]\n    [--share | --no-share]\n    [--enable | --disable]\n    [--project <project>]\n    [--description <description>]\n    [--mtu <mtu>]\n    [--project-domain <project-domain>]\n    [--availability-zone-hint <availability-zone>]\n    [--enable-port-security | --disable-port-security]\n    [--external | --internal]\n    [--default | --no-default]\n    [--qos-policy <qos-policy>]\n    [--transparent-vlan | --no-transparent-vlan]\n    [--provider-network-type <provider-network-type>]\n    [--provider-physical-network <provider-physical-network>]\n    [--provider-segment <provider-segment>]\n    [--dns-domain <dns-domain>]\n    [--tag <tag> | --no-tag]\n    --subnet <subnet>\n    <name>\n```\n\n----------------------------------------\n\nTITLE: Running Barbican Deployment Script in Shell\nDESCRIPTION: Shell command referencing the Barbican installation script. The script is used to deploy and configure the Barbican service in the OpenStack environment managed by Genestack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-barbican.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-barbican.sh\"\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenStack Images with CLI\nDESCRIPTION: This command deletes one or more OpenStack images. It requires the cloud name and at least one image identifier. Multiple images can be deleted in a single command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-images.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image delete <image> [<image> ...]\n```\n\n----------------------------------------\n\nTITLE: Creating MariaDB Secret in Kubernetes\nDESCRIPTION: Generates a Kubernetes secret containing random passwords for MariaDB root and user accounts using urandom for secure password generation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic mariadb \\\n        --type Opaque \\\n        --from-literal=root-password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: OpenStack Cloud Configuration with Multi-factor Authentication\nDESCRIPTION: Example YAML configuration for OpenStack cloud access using multi-factor authentication. Includes both MFA and token-based authentication configurations for improved user experience.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclouds:\n  regionone-mfa:\n    auth_type: \"v3multifactor\"\n    auth_methods:\n      - v3password\n      - v3totp\n    auth:\n      auth_url: https://$YOUR_KEYSTONE_HOST/v3\n      project_name: $PROJECT_NAME\n      project_domain_name: $PROJECT_DOMAIN_NAME\n      username: $USERNAME\n      password: $PASSWORD_OR_APIKEY\n      user_domain_name: $PROJECT_DOMAIN_NAME\n    region_name:\n      - RegionOne\n    interface: public\n    identity_api_version: \"3\"\n  regionone-token:\n    auth_type: \"v3token\"\n    auth:\n      auth_url: https://$YOUR_KEYSTONE_HOST/v3\n      project_name: $PROJECT_NAME\n      project_domain_name: $PROJECT_DOMAIN_NAME\n    region_name:\n      - RegionOne\n    interface: public\n    identity_api_version: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Checking Longhorn Node Status\nDESCRIPTION: Command to verify Longhorn node recognition and management status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n longhorn-system get nodes.longhorn.io\n```\n\n----------------------------------------\n\nTITLE: Complete OpenStack Server Setup Example\nDESCRIPTION: Comprehensive example showing network creation, subnet configuration, router setup, and server creation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-servers.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} network create my_network\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} subnet create --ip-version 4 \\\n                                          --subnet-range $CIDR \\\n                                          --network $NETWORK_NAME \\\n                                          $CIDR\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router create my_router\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add subnet my_router my_dmz_subnet\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router set --external-gateway PUBLICNET my_router\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image list\nopenstack --os-cloud={cloud name} flavor list\nopenstack --os-cloud={cloud name} network list\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create --flavor $FLAVOR_NAME \\\n                                          --image $IMAGE_NAME \\\n                                          --boot-from-volume 25 \\\n                                          --network $NETWORK_NAME \\\n                                          my_first_server\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager for Slack Notifications in YAML\nDESCRIPTION: This YAML configuration sets up Alertmanager to send alerts to Slack. It defines global settings, receivers including a Slack webhook, and routing rules based on alert severity. The Slack configuration includes customizable message formatting using alert annotations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/alertmanager-slack.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n  alertmanagerSpec:\n    image:\n      repository: docker.io/prom/alertmanager:v0.20.0\n  config:\n    global:\n      resolve_timeout: 5m\n    receivers:\n    - name: default-receiver\n    - name: watchman-webhook\n    - name: warning-alert-manager-handler\n      slack_configs:\n      - api_url: https://hooks.slack.com/services/<slackwebhookhere>\n        channel: '#<slack-channel here>'\n        send_resolved: true\n        text: >\n          {{- if .CommonAnnotations.summary -}}\n            *Summary*: {{- .CommonAnnotations.summary -}}{{- \"\\n\" -}}\n          {{- else if .CommonAnnotations.description -}}\n            *Description*: {{- .CommonAnnotations.description -}}{{- \"\\n\" -}}\n          {{- else if .CommonAnnotations.message -}}\n            *Message*: {{- .CommonAnnotations.message -}}{{- \"\\n\" -}}\n          {{- end -}}\n          *Cluster*: {{ .GroupLabels.cluster }}\n          *Wiki*: https://desired.wiki.page/{{ .GroupLabels.alertname }}\n    route:\n      group_by:\n      - alertname\n      - severity\n      - cluster\n      - region\n      group_interval: 5m\n      group_wait: 10s\n      receiver: watchman-webhook\n      repeat_interval: 12h\n      routes:\n      - match_re:\n          severity: critical\n        receiver: warning-alert-manager-handler\n```\n\n----------------------------------------\n\nTITLE: Listing Flavors with Scoped Token in OpenStack CLI\nDESCRIPTION: This command uses a scoped token to list all available flavors for a project. It requires the same authentication parameters as the token issue command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-getting-started-cli.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack flavor list --os-auth-url ${AUTH_URL} \\\n                      --os-username ${USERNAME} \\\n                      --os-password ${PASSWORD} \\\n                      --os-user-domain-name ${DOMAIN_NAME} \\\n                      --os-project-domain-name ${DOMAIN_NAME} \\\n                      --os-project-name ${PROJECT_NAME}\n```\n\n----------------------------------------\n\nTITLE: Kubespray Cluster Deployment\nDESCRIPTION: Commands to execute the Kubespray cluster deployment playbook from the correct directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd /opt/genestack/submodules/kubespray\nansible-playbook cluster.yml --become\n```\n\n----------------------------------------\n\nTITLE: Monitoring MariaDB Cluster Status\nDESCRIPTION: Watches the status of MariaDB clusters in the OpenStack namespace to verify successful deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack get mariadbs -w\n```\n\n----------------------------------------\n\nTITLE: Setting OpenStack Router Properties\nDESCRIPTION: Command to modify existing router configuration including name, description, routes, high availability settings, gateway connections, and various routing options.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router set\n    [--extra-property type=<property_type>,name=<property_name>,value=<property_value>]\n    [--name <name>]\n    [--description <description>]\n    [--enable | --disable]\n    [--distributed | --centralized]\n    [--route destination=<subnet>,gateway=<ip-address>]\n    [--no-route]\n    [--ha | --no-ha]\n    [--external-gateway <network>]\n    [--fixed-ip subnet=<subnet>,ip-address=<ip-address>]\n    [--enable-snat | --disable-snat]\n    [--enable-ndp-proxy | --disable-ndp-proxy]\n    [--qos-policy <qos-policy> | --no-qos-policy]\n    [--tag <tag>]\n    [--no-tag]\n    [--enable-default-route-bfd]\n    [--disable-default-route-bfd]\n    [--enable-default-route-ecmp]\n    [--disable-default-route-ecmp]\n    <router>\n```\n\n----------------------------------------\n\nTITLE: Verifying Gnocchi Metric List Functionality\nDESCRIPTION: Shell command to execute the 'openstack metric list' command within the openstack-admin-client pod. This verifies that the Gnocchi metric listing functionality is working correctly.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it openstack-admin-client -n openstack -- openstack metric list --debug\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Keypair\nDESCRIPTION: Command to create a new keypair in OpenStack with options for specifying public or private key files and keypair type.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keypairs.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} keypair create\n    [--public-key <file> | --private-key <file>]\n    [--type <type>]\n    [--user <user>]\n    [--user-domain <user-domain>]\n    <name>\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Memcached Secret for OpenStack Services\nDESCRIPTION: Command to generate a random 32-character secret key and store it in a Kubernetes secret named 'os-memcached'. This secret is shared among all services that require access to memcached.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-memcached.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic os-memcached \\\n        --type Opaque \\\n        --from-literal=memcache_secret_key=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Generating OpenStack Cloud Config from Kubernetes Cluster\nDESCRIPTION: Creates a clouds.yaml configuration file using Kubernetes secrets from an OpenStack deployment. This extracts authentication details from Kubernetes secrets in the openstack namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncat >  ~/.config/openstack/clouds.yaml <<EOF\ncache:\n  auth: true\n  expiration_time: 3600\nclouds:\n  default:\n    auth:\n      auth_url: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_AUTH_URL}' | base64 -d)\n      project_name: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_PROJECT_NAME}' | base64 -d)\n      tenant_name: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_USER_DOMAIN_NAME}' | base64 -d)\n      project_domain_name: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_PROJECT_DOMAIN_NAME}' | base64 -d)\n      username: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_USERNAME}' | base64 -d)\n      password: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_PASSWORD}' | base64 -d)\n      user_domain_name: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_USER_DOMAIN_NAME}' | base64 -d)\n    region_name: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_REGION_NAME}' | base64 -d)\n    interface: $(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_INTERFACE}' | base64 -d)\n    identity_api_version: \"3\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Versioned Objects in Swift\nDESCRIPTION: Demonstrates how to create and retrieve versioned objects in Swift using cURL commands. It shows the process of creating multiple versions of an object and listing older versions in the archive container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current/my_object --data-binary 1 -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current/my_object --data-binary 2 -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/archive?prefix=009my_object -X GET -H \"X-Auth-Token: $token\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Admin User Token for Dashboard Access\nDESCRIPTION: Retrieves a permanent access token for the admin-user from the kube-system namespace. This token is required to log into the Kubernetes Dashboard.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-dashboard.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret admin-user -n kube-system -o jsonpath={\".data.token\"} | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl-ko plugin for OVN network operations\nDESCRIPTION: Downloads and installs the kubectl-ko plugin used for OVN network operations and troubleshooting. This plugin enables administrators to check OVN database information, perform backups and restores, view network topology, and diagnose network issues.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-tools.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -LO https://raw.githubusercontent.com/kubeovn/kube-ovn/release-1.12/dist/images/kubectl-ko\nsudo install -o root -g root -m 0755 kubectl-ko /usr/local/bin/kubectl-ko\n```\n\n----------------------------------------\n\nTITLE: Creating VLAN Subnet in OpenStack\nDESCRIPTION: This command creates a subnet for the VLAN network. It sets the IP range, gateway, DNS, and allocation pool. It also specifies service types to limit Neutron's ability to attach IPs directly to instances.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-neutron-networks.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default subnet create --subnet-range 10.10.10.0/23 \\\n                                           --gateway 10.10.10.1 \\\n                                           --dns-nameserver 10.10.10.1 \\\n                                           --allocation-pool start=10.10.11.10,end=10.10.11.254 \\\n                                           --dhcp \\\n                                           --network vlan404 \\\n                                           --service-type network:floatingip \\\n                                           --service-type network:router_gateway \\\n                                           --service-type network:distributed \\\n                                           vlan404_subnet\n```\n\n----------------------------------------\n\nTITLE: Updating Genestack Git Repository\nDESCRIPTION: Fetches the latest code from the origin remote and rebases the local branch on top of the main branch. This ensures the local codebase is up-to-date with the latest changes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch origin\ngit rebase origin/main\n```\n\n----------------------------------------\n\nTITLE: Removing a Volume from a Server in Openstack\nDESCRIPTION: This command removes a volume from a server in Openstack. It requires specifying both the server and the volume to be detached.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server remove volume <server> <volume>\n```\n\n----------------------------------------\n\nTITLE: Creating Neutron Secrets in Kubernetes for OpenStack\nDESCRIPTION: Creates Kubernetes secrets for the Neutron service, including RabbitMQ credentials, database password, and admin credentials. These secrets contain randomly generated passwords for secure authentication.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-secrets.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic neutron-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"neutron\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic neutron-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic neutron-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cinder Secrets in Kubernetes\nDESCRIPTION: Script for generating required Kubernetes secrets for Cinder deployment, including RabbitMQ credentials, database password, and admin credentials. Each secret uses random password generation for security.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic cinder-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"cinder\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic cinder-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic cinder-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Importing External Ceph Cluster to Kubernetes\nDESCRIPTION: Series of commands to apply Rook operator, import the external cluster, add Helm repo, update Rook operator image, and install Rook Ceph cluster chart. This process integrates the external Ceph cluster with the Kubernetes environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-external.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-operator/\n/opt/genestack/scripts/import-external-cluster.sh\nhelm repo add rook-release https://charts.rook.io/release\nkubectl -n rook-ceph set image deploy/rook-ceph-operator rook-ceph-operator=rook/ceph:v1.13.7\nwget https://raw.githubusercontent.com/rook/rook/refs/tags/v1.16.5/deploy/charts/rook-ceph-cluster/values-external.yaml -O /etc/genestack/helm-configs/rook-values-external.yaml\nhelm install --create-namespace --namespace rook-ceph-external rook-ceph-cluster --set operatorNamespace=rook-ceph rook-release/rook-ceph-cluster -f /etc/genestack/helm-configs/rook-values-external.yaml\nkubectl patch storageclass general -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Viewing Quota Limits Using OpenStack CLI\nDESCRIPTION: Command to display all quota limits for the current project using the OpenStack CLI. This shows the maximum resources allocated to your project but doesn't show current usage.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-quota.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack quota show\n```\n\n----------------------------------------\n\nTITLE: Disassociating QoS Policy from Volume Type in OpenStack\nDESCRIPTION: This snippet shows how to disassociate a QoS policy from a volume type and then display the updated volume type details using the OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume qos disassociate --volume-type 1bdb5364-ed04-4bbe-8e41-9c5fae148c3d 9435160f-0e4a-4486-88b0-d6beb022732a\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type show 1bdb5364-ed04-4bbe-8e41-9c5fae148c3d\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster Template With Load Balancer\nDESCRIPTION: Creates a public Kubernetes cluster template similar to the previous one but with an enabled master load balancer for high availability. The load balancer distributes traffic across master nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack coe cluster template create k8s-cluster-template-with-lb \\\n          --image magnum-fedora-coreos-40 \\\n          --external-network  PUBLICNET \\\n          --dns-nameserver 8.8.8.8 \\\n          --master-flavor gp.0.4.8 \\\n          --flavor gp.0.4.8 \\\n          --network-driver calico \\\n          --volume-driver cinder \\\n          --docker-volume-size 10 \\\n          --coe kubernetes \\\n          --master-lb-enabled \\\n          --public\n```\n\n----------------------------------------\n\nTITLE: Creating VLAN Network in OpenStack\nDESCRIPTION: This command creates a shared provider VLAN network using the OpenStack CLI. It specifies the network type as VLAN, sets the physical network to 'physnet1', and defines the VLAN segment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-neutron-networks.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default network create --share \\\n                                            --availability-zone-hint az1 \\\n                                            --external \\\n                                            --provider-segment 404 \\\n                                            --provider-network-type vlan \\\n                                            --provider-physical-network physnet1 \\\n                                            vlan404\n```\n\n----------------------------------------\n\nTITLE: Connecting to MariaDB Cluster via kubectl\nDESCRIPTION: Command to connect to the MariaDB database using kubectl to retrieve cluster IP and credentials from Kubernetes secrets.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb-ops.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmysql -h $(kubectl -n openstack get service mariadb-cluster-primary -o jsonpath='{.spec.clusterIP}') \\\n      -p$(kubectl --namespace openstack get secret mariadb -o jsonpath='{.data.root-password}' | base64 -d) \\\n      -u root\n```\n\n----------------------------------------\n\nTITLE: Associating Floating IP with Instance\nDESCRIPTION: Command to associate a floating IP address with a specific instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server add floating ip $INSTANCE_UUID $VIP\n```\n\n----------------------------------------\n\nTITLE: Simple OpenStack Cloud Configuration for Public Access\nDESCRIPTION: Example YAML configuration for OpenStack cloud access using username and password authentication. This configuration enables token caching and connects to the public API endpoint.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  auth: true\n  expiration_time: 3600\nclouds:\n  regionone:\n    auth:\n      auth_url: https://$KEYSTONE_URL/v3\n      project_name: $PROJECT_NAME\n      project_domain_name: $PROJECT_DOMAIN_NAME\n      username: $USERNAME\n      password: $PASSWORD_OR_APIKEY\n      user_domain_name: $PROJECT_DOMAIN_NAME\n    region_name:\n      - RegionOne\n    interface: public\n    identity_api_version: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Volume to a Server in Openstack\nDESCRIPTION: This command adds a volume to an existing server in Openstack. It allows specifying a device, tag, and delete-on-termination option for the volume attachment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server add volume\n    [--device <device>]\n    [--tag <tag>]\n    [--enable-delete-on-termination | --disable-delete-on-termination]\n    <server>\n    <volume>\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket in OpenStack Flex Object Storage using AWS CLI\nDESCRIPTION: Command to create a new bucket named 'newbucket' in the OpenStack Flex Object Storage using the AWS CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws --profile default s3api create-bucket --bucket newbucket\n```\n\n----------------------------------------\n\nTITLE: Viewing Envoy Gateway Logs\nDESCRIPTION: Command to retrieve logs from the envoy-gateway deployment for troubleshooting purposes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-envoy-gateway-api.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs -n envoy-gateway-system deployment/envoy-gateway\n```\n\n----------------------------------------\n\nTITLE: Deploying MariaDB Replication Cluster\nDESCRIPTION: Applies the recommended high-availability replication configuration for MariaDB using Kubernetes kustomize.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack apply -k /etc/genestack/kustomize/mariadb-cluster/overlay\n```\n\n----------------------------------------\n\nTITLE: Automated Envoy Gateway Setup\nDESCRIPTION: Command to run the Envoy Gateway setup script with email and domain arguments for automated configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-envoy-gateway-api.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nACME_EMAIL=\"username@your.domain.tld\" GATEWAY_DOMAIN=\"your.domain.tld\" /opt/genestack/bin/setup-envoy-gateway.sh\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenStack Floating IPs\nDESCRIPTION: Command to delete one or multiple floating IPs using either IP address or ID.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip delete <floating-ip> [<floating-ip> ...]\n```\n\n----------------------------------------\n\nTITLE: Generating External Cluster Resources\nDESCRIPTION: Commands to download and run a Python script that generates necessary resources for connecting to the external Ceph cluster. This script creates exports that will be used in subsequent steps.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-external.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./cephadm shell\nyum install wget -y ; wget https://raw.githubusercontent.com/rook/rook/release-1.16/deploy/examples/create-external-cluster-resources.py\npython3 create-external-cluster-resources.py --rbd-data-pool-name general --cephfs-filesystem-name general-multi-attach --namespace rook-ceph-external --format bash\n```\n\n----------------------------------------\n\nTITLE: Showing OpenStack Network Details\nDESCRIPTION: Command to display detailed information about a specific OpenStack network including its properties, status, and configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} network show <network>\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Node Status\nDESCRIPTION: Shell command to verify Kubernetes node status after Kube-OVN deployment and example output showing node roles and readiness.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME                                  STATUS   ROLES                  AGE   VERSION\ncompute-0.cloud.cloudnull.dev.local   Ready    control-plane,worker   24m   v1.30.4\ncompute-1.cloud.cloudnull.dev.local   Ready    control-plane,worker   24m   v1.30.4\ncompute-2.cloud.cloudnull.dev.local   Ready    control-plane,worker   24m   v1.30.4\n```\n\n----------------------------------------\n\nTITLE: Creating a Bootable Volume from an Image in Openstack\nDESCRIPTION: This command creates a bootable volume from a chosen image in Openstack. It specifies the image ID, size of the volume, and the name of the new volume.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} volume create \\\n--image {Image ID} --size 10 \\\ntest-volume\n```\n\n----------------------------------------\n\nTITLE: Listing Load Balancer Listeners in OpenStack CLI\nDESCRIPTION: This command lists all listeners associated with load balancers in the OpenStack environment, showing details such as ID, name, and protocol.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer listener list\n```\n\n----------------------------------------\n\nTITLE: Installing openstack-metrics-exporter Helm chart\nDESCRIPTION: This snippet installs the openstack-metrics-exporter Helm chart. It includes two variations: one for standard setup and another for self-signed certificates. The command uses the previously created secret and a custom values file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-openstack-metrics-exporter.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd /opt/genestack/submodules/openstack-exporter/charts\n\nhelm upgrade --install os-metrics ./prometheus-openstack-exporter \\\n  --namespace=openstack \\\n    --timeout 15m \\\n    -f /etc/genestack/helm-configs/monitoring/openstack-metrics-exporter/openstack-metrics-exporter-helm-overrides.yaml \\\n    --set clouds_yaml_config=\"$(kubectl --namespace openstack get secret clouds-yaml-secret -o jsonpath='{.data.generated-clouds-yaml}' | base64 -d)\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd /opt/genestack/submodules/openstack-exporter/charts\n\nhelm upgrade --install os-metrics ./prometheus-openstack-exporter \\\n  --namespace=openstack \\\n    --timeout 15m \\\n    -f /etc/genestack/helm-configs/monitoring/openstack-metrics-exporter/openstack-metrics-exporter-helm-overrides.yaml \\\n    --set clouds_yaml_config=\"$(kubectl --namespace openstack get secret clouds-yaml-secret -o jsonpath='{.data.generated-clouds-certs-yaml}' | base64 -d)\"\n```\n\n----------------------------------------\n\nTITLE: Deploying PostgreSQL Cluster using Kustomize\nDESCRIPTION: Alternative deployment method using kubectl kustomize overlay. Supports both base configuration with 3 replicas and an 'aio' overlay for single replica deployment with reduced resource usage.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-postgresql.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl kustomize /etc/genestack/kustomize/postgres-cluster/overlay | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Deploying Etcd Backup CronJob\nDESCRIPTION: Applies the Kubernetes manifest to deploy the etcd backup CronJob in the openstack namespace. Uses kustomize to deploy the predefined configuration from the Genestack directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/etcd-backup.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/backups/etcd/etcd-backup.yaml --namespace openstack\n```\n\n----------------------------------------\n\nTITLE: Displaying Quota Limits with Usage Information\nDESCRIPTION: Command to show absolute quota limits along with current utilization for most OpenStack services. This provides both the maximum allowed resources and how many are currently in use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-quota.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack limits show --absolute\n```\n\n----------------------------------------\n\nTITLE: Validating Ceph Cluster Connection\nDESCRIPTION: Example output of the CephCluster resource showing a successful connection. This indicates that the external Ceph cluster is properly connected and ready for use in the Kubernetes environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-external.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 DATADIRHOSTPATH   MONCOUNT   AGE     PHASE       MESSAGE                          HEALTH      EXTERNAL   FSID\nrook-ceph-external   /var/lib/rook     3          3m24s   Connected   Cluster connected successfully   HEALTH_OK   true       d45869e0-ccdf-11ee-8177-1d25f5ec2433\n```\n\n----------------------------------------\n\nTITLE: Creating General Purpose OpenStack Flavors with CLI\nDESCRIPTION: These commands create general purpose flavors with varying specifications for RAM, CPU, disk, and network quotas. They set properties for hardware constraints, architecture, and network traffic limits.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 24576 --vcpu 8 --disk 160 --ephemeral 128 --swap 8192 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"1250000\" --property \"quota:vif_inbound_burst\"=\"1250000\" --property \"quota:vif_inbound_average\"=\"687500\" --property \"quota:vif_outbound_peak\"=\"1250000\" --property \"quota:vif_outbound_burst\"=\"1250000\" --property \"quota:vif_outbound_average\"=\"687500\" gp.0.8.24\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager for Microsoft Teams Integration\nDESCRIPTION: YAML configuration for Alertmanager that sets up Microsoft Teams notifications. Includes global timeout settings, inhibition rules for different severity levels, routing configuration with group parameters, and Teams webhook configuration. The setup includes alert grouping by namespace and different handling for various alert severities.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/alertmanager-msteams.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n\n  ## Alertmanager configuration directives\n  ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file\n  ##      https://prometheus.io/webtools/alerting/routing-tree-editor/\n  ##\n  config:\n    global:\n      resolve_timeout: 5m\n    inhibit_rules:\n      - source_matchers:\n          - 'severity = critical'\n        target_matchers:\n          - 'severity =~ warning|info'\n        equal:\n          - 'namespace'\n          - 'alertname'\n      - source_matchers:\n          - 'severity = warning'\n        target_matchers:\n          - 'severity = info'\n        equal:\n          - 'namespace'\n          - 'alertname'\n      - source_matchers:\n          - 'alertname = InfoInhibitor'\n        target_matchers:\n          - 'severity = info'\n        equal:\n          - 'namespace'\n      - target_matchers:\n          - 'alertname = InfoInhibitor'\n    route:\n      group_by: ['namespace']\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 12h\n      receiver: msteams_config\n      routes:\n        - receiver: 'null'\n          matchers:\n            - alertname = \"Watchdog\"\n    receivers:\n      - name: 'null'\n      - name: 'msteams_config'\n        msteams_configs:\n        - send_resolved: true\n          webhook_url: https://msteams.webhook_url.example\n```\n\n----------------------------------------\n\nTITLE: Deploying Rook Cluster in Kubernetes\nDESCRIPTION: Applies the Kustomize overlay configuration to deploy the Rook cluster. This step sets up the Ceph storage cluster on the labeled nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-cluster/overlay\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl-convert plugin for upgrade assistance\nDESCRIPTION: Downloads and installs the kubectl-convert plugin that helps with Kubernetes upgrades. The script installs the latest stable version and configures it with proper permissions in the system path.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-tools.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl-convert\"\nsudo install -o root -g root -m 0755 kubectl-convert /usr/local/bin/kubectl-convert\n```\n\n----------------------------------------\n\nTITLE: Defining Cinder Volume Resources in Gnocchi via Ceilometer\nDESCRIPTION: This YAML configuration defines how Ceilometer maps Cinder volumes to Gnocchi resources. It specifies the metrics to collect for volumes, the attributes to store, and the events that trigger resource creation, deletion, and updates.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/metering-ceilometer.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- resource_type: volume\n  metrics:\n    volume:\n    volume.size:\n    snapshot.size:\n    volume.snapshot.size:\n    volume.backup.size:\n    backup.size:\n    volume.manage_existing.start:\n    volume.manage_existing.end:\n    volume.manage_existing_snapshot.start:\n    volume.manage_existing_snapshot.end:\n  attributes:\n    display_name: resource_metadata.(display_name|name)\n    volume_type: resource_metadata.volume_type\n    image_id: resource_metadata.image_id\n    instance_id: resource_metadata.instance_id\n  event_create:\n    - volume.create.end\n  event_delete:\n    - volume.delete.end\n    - snapshot.delete.end\n  event_update:\n    - volume.attach.end\n    - volume.transfer.accept.end\n    - snapshot.transfer.accept.end\n  event_attributes:\n    id: resource_id\n    project_id: project_id\n    image_id: image_id\n    instance_id: instance_id\n```\n\n----------------------------------------\n\nTITLE: Checking OVN gateway node status using Kube-OVN plugin\nDESCRIPTION: These commands use the Kube-OVN kubectl plugin to inspect the OVS database and BFD status on a gateway node. They provide insights into the OVN configuration and network health.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-alert-claim-storm.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl ko vsctl <gateway node> show\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl ko appctl <gateway node> bfd/show\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Config from Controller\nDESCRIPTION: Uses rsync over SSH to securely copy the Kubernetes config file from the controller node to the local machine. Requires SSH configuration file and proper user access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-config.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrsync -e \"ssh -F ${HOME}/.ssh/openstack-keypair.config\" \\\n      --rsync-path=\"sudo rsync\" \\\n      -avz ubuntu@X.X.X.X:/root/.kube/config \"${HOME}/.kube/config\"\n```\n\n----------------------------------------\n\nTITLE: Creating Openstack Security Groups\nDESCRIPTION: Command to create a new security group with a specified name and description. This allows for logical grouping of security rules.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group create SECURITY_GROUP_NAME --description GROUP_DESCRIPTION\n```\n\n----------------------------------------\n\nTITLE: Running Octavia Preconfiguration Playbook\nDESCRIPTION: This snippet shows how to run the Octavia preconfiguration playbook with dynamic values, including the Keystone admin password, region name, and auth URL.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook /opt/genestack/ansible/playbooks/octavia-preconf-main.yaml \\\n                -e octavia_os_password=$(kubectl get secrets keystone-admin -n openstack -o jsonpath='{.data.password}' | base64 -d) \\\n                -e octavia_os_region_name=$(openstack --os-cloud=default endpoint list --service keystone --interface public -c Region -f value) \\\n                -e octavia_os_auth_url=$(openstack --os-cloud=default endpoint list --service keystone --interface public -c URL -f value)\n```\n\n----------------------------------------\n\nTITLE: Checking Cinder Volume Service Status\nDESCRIPTION: Command to verify the Cinder volume service is running correctly after deployment. This checks the status of the scheduler and volume services through the OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume service list\n+------------------+--------------------------------------------+------+---------+-------+----------------------------+\n| Binary           | Host                                       | Zone | Status  | State | Updated At                 |\n+------------------+--------------------------------------------+------+---------+-------+----------------------------+\n| cinder-scheduler | cinder-volume-worker                       | nova | enabled | up    | 2023-12-26T17:43:07.000000 |\n| cinder-volume    | openstack-node-4.cluster.local@lvmdriver-1 | nova | enabled | up    | 2023-12-26T17:43:04.000000 |\n+------------------+--------------------------------------------+------+---------+-------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStack Client on Enterprise Linux\nDESCRIPTION: This command installs the OpenStack client on Enterprise Linux systems using the dnf package manager.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndnf install python3-openstackclient\n```\n\n----------------------------------------\n\nTITLE: Listing Provider Capabilities for Amphora in Octavia\nDESCRIPTION: This command displays all available flavor capabilities for the Amphora provider in Octavia, including topology, compute flavor, image tag, and network settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer provider capability list amphora\n```\n\n----------------------------------------\n\nTITLE: Creating Nova Secrets in Kubernetes for OpenStack\nDESCRIPTION: Creates various Kubernetes secrets for Nova service, including database password, admin credentials, RabbitMQ messaging credentials, and SSH keypair. These secrets enable secure communication between Nova components.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-secrets.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic nova-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic nova-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic nova-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"nova\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nssh-keygen -qt ed25519 -N '' -C \"nova_ssh\" -f nova_ssh_key && \\\nkubectl --namespace openstack \\\n        create secret generic nova-ssh-keypair \\\n        --type Opaque \\\n        --from-literal=public_key=\"$(cat nova_ssh_key.pub)\" \\\n        --from-literal=private_key=\"$(cat nova_ssh_key)\"\nrm nova_ssh_key nova_ssh_key.pub\n```\n\n----------------------------------------\n\nTITLE: Creating Designate Admin Secret in Kubernetes for OpenStack (Not Implemented)\nDESCRIPTION: Creates a Kubernetes secret for Designate admin credentials with a randomly generated password. This is marked as not yet implemented in the system.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-secrets.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic designate-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Backing up Sealed Secrets Key\nDESCRIPTION: Command to backup the active sealed-secrets key from the Kubernetes cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sealed-secrets.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret -n sealed-secrets -l sealedsecrets.bitnami.com/sealed-secrets-key=active -o yaml  > sealed-secrets-key.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Cluster with Kustomize in Kubernetes\nDESCRIPTION: Creates a RabbitMQ cluster using kustomize overlay configuration. This applies a production-ready high-availability setup.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rabbitmq-cluster/overlay\n```\n\n----------------------------------------\n\nTITLE: Creating ICMP (Ping) Security Group Rule from Source Group in Openstack\nDESCRIPTION: Command to allow ICMP traffic (ping) only from instances in another security group. This provides more restricted network diagnostic access based on source grouping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create --protocol icmp \\\n  --remote-group SOURCE_GROUP_NAME SECURITY_GROUP\n```\n\n----------------------------------------\n\nTITLE: Deleting Current Version of an Object in Swift\nDESCRIPTION: This snippet demonstrates how to delete the current version of an object. This action removes the current version and promotes the next-most recent version from the archive container to become the current version.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current/my_object -X DELETE -H \"X-Auth-Token: $token\"\n```\n\n----------------------------------------\n\nTITLE: Running OVS Commands on Specific Kubernetes Node\nDESCRIPTION: This command uses the Kube-OVN kubectl plugin to run the 'ovs-vsctl show' command on a specified Kubernetes node.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko vsctl ${K8S_NODE_NAME} show\n```\n\n----------------------------------------\n\nTITLE: Validating Magnum Deployment\nDESCRIPTION: Executes a command to list all COE (Container Orchestration Engine) clusters, which verifies that Magnum is functioning correctly after deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-magnum.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack coe cluster list\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenStack Server\nDESCRIPTION: Command to delete one or more OpenStack servers with optional wait parameter.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-servers.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server delete [--wait] <server> [<server> ...]\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Security Group Rule from All IPs in Openstack\nDESCRIPTION: Command to allow SSH access (port 22) from any IP address to instances in the specified security group. This provides universal remote administration access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create SECURITY_GROUP_NAME \\\n  --protocol tcp --dst-port 22:22 --remote-ip 0.0.0.0/0\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes API Server Address\nDESCRIPTION: Modifies the retrieved config file to point to the correct Kubernetes API server address using sed\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-config.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's@server.*@server: https://X.X.X.X:6443@g' \"${HOME}/.kube/config\"\n```\n\n----------------------------------------\n\nTITLE: Shell Command to Validate Glance Installation\nDESCRIPTION: Command to validate the Glance deployment by listing available images from the openstack-admin-client pod. This helps verify that Glance is functioning properly after deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-glance.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack image list\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStack Client on MacOS using Homebrew\nDESCRIPTION: This command installs the OpenStack client on MacOS using the Homebrew package manager.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew install openstackclient\n```\n\n----------------------------------------\n\nTITLE: Validating Heat Service Deployment\nDESCRIPTION: Shell command to validate the Heat orchestration service deployment by listing available services. This command executes within the openstack-admin-client pod in the openstack namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-heat.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack --os-interface internal orchestration service list\n```\n\n----------------------------------------\n\nTITLE: Enabling iSCSI Storage Configuration in YAML\nDESCRIPTION: YAML configuration snippet for enabling iSCSI and custom multipath in the inventory file. Sets the required storage variables for the Genestack environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  vars:\n    enable_iscsi: true\n    custom_multipath: true\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Blackbox Exporter Helm Chart\nDESCRIPTION: This snippet shows the shell commands to install the Prometheus Blackbox Exporter using a Helm chart. It sources a configuration file and then runs an installation script.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-blackbox-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/genestack/scripts/genestack.rc\nbin/install-chart.sh prometheus-blackbox-exporter\n```\n\n----------------------------------------\n\nTITLE: Updating Genestack Submodules\nDESCRIPTION: Updates all Git submodules within the Genestack repository. This ensures that all dependent components are also updated to their latest versions.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit pull --recurse-submodules\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Dashboard RBAC Configuration\nDESCRIPTION: Applies the Kubernetes Dashboard RBAC configuration using kustomize. This command sets up the necessary permissions that allow access to the dashboard.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-dashboard.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/k8s-dashboard\n```\n\n----------------------------------------\n\nTITLE: Showing Openstack Load Balancer Details\nDESCRIPTION: Command to display detailed information about a specific load balancer.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer show <load_balancer>\n```\n\n----------------------------------------\n\nTITLE: Listing Volumes Attached to a Specific Server in Openstack\nDESCRIPTION: This command lists volumes attached to a specific server in Openstack, providing details about the server's volume attachments.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server volume list test-server\n```\n\n----------------------------------------\n\nTITLE: Finding Node for OpenStack Instance\nDESCRIPTION: This command shows the hypervisor hostname for a given OpenStack instance UUID, helping to identify which node the instance is running on.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack server show ${INSTANCE_UUID} -c hypervisor_hostname\n```\n\n----------------------------------------\n\nTITLE: Creating Rook Storage Classes in Kubernetes\nDESCRIPTION: Applies the Kustomize configuration to create filesystem, storage-class, and pool defaults for the Rook cluster. This should be done after the cluster is online and healthy.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-defaults\n```\n\n----------------------------------------\n\nTITLE: Verifying Sealed Secrets Deployment Status\nDESCRIPTION: Kubernetes command to check the horizontal pod autoscaler status for Sealed Secrets in its dedicated namespace. The -w flag enables watching for status changes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-sealed-secrets.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace sealed-secrets get horizontalpodautoscaler.autoscaling sealed-secrets -w\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Images with CLI\nDESCRIPTION: This command creates a new OpenStack image with various optional parameters. It allows specifying image properties such as ID, format, size, visibility, and source location. The cloud name and image name are required parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-images.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image create\n    [--id <id>]\n    [--store <store>]\n    [--container-format <container-format>]\n    [--disk-format <disk-format>]\n    [--size <size>]\n    [--min-disk <disk-gb>]\n    [--min-ram <ram-mb>]\n    [--location <image-url>]\n    [--copy-from <image-url>]\n    [--file <file> | --volume <volume>]\n    [--force]\n    [--checksum <checksum>]\n    [--protected | --unprotected]\n    [--public | --private]\n    [--property <key=value>]\n    [--project <project>]\n    <image-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway API to Use the CA ClusterIssuer\nDESCRIPTION: Shows how to modify the Gateway API manifest to use the newly created CA ClusterIssuer by updating the cert-manager.io/cluster-issuer annotation with the new issuer name.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-ca-issuer.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat internal-gateway-api.yaml\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: flex-gateway\n  namespace: nginx-gateway\n  annotations: # This is the name of the ClusterIssuer created in the previous step\n    cert-manager.io/cluster-issuer: public-endpoint-issuer\n    acme.cert-manager.io/http01-edit-in-place: \"true\"\n....\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Pod Deployment\nDESCRIPTION: Kubernetes command to verify the successful deployment of Prometheus stack by checking pod status in the prometheus namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n prometheus get pods -l \"release=kube-prometheus-stack\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Openstack Load Balancer Listener\nDESCRIPTION: Command to remove a listener from a load balancer with option to wait for completion.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack loadbalancer listener delete [--wait] <listener>\n```\n\n----------------------------------------\n\nTITLE: Sample Kubernetes Secret Configuration\nDESCRIPTION: Example YAML configuration for a Kubernetes Secret containing Grafana certificates including CA, TLS cert, and private key.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sealed-secrets.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJjVENDQVJhZ0F3SUJBZ0lRYjBYbHp2d3JIWTd0MjNBREJ5Y2NnekFLQmdncWhrak9QUVFEQWpBWU1SWXcKRkFZRFZRUURFdzF5WVdOcmMzQmhZMlV1WTI5dE1CNFhEVEkwTURJeU5ERXdOVFExT0ZvWERUTTBNREl5TVRFdwpOVFExT0Zvd0dERVdNQlFHQTFVRUF4TU5jbUZqYTNOd1lXTmxMbU52YlRCWk1CTUdCeXFHU000OUFnRUdDQ3FHClNNNDlBd0VIQTBJQUJPd0owMU1ZTWw4MUNyV1dMODlQQkhvVG5telZCT2xRMkdMMDFTd2JjYXZQVmRCWnVHamIKeFlwR3VKVDd1UG5xdVp4eFZ4djhUSFlPcVVVL1ZYT2ZtdkNqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lDcERBUApCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUU5weXZnNk1CSWFnZENuOVR1ejZ3SkZDMVIvekFLCkJnZ3Foa2pPUFFRREFnTkpBREJHQWlFQTY5T25ScUZ5SHZQbjJkWFZ6YjBTVFRZY2UxUUZGUEphWXFVYnQrc2kKdG13Q0lRRDE2ODV0UDBKcnZRRnB6NVlPNFdYQ2xEQWxabTgxUWRwN1lWY0FJS1RhbWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNUVENDQWZLZ0F3SUJBZ0lSQUxieTRuVUJoTWlvYkVTS01yVmwrbEl3Q2dZSUtvWkl6ajBFQXdJd0dERVcKTUJRR0ExVUVBeE1OY21GamEzTndZV05sTG1OdmJUQWVGdzB5TkRBek1UVXhNakk0TUROYUZ3MHlPVEF6TVRReApNakk0TUROYU1BQXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEUStvcVhlUVZWCmRSWkFWclM2ekZwMDlONXpDWUJRcS9HRjNNS1NyWnNkK3VNVlFXakIwcXlJcWJRdm9kL0N0NFhMdWx3a3UyWkIKQlg1MFN4NHJMVGhKQ3ExY2VIQ3lnRUZRa1gyekl6dlBkaCtTcFhWUnhMdzhHZW1ramZ5R3VXeVdydkVEa1cxKwpaM0dYOFc0ZzRZVkwyUEhSLzBIOWxSaVVhK2lYMmM0ZkJhVWoyTUQ3bkF6eWRKaEpneU5rQVZqUHFkRGpGay90CmdIS3pDTGhRTjd0d083ZzluU1UwdTJ1aWI4Z0FZeng0aHl1SWtwR3dCL3JNQkFWb0pxV3Y5eFFkVWd2S2w4a0EKbDFydngwaFlveWZETUprWVQ3SkFYZExEWTJRTUNyY0Y3d0poQUMzYThhYXJqRlUwWXFiQ0Z4TCtvRGw3OGxDbwp2akt2NG0wUmliU1ZBZ01CQUFHamFqQm9NQTRHQTFVZER3RUIvd1FFQXdJRm9EQU1CZ05WSFJNQkFmOEVBakFBCk1COEdBMVVkSXdRWU1CYUFGQTJuSytEb3dFaHFCMEtmMU83UHJBa1VMVkgvTUNjR0ExVWRFUUVCL3dRZE1CdUMKR1dkeVlXWmhibUV0YkdGaUxtUmxiVzh1YldzNGN5NXVaWFF3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQU9lRwp4d1l0S1ZUTjVMcmpwbGR6YlVOLzQ3NnFqM0t4NXdZcGlCL0VaalY5QWlFQXRHU3ZJZlJ2R0JGY1lqaWRyNFl1Ckw1S0Rwd21rZkt0eFhuNi9xamF0eG1jPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMFBxS2wza0ZWWFVXUUZhMHVzeGFkUFRlY3dtQVVLdnhoZHpDa3EyYkhmcmpGVUZvCndkS3NpS20wTDZIZndyZUZ5N3BjSkx0bVFRVitkRXNlS3kwNFNRcXRYSGh3c29CQlVKRjlzeU03ejNZZmtxVjEKVWNTOFBCbnBwSTM4aHJsc2xxN3hBNUZ0Zm1keGwvRnVJT0dGUzlqeDBmOUIvWlVZbEd2b2w5bk9Id1dsSTlqQQorNXdNOG5TWVNZTWpaQUZZejZuUTR4WlA3WUJ5c3dpNFVEZTdjRHU0UFowbE5MdHJvbS9JQUdNOGVJY3JpSktSCnNBZjZ6QVFGYUNhbHIvY1VIVklMeXBmSkFKZGE3OGRJV0tNbnd6Q1pHRSt5UUYzU3cyTmtEQXEzQmU4Q1lRQXQKMnZHbXE0eFZOR0ltd2hjUy9xQTVlL0pRcUw0eXIrSnRFWW0wbFFJREFRQUJBb0lCQVFDR2x0VnJlS1hXdy9Idwp2ZWJuNTNUYW5sb2wvSmlIWERYUTRMenZlcC9NVHlpeEo4OHdCVjdaSlhMR3VwcEI3YkJkNVVneTMvNmJJYzZ2ClZ6RzIzUWpEQWYxazhLeWtTYlhIRGV6RzBvcFNzdURpc1cwOW5GY2UzaEY3eVhZNXpuSUJHZXBmUWVvaTNyeHAKL3pQT09YQi95TmoxUmxCWjRReFRpcXZpSUlSL3RSZmNQcFp2RWFRRHo5RDBwcm5VTG5raXdqZ1FsUVhnWXdITwpFYjRBZTlwaWwzZ3plNnVoeGxOWEc3bE1nYjFoOHZFa0RNOURJK0tqd25tYjF3eEZCSkZEQ2E4dm15ZDZZTThRCnU1bU5JbVc3bmh1bTA3akRid0tXSDgySE5kTWEwT2g4T0RCWENSSkVhMTZ2YXd0NVNCWjJLcVdlbmpaTlUycmwKTzJ2UmRZUUJBb0dCQVAxUzhEeTVWRkVQUHB4RCtLZHJzWGlVcER6Rzl2VGZmS3ZLQ2NBNExpVEJNYTdEdlRNTwpMeFRJaldMekhmZUFPbXBzVngrK3U4S1kzd2txbTBDcWpabzZ3eVpXcWZhZkJ6bUluK3p3Zm9tQmlIazJwZ2tCCjlTdU95VW9Bb0djYSt6TUtyZXpJRjVrc2FaUmlJbERsL2dheWFlVUZyWGhLZUJTbDF0Q3lOVTlOQW9HQkFOTXYKcmkxcllLZkVPeGxOTlpTbVczQzRiZ2RJZlNoRXNYaVcrUkxFYkdqamgwRWN5Vy92SCtrMU5TdU5aZERpUk9BRwpVQmhmT29YSnVYbzJkTlRXdXFuSE9QL2pxUG1tYWRhU3dpejNtUFNqRUppU3hUbFBQMGEyb0Jpa3VTVlAybDFVCkxxa0MrZ1ZEWHhoaXlXUXlKMUNnY0dNb0IyTVI4R0RaZkVXSm9lWnBBb0dCQU9EdjBWUUtPRjFWelFHU3RXdHMKREFVRzc2THNCUU5Bb3dJamYyOElNNmo5UnpGb3EwcDNjTVRpby9EVjhha0FXbDUvWHdsWUluN1RvVkFSWGhRWQpuVzN5ZWJCRVNkMHNMbzBlek9ybVRXV3ArRld4ZWRNTHd2aHZiRHJpdll0d0FOZTh4dDAyZXdYTzB0MG9HbEo5Ck5vZ1p5ai9MUDlKTlJiMEgyT3d0SVhzTkFvR0FNaXRrbEhPcTNaQVhmaFpDZ1ZMWDdEcFVJVFRPVHMrcTNYdjQKSmNZMS91RDJrN2hUL2x4dlYwYUZvQmdTTlFKYjNHQ0RqSmFxMzNlaHNXL1laMnV2b24rcWdkZkNuN1F4OW9DYwowblByaVVwbnVlYzhKVFkzVVFRM21rTWZuTWFRbUpWVUZHQ1pwc0J2aWVxRjcyQ2V5RitrODFsaUQ5NEdIZXZzCnd0UkVldWtDZ1lFQSt1ZExMZllCRitFaDZIVldvT3NXU2lqZCtrTnh4ajhaK2VSMWhOaWxtN1I5RlNkVzJHVEoKY2lvMlIrSDhWU0xudnFjZ29oWXNxZ0N0VXViTnpNbjdlbEt4RkNOOHRaS1lUYnhHcU5IUHJ4WE43M3RQNy83WAp2MWF4UXQvbm5lcDEvaVYzODVBcUZLdGZ6UU9Ua25sdGJBcmxyZzRvRFk4d0NtUmcwTi9aLzJFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nkind: Secret\nmetadata:\n  annotations:\n    cert-manager.io/alt-names: grafana-lab.demo.mk8s.net\n  name: grafana\n  namespace: rackspace-system\ntype: kubernetes.io/tls\n```\n\n----------------------------------------\n\nTITLE: Adding Port to OpenStack Router\nDESCRIPTION: Command to attach an existing port to a router, which provides more granular control over network connections than subnet-level attachment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add port <router> <port>\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster Template Without Load Balancer\nDESCRIPTION: Creates a public Kubernetes cluster template with Calico networking, Cinder volume support, and specific node configurations. This template doesn't include a load balancer for the master nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack coe cluster template create k8s-cluster-template-no-lb \\\n          --image magnum-fedora-coreos-40 \\\n          --external-network  PUBLICNET \\\n          --dns-nameserver 8.8.8.8 \\\n          --master-flavor gp.0.4.8 \\\n          --flavor gp.0.4.8 \\\n          --network-driver calico \\\n          --volume-driver cinder \\\n          --docker-volume-size 10 \\\n          --coe kubernetes \\\n          --public\n```\n\n----------------------------------------\n\nTITLE: Creating Load Balancer Health Monitor in OpenStack\nDESCRIPTION: Creates a TCP health monitor for load balancer pool with 5 second delay, 3 max retries and 5 second timeout. Shows monitor creation and listing commands.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer healthmonitor create --delay 5 --max-retries 3 --timeout 5 --type TCP HTTP_POOL\n$ openstack --os-cloud default loadbalancer healthmonitor list\n```\n\n----------------------------------------\n\nTITLE: Grafana Deployment Script Execution\nDESCRIPTION: This shell snippet shows the command to run the Grafana deployment script, which installs and configures Grafana using the specified Helm overrides.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/grafana.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-grafana.sh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring External Ceph Monitoring with Prometheus ScrapeConfig in Kubernetes\nDESCRIPTION: This YAML snippet defines a ScrapeConfig resource that allows Prometheus to scrape metrics from an external Ceph cluster. It specifies the target IP address and port for the Ceph exporter, enabling monitoring of external Ceph resources.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/monitoring-info.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1alpha1\nkind: ScrapeConfig\nmetadata:\n   name: external-ceph-monitor\n   namespace: prometheus\n   labels:\n       prometheus: sys\\em-monitoring-prometheus\nspec:\n  staticConfigs:\n    - labels:\n        job: prometheus\n      targets:\n        - 192.12.34.567:9283\n```\n\n----------------------------------------\n\nTITLE: Creating a Flavor in Octavia\nDESCRIPTION: This command creates a new flavor in Octavia using a previously defined flavor profile. It specifies the name, flavor profile, description, and enables the flavor for use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack loadbalancer flavor create --name single.lite --flavorprofile fp.single.lite --description \"single amphora, 1 vcpu, 1024 ram, 10 disk\" --enable\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Etcd Backup\nDESCRIPTION: Creates a Kubernetes secret containing necessary credentials and configuration for the etcd backup operation. Includes S3 access keys, endpoint information, and etcd certificate paths required for secure connections.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/etcd-backup.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\ncreate secret generic etcd-backup-secrets \\\n--type Opaque \\\n--from-literal=ACCESS_KEY=\"<SECRET_ACCESS_KEY>\" \\\n--from-literal=SECRET_KEY=\"<SECRET_SECRET_KEY>\" \\\n--from-literal=S3_HOST=\"127.0.0.1\" \\\n--from-literal=S3_REGION=\"<S3_REGION>\" \\\n--from-literal=ETCDCTL_API=\"3\" \\\n--from-literal=ETCDCTL_ENDPOINTS=\"https://127.0.0.1:2379\" \\\n--from-literal=ETCDCTL_CACERT=\"/etc/ssl/etcd/ssl/ca.pem\" \\\n--from-literal=ETCDCTL_CERT=\"/etc/ssl/etcd/ssl/member-etcd01.your.domain.tld.pem\" \\\n--from-literal=ETCDCTL_KEY=\"/etc/ssl/etcd/ssl/member-etcd01.your.domain.tld-key.pem\"\n```\n\n----------------------------------------\n\nTITLE: Running Kubespray Scale Playbook for Node Addition\nDESCRIPTION: Executes the Kubespray scale playbook to add the new node to the existing Kubernetes cluster. This command sources the Genestack environment and runs Ansible with appropriate parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/genestack/scripts/genestack.rc\nansible-playbook scale.yml --limit compute-12481.rackerlabs.dev.local --become\n```\n\n----------------------------------------\n\nTITLE: Creating CA Certificate and ClusterIssuer Configuration in YAML\nDESCRIPTION: Demonstrates how to modify the internal-gateway-issuer.yaml file to create a self-signed CA certificate and configure a CA ClusterIssuer that uses this certificate for issuing certificates to Gateway API listeners.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-ca-issuer.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: flex-gateway-issuer\n  namespace: nginx-gateway\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: public-endpoint-ca-cert\n  namespace: cert-manager\nspec:\n  isCA: true\n  commonName: public-endpoint-ca\n  secretName: public-endpoint-ca-secret\n  privateKey:\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: flex-gateway-issuer\n    kind: ClusterIssuer\n    group: cert-manager.io\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: public-endpoint-issuer\n  namespace: nginx-gateway\nspec:\n  ca:\n    secretName: public-endpoint-ca-secret\n```\n\n----------------------------------------\n\nTITLE: Running Horizon Deployment Script in Shell\nDESCRIPTION: Command to execute the Horizon deployment script. The script is located at bin/install-horizon.sh and handles the deployment of Horizon components.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-horizon.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-horizon.sh\"\n```\n\n----------------------------------------\n\nTITLE: Individual Database Backup using mysqldump\nDESCRIPTION: Command for backing up a single MariaDB database with all database objects including routines, triggers, and events.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb-ops.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmysqldump --host=$(kubectl -n openstack get service mariadb-cluster -o jsonpath='{.spec.clusterIP}')\\\n          --user=root \\\n          --password=$(kubectl --namespace openstack get secret mariadb -o jsonpath='{.data.root-password}' | base64 -d) \\\n          --single-transaction \\\n          --routines \\\n          --triggers \\\n          --events \\\n          --column-statistics=0 \\\n          ${DATABASE_NAME} \\\n          --result-file=/tmp/${DATABASE_NAME}-$(date +%s).sql\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Host Aggregate in OpenStack\nDESCRIPTION: This snippet demonstrates the creation of a host aggregate specifically for GPU hosts, named 'GPU'.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack aggregate create GPU\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Container in OpenStack\nDESCRIPTION: Shows how to create a new object container named 'flex-container01' using the OpenStack CLI. It also includes an option to make the container public.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-openstack-cli.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD container create flex-container01\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD container create --public flex-container01\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD container show flex-container01\n```\n\n----------------------------------------\n\nTITLE: Listing Flavors in Octavia\nDESCRIPTION: This command lists all existing flavors in Octavia, displaying their IDs, names, associated flavor profile IDs, and enabled status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack loadbalancer flavor list\n```\n\n----------------------------------------\n\nTITLE: Illustrating External Traffic Flow in Genestack Gateway API\nDESCRIPTION: This mermaid flowchart demonstrates the traffic flow pattern for externally exposed services in Genestack. It shows how external traffic passes through an External VIP Address to a MetalLB VIP Address before reaching the Gateway Service that routes to the appropriate backend based on hostname.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-gateway-api.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    External --> External_VIP_Address --> MetalLB_VIP_Address --> Gateway_Service\n```\n\n----------------------------------------\n\nTITLE: Creating Ceilometer Secrets in Kubernetes for OpenStack Deployment\nDESCRIPTION: Shell commands to create the required Kubernetes secrets for Ceilometer deployment. These commands generate random passwords for Keystone admin, Keystone test, and RabbitMQ access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-ceilometer.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack create secret generic ceilometer-keystone-admin-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack create secret generic ceilometer-keystone-test-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack create secret generic ceilometer-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Running Kubespray Upgrade Playbook in Shell\nDESCRIPTION: This command executes the Kubespray upgrade playbook using ansible-playbook. It sets the kube_version variable to the desired Kubernetes version for the upgrade. Additional flags may be needed based on the specific environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray-upgrade.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook upgrade-cluster.yml -e kube_version=${VERSION_NUMBER}\n```\n\n----------------------------------------\n\nTITLE: Installing Loki Helm Chart\nDESCRIPTION: Command to install or upgrade Loki using Helm with custom configuration values. Specifies namespace creation and version configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-loki.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install \\\n             --values /etc/genestack/helm-configs/loki/loki-helm-overrides.yaml \\\n             loki grafana/loki \\\n             --create-namespace \\\n             --namespace grafana \\\n             --version 5.47.2\n```\n\n----------------------------------------\n\nTITLE: Labeling Nodes for OpenStack Compute and Network Services\nDESCRIPTION: Applies Kubernetes labels to enable OpenStack compute and networking services on the new node. With OVN, compute nodes also need to be labeled as network nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Label the openstack compute nodes\nkubectl label node compute-12481.rackerlabs.dev.local openstack-compute-node=enabled\n\n# With OVN we need the compute nodes to be \"network\" nodes as well. While they will be configured for networking, they wont be gateways.\nkubectl label node compute-12481.rackerlabs.dev.local openstack-network-node=enabled\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to an OpenStack Container\nDESCRIPTION: Demonstrates how to upload the contents of a folder to an OpenStack container and list the uploaded objects.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-openstack-cli.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD object create flex-container01 example/*\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud $CLOUD object create flex-container01 example/*\n+---------------------+------------------+------------------------------------+\n| obje                | container        | etag                               |\n+---------------------+------------------+------------------------------------+\n| example/example.txt | flex-container01 | \"f5222fe12bc675311e17201856a10219\" |\n+---------------------+------------------+------------------------------------+\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD object list flex-container01\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud $CLOUD object list flex-container01\n+---------------------+\n| Name                |\n+---------------------+\n| example.rtf         |\n| example/example.txt |\n+---------------------+\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD object list flex-container01 --prefix example\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud $CLOUD object list flex-container01 --prefix example\n+---------------------+\n| Name                |\n+---------------------+\n| example/example.txt |\n+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Credentials for Magnum in Kubernetes\nDESCRIPTION: Creates Kubernetes secrets for Magnum service including RabbitMQ credentials, database password, and admin credentials. These secrets contain randomly generated passwords to secure the Magnum services.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-magnum.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic magnum-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"magnum\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic magnum-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic magnum-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Listing OpenStack Floating IPs\nDESCRIPTION: Command to list and view floating IPs with optional filters for network, port, status, and project.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip list\n    [--network <network>]\n    [--port <port>]\n    [--fixed-ip-address <ip-address>]\n    [--long]\n    [--status <status>]\n    [--project <project> [--project-domain <project-domain>]]\n    [--router <router>]\n```\n\n----------------------------------------\n\nTITLE: Generating Heat Secret Keys Manually in Kubernetes\nDESCRIPTION: Shell commands for manually creating the required Kubernetes secrets for Heat deployment. These secrets include RabbitMQ, database, admin, trustee, and stack user passwords, all with random generation for security.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-heat.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic heat-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"heat\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic heat-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic heat-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic heat-trustee \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic heat-stack-user \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Single File from Swift Container\nDESCRIPTION: Shows how to download a specific file from a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nswift download flex-container01 document01.rtf\n```\n\n----------------------------------------\n\nTITLE: Viewing OpenStack Image Details with CLI\nDESCRIPTION: This command displays detailed information about a specific OpenStack image. It requires the cloud name and the image name as parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-images.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image show <imageName>\n```\n\n----------------------------------------\n\nTITLE: Disabling Object Versioning in Swift\nDESCRIPTION: Demonstrates how to disable object versioning for a container in Swift by removing its X-Versions-Location metadata header using a cURL command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\" -H \"X-Versions-Location: \"\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Trait on Aggregate in OpenStack\nDESCRIPTION: This snippet demonstrates how to set the custom GPU trait as a required property for the 'GPU' aggregate using the OpenStack Compute API.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-compute-api-version 2.53 aggregate set --property trait:CUSTOM_HW_GPU=required GPU\n```\n\n----------------------------------------\n\nTITLE: Kube-OVN Helm Configuration\nDESCRIPTION: YAML configuration for Kube-OVN Helm chart overrides, defining network CIDR ranges and interface settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn-helm-conversion.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nipv4:\n  POD_CIDR: \"10.236.0.0/14\"  # ovn-default CIDR\n  POD_GATEWAY: \"10.236.0.1\"  # ovn-default CIDR\n  SVC_CIDR: \"10.233.0.0/18\"  # Service CIDR\n  JOIN_CIDR: \"100.64.0.0/16\"  # join\n\nnetworking:\n  IFACE: \"br-overlay\"  # Interface used for the cluster\n  vlan:\n    VLAN_INTERFACE_NAME: \"br-overlay\"  # VLAN Interface used for the cluster\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Topology Operator with Kustomize in Kubernetes\nDESCRIPTION: Deploys the RabbitMQ topology operator using kustomize. This operator manages RabbitMQ resources like exchanges, queues, and bindings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rabbitmq-topology-operator\n```\n\n----------------------------------------\n\nTITLE: Example Secret Usage Commands\nDESCRIPTION: Shell commands demonstrating how to retrieve and verify secrets from both Vault and Kubernetes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault kv get osh/keystone/keystone-rabbitmq-password\nkubectl apply -f vaultconnection.yaml\nkubectl apply -f vault-auth.yaml\nkubectl apply -f keystone-rabbitmq-password-vault.yaml\nkubectl get secret keystone-rabbitmq-password -n openstack -o yaml\necho \"RUVORjFTZktPVmtJTFRHVnpmdEpoZGo1QTZtd25iY0NMZ2R0dGFoaEtzUVZ4Q1dIcklyaGMwdGhlQ0czVHpycg==\" | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Node for Etcd Backup\nDESCRIPTION: Labels a Kubernetes node to enable it for running the etcd backup CronJob. The label 'is-etcd-backup-node=true' designates which nodes will be selected to perform the backup operations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/etcd-backup.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label node etcd01.your.domain.tld is-etcd-backup-node=true\n```\n\n----------------------------------------\n\nTITLE: Validating Rook Cluster Status in Kubernetes\nDESCRIPTION: Retrieves the status of the Ceph clusters in the rook-ceph namespace. This command is used to verify that the cluster is operational.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace rook-ceph get cephclusters.ceph.rook.io\n```\n\n----------------------------------------\n\nTITLE: Applying Longhorn StorageClass Configuration\nDESCRIPTION: Shell command to apply the encrypted StorageClass configuration to the Kubernetes cluster using kubectl.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/manifests/longhorn/longhorn-encrypted-storageclass.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenStack Keystone URL and Region\nDESCRIPTION: This command retrieves the Keystone URL and region information from OpenStack, which is needed for the Octavia preconfiguration playbook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud=default endpoint list --service keystone --interface public -c Region -c URL -f value\n```\n\n----------------------------------------\n\nTITLE: Adding Members to Load Balancer Pool\nDESCRIPTION: Adds server members to the load balancer pool using their IP addresses and port 80. Shows member creation and listing commands.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer member create --address 192.168.32.175 --protocol-port 80 --name SERVER1 HTTP_POOL\n$ openstack --os-cloud default loadbalancer member create --address 192.168.32.87 --protocol-port 80 --name SERVER2 HTTP_POOL\n$ openstack --os-cloud default loadbalancer member create --address 192.168.32.124 --protocol-port 80 --name SERVER3 HTTP_POOL\n$ openstack --os-cloud default loadbalancer member list HTTP_POOL\n```\n\n----------------------------------------\n\nTITLE: Listing Block Devices on LVM iSCSI Storage Node\nDESCRIPTION: This command lists all block devices on the LVM iSCSI storage node, showing the relationship between physical disks, logical volumes, and the Cinder volume. It helps verify the presence and configuration of the Cinder volume on the storage backend.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-fips-encryption.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Creating Subnet for External Network in OpenStack\nDESCRIPTION: Creates a subnet with specified IP range within the previously created external network. The subnet includes gateway configuration and uses IPv4 addressing.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack subnet create public-subnet --network public --subnet-range 192.168.1.0/24 --gateway 192.168.1.1 --ip-version 4\n```\n\n----------------------------------------\n\nTITLE: Creating UDP Security Group Rule from All IPs in Openstack\nDESCRIPTION: Command to allow UDP traffic on a specific port (e.g., DNS port 53) from any IP address. This example would enable DNS service access to instances in the security group.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create --protocol udp \\\n  --dst-port 53:53 SECURITY_GROUP\n```\n\n----------------------------------------\n\nTITLE: Creating Openstack Load Balancer Listener\nDESCRIPTION: Command to create a listener for a load balancer with protocol configuration, connection limits, and TLS settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer listener create\n    [--name <name>]\n    [--description <description>]\n    --protocol\n    {TCP,HTTP,HTTPS,TERMINATED_HTTPS,UDP,SCTP,PROMETHEUS}\n    [--connection-limit <limit>]\n    [--default-pool <pool>]\n    [--default-tls-container-ref <container_ref>]\n    [--sni-container-refs [<container_ref> ...]]\n    [--insert-headers <header=value,...>]\n    --protocol-port <port>\n    [--timeout-client-data <timeout>]\n    [--timeout-member-connect <timeout>]\n    [--timeout-member-data <timeout>]\n    [--timeout-tcp-inspect <timeout>]\n    [--enable | --disable]\n    [--client-ca-tls-container-ref <container_ref>]\n    [--client-authentication {NONE,OPTIONAL,MANDATORY}]\n    [--client-crl-container-ref <client_crl_container_ref>]\n    [--allowed-cidr [<allowed_cidr>]]\n    [--wait]\n    [--tls-ciphers <tls_ciphers>]\n    [--tls-version [<tls_versions>]]\n    [--alpn-protocol [<alpn_protocols>]]\n    [--hsts-max-age <hsts_max_age>]\n    [--hsts-include-subdomains]\n    [--hsts-preload]\n    [--tag <tag> | --no-tag]\n    <loadbalancer>\n```\n\n----------------------------------------\n\nTITLE: Verifying Swift Container Configuration\nDESCRIPTION: Shows how to check the configuration and metadata of a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nswift stat flex-container01\n```\n\n----------------------------------------\n\nTITLE: Creating Container with History Location in Swift\nDESCRIPTION: This snippet shows how to create a container with the 'X-History-Location' header instead of 'X-Versions-Location'. This alternative approach to versioning maintains versions differently than the standard versioning mechanism.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\" -H \"X-History-Location: archive\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cinder Availability Zone Fallback in OpenStack\nDESCRIPTION: Configuration snippet for enabling availability zone fallback in Cinder. This setting prevents API calls from failing when Nova requests a non-existent availability zone by falling back to the default availability zone.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cloud-design-az.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[DEFAULT]\nallow_availability_zone_fallback=True\n```\n\n----------------------------------------\n\nTITLE: Configuring PCI Passthrough for NVIDIA GPUs in OpenStack Nova\nDESCRIPTION: This YAML configuration sets up PCI passthrough for NVIDIA GPUs in OpenStack Nova. It defines PCI aliases for different GPU models, enables necessary scheduler filters, and specifies device addresses for passthrough on a specific compute node.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  nova:\n    pci:\n      alias:\n        type: multistring\n        values:\n          - '{\"vendor_id\": \"10de\", \"product_id\": \"2321\", \"device_type\": \"type-PCI\", \"name\": \"h100\", \"numa_policy\": \"preferred\"}'\n          - '{\"vendor_id\": \"10de\", \"product_id\": \"1389\", \"device_type\": \"type-PCI\", \"name\": \"h100\", \"numa_policy\": \"preferred\"}'\n    filter_scheduler:\n      enabled_filters: >\n        ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,AggregateInstanceExtraSpecsFilter,NUMATopologyFilter,PciPassthroughFilter\n      available_filters: nova.scheduler.filters.all_filters\n  overrides:\n    nova_compute:  # Chart + \"_\" + Daemonset (nova_compute)\n      hosts:\n        - name: \"compute001.h100.example.com\"\n          conf:\n            nova:\n                pci:\n                  alias:\n                    type: multistring\n                    values:\n                      - '{\"vendor_id\": \"10de\", \"product_id\": \"2321\", \"device_type\": \"type-PCI\", \"name\": \"h100\", \"numa_policy\": \"preferred\"}'\n                      - '{\"vendor_id\": \"10de\", \"product_id\": \"1389\", \"device_type\": \"type-PCI\", \"name\": \"h100\", \"numa_policy\": \"preferred\"}'\n                  device_spec: >\n                    [{\"address\": \"0000:3f:00.0\"}, {\"address\": \"0000:56:00.0\"}]\n                filter_scheduler:\n                  enabled_filters: >\n                    ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,AggregateInstanceExtraSpecsFilter,NUMATopologyFilter,PciPassthroughFilter\n                  available_filters: nova.scheduler.filters.all_filters\n```\n\n----------------------------------------\n\nTITLE: Importing Existing OpenStack Keypair\nDESCRIPTION: Command to import an existing public key as an OpenStack keypair, typically from a local SSH key file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keypairs.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} keypair create --public-key ~/.ssh/id_rsa.pub KEY_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Octavia Installation Script\nDESCRIPTION: This command runs the Octavia installation script, which deploys Octavia using Helm.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n/opt/genestack/bin/install-octavia.sh\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Cluster with kubectl\nDESCRIPTION: Kubernetes manifest for creating a highly-available PostgreSQL cluster with 3 instances. Includes configuration for docker image, team ID, PostgreSQL version, resource parameters, volume size, and node affinity rules.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-postgresql.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: \"acid.zalan.do/v1\"\nkind: postgresql\nmetadata:\n  name: postgres-cluster\n  namespace: openstack\nspec:\n  dockerImage: ghcr.io/zalando/spilo-16:3.2-p3\n  teamId: \"acid\"\n  numberOfInstances: 3\n  postgresql:\n    version: \"16\"\n    parameters:\n      shared_buffers: \"2GB\"\n      max_connections: \"1024\"\n      log_statement: \"all\"\n  volume:\n    size: 40Gi\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n          - key: node-role.kubernetes.io/worker\n            operator: In\n            values:\n            - worker\nEOF\n```\n\n----------------------------------------\n\nTITLE: Change Master Replication Configuration\nDESCRIPTION: SQL command to configure master replication settings including host, credentials, and log position.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb-ops.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCHANGE MASTER TO MASTER_HOST='mariadb-cluster-1.mariadb-cluster-internal.openstack.svc.cluster.local', MASTER_USER='repl', MASTER_PASSWORD='<FIND ME IN K8s secret repl-password-mariadb-cluster>', MASTER_LOG_FILE='mariadb-cluster-bin.000206', MASTER_LOG_POS=405;\n```\n\n----------------------------------------\n\nTITLE: Creating an OVN Load Balancer in OpenStack CLI\nDESCRIPTION: This command creates a new load balancer using the OVN provider. It specifies the name, VIP subnet, and provider type.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer create --name OVN-Test --vip-subnet-id CLB-SUBNET-TEST --provider ovn\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing Node Labels with jq\nDESCRIPTION: Command to display node labels in a more readable JSON format using kubectl and jq. Extracts node names and their corresponding labels.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-labels.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Here is a way to make it look a little nicer:\nkubectl get nodes -o json | jq '[.items[] | {\"NAME\": .metadata.name, \"LABELS\": .metadata.labels}]'\n```\n\n----------------------------------------\n\nTITLE: Adding Gateway to OpenStack Router\nDESCRIPTION: Command to add an external gateway to an existing OpenStack router, optionally specifying fixed IP information for the connection.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add gateway\n    [--fixed-ip subnet=<subnet>,ip-address=<ip-address>]\n    <router>\n    <network>\n```\n\n----------------------------------------\n\nTITLE: Installing Sealed Secrets via Shell Script\nDESCRIPTION: References the installation script located at bin/install-sealed-secrets.sh that handles the deployment of Sealed Secrets.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-sealed-secrets.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-sealed-secrets.sh\"\n```\n\n----------------------------------------\n\nTITLE: Showing OpenStack Keypair Details\nDESCRIPTION: Command to display detailed information about a specific keypair in OpenStack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keypairs.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} keypair show\n    [--public-key]\n    [--user <user>]\n    [--user-domain <user-domain>]\n    <key>\n```\n\n----------------------------------------\n\nTITLE: Creating Load Balancer Pool in OpenStack\nDESCRIPTION: Creates a TCP load balancer pool using SOURCE_IP_PORT algorithm, attached to an HTTP listener. Demonstrates pool creation and listing.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer pool create --protocol TCP --lb-algorithm SOURCE_IP_PORT --listener HTTP-listener --name HTTP_POOL\n$ openstack --os-cloud default loadbalancer pool list\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Web Hosting in Swift\nDESCRIPTION: Demonstrates how to set up static web hosting using Swift Object Storage. It covers making a container publicly readable, setting the site index file, enabling file listing, and configuring custom error pages.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# swift post -r '.r:*,.rlistings' web_container\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift post -m 'web-index:index.html' web_container\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift post -m 'web-listings: true' web_container\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift post -m 'web-listings-css:listings.css' web_container\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift post -m 'web-error:error.html' web_container\n```\n\n----------------------------------------\n\nTITLE: Accessing Detailed Command Help in Swift\nDESCRIPTION: Demonstrates how to get detailed help for a specific Swift command by appending --help to the command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nswift list --help\n```\n\n----------------------------------------\n\nTITLE: Listing OVS and OVN Commands in Pod\nDESCRIPTION: This Perl script lists all available OVS and OVN commands in the bin directories of the pod, useful for discovering available troubleshooting tools.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndpkg -l | perl -lane '$package=$F[1];\n  next unless /ovn/ or /openv/;\n  chomp(@FILES = `dpkg -L $package`);\n  for (@FILES) {\n     next unless /bin/;\n    -f and print\n  }'\n```\n\n----------------------------------------\n\nTITLE: Checking OVS Manager Connection\nDESCRIPTION: This command uses the Kube-OVN kubectl plugin to check the OVS manager connection status for a specific node, ensuring proper OVS operation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko vsctl ${NODE} list manager\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Pods After Subnet CIDR Change\nDESCRIPTION: Script to identify and delete all pods not using host networking across all namespaces. This triggers pod recreation with new IP addresses from the updated subnet. Note that this will impact all service APIs temporarily.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-kube-ovn-re-ip.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfor ns in $(kubectl get ns --no-headers -o custom-columns=NAME:.metadata.name); do\n  for pod in $(kubectl get pod --no-headers -n \"$ns\" --field-selector spec.restartPolicy=Always -o custom-columns=NAME:.metadata.name,HOST:spec.hostNetwork | awk '{if ($2!=\"true\") print $1}'); do\n    kubectl delete pod \"$pod\" -n \"$ns\" --ignore-not-found --wait=False\n  done\ndone\n```\n\n----------------------------------------\n\nTITLE: Creating External Ceph ConfigMap for Gnocchi\nDESCRIPTION: Shell command to create a ConfigMap for external Ceph configuration. This includes settings for cephx authentication and requires manual input for the mon_host value.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -n openstack -f - <<EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ceph-etc\n  namespace: openstack\ndata:\n  ceph.conf: |\n    [global]\n    cephx = true\n    cephx_cluster_require_signatures = true\n    cephx_require_signatures = false\n    cephx_service_require_signatures = false\n    debug_ms = 0/0\n    log_file = /dev/stdout\n    mon_cluster_log_file = /dev/stdout\n    mon_host = REPLACE_ME\n\n    [client.admin]\n    keyring = /etc/ceph/ceph.client.admin.keyring\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Queue Size Alert in Prometheus\nDESCRIPTION: Example of a Prometheus alerting rule that monitors RabbitMQ queue size. The alert triggers when the queue size exceeds 25 for 5 minutes, with critical severity.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/alerting-info.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrabbitmq-alerts:\n  groups:\n  - name: Prometheus Alerts\n    rules:\n    - alert: RabbitQueueSizeTooLarge\n      expr: rabbitmq_queuesTotal>25\n      for: 5m\n      labels:\n        severity: critical\n      annotations:\n        summary: \"Rabbit queue size too large (instance {{ $labels.instance }} )\"\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenStack Router with CLI\nDESCRIPTION: Command to create a new router in OpenStack with various configuration options such as high availability, routing behavior, network connectivity, and security properties.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router create\n    [--extra-property type=<property_type>,name=<property_name>,value=<property_value>]\n    [--enable | --disable]\n    [--distributed | --centralized]\n    [--ha | --no-ha]\n    [--description <description>]\n    [--project <project>]\n    [--project-domain <project-domain>]\n    [--availability-zone-hint <availability-zone>]\n    [--tag <tag> | --no-tag]\n    [--external-gateway <network>]\n    [--fixed-ip subnet=<subnet>,ip-address=<ip-address>]\n    [--enable-snat | --disable-snat]\n    [--enable-ndp-proxy | --disable-ndp-proxy]\n    [--flavor <flavor-id>]\n    [--enable-default-route-bfd]\n    [--disable-default-route-bfd]\n    [--enable-default-route-ecmp]\n    [--disable-default-route-ecmp]\n    <name>\n```\n\n----------------------------------------\n\nTITLE: Deploying Rook Operator in Kubernetes\nDESCRIPTION: Applies the Kustomize configuration to deploy the Rook operator in the Kubernetes cluster. This is the first step in setting up Rook (Ceph) for storage management.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-operator/\n```\n\n----------------------------------------\n\nTITLE: Creating and Viewing a Host Aggregate in OpenStack\nDESCRIPTION: This snippet demonstrates how to create a new host aggregate named 'P40' and view its details using OpenStack CLI commands.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack aggregate create P40\n\nopenstack aggregate show P40\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Security Group Rule from Source Group in Openstack\nDESCRIPTION: Command to allow SSH access (port 22) only from instances in another security group. This provides more restricted remote administration access based on source grouping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create SECURITY_GROUP_NAME \\\n  --protocol tcp --dst-port 22:22 --remote-group SOURCE_GROUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating L3 (Tenant) Subnet in OpenStack\nDESCRIPTION: This command creates a subnet for the L3 (tenant) network. It sets the IP range, gateway, DNS, and allocation pool. Unlike the provider network subnets, it doesn't specify service types.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-neutron-networks.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default subnet create --subnet-range 10.0.10.0/24 \\\n                                           --gateway 10.0.10.1 \\\n                                           --dns-nameserver 1.1.1.1 \\\n                                           --allocation-pool start=10.0.10.2,end=10.0.10.254 \\\n                                           --dhcp \\\n                                           --network l3 \\\n                                           l3_subnet\n```\n\n----------------------------------------\n\nTITLE: Verifying Ceph ConfigMap for Gnocchi\nDESCRIPTION: Shell command to verify the contents of the Ceph ConfigMap created for Gnocchi. It retrieves and displays the ceph.conf data from the ConfigMap.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get configmap -n openstack ceph-etc -o \"jsonpath={.data['ceph\\.conf']}\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStack Client on Ubuntu or Debian\nDESCRIPTION: This command installs the OpenStack client on Ubuntu or Debian-based systems using the apt package manager.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\napt install python3-openstackclient\n```\n\n----------------------------------------\n\nTITLE: Associating QoS Policy with NetApp ONTAP Volume Type in OpenStack\nDESCRIPTION: This snippet demonstrates how to associate the created QoS policy with the 'netapp-1' volume type and then display the updated volume type details using the OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume qos associate 9435160f-0e4a-4486-88b0-d6beb022732a 1bdb5364-ed04-4bbe-8e41-9c5fae148c3d\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type show 1bdb5364-ed04-4bbe-8e41-9c5fae148c3d\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials for OpenStack Flex Object Storage\nDESCRIPTION: Credentials file setup for AWS CLI to authenticate with OpenStack Flex Object Storage using S3-compatible access keys.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\n[default]\naws_access_key_id = $ACCESS_ID\naws_secret_access_key = $SECRET_VALUE\n```\n\n----------------------------------------\n\nTITLE: Unsetting OpenStack Floating IP Properties\nDESCRIPTION: Command to unset port property from a floating IP.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip unset --port $VIP\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance Information in Genestack (Shell)\nDESCRIPTION: Fetches instance name and hypervisor hostname for a given UUID. This information is crucial for identifying the correct Kubernetes node and KVM instance name.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nopenstack server show ${UUID} -c OS-EXT-SRV-ATTR:instance_name -c hypervisor_hostname -f json\n```\n\n----------------------------------------\n\nTITLE: Converting CRDs Between Versions\nDESCRIPTION: Example of using kubectl convert to migrate Custom Resource Definitions from one version to another. This specific example shows converting from mmontes CRDs to official MariaDB ones.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get --namespace openstack crd.namespace -o yaml value > /tmp/value.crd.namespace.yaml\nkubectl convert -f /tmp/value.crd.namespace.yaml --output-version new-namespace/VERSION\n```\n\n----------------------------------------\n\nTITLE: Creating Openstack Load Balancer\nDESCRIPTION: Command to create a new load balancer with options for name, description, VIP configuration, project settings, provider details, and availability zone.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer create\n    [--name <name>]\n    [--description <description>]\n    [--vip-address <vip_address>]\n    [--vip-port-id <vip_port_id>]\n    [--vip-subnet-id <vip_subnet_id>]\n    [--vip-network-id <vip_network_id>]\n    [--vip-qos-policy-id <vip_qos_policy_id>]\n    [--additional-vip subnet-id=<name-or-uuid>[,ip-address=<ip>]]\n    [--project <project>]\n    [--provider <provider>]\n    [--availability-zone <availability_zone>]\n    [--enable | --disable]\n    [--flavor <flavor>]\n    [--wait]\n    [--tag <tag> | --no-tag]\n```\n\n----------------------------------------\n\nTITLE: Creating Openstack Security Group Rules\nDESCRIPTION: Generic command to create a new security group rule with specified protocol, port range, and remote IP address range. This defines what traffic is allowed to instances associated with the security group.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create SEC_GROUP_NAME \\\n    --protocol PROTOCOL --dst-port FROM_PORT:TO_PORT --remote-ip CIDR\n```\n\n----------------------------------------\n\nTITLE: Listing and Viewing OpenStack Images with CLI\nDESCRIPTION: This command lists OpenStack images with various optional parameters for sorting and filtering. It requires specifying the cloud name and can display public or private images, apply property filters, and adjust the output format.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-images.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image list\n    [--sort-column SORT_COLUMN]\n    [--sort-ascending | --sort-descending]\n    [--public | --private]\n    [--property <key=value>]\n    [--long]\n    [--sort <key>[:<direction>]]\n```\n\n----------------------------------------\n\nTITLE: Creating Flat Network in OpenStack\nDESCRIPTION: This command creates a shared provider flat network using the OpenStack CLI. It specifies the network type as flat and sets the physical network to 'physnet1'.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-neutron-networks.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default network create --share \\\n                                            --availability-zone-hint az1 \\\n                                            --external \\\n                                            --provider-network-type flat \\\n                                            --provider-physical-network physnet1 \\\n                                            flat\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Server with User Data\nDESCRIPTION: Example of creating an OpenStack server with user data file specification.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-servers.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create --image ubuntu-cloudimage \\\n                        --flavor 1 \\\n                        --user-data mydata.file \\\n                        $INSTANCE_UUID\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Swift Container\nDESCRIPTION: Demonstrates how to upload the contents of a folder to a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nswift upload flex-container01 example-files/\n```\n\n----------------------------------------\n\nTITLE: Deploying MariaDB Single Instance (AIO)\nDESCRIPTION: Deploys a single-instance MariaDB setup suitable for smaller environments where high availability is not critical.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack apply -k /etc/genestack/kustomize/mariadb-cluster/aio\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Credentials for OpenStack Flex Object Storage\nDESCRIPTION: Command to create EC2-compatible credentials for authenticating with the S3 API provided by OpenStack Flex Object Storage.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default ec2 credentials create\n```\n\n----------------------------------------\n\nTITLE: Creating QoS Policy for LVM Driver Volume Type in OpenStack\nDESCRIPTION: This snippet demonstrates how to create a QoS policy for the 'lvmdriver-1' volume type using the OpenStack CLI. It sets read and write IOPS limits per GB for both front-end and back-end consumers.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume qos create --consumer \"both\" --property \"read_iops_sec_per_gb=1\" --property \"write_iops_sec_per_gb=1\" lvmdriver-1-iops\n```\n\n----------------------------------------\n\nTITLE: Listing OpenStack Routers with CLI\nDESCRIPTION: Command to retrieve a list of all routers in an OpenStack environment. Various filtering and sorting options are available including by name, project, tags, and status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router list\n    [--sort-column SORT_COLUMN]\n    [--sort-ascending | --sort-descending]\n    [--name <name>]\n    [--enable | --disable]\n    [--long]\n    [--project <project>]\n    [--project-domain <project-domain>]\n    [--agent <agent-id>]\n    [--tags <tag>[,<tag>,...]]\n    [--any-tags <tag>[,<tag>,...]]\n    [--not-tags <tag>[,<tag>,...]]\n    [--not-any-tags <tag>[,<tag>,...]]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Vault in Kubernetes\nDESCRIPTION: Commands to initialize Vault, obtain unseal keys and root token, and unseal the Vault pods.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec vault-0 -n vault -- vault operator init -key-shares=3 -key-threshold=2 -format=json > cluster-keys.json\nkubectl exec -it vault-0 -n vault -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenStack Networks\nDESCRIPTION: Command to remove one or more OpenStack networks from the system. Multiple networks can be deleted in a single command by specifying multiple network identifiers.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} network delete <network> [<network> ...]\n```\n\n----------------------------------------\n\nTITLE: Removing OVN Configuration Label from Single Node\nDESCRIPTION: Command to remove the ovn.openstack.org/configured label from a specific node to trigger configuration reapplication by the ovn-setup daemonset.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-kube-ovn-openstack.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label nodes ${NODE_NAME} ovn.openstack.org/configured-\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Server with Config Drive\nDESCRIPTION: Example of creating an OpenStack server with config drive enabled and additional metadata parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-servers.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create --config-drive true \\\n                        --image my-image-name \\\n                        --flavor 1 \\\n                        --key-name mykey \\\n                        --user-data ./my-user-data.txt \\\n                        --property role=webservers \\\n                        --property essential=false \\\n                        $INSTANCE_UUID\n```\n\n----------------------------------------\n\nTITLE: Configuring Label-Based Overrides in YAML for Kubernetes and OpenStack\nDESCRIPTION: This YAML snippet demonstrates how to set label-based overrides for a cloud deployment with different CPU types, enabling additional scheduler filters and defining shared CPUs for heterogeneous computing. It includes configurations for default, AMD-3900, and Intel-12700 CPU types.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  nova:\n    filter_scheduler:\n      enabled_filters: >\n        ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,\n        ServerGroupAffinityFilter,PciPassthroughFilter\n      available_filters: nova.scheduler.filters.all_filters\n    pci:\n      alias: >\n        {\"vendor_id\": \"10de\", \"product_id\": \"1c30\", \"device_type\": \"type-PCI\", \"name\": \"p2000\"}\n  overrides:\n    nova_compute:  # Chart + \"_\" + Daemonset (nova_compute)\n      labels:\n        - label:\n            key: openstack-compute-cpu-type  # Defines a KEY\n            values:\n              - \"amd-3900\"  # Defines a VALUE\n          conf:\n            nova:\n              DEFAULT:\n                reserved_host_cpus: \"1\"\n              pci:\n                device_spec: >\n                  {\"vendor_id\": \"10de\", \"product_id\": \"1c30\"}\n        - label:\n            key: openstack-compute-cpu-type  # Defines a KEY\n            values:\n              - \"intel-12700\"  # Defines a VALUE\n          conf:\n            nova:\n              compute:\n                cpu_shared_set: \"0-15\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node-Specific Overrides in YAML for Kubernetes and OpenStack\nDESCRIPTION: This YAML snippet shows how to set node-specific overrides for OpenStack Nova compute. It configures the cpu_shared_set for a specific node without requiring additional labeling.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  overrides:\n    nova_compute:  # Chart + \"_\" + Daemonset (nova_compute)\n      hosts:\n        - name: ${NODE_NAME}  # Name of the node\n          conf:\n            nova:\n              compute:\n                cpu_shared_set: \"8-15\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Server with a Bootable Volume in Openstack\nDESCRIPTION: This command creates a server in Openstack, specifying a bootable volume as the boot device. It includes parameters for flavor, network, and volume ID.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create \\\n--flavor $FLAVOR --network $NETWORK \\\n--volume {Volume ID}\\\n--wait test-server\n```\n\n----------------------------------------\n\nTITLE: Verifying MetalLB Deployment in Kubernetes\nDESCRIPTION: This command checks the deployment status of the MetalLB controller in the 'metallb-system' namespace. It's used to verify that MetalLB has been successfully deployed.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-metallb.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace metallb-system get deployment.apps/metallb-controller\n```\n\n----------------------------------------\n\nTITLE: Generating Required Secrets for Glance Deployment in Shell\nDESCRIPTION: Shell commands to create necessary Kubernetes secrets for Glance deployment, including RabbitMQ credentials, database passwords, and admin credentials. Each secret is generated with random strings for security.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-glance.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic glance-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"glance\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic glance-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic glance-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kube-OVN NB and SB Status\nDESCRIPTION: These commands check the status of the Kube-OVN northbound (NB) and southbound (SB) databases using the kubectl plugin.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko nb status\nkubectl ko sb status\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Container in Swift\nDESCRIPTION: Shows how to create a new container named 'flex-container01' using the Swift client.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nswift post flex-container01\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Authentication in Vault\nDESCRIPTION: Commands to enable Kubernetes authentication method and configure Kubernetes connection in Vault.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec --stdin=true --tty=true vault-0 -n vault -- vault auth enable -path genestack kubernetes\nkubectl exec --stdin=true --tty=true vault-0 -n vault -- sh\nvault write auth/genestack/config  kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NetApp Backend in Helm\nDESCRIPTION: YAML configuration for setting up NetApp ONTAP backend drivers in Cinder. Defines multiple backend configurations with specific storage parameters including encryption, compression, and provisioning settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-netapp-worker.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  backends:\n    block-ha-performance-at-rest-encrypted:\n      netapp_login: <LOGIN>\n      netapp_password: <PASSWORD>\n      netapp_server_hostname: <SERVER_NAME_OR_ADDRESS>\n      netapp_server_port: <SERVER_PORT>\n      netapp_storage_family: ontap_cluster\n      netapp_storage_protocol: iscsi\n      netapp_transport_type: http\n      netapp_vserver: <VSERVER>\n      netapp_dedup: True\n      netapp_compression: True\n      netapp_thick_provisioned: True\n      netapp_lun_space_reservation: enabled\n      volume_driver: cinder.volume.drivers.netapp.common.NetAppDriver\n      volume_backend_name: block-ha-performance-at-rest-encrypted\n    block-ha-standard-at-rest-encrypted:\n      netapp_login: <LOGIN>\n      netapp_password: <PASSWORD>\n      netapp_server_hostname: <SERVER_NAME_OR_ADDRESS>\n      netapp_server_port: <SERVER_PORT>\n      netapp_storage_family: ontap_cluster\n      netapp_storage_protocol: iscsi\n      netapp_transport_type: http\n      netapp_vserver: <VSERVER>\n      netapp_dedup: True\n      netapp_compression: True\n      netapp_thick_provisioned: True\n      netapp_lun_space_reservation: enabled\n      volume_driver: cinder.volume.drivers.netapp.common.NetAppDriver\n      volume_backend_name: block-ha-standard-at-rest-encrypted\n```\n\n----------------------------------------\n\nTITLE: Creating L3 (Tenant) Network in OpenStack\nDESCRIPTION: This command creates a tenant network (L3 network) using the OpenStack CLI. It's a simple command that only specifies the network name.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-neutron-networks.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default network create l3\n```\n\n----------------------------------------\n\nTITLE: Creating Rackspace Cloud Domain in OpenStack\nDESCRIPTION: This command creates a new domain in OpenStack specifically for Rackspace Cloud integration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-federation.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default domain create rackspace_cloud_domain\n```\n\n----------------------------------------\n\nTITLE: Setting OpenStack Network Properties\nDESCRIPTION: Command to modify existing OpenStack network properties such as name, security settings, and network type parameters after creation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} network set\n    [--extra-property type=<property_type>,name=<property_name>,value=<property_value>]\n    [--name <name>]\n    [--enable | --disable]\n    [--share | --no-share]\n    [--description <description>]\n    [--mtu <mtu>]\n    [--enable-port-security | --disable-port-security]\n    [--external | --internal]\n    [--default | --no-default]\n    [--qos-policy <qos-policy> | --no-qos-policy]\n    [--tag <tag>]\n    [--no-tag]\n    [--provider-network-type <provider-network-type>]\n    [--provider-physical-network <provider-physical-network>]\n    [--provider-segment <provider-segment>]\n    [--dns-domain <dns-domain>]\n    <network>\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Stack in Kubernetes\nDESCRIPTION: Script command to deploy the Prometheus monitoring stack using a provided installation script.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/opt/genestack/bin/install-prometheus.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Openstack Security Group Rules\nDESCRIPTION: Command to list all rules associated with a specific security group. This shows the current configuration of allowed traffic for the group.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule list SECURITY_GROUP_NAME\n```\n\n----------------------------------------\n\nTITLE: MariaDB Replication Commands\nDESCRIPTION: Commands for stopping and resetting slave replication settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb-ops.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSTOP SLAVE; RESET SLAVE ALL; STOP SLAVE 'mariadb-operator'; RESET SLAVE 'mariadb-operator' ALL;\n```\n\n----------------------------------------\n\nTITLE: Removing Stuck Kubernetes Finalizers\nDESCRIPTION: Patches Kubernetes resources to remove finalizers that may be preventing deletion. This is useful when operators or API references have changed, causing finalizers to become stuck.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch $@ --type='json' -p='[{\"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for NetApp Backend Configuration\nDESCRIPTION: This command creates a Kubernetes secret that stores the NetApp backend configuration as an opaque environment variable. The BACKENDS variable contains the configuration parameters including backend name, credentials, network settings, and storage options.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-netapp-container.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack create secret generic cinder-netapp \\\n        --type Opaque \\\n        --from-literal=BACKENDS=\"backend1,user1,password1,host1,80,vserver1,qos1,True,True,False,enabled\"\n```\n\n----------------------------------------\n\nTITLE: Example Metric Measures Query\nDESCRIPTION: Example showing how to retrieve metric measures within a specific time range using mean aggregation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack metric measures show <metric_id> --aggregation mean --start 2024-01-01 --stop 2024-01-31\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Role to Platform-Services-Core User for Default Domain\nDESCRIPTION: Assigns the 'reader' role to the platform-services-core user in the default domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core --domain default reader --inherited\n```\n\n----------------------------------------\n\nTITLE: Creating ICMP (Ping) Security Group Rule from All IPs in Openstack\nDESCRIPTION: Command to allow all ICMP traffic (ping) from any IP address to instances in the specified security group. This enables network diagnostic access to the instances.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create --protocol icmp \\\nSECURITY_GROUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy and Role for Keystone Secrets\nDESCRIPTION: Commands to create a Vault policy for accessing Keystone secrets and a role to restrict access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault policy write osh - <<EOF\npath \"osh/*\" {\n   capabilities = [\"read\"]\n}\nEOF\n\nvault write auth/genestack/role/osh \\\n   bound_service_account_names=default \\\n   bound_service_account_namespaces=openstack \\\n   policies=osh \\\n   audience=vault \\\n   ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Querying Container Statistics in OpenStack Swift\nDESCRIPTION: This command retrieves statistics for a specific container in OpenStack Swift, including overall usage information. It's useful for monitoring storage utilization as part of a cost management strategy.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nswift stat container\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Volume Sizes for OpenStack Volume Type\nDESCRIPTION: These shell commands set the minimum and maximum volume sizes for the 'lvmdriver-1' volume type in OpenStack. The minimum size is set to 10 GB and the maximum size to 2 TB (2048 GB). The commands are executed within a Kubernetes pod running an OpenStack admin client.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-provisioning-specs.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type set --property provisioning:min_vol_size=10 6af6ade2-53ca-4260-8b79-1ba2f208c91d\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type set --property provisioning:max_vol_size=2048 6af6ade2-53ca-4260-8b79-1ba2f208c91d\n```\n\n----------------------------------------\n\nTITLE: Registering Rackspace Mapping in Keystone\nDESCRIPTION: This command creates a mapping in Keystone using the previously defined JSON file, setting the schema version to 2.0.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-federation.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default mapping create --rules /tmp/mapping.json --schema-version 2.0 rackspace_mapping\n```\n\n----------------------------------------\n\nTITLE: Creating New Instance from Snapshot\nDESCRIPTION: Creates a new OpenStack instance using a previously created snapshot image.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create --flavor m1.tiny --image myInstanceSnapshot myNewInstance\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenStack Service Pods on New Node\nDESCRIPTION: Checks that all required OpenStack service pods are running on the newly added compute node by querying the OpenStack namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n openstack -o wide | grep \"computegpu\"\n```\n\n----------------------------------------\n\nTITLE: Listing Openstack Security Groups\nDESCRIPTION: Command to list and view all current security groups in an Openstack cloud environment. The cloud name parameter specifies which cloud configuration to use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group list\n```\n\n----------------------------------------\n\nTITLE: Mounting NBD Device Partition\nDESCRIPTION: Mounts the specified partition of the NBD device to the created mount point.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmount /dev/nbd0p1 /mnt/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Cleaning Cached Helm Charts\nDESCRIPTION: Removes all cached Helm charts from the Genestack kustomize directory. This step is essential before performing upgrades to ensure that the latest chart versions are used.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfind /etc/genestack/kustomize/ -name charts -type d -exec rm -rf {} \\;\n```\n\n----------------------------------------\n\nTITLE: Obtaining Project List with Unscoped Token in OpenStack CLI\nDESCRIPTION: This command authenticates with an unscoped token to list all available projects for a user. It requires the authentication URL, username, password, and domain name as parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-getting-started-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack project list --os-auth-url ${AUTH_URL} \\\n                       --os-username ${USERNAME} \\\n                       --os-password ${PASSWORD} \\\n                       --os-user-domain-name ${DOMAIN_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Flavors with Custom Properties using Shell Commands\nDESCRIPTION: This code snippet demonstrates how to create OpenStack flavors using the 'openstack' CLI command. It sets various properties including RAM, vCPUs, disk size, and network bandwidth limits. The commands create multiple flavors with different specifications for general purpose use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 2048 --vcpu 1 --disk 10 --ephemeral 0 --swap 0 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"250000\" --property \"quota:vif_inbound_burst\"=\"250000\" --property \"quota:vif_inbound_average\"=\"125000\" --property \"quota:vif_outbound_peak\"=\"250000\" --property \"quota:vif_outbound_burst\"=\"250000\" --property \"quota:vif_outbound_average\"=\"125000\" gp.0.1.2\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 4096 --vcpu 1 --disk 10 --ephemeral 0 --swap 0 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"500000\" --property \"quota:vif_inbound_burst\"=\"500000\" --property \"quota:vif_inbound_average\"=\"250000\" --property \"quota:vif_outbound_peak\"=\"500000\" --property \"quota:vif_outbound_burst\"=\"500000\" --property \"quota:vif_outbound_average\"=\"250000\" gp.0.1.4\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 2048 --vcpu 2 --disk 40 --ephemeral 0 --swap 1024 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"250000\" --property \"quota:vif_inbound_burst\"=\"250000\" --property \"quota:vif_inbound_average\"=\"125000\" --property \"quota:vif_outbound_peak\"=\"250000\" --property \"quota:vif_outbound_burst\"=\"250000\" --property \"quota:vif_outbound_average\"=\"125000\" gp.0.2.2\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 4096 --vcpu 2 --disk 40 --ephemeral 0 --swap 1024 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"500000\" --property \"quota:vif_inbound_burst\"=\"500000\" --property \"quota:vif_inbound_average\"=\"250000\" --property \"quota:vif_outbound_peak\"=\"500000\" --property \"quota:vif_outbound_burst\"=\"500000\" --property \"quota:vif_outbound_average\"=\"250000\" gp.0.2.4\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 6144 --vcpu 2 --disk 40 --ephemeral 0 --swap 1024 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"500000\" --property \"quota:vif_inbound_burst\"=\"500000\" --property \"quota:vif_inbound_average\"=\"312500\" --property \"quota:vif_outbound_peak\"=\"500000\" --property \"quota:vif_outbound_burst\"=\"500000\" --property \"quota:vif_outbound_average\"=\"312500\" gp.0.2.6\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 8192 --vcpu 2 --disk 40 --ephemeral 0 --swap 1024 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"750000\" --property \"quota:vif_inbound_burst\"=\"750000\" --property \"quota:vif_inbound_average\"=\"375000\" --property \"quota:vif_outbound_peak\"=\"750000\" --property \"quota:vif_outbound_burst\"=\"750000\" --property \"quota:vif_outbound_average\"=\"375000\" gp.0.2.8\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 4096 --vcpu 4 --disk 80 --ephemeral 64 --swap 4096 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"500000\" --property \"quota:vif_inbound_burst\"=\"500000\" --property \"quota:vif_inbound_average\"=\"250000\" --property \"quota:vif_outbound_peak\"=\"500000\" --property \"quota:vif_outbound_burst\"=\"500000\" --property \"quota:vif_outbound_average\"=\"250000\" gp.0.4.4\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 8192 --vcpu 4 --disk 80 --ephemeral 64 --swap 4096 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"750000\" --property \"quota:vif_inbound_burst\"=\"750000\" --property \"quota:vif_inbound_average\"=\"375000\" --property \"quota:vif_outbound_peak\"=\"750000\" --property \"quota:vif_outbound_burst\"=\"750000\" --property \"quota:vif_outbound_average\"=\"375000\" gp.0.4.8\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 12288 --vcpu 4 --disk 80 --ephemeral 64 --swap 4096 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"750000\" --property \"quota:vif_inbound_burst\"=\"750000\" --property \"quota:vif_inbound_average\"=\"437500\" --property \"quota:vif_outbound_peak\"=\"750000\" --property \"quota:vif_outbound_burst\"=\"750000\" --property \"quota:vif_outbound_average\"=\"437500\" gp.0.4.12\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 16384 --vcpu 4 --disk 80 --ephemeral 64 --swap 4096 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"1000000\" --property \"quota:vif_inbound_burst\"=\"1000000\" --property \"quota:vif_inbound_average\"=\"500000\" --property \"quota:vif_outbound_peak\"=\"1000000\" --property \"quota:vif_outbound_burst\"=\"1000000\" --property \"quota:vif_outbound_average\"=\"500000\" gp.0.4.16\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 16384 --vcpu 8 --disk 160 --ephemeral 128 --swap 8192 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=general_purpose\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"1000000\" --property \"quota:vif_inbound_burst\"=\"1000000\" --property \"quota:vif_inbound_average\"=\"500000\" --property \"quota:vif_outbound_peak\"=\"1000000\" --property \"quota:vif_outbound_burst\"=\"1000000\" --property \"quota:vif_outbound_average\"=\"500000\" gp.0.8.16\n```\n\n----------------------------------------\n\nTITLE: Deployment and Service Management Commands\nDESCRIPTION: Shell commands for deploying the NetApp Volume Worker and verifying its status through DNS service restart, ansible deployment, and OpenStack volume service listing.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-netapp-worker.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl restart systemd-resolved.service\n```\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i inventory-example.yaml deploy-cinder-volumes-netapp-reference.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume service list\n```\n\n----------------------------------------\n\nTITLE: Creating LUKS Encrypted Volume Type in OpenStack\nDESCRIPTION: Command to create a new volume type with LUKS encryption using AES-XTS cipher and front-end encryption control. This configuration is applied to an LVM iSCSI backend.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-fips-encryption.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type create --encryption-provider luks \\\n--encryption-cipher aes-xts-plain64 --encryption-key-size 256 \\\n--encryption-control-location front-end --property volume_backend_name=LVM_iSCSI lvmdriver-1\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Object Metadata in Swift\nDESCRIPTION: Shows how to add custom metadata to objects in Swift using both the Swift CLI and cURL commands. This is useful for tagging objects with additional information.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nswift upload -m \"X-Object-Meta-Security: TopSecret\" HR_files payroll_information.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"X-Auth-Token:$TOKEN\" -H 'X-Object-Meta-Security: TopSecret' $STORAGE_URL/HR_files/payroll_information.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Load Balancer Providers in Octavia\nDESCRIPTION: This command lists all available load balancer providers in Octavia, showing their names and descriptions.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer provider list\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Group for TopoLVM Storage\nDESCRIPTION: Shell commands for creating a physical volume and volume group named 'vg-general' required for TopoLVM operation. The commands initialize a physical device and create a volume group that TopoLVM will use for storage provisioning.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-topolvm.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# NOTE sdX is a placeholder for a physical drive or partition.\npvcreate /dev/sdX\nvgcreate vg-general /dev/sdX\n```\n\n----------------------------------------\n\nTITLE: Listing OVN Central Pods\nDESCRIPTION: This command lists all OVN central pods in the kube-system namespace, which are crucial for OVN operation in the cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n kube-system get pod -l app=ovn-central\n```\n\n----------------------------------------\n\nTITLE: Displaying NetApp ONTAP Volume Type Details in OpenStack\nDESCRIPTION: This snippet shows how to display the details of the 'netapp-1' volume type using the OpenStack CLI. It includes information such as ID, name, and associated properties.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type show 1bdb5364-ed04-4bbe-8e41-9c5fae148c3d\n```\n\n----------------------------------------\n\nTITLE: Listing All Pods on a Kubernetes Node\nDESCRIPTION: This command lists all pods running on a specific Kubernetes node across all namespaces, useful for troubleshooting node-specific issues.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods --all-namespaces --field-selector spec.nodeName=${NODE}\n```\n\n----------------------------------------\n\nTITLE: Verifying ArgoCD Deployment Readiness with kubectl\nDESCRIPTION: This command allows you to monitor the horizontal pod autoscaler for the ArgoCD deployment. The '-w' flag enables watching the resource for changes in real-time.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-argocd.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace argocd get horizontalpodautoscaler.autoscaling argocd -w\n```\n\n----------------------------------------\n\nTITLE: Listing Volumes in Openstack\nDESCRIPTION: This command lists all volumes in Openstack, allowing you to check the status and attachment of volumes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} volume list\n```\n\n----------------------------------------\n\nTITLE: Making a Swift Container Public\nDESCRIPTION: Demonstrates how to set a container to be publicly readable using a custom header.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nswift post --header \"X-Container-Read: .r:*\" flex-container01\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository\nDESCRIPTION: Commands to add the Grafana Helm repository and update local repository cache\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-loki.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Server from Image with CLI\nDESCRIPTION: This command creates a new OpenStack server instance from an image. It requires specifying the cloud name, server name, flavor ID, image ID, and various optional parameters such as key name, user data, security group, and additional properties.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-images.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create --flavor FLAVOR_ID --image IMAGE_ID --key-name KEY_NAME \\\n  --user-data USER_DATA_FILE --security-group SEC_GROUP_NAME --property KEY=VALUE \\\n  INSTANCE_NAME\n```\n\n----------------------------------------\n\nTITLE: Updating a Flavor Profile in Octavia\nDESCRIPTION: These commands demonstrate how to update an existing flavor profile in Octavia. The first example changes the topology, while the second adds more provider capabilities.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack loadbalancer flavorprofile set --flavor-data '{\"loadbalancer_topology\": \"ACTIVE_STANDBY\"}' 5f4d2c7c-e294-4a9c-b97a-54a2b97a17a5\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack loadbalancer flavorprofile set --flavor-data '{\"loadbalancer_topology\": \"ACTIVE_STANDBY\", \"amp_image_tag\": \"amphora-image-v2\", \"sriov_vip\": false}' 5f4d2c7c-e294-4a9c-b97a-54a2b97a17a5\n```\n\n----------------------------------------\n\nTITLE: Running OVS Command in OVS-OVN Pod\nDESCRIPTION: This command demonstrates how to run an OVS command (ovs-vsctl list manager) directly in an OVS-OVN pod without entering an interactive shell.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n kube-system exec -it ovs-ovn-XXXX -- ovs-vsctl list manager\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Keypair for Kubernetes Cluster Access\nDESCRIPTION: Generates a new SSH keypair named 'mykey' and saves the private key to a local file. This keypair will be used for secure access to the compute instances in the Magnum cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack keypair create mykey > mykey.pem\n```\n\n----------------------------------------\n\nTITLE: Disabling a Flavor in Octavia\nDESCRIPTION: This command demonstrates how to disable an existing flavor in Octavia using its ID.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack loadbalancer flavor set --disable 3480b6d0-b803-4373-b701-53420d895059\n```\n\n----------------------------------------\n\nTITLE: Configuring NetApp Volume Type Properties in OpenStack\nDESCRIPTION: Commands to set and unset deduplication and compression properties on NetApp volume types using kubectl to execute OpenStack commands. These commands are executed through the openstack-admin-client pod in the OpenStack namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-type-specs.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type set --property netapp_dedup='true' <VOLUME_TYPE_ID>\n\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type set --property netapp_compression='true' <VOLUME_TYPE_ID>\n\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type unset --property netapp_dedup <VOLUME_TYPE_ID>\n\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type unset --property netapp_compression <VOLUME_TYPE_ID>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Genestack MySQL Database (Shell)\nDESCRIPTION: Establishes a connection to the MariaDB database used by Genestack. It retrieves the root password from Kubernetes secrets and connects to the primary database node.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nmysql -u root \\\n-p$(kubectl --namespace openstack get secret mariadb -o jsonpath='{.data.root-password}' | base64 -d) \\\n-h mariadb-cluster-primary.openstack.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Trait Requirement on Flavor in OpenStack\nDESCRIPTION: This snippet shows how to set the custom GPU trait as a required property for a specific flavor (gpu-flavor1) in OpenStack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack flavor set --property trait:CUSTOM_HW_GPU=required gpu-flavor1\n```\n\n----------------------------------------\n\nTITLE: Setting OVN Integration Bridge Annotation\nDESCRIPTION: Annotates Kubernetes nodes with the OVS integration bridge name (br-int) for nodes labeled as OpenStack compute and network nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n        nodes \\\n        -l openstack-compute-node=enabled -l openstack-network-node=enabled \\\n        ovn.openstack.org/int_bridge='br-int'\n```\n\n----------------------------------------\n\nTITLE: Deploying Ceph on PVC for Genestack\nDESCRIPTION: This command deploys Ceph using external PVCs through a Kustomize configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-external-block.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-cluster-external-pvc/\n```\n\n----------------------------------------\n\nTITLE: Draining and rebooting a Kubernetes gateway node\nDESCRIPTION: This snippet shows the process of safely draining a Kubernetes gateway node, rebooting it, and then uncordoning it to bring it back into the cluster. This can be useful for resolving transient issues or applying system updates.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-alert-claim-storm.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl drain <gateway-node> --ignore-daemonsets --delete-local-data --force\n# reboot the node\nkubectl uncordon <gateway-node> # after return from reboot\n```\n\n----------------------------------------\n\nTITLE: Adding Subnet to OpenStack Router\nDESCRIPTION: Command to connect a subnet to a router, which enables traffic routing between the subnet and other networks connected to the router.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add subnet <router> <subnet>\n```\n\n----------------------------------------\n\nTITLE: Moving Octavia Amphora Provider Configuration\nDESCRIPTION: This command moves the generated Octavia amphora provider configuration file to the appropriate directory for inclusion in the Octavia deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmv ~/octavia_amphora_provider.yaml /etc/genestack/helm-configs/octavia/\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Address Pairs for Instance Ports in OpenStack\nDESCRIPTION: These commands set the allowed-address-pairs for the ports of the two instances. They first list the ports for each server, then set the allowed address to the VIP. Note that only the IP address is specified, without a netmask, due to OVN limitations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} port list server tester1 # retrieve port UUID\nopenstack --os-cloud={cloud name} port set --allowed-address ip-address=<VIP> <port1UUID>\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} port list server tester2 # retrieve port UUID\nopenstack --os-cloud={cloud name} port set --allowed-address ip-address=<VIP> <port2UUID>\n```\n\n----------------------------------------\n\nTITLE: Associating QoS Policy with LVM Driver Volume Type in OpenStack\nDESCRIPTION: This snippet shows how to associate the created QoS policy with the 'lvmdriver-1' volume type using the OpenStack CLI. It requires the QOS_ID and VOLUME_TYPE_ID as parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume qos associate b35fdf9c-d5bd-40f9-ae3a-8605c246ef2e 6af6ade2-53ca-4260-8b79-1ba2f208c91d\n```\n\n----------------------------------------\n\nTITLE: Creating Zamboni User in OpenStack\nDESCRIPTION: Creates a new user named 'zamboni' in the platform-services project with the specified password.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default user create --project platform-services --password ${PASSWORD} zamboni --domain default\n```\n\n----------------------------------------\n\nTITLE: Deleting Openstack Load Balancer\nDESCRIPTION: Command to delete a load balancer with options for cascade deletion and wait flag.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer delete [--cascade] [--wait] <load_balancer>\n```\n\n----------------------------------------\n\nTITLE: Setting OVN Gateway Nodes\nDESCRIPTION: Designates which nodes will serve as OVN gateways in the environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n        nodes \\\n        -l openstack-network-node=enabled \\\n        ovn.openstack.org/gateway='enabled'\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack namespace in Kubernetes using Kustomize\nDESCRIPTION: This command applies a kustomization to create the OpenStack namespace and required resources from a predefined configuration path.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-namespace.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/openstack\n```\n\n----------------------------------------\n\nTITLE: Listing OpenStack Networks with Filtering Options\nDESCRIPTION: Command to list all available OpenStack networks with extensive filtering options including status, network type, and tag-based filtering.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} network list\n    [--sort-column SORT_COLUMN]\n    [--sort-ascending | --sort-descending]\n    [--external | --internal]\n    [--long]\n    [--name <name>]\n    [--enable | --disable]\n    [--project <project>]\n    [--project-domain <project-domain>]\n    [--share | --no-share]\n    [--status <status>]\n    [--provider-network-type <provider-network-type>]\n    [--provider-physical-network <provider-physical-network>]\n    [--provider-segment <provider-segment>]\n    [--agent <agent-id>]\n    [--tags <tag>[,<tag>,...]]\n    [--any-tags <tag>[,<tag>,...]]\n    [--not-tags <tag>[,<tag>,...]]\n    [--not-any-tags <tag>[,<tag>,...]]\n\n```\n\n----------------------------------------\n\nTITLE: Importing OpenStack Snapshot\nDESCRIPTION: Imports a snapshot image into a new OpenStack environment with specified format settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image create NEW_IMAGE_NAME \\\n  --container-format bare --disk-format qcow2 --file IMAGE_URL\n```\n\n----------------------------------------\n\nTITLE: Deleting Versioned Objects in Swift\nDESCRIPTION: Shows how to delete a versioned object in Swift, which copies the current version to the archive container and deletes it from the current container. It also demonstrates how to list older versions after deletion.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current/my_object -X DELETE -H \"X-Auth-Token: $token\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/archive?prefix=009my_object -X GET -H \"X-Auth-Token: $token\"\n```\n\n----------------------------------------\n\nTITLE: Checking OVS Integration Bridge Ports in Genestack (Shell)\nDESCRIPTION: Verifies if specific tap devices are present on the OVS integration bridge. This helps in confirming the network setup for a particular instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko ${NODE} ofctl show br-int | grep -iE 'tap28144317-cd|tap3e6fb108-a4'\n```\n\n----------------------------------------\n\nTITLE: Creating LVM Volume Type in Cinder\nDESCRIPTION: Command to create the 'lvmdriver-1' volume type in Cinder, which is necessary for scheduling volumes to the LVM backend. This maps volume requests to the appropriate backend driver.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume type create lvmdriver-1\n+-------------+--------------------------------------+\n| Field       | Value                                |\n+-------------+--------------------------------------+\n| description | None                                 |\n| id          | 6af6ade2-53ca-4260-8b79-1ba2f208c91d |\n| is_public   | True                                 |\n| name        | lvmdriver-1                          |\n+-------------+--------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting OVN Port Mappings\nDESCRIPTION: Maps OVS interfaces to physical interfaces on the nodes using annotations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n        nodes \\\n        -l openstack-compute-node=enabled -l openstack-network-node=enabled \\\n        ovn.openstack.org/ports='br-ex:bond1'\n```\n\n----------------------------------------\n\nTITLE: Executing Neutron Installation Script\nDESCRIPTION: Shell script reference for deploying Neutron components via the install-neutron.sh script.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-neutron.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-neutron.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana Database Secret in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes secret for Grafana database credentials, generating random passwords for the database user and root.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/grafana.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace grafana \\\n        create secret generic grafana-db \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\" \\\n        --from-literal=root-password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\" \\\n        --from-literal=username=grafana\n```\n\n----------------------------------------\n\nTITLE: Checking Kube-OVN NB Database Status\nDESCRIPTION: This command checks the status of the Kube-OVN northbound (NB) database using the kubectl plugin.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko nb dbstatus\n```\n\n----------------------------------------\n\nTITLE: Retrieving the CA Certificate from Kubernetes Secret\nDESCRIPTION: Demonstrates how to retrieve the created CA certificate from the Kubernetes secret using kubectl commands, decoding it from base64 format.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-ca-issuer.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret -n cert-manager public-endpoint-ca-secret -o jsonpath='{.data.tls\\.crt}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Optimized OpenStack Flavors with CLI\nDESCRIPTION: These commands create memory optimized flavors with varying specifications for RAM, CPU, disk, and network quotas. They set properties for hardware constraints, architecture, and network traffic limits.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create --description \"Useful Information for users\" --ram 12288 --vcpu 2 --disk 80 --ephemeral 0 --swap 0 --property \"hw:mem_page_size=any\" --property \"hw:cpu_max_threads=1\" --property \"hw:cpu_max_sockets=2\" --property \":category=memory_optimized\" --property \":architecture=x86_architecture\" --property \"quota:vif_inbound_peak\"=\"750000\" --property \"quota:vif_inbound_burst\"=\"750000\" --property \"quota:vif_inbound_average\"=\"437500\" --property \"quota:vif_outbound_peak\"=\"750000\" --property \"quota:vif_outbound_burst\"=\"750000\" --property \"quota:vif_outbound_average\"=\"437500\" mo.0.2.12\n```\n\n----------------------------------------\n\nTITLE: Creating Subnet for Shared Floating IP Network in OpenStack\nDESCRIPTION: This command creates a subnet for the previously created network. It specifies the network, subnet range, and subnet name. The $CIDR variable should be replaced with the actual CIDR notation for the subnet range.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} subnet create --network tester-network \\\n                            --subnet-range $CIDR \\\n                            tester-subnet\n```\n\n----------------------------------------\n\nTITLE: Adding Floating IP to Bastion Server in OpenStack\nDESCRIPTION: This command adds a floating IP to the bastion server. The $UUID should be replaced with the UUID or IP of the floating IP to be added.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server add floating ip tester-bastion $UUID\n```\n\n----------------------------------------\n\nTITLE: Connecting QEMU-NBD to OpenStack Instance Disk\nDESCRIPTION: Associates an instance disk file with the NBD block device for mounting and access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqemu-nbd --connect=/dev/nbd0 /var/lib/nova/instances/00000000-0000-0000-0000-000000000000/disk\n```\n\n----------------------------------------\n\nTITLE: Validating Longhorn Pod Deployment\nDESCRIPTION: Command to check the status of Longhorn pods in the longhorn-system namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n longhorn-system get pod\n```\n\n----------------------------------------\n\nTITLE: Obtaining OpenStack Token with MFA\nDESCRIPTION: Command to obtain an OpenStack authentication token using multi-factor authentication. The token is stored in an environment variable for subsequent use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport OS_TOKEN=$(openstack --os-cloud regionone-mfa token issue -c id -f value)\n```\n\n----------------------------------------\n\nTITLE: Using Token-based Authentication with OpenStack CLI\nDESCRIPTION: Example of how to use a previously obtained token for OpenStack CLI commands. This method avoids having to provide MFA credentials for each command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud regionone-token ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GPU Trait in OpenStack Placement API\nDESCRIPTION: This snippet demonstrates how to create a custom trait called 'CUSTOM_HW_GPU' using the OpenStack Placement API.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-placement-api-version 1.6 trait create CUSTOM_HW_GPU\n```\n\n----------------------------------------\n\nTITLE: Listing Kube-OVN Controller Pods\nDESCRIPTION: Command to list kube-ovn-controller pods in the kube-system namespace with detailed information including ClusterIPs.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-monitoring-introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kube-system get pod -l app=kube-ovn-controller -o wide\n```\n\n----------------------------------------\n\nTITLE: Creating Volume Group for Cinder LVM Driver\nDESCRIPTION: Command to create the required volume group 'cinder-volumes-1' using the previously created physical volume. This volume group will be used by the Cinder LVM driver to create logical volumes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvgcreate cinder-volumes-1 /dev/vdf\n```\n\n----------------------------------------\n\nTITLE: Verifying Memcached Cluster Readiness\nDESCRIPTION: Command to check the status of the Memcached horizontal pod autoscaler in the OpenStack namespace. The '-w' flag watches for changes to the resource.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-memcached.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack get horizontalpodautoscaler.autoscaling memcached -w\n```\n\n----------------------------------------\n\nTITLE: Installing Cinder via Shell Script\nDESCRIPTION: Reference to the main Cinder installation script located at bin/install-cinder.sh. The script handles the deployment of Cinder services in the Kubernetes environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-cinder.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Metrics in OpenStack\nDESCRIPTION: Commands for creating new metrics and associating them with resources.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack metric create <metric_name> \\\n  --resource-id <resource_id> \\\n  --archive-policy-name <policy_name>\n```\n\n----------------------------------------\n\nTITLE: Network Plugin Configuration Update\nDESCRIPTION: Diff showing the modification of network plugin settings in Kubernetes cluster configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn-helm-conversion.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- a/inventory/group_vars/k8s_cluster/k8s-cluster.yml\n+++ b/inventory/group_vars/k8s_cluster/k8s-cluster.yml\n@@ -67,7 +67,7 @@ credentials_dir: \"{{ inventory_dir }}/credentials\"\n\n # Choose network plugin (cilium, calico, kube-ovn, weave, flannel or none. Use cni for generic cni plugin)\n # Can also be set to 'cloud', which lets the cloud provider setup appropriate routing\n-kube_network_plugin: kube-ovn\n+kube_network_plugin: none\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Test Volume\nDESCRIPTION: Commands to create a test volume and list volumes to validate the Cinder setup is working correctly. The volume is created with a size of 1GB and the lvmdriver-1 type.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume create --size 1 test\n+---------------------+--------------------------------------+\n| Field               | Value                                |\n+---------------------+--------------------------------------+\n| attachments         | []                                   |\n| availability_zone   | az1                                  |\n| bootable            | false                                |\n| consistencygroup_id | None                                 |\n| created_at          | 2023-12-26T17:46:15.639697           |\n| description         | None                                 |\n| encrypted           | False                                |\n| id                  | c744af27-fb40-4ffa-8a84-b9f44cb19b2b |\n| migration_status    | None                                 |\n| multiattach         | False                                |\n| name                | test                                 |\n| properties          |                                      |\n| replication_status  | None                                 |\n| size                | 1                                    |\n| snapshot_id         | None                                 |\n| source_volid        | None                                 |\n| status              | creating                             |\n| type                | lvmdriver-1                          |\n| updated_at          | None                                 |\n| user_id             | 2ddf90575e1846368253474789964074     |\n+---------------------+--------------------------------------+\n\nroot@openstack-node-0:~# kubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume list\n+--------------------------------------+------+-----------+------+-------------+\n| ID                                   | Name | Status    | Size | Attached to |\n+--------------------------------------+------+-----------+------+-------------+\n| c744af27-fb40-4ffa-8a84-b9f44cb19b2b | test | available |    1 |             |\n+--------------------------------------+------+-----------+------+-------------+\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Floating IP\nDESCRIPTION: Command to create a new floating IP with options to specify subnet, port, and IP addresses.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip create\n    [--subnet <subnet>]\n    [--port <port>]\n    [--floating-ip-address <ip-address>]\n    [--fixed-ip-address <ip-address>]\n    [--description <description>]\n    [--project <project> [--project-domain <project-domain>]]\n    <network>\n```\n\n----------------------------------------\n\nTITLE: Verifying Configured Storage Classes in Genestack\nDESCRIPTION: This command lists all storage classes to confirm the correct configuration of both the general and general-multi-attach classes for Genestack use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-external-block.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n(genestack) root@genestack-controller1:# kubectl get sc -A\nNAME                   PROVISIONER                     RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\ngeneral (default)      org.democratic-csi.iscsi        Delete          Immediate           true                   3h25m\ngeneral-multi-attach   rook-ceph.cephfs.csi.ceph.com   Delete          Immediate           true                   85m\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystone Public Endpoint FQDN Override\nDESCRIPTION: Helm values configuration to override the public endpoint FQDN for the Keystone service, including TLS, host, port, and scheme settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-override-public-endpoint-fqdn.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nendpoints:\n  identity:\n    host_fqdn_override:\n      public:\n        tls: {}\n        host: keystone.cluster.local\n    port:\n      api:\n        public: 443\n    scheme:\n      public: https\n```\n\n----------------------------------------\n\nTITLE: Running Heat Deployment Script\nDESCRIPTION: Reference to the Heat deployment script that should be executed to deploy the Heat service. The script is located at bin/install-heat.sh and would be included in the actual output.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-heat.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-heat.sh\"\n```\n\n----------------------------------------\n\nTITLE: Setting FQDN Hostnames with Ansible\nDESCRIPTION: Shell commands to set proper FQDN hostnames across all cluster nodes using Ansible. Updates both the hostname and /etc/hosts file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/genestack/scripts/genestack.rc\nansible -m shell -a 'hostnamectl set-hostname {{ inventory_hostname }}' --become all\nansible -m shell -a \"grep 127.0.0.1 /etc/hosts | grep -q {{ inventory_hostname }} || sed -i 's/^127.0.0.1.*/127.0.0.1 {{ inventory_hostname }} localhost.localdomain localhost/' /etc/hosts\" --become all\n```\n\n----------------------------------------\n\nTITLE: Querying Logs with LokiQL in Grafana\nDESCRIPTION: Example LokiQL query to search logs for a specific service and project ID in the project lookup dashboard. The query uses logfmt and JSON parsing to format the output.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/observability-info.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{application=\"$service\"} | logfmt | json | line_format \"{{ .kubernetes_host}} {{.kubernetes_pod_name}} {{.log}}\" |= `$project_id`\n```\n\n----------------------------------------\n\nTITLE: Enabling Multipath and iSCSI in Nova Configuration\nDESCRIPTION: Commands to modify the Nova configuration to enable multipath and iSCSI support. This is recommended for production environments to improve storage reliability during network events.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/volume_use_multipath: false/volume_use_multipath: true/' /etc/genestack/helm-configs/nova/nova-helm-overrides.yaml\nsed -i 's/enable_iscsi: false/enable_iscsi: true/' /etc/genestack/helm-configs/nova/nova-helm-overrides.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus API using kubectl proxy\nDESCRIPTION: Example showing how to access Prometheus API metrics using kubectl proxy and curl. Demonstrates querying the kube_ovn_ovn_status metric with proper URL encoding.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-monitoring-introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run kubectl proxy in the background\nkubectl proxy &\n\n# You will probably find the -g/--globoff option to curl useful to stop curl\n# itself from interpreting the characters {} [] in URLs.\n#\n# Additionally, these characters technically require escaping in URLs, so you\n# might want to use --data-urlencode\n\ncurl -sS -gG \\\nhttp://localhost:8001/api/v1/namespaces/prometheus/services/prometheus-operated:9090/proxy/api/v1/query \\\n--data-urlencode 'query=kube_ovn_ovn_status' | jq .\n```\n\n----------------------------------------\n\nTITLE: Verifying Logical Volume Creation on Storage Node\nDESCRIPTION: Command to verify that the logical volume was successfully created on the storage node. This confirms that the volume appears in the cinder-volumes-1 volume group.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nroot@openstack-node-4:~# lvs\n  LV                                   VG               Attr       LSize Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert\n  c744af27-fb40-4ffa-8a84-b9f44cb19b2b cinder-volumes-1 -wi-a----- 1.00g\n```\n\n----------------------------------------\n\nTITLE: Labeling Storage Nodes in Kubernetes for Rook\nDESCRIPTION: Labels a Kubernetes node to be used as part of the Ceph storage cluster. The label 'role=storage-node' indicates that the node will be used for Ceph OSDs.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label node ${NODE_NAME} role=storage-node\n```\n\n----------------------------------------\n\nTITLE: Applying Nginx Gateway Fabric Configuration in Kubernetes\nDESCRIPTION: Command to apply nginx-gateway-fabric configuration using kubectl kustomize. This applies gateway-specific customizations from the genestack configuration directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/rackspace-infrastructure-nginx-gateway-api.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl kustomize /etc/genestack/kustomize/gateway/nginx-gateway-fabric | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Running Keystone Deployment Script\nDESCRIPTION: This snippet references the inclusion of the installation script for Keystone. The actual content of the script is imported from the file path bin/install-keystone.sh using the --8<-- syntax.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-keystone.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating Nova CPU Allocation Override for Region 1\nDESCRIPTION: YAML configuration for overriding the CPU allocation ratio for Nova in Region 1. This sets the CPU allocation ratio to 8.0, which determines how many virtual CPUs can be allocated per physical CPU.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/multi-region-support.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  nova:\n    DEFAULT:\n      cpu_allocation_ratio: 8.0\n```\n\n----------------------------------------\n\nTITLE: Listing Tap Devices for KVM Domain in Genestack (Shell)\nDESCRIPTION: Lists the tap devices for a specific KVM domain using virsh command. This provides information about network interfaces attached to the instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n openstack exec libvirt-libvirt-default-25vcr -- virsh domiflist 1025\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Credentials in OpenStack\nDESCRIPTION: Command to generate S3-compatible credentials for OpenStack Swift using the OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-3rd-party.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack ec2 credentials create\n```\n\n----------------------------------------\n\nTITLE: Listing Load Balancer Providers in OpenStack CLI\nDESCRIPTION: This command lists the available load balancer providers in OpenStack. It shows both OVN and Amphora as options.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer provider list\n```\n\n----------------------------------------\n\nTITLE: Listing OpenStack Servers\nDESCRIPTION: Command to list and view OpenStack servers with various filtering and display options.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-servers.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server list\n    [--quote {all,minimal,none,nonnumeric}]\n    [--reservation-id <reservation-id>]\n    [--ip <ip-address-regex>]\n    [--ip6 <ip-address-regex>]\n    [--name <name-regex>]\n    [--instance-name <server-name>]\n    [--status <status>]\n    [--flavor <flavor>]\n    [--image <image>]\n    [--host <hostname>]\n    [--all-projects]\n    [--project <project>]\n    [--project-domain <project-domain>]\n    [--user <user>]\n    [--user-domain <user-domain>]\n    [--long]\n    [-n]\n    [--marker <server>]\n    [--limit <num-servers>]\n    [--deleted]\n    [--changes-since <changes-since>]\n```\n\n----------------------------------------\n\nTITLE: Identifying PCI Devices\nDESCRIPTION: Lists NVIDIA PCI devices and their identifiers using lspci command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n0b:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP106GL [Quadro P2000] [10de:1c30] (rev a1)\n0b:00.1 Audio device [0403]: NVIDIA Corporation GP106 High Definition Audio Controller [10de:10f1] (rev a1)\n```\n\n----------------------------------------\n\nTITLE: Verifying Ceilometer Resource Types in Gnocchi\nDESCRIPTION: Command to verify that Ceilometer db-sync job has created the necessary resource types in Gnocchi. This checks if resources like instance, instance_disk, network, and volume exist.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-ceilometer.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it openstack-admin-client -n openstack -- openstack metric resource-type list\n```\n\n----------------------------------------\n\nTITLE: VaultStaticSecret Configuration\nDESCRIPTION: YAML configuration for creating a Kubernetes secret from Vault static secret.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\nname: keystone-rabbitmq-password\nnamespace: openstack\nspec:\ntype: kv-v2\nmount: 'osh/keystone'\npath: keystone-rabbitmq-password\ndestination:\n   name: keystone-rabbitmq-password\n   create: true\nrefreshAfter: 30s\nvaultAuthRef: keystone-auth\n```\n\n----------------------------------------\n\nTITLE: Editing Subnet Configuration in Kube-OVN\nDESCRIPTION: Command to edit the ovn-default subnet configuration in Kubernetes using kubectl. This allows updating the cidrBlock, gateway, and excludeIps fields to implement new IP ranges.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-kube-ovn-re-ip.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl edit subnets.kubeovn.io ovn-default\n```\n\n----------------------------------------\n\nTITLE: Creating External Ceph Admin Keyring Secret\nDESCRIPTION: Shell commands to create a Kubernetes secret for the external Ceph admin keyring. This requires manual input for the key value and creates the secret in the rook-ceph namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nKEYRING=$(base64 -w0 <<EOF\n\n[client.admin]\n    key = REPLACE_ME\n    caps mds = \"allow *\"\n    caps mgr = \"allow *\"\n    caps mon = \"allow *\"\n    caps osd = \"allow *\"\nEOF\n)\nkubectl get ns rook-ceph &> /dev/null || kubectl create ns rook-ceph\nkubectl apply -n rook-ceph -f - <<EOF\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: rook-ceph-admin-keyring\n  namespace: rook-ceph\ndata:\n  keyring: ${KEYRING}\nEOF\nunset KEYRING\n```\n\n----------------------------------------\n\nTITLE: Creating Platform-Services User in OpenStack\nDESCRIPTION: Creates a new user named 'platform-services' in the platform-services project with the specified password.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default user create --project platform-services --password ${PASSWORD} platform-services --domain default\n```\n\n----------------------------------------\n\nTITLE: Creating Federation Protocol for Rackspace in OpenStack\nDESCRIPTION: This command establishes the federation protocol in OpenStack, linking the Rackspace identity provider with the created mapping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-federation.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default federation protocol create rackspace --mapping rackspace_mapping --identity-provider rackspace\n```\n\n----------------------------------------\n\nTITLE: Checking Envoy Gateway Status\nDESCRIPTION: Command to verify the status of flex-gateway in the envoy-gateway namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-envoy-gateway-api.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n envoy-gateway get gateways.gateway.networking.k8s.io flex-gateway\n```\n\n----------------------------------------\n\nTITLE: Nova Device Alias JSON\nDESCRIPTION: JSON configuration for creating PCI device alias in Nova.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"vendor_id\": \"10de\", \"product_id\": \"1c30\", \"device_type\": \"type-PCI\", \"name\": \"p2000\"}\n```\n\n----------------------------------------\n\nTITLE: Finding Node by ClusterIP\nDESCRIPTION: Command to find the Kubernetes node name associated with a specific ClusterIP address.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-monitoring-introduction.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get node -n kube-system -o wide | grep 10.10.10.10\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Security Group Rule in Openstack\nDESCRIPTION: Command to allow HTTPS traffic (port 443) from any IP address to instances in the specified security group. This enables secure web access to instances.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create global_http \\\n    --protocol tcp --dst-port 443:443 --remote-ip 0.0.0.0/0\n```\n\n----------------------------------------\n\nTITLE: Creating Secrets for Horizon Deployment in Shell\nDESCRIPTION: Commands to manually generate required secrets for Horizon deployment. This creates the horizon-secret-key and horizon-db-password secrets in the openstack namespace with randomly generated secure passwords.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-horizon.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic horizon-secret-key \\\n        --type Opaque \\\n        --from-literal=username=\"horizon\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic horizon-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Updating ARP Cache for VIP in Linux\nDESCRIPTION: This command sends gratuitous ARP requests to update the ARP caches of other devices on the network. This is useful when moving the VIP between instances. The $VIP should be replaced with the actual VIP, and the interface name (enp3s0) might need to be adjusted.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nsudo arping -i enp3s0 -U -S $VIP $VIP  # VIP twice\n```\n\n----------------------------------------\n\nTITLE: OVN Claim Storm Log Entries\nDESCRIPTION: These log entries from the ovs-ovn pods on gateway nodes indicate an OVN claim storm. They show frequent port claiming events occurring at intervals less than 1 second, which is abnormal behavior.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-alert-claim-storm.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n2024-09-05T16:38:54.711Z|19953|binding|INFO|Claiming lport cr-lrp-deadbeef-dead-beef-dead-deadbeef0001 for this chassis.\n2024-09-05T16:38:54.711Z|19954|binding|INFO|cr-lrp-deadbeef-dead-beef-dead-deadbeef0001: Claiming de:ad:be:ef:de:01 1.0.1.0/24\n2024-09-05T16:39:38.870Z|19955|binding|INFO|Claiming lport cr-lrp-ddeadbeef-dead-beef-dead-deadbeef0002 for this chassis.\n2024-09-05T16:39:38.870Z|19956|binding|INFO|cr-lrp-deadbeef-dead-beef-dead-deadbeef0002: Claiming de:ad:be:ef:de:02 1.0.2.0/24\n2024-09-05T16:40:32.813Z|19957|binding|INFO|Claiming lport cr-lrp-deadbeef-dead-beef-dead-deadbeef0003 for this chassis.\n2024-09-05T16:40:32.813Z|19958|binding|INFO|cr-lrp-deadbeef-dead-beef-dead-deadbeef0003: Claiming de:ad:be:ef:de:03 1.0.3.0/24\n2024-09-05T16:41:52.669Z|19959|binding|INFO|Claiming lport cr-lrp-deadbeef-dead-beef-dead-deadbeef0004 for this chassis.\n2024-09-05T16:41:52.669Z|19960|binding|INFO|cr-lrp-deadbeef-dead-beef-dead-deadbeef0004: Claiming de:ad:be:ef:de:04 1.0.4.0/24\n2024-09-05T16:42:33.762Z|19961|binding|INFO|Claiming lport cr-lrp-deadbeef-dead-beef-dead-deadbeef0004 for this chassis.\n```\n\n----------------------------------------\n\nTITLE: Checking Ceilometer Resources in Gnocchi\nDESCRIPTION: Command to confirm that resources are being properly populated in Gnocchi by Ceilometer.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-ceilometer.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it openstack-admin-client -n openstack -- openstack metric resource list\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Host in Grafana Helm Overrides\nDESCRIPTION: This YAML snippet shows how to set the custom host value in the Grafana Helm overrides file, which specifies the FQDN for the Grafana deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/grafana.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncustom_host: grafana.api.your.domain.tld\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Object from Swift Container\nDESCRIPTION: Shows how to delete a specific object from a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nswift delete flex-container01 document01.rtf\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keystone Admin Password\nDESCRIPTION: This command retrieves the Keystone admin password from Kubernetes secrets, which is required for the Octavia preconfiguration playbook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secrets keystone-admin -n openstack -o jsonpath='{.data.password}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Creating Mount Point Directory\nDESCRIPTION: Creates a directory to serve as the mount point for the VM disk partition.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir /mnt/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Generating Octavia Secrets in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create Kubernetes secrets for Octavia, including passwords for RabbitMQ, database, admin, and certificates. It uses random string generation for secure passwords.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic octavia-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"octavia\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic octavia-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic octavia-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic octavia-certificates \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Managing Object Lifecycle in Swift\nDESCRIPTION: Shows how to set up object expiration in Swift for lifecycle management. It demonstrates setting expiration based on a specific date or after a certain time period has passed, as well as checking and clearing expiration flags.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# swift post CONTAINER OBJECT_FILENAME -H \"X-Delete-At:UNIX_TIME\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift post CONTAINER OBJECT_FILENAME -H \"X-Delete-After:SECONDS\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift stat CONTAINER OBJECT_FILENAME\n```\n\nLANGUAGE: bash\nCODE:\n```\n# swift post CONTAINER OBJECT_FILENAME -H \"X-Remove-Delete-At:\"\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Gateway Setup Script\nDESCRIPTION: Executes the setup script that configures the gateway with email for ACME certificates and domain name settings. This script creates the necessary routes and certificate configurations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/setup-nginx-gateway.sh\"\n```\n\n----------------------------------------\n\nTITLE: Listing OVS Bridges in Genestack (Shell)\nDESCRIPTION: Lists the OVS bridges without verbose output. This command is useful for a quick overview of available bridges in the Genestack environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko vsctl ${NODE} list-br\n```\n\n----------------------------------------\n\nTITLE: Joining Vault Pods to Form a Cluster in Kubernetes\nDESCRIPTION: Commands to join Vault pods together to form a cluster using the Raft protocol.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it vault-1 -n vault -- vault operator raft join -leader-ca-cert=@/vault/userconfig/vault-server-tls/ca.crt https://vault-0.vault-internal:8200\nkubectl exec -it vault-2 -n vault -- vault operator raft join -leader-ca-cert=@/vault/userconfig/vault-server-tls/ca.crt https://vault-0.vault-internal:8200\n```\n\n----------------------------------------\n\nTITLE: Adding a Host to an Aggregate in OpenStack\nDESCRIPTION: This snippet shows how to add a specific compute host to the previously created 'P40' aggregate using the OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack aggregate add host P40 compute001.example.com\n```\n\n----------------------------------------\n\nTITLE: Modified Glance Policy Configuration in YAML\nDESCRIPTION: Example of policy rule modifications to allow both admin and owner to publicize images. This configuration demonstrates how to customize access control for Glance operations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-glance.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  policy:\n    \"admin_required\": \"role:admin or role:glance_admin\"\n    \"default\": \"role:admin or role:glance_admin\"\n    \"context_is_admin\": \"role:admin or role:glance_admin\"\n    \"is_owner\": \"tenant:%(owner)s\"\n    \"publicize_image\": \"rule:context_is_admin or role:is_owner\"\n    \"download_image\": \"rule:is_owner or rule:context_is_admin\"\n```\n\n----------------------------------------\n\nTITLE: Creating Port with Fixed IP for VIP in OpenStack\nDESCRIPTION: This command creates a port with a fixed IP for the Virtual IP (VIP). It specifies the subnet, network, and disables security groups. The resulting IP address should be noted as the VIP.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} port create --fixed-ip subnet=tester-subnet \\\n                          --network tester-network \\\n                          --no-security-group tester-vip-port\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenStack Container and Object Command Help\nDESCRIPTION: Shows how to display help information for OpenStack container and object commands using the CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-openstack-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --help --os-cloud $CLOUD container $COMMAND\n\nopenstack --help --os-cloud $CLOUD object $COMMAND\n```\n\n----------------------------------------\n\nTITLE: Creating Keystone Secrets in Vault\nDESCRIPTION: Commands to create various Keystone-related secrets in Vault, including RabbitMQ credentials, database password, and admin password.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault kv put -mount=osh/keystone keystone-rabbitmq-username username=keystone\nvault kv put -mount=osh/keystone keystone-rabbitmq-password password=$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\nvault kv put -mount=osh/keystone keystone-db-password password=$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\nvault kv put -mount=osh/keystone keystone-admin  password=$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\nvault kv put -mount=osh/keystone keystone-credential-keys  password=$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\n```\n\n----------------------------------------\n\nTITLE: Basic Host Setup Playbook Execution\nDESCRIPTION: Command to run the host setup playbook for preparing nodes before Kubernetes deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook host-setup.yml\n```\n\n----------------------------------------\n\nTITLE: Deleting Openstack Security Groups\nDESCRIPTION: Command to delete a specific security group by name. This removes the group and all associated rules.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group delete SECURITY_GROUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Neutron MTU Settings\nDESCRIPTION: YAML configuration for Neutron MTU settings, including global physnet MTU, path MTU, and physical network MTU specifications. Demonstrates setup for jumbo frames and overlay network support.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-neutron.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  neutron:\n    DEFAULT:\n      global_physnet_mtu: 9000\n  plugins:\n    ml2_conf:\n      ml2:\n        path_mtu: 4000\n        physical_network_mtus: physnet1:1500\n```\n\n----------------------------------------\n\nTITLE: Creating Required Secrets for Barbican Deployment in Shell\nDESCRIPTION: Shell commands to generate random passwords and create Kubernetes secrets for Barbican's RabbitMQ, database, and admin accounts. These secrets are essential for secure communication between Barbican and other services.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-barbican.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic barbican-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"barbican\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic barbican-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic barbican-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Deleting QoS Policy in OpenStack\nDESCRIPTION: This snippet demonstrates how to delete a QoS policy using the OpenStack CLI. It requires the QOS_ID as a parameter.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume qos delete 9435160f-0e4a-4486-88b0-d6beb022732a\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus SNMP Exporter using Helm\nDESCRIPTION: Command to install the Prometheus SNMP Exporter Helm chart using a custom installation script. After successful installation, the exporter pod should be running in the prometheus namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-snmp-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/install-chart.sh prometheus-snmp-exporter\n```\n\n----------------------------------------\n\nTITLE: Creating Second Version of an Object in Swift\nDESCRIPTION: This snippet demonstrates creating a second version of 'my_object' in the 'current' container. This action triggers the creation of a version of the previous object in the 'archive' container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i $publicURL/current/my_object --data-binary 2 -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\"\n```\n\n----------------------------------------\n\nTITLE: Metric Resource Management Commands\nDESCRIPTION: Commands for creating and managing resource types and their attributes in OpenStack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack metric resource create --type <type> <other_opts> <resource_id>\n```\n\n----------------------------------------\n\nTITLE: Stopping OpenStack Instance\nDESCRIPTION: Command to stop a running OpenStack instance before taking a snapshot to ensure data consistency.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server stop myInstance\n```\n\n----------------------------------------\n\nTITLE: Configuring Cinder Volume Event Definitions in Ceilometer\nDESCRIPTION: This YAML configuration defines how Ceilometer captures events related to Cinder volumes and snapshots. It specifies which event types to monitor and maps payload fields to traits that will be stored with the event data. The configuration uses YAML anchors to avoid repetition of common trait definitions.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/metering-ceilometer.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- event_type: ['volume.exists', 'volume.retype', 'volume.create.*', 'volume.delete.*', 'volume.resize.*', 'volume.attach.*', 'volume.detach.*', 'volume.update.*', 'snapshot.exists', 'snapshot.create.*', 'snapshot.delete.*', 'snapshot.update.*', 'volume.transfer.accept.end', 'snapshot.transfer.accept.end']\n  traits: &cinder_traits\n    user_id:\n      fields: payload.user_id\n    project_id:\n      fields: payload.tenant_id\n    availability_zone:\n      fields: payload.availability_zone\n    display_name:\n      fields: payload.display_name\n    replication_status:\n      fields: payload.replication_status\n    status:\n      fields: payload.status\n    created_at:\n      type: datetime\n      fields: payload.created_at\n    image_id:\n      fields: payload.glance_metadata[?key=image_id].value\n    instance_id:\n      fields: payload.volume_attachment[0].instance_uuid\n- event_type: ['volume.transfer.*', 'volume.exists', 'volume.retype', 'volume.create.*', 'volume.delete.*', 'volume.resize.*', 'volume.attach.*', 'volume.detach.*', 'volume.update.*', 'snapshot.transfer.accept.end']\n  traits:\n    <<: *cinder_traits\n    resource_id:\n      fields: payload.volume_id\n    host:\n      fields: payload.host\n    size:\n      type: int\n      fields: payload.size\n    type:\n      fields: payload.volume_type\n    replication_status:\n      fields: payload.replication_status\n```\n\n----------------------------------------\n\nTITLE: Listing OpenStack Keypairs\nDESCRIPTION: Command to list and view existing keypairs in OpenStack with optional sorting and filtering parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keypairs.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} keypair list\n    [--sort-column SORT_COLUMN]\n    [--sort-ascending | --sort-descending]\n    [--user <user>]\n    [--user-domain <user-domain>]\n    [--project <project>]\n    [--project-domain <project-domain>]\n    [--limit <limit>]\n    [--marker <marker>]\n```\n\n----------------------------------------\n\nTITLE: Finding Kubernetes Node by IP Address\nDESCRIPTION: Shell command to identify the Kubernetes node corresponding to a specific IP address from the NODE_IPS environment variable, which is needed for OVN database recovery procedures.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-db-backup.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get node -o wide | grep 10.130.140.246\n\nk8s-controller01   Ready      control-plane   3d17h   v1.28.6   10.130.140.246   <none>        Ubuntu 22.04.3 LTS   6.5.0-17-generic    containerd://1.7.11\nroot@k8s-controller01:~#\n```\n\n----------------------------------------\n\nTITLE: Database Creation with Charset\nDESCRIPTION: SQL command to create a new database with specific charset and collation settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb-ops.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE ${DATABASE_NAME} DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;\n```\n\n----------------------------------------\n\nTITLE: Installing Vault using Kustomize and Helm in Kubernetes\nDESCRIPTION: Commands to navigate to the installation directory, modify configuration files, and apply the Vault installation using Kustomize and Helm.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd kustomize/vault/base\nvi values.yaml\nvi kustomization.yaml\nkubectl  kustomize . --enable-helm | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Monitoring MariaDB Operator Pods\nDESCRIPTION: Watches the status of MariaDB operator pods in the mariadb-system namespace to verify deployment completion.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace mariadb-system get pods -w\n```\n\n----------------------------------------\n\nTITLE: Adding Member Role to Platform-Services-Core-Alt User\nDESCRIPTION: Assigns the 'member' role to the platform-services-core-alt user in the platform-services project with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core-alt --project platform-services member --inherited\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Metadata Secret in Kubernetes for OpenStack\nDESCRIPTION: Creates a Kubernetes secret in the OpenStack namespace containing a randomly generated password for shared metadata. This secret is used across various OpenStack services.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-secrets.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic metadata-shared-secret \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Skyline API Server Secrets in Kubernetes\nDESCRIPTION: This shell command creates a Kubernetes secret for Skyline API server, containing various configuration parameters such as service credentials, database details, and Keystone endpoints. It generates random passwords for sensitive fields.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-skyline.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic skyline-apiserver-secrets \\\n        --type Opaque \\\n        --from-literal=service-username=\"skyline\" \\\n        --from-literal=service-password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\" \\\n        --from-literal=service-domain=\"service\" \\\n        --from-literal=service-project=\"service\" \\\n        --from-literal=service-project-domain=\"service\" \\\n        --from-literal=db-endpoint=\"mariadb-cluster-primary.openstack.svc.cluster.local\" \\\n        --from-literal=db-name=\"skyline\" \\\n        --from-literal=db-username=\"skyline\" \\\n        --from-literal=db-password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\" \\\n        --from-literal=secret-key=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\" \\\n        --from-literal=keystone-endpoint=\"$(kubectl --namespace openstack get secret keystone-keystone-admin -o jsonpath='{.data.OS_AUTH_URL}' | base64 -d)\" \\\n        --from-literal=keystone-username=\"skyline\" \\\n        --from-literal=default-region=\"RegionOne\" \\\n        --from-literal=prometheus_basic_auth_password=\"\" \\\n        --from-literal=prometheus_basic_auth_user=\"\" \\\n        --from-literal=prometheus_enable_basic_auth=\"false\" \\\n        --from-literal=prometheus_endpoint=\"http://kube-prometheus-stack-prometheus.prometheus.svc.cluster.local:9090\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Kubernetes Cluster Template\nDESCRIPTION: Creates a custom Kubernetes cluster template with specified configurations including Fedora CoreOS image, m1.large flavor for both master and worker nodes, Calico networking, and Cinder volume support with 10GB storage.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack coe cluster template create new-cluster-template \\\n          --image magnum-fedora-coreos-40  \\\n          --external-network public \\\n          --dns-nameserver 8.8.8.8 \\\n          --master-flavor m1.large \\\n          --flavor m1.large  \\\n          --network-driver calico \\\n          --volume-driver cinder \\\n          --docker-volume-size 10 \\\n          --coe kubernetes\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes secret for clouds.yaml\nDESCRIPTION: This snippet creates a Kubernetes secret from the generated clouds.yaml file. It includes two variations: one for standard setup and another for self-signed certificates.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-openstack-metrics-exporter.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack create secret generic clouds-yaml-secret \\\n        --from-file /tmp/generated-clouds-yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack create secret generic clouds-yaml-secret \\\n        --from-file /tmp/generated-clouds-certs-yaml\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Configuration Directory\nDESCRIPTION: Creates the necessary directory structure for OpenStack configuration files in the user's home directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/openstack\n```\n\n----------------------------------------\n\nTITLE: Verifying Openstack Exporter pod status\nDESCRIPTION: This snippet shows how to check the status of the Openstack Exporter pods in the openstack namespace using kubectl.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-openstack-metrics-exporter.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n openstack  get pods -w | grep os-metrics\n```\n\n----------------------------------------\n\nTITLE: Installing MetalLB using Deployment Script\nDESCRIPTION: This snippet shows the command to run the MetalLB deployment script. The script can take parameters to deploy additional components like 'aio' or 'base-monitoring'. Without parameters, it deploys the base configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-metallb.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-metallb.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating Test Encrypted Volume\nDESCRIPTION: Command to create a 1GB test volume using the encrypted volume type to verify the encryption functionality.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-fips-encryption.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume create --size 1 test\n```\n\n----------------------------------------\n\nTITLE: Listing Available Images in Openstack\nDESCRIPTION: This command lists available images in Openstack, allowing you to note the ID of the image you wish to use for creating a bootable volume.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-volumes.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image list\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Flavor with Network Bandwidth Limits\nDESCRIPTION: These commands create a flavor with specific network traffic bandwidth limits for outbound and inbound traffic. It demonstrates how to set network quota properties for a flavor.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create gp.0.8.24 \\\n          --public \\\n          --ram 24576 \\\n          --disk 160 \\\n          --vcpus 8 \\\n          --ephemeral 128 \\\n          --swap 8192\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor set gp.0.8.24 \\\n    --property \"quota:vif_inbound_peak\"=\"1250000\" \\\n    --property \"quota:vif_inbound_burst\"=\"1250000\" \\\n    --property \"quota:vif_inbound_average\"=\"687500\" \\\n    --property \"quota:vif_outbound_peak\"=\"1250000\" \\\n    --property \"quota:vif_outbound_burst\"=\"1250000\" \\\n    --property \"quota:vif_outbound_average\"=\"687500\"\n```\n\n----------------------------------------\n\nTITLE: Disconnecting QEMU-NBD Device\nDESCRIPTION: Disconnects the NBD device from the disk file to free up system resources.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqemu-nbd --disconnect /dev/nbd0\n```\n\n----------------------------------------\n\nTITLE: Validating Vault Cluster Setup in Kubernetes\nDESCRIPTION: Command to list Raft peers and verify the Vault cluster setup.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec vault-0 -n vault -it -- vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: Object Store URL Format in Skyline\nDESCRIPTION: Example URL format for accessing public files in the object store. The URL is composed of the regional endpoint, container name, prefix (if any), and object name.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-skyline-gui.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<REGIONAL_ENDPOINT>/storage/container/detail/flex-container01/example.rtf\n```\n\n----------------------------------------\n\nTITLE: Creating Platform-Services-Core-Alt User in OpenStack\nDESCRIPTION: Creates a new user named 'platform-services-core-alt' in the platform-services project with the specified password.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default user create --project platform-services --password ${PASSWORD} platform-services-core-alt --domain default\n```\n\n----------------------------------------\n\nTITLE: Removing OVN Configuration Label from All Nodes\nDESCRIPTION: Command to remove the ovn.openstack.org/configured label from all nodes in the cluster simultaneously to trigger global configuration reapplication.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-kube-ovn-openstack.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label nodes --all ovn.openstack.org/configured-\n```\n\n----------------------------------------\n\nTITLE: Removing Namespace Finalizers in Shell\nDESCRIPTION: This complex shell command removes finalizers from a hung namespace during an upgrade. It retrieves the namespace JSON, modifies it to remove finalizers, and applies the changes using kubectl replace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray-upgrade.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespace \"${NAMESPACE}\" -o json \\\n    | tr -d \"\\n\" | sed \"s/\\\"finalizers\\\": \\[[^]]\\+\\]/\\\"finalizers\\\": []/\" \\\n    | kubectl replace --raw \"/api/v1/namespaces/${NAMESPACE}/finalize\" -f -\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell in OVS-OVN Pod\nDESCRIPTION: This command opens an interactive shell in an OVS-OVN pod, allowing direct access to OVS commands and troubleshooting tools.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n kube-system exec -it ovs-ovn-XXXXX -- /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Applying MetalLB Service Manifest in Kubernetes\nDESCRIPTION: This command applies the MetalLB service manifest to the Kubernetes cluster. It should be run after MetalLB is operational and the configuration file has been customized for the environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-metallb.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/manifests/metallb/metallb-openstack-service-lb.yml\n```\n\n----------------------------------------\n\nTITLE: Running Magnum Installation Script\nDESCRIPTION: Runs the install-magnum.sh script from the bin directory. This script handles the deployment of the Magnum service within the OpenStack environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-magnum.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-magnum.sh\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Configuration Changes with Helm\nDESCRIPTION: This shell command demonstrates how to use Helm to upgrade or install a release with the new configuration changes. It requires replacing placeholder values for release name, chart path, and values file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install <release_name> <chart-path> -f <values_file.yaml>\n```\n\n----------------------------------------\n\nTITLE: Creating OpenStack Instance Snapshot\nDESCRIPTION: Creates a snapshot image from a stopped OpenStack instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server image create myInstance --name myInstanceSnapshot\n```\n\n----------------------------------------\n\nTITLE: Creating NUMA Preferred Affinity Flavor in OpenStack\nDESCRIPTION: This snippet demonstrates how to create a flavor named 'np.medium' with specific resource allocations and then set the NUMA affinity policy to 'preferred' for PCI devices.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create np.medium \\\n          --public \\\n          --ram 8192 \\\n          --disk 60 \\\n          --vcpus 4 \\\n          --ephemeral 10 \\\n          --swap 1024\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor set np.medium \\\n          --property hw:pci_numa_affinity_policy=preferred\n```\n\n----------------------------------------\n\nTITLE: Installing Keyring on MacOS\nDESCRIPTION: Installs the keyring package on MacOS using Homebrew. The keyring package is required for token authentication caching.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install keyring\n```\n\n----------------------------------------\n\nTITLE: Running the create-secrets.sh script for Genestack\nDESCRIPTION: Executes the create-secrets.sh script which generates necessary secrets for the Genestack deployment. The script supports an optional --region parameter to specify a custom region name in Keystone (defaults to RegionOne).\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-namespace.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/opt/genestack/bin/create-secrets.sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving OVN Node IPs from Kubernetes Deployment\nDESCRIPTION: Shell command to extract the NODE_IPS environment variable from the ovn-central deployment in the kube-system namespace, which contains the IP addresses of nodes running OVN central components.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-db-backup.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deployment -n kube-system ovn-central  -o yaml | grep -A1 'name: NODE_IPS'\n\n        - name: NODE_IPS\n          value: 10.130.140.246,10.130.140.250,10.130.140.252\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Role to Zamboni User for Rackspace Cloud Domain\nDESCRIPTION: Assigns the 'reader' role to the zamboni user in the rackspace_cloud_domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user zamboni --domain rackspace_cloud_domain reader --inherited\n```\n\n----------------------------------------\n\nTITLE: Deploying Fluentbit to Kubernetes using install-fluentbit.sh Script\nDESCRIPTION: This code snippet references the Fluentbit deployment script that should be executed to install Fluentbit on a Kubernetes cluster. The script is located at /opt/genestack/bin/install-fluentbit.sh and is used to set up Fluentbit as a log shipper for sending logs to Loki.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-fluentbit.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-fluentbit.sh\"\n```\n\n----------------------------------------\n\nTITLE: Verifying PCI Device Availability for Passthrough\nDESCRIPTION: This shell command checks if a specific PCI device (in this case, a GPU) is available for PCI passthrough by listing its IOMMU group directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nls -ld /sys/kernel/iommu_groups/*/devices/*3f:00.?/\n```\n\n----------------------------------------\n\nTITLE: Getting Domain ID for KVM Instance in Genestack (Shell)\nDESCRIPTION: Retrieves the domain ID for a KVM instance using virsh command. This is executed within the libvirt-libvirt-default pod on the Kubernetes node.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n openstack exec libvirt-libvirt-default-25vcr -- virsh domid instance-000014a6\n```\n\n----------------------------------------\n\nTITLE: Monitoring Ceph Cluster State in Genestack\nDESCRIPTION: This command checks the status of the Ceph cluster to ensure it's in a HEALTH_OK state before proceeding with further configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-external-block.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n(genestack) root@genestack-controller1:# kubectl --namespace rook-ceph get cephclusters.ceph.rook.io\nNAME        DATADIRHOSTPATH   MONCOUNT   AGE    PHASE   MESSAGE                        HEALTH      EXTERNAL   FSID\nrook-ceph   /var/lib/rook     3          129m   Ready   Cluster created successfully   HEALTH_OK              9a6657cd-f3ab-4d70-b276-a05e2ca03e1b\n```\n\n----------------------------------------\n\nTITLE: Creating Container with Versioning Support in Swift using X-Versions-Location\nDESCRIPTION: This snippet demonstrates how to create a container named 'current' with versioning support by specifying the 'X-Versions-Location' header. This header indicates that the 'archive' container will be used to store older versions of objects.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\" -H \"X-Versions-Location: archive\"\n```\n\n----------------------------------------\n\nTITLE: Resource Type Update Example\nDESCRIPTION: Example showing how to update the image resource type with additional properties.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack resource-type update image -a os_type:string:false:max_length=255\nopenstack resource-type update image -a os_distro:string:false:max_length=255\nopenstack resource-type update image -a os_version:string:false:max_length=255\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Prometheus Rules in Kubernetes\nDESCRIPTION: Fetches and applies Prometheus alerting rules for RabbitMQ from the cluster-operator repository. This sets up monitoring alerts for RabbitMQ components.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfor file in $(curl -s https://api.github.com/repos/rabbitmq/cluster-operator/contents/observability/prometheus/rules/rabbitmq | jq -r '.[].download_url'); do   kubectl apply -n prometheus -f $file; done\n\nfor file in $(curl -s https://api.github.com/repos/rabbitmq/cluster-operator/contents/observability/prometheus/rules/rabbitmq-per-object | jq -r '.[].download_url'); do   kubectl apply -n prometheus -f $file; done\n```\n\n----------------------------------------\n\nTITLE: Checking Gnocchi API Health\nDESCRIPTION: Shell command to perform a health check on the Gnocchi API endpoint using curl. This verifies that the Gnocchi API is responding correctly.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://gnocchi-api.openstack.svc.cluster.local:8041/healthcheck -D -\n```\n\n----------------------------------------\n\nTITLE: Creating RDP Security Group Rule from Source Group in Openstack\nDESCRIPTION: Command to allow RDP access (ports 33-89) only from instances in another security group. This enables restricted remote desktop access to Windows instances based on source grouping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create SECURITY_GROUP_NAME \\\n  --protocol tcp --dst-port 33:89 --remote-group SOURCE_GROUP_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Passthrough Flavor in OpenStack\nDESCRIPTION: This example shows how to create a flavor for GPU passthrough, specifically for an NVIDIA P2000 GPU. It sets up the flavor with resource specifications and then configures PCI passthrough and hypervisor ID hiding.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create gpu-p2000.medium \\\n          --public \\\n          --ram 8192 \\\n          --disk 60 \\\n          --vcpus 4 \\\n          --ephemeral 10 \\\n          --swap 1024\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor set gpu-p2000.medium \\\n          --property pci_passthrough:alias=p2000:1 \\\n          --property hw:hide_hypervisor_id='true'\n```\n\n----------------------------------------\n\nTITLE: Installing Keyring on Ubuntu/Debian\nDESCRIPTION: Installs the keyring package on Ubuntu or Debian-based systems using apt. The keyring package is required for token authentication caching.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt install python3-keyring\n```\n\n----------------------------------------\n\nTITLE: Adding Member Role to Zamboni User\nDESCRIPTION: Assigns the 'member' role to the zamboni user in the platform-services project with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user zamboni --project platform-services member --inherited\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Gateway Installation Script\nDESCRIPTION: Executes the installation script that deploys NGINX Gateway to the 'nginx-gateway' namespace using Helm.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-nginx-gateway.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Keyring on Windows\nDESCRIPTION: Installs the keyring package on Windows using pip. This assumes Python is properly installed and configured in the PATH environment variable.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nC:> py -m pip install keyring\n```\n\n----------------------------------------\n\nTITLE: Configuring Barbican Host Reference in YAML\nDESCRIPTION: YAML configuration example for setting the host_href value in Barbican configuration. This value specifies the public endpoint URL for the Barbican service, which is needed for other OpenStack services to communicate with Barbican.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-barbican.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  barbican:\n    DEFAULT:\n      host_href: \"https://barbican.your.domain.tld\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GRUB for AMD IOMMU\nDESCRIPTION: Adds AMD IOMMU support to GRUB configuration for enabling PCI passthrough.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash amd_iommu=on\"\n```\n\n----------------------------------------\n\nTITLE: Adding OVN Network Annotations to OpenStack Node\nDESCRIPTION: Configures the network annotations for OVN (Open Virtual Network) which are required for the node to function properly in the OpenStack deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n      nodes \\\n      ${NODES} \\\n      ovn.openstack.org/int_bridge='br-int'\n\nkubectl annotate \\\n      nodes \\\n      ${NODES} \\\n      ovn.openstack.org/bridges='br-ex'\n\nkubectl annotate \\\n      nodes \\\n      ${NODES} \\\n      ovn.openstack.org/ports='br-ex:bond1'\n\nkubectl annotate \\\n      nodes \\\n      ${NODES} \\\n      ovn.openstack.org/mappings='physnet1:br-ex'\n\nkubectl annotate \\\n      nodes \\\n      ${NODES} \\\n      ovn.openstack.org/availability_zones='az1'\n```\n\n----------------------------------------\n\nTITLE: Creating Ceph Pools and Filesystem\nDESCRIPTION: Commands to create Ceph pools and initialize a filesystem for use with Rook. This includes creating general, data, and metadata pools, as well as initializing RBD and creating a CephFS filesystem.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-external.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nceph osd pool create general 32\nceph osd pool create general-multi-attach-data 32\nceph osd pool create general-multi-attach-metadata 32\nrbd pool init general\nceph fs new general-multi-attach general-multi-attach-metadata general-multi-attach-data\n```\n\n----------------------------------------\n\nTITLE: Creating UDP Security Group Rule from Source Group in Openstack\nDESCRIPTION: Command to allow UDP traffic on a specific port (e.g., DNS port 53) only from instances in another security group. This provides more restricted UDP service access based on source grouping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create --protocol udp \\\n--dst-port 53:53 --remote-group SOURCE_GROUP_NAME SECURITY_GROUP\n```\n\n----------------------------------------\n\nTITLE: Validating Node Labels\nDESCRIPTION: Command to verify node labels and operational status using kubectl. Shows all node labels in a wide output format.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-labels.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Verify the nodes are operational and labled.\nkubectl get nodes -o wide --show-labels=true\n```\n\n----------------------------------------\n\nTITLE: Listing Server IPs for Load Balancer Pool\nDESCRIPTION: Lists OpenStack servers to obtain their IP addresses for adding to the load balancer pool.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default server list | grep OVN\n```\n\n----------------------------------------\n\nTITLE: Managing Floating IPs for Load Balancer\nDESCRIPTION: Lists available floating IPs and shows how to associate one with the load balancer port. Includes commands for viewing load balancer details and setting floating IP.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default floating ip list | grep None\n$ openstack --os-cloud default loadbalancer show OVN-Test | grep vip_port_id\nopenstack --os-cloud default floating ip set --port 38c74c73-bc3f-430e-b663-d419ce7be4e6 65.17.X.X\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Gateway Fabric Monitoring Configuration with kubectl\nDESCRIPTION: This command applies the Prometheus configuration for NGINX Gateway Fabric monitoring. It uses kubectl to apply the configuration files located in the specified directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-nginx-gateway.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/kustomize/prometheus-nginx-gateway/\n```\n\n----------------------------------------\n\nTITLE: Running Memcached Deployment Script\nDESCRIPTION: Command reference for running the memcached installation script. The script accepts parameters to deploy 'aio' or 'base-monitoring' configurations, with the default being the base configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-memcached.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-memcached.sh\"\n```\n\n----------------------------------------\n\nTITLE: Removing Object Expiration in Swift\nDESCRIPTION: Demonstrates how to remove the expiration header from an object in Swift.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nswift post flex-container01 document01.rtf -H \"X-Delete-At:\"\n```\n\n----------------------------------------\n\nTITLE: Running Custom Exporters Playbook with SSH Key Override\nDESCRIPTION: Extended command that sources environment configuration and specifies a private SSH key for authentication when running the custom exporters playbook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-custom-node-metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Example overriding things on the CLI\nsource /opt/genestack/scripts/genestack.rc\nansible-playbook custom_exporters.yml --private-key ${HOME}/.ssh/openstack-keypair.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Nova for environments without hardware virtualization\nDESCRIPTION: Additional configuration parameters to add when deploying Nova in environments that lack hardware virtualization extensions. This sets the virtualization type to QEMU and disables CPU mode.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-nova.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--set conf.nova.libvirt.virt_type=qemu --set conf.nova.libvirt.cpu_mode=none\n```\n\n----------------------------------------\n\nTITLE: Configuring GRUB for Intel IOMMU\nDESCRIPTION: Adds Intel IOMMU support to GRUB configuration for enabling PCI passthrough.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash intel_iommu=on\"\n```\n\n----------------------------------------\n\nTITLE: Deploying NetApp Volume Worker Configuration\nDESCRIPTION: This command applies the Kustomize configuration for the Cinder NetApp backend in the OpenStack namespace. It should be executed after creating the necessary Kubernetes secret and configuring volume types.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-netapp-container.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack apply -k /etc/genestack/kustomize/cinder/netapp\n```\n\n----------------------------------------\n\nTITLE: Listing Flavor Profiles in Octavia\nDESCRIPTION: This command lists all existing flavor profiles in Octavia, showing their IDs, names, and associated providers.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack loadbalancer flavorprofile list\n```\n\n----------------------------------------\n\nTITLE: Setting OpenStack Floating IP Properties\nDESCRIPTION: Command to set properties for a floating IP, including port and fixed IP address.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip set\n    --port <port>\n    [--fixed-ip-address <ip-address>]\n    <floating-ip>\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenStack Keypair\nDESCRIPTION: Command to remove one or more keypairs from OpenStack with options for user specification.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keypairs.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} keypair delete\n    [--user <user>]\n    [--user-domain <user-domain>]\n    <key>\n    [<key> ...]\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Objects with Prefix from Swift\nDESCRIPTION: Demonstrates how to delete multiple objects with a common prefix from a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nswift delete flex-container01 example-docs/*\n```\n\n----------------------------------------\n\nTITLE: Symlinking Region-specific Config Directory to Genestack\nDESCRIPTION: Shell command to create a symbolic link from the region-specific configuration directory to the default Genestack configuration path. This allows Genestack to use region-specific configurations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/multi-region-support.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nln -s /opt/my-genestack-configs/region1 /etc/genestack\n```\n\n----------------------------------------\n\nTITLE: Removing Mount Point Directory\nDESCRIPTION: Removes the temporary mount point directory after unmounting.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrmdir /mnt/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Object Expiration in Swift\nDESCRIPTION: Shows how to set an object to expire after a specified number of seconds.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nswift post flex-container01 document01.rtf -H \"X-Delete-After:SECONDS\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Exporter via Shell Script\nDESCRIPTION: Command to install the PostgreSQL Exporter using a shell script. The script executes the chart installation for prometheus-postgres-exporter.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-postgres-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/install-chart.sh prometheus-postgres-exporter\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Logo in Markdown\nDESCRIPTION: Embeds the Kubernetes logo image aligned to the right with a maximum width of 250 pixels.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cloud-design-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Kubernetes](assets/images/kubernetes-stacked-color.svg){align=right : style=\"max-width:250px\"}\n```\n\n----------------------------------------\n\nTITLE: Loading NBD Kernel Module for OpenStack VM Disk Access\nDESCRIPTION: Loads the Network Block Device kernel module with support for up to 8 partitions per device.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmodprobe nbd max_part=8\n```\n\n----------------------------------------\n\nTITLE: Calculating CPU Allocation Ratio for Shared CPU Workloads in Shell\nDESCRIPTION: This snippet demonstrates the formula for calculating CPU allocation ratio for shared CPU workloads. It accounts for total physical CPUs, vCPUs per flavor, number of instances per hypervisor, and CPU overhead.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cpu-allocation-ratio.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  Total physical CPU (PCPU) = 72\n  No. of vCPU per flavor (VCPU)  = 8\n  No. of Instance per hypervisor (VM) = 60\n  Overhead on CPU (OCPU) = 8\n  Formula to calculate CPU allocation ratio:\n\n   CAR = VM * VCPU / (PCPU - OPCU)\n   CAR = 60 * 8 / (72 - 8)\n       = 480/64\n       = ~8\n```\n\n----------------------------------------\n\nTITLE: VFIO Configuration in GRUB\nDESCRIPTION: Configures VFIO PCI IDs in GRUB for device passthrough.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"... vfio-pci.ids=10de:1c30,10de:10f1\"\n```\n\n----------------------------------------\n\nTITLE: Applying OVN Network Policy\nDESCRIPTION: Applies the OVN network policy configuration using kustomize.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/ovn\n```\n\n----------------------------------------\n\nTITLE: Applying General StorageClass Configuration\nDESCRIPTION: Command to create the general StorageClass for Longhorn volume provisioning.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/manifests/longhorn/longhorn-general-storageclass.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Entire Swift Container\nDESCRIPTION: Shows how to delete an entire container and all its contents in Swift.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nswift delete flex-container01\n```\n\n----------------------------------------\n\nTITLE: Getting Kubernetes Cluster Name\nDESCRIPTION: Retrieves the current Kubernetes cluster name from the configuration, which is needed for MariaDB operator deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncluster_name=`kubectl config view --minify -o jsonpath='{.clusters[0].name}'`\necho $cluster_name\n```\n\n----------------------------------------\n\nTITLE: Downloading Multiple Files with Prefix from Swift\nDESCRIPTION: Demonstrates how to download multiple files with a common prefix from a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nswift download flex-container01 --prefix example-docs\n```\n\n----------------------------------------\n\nTITLE: Creating Ceph ConfigMap for Gnocchi\nDESCRIPTION: Shell command to create a ConfigMap containing Ceph configuration for Gnocchi. It dynamically retrieves Ceph monitor hosts from the rook-ceph namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -n openstack -f - <<EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ceph-etc\n  namespace: openstack\ndata:\n  ceph.conf: |\n    [global]\n    mon_host = $(for pod in $(kubectl get pods -n rook-ceph | grep rook-ceph-mon | awk '{print $1}'); do \\\n        echo -n \"$(kubectl get pod $pod -n rook-ceph -o go-template --template='{{.status.podIP}}'):6789,\"; done \\\n        | sed 's/,$//')\nEOF\n```\n\n----------------------------------------\n\nTITLE: Generic Multipath Configuration Status\nDESCRIPTION: Shell command output showing the multipath configuration status using generic settings, displaying path policy and device status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nroot@genestack-compute2:~# multipath -ll\nmpathb (360000000000000000e00000000040001) dm-0 IET,VIRTUAL-DISK\nsize=20G features='0' hwhandler='0' wp=rw\n|-+- policy='service-time 0' prio=1 status=active\n| `- 2:0:0:1 sda 8:0  active ready running\n`-+- policy='service-time 0' prio=1 status=enabled\n  `- 4:0:0:1 sdb 8:16 active ready running\n```\n\n----------------------------------------\n\nTITLE: Resource Creation with Metric Example\nDESCRIPTION: Example demonstrating how to create a new instance resource and associate it with a CPU usage metric.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack metric resource create instance --name my_instance\nopenstack metric create cpu_usage --resource-id <resource_id> --unit GHz\n```\n\n----------------------------------------\n\nTITLE: Validating HTTPRoute Resources\nDESCRIPTION: Retrieves and displays all HTTPRoute resources in the 'openstack' namespace to verify route configurations for the gateway.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n openstack get httproute\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenStack Logo in Markdown\nDESCRIPTION: Embeds the OpenStack logo image aligned to the right with a maximum width of 250 pixels.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cloud-design-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![OpenStack](assets/images/OpenStack-Logo-Vertical.svg){align=right : style=\"max-width:250px\"}\n```\n\n----------------------------------------\n\nTITLE: Listing NBD Device Partitions\nDESCRIPTION: Displays all partitions on the NBD block device to identify the correct partition for mounting.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfdisk /dev/nbd0 -l\n```\n\n----------------------------------------\n\nTITLE: Applying PreferNoSchedule Taint to Worker Node\nDESCRIPTION: Adds a PreferNoSchedule taint to the node which helps herd pods away from the node without completely preventing scheduling, useful for compute nodes to reduce resource competition.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl taint nodes compute-12481.rackerlabs.dev.local key1=value1:PreferNoSchedule\n```\n\n----------------------------------------\n\nTITLE: Calculating CPU Allocation Ratio for CPU Pinning Scenarios in Shell\nDESCRIPTION: This snippet shows how to calculate CPU allocation ratio when running both CPU-pinned VMs and floating instances on the same compute node. It factors in dedicated CPUs for pinning in addition to the regular overhead.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cpu-allocation-ratio.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  No. of CPU dedicated for CPU pinning (RCPUP) : 16\n  CPU allocation ratio:\n\n  CAR = VM * VCPU / (PCPU - RCPUP - OCPU)\n  CAR = 60 * 8 / (72 - 16 - 8)\n      = 480/48\n      = 10\n```\n\n----------------------------------------\n\nTITLE: Creating Platform-Services-Core User in OpenStack\nDESCRIPTION: Creates a new user named 'platform-services-core' in the platform-services project with the specified password.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default user create --project platform-services --password ${PASSWORD} platform-services-core --domain default\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Octavia Preconfiguration\nDESCRIPTION: This snippet shows how to set up a Python virtual environment for running the Octavia preconfiguration playbook. It includes installing necessary packages and activating the virtual environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-octavia.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\napt-get install python3-venv python3-pip\nmkdir -p ~/.venvs\npython3 -m venv --system-site-packages ~/.venvs/octavia_preconf\nsource .venvs/octavia_preconf/bin/activate\npip install --upgrade pip\npip install \"ansible>=2.9\" \"openstacksdk>=1.0.0\" \"python-openstackclient==6.2.0\" kubernetes\n```\n\n----------------------------------------\n\nTITLE: Creating Router for Shared Floating IP in OpenStack\nDESCRIPTION: This command creates a router named 'tester-router'. A router is typically needed to use any public IP, depending on the configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router create tester-router\n```\n\n----------------------------------------\n\nTITLE: Listing OpenStack Images\nDESCRIPTION: Lists all available OpenStack images to check snapshot status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image list\n```\n\n----------------------------------------\n\nTITLE: Filtering Swift Container Contents by Prefix\nDESCRIPTION: Demonstrates how to list only objects with a specific prefix in a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nswift list flex-container01 --prefix example-docs\n```\n\n----------------------------------------\n\nTITLE: Deploying CephFS Filesystem for Glance in Genestack\nDESCRIPTION: This command deploys a CephFS filesystem named 'general-multi-attach' for Glance consumption in Genestack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-external-block.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-defaults-external-pvc/\n```\n\n----------------------------------------\n\nTITLE: Grafana Label Matching Operators\nDESCRIPTION: Defines the available operators for label matching in Grafana log queries. These operators are used to filter and search log entries based on label values.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `=`: exactly equal\n- `!=`: not equal\n- `=~`: regex matches\n- `!~`: regex does not match\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenStack Network Example\nDESCRIPTION: Basic example of creating a new OpenStack network by specifying a cloud name and network name. This is a simplified version of the full network creation command.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack  --os-cloud {cloud_name} network create {network-name}\n```\n\n----------------------------------------\n\nTITLE: Cloning Genestack Repository with Submodules in Shell\nDESCRIPTION: Command to recursively clone the Genestack repository with all its submodules. The code is cloned to the /opt/genestack directory, which is the assumed location throughout the documentation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recurse-submodules -j4 https://github.com/rackerlabs/genestack /opt/genestack\n```\n\n----------------------------------------\n\nTITLE: Enabling Isolated Aggregate Filtering in Nova Configuration\nDESCRIPTION: This snippet demonstrates how to enable isolated aggregate filtering in the Nova configuration file (nova.conf) for OpenStack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n[scheduler]\nenable_isolated_aggregate_filtering = true\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Deploying Sealed Secrets\nDESCRIPTION: Commands for encrypting Kubernetes secrets using kubeseal and deploying the encrypted secrets.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sealed-secrets.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubeseal --scope cluster-wide --allow-empty-data -o yaml --controller-namespace rackspace-system  < ~/grafana-cert.yaml  > encrypted_grafana-cert.yaml\ncat encrypted_grafana-cert.yaml\nkubectl apply -f encrypted_grafana-cert.yaml\nkubectl get sealedsecret/grafana -n rackspace-system\nkubectl get secret grafana -n rackspace-system\n```\n\n----------------------------------------\n\nTITLE: Custom Multipath Configuration Status\nDESCRIPTION: Shell command output showing the multipath configuration status using custom settings with queue-length policy.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nroot@genestack-compute1:~# multipath -ll\n360000000000000000e00000000010001 dm-0 IET,VIRTUAL-DISK\nsize=10G features='0' hwhandler='0' wp=rw\n`-+- policy='queue-length 0' prio=1 status=active\n  |- 2:0:0:1 sda 8:0  active ready running\n  `- 3:0:0:1 sdb 8:16 active ready running\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Role to Platform-Services-Core-Alt User for Default Domain\nDESCRIPTION: Assigns the 'reader' role to the platform-services-core-alt user in the default domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core-alt --domain default reader --inherited\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Nodes for Kube-OVN\nDESCRIPTION: Shell commands to label Kubernetes nodes for Kube-OVN control plane setup and configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn-helm-conversion.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label node -l beta.kubernetes.io/os=linux kubernetes.io/os=linux\nkubectl label node -l node-role.kubernetes.io/control-plane kube-ovn/role=master\nkubectl label node -l ovn.kubernetes.io/ovs_dp_type!=userspace ovn.kubernetes.io/ovs_dp_type=kernel\n```\n\n----------------------------------------\n\nTITLE: Configuring OVN Backup\nDESCRIPTION: Applies the OVN backup configuration with pruning options to avoid ConfigMap and Secret accumulation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/ovn-backup/base \\\n    --prune -l app=ovn-backup \\\n    --prune-allowlist=core/v1/Secret \\\n    --prune-allowlist=core/v1/ConfigMap\n```\n\n----------------------------------------\n\nTITLE: Running the Libvirt Installation Script\nDESCRIPTION: Executes the installation script for Libvirt deployment. The script is located at bin/install-libvirt.sh and handles the deployment process.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-libvirt.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-libvirt.sh\"\n```\n\n----------------------------------------\n\nTITLE: Setting OVN Bridge Annotations\nDESCRIPTION: Configures the OVS bridges to be used on the hosts by annotating nodes with the bridge names.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n        nodes \\\n        -l openstack-compute-node=enabled -l openstack-network-node=enabled \\\n        ovn.openstack.org/bridges='br-ex'\n```\n\n----------------------------------------\n\nTITLE: Copying MetalLB Configuration for Local Modification\nDESCRIPTION: These commands create a local directory for MetalLB manifests and copy the default configuration file. This allows for local modifications without affecting the git-managed files.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-metallb.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /etc/genestack/manifests/metallb/\ncp /etc/genestack/manifests/metallb/metallb-openstack-service-lb.yml /etc/genestack/manifests/metallb/metallb-openstack-service-lb.yml\n```\n\n----------------------------------------\n\nTITLE: Counting Kubernetes Nodes\nDESCRIPTION: Command to count the total number of Kubernetes nodes in the cluster by filtering kubectl output.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-monitoring-introduction.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# tail to skip header lines\nkubectl get node | tail -n +2 | wc -l\n```\n\n----------------------------------------\n\nTITLE: Adding Node Labels in Kubernetes\nDESCRIPTION: This shell command demonstrates how to apply a label to a Kubernetes node using kubectl. It requires replacing placeholder values for node name, key, and value.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label node ${NODE_NAME} ${KEY}=${VALUE}\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Gateway Setup Script with Arguments\nDESCRIPTION: Executes the setup script with predefined environment variables to automate the configuration process without interactive prompts.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nACME_EMAIL=\"username@your.domain.tld\" GATEWAY_DOMAIN=\"your.domain.tld\" /opt/genestack/bin/setup-nginx-gateway.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Memcached Metrics in Helm Configuration\nDESCRIPTION: Helm configuration to enable the Memcached exporter and ServiceMonitor for Prometheus integration. These values should be added to the memcached-helm-overrides.yaml file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-memcached-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n  enabled: true\n  serviceMonitor:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager for PagerDuty Integration\nDESCRIPTION: This YAML configuration demonstrates how to set up Alertmanager to forward alerts to PagerDuty. It includes global settings, inhibition rules to prevent alert flooding, routing configuration with grouping, and the PagerDuty service integration details.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/alertmanager-pagerduty.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nalertmanager:\n\n  ## Alertmanager configuration directives\n  ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file\n  ##      https://prometheus.io/webtools/alerting/routing-tree-editor/\n  ##\n  config:\n    global:\n      resolve_timeout: 5m\n      pagerduty_url: 'https://events.pagerduty.com/v2/enqueue'\n    inhibit_rules:\n      - source_matchers:\n          - 'severity = critical'\n        target_matchers:\n          - 'severity =~ warning|info'\n        equal:\n          - 'namespace'\n          - 'alertname'\n      - source_matchers:\n          - 'severity = warning'\n        target_matchers:\n          - 'severity = info'\n        equal:\n          - 'namespace'\n          - 'alertname'\n      - source_matchers:\n          - 'alertname = InfoInhibitor'\n        target_matchers:\n          - 'severity = info'\n        equal:\n          - 'namespace'\n      - target_matchers:\n          - 'alertname = InfoInhibitor'\n    route:\n      group_by: ['namespace']\n      group_wait: 30s\n      group_interval: 5m\n      repeat_interval: 12h\n      receiver: 'pagerduty-notifications'\n      routes:\n        - receiver: 'null'\n          matchers:\n            - alertname = \"Watchdog\"\n    receivers:\n      - name: 'null'\n      - name: 'pagerduty-notifications'\n        pagerduty_configs:\n        - service_key: 0c1cc665a594419b6d215e81f4e38f7\n          send_resolved: true\n```\n\n----------------------------------------\n\nTITLE: Individual Database Restore Command\nDESCRIPTION: Command to restore a single database backup file to the MariaDB cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-mariadb-ops.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmysql -h $(kubectl -n openstack get service mariadb-cluster-primary -o jsonpath='{.spec.clusterIP}') \\\n        -u root \\\n        -p$(kubectl --namespace openstack get secret mariadb -o jsonpath='{.data.root-password}' | base64 -d) \\\n        ${DATABASE_NAME} < /tmp/${DATABASE_FILE}\n```\n\n----------------------------------------\n\nTITLE: Initializing S3 Boto3 Client\nDESCRIPTION: Python code example showing how to initialize and configure the Boto3 S3 client for use with Flex Object storage. Includes debug logging setup and custom endpoint configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-3rd-party.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport boto3\nimport botocore\nboto3.set_stream_logger(name='botocore')  # this enables debug tracing\nsession = boto3.session.Session()\ns3_client = session.client(\n    service_name='s3',\n    aws_access_key_id='ACCESS',\n    aws_secret_access_key='SECRET',\n    endpoint_url='https://YOUR.ENDPOINT.HOST/',\n    # The next option is only required because my provider only offers \"version 2\"\n    # authentication protocol. Otherwise this would be 's3v4' (the default, version 4).\n    config=botocore.client.Config(signature_version='s3'),\n)\ns3_client.list_objects(Bucket='bucket_name')\n```\n\n----------------------------------------\n\nTITLE: Querying Cinder Volume Details in OpenStack\nDESCRIPTION: This command uses kubectl to execute an OpenStack CLI command within the openstack-admin-client pod. It retrieves and displays detailed information about a specific Cinder volume, including its encryption status, size, and other attributes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-fips-encryption.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume show 7b2a9061-bcb8-46d2-8b20-ecc70b35da7d\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific Credential Details\nDESCRIPTION: Command to view detailed information about a specific credential including access and secret keys.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-3rd-party.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenstack credential show <credential-id>\n```\n\n----------------------------------------\n\nTITLE: Installing Gnocchi Client and Ceilometer Client\nDESCRIPTION: Shell command to install gnocchiclient and python-ceilometerclient using pip within the openstack-admin-client pod in the OpenStack namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it openstack-admin-client -n openstack -- /var/lib/openstack/bin/pip install python-ceilometerclient gnocchiclient\n```\n\n----------------------------------------\n\nTITLE: Displaying OVS Bridge Information in Genestack (Shell)\nDESCRIPTION: Shows the output of ovs-vsctl command, displaying information about OVS bridges including br-int and br-ext. This command is executed using kubectl to run on a specific node.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko vsctl ${NODE} show\n```\n\n----------------------------------------\n\nTITLE: Creating Secret for MariaDB Monitoring User in Shell\nDESCRIPTION: This snippet creates a Kubernetes secret in the openstack namespace for the MariaDB monitoring user. It generates a random 64-character password for the monitoring user.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-mysql-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic mariadb-monitoring \\\n        --type Opaque \\\n        --from-literal=username=\"monitoring\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Unloading NBD Kernel Module\nDESCRIPTION: Removes the NBD kernel module from the system when no longer needed.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrmmod nbd\n```\n\n----------------------------------------\n\nTITLE: Creating a Flavor Profile for Amphora Provider in Octavia\nDESCRIPTION: This command creates a flavor profile for the Amphora provider, specifying a single Amphora topology and a compute flavor. It demonstrates how to set up a basic load balancer configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-flavor-and-flavorprofile-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer flavorprofile create --name fp.single.lite --provider amphora --flavor-data '{\"loadbalancer_topology\": \"SINGLE\", \"compute_flavor\": \"f485b7c3-4efd-4c0d-b8b0-997db6bdbbce\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Multi-region Genestack Configs\nDESCRIPTION: Example directory structure for organizing Genestack configurations across multiple regions. This structure enables clear separation of region-specific inventory files and custom helm override configurations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/multi-region-support.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── my-genestack-configs\n│  ├── region1\n│  │  ├── inventory\n│  │  │  ├── inventory.yaml\n│  │  ├── helm-configs\n│  │  │  ├── nova\n│  │  │  │  ├── region1-custom-nova-helm-overrides.yaml\n│  ├── region2\n│  │  ├── inventory\n│  │  │  ├── -inventory.yaml\n│  │  ├── helm-configs\n│  │  │  ├── nova\n│  │  │  │  ├── region2-custom-nova-helm-overrides.yaml\n└── .gitignore\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Nodes for Longhorn Storage\nDESCRIPTION: Command to label Kubernetes nodes for Longhorn storage deployment, targeting control plane nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label node -l node-role.kubernetes.io/control-plane longhorn.io/storage-node=enabled\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus ServiceMonitor CRD Availability in Kubernetes\nDESCRIPTION: Verifies if the ServiceMonitor custom resource definition required for RabbitMQ monitoring is installed in the cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get customresourcedefinitions.apiextensions.k8s.io servicemonitors.monitoring.coreos.com\n```\n\n----------------------------------------\n\nTITLE: Applying Gateway API Route Configuration - Shell\nDESCRIPTION: kubectl command to apply the modified route configuration in the openstack namespace\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-custom.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack apply -f /etc/genestack/gateway-api/routes/custom-<SERVICE_NAME>-gateway-route.yaml\n```\n\n----------------------------------------\n\nTITLE: VaultAuth Configuration\nDESCRIPTION: YAML configuration for Vault authentication using Kubernetes service account.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\nname: keystone-auth\nnamespace: openstack\nspec:\nmethod: kubernetes\nmount: genestack\nkubernetes:\n   role: osh\n   serviceAccount: default\n   audiences:\n     - vault\nvaultConnectionRef: vault-connection\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Hosts to GPU Aggregate in OpenStack\nDESCRIPTION: This snippet shows how to add multiple compute hosts to the 'GPU' aggregate using separate OpenStack CLI commands.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack aggregate add host GPU compute001.example.com\nopenstack aggregate add host GPU compute002.example.com\n```\n\n----------------------------------------\n\nTITLE: Editing Ansible Inventory for New Node in Genestack\nDESCRIPTION: Adds a new worker node to the Ansible inventory file for the Genestack deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvim /etc/genestack/inventory/inventory.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for OpenStack Flex Object Storage\nDESCRIPTION: Configuration file setup for AWS CLI to work with OpenStack Flex Object Storage. Includes endpoint URL and signature version settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[plugins]\nendpoint = awscli_plugin_endpoint\n\n[profile default]\nregion = sjc3\ns3 =\nendpoint_url = https://swift.api.sjc3.rackspacecloud.com\nsignature_version = s3v4\ns3api =\nendpoint_url = https://swift.api.sjc3.rackspacecloud.com\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Nodes for Kube-OVN\nDESCRIPTION: Shell commands to label Kubernetes nodes for Kube-OVN deployment. Sets OS labels and designates control plane nodes as Kube-OVN masters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label node -l beta.kubernetes.io/os=linux kubernetes.io/os=linux\nkubectl label node -l node-role.kubernetes.io/control-plane kube-ovn/role=master\nkubectl label node -l ovn.kubernetes.io/ovs_dp_type!=userspace ovn.kubernetes.io/ovs_dp_type=kernel\n```\n\n----------------------------------------\n\nTITLE: Link Formatting in Markdown\nDESCRIPTION: Demonstrates proper link formatting in Markdown, including relative paths for internal links and external links with target blank functionality.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Link](path to link)\n```\n\n----------------------------------------\n\nTITLE: Adding System-wide Reader Role to Platform-Services-Core User\nDESCRIPTION: Assigns the 'reader' role to the platform-services-core user at the system level, giving read access across all resources.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core --system all reader\n```\n\n----------------------------------------\n\nTITLE: Basic Metric Operations in OpenStack CLI\nDESCRIPTION: Basic commands for listing and showing metric information in OpenStack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack metric list\nopenstack metric show <metric_id>\n```\n\n----------------------------------------\n\nTITLE: Creating Longhorn Namespace in Kubernetes\nDESCRIPTION: Shell command to apply the Longhorn namespace manifest to Kubernetes cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/manifests/longhorn/longhorn-namespace.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Operator via Shell Script\nDESCRIPTION: Executes the postgres-operator deployment script located in the bin directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-postgresql.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-postgres-operator.sh\"\n```\n\n----------------------------------------\n\nTITLE: Adding Keystone certificates to clouds.yaml for self-signed certs\nDESCRIPTION: This snippet adds Keystone certificates to the generated clouds.yaml file when using self-signed certificates. It retrieves the certificate from a Kubernetes secret and updates the clouds.yaml file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-openstack-metrics-exporter.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nks_cert=\"$(kubectl get secret -n openstack keystone-tls-public -o json | jq -r '.data.\"tls.crt\"' | base64 -d)\" \\\n        yq -I6 '.\"clouds.yaml\" |= (from_yaml | .clouds.default.cacert = strenv(ks_cert) | to_yaml)' \\\n        </tmp/generated-clouds-yaml | tee /tmp/generated-clouds-certs-yaml\n```\n\n----------------------------------------\n\nTITLE: Subnet Information Output\nDESCRIPTION: Example output showing Kube-OVN subnet configuration with CIDR ranges and gateway information.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn-helm-conversion.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNAME          PROVIDER   VPC           PROTOCOL   CIDR            PRIVATE   NAT     DEFAULT   GATEWAYTYPE   V4USED   V4AVAILABLE   V6USED   V6AVAILABLE   EXCLUDEIPS       U2OINTERCONNECTIONIP\njoin          ovn        ovn-cluster   IPv4       100.64.0.0/16   false     false   false     distributed   3        65530         0        0             [\"100.64.0.1\"]\novn-default   ovn        ovn-cluster   IPv4       10.236.0.0/14   false     true    true      distributed   111      262030        0        0             [\"10.236.0.1\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Ceph Operator for Genestack\nDESCRIPTION: These commands deploy the Ceph operator using Kustomize and set the specific image version for the Rook Ceph operator.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-external-block.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rook-operator/\nkubectl -n rook-ceph set image deploy/rook-ceph-operator rook-ceph-operator=rook/ceph:v1.13.7\n```\n\n----------------------------------------\n\nTITLE: Creating MetalLB Namespace in Kubernetes\nDESCRIPTION: This command applies the MetalLB namespace configuration to the Kubernetes cluster. It uses a pre-defined YAML file located in the Genestack manifests directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-metallb.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/manifests/metallb/metallb-namespace.yaml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deployment Type Selection in Genestack\nDESCRIPTION: Shows the fundamental deployment choice between 'base' for production-ready HA environments and 'aio' for minimal test environments. This is used when building a Genestack cloud deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase\n```\n\n----------------------------------------\n\nTITLE: Generating clouds.yaml manifest for Openstack Exporter\nDESCRIPTION: This snippet creates a manifest file for the cloud configuration using the user's existing clouds.yaml file. It uses printf and yq to format the output.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-openstack-metrics-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprintf -v m \"$(cat ~/.config/openstack/clouds.yaml)\"; \\\n    m=\"$m\" yq -I6 -n '.\"clouds.yaml\" = strenv(m)' | \\\n        tee /tmp/generated-clouds-yaml\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Kubespray in Shell\nDESCRIPTION: This command changes the current working directory to the Kubespray submodule within the Genestack installation. This is required to run the upgrade playbook from the correct location.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray-upgrade.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /opt/genestack/submodules/kubespray\n```\n\n----------------------------------------\n\nTITLE: Indexing Driver Options\nDESCRIPTION: Supported database drivers for Gnocchi's indexing functionality, which handles resource and metric metadata storage.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/metering-gnocchi.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n - PostgreSQL (_flex default_)\n - MySQL (_version 5.6.4 or higher_)\n```\n\n----------------------------------------\n\nTITLE: Setting Password Variable for User Creation\nDESCRIPTION: Sets a password variable that will be used when creating new users. This is a security parameter that is required for user creation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPASSWORD=SuperSecrete\n```\n\n----------------------------------------\n\nTITLE: Installing MariaDB Exporter Chart in Shell\nDESCRIPTION: This snippet installs the MariaDB Exporter using a chart. It assumes the existence of a script named 'install-chart.sh' in the 'bin' directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-mysql-exporter.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/install-chart.sh prometheus-mysql-exporter\n```\n\n----------------------------------------\n\nTITLE: Running the Nova deployment script in Genestack\nDESCRIPTION: This command executes the Nova installation script located in the bin directory. The script handles the deployment of Nova services with Ceph disabled by default.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-nova.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-nova.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Generating Release Notes in Shell\nDESCRIPTION: This snippet installs required dependencies, updates the system, installs pandoc, generates release notes using reno, and converts them from RST to Markdown format. It uses pip for Python package installation and apt for system package management.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/release-notes.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r doc-requirements.txt -r dev-requirements.txt\napt update && apt install -y pandoc\nreno report -o /tmp/reno.rst\npandoc /tmp/reno.rst -f rst -t markdown -o docs/release-notes.md\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keystone Admin Password from Kubernetes Secret\nDESCRIPTION: Command to extract the Keystone admin password from a Kubernetes secret in the OpenStack namespace. The password is base64 decoded after retrieval.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/octavia_preconf/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(octavia_preconf) root@saturn-c1:~# kubectl get secret -n openstack keystone-admin -o jsonpath='{ .data.password }' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Selecting Neutron Database in Genestack MySQL (SQL)\nDESCRIPTION: Switches to the Neutron database within the MariaDB instance. This is typically done after connecting to the database to perform Neutron-specific queries.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nuse neutron;\n```\n\n----------------------------------------\n\nTITLE: Applying generated Kubernetes secrets for Genestack\nDESCRIPTION: This command applies the generated secrets from the kubesecrets.yaml file to the Kubernetes cluster, which is required for the Genestack deployment to function correctly.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-namespace.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f /etc/genestack/kubesecrets.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring systemd-resolved for Cinder Volume Node\nDESCRIPTION: Example configuration for systemd-resolved to ensure DNS resolution works correctly for the Cinder volume node. This configuration points to CoreDNS and sets the appropriate search domains for cluster communication.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n[Resolve]\nDNS=169.254.25.10\n#FallbackDNS=\nDomains=openstack.svc.cluster.local svc.cluster.local cluster.local\n#LLMNR=no\n#MulticastDNS=no\nDNSSEC=no\nCache=no-negative\n#DNSStubListener=yes\n```\n\n----------------------------------------\n\nTITLE: Installing Kube-OVN Prometheus Monitoring\nDESCRIPTION: Command to apply the Prometheus service monitor configuration for Kube-OVN metrics collection. The configuration is applied from the genestack kustomize directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-kube-ovn.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f /etc/genestack/kustomize/prometheus-ovn/\n```\n\n----------------------------------------\n\nTITLE: Archive Policy Management in OpenStack\nDESCRIPTION: Commands for creating and managing archive policies for metrics.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack metric archive-policy create <policy_name> \\\n  --definition <policy_definition> \\\n  --back-window <back_window> \\\n  --aggregation-method <method>\n```\n\n----------------------------------------\n\nTITLE: Emoji/Symbol Formatting Limitations\nDESCRIPTION: Shows why emojis should be avoided in the Genestack documentation as they are not properly supported by Python Markdown.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n:exclamation:\n```\n\n----------------------------------------\n\nTITLE: Validating Libvirt Functionality with virsh\nDESCRIPTION: Validates the Libvirt deployment by executing the virsh list command on a compute host. This command connects to a libvirt pod in the openstack namespace and lists the virtual machines.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-libvirt.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it $(kubectl get pods -l application=libvirt -o=jsonpath='{.items[0].metadata.name}' -n openstack) -n openstack -- virsh list\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenStack Snapshot\nDESCRIPTION: Downloads a snapshot image using its ID to a local file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image save --file snapshot.raw {Image ID}\n```\n\n----------------------------------------\n\nTITLE: Running Ceilometer Deployment Script\nDESCRIPTION: Command to run the Ceilometer deployment script which is located at bin/install-ceilometer.sh.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-ceilometer.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-ceilometer.sh\"\n```\n\n----------------------------------------\n\nTITLE: Ceilometer Configuration Update\nDESCRIPTION: YAML configuration example for updating Ceilometer's resource type definitions to match new attributes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-metrics.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  gnocchi_resources:\n    resources:\n      - resource_type: image\n        attributes:\n          os_type: resource_metadata.properties.os_type\n          os_distro: resource_metadata.properties.os_distro\n          os_version: resource_metadata.properties.os_version\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in the Virtual Environment\nDESCRIPTION: Commands to activate the virtual environment and install required Python packages. Installs Ansible, OpenStack SDK, and OpenStack Client with specific version requirements.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/octavia_preconf/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nroot@saturn-c1:~# source .venvs/octavia_preconf/bin/activate\n(octavia_preconf) root@saturn-c1:~#\n(octavia_preconf) root@saturn-c1:~# pip install --upgrade pip\n(octavia_preconf) root@saturn-c1:~# pip install \"ansible>=2.9\" \"openstacksdk>=1.0.0\" \"python-openstackclient==6.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Verifying iSCSI Target Configuration\nDESCRIPTION: Shell command output showing the iSCSI target configuration including LUN information, initiator connections, and backing store details.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nroot@genestack-storage1:~# tgtadm --mode target --op show\nTarget 4: iqn.2010-10.org.openstack:dd88d4b9-1297-44c1-b9bc-efd6514be035\n    System information:\n        Driver: iscsi\n        State: ready\n    I_T nexus information:\n        I_T nexus: 4\n            Initiator: iqn.2004-10.com.ubuntu:01:8392e3447710 alias: genestack-compute2.cluster.local\n            Connection: 0\n                IP Address: 10.1.2.213\n        I_T nexus: 5\n            Initiator: iqn.2004-10.com.ubuntu:01:8392e3447710 alias: genestack-compute2.cluster.local\n            Connection: 0\n                IP Address: 10.1.1.213\n    LUN information:\n        LUN: 0\n            Type: controller\n            SCSI ID: IET     00040000\n            SCSI SN: beaf40\n            Size: 0 MB, Block size: 1\n            Online: Yes\n            Removable media: No\n            Prevent removal: No\n            Readonly: No\n            SWP: No\n            Thin-provisioning: No\n            Backing store type: null\n            Backing store path: None\n            Backing store flags:\n        LUN: 1\n            Type: disk\n            SCSI ID: IET     00040001\n            SCSI SN: beaf41\n            Size: 10737 MB, Block size: 512\n            Online: Yes\n            Removable media: No\n            Prevent removal: No\n            Readonly: No\n            SWP: No\n            Thin-provisioning: No\n            Backing store type: rdwr\n            Backing store path: /dev/cinder-volumes-1/dd88d4b9-1297-44c1-b9bc-efd6514be035\n            Backing store flags:\n    Account information:\n        sRs8FV73FeaF2LFnPb4j\n    ACL information:\n        ALL\n```\n\n----------------------------------------\n\nTITLE: Validating Gateway Resources\nDESCRIPTION: Retrieves and displays the 'flex-gateway' resource in the 'nginx-gateway' namespace to verify gateway configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n nginx-gateway get gateways.gateway.networking.k8s.io flex-gateway\n```\n\n----------------------------------------\n\nTITLE: Listing EC2 Credentials\nDESCRIPTION: Command to list all existing EC2 credentials in OpenStack.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-3rd-party.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack credential list\n```\n\n----------------------------------------\n\nTITLE: Retrieving PCI Device Information for NVIDIA GPUs\nDESCRIPTION: This shell command uses lspci to list PCI devices and grep to filter for NVIDIA GPUs. It displays the device addresses, vendor ID, and product ID for NVIDIA GPUs in the system.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-service-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nlspci -nn | grep -i nvidia\n> 3f:00.0 3D controller [0302]: NVIDIA Corporation GA103 [10de:2321] (rev a1)\n> 56:00.0 3D controller [0302]: NVIDIA Corporation GA103 [10de:2321] (rev a1)\n```\n\n----------------------------------------\n\nTITLE: Listing Older Object Versions in Swift Archive Container\nDESCRIPTION: This snippet shows how to list older versions of an object stored in the archive container. The prefix parameter is used to filter results to only show versions of a specific object.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/archive?prefix=009my_object -X GET -H \"X-Auth-Token: $token\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kube-OVN Network Interface\nDESCRIPTION: Basic Helm override configuration for Kube-OVN specifying the network interface bindings. Sets IFACE and VLAN_INTERFACE_NAME to br-overlay.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnetworking:\n  IFACE: \"br-overlay\"\n  vlan:\n    VLAN_INTERFACE_NAME: \"br-overlay\"\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenStack Admin Client Pod\nDESCRIPTION: This command applies a Kubernetes manifest to deploy an optional OpenStack admin client pod in the OpenStack namespace. This pod provides a convenient way to interact with the OpenStack environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack apply -f /etc/genestack/manifests/utils/utils-openstack-client-admin.yaml\n```\n\n----------------------------------------\n\nTITLE: Sourcing Genestack Environment Variables in Shell\nDESCRIPTION: This command sources the Genestack environment variables from a script file. This step is necessary before running the upgrade playbook to ensure all required variables are set.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray-upgrade.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/genestack/scripts/genestack.rc\n```\n\n----------------------------------------\n\nTITLE: Modifying Gateway API Listener Domain - Shell\nDESCRIPTION: Shell commands to create directory and modify the domain name in the listener configuration using sed\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-custom.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /etc/genestack/gateway-api/listeners\nsed 's/your.domain.tld/<YOUR_DOMAIN>/g' \\\n    /opt/genestack/etc/gateway-api/listeners/<SERVICE_NAME>-https.json \\\n    > /etc/genestack/gateway-api/listeners/<SERVICE_NAME>-https.json\n```\n\n----------------------------------------\n\nTITLE: Running host-setup playbook for Genestack configuration\nDESCRIPTION: This snippet demonstrates how to re-run the host-setup playbook on a specific node to ensure proper kernel networking variables are set. It includes steps to change to the correct directory, source environment variables, and execute the Ansible playbook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-alert-claim-storm.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo su -l\n\ncd /opt/genestack/ansible && \\\nsource ../scripts/genestack.rc && \\\nansible-playbook playbooks/host-setup.yml \\\n-i /etc/genestack/inventory/openstack-flex-inventory.ini \\\n--limit openstack-flex-node-1.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Installing External Secrets Operator with Helm\nDESCRIPTION: Commands to add the external-secrets helm repository and install the operator in a dedicated namespace.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add external-secrets https://charts.external-secrets.io\nhelm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Executing Hyperconverged Lab Deployment Script in Shell\nDESCRIPTION: This snippet demonstrates how to run the hyperconverged lab deployment script with environment variables set. It sets various configuration options like email, domain, cloud settings, and image details before executing the script.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/build-test-envs.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport ACME_EMAIL=\"user@domain.com\"\nexport GATEWAY_DOMAIN=\"cluster.local\"\nexport OS_CLOUD=\"default\"\nexport OS_FLAVOR=\"gp.0.8.16\"\nexport OS_IMAGE=\"Ubuntu 24.04\"\nexport HYPERCONVERGED_DEV=\"false\"\n/opt/genestack/scripts/hyperconverged-lab.sh\n```\n\n----------------------------------------\n\nTITLE: Running Unsafe Kubespray Upgrade in Shell\nDESCRIPTION: This command performs a faster but potentially disruptive upgrade by running the cluster playbook with the upgrade_cluster_setup flag set to true. It also sets the kube_version to the target version.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray-upgrade.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook cluster.yml -e upgrade_cluster_setup=true -e kube_version=${VERSION_NUMBER}\n```\n\n----------------------------------------\n\nTITLE: Creating Bastion Server for Testing in OpenStack\nDESCRIPTION: This command creates a bastion server named 'tester-bastion' for testing purposes. It specifies the flavor, key pair, network, and image to use. The $IMAGE_UUID should be replaced with the actual UUID of the image to use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create tester-bastion --flavor m1.tiny \\\n                                           --key-name keypair \\\n                                           --network tester-network \\\n                                           --image $IMAGE_UUID\n```\n\n----------------------------------------\n\nTITLE: Uploading Initial Object Version to Swift Container\nDESCRIPTION: This snippet shows how to upload an initial version of an object named 'my_object' to the 'current' container. The initial upload does not create any entries in the versioning container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-object-storage-swift.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# curl -i $publicURL/current/my_object --data-binary 1 -X PUT -H \"Content-Length: 0\" -H \"X-Auth-Token: $token\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Gateway Issuer Configuration in YAML\nDESCRIPTION: Shows the current configuration of the selfSigned ClusterIssuer used by Gateway API in Genestack, along with the Gateway API manifest that references it via annotations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-ca-issuer.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat internal-gateway-issuer.yaml\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: flex-gateway-issuer\n  namespace: nginx-gateway\nspec:\n  selfSigned: {}\n\ncat internal-gateway-api.yaml\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: flex-gateway\n  namespace: nginx-gateway\n  annotations: # This is the name of the ClusterIssuer created in the previous step\n    cert-manager.io/cluster-issuer: flex-gateway-issuer\n    acme.cert-manager.io/http01-edit-in-place: \"true\"\n....\n```\n\n----------------------------------------\n\nTITLE: Creating Physical Volume for Cinder\nDESCRIPTION: Command to create a physical volume on a block device (/dev/vdf) that will be used for the Cinder volume group.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npvcreate /dev/vdf\n```\n\n----------------------------------------\n\nTITLE: Viewing Alerting Rules Configuration in Shell\nDESCRIPTION: This command displays the contents of the alerting_rules.yaml file, which contains custom alerting rules for the Genestack monitoring setup. The file is located in the /etc/genestack/helm-configs/prometheus/ directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/monitoring-getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nless /etc/genestack/helm-configs/prometheus/alerting_rules.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Gateway API Route Configuration - YAML\nDESCRIPTION: Template for Gateway API route configuration located in /opt/genestack/etc/gateway-api/routes directory\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-custom.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"etc/gateway-api/routes/custom-<SERVICE_NAME>-gateway-route.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Host Setup with Environment Configuration\nDESCRIPTION: Example showing how to source environment variables and run the host setup playbook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/genestack/scripts/genestack.rc\nansible-playbook host-setup.yml\n```\n\n----------------------------------------\n\nTITLE: Installing AWS CLI and S3 Endpoint Plugin\nDESCRIPTION: Command to install the AWS CLI and the endpoint plugin for S3 compatibility.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install awscli awscli-plugin-endpoint\n```\n\n----------------------------------------\n\nTITLE: Creating Nova CPU Allocation Override for Region 2\nDESCRIPTION: YAML configuration for overriding the CPU allocation ratio for Nova in Region 2. This sets the CPU allocation ratio to 4.0, which is different from Region 1's configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/multi-region-support.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  nova:\n    DEFAULT:\n      cpu_allocation_ratio: 4.0\n```\n\n----------------------------------------\n\nTITLE: Adding NFS Provisioner Helm Repository\nDESCRIPTION: Adds the Helm repository for the NFS subdir external provisioner to enable installation of the NFS storage provider.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-nfs-external.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/\n```\n\n----------------------------------------\n\nTITLE: Example Keystone Mapping JSON Configuration\nDESCRIPTION: This JSON snippet represents an example mapping configuration for Keystone. It's located at '/opt/genestack/etc/keystone/mapping.json' in the genestack repository.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-federation.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n--8<-- \"etc/keystone/mapping.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Pod for OVN Database Recovery with ovsdb-tool\nDESCRIPTION: Kubernetes pod manifest for creating a utility pod with access to the OVN database files. This pod mounts both the host's OVN configuration directory and the backup persistent volume, allowing for database inspection and recovery operations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-db-backup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: ovn-central-kubectl\n  namespace: kube-system\nspec:\n  serviceAccount: \"ovn\"\n  serviceAccountName: \"ovn\"\n  nodeName: <full name first _k8s_ node from NODE_IPS>\n  tolerations:\n  - key: node-role.kubernetes.io/control-plane\n    operator: \"Exists\"\n    effect: \"NoSchedule\"\n  volumes:\n  - name: host-config-ovn\n    hostPath:\n      path: /etc/origin/ovn\n      type: \"\"\n  - name: backup\n    persistentVolumeClaim:\n      claimName: ovndb-backup\n  containers:\n  - name: ovn-central-kubectl\n    command:\n      - \"/usr/bin/sleep\"\n    args:\n      - \"infinity\"\n    image: docker.io/kubeovn/kube-ovn:v1.12.30\n    volumeMounts:\n    - mountPath: /etc/ovn\n      name: host-config-ovn\n    - mountPath: /backup\n      name: backup\n```\n\n----------------------------------------\n\nTITLE: Enabling iSCSI in Compute Nodes Inventory\nDESCRIPTION: Example inventory configuration to enable iSCSI services on compute nodes. This should be added to the inventory file before running the host-setup.yaml playbook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  vars:\n    enable_iscsi: true\n```\n\n----------------------------------------\n\nTITLE: Navigating to Genestack Directory\nDESCRIPTION: Changes the current working directory to the Genestack installation location. This is the first step in the upgrade process.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd /opt/genestack\n```\n\n----------------------------------------\n\nTITLE: Example Gateway API Listener Configuration - YAML\nDESCRIPTION: Template for Gateway API listener configuration located in /opt/genestack/etc/gateway-api/listeners directory\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-custom.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"etc/gateway-api/listeners/<SERVICE_NAME>-https.json\"\n```\n\n----------------------------------------\n\nTITLE: Example Structure of Linked Genestack Configuration Directory\nDESCRIPTION: The directory structure of /etc/genestack after creating the symbolic link to the region-specific configuration. Shows how inventory and helm configuration overrides are organized.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/multi-region-support.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n├── inventory\n│  │  ├── inventory.yaml\n├── helm-configs\n│  ├── nova\n│  │  ├── region1-custom-nova-helm-overrides.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Swift Client Help Information\nDESCRIPTION: Shows how to access the help documentation for the Swift client using the --help flag.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nswift --help\n```\n\n----------------------------------------\n\nTITLE: Running Helm Installation with Region-specific Overrides\nDESCRIPTION: Shell command to deploy Nova with region-specific configuration overrides. Uses the install-nova.sh script with an additional flag pointing to the custom region-specific override file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/multi-region-support.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/opt/genestack/bin/install-nova.sh -f /etc/genestack/helm-configs/nova/region1-nova-helm-overrides.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects and Containers in OpenStack\nDESCRIPTION: Demonstrates how to delete objects and containers, including how to delete a non-empty container using the recursive flag.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-openstack-cli.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD object delete flex-container01 example.rtf\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud $CLOUD object delete flex-container01 example.rtf\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD container delete flex-container01\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud $CLOUD container delete flex-container01\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud $CLOUD container --recursive delete flex-container01\n```\n\n----------------------------------------\n\nTITLE: Creating QoS Policy for NetApp ONTAP Volume Type in OpenStack\nDESCRIPTION: This snippet demonstrates how to create a QoS policy for the 'netapp-1' volume type using the OpenStack CLI. It sets peak and expected IOPS per GiB for the back-end consumer.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-volume-qos-policies.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack volume qos create --consumer \"back-end\" --property \"peakIOPSperGiB=8\" --property \"expectedIOPSperGiB=7\" netapp-qos\n```\n\n----------------------------------------\n\nTITLE: Configuring VIP on Instance Interface in Linux\nDESCRIPTION: This command adds the VIP to the network interface of the instance. The $VIP should be replaced with the actual VIP, and the interface name (enp3s0) might need to be adjusted based on the actual interface name in the instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsudo ip address add $VIP/24 dev enp3s0\n```\n\n----------------------------------------\n\nTITLE: VaultConnection Configuration\nDESCRIPTION: YAML configuration for establishing connection to the Vault server with TLS settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultConnection\nmetadata:\nnamespace: openstack\nname: vault-connection\nspec:\naddress: https://vault.vault.svc.cluster.local:8200\nskipTLSVerify: false\ncaCertSecretRef: \"vault-ca-secret\"\n```\n\n----------------------------------------\n\nTITLE: Searching Logs with LogCLI\nDESCRIPTION: Example of using logcli-parallel command to search for logs from nova or placement services within the last 15 minutes containing a specific project ID. The output is piped through jq to extract the log field.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/observability-info.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlogcli-parallel --since=15m '{application=~\"nova|placement\"} |~ `<my-project-id-here>`' | jq -r '.log'\n```\n\n----------------------------------------\n\nTITLE: Installing Keyring from Python Package Index\nDESCRIPTION: Installs the keyring package using pip. This method can be used on any system with Python and pip installed.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install keyring\n```\n\n----------------------------------------\n\nTITLE: Installing Sealed Secrets via Kustomize\nDESCRIPTION: Commands for navigating to base directory and applying Sealed Secrets installation using Kustomize with Helm enablement.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sealed-secrets.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd kustomize/sealed-secrets/base\nkubectl  kustomize . --enable-helm | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Rook Operator Image in Kubernetes\nDESCRIPTION: Sets a specific image version for the Rook-Ceph operator deployment. This can be used to pin the operator to a particular version if needed.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n rook-ceph set image deploy/rook-ceph-operator rook-ceph-operator=rook/ceph:v1.16.5\n```\n\n----------------------------------------\n\nTITLE: Executing K8s Installation Role with Kubespray\nDESCRIPTION: Example playbook showing how to implement the k8s_install role with Kubespray. The playbook runs with root privileges, includes variable files, and specifies the Kubespray provider configuration with a custom pre-execution hook.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/k8s_install/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n- hosts: localhost\n  become: True\n  gather_facts: \"{{ gather_facts | default(true) }}\"\n  vars_files:\n    - 'vars/default.yml'\n  roles:\n    - role: \"k8s_install\"\n      pre_execution_hook: \"source env.rc\"\n      kubeprovider:\n        name: \"kubespray\"\n        path: \"/opt/kubespray\"\n```\n\n----------------------------------------\n\nTITLE: Testing Longhorn PVC Creation\nDESCRIPTION: Command to create a test pod with Longhorn PersistentVolumeClaim.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/longhorn/longhorn/v1.8.0/examples/pod_with_pvc.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Load Balancer Listener in OpenStack CLI\nDESCRIPTION: This command creates a new listener for the load balancer, specifying the protocol, port, and name. It's attached to the previously created load balancer.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer listener create --protocol TCP --protocol-port 80 --name HTTP-listener OVN-Test\n```\n\n----------------------------------------\n\nTITLE: Removing VIP from Instance Interface in Linux\nDESCRIPTION: This command removes the VIP from the network interface of the instance. The $VIP should be replaced with the actual VIP, and the interface name (enp3s0) might need to be adjusted based on the actual interface name in the instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nsudo ip address del $VIP/24 dev enp3s0\n```\n\n----------------------------------------\n\nTITLE: Loading S3 Configuration Example\nDESCRIPTION: Reference to S3 storage backend configuration example file for Loki\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-loki.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"base-helm-configs/loki/loki-helm-s3-overrides-example.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cinder Volume Services with Ansible\nDESCRIPTION: Command to run the Ansible playbook for deploying Cinder volume services with the LVM reference driver. This creates the necessary services on the target storage nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook -i inventory-example.yaml deploy-cinder-volumes-reference.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Servers on the Shared Floating IP Network in OpenStack\nDESCRIPTION: These commands create two servers (tester1 and tester2) on the previously created network. They specify the flavor, key pair, network, and image to use. The $IMAGE_UUID should be replaced with the actual UUID of the image to use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create tester1 --flavor m1.tiny \\\n                                    --key-name keypair \\\n                                    --network tester-network \\\n                                    --image $IMAGE_UUID\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server create tester2 --flavor m1.tiny \\\n                                    --key-name keypair \\\n                                    --network tester-network \\\n                                    --image $IMAGE_UUID\n```\n\n----------------------------------------\n\nTITLE: Extended GRUB Configuration Example\nDESCRIPTION: Complete GRUB configuration example with IOMMU and NVIDIA module blacklisting.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash intel_iommu=on iommu=pt mitigations=off vfio-pci.ids=10de:1b38 vfio_iommu_type1.allow_unsafe_interrupts=1 modprobe.blacklist=nvidiafb,nouveau,nvidia,nvidia_drm rs.driver.blacklist=nouveau,nvidia,nvidia_drm,nvidiafb kvm.ignore_msrs=1\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output of OpenStack Network Agent List\nDESCRIPTION: This snippet shows the expected output of the 'openstack network agent list' command under normal conditions. It displays agent types, hosts, availability zones, and their alive/state status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-alert-claim-storm.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n+--------------------------------------+------------------------------+------------------------+-------------------+-------+-------+----------------------------+\n| ID                                   | Agent Type                   | Host                   | Availability Zone | Alive | State | Binary                     |\n+--------------------------------------+------------------------------+------------------------+-------------------+-------+-------+----------------------------+\n| deadbeef-dead-beef-dead-deadbeef0001 | OVN Controller agent         | node01.domain.name     |                   | :-)   | UP    | ovn-controller             |\n| deadbeef-dead-beef-dead-deadbeef0002 | OVN Controller agent         | node02.domain.name     | nova              | :-)   | UP    | ovn-controller             |\n| deadbeef-dead-beef-dead-deadbeef0003 | OVN Metadata agent           | node02.domain.name     | nova              | :-)   | UP    | neutron-ovn-metadata-agent |\n| deadbeef-dead-beef-dead-deadbeef0004 | OVN Controller agent         | node03.domain.name     | nova              | :-)   | UP    | ovn-controller             |\n| deadbeef-dead-beef-dead-deadbeef0005 | OVN Metadata agent           | node03.domain.name     | nova              | :-)   | UP    | neutron-ovn-metadata-agent |\n| deadbeef-dead-beef-dead-deadbeef0006 | OVN Controller agent         | node04.domain.name     |                   | :-)   | UP    | ovn-controller             |\n| deadbeef-dead-beef-dead-deadbeef0007 | OVN Controller agent         | node05.domain.name     | nova              | :-)   | UP    | ovn-controller             |\n| deadbeef-dead-beef-dead-deadbeef0008 | OVN Metadata agent           | node05.domain.name     | nova              | :-)   | UP    | neutron-ovn-metadata-agent |\n| deadbeef-dead-beef-dead-deadbeef0009 | OVN Controller agent         | node06.domain.name     | nova              | :-)   | UP    | ovn-controller             |\n```\n\n----------------------------------------\n\nTITLE: Restarting systemd-resolved Service\nDESCRIPTION: Command to restart the systemd-resolved service after configuration changes to apply DNS settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-lvmisci.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl restart systemd-resolved.service\n```\n\n----------------------------------------\n\nTITLE: Unmounting NBD Device Partition\nDESCRIPTION: Safely unmounts the NBD device partition after data recovery or inspection is complete.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-data-disk-recovery.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\numount /mnt/00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Deleting OpenStack Router\nDESCRIPTION: Command to remove a router from the OpenStack environment. Note: This appears to be incorrectly documented in the source, as it shows the command for adding a subnet rather than deleting a router.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add subnet <router> <subnet>\n```\n\n----------------------------------------\n\nTITLE: Checking Longhorn Volume Status\nDESCRIPTION: Command to verify the state of Longhorn volumes in the cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n longhorn-system get volumes.longhorn.io\n```\n\n----------------------------------------\n\nTITLE: Creating Rackspace Identity Provider in OpenStack\nDESCRIPTION: This command sets up Rackspace as an identity provider in OpenStack, associating it with the previously created domain.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-federation.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default identity provider create --remote-id rackspace --domain rackspace_cloud_domain rackspace\n```\n\n----------------------------------------\n\nTITLE: Loading MinIO Configuration Example\nDESCRIPTION: Reference to MinIO storage backend configuration example file for Loki\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-loki.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"base-helm-configs/loki/loki-helm-minio-overrides-example.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Removing NoSchedule Taint from Kubernetes Control Plane Nodes\nDESCRIPTION: This shell command removes the NoSchedule taint from nodes labeled as control-plane. This operation allows for the convergence of OpenStack controllers with Kubernetes controllers in environments with a limited set of control plane nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-taint.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl taint nodes -l node-role.kubernetes.io/control-plane node-role.kubernetes.io/control-plane:NoSchedule-\n```\n\n----------------------------------------\n\nTITLE: Setting OVN Availability Zones\nDESCRIPTION: Defines the network availability zones for OVN nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n        nodes \\\n        -l openstack-compute-node=enabled -l openstack-network-node=enabled \\\n        ovn.openstack.org/availability_zones='az1'\n```\n\n----------------------------------------\n\nTITLE: Nova Device Specification JSON\nDESCRIPTION: JSON configuration for specifying PCI device details in Nova.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"vendor_id\": \"10de\", \"product_id\": \"1c30\"}\n```\n\n----------------------------------------\n\nTITLE: Installing pip on Linux using Python\nDESCRIPTION: This command upgrades or installs pip on Linux using the ensurepip module.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m ensurepip --upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Resolution\nDESCRIPTION: systemd-resolved configuration example for setting up DNS resolution in the storage node to enable communication with the Kubernetes cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-netapp-worker.md#2025-04-20_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\n[Resolve]\nDNS=169.254.25.10\n#FallbackDNS=\nDomains=openstack.svc.cluster.local svc.cluster.local cluster.local\n#LLMNR=no\n#MulticastDNS=no\nDNSSEC=no\nCache=no-negative\n#DNSStubListener=yes\n```\n\n----------------------------------------\n\nTITLE: Verifying LUKS Encryption on Cinder Volume\nDESCRIPTION: This command copies the contents of the Cinder volume to a file for verification. It uses dd to read from the logical volume device and write to a file named 'verify-luks'. This step is crucial for confirming the volume's encryption status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-fips-encryption.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndd if=/dev/mapper/cinder--volumes--1-7b2a9061--bcb8--46d2--8b20--ecc70b35da7d of=/root/verify-luks bs=1M\n```\n\n----------------------------------------\n\nTITLE: Creating Router Port in OpenStack\nDESCRIPTION: Command to create a new port that can be attached to a router, with options for network configuration, security settings, DNS properties, and physical device mapping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-router.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} port create [-h] [-f {json,shell,table,value,yaml}]\n                             [-c COLUMN] [--noindent] [--prefix PREFIX]\n                             [--max-width <integer>] [--fit-width]\n                             [--print-empty] --network <network>\n                             [--description <description>]\n                             [--device <device-id>]\n                             [--mac-address <mac-address>]\n                             [--device-owner <device-owner>]\n                             [--vnic-type <vnic-type>] [--host <host-id>]\n                             [--dns-domain dns-domain] [--dns-name <dns-name>]\n                             [--fixed-ip subnet=<subnet>,ip-address=<ip-address> | --no-fixed-ip]\n                             [--binding-profile <binding-profile>]\n                             [--enable | --disable]\n                             [--enable-uplink-status-propagation | --disable-uplink-status-propagation]\n                             [--project <project>]\n                             [--project-domain <project-domain>]\n                             [--extra-dhcp-option name=<name>[,value=<value>,ip-version={4,6}]]\n                             [--security-group <security-group> | --no-security-group]\n                             [--qos-policy <qos-policy>]\n                             [--enable-port-security | --disable-port-security]\n                             [--allowed-address ip-address=<ip-address>[,mac-address=<mac-address>]]\n                             [--tag <tag> | --no-tag]\n                             <name>\n```\n\n----------------------------------------\n\nTITLE: LokiQL Project Lookup Query\nDESCRIPTION: Example LokiQL query used in the project lookup dashboard to filter and format logs for specific services and project IDs. This query combines logfmt and JSON parsing with custom line formatting.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/observability-info.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n{application=\"$service\"} | logfmt | json | line_format \"{{ .kubernetes_host}} {{.kubernetes_pod_name}} {{.log}}\" |= `$project_id`\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Pushgateway Using Helm Chart\nDESCRIPTION: Shell command to install the Prometheus Pushgateway using a Helm chart. The installation script is executed to deploy the pushgateway in the prometheus namespace for collecting metrics from short-lived jobs.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-pushgateway.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/install-chart.sh prometheus-pushgateway\n```\n\n----------------------------------------\n\nTITLE: Checking VSO Pod Status\nDESCRIPTION: Command to verify the status of Vault Secrets Operator pods.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n vault-secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Inspecting LUKS Header of Cinder Volume\nDESCRIPTION: This command displays the first few lines of the copied volume content, revealing the LUKS header. It confirms that the volume is indeed encrypted using LUKS (Linux Unified Key Setup) with specific encryption parameters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cinder-fips-encryption.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhead /root/verify-luks\n```\n\n----------------------------------------\n\nTITLE: Labeling Prometheus Rules for Genestack Integration\nDESCRIPTION: Labels all PrometheusRule resources in the prometheus namespace to match the ruleSelector from the Prometheus deployment. This ensures alerts will be picked up by the Prometheus operator.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get prometheusrule -n prometheus -o name | xargs -I {} kubectl label -n prometheus {} release=kube-prometheus-stack --overwrite\n```\n\n----------------------------------------\n\nTITLE: Setting Neutron Bridge Mappings\nDESCRIPTION: Configures the mapping between Neutron interfaces and OVS bridge names.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl annotate \\\n        nodes \\\n        -l openstack-compute-node=enabled -l openstack-network-node=enabled \\\n        ovn.openstack.org/mappings='physnet1:br-ex'\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interfaces on Compute Node in Genestack (Shell)\nDESCRIPTION: Shows all network interfaces on the compute node, which can be useful for identifying instance-related interfaces and their configurations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nip a sh\n```\n\n----------------------------------------\n\nTITLE: Installing pip on MacOS using Python\nDESCRIPTION: This command upgrades or installs pip on MacOS using the ensurepip module.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m ensurepip --upgrade\n```\n\n----------------------------------------\n\nTITLE: Validating Envoy Gateway HTTP Routes in Kubernetes\nDESCRIPTION: Command to check configured HTTP routes in the OpenStack namespace using kubectl.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-envoy-gateway-api.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n openstack get httproute\n```\n\n----------------------------------------\n\nTITLE: Adding Member Role to Platform-Services-Core User\nDESCRIPTION: Assigns the 'member' role to the platform-services-core user in the platform-services project with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core --project platform-services member --inherited\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Security Standards in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Pod Security Standards (PSS) in Kubernetes. It shows the three security profiles: Privileged, Baseline, and Restricted. These profiles define different levels of security controls for pods, ranging from allowing all configurations to applying the most stringent restrictions.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/security-stages.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- Privileged: Allows all pod configurations; use sparingly.\n- Baseline: Enforces minimal restrictions for general-purpose workloads.\n- Restricted: Applies the most stringent security controls, suitable for sensitive workloads.\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Client on Ubuntu for Genestack (Shell)\nDESCRIPTION: Installs the MariaDB client on an Ubuntu system, which is necessary for connecting to the Genestack database for troubleshooting.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install mariadb-client-core-10.6\n```\n\n----------------------------------------\n\nTITLE: Deleting Openstack Security Group Rules\nDESCRIPTION: Command to delete a specific security group rule by its ID. This removes a single access rule from the security group configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-security-groups.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule delete RULE_ID\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Nova Jobs Before Upgrading\nDESCRIPTION: Deletes all existing Nova jobs from the OpenStack namespace before performing an upgrade. This prevents conflicts with existing jobs during the upgrade process.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/genestack-upgrade.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack delete jobs $(kubectl --namespace openstack get jobs --no-headers -o custom-columns=\":metadata.name\" | grep nova)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Hyperconverged Lab Architecture with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the architecture of a hyperconverged lab environment. It shows the network layout including public network, router, hyperconverged network, compute network, and three hyperconverged nodes with their connections.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/build-test-envs.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    %% Define clusters/subgraphs for clarity\n    subgraph Public_Network\n        PF[\"Floating IP<br>(203.0.113.x)\"]\n    end\n\n    subgraph Router\n        TR[\"hyperconverged-router<br>(with external gateway)\"]\n    end\n\n    subgraph Hyperconverged_Net\n        TN[\"hyperconverged-net<br>(192.168.100.x)\"]\n    end\n\n    subgraph Hyperconverged_Compute_Net\n        TCN[\"hyperconverged-compute-net<br>(192.168.102.x)\"]\n    end\n\n    %% Hyperconverged Nodes\n    subgraph Node_0\n        HPC0[\"hyperconverged-0\"]\n    end\n\n    subgraph Node_1\n        HPC1[\"hyperconverged-1\"]\n    end\n\n    subgraph Node_2\n        HPC2[\"hyperconverged-2\"]\n    end\n\n    %% Connections\n    PF --> TR\n    TR --> TN\n\n    TN -- mgmt port --> HPC0\n    TN -- mgmt port --> HPC1\n    TN -- mgmt port --> HPC2\n\n    HPC0 -- compute port --> TCN\n    HPC1 -- compute port --> TCN\n    HPC2 -- compute port --> TCN\n```\n\n----------------------------------------\n\nTITLE: Centralizing kube-ovn-controller Pods\nDESCRIPTION: Patches the kube-ovn-controller deployment to run pods only on designated master nodes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-ovn-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n kube-system patch deployment kube-ovn-controller -p '{\n  \"spec\": {\n    \"template\": {\n      \"spec\": {\n        \"nodeSelector\": {\n          \"kube-ovn/role\": \"master\",\n          \"kubernetes.io/os\": \"linux\"\n        }\n      }\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Help for OpenStack Object List Command\nDESCRIPTION: Demonstrates how to get detailed help information for the 'object list' command in OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-openstack-cli.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --help --os-cloud $CLOUD object list\n\nusage: openstack object list [-h] [-f {csv,df-to-csv,json,table,value,yaml}]\n                             [-c COLUMN] [--format-config-file FORMAT_CONFIG]\n                             [--quote {all,minimal,none,nonnumeric}] [--noindent]\n                             [--max-width <integer>] [--fit-width] [--print-empty]\n                             [--sort-column SORT_COLUMN] [--sort-ascending |\n                             --sort-descending] [--prefix <prefix>]\n                             [--delimiter <delimiter>] [--limit <limit>]\n                             [--marker <marker>] [--end-marker <end-marker>] [--long]\n                             [--all]\n                             <container>\n\nList objects\n\npositional arguments:\n  <container>   Container to list\n\noptions:\n  -h, --help            show this help message and exit\n  --prefix <prefix>\n                        Filter list using <prefix>\n  --delimiter <delimiter>\n                        Roll up items with <delimiter>\n  --limit <limit>\n                        The maximum number of entries to return. If the value exceeds the server-\n                        defined maximum, then the maximum value will be used.\n  --marker <marker>\n                        The first position in the collection to return results from. This should be a\n                        value that was returned in a previous request.\n  --end-marker <end-marker>\n                        End anchor for paging\n  --long                List additional fields in output\n  --all                 List all objects in container (default is 10000)\n... (continues)\n```\n\n----------------------------------------\n\nTITLE: Installing pip on Windows using Python\nDESCRIPTION: This command upgrades or installs pip on Windows using the ensurepip module. Ensure the Python Scripts directory is in the PATH environment variable.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nC:> py -m ensurepip --upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceAccount and RBAC Configuration\nDESCRIPTION: Kubernetes YAML configuration for creating a service account with restricted permissions to access only the keystone-fernet-keys secret.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: keystone-sync-external\n  namespace: openstack\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: openstack\n  name: keystone-sync-external-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"secrets\"]\n    verbs: [\"get\", \"list\", \"create\", \"update\", \"patch\"]\n    resourceNames: [\"keystone-fernet-keys\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: keystone-sync-external-rolebinding\n  namespace: openstack\nsubjects:\n  - kind: ServiceAccount\n    name: keystone-sync-external\n    namespace: openstack\nroleRef:\n  kind: Role\n  name: keystone-sync-external-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Listing Load Balancer Flavors in OpenStack CLI\nDESCRIPTION: This command displays the available load balancer flavors for the Amphora provider. It shows various options like single.lite, ha.plus, and ha.pro.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer flavor list\n```\n\n----------------------------------------\n\nTITLE: Creating Ironic Admin Secret in Kubernetes for OpenStack (Not Implemented)\nDESCRIPTION: Creates a Kubernetes secret for Ironic admin credentials with a randomly generated password. This is marked as not yet implemented in the system.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-compute-kit-secrets.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic ironic-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Azure AD Integration Overrides for Grafana\nDESCRIPTION: This YAML snippet is a placeholder for the Azure AD integration overrides in the Grafana Helm configuration, which should include necessary Azure AD settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/grafana.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"base-helm-configs/grafana/azure-overrides.yaml.example\"\n```\n\n----------------------------------------\n\nTITLE: Adding System-wide Reader Role to Zamboni User\nDESCRIPTION: Assigns the 'reader' role to the zamboni user at the system level, giving read access across all resources.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user zamboni --system all reader\n```\n\n----------------------------------------\n\nTITLE: Applying Gateway API Listener Patch - Shell\nDESCRIPTION: kubectl command to apply the modified listener configuration to the gateway\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-custom.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl patch -n nginx-gateway gateway flex-gateway \\\n              --type='json' \\\n              --patch-file /etc/genestack/gateway-api/listeners/<SERVICE_NAME>-https.json\n```\n\n----------------------------------------\n\nTITLE: Exporting Node Names for OpenStack Configuration\nDESCRIPTION: Sets an environment variable containing the node names to be configured for OpenStack services.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport NODES='compute-12481.rackerlabs.dev.local'\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Addition to Kubernetes Cluster\nDESCRIPTION: Checks if the newly added node is visible and properly running in the Kubernetes cluster by querying the node list.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/adding-new-node.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes | grep compute-12481.rackerlabs.dev.local\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Role to Platform-Services-Core-Alt User for Rackspace Cloud Domain\nDESCRIPTION: Assigns the 'reader' role to the platform-services-core-alt user in the rackspace_cloud_domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core-alt --domain rackspace_cloud_domain reader --inherited\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Config Directory\nDESCRIPTION: Creates the .kube directory in the user's home folder to store Kubernetes configuration\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-config.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.kube\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: A list of required Python packages for documentation and release management. Includes MkDocs with several plugins (material theme, architectural decision records, Swagger UI, lightbox) along with markdown-exec for executing code in markdown and reno for release notes management.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/doc-requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs\nmkdocs-material\nmkdocs-material-adr\nmkdocs-swagger-ui-tag\nmkdocs-glightbox\nmarkdown-exec\nreno\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretStore for PushSecret\nDESCRIPTION: YAML configuration for setting up the SecretStore that defines the connection to the target cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: target-store\n  namespace: openstack\nspec:\n  provider:\n    kubernetes:\n      remoteNamespace: openstack\n      server:\n        url: <k8s API URL for target>\n        caBundle: <CA Bundle of target>\n      auth:\n        token:\n          bearerToken:\n            name: target-credentials\n            key: token\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStack Client using pip\nDESCRIPTION: This command installs the OpenStack client utilities using pip. It's recommended to use a virtual environment to avoid affecting the default Python environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-deploy-cli.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install python-openstackclient\n```\n\n----------------------------------------\n\nTITLE: Creating an Admonition Box in Markdown\nDESCRIPTION: Creates a custom 'Genestack' admonition box to highlight important information about Genestack throughout the documentation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cloud-design-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n!!! Genestack\n    Watch for **Genestack** boxes like this one to show where various design decisions, technologies, or ideas that Genestack is using!\n```\n\n----------------------------------------\n\nTITLE: Internal Link Formatting\nDESCRIPTION: Shows how to create links to other wiki pages using relative paths rather than absolute URLs.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Installation](Installation)\n```\n\n----------------------------------------\n\nTITLE: Listing Load Balancers in OpenStack CLI\nDESCRIPTION: This command lists all load balancers in the OpenStack environment, showing details such as ID, name, VIP address, and status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/octavia-loadbalancer-setup-guide.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ openstack --os-cloud default loadbalancer list\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Genestack Project\nDESCRIPTION: This snippet provides a comprehensive list of Python packages and their specific versions required for the Genestack project. It includes tools for linting (ansible-lint, yamllint), formatting (black), testing, and various utility libraries.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/dev-requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nansible-compat==4.1.11\nansible-lint==24.2.0\nattrs==23.2.0\nblack==24.3.0\nbracex==2.4\nclick==8.1.7\nfilelock==3.13.1\njsonschema==4.21.1\njsonschema-specifications==2023.12.1\nmarkdown-it-py==3.0.0\nmdurl==0.1.2\nmypy-extensions==1.0.0\npathspec==0.12.1\nplatformdirs==4.2.0\npygments==2.17.2\nreferencing==0.33.0\nreno==4.0.0\nrich==13.7.0\nrpds-py==0.17.1\nruamel.yaml==0.18.6\nsubprocess-tee==0.4.1\ntomli==2.0.1\ntyping-extensions==4.9.0\nwcmatch==8.5\nyamllint==1.35.1\npre_commit==4.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies the exact versions and version constraints for required Python packages. Includes core dependencies for Ansible, cryptography, templating (Jinja2), data handling (JSON, YAML), networking, and cloud platform SDKs (Kubernetes, OpenStack).\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nansible>9.0,<10.0\nansible-core<2.17.0\ncryptography==43.0.1\njinja2==3.1.5\njmespath==1.0.1\njsonschema<=4.23.0\nMarkupSafe==2.1.3\nnetaddr==0.9.0\npbr==5.11.1\nruamel.yaml==0.18.6\nruamel.yaml.clib==0.2.8\nkubernetes>=24.2.0\nopenstacksdk>=1.0.0\npython-openstackclient==6.2.0\n```\n\n----------------------------------------\n\nTITLE: Script Reference for Memcached Installation\nDESCRIPTION: Reference to the shell script used for installing and updating Memcached configuration. The actual script content is not provided in the snippet.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-memcached-exporter.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-memcached.sh\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Size Meter in Ceilometer\nDESCRIPTION: This YAML configuration defines how Ceilometer captures the 'volume.size' meter. It specifies which event types trigger this measurement, how to extract the volume size from the payload, and what metadata to store with the measurement. The meter is defined as a gauge type with GB units.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/metering-ceilometer.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 'volume.size'\nevent_type:\n  - 'volume.exists'\n  - 'volume.retype'\n  - 'volume.create.*'\n  - 'volume.delete.*'\n  - 'volume.resize.*'\n  - 'volume.attach.*'\n  - 'volume.detach.*'\n  - 'volume.update.*'\n  - 'volume.manage.*'\ntype: 'gauge'\nunit: 'GB'\nvolume: $.payload.size\nuser_id: $.payload.user_id\nproject_id: $.payload.tenant_id\nresource_id: $.payload.volume_id\nmetadata:\n  display_name: $.payload.display_name\n  volume_type: $.payload.volume_type\n  image_id: $.payload.glance_metadata[?key=image_id].value\n  instance_id: $.payload.volume_attachment[0].instance_uuid\n```\n\n----------------------------------------\n\nTITLE: Configuring PushSecret for Fernet Key Synchronization\nDESCRIPTION: YAML configuration for setting up the PushSecret that handles the actual synchronization of the Fernet keys between clusters.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: external-secrets.io/v1alpha1\nkind: PushSecret\nmetadata:\n  name: pushsecret-target-store\n  namespace: openstack\nspec:\n  updatePolicy: Replace\n  refreshInterval: 300s\n  secretStoreRefs:\n    - name: target-store\n      kind: SecretStore\n  selector:\n    secret:\n      name: keystone-fernet-keys\n  data:\n    - match:\n        remoteRef:\n          remoteKey: keystone-fernet-keys\n```\n\n----------------------------------------\n\nTITLE: Displaying Kube-OVN kubectl Plugin Help\nDESCRIPTION: This command shows the help information for the Kube-OVN kubectl plugin, listing available subcommands and their purposes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl ko help\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs Local Server\nDESCRIPTION: Commands to navigate to the genestack directory and start the MkDocs local server for live documentation preview.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/mkdocs-howto.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd genestack/\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Running Basic Custom Exporters Playbook\nDESCRIPTION: Simple command to execute the custom exporters Ansible playbook for deploying metric collectors.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-custom-node-metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nansible-playbook custom_exporters.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Genestack Admonition Block in Markdown\nDESCRIPTION: Demonstrates the syntax for creating a custom 'genestack' admonition block that includes a link to the Genestack project with a new tab target attribute.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/admonition-test.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! genestack\n    [Genestack](https://github.com/rackerlabs/genestack){:target=\"_blank\"}\n    is a cool new project!\n```\n\n----------------------------------------\n\nTITLE: Creating Target Cluster Credentials\nDESCRIPTION: YAML configuration for storing target cluster credentials using the retrieved token.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: target-credentials\n  namespace: openstack\ndata:\n  token: <this is the token you got from the above step>\n```\n\n----------------------------------------\n\nTITLE: Default Glance Policy Configuration in YAML\nDESCRIPTION: Default policy rules for Glance that define role-based access control. These rules specify permissions for actions like publicizing images and downloading images, restricting certain operations to admin roles.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-glance.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconf:\n  policy:\n    \"admin_required\": \"role:admin or role:glance_admin\"\n    \"default\": \"role:admin or role:glance_admin\"\n    \"context_is_admin\": \"role:admin or role:glance_admin\"\n    \"publicize_image\": \"role:glance_admin\"\n    \"is_owner\": \"tenant:%(owner)s\"\n    \"download_image\": \"rule:is_owner or rule:context_is_admin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nova Services Public Endpoint FQDN Overrides\nDESCRIPTION: Comprehensive Helm values configuration for overriding public endpoint FQDNs for Nova compute, metadata, and novnc proxy services.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-override-public-endpoint-fqdn.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nendpoints:\n  compute:\n    host_fqdn_override:\n      public:\n        tls: {}\n        host: nova.cluster.local\n    port:\n      api:\n        public: 443\n    scheme:\n      public: https\n  compute_metadata:\n    host_fqdn_override:\n      public:\n        tls: {}\n        host: metadata.nova.cluster.local\n    port:\n      metadata:\n        public: 443\n    scheme:\n      public: https\n  compute_novnc_proxy:\n    host_fqdn_override:\n      public:\n        tls: {}\n        host: novnc.nova.cluster.local\n    port:\n      novnc_proxy:\n        public: 443\n    scheme:\n      public: https\n```\n\n----------------------------------------\n\nTITLE: TopoLVM Deployment Script Reference\nDESCRIPTION: Reference to the TopoLVM installation script located at bin/install-topolvm.sh which handles the deployment of TopoLVM provisioner in the cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-topolvm.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--8<-- \"bin/install-topolvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies with pip\nDESCRIPTION: Installs required Python packages for documentation development from doc-requirements.txt file. Recommended to be run within a virtual environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/mkdocs-howto.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r doc-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metrics from Gnocchi\nDESCRIPTION: Command to verify that metrics collected by Ceilometer can be successfully retrieved from Gnocchi.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-ceilometer.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it openstack-admin-client -n openstack -- openstack metric list\n```\n\n----------------------------------------\n\nTITLE: Nested Bullet List Structure\nDESCRIPTION: Shows how to create nested bullet lists using proper indentation (4 spaces per level) in Markdown.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Bullet\n    - Sub bullet\n        - Sub sub bullet\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Token\nDESCRIPTION: YAML configuration for creating a service account token secret for authentication.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: keystone-sync-external-secret\n  annotations:\n    kubernetes.io/service-account.name: keystone-sync-external\n```\n\n----------------------------------------\n\nTITLE: Storage Backend Configuration Example\nDESCRIPTION: List of supported storage backends for Gnocchi's measures and aggregated metrics storage, including File, Ceph, Swift, S3 and Redis options.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/metering-gnocchi.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n - File\n - Ceph (_flex default for `incoming` & `storage`_)\n - OpenStack Swift\n - Amazon S3\n - Redis\n```\n\n----------------------------------------\n\nTITLE: OVS Manager Connection Output\nDESCRIPTION: This YAML snippet shows the expected output of the OVS manager connection status, including connection details and status information.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-troubleshooting.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n_uuid               : 43c682c2-a6c3-493f-9f6c-079ca55a5aa8\nconnection_mode     : []\nexternal_ids        : {}\ninactivity_probe    : []\nis_connected        : true\nmax_backoff         : []\nother_config        : {}\nstatus              : {bound_port=\"6640\", n_connections=\"2\", sec_since_connect=\"0\", sec_since_disconnect=\"0\"}\ntarget              : \"ptcp:6640:127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Querying Keystone HTTPRoute in Kubernetes\nDESCRIPTION: Shell command to retrieve the HTTPRoute configuration for the Keystone service showing the hostname configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-override-public-endpoint-fqdn.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get httproute -n openstack custom-keystone-gateway-route-http\n```\n\n----------------------------------------\n\nTITLE: Numbered List Formatting\nDESCRIPTION: Demonstrates how to create ordered (numbered) lists in Markdown.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n1. item 1\n2. item 2\n3. item 3\n4. item 4\n```\n\n----------------------------------------\n\nTITLE: Code Block Formatting with Triple Backticks\nDESCRIPTION: Demonstrates how to create fenced code blocks using triple backticks for multi-line code samples.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```\n# code block\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Genestack\nDESCRIPTION: A list of required dependencies including Python clients for OpenStack core and Heat, as well as Ansible for automation and deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/testing/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-openstackclient\npython-heatclient\nansible\n```\n\n----------------------------------------\n\nTITLE: Querying Kube-OVN Subnets\nDESCRIPTION: Command to retrieve subnet information from Kube-OVN installation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn-helm-conversion.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get subnets.kubeovn.io\n```\n\n----------------------------------------\n\nTITLE: Specifying Prometheus Client Library Dependency in Python\nDESCRIPTION: This requirements file specifies the exact version of the Prometheus client library to be used (version 0.21.1). The prometheus_client package is used for instrumenting Python applications with Prometheus metrics.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/playbooks/extra/custom_exporters/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprometheus_client==0.21.1\n```\n\n----------------------------------------\n\nTITLE: Listing Network Agents Status in OpenStack\nDESCRIPTION: This command displays the status of network agents in OpenStack, including OVN Controller and Metadata agents. During a claim storm, the 'Alive' column may show 'XXX' for all agents due to south DB overload.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/ovn-alert-claim-storm.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenstack network agent list\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus Alerting Rules\nDESCRIPTION: Shell command to deploy new Prometheus alerting rules using the Genestack installation script.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/alerting-info.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/opt/genestack/bin/install-prometheus.sh\n```\n\n----------------------------------------\n\nTITLE: Azure Client Secret YAML Configuration\nDESCRIPTION: This YAML snippet is a placeholder for the Azure client secret configuration file, which should contain the base64 encoded Azure client ID and secret.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/grafana.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"manifests/grafana/azure-client-secret.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Role to Zamboni User for Default Domain\nDESCRIPTION: Assigns the 'reader' role to the zamboni user in the default domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user zamboni --domain default reader --inherited\n```\n\n----------------------------------------\n\nTITLE: Adding Reader Role to Platform-Services-Core User for Rackspace Cloud Domain\nDESCRIPTION: Assigns the 'reader' role to the platform-services-core user in the rackspace_cloud_domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core --domain rackspace_cloud_domain reader --inherited\n```\n\n----------------------------------------\n\nTITLE: Generating Keystone Secrets in OpenStack Namespace\nDESCRIPTION: This script creates the necessary Kubernetes secrets for Keystone deployment, including RabbitMQ credentials, database password, admin credentials, and credential keys. Each secret is generated with random secure passwords.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack \\\n        create secret generic keystone-rabbitmq-password \\\n        --type Opaque \\\n        --from-literal=username=\"keystone\" \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-64};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic keystone-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic keystone-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack \\\n        create secret generic keystone-credential-keys \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Applying OpenStack Role Labels to Kubernetes Nodes\nDESCRIPTION: Shell commands to label Kubernetes nodes based on their roles in OpenStack deployment. Uses awk to filter nodes by name pattern and applies corresponding labels for control plane, compute, network, storage, and worker roles.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-labels.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Label the openstack controllers\nkubectl label node $(kubectl get nodes | awk '/controller/ {print $1}') openstack-control-plane=enabled\n\n# Label the openstack compute nodes\nkubectl label node $(kubectl get nodes | awk '/compute/ {print $1}') openstack-compute-node=enabled\n\n# Label the openstack network nodes\nkubectl label node $(kubectl get nodes | awk '/network/ {print $1}') openstack-network-node=enabled\n\n# Label the openstack storage nodes\nkubectl label node $(kubectl get nodes | awk '/storage/ {print $1}') openstack-storage-node=enabled\n\n# With OVN we need the compute nodes to be \"network\" nodes as well. While they will be configured for networking, they wont be gateways.\nkubectl label node $(kubectl get nodes | awk '/compute/ {print $1}') openstack-network-node=enabled\n\n# Label all workers - Recommended and used when deploying Kubernetes specific services\nkubectl label node $(kubectl get nodes | awk '/worker/ {print $1}')  node-role.kubernetes.io/worker=worker\n```\n\n----------------------------------------\n\nTITLE: Installing Keyring on Enterprise Linux\nDESCRIPTION: Installs the keyring package on Enterprise Linux distributions using dnf. The keyring package is required for token authentication caching.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-clouds.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndnf install python3-keyring\n```\n\n----------------------------------------\n\nTITLE: Navigating to VSO Directory\nDESCRIPTION: Command to change directory to the Vault Secrets Operator base installation directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd kustomize/vault-secrets-operator/base\n```\n\n----------------------------------------\n\nTITLE: Loading Swift Configuration Example\nDESCRIPTION: Reference to Swift storage backend configuration example file for Loki\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-loki.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"base-helm-configs/loki/loki-helm-swift-overrides-example.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Asciinema Demo in Markdown\nDESCRIPTION: This snippet demonstrates how to embed an Asciinema demo video using Markdown syntax. It provides a clickable image that links to the full demonstration video.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![asciicast](https://asciinema.org/a/629780.svg)](https://asciinema.org/a/629780)\n```\n\n----------------------------------------\n\nTITLE: NVIDIA GPU Status Output\nDESCRIPTION: Example output showing NVIDIA GPU status in a virtual machine.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-pci-passthrough.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 525.147.05   Driver Version: 525.147.05   CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Quadro P2000        On   | 00000000:06:00.0 Off |                  N/A |\n| 50%   40C    P8     6W /  75W |      1MiB /  5120MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Azure Client ID and Secret\nDESCRIPTION: This shell command demonstrates how to base64 encode the Azure client ID or secret, which is required for Azure AD integration with Grafana.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/grafana.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho -n \"YOUR CLIENT ID OR SECRET\" | base64\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Markdown\nDESCRIPTION: Demonstrates how to create external links to OpenStack and Kubernetes websites, opening in a new tab.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-cloud-design-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[OpenStack](https://openstack.org){:target=\"\\_blank\"}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[Kubernetes](kttps://k8s.io){:target=\"\\_blank\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Openstack Load Balancers\nDESCRIPTION: Command to list all load balancers with filtering options for name, status, provider, and tags. Includes sorting capabilities and status filtering.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer list\n    [--sort-column SORT_COLUMN]\n    [--sort-ascending | --sort-descending]\n    [--name <name>]\n    [--enable | --disable]\n    [--project <project-id>]\n    [--vip-network-id <vip_network_id>]\n    [--vip-subnet-id <vip_subnet_id>]\n    [--vip-qos-policy-id <vip_qos_policy_id>]\n    [--vip-port-id <vip_port_id>]\n    [--provisioning-status {ACTIVE,ERROR,PENDING_CREATE,PENDING_UPDATE,PENDING_DELETE}]\n    [--operating-status {ONLINE,DRAINING,OFFLINE,DEGRADED,ERROR,NO_MONITOR}]\n    [--provider <provider>]\n    [--flavor <flavor>]\n    [--availability-zone <availability_zone>]\n    [--tags <tag>[,<tag>,...]]\n    [--any-tags <tag>[,<tag>,...]]\n    [--not-tags <tag>[,<tag>,...]]\n    [--not-any-tags <tag>[,<tag>,...]]\n\n```\n\n----------------------------------------\n\nTITLE: Listing Rackspace OpenStack SDLC Phases in Markdown\nDESCRIPTION: This code snippet enumerates the six distinct phases of the Rackspace OpenStack Software Development Life Cycle (Rax-O-SDLC) using Markdown backticks for inline code formatting.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/security-introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Scope`, `Implement`, `Document`, `Test`, `Deployment` and `Maintain`\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook for Octavia Pre-configuration\nDESCRIPTION: An example Ansible playbook that runs the octavia_preconf role with the necessary OpenStack environment variables. Includes authentication variables for Keystone and configures the OpenStack endpoint access.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/octavia_preconf/README.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n(octavia_preconf) root@saturn-c1:~# cat octavia-preconf-main.yaml\n\n- name: Pre-requisites for enabling amphora provider in octavia\n  hosts: localhost\n  environment:\n    OS_ENDPOINT_TYPE: publicURL\n    OS_INTERFACE: publicURL\n    OS_USERNAME: 'admin'\n    OS_PASSWORD: 'XXXXX'\n    OS_PROJECT_NAME: 'admin'\n    OS_TENANT_NAME: 'admin'\n    OS_AUTH_TYPE: password\n    OS_AUTH_URL: 'https://keystone.lab.local/v3'\n    OS_USER_DOMAIN_NAME: 'default'\n    OS_PROJECT_DOMAIN_NAME: 'default'\n    OS_REGION_NAME: 'RegionOne'\n    OS_IDENTITY_API_VERSION: 3\n    OS_AUTH_VERSION: 3\n    NOVA_ENDPOINT_TYPE: publicURL\n  roles:\n    - /root/octavia_preconf\n```\n\n----------------------------------------\n\nTITLE: Creating Flat Subnet in OpenStack\nDESCRIPTION: This command creates a subnet for the flat network. It sets the IP range, gateway, DNS, and allocation pool. It also specifies service types to limit Neutron's ability to attach IPs directly to instances.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-neutron-networks.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default subnet create --subnet-range 172.16.24.0/22 \\\n                                           --gateway 172.16.24.2 \\\n                                           --dns-nameserver 172.16.24.2 \\\n                                           --allocation-pool start=172.16.25.150,end=172.16.25.200 \\\n                                           --dhcp \\\n                                           --network flat \\\n                                           --service-type network:floatingip \\\n                                           --service-type network:router_gateway \\\n                                           --service-type network:distributed \\\n                                           flat_subnet\n```\n\n----------------------------------------\n\nTITLE: Configuring Glance with Swift Backend in YAML\nDESCRIPTION: YAML configuration to update Glance Helm overrides for connecting to external Swift storage. Defines the Swift backend, authentication parameters, and storage container settings.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-glance-swift-store.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconf:\n  glance:\n    DEFAULT:\n      enabled_backends: swift:swift\n    glance_store:\n      default_backend: swift\n      default_store: swift\n  swift_store: |\n    [ref1]\n    auth_address = $KEYSTONE_AUTH_URL\n    auth_version = 3\n    key = $SUPER_SECRETE_KEY\n    project_domain_id =\n    project_domain_name = $CLOUD_DOMAIN_NAME\n    swift_buffer_on_upload = true\n    swift_store_container = glance\n    swift_store_create_container_on_put = true\n    swift_store_endpoint_type = publicURL\n    swift_store_multi_tenant = false\n    swift_store_region = SJC3\n    swift_upload_buffer_dir = /var/lib/glance/images\n    user = $CLOUD_PROJECT_NAME:$CLOUD_USERNAME\n    user_domain_id =\n    user_domain_name = $CLOUD_DOMAIN_NAME\n```\n\n----------------------------------------\n\nTITLE: Downloading and Configuring kubectl for Kubernetes Access\nDESCRIPTION: Commands to download the kubectl binary, install it in the virtual environment, and set up the Kubernetes configuration directory. This enables the role to create Kubernetes secrets for Octavia certificates.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/octavia_preconf/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(octavia_preconf) root@saturn-c1:~# curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n(octavia_preconf) root@saturn-c1:~# install -o root -g root -m 0755 kubectl /root/.venvs/octavia_preconf/bin\n(octavia_preconf) root@saturn-c1:~# mkdir ~/.kube\n(octavia_preconf) root@saturn-c1:~# mv config ~/.kube/\n```\n\n----------------------------------------\n\nTITLE: Creating Gnocchi Secrets in Kubernetes\nDESCRIPTION: Shell commands to create Kubernetes secrets for Gnocchi admin, database, and PostgreSQL passwords. These commands generate random passwords for each secret.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-gnocchi.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack create secret generic gnocchi-admin \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack create secret generic gnocchi-db-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\nkubectl --namespace openstack create secret generic gnocchi-pgsql-password \\\n        --type Opaque \\\n        --from-literal=password=\"$(< /dev/urandom tr -dc _A-Za-z0-9 | head -c${1:-32};echo;)\"\n```\n\n----------------------------------------\n\nTITLE: Installing NFS External Provisioner for General Storage\nDESCRIPTION: Installs the NFS external provisioner with configuration for general storage class. Sets up NFS server connection, mount options, and creates a default storage class named 'general'.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-nfs-external.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\\n    --namespace nfs-provisioner \\\n    --create-namespace \\\n    --set nfs.server=172.16.27.67 \\\n    --set nfs.path=/mnt/storage/k8s \\\n    --set nfs.mountOptions={\"nolock\"} \\\n    --set storageClass.defaultClass=true \\\n    --set replicaCount=1 \\\n    --set storageClass.name=general \\\n    --set storageClass.provisionerName=nfs-provisioner-01\n```\n\n----------------------------------------\n\nTITLE: Installing NFS External Provisioner for Multi-Attach Storage\nDESCRIPTION: Installs an additional NFS external provisioner configured for multi-attach storage scenarios. Creates a storage class named 'general-multi-attach' with ReadWriteMany access mode.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-nfs-external.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install nfs-subdir-external-provisioner-multi nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\\n    --namespace nfs-provisioner \\\n    --create-namespace \\\n    --set nfs.server=172.16.27.67 \\\n    --set nfs.path=/mnt/storage/k8s \\\n    --set nfs.mountOptions={\"nolock\"} \\\n    --set replicaCount=1 \\\n    --set storageClass.name=general-multi-attach \\\n    --set storageClass.provisionerName=nfs-provisioner-02 \\\n    --set storageClass.accessModes=ReadWriteMany\n```\n\n----------------------------------------\n\nTITLE: Listing Openstack Load Balancer Listeners\nDESCRIPTION: Command to list all listeners with options for sorting and filtering by name, load balancer, and tags.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer listener list\n    [--sort-column SORT_COLUMN]\n    [--sort-ascending | --sort-descending]\n    [--name <name>]\n    [--loadbalancer <loadbalancer>]\n    [--enable | --disable]\n    [--project <project>]\n    [--tags <tag>[,<tag>,...]]\n    [--any-tags <tag>[,<tag>,...]]\n    [--not-tags <tag>[,<tag>,...]]\n    [--not-any-tags <tag>[,<tag>,...]]\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flavor Structure using Mermaid Flowchart\nDESCRIPTION: A Mermaid flowchart that illustrates the components of a flavor name: NAME, GENERATION, CPU, and MEMORY, showing how these elements are connected in the naming convention.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    id1{{NAME}} o-.-o id2{{GENERATION}} o-.-o id3{{CPU}} o-.-o id4{{MEMORY}}\n```\n\n----------------------------------------\n\nTITLE: Creating Floating IP for VIP Port in OpenStack\nDESCRIPTION: This command creates a floating IP and associates it with the previously created VIP port. It uses the 'PUBLICNET' as the external network, which should be replaced with the appropriate name or ID for your installation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip create --port tester-vip-port PUBLICNET\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted Longhorn StorageClass Configuration\nDESCRIPTION: YAML configuration for setting up an encrypted StorageClass in Longhorn, including the secret definition for encryption keys and StorageClass parameters. The configuration enables volume encryption, expansion capabilities, and automatic volume deletion on PVC removal.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-longhorn.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"manifests/longhorn/longhorn-encrypted-storageclass.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up MDS Service for CephFS\nDESCRIPTION: Commands to add MDS labels to Ceph nodes and apply the MDS service. This is necessary for the CephFS filesystem to function properly.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-external.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nceph orch host label add genestack-ceph1 mds\nceph orch host label add genestack-ceph2 mds\nceph orch host label add genestack-ceph3 mds\nceph orch apply mds myfs label:mds\n```\n\n----------------------------------------\n\nTITLE: Adding GPU Trait to Hypervisor in OpenStack\nDESCRIPTION: This snippet shows how to add the custom GPU trait to a hypervisor's resource provider in OpenStack. It retrieves existing traits and adds the new GPU trait.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-host-aggregates.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntraits=$(openstack --os-placement-api-version 1.6 resource provider trait list -f value <UUID> | sed 's/^/--trait /')\nopenstack --os-placement-api-version 1.6 resource provider trait set $traits --trait CUSTOM_HW_GPU <UUID>\n```\n\n----------------------------------------\n\nTITLE: Creating Vendor-Specific OpenStack Flavor with CLI\nDESCRIPTION: This command creates an Intel-specific flavor and sets the CPU vendor property. It demonstrates how to create use case-specific flavors for vendor-specific scheduling.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-flavors.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor create intel.medium\n          --public \\\n          --ram 8192 \\\n          --disk 60 \\\n          --vcpus 4 \\\n          --ephemeral 10 \\\n          --swap 1024\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default flavor set intel.medium \\\n          --property capabilities:cpu_info:vendor='Intel'\n```\n\n----------------------------------------\n\nTITLE: Enabling Monitoring for Rook-Ceph Cluster in Kubernetes\nDESCRIPTION: Patches the running Rook-Ceph cluster to enable monitoring. This is typically done when installing Prometheus after Rook-Ceph is already installed.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-internal.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n rook-ceph patch CephCluster rook-ceph  --type=merge -p \"{\\\"spec\\\": {\\\"monitoring\\\": {\\\"enabled\\\": true}}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Alertmanager Teams Webhook\nDESCRIPTION: Shell commands to update the Alertmanager configuration with a Microsoft Teams webhook URL for alert notifications. Uses sed to replace a placeholder URL in the configuration file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nread -p \"webhook_url: \" webhook_url;\nsed -i -e \"s#https://webhook_url.example#$webhook_url#\" \\\n/etc/genestack/helm-configs/prometheus/alertmanager_config.yaml\n```\n\n----------------------------------------\n\nTITLE: Validating Keystone Functionality\nDESCRIPTION: This command validates the Keystone deployment by executing the 'openstack user list' command within the admin client pod. This confirms that Keystone is operational and properly authenticating administrative requests.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack exec -ti openstack-admin-client -- openstack user list\n```\n\n----------------------------------------\n\nTITLE: Verifying Storage Class in Kubernetes for Genestack\nDESCRIPTION: This command checks the available storage classes in Kubernetes, ensuring the 'general' class is set as default for Genestack use.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-external-block.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n(genestack) root@genestack-controller1:# kubectl get sc\nNAME                   PROVISIONER                     RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\ngeneral (default)      org.democratic-csi.iscsi        Delete          Immediate           true                   3h15m\n```\n\n----------------------------------------\n\nTITLE: Example MetalLB Loadbalancer Configuration\nDESCRIPTION: This YAML snippet is an example configuration for the MetalLB loadbalancer. It's typically stored in the 'metallb-openstack-service-lb.yml' file and needs to be customized with specific VIP addresses for the environment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-metallb.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n--8<-- \"manifests/metallb/metallb-openstack-service-lb.yml\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Virtual Environment Setup in Debian/Ubuntu\nDESCRIPTION: Command to install the Python packages required for creating a virtual environment. This installs python3-venv for virtual environment management and python3-pip for package installation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/octavia_preconf/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nroot@saturn-c1:~# apt-get install python3-venv python3-pip\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Group Rules in OpenStack\nDESCRIPTION: These commands create security group rules to allow SSH (port 22) and ICMP traffic. This is necessary to enable access to the instances.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create --proto tcp \\\n                                         --dst-port 22 \\\n                                         --remote-ip 0.0.0.0/0 default\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} security group rule create --proto icmp \\\n                                         --dst-port -1 default\n```\n\n----------------------------------------\n\nTITLE: Adding a Subnet to an OpenStack Network\nDESCRIPTION: Command to create and attach a subnet to an existing OpenStack network. This example creates an IPv4 subnet with a specified CIDR range and connects it to a previously created network.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-networks.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenstack  --os-cloud {cloud_name} subnet create --ip-version 4 --subnet-range 172.18.107.0/24 --network {network-name} {subnet-name}\n```\n\n----------------------------------------\n\nTITLE: Updating Openstack Load Balancer\nDESCRIPTION: Command to modify existing load balancer settings including name, description, QoS policy, and enable/disable status.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-load-balancer.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud {user cloud name} loadbalancer set\n    [--name <name>]\n    [--description <description>]\n    [--vip-qos-policy-id <vip_qos_policy_id>]\n    [--enable | --disable]\n    [--wait]\n    [--tag <tag>]\n    [--no-tag]\n    <load_balancer>\n```\n\n----------------------------------------\n\nTITLE: Creating External Network for Kubernetes Cluster in OpenStack\nDESCRIPTION: Creates a public external network with VLAN provider type for use with Magnum Kubernetes clusters. This network is created in the service project to be accessible by multiple tenants.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/magnum-kubernetes-cluster-setup-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack network create public --provider-network-type vlan --external --project service\n```\n\n----------------------------------------\n\nTITLE: Uncordoning a Kubernetes Node in Shell\nDESCRIPTION: This command uncordons a Kubernetes node that may be in a 'Ready' but 'SchedulingDisabled' state after a failed upgrade attempt. It allows the node to resume normal operations.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-kubespray-upgrade.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl uncordon $NODE\n```\n\n----------------------------------------\n\nTITLE: Creating Neutron Network for Shared Floating IP in OpenStack\nDESCRIPTION: This command creates a new Neutron network named 'tester-network' using OpenStack CLI. It's the first step in setting up the infrastructure for a shared floating IP.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} network create tester-network\n```\n\n----------------------------------------\n\nTITLE: Heading Hierarchy Structure in Markdown\nDESCRIPTION: Demonstrates the proper nesting hierarchy for headings in Markdown documentation. Shows a title heading followed by main headings and sub-headings in the correct order.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n## Main heading one\n### Sub Heading one\n### Sub heading two\n## Main heading two\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Exporter using Shell Script\nDESCRIPTION: This command runs a shell script to install the RabbitMQ Exporter chart. The script is located in the 'bin' directory and is named 'install-chart.sh'. It takes 'prometheus-rabbitmq-exporter' as an argument.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/prometheus-rabbitmq-exporter.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/install-chart.sh prometheus-rabbitmq-exporter\n```\n\n----------------------------------------\n\nTITLE: Modifying Gateway API Route Domain - Shell\nDESCRIPTION: Shell commands to create directory and modify the domain name in the route configuration using sed\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-nginx-gateway-api-custom.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /etc/genestack/gateway-api/routes\nsed 's/your.domain.tld/<YOUR_DOMAIN>/g' \\\n    /opt/genestack/etc/gateway-api/routes/custom-<SERVICE_NAME>-gateway-route.yaml \\\n    > /etc/genestack/gateway-api/routes/custom-<SERVICE_NAME>-gateway-route.yaml\n```\n\n----------------------------------------\n\nTITLE: Downloading Files from an OpenStack Container\nDESCRIPTION: Shows how to construct a URL for accessing public files and how to download a single file from a container using the OpenStack CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-openstack-cli.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n<REGIONAL_ENDPOINT>/storage/container/detail/flex-container01/example.rtf\n```\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud $CLOUD object save flex-container01 example.rtf\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Octavia Configuration\nDESCRIPTION: Commands to create a Python virtual environment in the ~/.venvs directory. Creates a system-site-packages enabled environment named 'octavia_preconf'.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/ansible/roles/octavia_preconf/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nroot@saturn-c1:~# mkdir -p ~/.venvs\nroot@saturn-c1:~# python3 -m venv --system-site-packages ~/.venvs/octavia_preconf\n```\n\n----------------------------------------\n\nTITLE: Deploying Skyline using Kustomize in Kubernetes\nDESCRIPTION: This shell command applies a Kustomize configuration to deploy Skyline in the OpenStack namespace of a Kubernetes cluster. It uses the overlay configuration located in the specified directory.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-skyline.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack apply -k /etc/genestack/kustomize/skyline/overlay\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ ServiceMonitor and PodMonitor in Kubernetes\nDESCRIPTION: Applies ServiceMonitor for RabbitMQ clusters and PodMonitor for the RabbitMQ operator to enable Prometheus scraping.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply --filename https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/observability/prometheus/monitors/rabbitmq-servicemonitor.yml\n\nkubectl apply --filename https://raw.githubusercontent.com/rabbitmq/cluster-operator/main/observability/prometheus/monitors/rabbitmq-cluster-operator-podmonitor.yml\n```\n\n----------------------------------------\n\nTITLE: Monitoring Ceph Cluster Connection Progress\nDESCRIPTION: Command to watch the status of the CephCluster resource in the rook-ceph-external namespace. This helps in monitoring the progress of the connection to the external Ceph cluster.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-ceph-rook-external.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace rook-ceph-external get cephcluster -w\n```\n\n----------------------------------------\n\nTITLE: Adding Member Roles to Platform-Services User\nDESCRIPTION: Assigns the 'member' role to the platform-services user in both the platform-services project and default domain with inheritance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services --project platform-services member --inherited\nopenstack --os-cloud default role add --user platform-services --domain default member --inherited\n```\n\n----------------------------------------\n\nTITLE: Applying Glance Configuration in Genestack\nDESCRIPTION: Bash command to apply the updated Glance configuration using the Genestack installation script. This command applies the Helm chart configurations defined in the YAML file.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-glance-swift-store.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/opt/genestack/bin/install-glance.sh\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Enabling Audit Logging in Vault\nDESCRIPTION: Commands to authenticate to Vault using the root token and enable file-based audit logging.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it vault-0 -n vault -- vault login\nkubectl exec -it vault-0 -n vault -- vault audit enable file file_path=/vault/audit/audit.log\n```\n\n----------------------------------------\n\nTITLE: Adding System-wide Reader Role to Platform-Services-Core-Alt User\nDESCRIPTION: Assigns the 'reader' role to the platform-services-core-alt user at the system level, giving read access across all resources.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default role add --user platform-services-core-alt --system all reader\n```\n\n----------------------------------------\n\nTITLE: External Link with Target Blank\nDESCRIPTION: Demonstrates how to create external links that open in a new browser tab using the target blank attribute.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[Google](https://google.com)){:target=\"_blank\"}\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Operator with Kustomize in Kubernetes\nDESCRIPTION: Deploys the RabbitMQ operator using kustomize. This is the first step in setting up a RabbitMQ cluster in Kubernetes.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -k /etc/genestack/kustomize/rabbitmq-operator\n```\n\n----------------------------------------\n\nTITLE: Incorrect Internal Link Example\nDESCRIPTION: Shows an incorrect way to link to internal wiki pages using absolute URLs rather than relative paths.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Installation](https://github.com/username/repo/wiki/Installation)\n```\n\n----------------------------------------\n\nTITLE: Adding Subnet to Router in OpenStack\nDESCRIPTION: This command adds the previously created subnet to the router, connecting the internal network to the external gateway.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} router add subnet tester-router tester-subnet\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS CLI Help for OpenStack Flex Object Storage Operations\nDESCRIPTION: Command to display help information for AWS CLI operations when used with OpenStack Flex Object Storage.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\naws --profile default help\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Secrets Operator\nDESCRIPTION: Command to install the Vault Secrets Operator using kubectl and kustomize.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl kustomize . --enable-helm | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Verifying Kube-OVN Subnet Configuration\nDESCRIPTION: Shell command to check Kube-OVN subnet configuration and example output showing subnet details including CIDR ranges and gateway configuration.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/k8s-cni-kube-ovn.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get subnets.kubeovn.io\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME          PROVIDER   VPC           PROTOCOL   CIDR            PRIVATE   NAT     DEFAULT   GATEWAYTYPE   V4USED   V4AVAILABLE   V6USED   V6AVAILABLE   EXCLUDEIPS       U2OINTERCONNECTIONIP\njoin          ovn        ovn-cluster   IPv4       100.64.0.0/16   false     false   false     distributed   3        65530         0        0             [\"100.64.0.1\"]\novn-default   ovn        ovn-cluster   IPv4       10.236.0.0/14   false     true    true      distributed   111      262030        0        0             [\"10.236.0.1\"]\n```\n\n----------------------------------------\n\nTITLE: Monitoring RabbitMQ Cluster Status in Kubernetes\nDESCRIPTION: Watches the status of RabbitMQ clusters in the openstack namespace to validate successful deployment.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/infrastructure-rabbitmq.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace openstack get rabbitmqclusters.rabbitmq.com -w\n```\n\n----------------------------------------\n\nTITLE: Setting Object Expiration in Swift\nDESCRIPTION: Demonstrates how to set an object to expire at a specific Unix epoch timestamp.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nswift post flex-container01 document01.rtf -H \"X-Delete-At:UNIX_EPOCH_TIMESTAMP\"\n```\n\n----------------------------------------\n\nTITLE: Listing Buckets in OpenStack Flex Object Storage using AWS CLI\nDESCRIPTION: Command to list all buckets in the OpenStack Flex Object Storage using the AWS CLI.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-s3-cli.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\naws --profile default s3api list-buckets\n```\n\n----------------------------------------\n\nTITLE: Modifying Values Configuration\nDESCRIPTION: Command to edit the values.yaml configuration file for VSO installation.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/vault-secrets-operator.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvi values.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Account Token\nDESCRIPTION: Command to retrieve the generated service account token.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/sync-fernet-keys.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get secret keystone-sync-external-secret -o yaml -n openstack\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of Swift Container\nDESCRIPTION: Shows how to list all objects within a Swift container.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/storage-object-store-swift-cli.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nswift list flex-container01\n```\n\n----------------------------------------\n\nTITLE: Inline Code Block Formatting\nDESCRIPTION: Shows how to format inline code in Markdown using single backticks.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/documentation-standards.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`inline`\n```\n\n----------------------------------------\n\nTITLE: Creating Platform Services Project in OpenStack\nDESCRIPTION: Creates a new project named 'platform-services' under the default domain.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-keystone-readonly.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud default project create --description 'platform-services enablement' platform-services --domain default\n```\n\n----------------------------------------\n\nTITLE: Showing OpenStack Image Details\nDESCRIPTION: Displays detailed information about a specific OpenStack image.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-snapshot.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} image show [--human-readable] <image>\n```\n\n----------------------------------------\n\nTITLE: Showing OpenStack Floating IP Details\nDESCRIPTION: Command to display detailed information about a specific floating IP.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} floating ip show $VIP\n```\n\n----------------------------------------\n\nTITLE: Disassociating Floating IP from Instance\nDESCRIPTION: Command to remove a floating IP association from an instance.\nSOURCE: https://github.com/rackerlabs/genestack/blob/main/docs/openstack-floating-ips.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenstack --os-cloud={cloud name} server remove floating ip $INSTANCE_UUID $VIP\n```"
  }
]