[
  {
    "owner": "valyala",
    "repo": "fasthttp",
    "content": "TITLE: Implementing Request Handlers in fasthttp (Go)\nDESCRIPTION: Demonstrates how to create request handlers in fasthttp style, including both struct methods and plain functions. Shows how to pass these handlers to fasthttp.ListenAndServe.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype MyHandler struct {\n\tfoobar string\n}\n\n// request handler in net/http style, i.e. method bound to MyHandler struct.\nfunc (h *MyHandler) HandleFastHTTP(ctx *fasthttp.RequestCtx) {\n\t// notice that we may access MyHandler properties here - see h.foobar.\n\tfmt.Fprintf(ctx, \"Hello, world! Requested path is %q. Foobar is %q\",\n\t\tctx.Path(), h.foobar)\n}\n\n// request handler in fasthttp style, i.e. just plain function.\nfunc fastHTTPHandler(ctx *fasthttp.RequestCtx) {\n\tfmt.Fprintf(ctx, \"Hi there! RequestURI is %q\", ctx.RequestURI())\n}\n\n// pass bound struct method to fasthttp\nmyHandler := &MyHandler{\n\tfoobar: \"foobar\",\n}\nfasthttp.ListenAndServe(\":8080\", myHandler.HandleFastHTTP)\n\n// pass plain function to fasthttp\nfasthttp.ListenAndServe(\":8081\", fastHTTPHandler)\n```\n\n----------------------------------------\n\nTITLE: Converting net/http Request Handler to fasthttp (Go)\nDESCRIPTION: Shows how to convert a typical net/http request handler with path-based routing to an equivalent fasthttp handler. Demonstrates the use of ctx.Path() for routing.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// net/http request handler\nrequestHandler := func(w http.ResponseWriter, r *http.Request) {\n\tswitch r.URL.Path {\n\tcase \"/foo\":\n\t\tfooHandler(w, r)\n\tcase \"/bar\":\n\t\tbarHandler(w, r)\n\tdefault:\n\t\thttp.Error(w, \"Unsupported path\", http.StatusNotFound)\n\t}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// the corresponding fasthttp request handler\nrequestHandler := func(ctx *fasthttp.RequestCtx) {\n\tswitch string(ctx.Path()) {\n\tcase \"/foo\":\n\t\tfooHandler(ctx)\n\tcase \"/bar\":\n\t\tbarHandler(ctx)\n\tdefault:\n\t\tctx.Error(\"Unsupported path\", fasthttp.StatusNotFound)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fasthttp Server with Prefork in Go\nDESCRIPTION: Shows how to configure and initialize a Fasthttp server with prefork functionality. The prefork wrapper creates multiple child processes to handle requests across CPU cores, improving performance but preventing the use of global state.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/prefork/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/valyala/fasthttp\"\n    \"github.com/valyala/fasthttp/prefork\"\n)\n\nserver := &fasthttp.Server{\n    // Your configuration\n}\n\n// Wraps the server with prefork\npreforkServer := prefork.New(server)\n\nif err := preforkServer.ListenAndServe(\":8080\"); err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Flexible Response Writing in fasthttp (Go)\nDESCRIPTION: Illustrates the flexibility of setting headers and writing response body in fasthttp. Unlike net/http, fasthttp allows setting headers and body in any order before returning from the handler.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nrequestHandler := func(ctx *fasthttp.RequestCtx) {\n\t// set some headers and status code first\n\tctx.SetContentType(\"foo/bar\")\n\tctx.SetStatusCode(fasthttp.StatusOK)\n\n\t// then write the first part of body\n\tfmt.Fprintf(ctx, \"this is the first part of body\\n\")\n\n\t// then set more headers\n\tctx.Response.Header.Set(\"Foo-Bar\", \"baz\")\n\n\t// then write more body\n\tfmt.Fprintf(ctx, \"this is the second part of body\\n\")\n\n\t// then override already written body\n\tctx.SetBody([]byte(\"this is completely new body contents\"))\n\n\t// then update status code\n\tctx.SetStatusCode(fasthttp.StatusNotFound)\n\n\t// basically, anything may be updated many times before\n\t// returning from RequestHandler.\n\t//\n\t// Unlike net/http fasthttp doesn't put response to the wire until\n\t// returning from RequestHandler.\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ServeMux to fasthttp Handler (Go)\nDESCRIPTION: Demonstrates how to convert a simple net/http ServeMux to an equivalent fasthttp request handler. Shows path-based routing implementation in fasthttp.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// net/http code\n\nm := &http.ServeMux{}\nm.HandleFunc(\"/foo\", fooHandlerFunc)\nm.HandleFunc(\"/bar\", barHandlerFunc)\nm.Handle(\"/baz\", bazHandler)\n\nhttp.ListenAndServe(\":80\", m)\n```\n\nLANGUAGE: go\nCODE:\n```\n// the corresponding fasthttp code\nm := func(ctx *fasthttp.RequestCtx) {\n\tswitch string(ctx.Path()) {\n\tcase \"/foo\":\n\t\tfooHandlerFunc(ctx)\n\tcase \"/bar\":\n\t\tbarHandlerFunc(ctx)\n\tcase \"/baz\":\n\t\tbazHandler.HandlerFunc(ctx)\n\tdefault:\n\t\tctx.Error(\"not found\", fasthttp.StatusNotFound)\n\t}\n}\n\nfasthttp.ListenAndServe(\":80\", m)\n```\n\n----------------------------------------\n\nTITLE: FastHTTP vs net/http API References\nDESCRIPTION: Code reference examples showing the differences between FastHTTP and net/http APIs for connection hijacking and request body reading.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nnet/http connection hijacking vs fasthttp connection hijacking\nnet/http Request.Body reading vs fasthttp request body reading\n```\n\n----------------------------------------\n\nTITLE: Benchmarking fasthttp Server Performance in Go\nDESCRIPTION: This code snippet presents the benchmark results for the fasthttp server under various scenarios, similar to the net/http benchmarks. It showcases the performance improvements achieved by fasthttp compared to the standard library implementation.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ GOMAXPROCS=1 go test -bench=kServerGet -benchmem -benchtime=10s\nBenchmarkServerGet1ReqPerConn                       \t10000000\t      1559 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet2ReqPerConn                       \t10000000\t      1248 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet10ReqPerConn                      \t20000000\t       797 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet10KReqPerConn                     \t20000000\t       716 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet1ReqPerConn10KClients             \t10000000\t      1974 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet2ReqPerConn10KClients             \t10000000\t      1352 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet10ReqPerConn10KClients            \t20000000\t       789 ns/op\t       2 B/op\t       0 allocs/op\nBenchmarkServerGet100ReqPerConn10KClients           \t20000000\t       604 ns/op\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking fasthttp Server Performance with Multiple Cores in Go\nDESCRIPTION: This code snippet presents the benchmark results for the fasthttp server using multiple CPU cores (GOMAXPROCS=4). It showcases the performance improvements achieved by fasthttp compared to the standard library implementation under parallel execution.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ GOMAXPROCS=4 go test -bench=kServerGet -benchmem -benchtime=10s\nBenchmarkServerGet1ReqPerConn-4                         \t10000000\t      1141 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet2ReqPerConn-4                         \t20000000\t       707 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet10ReqPerConn-4                        \t30000000\t       341 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet10KReqPerConn-4                       \t50000000\t       310 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet1ReqPerConn10KClients-4               \t10000000\t      1119 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet2ReqPerConn10KClients-4               \t20000000\t       644 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet10ReqPerConn10KClients-4              \t30000000\t       346 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkServerGet100ReqPerConn10KClients-4             \t50000000\t       282 ns/op\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Using ctx.Done() in fasthttp (Go)\nDESCRIPTION: Illustrates the behavior of ctx.Done() in fasthttp, which is only closed when the server is shutting down, not for individual request timeouts.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tfasthttp.ListenAndServe(\":8080\", fasthttp.TimeoutHandler(func(ctx *fasthttp.RequestCtx) {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t// ctx.Done() is only closed when the server is shutting down.\n\t\t\tlog.Println(\"context cancelled\")\n\t\t\treturn\n\t\tcase <-time.After(10 * time.Second):\n\t\t\tlog.Println(\"process finished ok\")\n\t\t}\n\t}, time.Second*2, \"timeout\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Third-party Router Integration\nDESCRIPTION: List of compatible third-party routers and web frameworks that support FastHTTP.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n* fasthttp-routing\n* router\n* gramework\n* lu\n* atreugo\n* Fiber\n* Gearbox\n```\n\n----------------------------------------\n\nTITLE: Appending strings to byte buffers in Go\nDESCRIPTION: Demonstrates how to efficiently append string contents to a byte buffer without additional allocations. This technique is frequently used in fasthttp for building responses.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ndst = append(dst, \"foobar\"...)\n```\n\n----------------------------------------\n\nTITLE: Zero-allocation string and byte buffer conversion in Go\nDESCRIPTION: Unsafe but efficient methods for converting between strings and byte slices without memory allocation. These techniques are used internally by fasthttp but require careful handling to avoid memory corruption.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc b2s(b []byte) string {\n    return *(*string)(unsafe.Pointer(&b))\n}\n\nfunc s2b(s string) (b []byte) {\n    bh := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n    sh := (*reflect.StringHeader)(unsafe.Pointer(&s))\n    bh.Data = sh.Data\n    bh.Cap = sh.Len\n    bh.Len = sh.Len\n    return b\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Request Handler Implementation in Go\nDESCRIPTION: Example request handler implementation used for benchmarking the prefork functionality. Simulates a workload with a 100ms delay.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/prefork/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc requestHandler(ctx *fasthttp.RequestCtx) {\n    // Simulates some hard work\n    time.Sleep(100 * time.Millisecond)\n}\n```\n\n----------------------------------------\n\nTITLE: Working with nil byte buffers in Go\nDESCRIPTION: Examples of how standard Go functions behave with nil buffers, showing that nil checks are often unnecessary. These patterns are used throughout fasthttp to optimize memory usage.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\t// both buffers are uninitialized\n\tdst []byte\n\tsrc []byte\n)\ndst = append(dst, src...)  // is legal if dst is nil and/or src is nil\ncopy(dst, src)  // is legal if dst is nil and/or src is nil\n(string(src) == \"\")  // is true if src is nil\n(len(src) == 0)  // is true if src is nil\nsrc = src[:0]  // works like a charm with nil src\n\n// this for loop doesn't panic if src is nil\nfor i, ch := range src {\n\tdoSomething(i, ch)\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying byte buffer length checks in Go\nDESCRIPTION: Shows how to simplify code by leveraging Go's handling of nil buffers. This approach reduces unnecessary conditional checks, making code cleaner and more efficient.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nsrcLen := 0\nif src != nil {\n\tsrcLen = len(src)\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nsrcLen := len(src)\n```\n\n----------------------------------------\n\nTITLE: Extending byte buffers to capacity in Go\nDESCRIPTION: Shows how byte buffers can be extended up to their capacity, leveraging Go's slice mechanics for efficient memory usage. This pattern is used throughout fasthttp for buffer reuse.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nbuf := make([]byte, 100)\na := buf[:10]  // len(a) == 10, cap(a) == 100.\nb := a[:100]  // is valid, since cap(a) == 100.\n```\n\n----------------------------------------\n\nTITLE: Using nil byte buffers with fasthttp functions\nDESCRIPTION: Examples of fasthttp API functions that accept nil byte buffers, which helps reduce the need for pre-allocations. This pattern allows for cleaner code and memory efficiency.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nstatusCode, body, err := fasthttp.Get(nil, \"http://google.com/\")\nuintBuf := fasthttp.AppendUint(nil, 1234)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking net/http Server Performance with Multiple Cores in Go\nDESCRIPTION: This code snippet shows the benchmark results for the net/http server using multiple CPU cores (GOMAXPROCS=4). It demonstrates how the standard library's HTTP implementation performs under parallel execution.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ GOMAXPROCS=4 go test -bench=NetHTTPServerGet -benchmem -benchtime=10s\nBenchmarkNetHTTPServerGet1ReqPerConn-4                  \t 3000000\t      4529 ns/op\t    2389 B/op\t      29 allocs/op\nBenchmarkNetHTTPServerGet2ReqPerConn-4                  \t 5000000\t      3896 ns/op\t    2418 B/op\t      24 allocs/op\nBenchmarkNetHTTPServerGet10ReqPerConn-4                 \t 5000000\t      3145 ns/op\t    2160 B/op\t      19 allocs/op\nBenchmarkNetHTTPServerGet10KReqPerConn-4                \t 5000000\t      3054 ns/op\t    2065 B/op\t      18 allocs/op\nBenchmarkNetHTTPServerGet1ReqPerConn10KClients-4        \t 1000000\t     10321 ns/op\t    3710 B/op\t      30 allocs/op\nBenchmarkNetHTTPServerGet2ReqPerConn10KClients-4        \t 2000000\t      7556 ns/op\t    3296 B/op\t      24 allocs/op\nBenchmarkNetHTTPServerGet10ReqPerConn10KClients-4       \t 5000000\t      3905 ns/op\t    2349 B/op\t      19 allocs/op\nBenchmarkNetHTTPServerGet100ReqPerConn10KClients-4      \t 5000000\t      3435 ns/op\t    2130 B/op\t      18 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking net/http Server Performance in Go\nDESCRIPTION: This code snippet shows the benchmark results for the net/http server under different scenarios, including varying request counts per connection and client numbers. It demonstrates the performance characteristics of the standard library's HTTP implementation.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ GOMAXPROCS=1 go test -bench=NetHTTPServerGet -benchmem -benchtime=10s\nBenchmarkNetHTTPServerGet1ReqPerConn                \t 1000000\t     12052 ns/op\t    2297 B/op\t      29 allocs/op\nBenchmarkNetHTTPServerGet2ReqPerConn                \t 1000000\t     12278 ns/op\t    2327 B/op\t      24 allocs/op\nBenchmarkNetHTTPServerGet10ReqPerConn               \t 2000000\t      8903 ns/op\t    2112 B/op\t      19 allocs/op\nBenchmarkNetHTTPServerGet10KReqPerConn              \t 2000000\t      8451 ns/op\t    2058 B/op\t      18 allocs/op\nBenchmarkNetHTTPServerGet1ReqPerConn10KClients      \t  500000\t     26733 ns/op\t    3229 B/op\t      29 allocs/op\nBenchmarkNetHTTPServerGet2ReqPerConn10KClients      \t 1000000\t     23351 ns/op\t    3211 B/op\t      24 allocs/op\nBenchmarkNetHTTPServerGet10ReqPerConn10KClients     \t 1000000\t     13390 ns/op\t    2483 B/op\t      19 allocs/op\nBenchmarkNetHTTPServerGet100ReqPerConn10KClients    \t 1000000\t     13484 ns/op\t    2171 B/op\t      18 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Prefork Benchmark Results\nDESCRIPTION: Performance metrics showing the results of load testing with prefork enabled, demonstrating improved latency and throughput.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/prefork/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRunning 15s test @ http://localhost:8080\n  4 threads and 512 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     4.75ms    4.27ms 126.24ms   97.45%\n    Req/Sec    26.46k     4.16k   71.18k    88.72%\n  Latency Distribution\n     50%    4.55ms\n     75%    4.82ms\n     90%    5.46ms\n     99%   15.49ms\n  1581916 requests in 15.09s, 140.30MB read\n  Socket errors: connect 0, read 318, write 0, timeout 0\nRequests/sec: 104861.58\nTransfer/sec:      9.30MB\n```\n\n----------------------------------------\n\nTITLE: Non-Prefork Benchmark Results\nDESCRIPTION: Performance metrics showing the results of load testing without prefork enabled, for comparison with prefork results.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/prefork/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRunning 15s test @ http://localhost:8080\n  4 threads and 512 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     6.42ms   11.83ms 177.19ms   96.42%\n    Req/Sec    24.96k     5.83k   56.83k    82.93%\n  Latency Distribution\n     50%    4.53ms\n     75%    4.93ms\n     90%    6.94ms\n     99%   74.54ms\n  1472441 requests in 15.09s, 130.59MB read\n  Socket errors: connect 0, read 265, write 0, timeout 0\nRequests/sec:  97553.34\nTransfer/sec:      8.65MB\n```\n\n----------------------------------------\n\nTITLE: Benchmarking fasthttp Client Performance (GOMAXPROCS=4)\nDESCRIPTION: Benchmark results for fasthttp client with GOMAXPROCS set to 4. This demonstrates the performance of fasthttp in a multi-core environment.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=4 go test -bench='kClient(Do|GetEndToEnd)' -benchmem -benchtime=10s\nBenchmarkClientDoFastServer-4                           \t50000000\t       397 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd1TCP-4                        \t 2000000\t      7388 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd10TCP-4                       \t 2000000\t      6689 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd100TCP-4                      \t 3000000\t      4927 ns/op\t       1 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd1Inmemory-4                   \t10000000\t      1604 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd10Inmemory-4                  \t10000000\t      1458 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd100Inmemory-4                 \t10000000\t      1329 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd1000Inmemory-4                \t10000000\t      1316 ns/op\t       5 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking fasthttp Client Performance (GOMAXPROCS=1)\nDESCRIPTION: Benchmark results for fasthttp client with GOMAXPROCS set to 1. It tests the same scenarios as the net/http client for comparison.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=1 go test -bench='kClient(Do|GetEndToEnd)' -benchmem -benchtime=10s\nBenchmarkClientDoFastServer                         \t20000000\t       865 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd1TCP                      \t 1000000\t     18711 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd10TCP                     \t 1000000\t     14664 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd100TCP                    \t 1000000\t     14043 ns/op\t       1 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd1Inmemory                 \t 5000000\t      3965 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd10Inmemory                \t 3000000\t      4060 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd100Inmemory               \t 5000000\t      3396 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkClientGetEndToEnd1000Inmemory              \t 5000000\t      3306 ns/op\t       2 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking net/http Client Performance (GOMAXPROCS=4)\nDESCRIPTION: Benchmark results for net/http client with GOMAXPROCS set to 4. This tests the performance in a multi-core environment.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=4 go test -bench='HTTPClient(Do|GetEndToEnd)' -benchmem -benchtime=10s\nBenchmarkNetHTTPClientDoFastServer-4                    \t 2000000\t      8774 ns/op\t    2619 B/op\t      35 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd1TCP-4                 \t  500000\t     22951 ns/op\t    5047 B/op\t      56 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd10TCP-4                \t 1000000\t     19182 ns/op\t    5037 B/op\t      55 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd100TCP-4               \t 1000000\t     16535 ns/op\t    5031 B/op\t      55 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd1Inmemory-4            \t 1000000\t     14495 ns/op\t    5038 B/op\t      56 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd10Inmemory-4           \t 1000000\t     10237 ns/op\t    5034 B/op\t      56 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd100Inmemory-4          \t 1000000\t     10125 ns/op\t    5045 B/op\t      56 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd1000Inmemory-4         \t 1000000\t     11132 ns/op\t    5136 B/op\t      56 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmarking net/http Client Performance (GOMAXPROCS=1)\nDESCRIPTION: Benchmark results for net/http client with GOMAXPROCS set to 1. It tests various scenarios including fast server responses, TCP connections, and in-memory operations.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=1 go test -bench='HTTPClient(Do|GetEndToEnd)' -benchmem -benchtime=10s\nBenchmarkNetHTTPClientDoFastServer                  \t 1000000\t     12567 ns/op\t    2616 B/op\t      35 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd1TCP               \t  200000\t     67030 ns/op\t    5028 B/op\t      56 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd10TCP              \t  300000\t     51098 ns/op\t    5031 B/op\t      56 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd100TCP             \t  300000\t     45096 ns/op\t    5026 B/op\t      55 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd1Inmemory          \t  500000\t     24779 ns/op\t    5035 B/op\t      57 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd10Inmemory         \t 1000000\t     26425 ns/op\t    5035 B/op\t      57 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd100Inmemory        \t  500000\t     28515 ns/op\t    5045 B/op\t      57 allocs/op\nBenchmarkNetHTTPClientGetEndToEnd1000Inmemory       \t  500000\t     39511 ns/op\t    5096 B/op\t      56 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Running the File Server in Go\nDESCRIPTION: Commands to display help and run the file server with specific address and directory options.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/fileserver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./fileserver -h\n./fileserver -addr=tcp.addr.to.listen:to -dir=/path/to/directory/to/serve\n```\n\n----------------------------------------\n\nTITLE: Building and Running the HostClient Example\nDESCRIPTION: Instructions for compiling and executing the host_client example. Requires starting a web server on localhost:8080 before running the example.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/host_client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n./host_client\n```\n\n----------------------------------------\n\nTITLE: Running HelloWorld Server with Custom Address\nDESCRIPTION: Executes the compiled HelloWorld server binary, specifying a custom TCP address and port to listen on. The -addr flag allows configuration of the server's listening address.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/helloworldserver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./helloworldserver -addr=tcp.addr.to.listen:to\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Nginx Performance with wrk\nDESCRIPTION: Command and output for benchmarking nginx performance using wrk tool with 4 threads and 16 connections for 10 seconds.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/fileserver/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./wrk -t 4 -c 16 -d 10 http://localhost:80\nRunning 10s test @ http://localhost:80\n  4 threads and 16 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   397.76us    1.08ms  20.23ms   95.19%\n    Req/Sec    21.20k     2.49k   31.34k    79.65%\n  850220 requests in 10.10s, 695.65MB read\nRequests/sec:  84182.71\nTransfer/sec:     68.88MB\n```\n\n----------------------------------------\n\nTITLE: Benchmarking File Server Performance with wrk\nDESCRIPTION: Command and output for benchmarking the Go file server performance using wrk tool with 4 threads and 16 connections for 10 seconds.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/fileserver/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./wrk -t 4 -c 16 -d 10 http://localhost:8080\nRunning 10s test @ http://localhost:8080\n  4 threads and 16 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   447.99us    1.59ms  27.20ms   94.79%\n    Req/Sec    37.13k     3.99k   47.86k    76.00%\n  1478457 requests in 10.02s, 1.03GB read\nRequests/sec: 147597.06\nTransfer/sec:    105.15MB\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Nginx with Pipelined Requests\nDESCRIPTION: Command and output for benchmarking nginx performance using wrk tool with 4 threads, 16 connections, and 8 pipelined requests for 10 seconds.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/fileserver/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./wrk -s pipeline.lua -t 4 -c 16 -d 10 http://localhost:80 -- 8\nRunning 10s test @ http://localhost:80\n  4 threads and 16 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     1.34ms    2.15ms  30.91ms   92.16%\n    Req/Sec    33.54k     7.36k  108.12k    76.81%\n  1339908 requests in 10.10s, 1.07GB read\nRequests/sec: 132705.81\nTransfer/sec:    108.58MB\n```\n\n----------------------------------------\n\nTITLE: Benchmarking File Server with Pipelined Requests\nDESCRIPTION: Command and output for benchmarking the Go file server performance using wrk tool with 4 threads, 16 connections, and 8 pipelined requests for 10 seconds.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/fileserver/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./wrk -s pipeline.lua -t 4 -c 16 -d 10 http://localhost:8080 -- 8\nRunning 10s test @ http://localhost:8080\n  4 threads and 16 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     2.08ms    6.33ms  88.26ms   92.83%\n    Req/Sec   116.54k    14.66k  167.98k    69.00%\n  4642226 requests in 10.03s, 3.23GB read\nRequests/sec: 462769.41\nTransfer/sec:    329.67MB\n```\n\n----------------------------------------\n\nTITLE: Installing fasthttp Package\nDESCRIPTION: Command to install the fasthttp package using go get. This installs the latest version of the package.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ngo get -u github.com/valyala/fasthttp\n```\n\n----------------------------------------\n\nTITLE: FastHTTP Version Support\nDESCRIPTION: Version requirements for FastHTTP, indicating supported Go versions.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/README.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\nGO 1.23.x and newer\n```\n\n----------------------------------------\n\nTITLE: Benchmark Command for Fasthttp Server\nDESCRIPTION: wrk command used to perform load testing on the Fasthttp server with specific headers and connection parameters.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/prefork/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwrk -H 'Host: localhost' -H 'Accept: text/plain,text/html;q=0.9,application/xhtml+xml;q=0.9,application/xml;q=0.8,*/*;q=0.7' -H 'Connection: keep-alive' --latency -d 15 -c 512 --timeout 8 -t 4 http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Building HelloWorld Server with Make\nDESCRIPTION: Uses the make command to build the HelloWorld server. This assumes a Makefile is present in the project directory with appropriate build instructions.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/helloworldserver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Building the File Server in Go\nDESCRIPTION: Command to build the file server application using make.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/fileserver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Building the Multidomain SSL Example in Fasthttp\nDESCRIPTION: Instructions to build the multidomain SSL example application using a Makefile.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/multidomain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Running the Multidomain SSL Example in Fasthttp\nDESCRIPTION: Command to execute the compiled multidomain SSL example application.\nSOURCE: https://github.com/valyala/fasthttp/blob/master/examples/multidomain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./multidomain\n```"
  }
]