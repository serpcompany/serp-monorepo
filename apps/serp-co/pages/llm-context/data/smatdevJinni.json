[
  {
    "owner": "smat-dev",
    "repo": "jinni",
    "content": "TITLE: Configuring MCP Server for Jinni in JSON\nDESCRIPTION: JSON configuration for setting up the Jinni MCP server in tools like Cursor, Roo, or Claude Desktop. It specifies the command to run the server and optionally constrains it to a specific root directory for security.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n    \"jinni\": {\n        \"command\": \"uvx jinni-server\"\n        // Optionally constrain the server to only read within a tree (recommended for security):\n        // \"command\": \"uvx jinni-server --root /absolute/path/\"\n    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client for Jinni Server\nDESCRIPTION: Example JSON configuration for an MCP client (e.g., claude_desktop_config.json) to set up the Jinni server. It specifies the command to run the server using uvx and optionally constrains it to a specific root directory.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"jinni\": {\n      \"command\": \"uvx jinni-server\"\n      // Optionally constrain the server to only read within a tree (recommended for security):\n      // \"command\": \"uvx jinni-server --root /absolute/path/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jinni MCP Server with uvx\nDESCRIPTION: Bash command to run the Jinni MCP server using uvx. This is the recommended method for starting the server, which requires the jinni package to be published on PyPI or findable by uvx.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuvx jinni-server [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing Jinni Server Command\nDESCRIPTION: Example command showing how to run the Jinni MCP server using the jinni-server package via uvx.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/jinni-server-pkg/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx jinni-server\n```\n\n----------------------------------------\n\nTITLE: Installing Jinni using pip\nDESCRIPTION: Bash command to install Jinni using pip, the Python package installer. This command makes the jinni CLI command available in the user's environment.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install jinni\n```\n\n----------------------------------------\n\nTITLE: Installing Jinni using uv\nDESCRIPTION: Bash command to install Jinni using uv, an alternative Python package installer. This command also makes the jinni CLI command available in the user's environment.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install jinni\n```\n\n----------------------------------------\n\nTITLE: Processing Directories with Jinni CLI\nDESCRIPTION: Examples of how to process single or multiple directories using the Jinni command-line interface to extract context.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njinni ./my_project/ # Process a single directory\njinni ./src ./docs/README.md # Process multiple targets\njinni # Process current directory (.)\n```\n\n----------------------------------------\n\nTITLE: Example .contextfiles Configuration for Project Root\nDESCRIPTION: Example configuration file showing how to include specific file types and exclude others at the project root level using .gitignore-style patterns.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n# Include all Python files in the src directory and subdirectories\nsrc/**/*.py\n\n# Include the main config file at the root of the project\n/config.json\n\n# Include all markdown files anywhere\n*.md\n\n# Exclude any test data directories found anywhere\n!**/test_data/\n```\n\n----------------------------------------\n\nTITLE: Example .contextfiles Configuration for Subdirectory\nDESCRIPTION: Example configuration file showing how to override parent rules for a specific subdirectory, adding new inclusions and exclusions that apply only within that directory.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n# In addition to rules inherited from parent .contextfiles...\n\n# Include specific utility scripts in this directory\nutils/*.sh\n\n# Exclude a specific generated file within src, even if *.py is included elsewhere\n!generated_parser.py\n```\n\n----------------------------------------\n\nTITLE: Example .contextfiles Configuration for Inclusion-focused Rules\nDESCRIPTION: Demonstrates the syntax for a .contextfiles configuration file using gitignore-style patterns. Shows how to include Python files, Markdown files, exclude temporary files, include specific config files, and exclude entire directories.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/DESIGN.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Include all Python files in the src directory and subdirectories\nsrc/**/*.py\n\n# Include all Markdown files anywhere\n*.md\n\n# Exclude temporary files anywhere, even if they are .py or .md\n!*.tmp\n\n# Include the specific config file at the root of this context\n/config.yaml\n\n# Exclude the entire build directory relative to this file\nbuild/\n```\n\n----------------------------------------\n\nTITLE: Listing Files Without Content Using Jinni CLI\nDESCRIPTION: Commands to list files that would be included in the context extraction without actually processing their content.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njinni -l ./my_project/\njinni --list-only ./src ./docs/README.md\n```\n\n----------------------------------------\n\nTITLE: Writing Context Output to File with Jinni CLI\nDESCRIPTION: Command to dump the context of a project directory to a specified output file instead of displaying it in the console.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njinni -o context_dump.txt ./my_project/\n```\n\n----------------------------------------\n\nTITLE: Using Custom Override Rules with Jinni CLI\nDESCRIPTION: Command to use custom override rules from a specified file instead of the default .contextfiles for determining which files to include or exclude.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njinni --overrides custom.rules ./my_project/\n```\n\n----------------------------------------\n\nTITLE: Displaying Debug Information with Jinni CLI\nDESCRIPTION: Command to show debug information when processing a directory, which can help understand why certain files are included or excluded.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njinni --debug-explain ./src\n```\n\n----------------------------------------\n\nTITLE: Processing with Automatic Clipboard Copy\nDESCRIPTION: Default behavior of Jinni that automatically copies the output to clipboard when processing a directory.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njinni ./my_project/\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Clipboard Copy\nDESCRIPTION: Command to process a directory without automatically copying the output to clipboard, useful when output is large or clipboard access is not needed.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\njinni --no-copy ./my_project/\n```\n\n----------------------------------------\n\nTITLE: Running Jinni Server Locally for Development\nDESCRIPTION: Command to run the Jinni server module directly during development after installing it in editable mode, useful for testing and development.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython -m jinni.server [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: MCP Client Configuration for Local Development\nDESCRIPTION: Example JSON configuration for setting up the Jinni server as an MCP (Model Control Protocol) client during local development.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"jinni\": {\n      // Adjust python path if needed, or ensure the correct environment is active\n      \"command\": \"python -m jinni.server\"\n      // Optionally constrain the server to only read within a tree (recommended for security):\n      // \"command\": \"python -m jinni.server --root /absolute/path/to/repo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example .contextfiles for Troubleshooting Size Errors\nDESCRIPTION: Example configuration to exclude specific file types and directories when troubleshooting context size limit errors, showing how to exclude log files and large data directories.\nSOURCE: https://github.com/smat-dev/jinni/blob/main/README.md#2025-04-17_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n# Exclude all log files\n!*.log\n\n# Exclude a large data directory\n!large_data_files/\n```"
  }
]