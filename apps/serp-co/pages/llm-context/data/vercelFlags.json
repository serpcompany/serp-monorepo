[
  {
    "owner": "vercel",
    "repo": "flags",
    "content": "TITLE: Defining a Feature Flag in Next.js\nDESCRIPTION: TypeScript code snippet demonstrating how to declare a feature flag using the Flags SDK in a Next.js project. It creates a boolean flag with a key and a decide function that always returns true.\nSOURCE: https://github.com/vercel/flags/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// app/flags.tsx\nimport { flag } from 'flags/next';\n\nexport const exampleFlag = flag<boolean>({\n  key: 'example-flag',\n  decide() {\n    return true;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a feature flag in Next.js\nDESCRIPTION: Example of creating a feature flag definition using the Flags SDK in a Next.js application. This code defines a boolean flag with a key and a decide function that determines the flag's value.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/flags/README.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// app/flags.tsx\nimport { flag } from 'flags/next';\n\nexport const exampleFlag = flag<boolean>({\n  key: 'example-flag',\n  decide() {\n    return true;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Feature Flag in a Next.js React Server Component\nDESCRIPTION: TypeScript React code showing how to use a defined feature flag in a Next.js React Server Component. It imports the flag and uses it to conditionally render content based on the flag's value.\nSOURCE: https://github.com/vercel/flags/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport { exampleFlag } from './flags';\n\nexport default async function Page() {\n  const example = await exampleFlag();\n  return <div>{example ? 'Flag is on' : 'Flag is off'}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a feature flag in a Next.js React Server Component\nDESCRIPTION: Example of implementing a feature flag in a Next.js page component. The code imports the previously defined flag, awaits its value, and conditionally renders content based on the flag state.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/flags/README.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/page.tsx\nimport { exampleFlag } from './flags';\n\nexport default async function Page() {\n  const example = await exampleFlag();\n  return <div>{example ? 'Flag is on' : 'Flag is off'}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Feature Flag Implementation with LaunchDarkly\nDESCRIPTION: Example of implementing a feature flag using the LaunchDarkly adapter, including context identification and flag definition.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-launchdarkly/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flag, dedupe } from 'flags/next';\nimport { ldAdapter, type LDContext } from '@flags-sdk/launchdarkly';\n\nconst identify = dedupe(async (): Promise<LDContext> => {\n  return {\n    key: 'user_123',\n  };\n});\n\nexport const showBanner = flag<boolean, LDContext>({\n  key: 'show-banner',\n  identify,\n  adapter: ldAdapter.variation(),\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Flag Implementation with Statsig in Next.js\nDESCRIPTION: Example of a complete flag implementation using the Statsig adapter with the Flags SDK in a Next.js application. It demonstrates creating a boolean feature gate with a custom adapter configuration.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-statsig/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flag } from 'flags/next';\nimport { statsigAdapter } from '@flags-sdk/statsig';\n\nexport const marketingGate = flag<boolean>({\n  key: 'marketing_gate',\n  adapter: statsigAdapter.featureGate((config) => config.value),\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Provider Data with Vercel Flags\nDESCRIPTION: Example showing how to merge feature flag data from multiple sources using mergeProviderData function. Demonstrates combining flags declared in code with data from a feature flag provider.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/flags/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyAccess, mergeProviderData, type ApiData } from '@vercel/flags';\nimport { getProviderData } from '@vercel/flags/next';\nimport { NextResponse, type NextRequest } from 'next/server';\nimport { getProviderData as getStatsigProviderData } from '@flags-sdk/statsig';\nimport * as flagsA from '../../../../flags-a';\nimport * as flagsB from '../../../../flags-b';\n\nexport async function GET(request: NextRequest) {\n  const access = await verifyAccess(request.headers.get('Authorization'));\n  if (!access) return NextResponse.json(null, { status: 401 });\n\n  const providerData = await mergeProviderData([\n    // expose flags declared in code first\n    getProviderData({ ...flagsA, ...flagsB }),\n    // then enhance them with metadata from your flag provider\n    getStatsigProviderData({ consoleApiKey: '', projectId: '' }),\n  ]);\n\n  return NextResponse.json<ApiData>(providerData);\n}\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Function Calls in Next.js\nDESCRIPTION: Example demonstrating the use of dedupe function to ensure a function only runs once per request. Shows implementation for generating and managing visitor IDs.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/flags/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nanoid } from 'nanoid';\nimport { cookies, headers } from 'next/headers';\nimport { dedupe } from '@vercel/flags/next';\n\n/**\n * Reads the visitor id from a cookie or returns a new visitor id\n */\nexport const getOrGenerateVisitorId = dedupe(\n  async (): Promise<{ value: string; fresh: boolean }> => {\n    const visitorIdCookie = (await cookies()).get('visitor-id')?.value;\n\n    return visitorIdCookie\n      ? { value: visitorIdCookie, fresh: false }\n      : { value: nanoid(), fresh: true };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Default Edge Config Adapter in TypeScript\nDESCRIPTION: Example of using the default Edge Config adapter with the Flags SDK. It connects to the Edge Config specified by the EDGE_CONFIG environment variable and reads flags from the 'flags' key.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-edge-config/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flag } from 'flags/next';\nimport { edgeConfigAdapter } from '@flags-sdk/edge-config';\n\nexport const exampleFlag = flag({\n  key: 'example-flag',\n  adapter: edgeConfigAdapter(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Edge Config Adapter in TypeScript\nDESCRIPTION: Example of creating and using a custom Edge Config adapter. It allows specifying a different Edge Config, team slug, and custom key for storing flags.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-edge-config/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flag } from 'flags/next';\nimport { createEdgeConfigAdapter } from '@flags-sdk/edge-config';\n\nconst edgeConfigAdapter = createEdgeConfigAdapter(process.env.EDGE_CONFIG, {\n  teamSlug: 'your-team-slug',\n  edgeConfigItemKey: 'my-flags',\n});\n\nexport const exampleFlag = flag({\n  key: 'example-flag',\n  adapter: edgeConfigAdapter(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom LaunchDarkly Adapter\nDESCRIPTION: Example of creating a custom LaunchDarkly adapter using the createLaunchDarklyAdapter function with specific configuration parameters.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-launchdarkly/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLaunchDarklyAdapter } from '@flags-sdk/launchdarkly';\n\nconst adapter = createLaunchDarklyAdapter({\n  projectSlug: 'my-project',\n  ldClientSideKey: '612376f91b8f5713a58777a1',\n  edgeConfigConnectionString: process.env.EDGE_CONFIG,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous OpenFeature Provider\nDESCRIPTION: Example of setting up the OpenFeature adapter with a synchronous provider implementation. Shows how to create an adapter instance with a direct client configuration.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-openfeature/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenFeatureAdapter } from '@flags-sdk/openfeature';\n\nOpenFeature.setProvider(new YourProviderOfChoice());\nconst openFeatureAdapter = createOpenFeatureAdapter(OpenFeature.getClient());\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous OpenFeature Provider\nDESCRIPTION: Example of setting up the OpenFeature adapter with an asynchronous provider implementation. Demonstrates how to initialize the adapter using an async function that sets up the provider and returns the client.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-openfeature/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenFeatureAdapter } from '@flags-sdk/openfeature';\n\n// pass an init function, and return the client\nconst openFeatureAdapter = createOpenFeatureAdapter(async () => {\n  const provider = new YourProviderOfChoice();\n  await OpenFeature.setProviderAndWait(provider);\n  return OpenFeature.getClient();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating FLAGS_SECRET using Node.js\nDESCRIPTION: Node.js command to generate a secure random 32-byte secret encoded in base64url format. This secret is required for the SDK to function, used for reading overrides and encrypting flag values.\nSOURCE: https://github.com/vercel/flags/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode -e \"console.log(crypto.randomBytes(32).toString('base64url'))\"\n```\n\n----------------------------------------\n\nTITLE: Generating a secure FLAGS_SECRET using Node.js\nDESCRIPTION: Node.js command to generate a cryptographically secure random string for use as the FLAGS_SECRET environment variable. This creates a 32-byte random value encoded in base64url format.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/flags/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode -e \"console.log(crypto.randomBytes(32).toString('base64url'))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for LaunchDarkly\nDESCRIPTION: Environment variables needed to configure the default LaunchDarkly adapter, including client side ID, project slug, and Edge Config connection string.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-launchdarkly/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport LAUNCHDARKLY_CLIENT_SIDE_ID=\"612376f91b8f5713a58777a1\"\nexport LAUNCHDARKLY_PROJECT_SLUG=\"my-project\"\n# Provided by Vercel when connecting an Edge Config to the project\nexport EDGE_CONFIG=\"https://edge-config.vercel.com/ecfg_abdc1234?token=xxx-xxx-xxx\"\n```\n\n----------------------------------------\n\nTITLE: Edge Config JSON Structure for Default Adapter\nDESCRIPTION: Example JSON structure for the Edge Config when using the default adapter. The flags are stored under the 'flags' key.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-edge-config/README.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flags\": {\n    \"example-flag\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Config JSON Structure for Custom Adapter\nDESCRIPTION: Example JSON structure for the Edge Config when using a custom adapter. The flags are stored under a custom key, in this case 'my-flags'.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-edge-config/README.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-flags\": {\n    \"example-flag\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flags SDK with npm\nDESCRIPTION: Command to install the Flags SDK package using npm. This is the first step in setting up the SDK in a project.\nSOURCE: https://github.com/vercel/flags/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install flags\n```\n\n----------------------------------------\n\nTITLE: Installing Flags SDK using npm\nDESCRIPTION: Command to install the Flags SDK package using npm package manager.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/flags/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install flags\n```\n\n----------------------------------------\n\nTITLE: Installing @flags-sdk/edge-config Package\nDESCRIPTION: Command to install the @flags-sdk/edge-config package using npm.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-edge-config/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @flags-sdk/edge-config\n```\n\n----------------------------------------\n\nTITLE: Installing LaunchDarkly Provider for Flags SDK\nDESCRIPTION: Command to install the LaunchDarkly provider module for the Flags SDK using npm.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-launchdarkly/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @flags-sdk/launchdarkly\n```\n\n----------------------------------------\n\nTITLE: Installing OpenFeature Provider Dependencies\nDESCRIPTION: Command to install the OpenFeature provider module and its peer dependency server SDK using npm.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-openfeature/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @flags-sdk/openfeature @openfeature/server-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing the Statsig Provider for Flags SDK\nDESCRIPTION: Command to install the Statsig provider module for the Flags SDK using pnpm package manager.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-statsig/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @flags-sdk/statsig\n```\n\n----------------------------------------\n\nTITLE: Importing the LaunchDarkly Adapter in TypeScript\nDESCRIPTION: Example of importing the default LaunchDarkly adapter instance from the package.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-launchdarkly/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ldAdapter } from '@flags-sdk/launchdarkly';\n```\n\n----------------------------------------\n\nTITLE: Importing the Statsig Adapter in TypeScript\nDESCRIPTION: Code showing how to import the statsigAdapter from the @flags-sdk/statsig package.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-statsig/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { statsigAdapter } from '@flags-sdk/statsig';\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.1.0\nDESCRIPTION: Documents the initial minor release with basic initialization functionality.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-statsig/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- 3c66284: initialize\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.0\nDESCRIPTION: Documents a minor release that adds initial support for Feature Gates and Dynamic Configs functionality.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-statsig/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- bd7e10a: Initial support for Feature Gates and Dynamic Configs\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.2.1\nDESCRIPTION: Documents a patch release that adds support for accepting consoleApiKey from getProviderData function.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-statsig/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1\n\n### Patch Changes\n\n- 9a687cb: accept consoleApiKey from getProviderData\n```\n\n----------------------------------------\n\nTITLE: Documenting Minor Version Release for @flags-sdk/edge-config\nDESCRIPTION: Release notes for version 0.1.0 of the @flags-sdk/edge-config package. This minor version change represents the initial release of the package.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-edge-config/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @flags-sdk/edge-config\n\n## 0.1.0\n\n### Minor Changes\n\n- 48cbe45: initial release\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Update for @flags-sdk/happykit in Markdown\nDESCRIPTION: This snippet details a minor version update to 0.1.0 for the @flags-sdk/happykit package. The update is described as 'initialize', indicating this is likely the initial release or a significant initialization of the package.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-happykit/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @flags-sdk/happykit\n\n## 0.1.0\n\n### Minor Changes\n\n- 3c66284: initialize\n```\n\n----------------------------------------\n\nTITLE: Documenting Minor Version Update for @flags-sdk/optimizely in Markdown\nDESCRIPTION: This snippet records a minor version update (0.1.0) for the @flags-sdk/optimizely package. The change is described as 'initialize', suggesting this might be the initial release of the package or a significant update that initializes new functionality.\nSOURCE: https://github.com/vercel/flags/blob/main/packages/adapter-optimizely/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @flags-sdk/optimizely\n\n## 0.1.0\n\n### Minor Changes\n\n- 3c66284: initialize\n```\n\n----------------------------------------\n\nTITLE: Documenting next-13 Version 0.1.1 Patch Changes in Markdown\nDESCRIPTION: This changelog entry documents the patch changes for version 0.1.1 of the next-13 package, highlighting updates to its dependencies. It specifically notes that @vercel/flags has been updated to version 2.7.0, referencing two specific commits (fb50709 and 87503b6).\nSOURCE: https://github.com/vercel/flags/blob/main/tests/next-13/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# next-13\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [fb50709]\n- Updated dependencies [87503b6]\n  - @vercel/flags@2.7.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Update for next-14 in Markdown\nDESCRIPTION: This markdown snippet outlines the version update for the next-14 project to 0.1.1. It details the patch changes, which include updates to the @vercel/flags dependency to version 2.7.0.\nSOURCE: https://github.com/vercel/flags/blob/main/tests/next-14/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# next-14\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [fb50709]\n- Updated dependencies [87503b6]\n  - @vercel/flags@2.7.0\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers. You can use npm, yarn, pnpm, or bun to launch the development environment on http://localhost:3000.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/snippets/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating a new Svelte project with npm\nDESCRIPTION: Commands to create a new Svelte project either in the current directory or in a specified folder using create-svelte.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/sveltekit-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Starting a Svelte development server\nDESCRIPTION: Commands to start a local development server after installing dependencies, with an option to automatically open the app in a browser tab.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/sveltekit-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte app for production\nDESCRIPTION: Command to create a production-ready build of a Svelte application, which can then be previewed locally.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/sveltekit-example/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project with create-svelte\nDESCRIPTION: Commands to create a new Svelte project either in the current directory or in a specified folder. Uses npm create svelte@latest to initialize a new project with the latest version.\nSOURCE: https://github.com/vercel/flags/blob/main/tests/sveltekit-e2e/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Starting the Svelte Development Server\nDESCRIPTION: Commands to start a development server after project creation and dependency installation. Includes an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/vercel/flags/blob/main/tests/sveltekit-e2e/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte Project for Production\nDESCRIPTION: Command to create a production-ready build of the Svelte application. The built app can be previewed using npm run preview before deployment.\nSOURCE: https://github.com/vercel/flags/blob/main/tests/sveltekit-e2e/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Linking Vercel Project\nDESCRIPTION: Command to link the local project with the deployed Vercel instance, required for using Flags Explorer.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/shirt-shop/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvercel link\n```\n\n----------------------------------------\n\nTITLE: Pulling Environment Variables\nDESCRIPTION: Command to pull environment variables from Vercel to enable Flags SDK and Explorer functionality.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/shirt-shop/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvercel env pull\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install all required project dependencies using npm.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/shirt-shop/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server locally.\nSOURCE: https://github.com/vercel/flags/blob/main/examples/shirt-shop/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js 14 E2E Tests Locally\nDESCRIPTION: Instructions for setting up and running end-to-end tests for Next.js version 14 in a local development environment. This involves starting the Next.js server in one terminal and running Playwright tests in another.\nSOURCE: https://github.com/vercel/flags/blob/main/tests/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTerminal 1\n\n- `pnpm next-14`\n\nTerminal 2\n\n- `cd tests/next-14`\n- `pnpm playwright test` or `pnpm playwright test --ui`\n```"
  }
]