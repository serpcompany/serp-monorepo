[
  {
    "owner": "akfamily",
    "repo": "akshare",
    "content": "TITLE: Retrieving Stock Data using AKShare in Python\nDESCRIPTION: This example shows how to use AKShare to fetch stock data. It retrieves the real-time quote for the stock with the code '000001' from the Shenzhen Stock Exchange.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstock_zh_a_spot_em_df = ak.stock_zh_a_spot_em(symbol=\"000001\")\nprint(stock_zh_a_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Querying New House Price Index Data in Python with AKShare\nDESCRIPTION: This code retrieves China's new house price index monthly data for specified cities using the macro_china_new_house_price function from AKShare. The example shows how to get data for Beijing and Shanghai, including month-over-month, year-over-year, and base indices for both new and second-hand housing markets.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_new_house_price_df = ak.macro_china_new_house_price(city_first=\"北京\", city_second=\"上海\")\nprint(macro_china_new_house_price_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Forex Spot Data from East Money with AKShare\nDESCRIPTION: This snippet demonstrates how to retrieve real-time foreign exchange market data from East Money using AKShare's forex_spot_em method. It returns a complete dataset of current forex rates including the latest price, change amount, change percentage, opening price, high, low, and previous closing price.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nforex_spot_em_df = ak.forex_spot_em()\nprint(forex_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing US Monthly CPI Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_usa_cpi_monthly function from akshare to fetch monthly US Consumer Price Index data. The API returns historical CPI month-over-month percentage changes from 1970 to present.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cpi_monthly_df = ak.macro_usa_cpi_monthly()\nprint(macro_usa_cpi_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Greek Letter Information from Sina Finance using AKShare in Python\nDESCRIPTION: This function retrieves Greek letter information for a specific option contract from Sina Finance. It requires the option symbol as input and returns various Greek letter values and other option-specific data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_sse_greeks_sina_df = ak.option_sse_greeks_sina(symbol=\"10002273\")\nprint(option_sse_greeks_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Moving Average Crossover Strategy with Backtrader and AKShare\nDESCRIPTION: This code implements a simple moving average crossover strategy using Backtrader framework with AKShare data. It fetches historical adjusted stock data, defines a strategy class with buy/sell logic based on price crossing a 20-day moving average, and performs backtesting with visualization.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/demo.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nimport backtrader as bt  # 升级到最新版\nimport matplotlib.pyplot as plt  # 由于 Backtrader 的问题，此处要求 pip install matplotlib==3.2.2\nimport akshare as ak  # 升级到最新版\nimport pandas as pd\n\nplt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]\nplt.rcParams[\"axes.unicode_minus\"] = False\n\n# 利用 AKShare 获取股票的后复权数据，这里只获取前 7 列\nstock_hfq_df = ak.stock_zh_a_hist(symbol=\"000001\", adjust=\"hfq\").iloc[:, :7]\n# 删除 `股票代码` 列\ndel stock_hfq_df['股票代码']\n# 处理字段命名，以符合 Backtrader 的要求\nstock_hfq_df.columns = [\n    'date',\n    'open',\n    'close',\n    'high',\n    'low',\n    'volume',\n]\n# 把 date 作为日期索引，以符合 Backtrader 的要求\nstock_hfq_df.index = pd.to_datetime(stock_hfq_df['date'])\n\n\nclass MyStrategy(bt.Strategy):\n    \"\"\"\n    主策略程序\n    \"\"\"\n    params = ((\"maperiod\", 20),)  # 全局设定交易策略的参数\n\n    def __init__(self):\n        \"\"\"\n        初始化函数\n        \"\"\"\n        self.data_close = self.datas[0].close  # 指定价格序列\n        # 初始化交易指令、买卖价格和手续费\n        self.order = None\n        self.buy_price = None\n        self.buy_comm = None\n        # 添加移动均线指标\n        self.sma = bt.indicators.SimpleMovingAverage(\n            self.datas[0], period=self.params.maperiod\n        )\n\n    def next(self):\n        \"\"\"\n        执行逻辑\n        \"\"\"\n        if self.order:  # 检查是否有指令等待执行,\n            return\n        # 检查是否持仓\n        if not self.position:  # 没有持仓\n            if self.data_close[0] > self.sma[0]:  # 执行买入条件判断：收盘价格上涨突破20日均线\n                self.order = self.buy(size=100)  # 执行买入\n        else:\n            if self.data_close[0] < self.sma[0]:  # 执行卖出条件判断：收盘价格跌破20日均线\n                self.order = self.sell(size=100)  # 执行卖出\n\n\ncerebro = bt.Cerebro()  # 初始化回测系统\nstart_date = datetime(1991, 4, 3)  # 回测开始时间\nend_date = datetime(2020, 6, 16)  # 回测结束时间\ndata = bt.feeds.PandasData(dataname=stock_hfq_df, fromdate=start_date, todate=end_date)  # 加载数据\ncerebro.adddata(data)  # 将数据传入回测系统\ncerebro.addstrategy(MyStrategy)  # 将交易策略加载到回测系统中\nstart_cash = 1000000\ncerebro.broker.setcash(start_cash)  # 设置初始资本为 100000\ncerebro.broker.setcommission(commission=0.002)  # 设置交易手续费为 0.2%\ncerebro.run()  # 运行回测系统\n\nport_value = cerebro.broker.getvalue()  # 获取回测结束后的总资金\npnl = port_value - start_cash  # 盈亏统计\n\nprint(f\"初始资金: {start_cash}\\n回测期间：{start_date.strftime('%Y%m%d')}:{end_date.strftime('%Y%m%d')}\")\nprint(f\"总资金: {round(port_value, 2)}\")\nprint(f\"净收益: {round(pnl, 2)}\")\n\ncerebro.plot(style='candlestick')  # 画图\n```\n\n----------------------------------------\n\nTITLE: Calculating Yang-Zhang Realized Volatility using AKShare in Python\nDESCRIPTION: Example of using AKShare to fetch stock data and calculate Yang-Zhang realized volatility. The code retrieves 5-minute historical stock data for a Chinese A-share (ticker 000001) and passes it to the volatility_yz_rv function for volatility calculation.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/indicator.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_df = ak.rv_from_stock_zh_a_hist_min_em(\n    symbol=\"000001\",\n    start_date=\"2021-10-20 09:30:00\",\n    end_date=\"2024-11-01 15:00:00\",\n    period=\"5\",\n    adjust=\"\"\n)\nvolatility_yz_rv_df = ak.volatility_yz_rv(data=stock_df)\nprint(volatility_yz_rv_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Fund Information - East Money\nDESCRIPTION: Fetches basic information for all funds from East Money's fund database. Returns fund code, pinyin abbreviation, fund name, fund type and full pinyin name.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_name_em_df = ak.fund_name_em()\nprint(fund_name_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Macroeconomic Data Sample from Wall Street Insights\nDESCRIPTION: This code snippet shows a sample of the returned data from the macro_info_ws function. The data includes columns for time, region, event, importance, current value, expected value, previous value, and links for various economic events scheduled on the specified date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_201\n\nLANGUAGE: text\nCODE:\n```\n                     时间  ...                                                 链接\n0   2024-05-14 01:00:00  ...\n1   2024-05-14 07:50:00  ...  https://wallstreetcn.com/calendar/JP111746/ove...\n2   2024-05-14 07:50:00  ...  https://wallstreetcn.com/calendar/JP111747/ove...\n3   2024-05-14 10:00:00  ...\n4   2024-05-14 12:02:00  ...\n5   2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/UK121576/ove...\n6   2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/UK121563/ove...\n7   2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/UK121574/ove...\n8   2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/UK121573/ove...\n9   2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/UK121578/ove...\n10  2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/UK121577/ove...\n11  2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/DE112128/ove...\n12  2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/DE112139/ove...\n13  2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/DE112152/ove...\n14  2024-05-14 14:00:00  ...  https://wallstreetcn.com/calendar/DE112151/ove...\n15  2024-05-14 17:00:00  ...  https://wallstreetcn.com/calendar/EA152021/ove...\n16  2024-05-14 17:00:00  ...  https://wallstreetcn.com/calendar/DE152230/ove...\n17  2024-05-14 17:00:00  ...  https://wallstreetcn.com/calendar/DE152229/ove...\n18  2024-05-14 18:00:00  ...  https://wallstreetcn.com/calendar/US151153/ove...\n19  2024-05-14 20:30:00  ...  https://wallstreetcn.com/calendar/US111043/ove...\n20  2024-05-14 20:30:00  ...  https://wallstreetcn.com/calendar/US111042/ove...\n21  2024-05-14 20:30:00  ...  https://wallstreetcn.com/calendar/US111049/ove...\n22  2024-05-14 20:30:00  ...  https://wallstreetcn.com/calendar/US111048/ove...\n23  2024-05-14 20:30:00  ...  https://wallstreetcn.com/calendar/CA173202/ove...\n24  2024-05-14 21:15:00  ...\n25  2024-05-14 22:00:00  ...\n26  2024-05-15 00:00:00  ...\n27  2024-05-15 00:00:00  ...\n[28 rows x 8 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Financial Credit Data with AKShare in Python\nDESCRIPTION: This function fetches historical new financial credit data from East Money. It returns a DataFrame with month, current month value, year-on-year growth, month-on-month growth, cumulative value, and cumulative year-on-year growth.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_new_financial_credit_df = ak.macro_china_new_financial_credit()\nprint(macro_china_new_financial_credit_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Regional Bureau of Statistics Data with AKShare\nDESCRIPTION: This code demonstrates how to use the macro_china_nbs_region function to retrieve regional statistical data. Two examples are shown: one fetching GDP data for Hebei province for the last 3 quarters, and another retrieving disposable income data for all regions in 2022.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_nbs_region_df = ak.macro_china_nbs_region(kind=\"分省季度数据\", path=\"国民经济核算 > 地区生产总值\", period=\"last3\", indicator=None, region=\"河北省\")\nprint(macro_china_nbs_region_df)\n\nmacro_china_nbs_region_df = ak.macro_china_nbs_region(kind=\"分省季度数据\", path=\"人民生活 > 居民人均可支配收入\", indicator='居民人均可支配收入_累计值(元)', period=\"2022\")\nprint(macro_china_nbs_region_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Data for All Futures Products\nDESCRIPTION: This comprehensive script retrieves real-time market data for all available futures products in the Chinese markets. It first gets all product symbols using futures_symbol_mark function, then loops through each to collect their data and combines them into a single DataFrame.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nimport pandas as pd\n\nfutures_symbol_mark_df = ak.futures_symbol_mark()\n\nbig_df = pd.DataFrame()\nfor item in futures_symbol_mark_df['symbol']:\n    print(item)\n    futures_zh_realtime_df = ak.futures_zh_realtime(symbol=item)\n    big_df = pd.concat([big_df, futures_zh_realtime_df], ignore_index=True)\n\nprint(big_df)\n```\n\n----------------------------------------\n\nTITLE: Importing AKShare Financial Data Functions in Python\nDESCRIPTION: This code snippet demonstrates how to import and use various financial data functions from the AKShare library. Each line represents a different function for fetching specific financial data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"stock_hold_control_cninfo\"  # 实际控制人持股变动\n\"stock_hold_management_detail_cninfo\"  # 高管持股变动明细\n\"stock_hold_change_cninfo\"  # 巨潮资讯-数据中心-专题统计-股东股本-股本变动\n\"futures_comm_info\"  # 期货手续费\n\"futures_fees_info\"  # 期货交易费用参照表\n\"stock_zh_b_spot\"  # B 股实时行情数据\n\"stock_zh_b_daily\"  # B 股历史行情数据(日频)\n\"stock_zh_b_minute\"  # B 股分时历史行情数据(分钟)\n\"stock_cg_guarantee_cninfo\"  # 公司治理-对外担保\n\"stock_cg_lawsuit_cninfo\"  # 公司治理-公司诉讼\n\"stock_cg_equity_mortgage_cninfo\"  # 公司治理-股权质押\n\"bond_treasure_issue_cninfo\"  # 债券报表-债券发行-国债发行\n\"bond_local_government_issue_cninfo\"  # 债券报表-债券发行-地方债\n\"bond_corporate_issue_cninfo\"  # 债券报表-债券发行-企业债\n\"bond_cov_issue_cninfo\"  # 债券报表-债券发行-可转债发行\n\"bond_cov_stock_issue_cninfo\"  # 债券报表-债券发行-可转债转股\n\"fund_report_stock_cninfo\"  # 基金报表-基金重仓股\n\"stock_notice_report\"  # 公告大全-沪深 A 股公告\n\"fund_report_industry_allocation_cninfo\"  # 基金报表-基金行业配置\n\"fund_report_asset_allocation_cninfo\"  # 基金报表-基金资产配置\n\"fund_scale_open_sina\"  # 基金规模-开放式基金\n\"fund_scale_close_sina\"  # 基金规模-封闭式基金\n\"fund_scale_structured_sina\"  # 基金规模-分级子基金\n\"stock_hsgt_individual_em\"  # 沪深港通持股-具体股票\n\"stock_hsgt_individual_detail_em\"  # 沪深港通持股-具体股票-详情\n\"stock_ipo_benefit_ths\"  # IPO 受益股\n\"stock_xgsr_ths\"  # 新股上市首日\n\"stock_rank_cxg_ths\"  # 创新高\n\"stock_rank_cxd_ths\"  # 创新低\n\"stock_rank_lxsz_ths\"  # 连续上涨\n\"stock_rank_lxxd_ths\"  # 连续下跌\n\"stock_rank_cxfl_ths\"  # 持续放量\n\"stock_rank_cxsl_ths\"  # 持续缩量\n\"stock_rank_xstp_ths\"  # 向上突破\n\"stock_rank_xxtp_ths\"  # 向下突破\n\"stock_rank_ljqs_ths\"  # 量价齐升\n\"stock_rank_ljqd_ths\"  # 量价齐跌\n\"stock_rank_xzjp_ths\"  # 险资举牌\n\"bond_zh_hs_cov_min\"  # 可转债分时数据\n\"bond_zh_hs_cov_pre_min\"  # 可转债分时数据-分时行情-盘前\n\"business_value_artist\"  # 艺人商业价值\n\"online_value_artist\"  # 艺人流量价值\n\"video_tv\"  # 电视剧集\n\"video_variety_show\"  # 综艺节目\n\"fund_cf_em\"  # 基金拆分\n\"fund_fh_rank_em\"  # 基金分红排行\n\"fund_fh_em\"  # 基金分红\n\"fund_scale_change_em\"  # 规模变动\n\"fund_hold_structure_em\"  # 持有人结构\n\"stock_board_industry_cons_em\"  # 行业板块-板块成份\n\"stock_board_industry_hist_em\"  # 行业板块-历史行情\n\"stock_board_industry_hist_min_em\"  # 行业板块-分时历史行情\n\"stock_board_industry_name_em\"  # 行业板块-板块名称\n\"stock_repurchase_em\"  # 股票回购数据\n\"futures_hq_subscribe_exchange_symbol\"  # 期货品种字典\n\"spot_hist_sge\"  # 上海黄金交易所-历史行情走势\n\"spot_quotations_sge\"  # 上海黄金交易所-实时行情走势\n\"spot_golden_benchmark_sge\"  # 上海金基准价\n\"spot_silver_benchmark_sge\"  # 上海银基准价\n\"stock_individual_info_em\"  # 个股信息查询-东财\n\"stock_individual_basic_info_xq\"  # 个股信息查询-雪球\n\"stock_individual_basic_info_us_xq\"  # 个股信息查询-雪球-美股\n\"stock_individual_basic_info_hk_xq\"  # 个股信息查询-雪球-港股\n\"index_sugar_msweet\"  # 中国食糖指数\n\"index_inner_quote_sugar_msweet\"  # 配额内进口糖估算指数\n\"index_outer_quote_sugar_msweet\"  # 配额外进口糖估算指数\n\"stock_gdfx_free_holding_analyse_em\"  # 股东持股分析-十大流通股东\n\"stock_gdfx_holding_analyse_em\"  # 股东持股分析-十大股东\n\"stock_gdfx_free_top_10_em\"  # 东方财富网-个股-十大流通股东\n\"stock_gdfx_top_10_em\"  # 东方财富网-个股-十大股东\n\"stock_gdfx_free_holding_detail_em\"  # 股东持股明细-十大流通股东\n\"stock_gdfx_holding_detail_em\"  # 股东持股明细-十大股东\n\"stock_gdfx_free_holding_change_em\"  # 股东持股变动统计-十大流通股东\n\"stock_gdfx_holding_change_em\"  # 股东持股变动统计-十大股东\n\"stock_gdfx_free_holding_statistics_em\"  # 股东持股统计-十大流通股东\n\"stock_gdfx_holding_statistics_em\"  # 股东持股统计-十大股东\n\"stock_gdfx_free_holding_teamwork_em\"  # 股东协同-十大流通股东\n\"stock_gdfx_holding_teamwork_em\"  # 股东协同-十大股东\n\"option_lhb_em\"  # 期权龙虎榜\n\"option_value_analysis_em\"  # 期权价值分析\n\"option_risk_analysis_em\"  # 期权风险分析\n\"option_premium_analysis_em\"  # 期权折溢价分析\n\"index_pmi_com_cx\"  # 财新数据-指数报告-财新中国 PMI-综合 PMI\n\"index_pmi_man_cx\"  # 财新数据-指数报告-财新中国 PMI-制造业 PMI\n\"index_pmi_ser_cx\"  # 财新数据-指数报告-财新中国 PMI-服务业 PMI\n\"index_dei_cx\"  # 财新数据-指数报告-数字经济指数\n\"index_ii_cx\"  # 财新数据-指数报告-产业指数\n\"index_si_cx\"  # 财新数据-指数报告-溢出指数\n\"index_fi_cx\"  # 财新数据-指数报告-融合指数\n\"index_bi_cx\"  # 财新数据-指数报告-基础指数\n\"index_nei_cx\"  # 财新数据-指数报告-中国新经济指数\n\"index_li_cx\"  # 财新数据-指数报告-劳动力投入指数\n\"index_ci_cx\"  # 财新数据-指数报告-资本投入指数\n\"index_ti_cx\"  # 财新数据-指数报告-科技投入指数\n\"index_neaw_cx\"  # 财新数据-指数报告-新经济行业入职平均工资水平\n\"index_awpr_cx\"  # 财新数据-指数报告-新经济入职工资溢价水平\n\"index_cci_cx\"  # 财新数据-指数报告-大宗商品指数\n\"index_qli_cx\"  # 财新数据-指数报告-高质量因子\n\"index_ai_cx\"  # 财新数据-指数报告-AI策略指数\n\"index_bei_cx\"  # 财新数据-指数报告-基石经济指数\n\"index_neei_cx\"  # 财新数据-指数报告-新动能指数\n\"index_zh_a_hist\"  # 中国股票指数历史数据\n\"index_zh_a_hist_min_em\"  # 中国股票指数-指数分时数据\n\"stock_hot_rank_em\"  # 东方财富-个股人气榜-人气榜\n\"stock_hot_up_em\"  # 东方财富-个股人气榜-飙升榜\n\"stock_hot_rank_detail_em\"  # 东方财富-个股人气榜-历史趋势及粉丝特征\n\"stock_hot_rank_detail_realtime_em\"  # 东方财富-个股人气榜-实时变动\n\"stock_hot_keyword_em\"  # 东方财富-个股人气榜-关键词\n\"stock_hot_rank_latest_em\"  # 东方财富-个股人气榜-最新排名\n\"stock_hot_rank_relate_em\"  # 东方财富-个股人气榜-相关股票\n\"stock_hk_hot_rank_em\"  # 东方财富-个股人气榜-人气榜-港股\n\"stock_hk_hot_rank_detail_em\"  # 东方财富-个股人气榜-历史趋势-港股\n\"stock_hk_hot_rank_detail_realtime_em\"  # 东方财富-个股人气榜-实时变动-港股\n\"stock_hk_hot_rank_latest_em\"  # 东方财富-个股人气榜-最新排名-港股\n\"stock_lhb_detail_em\"  # 东方财富网-数据中心-龙虎榜单-龙虎榜详情\n\"stock_lhb_stock_statistic_em\"  # 东方财富网-数据中心-龙虎榜单-个股上榜统计\n\"stock_lhb_stock_detail_em\"  # 东方财富网-数据中心-龙虎榜单-个股龙虎榜详情\n\"stock_lhb_jgmmtj_em\"  # 东方财富网-数据中心-龙虎榜单-机构买卖每日统计\n\"stock_lhb_hyyyb_em\"  # 东方财富网-数据中心-龙虎榜单-每日活跃营业部\n\"stock_lhb_yyb_detail_em\"  # 东方财富网-数据中心-龙虎榜单-营业部详情\n\"stock_lhb_yybph_em\"  # 东方财富网-数据中心-龙虎榜单-营业部排行\n\"stock_lhb_jgstatistic_em\"  # 东方财富网-数据中心-龙虎榜单-机构席位追踪\n\"stock_lhb_traderstatistic_em\"  # 东方财富网-数据中心-龙虎榜单-营业部统计\n\"fund_portfolio_hold_em\"  # 天天基金网-基金档案-投资组合-基金持仓\n\"fund_portfolio_bond_hold_em\"  # 天天基金网-基金档案-投资组合-债券持仓\n\"fund_portfolio_change_em\"  # 天天基金网-基金档案-投资组合-重大变动\n\"fund_portfolio_industry_allocation_em\"  # 天天基金网-基金档案-投资组合-行业配置\n\"macro_china_insurance_income\"  # 原保险保费收入\n\"macro_china_mobile_number\"  # 手机出货量\n\"macro_china_vegetable_basket\"  # 菜篮子产品批发价格指数\n\"macro_china_agricultural_product\"  # 农产品批发价格总指数\n\"macro_china_agricultural_index\"  # 农副指数\n\"macro_china_energy_index\"  # 能源指数\n\"macro_china_commodity_price_index\"  # 大宗商品价格\n\"macro_global_sox_index\"  # 费城半导体指数\n\"macro_china_yw_electronic_index\"  # 义乌小商品指数-电子元器件\n\"macro_china_construction_index\"  # 建材指数\n\"macro_china_construction_price_index\"  # 建材价格指数\n\"macro_china_lpi_index\"  # 物流景气指数\n\"macro_china_bdti_index\"  # 原油运输指数\n\"macro_china_bsi_index\"  # 超灵便型船运价指数\n\"bond_zh_cov_value_analysis\"  # 可转债溢价率分析\n\"bond_zh_cov_value_analysis\"  # 可转债价值分析\n\"stock_hot_follow_xq\"  # 雪球-沪深股市-热度排行榜-关注排行榜\n\"stock_hot_tweet_xq\"  # 雪球-沪深股市-热度排行榜-讨论排行榜\n\"stock_hot_deal_xq\"  # 雪球-沪深股市-热度排行榜-分享交易排行榜\n\"stock_inner_trade_xq\"  # 内部交易\n\"stock_balance_sheet_by_report_em\"  # 东方财富-股票-财务分析-资产负债表-按报告期\n\"stock_balance_sheet_by_yearly_em\"  # 东方财富-股票-财务分析-资产负债表-按年度\n\"stock_profit_sheet_by_report_em\"  # 东方财富-股票-财务分析-利润表-报告期\n\"stock_profit_sheet_by_yearly_em\"  # 东方财富-股票-财务分析-利润表-按年度\n\"stock_profit_sheet_by_quarterly_em\"  # 东方财富-股票-财务分析-利润表-按单季度\n\"stock_cash_flow_sheet_by_report_em\"  # 东方财富-股票-财务分析-现金流量表-按报告期\n\"stock_cash_flow_sheet_by_yearly_em\"  # 东方财富-股票-财务分析-现金流量表-按年度\n\"stock_cash_flow_sheet_by_quarterly_em\"  # 东方财富-股票-财务分析-现金流量表-按单季度\n\"stock_balance_sheet_by_report_delisted_em\"  # 东方财富-股票-财务分析-资产负债表-已退市股票-按报告期\n\"stock_profit_sheet_by_report_delisted_em\"  # 东方财富-股票-财务分析-利润表-已退市股票-按报告期\n\"stock_cash_flow_sheet_by_report_delisted_em\"  # 东方财富-股票-财务分析-现金流量表-已退市股票-按报告期\n\"news_economic_baidu\"  # 宏观-全球事件\n\"news_trade_notify_suspend_baidu\"  # 停复牌\n\"news_report_time_baidu\"  # 财报发行\n\"option_risk_indicator_sse\"  # 上海证券交易所-产品-股票期权-期权风险指标\n\"currency_boc_safe\"  # 人民币汇率中间价\n\"stock_zygc_ym\"  # 主营构成-益盟\n\"stock_zygc_em\"  # 主营构成-东财\n\"stock_mda_ym\"  # 管理层讨论与分析\n\"stock_industry_category_cninfo\"  # 巨潮资讯-行业分类数据\n\"stock_industry_change_cninfo\"  # 巨潮资讯-上市公司行业归属的变动情况\n\"stock_share_change_cninfo\"  # 巨潮资讯-公司股本变动\n\"futures_news_shmet\"  # 上海金属网-快讯\n\"news_trade_notify_dividend_baidu\"  # 分红配股\n\"bond_new_composite_index_cbond\"  # 中债-新综合指数\n\"bond_composite_index_cbond\"  # 中债-综合指数\n\"stock_sgt_settlement_exchange_rate_szse\"  # 深港通-港股通业务信息-结算汇率\n\"stock_sgt_reference_exchange_rate_szse\"  # 深港通-港股通业务信息-参考汇率\n\"stock_sgt_reference_exchange_rate_sse\"  # 沪港通-港股通信息披露-参考汇率\n\"stock_sgt_settlement_exchange_rate_sse\"  # 沪港通-港股通信息披露-结算汇兑\n\"stock_allotment_cninfo\"  # 配股实施方案-巨潮资讯\n\"stock_profile_cninfo\"  # 巨潮资讯-个股-公司概况\n\"stock_ipo_summary_cninfo\"  # 巨潮资讯-个股-上市相关\n\"stock_hk_valuation_baidu\"  # 百度股市通-港股-财务报表-估值数据\n\"stock_zh_valuation_baidu\"  # 百度股市通-A 股-财务报表-估值数据\n\"stock_zh_vote_baidu\"  # 百度股市通- A 股或指数-股评-投票\n\"stock_hot_search_baidu\"  # 百度股市通-热搜股票\n\"stock_buffett_index_lg\"  # 乐估乐股-底部研究-巴菲特指标\n\"fx_quote_baidu\"  # 百度股市通-外汇-行情榜单\n\"index_option_50etf_qvix\"  # 50ETF 期权波动率指数\n\"index_option_50etf_min_qvix\"  # 50ETF 期权波动率指数 QVIX-分时\n\"index_option_300etf_qvix\"  # 300 ETF 期权波动率指数\n\"index_option_300etf_min_qvix\"  # 300 ETF 期权波动率指数 QVIX-分时\n\"index_option_500etf_qvix\"  # 500 ETF 期权波动率指数\n\"index_option_500etf_min_qvix\"  # 500 ETF 期权波动率指数 QVIX-分时\n\"index_option_cyb_qvix\"  # 创业板 期权波动率指数\n\"index_option_cyb_min_qvix\"  # 创业板 期权波动率指数 QVIX-分时\n\"index_option_kcb_qvix\"  # 科创板 期权波动率指数\n\"index_option_kcb_min_qvix\"  # 科创板 期权波动率指数 QVIX-分时\n\"index_option_100etf_qvix\"  # 深证100ETF 期权波动率指数\n\"index_option_100etf_min_qvix\"  # 深证100ETF 期权波动率指数 QVIX-分时\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Unemployment Rate with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_unemployment_rate function from the akshare library to retrieve historical US unemployment rate data. Returns data from 1970 to present with actual values, forecasts, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_unemployment_rate_df = ak.macro_usa_unemployment_rate()\nprint(macro_usa_unemployment_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching All CNI Indices Information with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the index_all_cni function from AKShare to retrieve information about all CNI indices for the most recent trading day. It returns a DataFrame with various details about each index, including code, name, number of samples, closing price, and more.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_all_cni_df = ak.index_all_cni()\nprint(index_all_cni_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Real-time Hong Kong Stock Indices Data from Sina\nDESCRIPTION: This code retrieves real-time data for all Hong Kong stock indices from Sina Finance. It returns current prices, changes, and other market data for multiple Hong Kong indices in a single dataframe without requiring any input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_hk_index_spot_sina_df = ak.stock_hk_index_spot_sina()\nprint(stock_hk_index_spot_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Option Data from Sina Finance using AKShare in Python\nDESCRIPTION: This function retrieves real-time data for a specific option contract from Sina Finance. It requires the option symbol as input and returns various fields including bid/ask prices, volumes, and other market data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_sse_spot_price_sina_df = ak.option_sse_spot_price_sina(symbol=\"10002273\")\nprint(option_sse_spot_price_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching China CPI Monthly Data with AKShare\nDESCRIPTION: This code demonstrates how to access monthly Consumer Price Index (CPI) data for China using the AKShare library. The data covers from February 1996 to present and includes actual values, forecasted values, and previous values, all expressed as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_cpi_monthly_df = ak.macro_china_cpi_monthly()\nprint(macro_china_cpi_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching New RMB Loan Data with AKShare in Python\nDESCRIPTION: This snippet demonstrates how to use the macro_rmb_loan function from AKShare to retrieve data on new RMB loans in China. It returns historical data including total loan amounts, year-on-year changes, and month-on-month changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_87\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_rmb_loan_df = ak.macro_rmb_loan()\nprint(macro_rmb_loan_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving M2 Money Supply Year-over-Year Rates in Python with AKShare\nDESCRIPTION: This code fetches China's M2 money supply year-over-year data using the macro_china_m2_yearly function from the AKShare library. The data spans from February 1998 to present and includes current values, forecasted values, and previous values, all measured in percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_m2_yearly_df = ak.macro_china_m2_yearly()\nprint(macro_china_m2_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Existing Home Sales Data with AKShare\nDESCRIPTION: This snippet demonstrates how to use the macro_usa_exist_home_sales function from AKShare to fetch historical US Existing Home Sales data. The function returns a DataFrame with columns for date, current value, forecast, and previous value. Values are in units of 10,000 households.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_131\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_exist_home_sales_df = ak.macro_usa_exist_home_sales()\nprint(macro_usa_exist_home_sales_df)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stock Trading Strategy with PyBroker and AKShare\nDESCRIPTION: This code implements a basic stock trading strategy using PyBroker framework and AKShare data. It defines parameters for stock code, position size, and stop-loss/profit percentages, then executes a buy-and-hold strategy with stop-profit conditions for backtesting.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/demo.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# 导入所需的库和模块\nimport pybroker as pb\nfrom pybroker import Strategy, ExecContext\nfrom pybroker.ext.data import AKShare\n\n# 定义全局参数 \"stock_code\"（股票代码）、\"percent\"（持仓百分比）和 \"stop_profit_pct\"（止盈百分比）\npb.param(name='stock_code', value='600000')\npb.param(name='percent', value=1)\npb.param(name='stop_loss_pct', value=10)\npb.param(name='stop_profit_pct', value=10)\n\n# 初始化 AKShare 数据源\nakshare = AKShare()\n\n# 使用 AKShare 数据源查询特定股票（由 \"stock_code\" 参数指定）在指定日期范围内的数据\ndf = akshare.query(symbols=[pb.param(name='stock_code')], start_date='20200131', end_date='20230228')\n\n\n# 定义交易策略：如果当前没有持有该股票，则买入股票，并设置止盈点位\ndef buy_with_stop_loss(ctx: ExecContext):\n    pos = ctx.long_pos()\n    if not pos:\n        # 计算目标股票数量，根据 \"percent\" 参数确定应购买的股票数量\n        ctx.buy_shares = ctx.calc_target_shares(pb.param(name='percent'))\n        ctx.hold_bars = 100\n    else:\n        ctx.sell_shares = pos.shares\n        # 设置止盈点位，根据 \"stop_profit_pct\" 参数确定止盈点位\n        ctx.stop_profit_pct = pb.param(name='stop_profit_pct')\n\n\n# 创建策略配置，初始资金为 500000\nmy_config = pb.StrategyConfig(initial_cash=500000)\n# 使用配置、数据源、起始日期、结束日期，以及刚才定义的交易策略创建策略对象\nstrategy = Strategy(akshare, start_date='20200131', end_date='20230228', config=my_config)\n# 添加执行策略，设置股票代码和要执行的函数\nstrategy.add_execution(fn=buy_with_stop_loss, symbols=[pb.param(name='stock_code')])\n# 执行回测，并打印出回测结果的度量值（四舍五入到小数点后四位）\nresult = strategy.backtest()\nprint(result.metrics_df.round(4))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caixin Manufacturing PMI Data with AKShare in Python\nDESCRIPTION: Function to obtain Caixin China Manufacturing PMI data. The function requires no parameters and returns a DataFrame with dates, PMI values, and change values for the manufacturing sector.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_pmi_man_cx_df = ak.index_pmi_man_cx()\nprint(index_pmi_man_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shanghai Interbank Offered Rate (SHIBOR) Data with AKShare\nDESCRIPTION: Gets SHIBOR rates and changes across multiple tenors via AKShare. Returns daily fixing rates and basis point changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_shibor_all_df = ak.macro_china_shibor_all()\nprint(macro_china_shibor_all_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Daily SZ50 Index Option Historical Data with AKShare\nDESCRIPTION: This code retrieves daily historical data for a specific SZ50 index option contract from CFFEX. It returns OHLC prices, trading volume and other metrics for the specified contract symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_sz50_daily_sina_df = ak.option_cffex_sz50_daily_sina(symbol=\"ho2303P2350\")\nprint(option_cffex_sz50_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LME Inventory Report Data using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_euro_lme_stock function from AKShare to retrieve the London Metal Exchange (LME) inventory report data. The function returns historical data from 2014-07-02 to the present, including stock levels and registered/cancelled warrants for various metals.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_194\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_lme_stock_df = ak.macro_euro_lme_stock()\nprint(macro_euro_lme_stock_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Chinese Official Non-Manufacturing PMI with AKShare\nDESCRIPTION: This snippet demonstrates how to retrieve China's official non-manufacturing PMI data using the AKShare library. Returns historical data with commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_non_man_pmi_df = ak.macro_china_non_man_pmi()\nprint(macro_china_non_man_pmi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China Import Data (USD) with AKShare\nDESCRIPTION: This snippet shows how to access China's import data calculated in USD using the AKShare library. The data covers from February 1996 to present and includes actual year-on-year percentage change, forecasted values, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_imports_yoy_df = ak.macro_china_imports_yoy()\nprint(macro_china_imports_yoy_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US API Crude Oil Stock Data with akshare\nDESCRIPTION: This code fetches US API crude oil stock report data using the akshare package. The function returns historical data from March 2012 to present, including current values, forecasted values, and previous values measured in 10,000 barrels.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_118\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_api_crude_stock_df = ak.macro_usa_api_crude_stock()\nprint(macro_usa_api_crude_stock_df)\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare with pip\nDESCRIPTION: Command for installing or upgrading AKShare using pip. This is the standard installation method for any Python environment.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare --upgrade\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Durable Goods Orders Data with akshare\nDESCRIPTION: This code retrieves US durable goods orders monthly rate data using the akshare package. The function returns historical data from February 2008 to present, with values expressed as percentages, including current, forecasted, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_122\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_durable_goods_orders_df = ak.macro_usa_durable_goods_orders()\nprint(macro_usa_durable_goods_orders_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time CSI 300 Index Option Quotes from CFFEX via Sina Finance\nDESCRIPTION: This code demonstrates how to retrieve real-time quotes for a specific CSI 300 Index Option contract from CFFEX via Sina Finance. The function requires a symbol parameter (contract code) and returns a DataFrame with bid/ask prices, volumes, and other market data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_hs300_spot_sina_df = ak.option_cffex_hs300_spot_sina(symbol=\"io2104\")\nprint(option_cffex_hs300_spot_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Market Indices Real-time Data\nDESCRIPTION: This code demonstrates how to fetch real-time data for global market indices using the index_global_spot_em function from AkShare. The function returns comprehensive information about various global indices including Asian, European, and American markets.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_global_spot_em_df = ak.index_global_spot_em()\nprint(index_global_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving U.S. Initial Jobless Claims with AKShare\nDESCRIPTION: Fetches U.S. Initial Jobless Claims report data from Jin10, covering the period from January 1970 to present. Returns a DataFrame with current values, forecast values, and previous values measured in 10,000 people.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_140\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_initial_jobless_df = ak.macro_usa_initial_jobless()\nprint(macro_usa_initial_jobless_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Daily Futures Data from Sina with AKShare (Continuous Contract)\nDESCRIPTION: Retrieves daily futures trading data from Sina Finance for continuous contracts. This function accepts a futures symbol parameter (continuous contracts use the format 'symbol+0', e.g., 'RB0'). Returns a DataFrame with complete daily trading information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_zh_daily_sina_df = ak.futures_zh_daily_sina(symbol=\"RB0\")\nprint(futures_zh_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Stock Index Data from Sina Finance with AKShare\nDESCRIPTION: This snippet shows how to use the stock_zh_index_spot_sina function to fetch real-time Chinese stock index data from Sina Finance. No input parameters are needed as it returns all available indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_spot_sina_df = ak.stock_zh_index_spot_sina()\nprint(stock_zh_index_spot_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-Time Options Quotes with AKShare\nDESCRIPTION: This function retrieves real-time quotes for all option contracts from East Money. It returns a DataFrame with comprehensive information including code, name, latest price, change, volume, open interest, and more for each contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_current_em_df = ak.option_current_em()\nprint(option_current_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Bond Market Spot Quotes with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the bond_spot_quote function from AKShare to retrieve market-making quotes for bonds in the spot market from the China Foreign Exchange Trade System. The function requires no parameters and returns all available data in a single call.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_spot_quote_df = ak.bond_spot_quote()\nprint(bond_spot_quote_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving University of Michigan Consumer Sentiment Index with AKShare\nDESCRIPTION: Fetches University of Michigan Consumer Sentiment Index preliminary values from Jin10, covering the period from March 1970 to present. Returns a DataFrame with current values, forecast values, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_michigan_consumer_sentiment_df = ak.macro_usa_michigan_consumer_sentiment()\nprint(macro_usa_michigan_consumer_sentiment_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching RMB Exchange Middle Rates from SAFE\nDESCRIPTION: This snippet demonstrates how to obtain RMB exchange middle rate data from the State Administration of Foreign Exchange (SAFE) using AKShare. It returns comprehensive historical middle exchange rates for RMB against multiple currencies without requiring any input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_boc_safe_df = ak.currency_boc_safe()\nprint(currency_boc_safe_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Roll Yield Data by Date Range with AKShare\nDESCRIPTION: Retrieves roll yield data for a specific commodity across a date range. The roll yield represents the price difference between main and sub-main contracts, indicating market expectations for near and far deliveries.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nak.get_roll_yield_bar(type_method=\"date\", var=\"RB\", start_day=\"20191009\", end_day=\"20191030\")  # 需要收盘收运行\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Company Scale Data from East Money in Python\nDESCRIPTION: This function fetches data about fund companies' assets under management from East Money. The output includes company names, establishment dates, total AUM, number of funds, number of managers, and update dates. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_aum_em_df = ak.fund_aum_em()\nprint(fund_aum_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Repo Rate Data with AKShare\nDESCRIPTION: This code demonstrates how to use the repo_rate_hist function from AKShare to fetch historical repo rate data. The function requires start and end dates within a one-year period and returns a dataframe with multiple rate metrics including FR001, FR007, FR014, and FDR variants.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nrepo_rate_hist_df = ak.repo_rate_hist(start_date=\"20231001\", end_date=\"20240101\")\nprint(repo_rate_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Housing Starts Data using AKShare\nDESCRIPTION: This code example demonstrates how to use the macro_usa_house_starts function from AKShare to fetch historical US Housing Starts data. The function returns a DataFrame with columns for date, current value, forecast, and previous value. Values are in units of 10,000 households.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_128\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_house_starts_df = ak.macro_usa_house_starts()\nprint(macro_usa_house_starts_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Gold Price Quotations from Shanghai Gold Exchange\nDESCRIPTION: This snippet shows how to get real-time price quotations for a specified gold product from the Shanghai Gold Exchange using the spot_quotations_sge function. The symbol parameter is required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_quotations_sge_df = ak.spot_quotations_sge(symbol=\"Au99.99\")\nprint(spot_quotations_sge_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Minute-Level A-Share Index Data with AKShare\nDESCRIPTION: This code retrieves minute-level intraday data for Chinese A-share indices using the index_zh_a_hist_min_em function. It returns time series data with timestamp, price, and volume information at the specified interval for a given time range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_zh_a_hist_min_em_df = ak.index_zh_a_hist_min_em(symbol=\"000001\", period=\"1\", start_date=\"2023-12-11 09:30:00\", end_date=\"2023-12-11 19:00:00\")\nprint(index_zh_a_hist_min_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Minute-level Option Data from Sina Finance using AKShare in Python\nDESCRIPTION: This function retrieves minute-level data for a specific option contract from Sina Finance. It requires the option symbol as input and returns time-series data including price, volume, and open interest.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_sse_minute_sina_df = ak.option_sse_minute_sina(symbol=\"10003720\")\nprint(option_sse_minute_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basis Data with AKShare API in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve basis data for a specific commodity variety and date using AKShare's Pro API. The basis represents the difference between spot and futures prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbasis_df = pro.basis(variety=\"RB\", date=\"2018-08-08\")\nprint(basis_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Retail Sales Monthly Rate with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_retail_sales function from the akshare library to retrieve historical US retail sales monthly rate data. Returns data from 1992 to present with actual values, forecasts, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_retail_sales_df = ak.macro_usa_retail_sales()\nprint(macro_usa_retail_sales_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Foreign Direct Investment Data with AKShare\nDESCRIPTION: Function to obtain FDI statistics from East Money including monthly and cumulative values with year-over-year changes. Data available from 2008 to present.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_fdi_df = ak.macro_china_fdi()\nprint(macro_china_fdi_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching US ADP Employment Data with AkShare\nDESCRIPTION: Python code to retrieve historical US ADP employment data using the macro_usa_adp_employment function. Returns data including current value, forecast and previous values in units of 10,000 people.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_adp_employment_df = ak.macro_usa_adp_employment()\nprint(macro_usa_adp_employment_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Stock Historical Data\nDESCRIPTION: Example showing how to fetch historical stock data for a Chinese A-share stock using AKShare.\nSOURCE: https://github.com/akfamily/akshare/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_a_hist_df = ak.stock_zh_a_hist(symbol=\"000001\", period=\"daily\", start_date=\"20170301\", end_date='20231022', adjust=\"\")\nprint(stock_zh_a_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Shanghai and Shenzhen Bond Data with AKShare\nDESCRIPTION: Uses the bond_zh_hs_daily function to retrieve historical price data for a specific Shanghai or Shenzhen bond. The function returns daily frequency data including open, high, low, close prices and trading volume.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_daily_df = ak.bond_zh_hs_daily(symbol=\"sh010107\")\nprint(bond_zh_hs_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Querying JA Fund Ratings - Python Implementation\nDESCRIPTION: Retrieves JA fund rating data from East Money for a specified date. Returns a DataFrame with fund codes, names, managers, companies, ratings and performance metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_rating_ja_df = ak.fund_rating_ja(date='20200930')\nprint(fund_rating_ja_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China GDP Yearly Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch historical yearly GDP data for China using the AKShare library. The data comes from Jin10 data center and includes actual values, forecasted values, and previous values, with a data range from January 2011 to present.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_gdp_yearly_df = ak.macro_china_gdp_yearly()\nprint(macro_china_gdp_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving SPDR Gold Trust ETF Holdings Data with AKShare\nDESCRIPTION: This function retrieves holdings data for the SPDR Gold Trust ETF, the world's largest gold ETF. It returns historical data including the date, total inventory, changes in holdings, and total value. Data ranges from 2004-11-19 to present. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_190\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_cons_gold_df = ak.macro_cons_gold()\nprint(macro_cons_gold_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Currency Exchange Rates with AKShare\nDESCRIPTION: Retrieves the most recent currency exchange rates using the currency_latest function. Requires an API key from currencyscoop.com, allows filtering by specific currency symbols, and returns rates relative to a specified base currency.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_latest_df = ak.currency_latest(base=\"USD\", symbols=\"\", api_key=\"此处输入 API\")\nprint(currency_latest_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Forex Data from East Money with AKShare\nDESCRIPTION: This snippet shows how to fetch historical foreign exchange data for a specific currency pair using AKShare's forex_hist_em method. It requires a symbol parameter (e.g., \"USDCNH\" for USD to offshore RMB) and returns historical pricing data for that specific pair.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nforex_hist_em_df = ak.forex_hist_em(symbol=\"USDCNH\")\nprint(forex_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time ZZ1000 Index Option Data with AKShare\nDESCRIPTION: This code demonstrates how to fetch real-time quotes for CFFEX ZZ1000 index options using AKShare. It retrieves data including bid/ask prices, volumes, open interest, and option identifiers for a specified contract symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_zz1000_spot_sina_df = ak.option_cffex_zz1000_spot_sina(symbol=\"mo2208\")\nprint(option_cffex_zz1000_spot_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving U.S. EIA Crude Oil Inventory Reports with AKShare\nDESCRIPTION: Accesses U.S. EIA Crude Oil Inventory report data from Jin10, covering the period from August 1995 to present. Returns a DataFrame with current values, forecast values, and previous values measured in 10,000 barrels.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_139\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_eia_crude_rate_df = ak.macro_usa_eia_crude_rate()\nprint(macro_usa_eia_crude_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Hong Kong Stock Index Data from Sina\nDESCRIPTION: This code retrieves historical daily data for a specified Hong Kong stock index from Sina Finance. It returns a time series with open, high, low, close prices and trading volume for the complete available history of the specified index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_hk_index_daily_sina_df = ak.stock_hk_index_daily_sina(symbol=\"CES100\")\nprint(stock_hk_index_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Markit Manufacturing PMI Data with akshare\nDESCRIPTION: This code retrieves US Markit Manufacturing PMI initial report data using the akshare package. The function returns historical data from June 2012 to present, including current, forecasted, and previous PMI values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_119\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_pmi_df = ak.macro_usa_pmi()\nprint(macro_usa_pmi_df)\n```\n\n----------------------------------------\n\nTITLE: Continuous Real-time International Futures Data Streaming via AKShare\nDESCRIPTION: This snippet demonstrates how to create a continuous data feed of real-time international futures quotes using AKShare. It retrieves the subscription list and then continuously fetches the latest data with a 3-second refresh interval.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport akshare as ak\n\nprint(\"开始接收实时行情, 每 3 秒刷新一次\")\nsubscribe_list = ak.futures_foreign_commodity_subscribe_exchange_symbol()  # 其中 subscribe_list 为列表\nwhile True:\n    time.sleep(3)\n    futures_foreign_commodity_realtime_df = ak.futures_foreign_commodity_realtime(symbol=subscribe_list)\n    print(futures_foreign_commodity_realtime_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CSI 1000 Index Option Contracts List from CFFEX via Sina Finance\nDESCRIPTION: This code demonstrates how to retrieve the list of all CSI 1000 Index Option contracts from CFFEX using Sina Finance data. The function returns a dictionary with the contract codes, with the first contract being the main contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_zz1000_list_sina_df = ak.option_cffex_zz1000_list_sina()\nprint(option_cffex_zz1000_list_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund AUM Trend Data from East Money in Python\nDESCRIPTION: This function retrieves the historical trend of total assets under management for all funds in the market from East Money. It returns a DataFrame with dates and corresponding AUM values. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_aum_trend_em_df = ak.fund_aum_trend_em()\nprint(fund_aum_trend_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Fed Labor Market Conditions Index with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_lmci function from the akshare library to retrieve historical US Federal Reserve Labor Market Conditions Index (LMCI) data. Returns data from 2014 to present with actual values, forecasts, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_lmci_df = ak.macro_usa_lmci()\nprint(macro_usa_lmci_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese Trade Balance Data in USD using AKShare\nDESCRIPTION: This snippet demonstrates how to retrieve China's trade balance data in USD (billions) using the AKShare library. It returns a DataFrame containing commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_trade_balance_df = ak.macro_china_trade_balance()\nprint(macro_china_trade_balance_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching ETF Historical Data from Sina Finance using AKShare\nDESCRIPTION: This function retrieves historical price data for a specified ETF fund from Sina Finance. It returns a DataFrame with date, open, high, low, close prices and trading volume.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_hist_sina_df = ak.fund_etf_hist_sina(symbol=\"sh510050\")\nprint(fund_etf_hist_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Open-End Fund Scale Data - Python Implementation\nDESCRIPTION: Retrieves scale data for open-end funds from Sina Finance based on fund type. Returns fund details including codes, names, NAV and fund size.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_scale_open_sina_df = ak.fund_scale_open_sina(symbol='股票型基金')\nprint(fund_scale_open_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stock Trading Calendar Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the tool_trade_date_hist_sina function from AKShare to fetch historical stock trading calendar data from Sina Finance. The function returns a DataFrame containing trading dates from 1990-12-19 to 2024-12-31.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/tool/tool.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\ntool_trade_date_hist_sina_df = ak.tool_trade_date_hist_sina()\nprint(tool_trade_date_hist_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Fund Dividend Information from East Money with AKShare in Python\nDESCRIPTION: This example demonstrates using the fund_fh_em function from AKShare to retrieve fund dividend information from East Money. It returns historical dividend data for all funds.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfund_fh_em_df = ak.fund_fh_em()\nprint(fund_fh_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Index Historical Data from East Money with AKShare\nDESCRIPTION: This snippet demonstrates how to fetch historical data for a global index from East Money using the index_global_hist_em function. It requires the index symbol as input (e.g., '美元指数') and returns a DataFrame with historical prices and trading data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_global_hist_em_df = ak.index_global_hist_em(symbol=\"美元指数\")\nprint(index_global_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Minute-level Financial Option Data from Sina Finance using AKShare in Python\nDESCRIPTION: This function retrieves minute-level data for financial options from Sina Finance. It requires the option symbol as input and returns time-series data including price, average price, and volume.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_finance_minute_sina_df = ak.option_finance_minute_sina(symbol=\"10002415\")\nprint(option_finance_minute_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Trading Positions from Sina Finance using AKShare\nDESCRIPTION: This snippet shows how to fetch futures trading positions data from Sina Finance using AKShare. It retrieves data for a specific symbol, contract, and date, displaying information about trading volume and changes for different members.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_hold_pos_sina_df = ak.futures_hold_pos_sina(symbol=\"成交量\", contract=\"OI2501\", date=\"20241016\")\nprint(futures_hold_pos_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Hong Kong Index Data with AkShare\nDESCRIPTION: This code shows how to fetch historical data for a specific Hong Kong stock index using the stock_hk_index_daily_em function. It requires a symbol parameter (e.g., 'HSTECF2L') and returns date-indexed price data for the specified index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_daily_em_df = ak.stock_hk_index_daily_em(symbol=\"HSTECF2L\")\nprint(stock_zh_index_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Minute-Level Futures Data from Sina with AKShare\nDESCRIPTION: Retrieves minute-level futures trading data from Sina Finance. This function accepts a futures symbol and time period parameter to get specific time interval data. Returns a DataFrame with datetime, price, volume and position holding information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_zh_minute_sina_df = ak.futures_zh_minute_sina(symbol=\"RB0\", period=\"1\")\nprint(futures_zh_minute_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical A-Share Index Data with AKShare\nDESCRIPTION: This code retrieves historical data for Chinese A-share indices using the index_zh_a_hist function. It returns daily price data including open, close, high, low prices and trading volume for the specified index between the given date range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_zh_a_hist_df = ak.index_zh_a_hist(symbol=\"000016\", period=\"daily\", start_date=\"19700101\", end_date=\"22220101\")\nprint(index_zh_a_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Data from Dalian Commodity Exchange with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the option_dce_daily function from AKShare to retrieve corn options data from the Dalian Commodity Exchange for a specific date. The function returns two dataframes: one with contract-level details and another with implied volatility reference values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\npart_1, part_2 = ak.option_dce_daily(symbol=\"玉米期权\", trade_date=\"20191017\")\nprint(part_1)\nprint(part_2)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Commodity Futures Contracts in Python with AKShare\nDESCRIPTION: This code demonstrates how to fetch spot data for multiple specific futures contracts from Chinese exchanges using the AKShare library. It specifies contract codes like V2205 and P2205 and sets the market to 'CF' for commodity futures.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n# 此处的合约需要是近期的合约, 否则会报错\nfutures_zh_spot_df = ak.futures_zh_spot(symbol='V2205, P2205, B2201, M2205', market=\"CF\", adjust='0')\nprint(futures_zh_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Main Financial Futures Contracts\nDESCRIPTION: This code shows how to monitor the main financial futures contracts from CFFEX (China Financial Futures Exchange) in real-time. It retrieves the main contract codes and updates the data every 3 seconds in an infinite loop.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport akshare as ak\n\ncffex_text = ak.match_main_contract(symbol=\"cffex\")\n\nwhile True:\n    time.sleep(3)\n    futures_zh_spot_df = ak.futures_zh_spot(symbol=cffex_text, market=\"FF\", adjust='0')\n    print(futures_zh_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Querying UK Quarterly GDP Data with akshare\nDESCRIPTION: Retrieves historical UK GDP quarterly growth rate data from East Money website. Returns a dataframe with timestamps, previous values, current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_170\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_uk_gdp_quarterly_df = ak.macro_uk_gdp_quarterly()\nprint(macro_uk_gdp_quarterly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China Retail Price Index Data with AKShare\nDESCRIPTION: Gets historical retail price index data from National Bureau of Statistics via AKShare. Returns monthly data with consumer categories and price indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_retail_price_index_df = ak.macro_china_retail_price_index()\nprint(macro_china_retail_price_index_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Enterprise Boom and Confidence Index in Python with AKShare\nDESCRIPTION: This code fetches China's enterprise boom and entrepreneur confidence index data using the macro_china_enterprise_boom_index function from AKShare. The data covers quarterly figures from Q1 2005 to present, including indices, year-over-year changes, and quarter-over-quarter changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_enterprise_boom_index_df = ak.macro_china_enterprise_boom_index()\nprint(macro_china_enterprise_boom_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Hong Kong Index Data with AkShare\nDESCRIPTION: This code demonstrates how to retrieve real-time data for Hong Kong stock indices using the stock_hk_index_spot_em function from the AkShare library. It returns a dataframe containing detailed information about Hong Kong market indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_hk_index_spot_em_df = ak.stock_hk_index_spot_em()\nprint(stock_hk_index_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving European Central Bank Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the European Central Bank using the macro_bank_euro_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_euro_interest_rate_df = ak.macro_bank_euro_interest_rate()\nprint(macro_bank_euro_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CFTC Commercial Currency Holdings Report using AKShare\nDESCRIPTION: This code snippet shows how to use the macro_usa_cftc_merchant_currency_holding function from AKShare to retrieve the CFTC Commercial Currency Holdings report. The function returns historical data from 1986-01-15 to the present, including long and short positions for various currencies.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_197\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cftc_merchant_currency_holding_df = ak.macro_usa_cftc_merchant_currency_holding()\nprint(macro_usa_cftc_merchant_currency_holding_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Federal Reserve Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the US Federal Reserve using the macro_bank_usa_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_usa_interest_rate_df = ak.macro_bank_usa_interest_rate()\nprint(macro_bank_usa_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Industrial Production Data with akshare\nDESCRIPTION: This code obtains US industrial production monthly rate data using the akshare package. The function returns historical data from January 1970 to present, with values expressed as percentages, including current, forecasted, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_121\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_industrial_production_df = ak.macro_usa_industrial_production()\nprint(macro_usa_industrial_production_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Fortune 500 Company Rankings with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the fortune_rank function from AKShare to retrieve Fortune 500 company rankings for a specified year. It requires the akshare library and returns a DataFrame with company rankings and related information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfortune_rank_df = ak.fortune_rank(year=\"2023\")\nprint(fortune_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Bond Yield Curve Data - Python\nDESCRIPTION: API for fetching historical yield curve data from chinamoney.com.cn. Supports querying different bond types and periods with date range constraints.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_china_close_return_df = ak.bond_china_close_return(symbol=\"国债\", period=\"1\", start_date=\"20231101\", end_date=\"20231101\")\nprint(bond_china_close_return_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Convertible Bond Data from Jisilu with AKShare in Python\nDESCRIPTION: This code snippet shows how to fetch real-time convertible bond data from Jisilu using the AKShare library. It uses the bond_cb_jsl function with a cookie parameter to retrieve comprehensive data including bond code, name, price, yield, and various other metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_cb_jsl_df = ak.bond_cb_jsl(cookie=\"您的集思录 cookie\")\nprint(bond_cb_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Futures Data from East Money with AKShare\nDESCRIPTION: Fetches historical futures trading data from East Money for specified contracts. This function supports different time periods (daily, weekly, monthly) and date ranges. Returns a DataFrame with price, volume and other trading information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_hist_em_df = ak.futures_hist_em(symbol=\"热卷主连\", period=\"daily\")\nprint(futures_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese PMI Data with AKShare\nDESCRIPTION: Function to fetch China's Purchasing Managers Index (PMI) data from EastMoney. Returns monthly data from 2008 onwards for both manufacturing and non-manufacturing sectors.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_pmi_df = ak.macro_china_pmi()\nprint(macro_china_pmi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese PPI Data with AKShare\nDESCRIPTION: Function to fetch China's Producer Price Index (PPI) data from EastMoney. Returns monthly data from 2006 onwards including current month value, year-over-year change and accumulated value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_ppi_df = ak.macro_china_ppi()\nprint(macro_china_ppi_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical International Futures Data from East Money via AKShare\nDESCRIPTION: This snippet demonstrates how to retrieve historical price data for a specific international futures contract from East Money using the futures_global_hist_em function. Requires specifying the symbol code to obtain its historical trading records.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_global_hist_em_df = ak.futures_global_hist_em(symbol=\"HG00Y\")\nprint(futures_global_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching 50ETF Option Volatility Index Intraday - Python\nDESCRIPTION: Retrieves intraday 50ETF option volatility index data using index_option_50etf_min_qvix API. Returns latest trading day's minute-level data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_50etf_min_qvix_df = ak.index_option_50etf_min_qvix()\nprint(index_option_50etf_min_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canada CPI Yearly Data with AKShare\nDESCRIPTION: This function retrieves yearly Consumer Price Index (CPI) data for Canada from East Money. It returns historical data including the date, previous value, current value, and release date. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_187\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_cpi_yearly_df = ak.macro_canada_cpi_yearly()\nprint(macro_canada_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Consumer Goods Retail Data in Python using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_consumer_goods_retail function from the AKShare package to retrieve historical data on China's consumer goods retail. The function requires no parameters and returns a DataFrame with monthly retail sales data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_consumer_goods_retail_df = ak.macro_china_consumer_goods_retail()\nprint(macro_china_consumer_goods_retail_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canada Monthly GDP Data with AKShare\nDESCRIPTION: This function retrieves monthly GDP data for Canada from East Money. It returns historical data including the date, previous value, current value, and release date. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_189\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_gdp_monthly_df = ak.macro_canada_gdp_monthly()\nprint(macro_canada_gdp_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implied Volatility Reference Values from GFEX in Python\nDESCRIPTION: This code snippet shows how to fetch implied volatility reference values for options from the Guangzhou Futures Exchange using AKShare. It requires specifying the commodity symbol (Industrial Silicon) and trading date as parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_gfex_vol_daily_df = ak.option_gfex_vol_daily(symbol=\"工业硅\", trade_date=\"20230418\")\nprint(option_gfex_vol_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese GDP Data with AKShare\nDESCRIPTION: Function to fetch China's Gross Domestic Product (GDP) data from EastMoney. Returns quarterly data from 2006 onwards including total GDP and breakdown by primary, secondary and tertiary industries.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_gdp_df = ak.macro_china_gdp()\nprint(macro_china_gdp_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving People's Bank of China Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the People's Bank of China using the macro_bank_china_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_china_interest_rate_df = ak.macro_bank_china_interest_rate()\nprint(macro_bank_china_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hong Kong Trade Balance Ratio with AKShare\nDESCRIPTION: This code snippet shows how to use the macro_china_hk_trade_diff_ratio function from akshare to fetch Hong Kong's trade balance ratio data. The API returns historical annual rate data for Hong Kong's goods trade balance.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_trade_diff_ratio_df = ak.macro_china_hk_trade_diff_ratio()\nprint(macro_china_hk_trade_diff_ratio_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Fund Bond Holdings Data with AKShare in Python\nDESCRIPTION: This code example illustrates how to fetch bond holdings data for a specific fund using the AKShare library. It provides details about the bonds held by the fund, including bond codes, names, percentages, and market values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_portfolio_bond_hold_em_df = ak.fund_portfolio_bond_hold_em(symbol=\"000001\", date=\"2023\")\nprint(fund_portfolio_bond_hold_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Stock Index Data from East Money with AKShare\nDESCRIPTION: This snippet demonstrates how to use the stock_zh_index_spot_em function to fetch real-time Chinese stock index data from East Money. It requires specifying a symbol parameter to determine which index series to retrieve.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_spot_em_df = ak.stock_zh_index_spot_em(symbol=\"上证系列指数\")\nprint(stock_zh_index_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Mapping Available Currency Pairs for a Specific Currency with AKShare\nDESCRIPTION: This code demonstrates how to use the ak.currency_pair_map() function to retrieve all available currency pairs for a specified currency (e.g., Chinese Yuan/RMB). The function returns a DataFrame containing the Chinese names of currency pairs and their corresponding codes, which can be used with ak.currency_history() to fetch historical data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_pair_map_df = ak.currency_pair_map(symbol=\"人民币\")\nprint(currency_pair_map_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minute-Level Commodity Index Data\nDESCRIPTION: Demonstrates using the futures_index_min_ccidx function to access minute-by-minute data for commodity indices. This provides more granular time series data compared to the daily index function.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_index_min_ccidx_df = ak.futures_index_min_ccidx(symbol=\"中证商品期货指数\")\nprint(futures_index_min_ccidx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Challenger Job Cuts with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_job_cuts function from the akshare library to retrieve historical US Challenger job cuts data. Returns data from 1994 to present with actual values, forecasts, and previous values in 10,000s of people.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_job_cuts_df = ak.macro_usa_job_cuts()\nprint(macro_usa_job_cuts_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Foreign Currency Pair Spot Quotes with AKShare\nDESCRIPTION: This code retrieves foreign currency pair spot quotes using the ak.fx_pair_quote() function from AKShare. The function returns real-time buying and selling price quotes for various currency pairs like AUD/USD, EUR/JPY, etc. The data is updated in real-time and is based on ODM (Order-Driven Market) quotes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfx_pair_quote_df = ak.fx_pair_quote()\nprint(fx_pair_quote_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Central Bank Gold and Foreign Exchange Reserves with AkShare\nDESCRIPTION: This code retrieves historical data on China's central bank gold and foreign exchange reserves from the National Bureau of Statistics. The returned DataFrame includes gold reserves (in 10,000 ounces) and foreign exchange reserves (in 100 million USD) for all available periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_foreign_exchange_gold_df = ak.macro_china_foreign_exchange_gold()\nprint(macro_china_foreign_exchange_gold_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Bank of China RMB Exchange Rate History via Sina Finance\nDESCRIPTION: This code retrieves historical Bank of China RMB exchange rate data through Sina Finance using AKShare's currency_boc_sina function. It requires currency symbol, start date, and end date parameters, returning buying and selling rates over the specified period.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_boc_sina_df = ak.currency_boc_sina(symbol=\"美元\", start_date=\"20230304\", end_date=\"20231110\")\nprint(currency_boc_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching US S&P/Case-Shiller 20-City Home Price Index with AKShare\nDESCRIPTION: This snippet shows how to use the macro_usa_spcs20 function from AKShare to obtain historical US S&P/Case-Shiller 20-City Home Price Index data. The function returns a DataFrame with columns for date, current value, forecast, and previous value. Values are in percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_133\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_spcs20_df = ak.macro_usa_spcs20()\nprint(macro_usa_spcs20_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Convertible Bond Market Data for Shanghai and Shenzhen\nDESCRIPTION: Uses the bond_zh_hs_cov_spot function to fetch real-time market data for all convertible bonds trading on Shanghai and Shenzhen exchanges. The function returns comprehensive pricing and trading information with no parameters required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_cov_spot_df = ak.bond_zh_hs_cov_spot()\nprint(bond_zh_hs_cov_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China CPI Yearly Data with AKShare\nDESCRIPTION: This snippet shows how to retrieve yearly Consumer Price Index (CPI) data for China using the AKShare library. The data spans from February 1986 to present and includes actual values, forecasted values, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_cpi_yearly_df = ak.macro_china_cpi_yearly()\nprint(macro_china_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Baltic Dry Index (BDI) Data with AKShare in Python\nDESCRIPTION: This function retrieves historical Baltic Dry Index (BDI) data from East Money. It returns a DataFrame with date, latest value, change percentage, and 3-month, 6-month, 1-year, 2-year, and 3-year change percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_shipping_bdi_df = ak.macro_shipping_bdi()\nprint(macro_shipping_bdi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eurozone Monthly CPI Data\nDESCRIPTION: This function fetches Eurozone Consumer Price Index (CPI) month-over-month data from 1990 to present. The data includes actual values, forecast values, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_143\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_cpi_mom_df = ak.macro_euro_cpi_mom()\nprint(macro_euro_cpi_mom_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing US Trade Balance Report with AkShare\nDESCRIPTION: Python code to retrieve US trade balance report data using the macro_usa_trade_balance function. Returns data in hundred million USD units.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_trade_balance_df = ak.macro_usa_trade_balance()\nprint(macro_usa_trade_balance_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Asset Allocation from XueQiu\nDESCRIPTION: API to fetch fund asset allocation details including asset types and position ratios for a specific date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_individual_detail_hold_xq_df = ak.fund_individual_detail_hold_xq(symbol=\"002804\", date=\"20231231\")\nprint(fund_individual_detail_hold_xq_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Bond Information using AKShare\nDESCRIPTION: This snippet shows how to retrieve detailed bond information using the bond_info_detail_cm function from AKShare. The function requires a bond symbol as input which can be obtained from the bond_info_cm function.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_info_detail_cm_df = ak.bond_info_detail_cm(symbol=\"19万林投资CP001\")\nprint(bond_info_detail_cm_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETF Real-time Quotes - East Money\nDESCRIPTION: Fetches real-time ETF fund quotes including price, premium/discount, trading volume, market cap and fund size data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_spot_em_df = ak.fund_etf_spot_em()\nprint(fund_etf_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Convertible Bond Price Adjustment Records - Python\nDESCRIPTION: API for retrieving historical price adjustment records for convertible bonds from jisilu.cn. Takes a bond symbol as input and returns adjustment dates and prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_convert_adj_logs_jsl_df = ak.bond_cb_adj_logs_jsl(symbol=\"128013\")\nprint(bond_convert_adj_logs_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Risk Indicators for Options from Shanghai Stock Exchange\nDESCRIPTION: This function fetches options risk indicator data from the Shanghai Stock Exchange for a specific date. The data includes various Greeks (Delta, Theta, Gamma, Vega, Rho) and implied volatility for different option contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_risk_indicator_sse_df = ak.option_risk_indicator_sse(date=\"20240626\")\nprint(option_risk_indicator_sse_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Index Data from East Money with AKShare\nDESCRIPTION: This snippet demonstrates how to use the stock_zh_index_daily_em function to fetch historical data for a specific stock index from East Money. It supports multiple exchanges and optional date range parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_daily_em_df = ak.stock_zh_index_daily_em(symbol=\"sz399812\")\nprint(stock_zh_index_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Movie Box Office Data using AKShare\nDESCRIPTION: Shows how to get real-time movie box office data using the movie_boxoffice_realtime API. Updates every 5 minutes with current day's box office figures.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_realtime_df = ak.movie_boxoffice_realtime()\nprint(movie_boxoffice_realtime_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving RMB Forex Spot Quotes from China Money\nDESCRIPTION: This code fetches real-time RMB foreign exchange spot quotes from China Money using AKShare's fx_spot_quote function. It returns current bid and ask prices for RMB against multiple currencies without requiring any input parameters, providing ODM quotes that update in real-time.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfx_spot_quote_df = ak.fx_spot_quote()\nprint(fx_spot_quote_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China Bond Yield Curve Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to retrieve government bond and other bond yield curve data from the China Bond Information Network using the bond_china_yield function. The function requires start_date and end_date parameters to specify the date range, which must be less than one year apart.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_china_yield_df = ak.bond_china_yield(start_date=\"20210201\", end_date=\"20220201\")\nprint(bond_china_yield_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Adjusted Historical Data for Chinese Convertible Bonds with AKShare\nDESCRIPTION: This code fetches adjusted (hfq) 5-minute historical data for a specific Chinese convertible bond within a defined date range. The data includes additional metrics like price change percentage, amplitude, and turnover rate.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_cov_min_df = ak.bond_zh_hs_cov_min(symbol=\"sz123124\", period='5', adjust='hfq', start_date=\"2021-09-01 09:32:00\", end_date=\"2021-09-06 09:32:00\")\nprint(bond_zh_hs_cov_min_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Shanghai INE Futures Contract Information\nDESCRIPTION: Retrieves futures contract information from Shanghai International Energy Exchange (INE) for a specified trading date. Returns a DataFrame with contract codes, listing dates, expiry dates, delivery dates and reference prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_info_ine_df = ak.futures_contract_info_ine(date=\"20241129\")\nprint(futures_contract_info_ine_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving 中证1000股指期权 (CSI 1000 Index Options) Data Using AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch options data for 中证1000股指期权 (CSI 1000 Index Options) with a specified expiration month using the AKShare library. The returned dataframe contains information about the instrument, position, volume, last price, price change, bid price, bid amount, ask price, and ask amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"中证1000股指期权\", end_month=\"2306\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Profit/Loss Data with AKShare API in Python\nDESCRIPTION: Example code demonstrating how to use the broker_calendar API to retrieve profit/loss data for a specific broker within a date range. The API returns daily profit/loss figures in Chinese yuan.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_calendar_df = pro.broker_calendar(broker=\"永安期货\", start_date=\"2018-07-08\", end_date=\"2018-08-08\")\nprint(broker_calendar_df)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Options Value with AKShare\nDESCRIPTION: This function retrieves options value analysis data from East Money. It returns a DataFrame with comprehensive information including option code, name, latest price, time value, intrinsic value, implied volatility, and theoretical price for all available options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_value_analysis_em_df = ak.option_value_analysis_em()\nprint(option_value_analysis_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Constituent Stocks using AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the AKShare library to retrieve constituent stock data for a specific index (e.g. '000300'). It returns a DataFrame with stock codes, names, and inclusion dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_stock_cons_df = ak.index_stock_cons(symbol=\"000300\")\nprint(index_stock_cons_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining US New Home Sales Data with AKShare\nDESCRIPTION: This snippet illustrates how to use the macro_usa_new_home_sales function from AKShare to retrieve historical US New Home Sales data. The function returns a DataFrame with columns for date, current value, forecast, and previous value. Values are in units of 10,000 households.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_129\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_new_home_sales_df = ak.macro_usa_new_home_sales()\nprint(macro_usa_new_home_sales_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Finance Board Data with AKShare\nDESCRIPTION: This function retrieves options finance board data for a specified symbol and end month. It returns a DataFrame containing instrument details, position data, volume, pricing information, and other market metrics for options contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"上证50股指期权\", end_month=\"2306\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining US FHFA House Price Index Data using AKShare\nDESCRIPTION: This code example illustrates how to use the macro_usa_house_price_index function from AKShare to retrieve historical US FHFA House Price Index data. The function returns a DataFrame with columns for date, current value, forecast, and previous value. Values are in percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_132\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_house_price_index_df = ak.macro_usa_house_price_index()\nprint(macro_usa_house_price_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China Money Supply Data through AKShare\nDESCRIPTION: Fetches Chinese money supply data (M0, M1, M2) from East Money via AKShare. Returns monthly absolute values and relative changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_money_supply_df = ak.macro_china_money_supply()\nprint(macro_china_money_supply_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Japanese Unemployment Rate Data with AkShare\nDESCRIPTION: Fetches historical data of Japanese unemployment rates from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_166\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_japan_unemployment_rate_df = ak.macro_japan_unemployment_rate()\nprint(macro_japan_unemployment_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSI (China Securities Index) Historical Data with AKShare in Python\nDESCRIPTION: Function to obtain historical data for specific China Securities Index. It requires a symbol parameter for the index code, along with start and end dates, and returns comprehensive index data including price, trading volume, and PE ratios.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_hist_csindex_df = ak.stock_zh_index_hist_csindex(symbol=\"000928\", start_date=\"20100101\", end_date=\"20240604\")\nprint(stock_zh_index_hist_csindex_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Bloomberg Billionaires Index with AKShare in Python\nDESCRIPTION: This example demonstrates how to use the ak.index_bloomberg_billionaires() function to retrieve the current Bloomberg Billionaires Index. It returns a DataFrame with rankings, names, net worth, and other details for the world's top billionaires.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_bloomberg_billionaires_df = ak.index_bloomberg_billionaires()\nprint(index_bloomberg_billionaires_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Individual Fund Info - Snowball\nDESCRIPTION: Retrieves detailed information for a single fund from Snowball (Xueqiu) platform including fund code, name, size, manager, investment strategy and objectives.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_individual_basic_info_xq_df = ak.fund_individual_basic_info_xq(symbol=\"000001\")\nprint(fund_individual_basic_info_xq_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Economic Events from Baidu with AKShare\nDESCRIPTION: This snippet demonstrates how to use the news_economic_baidu function from AKShare to retrieve global macroeconomic events for a specific date. The function returns economic events with details like date, time, region, event name, actual value, expected value, previous value, and importance rating.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_202\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnews_economic_baidu_df = ak.news_economic_baidu(date=\"20241107\")\nprint(news_economic_baidu_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Roll Yield Data for All Commodities with AKShare\nDESCRIPTION: Retrieves roll yield data for all commodities on a specific date. This combined view allows for easy identification of commodities with high and low roll yields.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nak.get_roll_yield_bar(type_method=\"var\", date=\"20191008\")  # 需要收盘收运行\n```\n\n----------------------------------------\n\nTITLE: Fetching Supramax Bulk Index (BSI) Data with AKShare in Python\nDESCRIPTION: This function retrieves historical Supramax Bulk Index (BSI) data from East Money. It returns a DataFrame with date, latest value, change percentage, and 3-month, 6-month, 1-year, 2-year, and 3-year change percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_bsi_index_df = ak.macro_china_bsi_index()\nprint(macro_china_bsi_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comprehensive Chinese Convertible Bond Listings with AKShare\nDESCRIPTION: This code fetches a comprehensive listing of all currently trading Chinese convertible bonds. The data includes bond codes, names, subscription dates, conversion prices, underlying stocks, and credit ratings.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_cov_df = ak.bond_zh_cov()\nprint(bond_zh_cov_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Daily Movie Box Office Data using AKShare\nDESCRIPTION: Demonstrates retrieving daily movie box office data using the movie_boxoffice_daily API. Returns detailed daily box office statistics for specified date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_daily_df = ak.movie_boxoffice_daily(date=\"20240219\")\nprint(movie_boxoffice_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Core PCE Price Index with AkShare\nDESCRIPTION: Python code to fetch US Core PCE Price Index annual rate data using the macro_usa_core_pce_price function. Returns historical data with values in percentage format.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_core_pce_price_df = ak.macro_usa_core_pce_price()\nprint(macro_usa_core_pce_price_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETF Historical Price Data with AkShare (Pre-adjusted)\nDESCRIPTION: Uses the fund_etf_hist_em function to fetch pre-adjusted (qfq) historical price data for ETF funds. Pre-adjusted data keeps current prices unchanged while adjusting historical prices for corporate actions like dividends and splits.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_hist_em_df = ak.fund_etf_hist_em(symbol=\"513500\", period=\"daily\", start_date=\"20000101\", end_date=\"20230201\", adjust=\"qfq\")\nprint(fund_etf_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Shenwan Third-Tier Industry Constituents with AkShare\nDESCRIPTION: This code retrieves constituent stocks of a specific Shenwan third-tier industry. It requires an industry symbol as input and returns detailed information about each stock, including codes, names, inclusion dates, financial ratios, and growth metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nsw_index_third_cons_df = ak.sw_index_third_cons(symbol=\"850111.SI\")\nprint(sw_index_third_cons_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China Forex and Gold Reserves Data with AKShare\nDESCRIPTION: Gets China's foreign exchange and gold reserves data via AKShare. Returns monthly data with absolute values and year-over-year/month-over-month changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_fx_gold_df = ak.macro_china_fx_gold()\nprint(macro_china_fx_gold_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eurozone Monthly PPI Data\nDESCRIPTION: This function fetches Eurozone Producer Price Index (PPI) month-over-month data from 1981 to present. The data includes actual values, forecast values, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_145\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_ppi_mom_df = ak.macro_euro_ppi_mom()\nprint(macro_euro_ppi_mom_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shenwan Index Components\nDESCRIPTION: API to fetch constituent stocks data for Shenwan indices including weights and inclusion dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_component_sw_df = ak.index_component_sw(symbol=\"801001\")\nprint(index_component_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Export Price Index with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_export_price function from the akshare library to retrieve historical US export price index data. Returns data from 1989 to present with actual values, forecasts, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_export_price_df = ak.macro_usa_export_price()\nprint(macro_usa_export_price_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shenwan Index Daily Analysis\nDESCRIPTION: API for accessing daily analysis reports of Shenwan indices with date range filtering and multiple index type options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_analysis_daily_sw_df = ak.index_analysis_daily_sw(symbol=\"市场表征\", start_date=\"20241025\", end_date=\"20241025\")\nprint(index_analysis_daily_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minute-level Shenwan Index Data\nDESCRIPTION: API for accessing minute-by-minute data for Shenwan indices with symbol-based filtering.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_min_sw_df = ak.index_min_sw(symbol=\"801001\")\nprint(index_min_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Annual CPI Data with AKShare\nDESCRIPTION: This code snippet shows how to use the macro_usa_cpi_yoy function from akshare to fetch US annual CPI data. The API returns historical CPI year-over-year percentage changes from 2008 to present from East Money data source.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cpi_yoy_df = ak.macro_usa_cpi_yoy()\nprint(macro_usa_cpi_yoy_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Currency Exchange Rate Time Series Data\nDESCRIPTION: Retrieves currency exchange rates over a time period using the currency_time_series function. Requires date range specification and an API key from currencyscoop.com.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_time_series_df = ak.currency_time_series(base=\"USD\", start_date=\"2023-02-03\", end_date=\"2023-03-04\", symbols=\"\", api_key=\"此处输入 API\")\nprint(currency_time_series_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching German Monthly CPI Data with AKShare\nDESCRIPTION: Retrieves historical monthly Consumer Price Index (CPI) data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_149\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_cpi_monthly_df = ak.macro_germany_cpi_monthly()\nprint(macro_germany_cpi_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Non-Farm Payrolls with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_non_farm function from the akshare library to retrieve historical US non-farm payrolls data. Returns data from 1970 to present with actual values, forecasts, and previous values in 10,000s of people.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_non_farm_df = ak.macro_usa_non_farm()\nprint(macro_usa_non_farm_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Philadelphia Semiconductor Index Data with AKShare\nDESCRIPTION: Python function to retrieve historical Philadelphia Semiconductor Index data from East Money. Returns daily values and percentage changes across different time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_global_sox_index_df = ak.macro_global_sox_index()\nprint(macro_global_sox_index_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Chinese Foreign Exchange Reserves with AKShare\nDESCRIPTION: This snippet shows how to obtain China's foreign exchange reserves data (in billions USD) using the AKShare library. Returns historical data with commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_fx_reserves_yearly_df = ak.macro_china_fx_reserves_yearly()\nprint(macro_china_fx_reserves_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Testing AKShare Installation\nDESCRIPTION: Simple Python code to verify AKShare installation by printing version number.\nSOURCE: https://github.com/akfamily/akshare/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nprint(ak.__version__)\n```\n\n----------------------------------------\n\nTITLE: Fetching Roll Yield Data by Symbol with AKShare\nDESCRIPTION: Retrieves roll yield data for a specific commodity on a single date. This shows the price structure across all delivery months, providing insight into the term structure from near to far delivery.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nak.get_roll_yield_bar(type_method=\"symbol\", var=\"RB\", date=\"20191008\")  # 需要收盘收运行\n```\n\n----------------------------------------\n\nTITLE: Retrieving CFTC Commercial Commodity Holdings Report using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_usa_cftc_merchant_goods_holding function from AKShare to fetch the CFTC Commercial Commodity Holdings report. The function returns historical data from 1986-01-15 to the present, including long and short positions for various commodities.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_198\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cftc_merchant_goods_holding_df = ak.macro_usa_cftc_merchant_goods_holding()\nprint(macro_usa_cftc_merchant_goods_holding_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Information for a Specific Chinese Convertible Bond with AKShare\nDESCRIPTION: This code retrieves detailed information for a specific Chinese convertible bond. It takes a bond symbol and an indicator parameter to specify the type of information to retrieve (basic info, winning numbers, fund usage, or important dates).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_cov_info_df = ak.bond_zh_cov_info(symbol=\"123121\", indicator=\"基本信息\")\nprint(bond_zh_cov_info_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Futures Warehouse Receipt Data with AKShare\nDESCRIPTION: Retrieves warehouse receipt data for specified commodities within a date range. Warehouse receipts reflect market inventory changes and can be used to analyze supply trends.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nak.get_receipt(start_date=\"20180712\", end_date=\"20180719\", vars_list=[\"CU\", \"NI\"])\n```\n\n----------------------------------------\n\nTITLE: Accessing Daily Futures Data from Sina with AKShare (Specific Contract)\nDESCRIPTION: Retrieves daily futures trading data from Sina Finance for a specific contract. This function accepts a specific futures contract code as parameter. Returns a DataFrame with complete daily trading information for that contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_zh_daily_sina_df = ak.futures_zh_daily_sina(symbol=\"RB2410\")\nprint(futures_zh_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching SSE 50 Index Option Contracts List from CFFEX via Sina Finance\nDESCRIPTION: This code demonstrates how to retrieve the list of all SSE 50 Index Option contracts from CFFEX using Sina Finance data. The function returns a dictionary with the contract codes, with the first contract being the main contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_sz50_list_sina_df = ak.option_cffex_sz50_list_sina()\nprint(option_cffex_sz50_list_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical ETF Fund Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the fund_etf_fund_info_em function from AKShare to retrieve historical ETF fund data from East Money. It allows specifying a fund code and date range to fetch historical net value data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_fund_info_em_df = ak.fund_etf_fund_info_em(fund=\"511280\", start_date=\"20000101\", end_date=\"20500101\")\nprint(fund_etf_fund_info_em_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Eurozone Monthly Unemployment Rate Data\nDESCRIPTION: This function retrieves Eurozone unemployment rate data from 1998 to present. It provides current values, forecast values, and previous values expressed as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_unemployment_rate_mom_df = ak.macro_euro_unemployment_rate_mom()\nprint(macro_euro_unemployment_rate_mom_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keqiao Textile Price Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the textile price index data from Keqiao Textile Index using the AKShare library. The function returns a DataFrame containing period information, index values, and change rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_kq_fz_df = ak.index_kq_fz(symbol=\"价格指数\")\nprint(index_kq_fz_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Markit Services PMI Data with akshare\nDESCRIPTION: This code obtains US Markit Services PMI initial report data using the akshare package. The function returns historical data from July 2012 to present, including current, forecasted, and previous PMI values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_124\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_services_pmi_df = ak.macro_usa_services_pmi()\nprint(macro_usa_services_pmi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pollution Rights Index Data with AKShare\nDESCRIPTION: This function fetches the Pollution Rights Trading Index data from Zhejiang Province. It requires a 'symbol' parameter to specify monthly or quarterly data. The function returns a DataFrame with trading index, volume, and transaction amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nindex_eri_df = ak.index_eri(symbol=\"月度\")\nprint(index_eri_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching US NAHB Housing Market Index with AKShare\nDESCRIPTION: This snippet shows how to use the macro_usa_nahb_house_market_index function from AKShare to get historical US NAHB Housing Market Index data. The function returns a DataFrame with columns for date, current value, forecast, and previous value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_127\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_nahb_house_market_index_df = ak.macro_usa_nahb_house_market_index()\nprint(macro_usa_nahb_house_market_index_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching US Monthly Core CPI Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_usa_core_cpi_monthly function from akshare to fetch US monthly Core CPI data. The API returns historical Core CPI month-over-month percentage changes from 1970 to present.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_core_cpi_monthly_df = ak.macro_usa_core_cpi_monthly()\nprint(macro_usa_core_cpi_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching German GDP Data with AKShare\nDESCRIPTION: Retrieves historical GDP data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_152\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_gdp_df = ak.macro_germany_gdp()\nprint(macro_germany_gdp_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Monthly GDP Data with AKShare\nDESCRIPTION: This code snippet shows how to use the macro_usa_gdp_monthly function from akshare to fetch monthly US GDP data. The API returns historical data including current, forecasted and previous values from 2008 to present.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_gdp_monthly_df = ak.macro_usa_gdp_monthly()\nprint(macro_usa_gdp_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Air Quality Rankings\nDESCRIPTION: This snippet shows how to use the air_quality_rank function to fetch real-time air quality rankings for all cities. It uses an empty string as the date parameter to get current data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nair_quality_rank_df = ak.air_quality_rank(date=\"\")\nprint(air_quality_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Converting Currency Values using AkShare and currencyscoop API\nDESCRIPTION: Example of how to use the currency_convert function from AkShare to convert a specified amount from one currency to another. This requires an API key from currencyscoop and allows conversion of a specified amount between any two supported currencies.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_convert_df = ak.currency_convert(base=\"USD\", to=\"CNY\", amount=\"10000\", api_key=\"此处输入 API\")\nprint(currency_convert_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Premium Analysis Data using AKShare\nDESCRIPTION: This code snippet shows how to use the option_premium_analysis_em function from AKShare to retrieve option premium analysis data from East Money. It returns a DataFrame with information on option premiums and related metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_premium_analysis_em_df = ak.option_premium_analysis_em()\nprint(option_premium_analysis_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Securities Company Private Investment Fund Data with AKShare\nDESCRIPTION: This code demonstrates retrieving information about securities company private investment funds using the amac_fund_sub_info function from AKShare. It returns all historical data available at the time of request.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_fund_sub_info_df = ak.amac_fund_sub_info()\nprint(amac_fund_sub_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Trading Day Basis Data with AKShare\nDESCRIPTION: Fetches commodity futures spot prices and basis data for a recent trading day using the futures_spot_price function. The function returns information including commodity symbol, spot price, near contract, near contract price, dominant contract, basis values, and basis rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_spot_price_df = ak.futures_spot_price(\"20240430\")\nprint(futures_spot_price_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese CPI Data with AKShare\nDESCRIPTION: Function to fetch China's Consumer Price Index (CPI) data from EastMoney. Returns monthly data from 2008 onwards including national, urban and rural CPI metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_cpi_df = ak.macro_china_cpi()\nprint(macro_china_cpi_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CSI Index Constituent Stocks with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the index_stock_cons_csindex function from AKShare to retrieve constituent stocks of a CSI index. It takes an index symbol as input and returns a DataFrame with detailed information about the constituent stocks.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_stock_cons_csindex_df = ak.index_stock_cons_csindex(symbol=\"000300\")\nprint(index_stock_cons_csindex_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hong Kong Consumer Price Index (CPI) Data with AKShare in Python\nDESCRIPTION: This example demonstrates the use of the macro_china_hk_cpi function from AKShare to retrieve Hong Kong's Consumer Price Index data. It returns historical CPI values along with their release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_89\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_cpi_df = ak.macro_china_hk_cpi()\nprint(macro_china_hk_cpi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Foreign Futures Contract Details - Python\nDESCRIPTION: Fetches detailed contract information for foreign futures from Sina Finance. Returns contract specifications including trading hours, minimum price movement, trading code, and delivery details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nfutures_foreign_detail_df = ak.futures_foreign_detail(symbol=\"ZSD\")\nprint(futures_foreign_detail_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving 沪深300股指期权 (CSI 300 Index Options) Data Using AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch options data for 沪深300股指期权 (CSI 300 Index Options) with a specified expiration month using the AKShare library. The returned dataframe contains information about the instrument, position, volume, last price, price change, bid price, bid amount, ask price, and ask amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"沪深300股指期权\", end_month=\"2306\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Regional Oil Price Data with AKShare API\nDESCRIPTION: This snippet demonstrates how to use the energy_oil_detail function from the AKShare package to fetch regional oil price data from East Money's data center for a specific date. The example retrieves oil price data for January 18, 2024.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nenergy_oil_detail_df = ak.energy_oil_detail(date=\"20240118\")\nprint(energy_oil_detail_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Pre-market Minute Data for Chinese Convertible Bonds with AKShare\nDESCRIPTION: This code retrieves pre-market minute-level data for a specific Chinese convertible bond from the most recent trading day. The data includes metrics like opening price, closing price, high, low, volume, and transaction amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_cov_pre_min_df = ak.bond_zh_hs_cov_pre_min(symbol=\"sh113570\")\nprint(bond_zh_hs_cov_pre_min_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Main Continuous Contract Data with AKShare\nDESCRIPTION: This snippet demonstrates how to use the futures_main_sina function to fetch historical data for a specific futures continuous contract. It requires the symbol, start date, and end date as input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_main_sina_hist = ak.futures_main_sina(symbol=\"V0\", start_date=\"20200101\", end_date=\"20220101\")\nprint(futures_main_sina_hist)\n```\n\n----------------------------------------\n\nTITLE: Fetching Commodity Price Index with AKShare\nDESCRIPTION: Retrieves commodity price index data from EastMoney. Returns historical data including date, latest value and percentage changes across various time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_commodity_price_index_df = ak.macro_china_commodity_price_index()\nprint(macro_china_commodity_price_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commodity Option Contract Data with AKShare\nDESCRIPTION: This snippet illustrates how to use the option_commodity_contract_sina function from AKShare to fetch current commodity option contract data from Sina Finance. It requires a symbol parameter and returns a DataFrame with contract information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_commodity_contract_sina_df = ak.option_commodity_contract_sina(symbol=\"黄金期权\")\nprint(option_commodity_contract_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Money Supply Data using AkShare\nDESCRIPTION: This code fetches historical data on China's money supply from Sina Finance. The DataFrame includes metrics like M0, M1, M2 money supply, and various deposit types, with both absolute values (in 100 million yuan) and year-on-year growth rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_65\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_supply_of_money_df = ak.macro_china_supply_of_money()\nprint(macro_china_supply_of_money_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSI Index Valuation Data with AKShare\nDESCRIPTION: This code fetches the CSI (China Securities Index) valuation data using the stock_zh_index_value_csindex function from the akshare library. It requires a symbol parameter to specify the index code and returns recent valuation metrics including P/E ratios and dividend yields.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_value_csindex_df = ak.stock_zh_index_value_csindex(symbol=\"H30374\")\nprint(stock_zh_index_value_csindex_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Drewry Container Index Data with AKShare in Python\nDESCRIPTION: This function retrieves Drewry container index data from the specified source. It accepts a symbol parameter to select different container routes and returns a DataFrame with date and index values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ndrewry_wci_index_df = ak.drewry_wci_index(symbol=\"composite\")\nprint(drewry_wci_index_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching German Yearly Retail Sales with AKShare\nDESCRIPTION: Retrieves yearly retail sales data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_154\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_retail_sale_yearly_df = ak.macro_germany_retail_sale_yearly()\nprint(macro_germany_retail_sale_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Futures Data from Exchanges with AKShare\nDESCRIPTION: Fetches historical futures data directly from Chinese exchanges (CFFEX, INE, CZCE, DCE, SHFE, GFEX). This function requires start date, end date, and exchange market parameters. Returns a comprehensive DataFrame with trading data for all contracts from the specified exchange.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nget_futures_daily_df = ak.get_futures_daily(start_date=\"20200701\", end_date=\"20200716\", market=\"DCE\")\nprint(get_futures_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Hong Kong Building Transaction Amounts with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_hk_building_amount function from akshare to fetch data on Hong Kong's building transaction amounts in Hong Kong dollars. The API returns historical transaction value data in billions HKD.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_building_amount_df = ak.macro_china_hk_building_amount()\nprint(macro_china_hk_building_amount_df)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Convertible Bond Value with AKShare\nDESCRIPTION: This function retrieves detailed value analysis for a specific convertible bond, including closing prices, pure bond values, conversion values, and premium rates. Requires a bond symbol as input parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_cov_value_analysis_df = ak.bond_zh_cov_value_analysis(symbol=\"113527\")\nprint(bond_zh_cov_value_analysis_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Contract Data from Sina Financial\nDESCRIPTION: Retrieves the T-shaped quotation table for commodity options using the AKShare library. Takes symbol and contract parameters to return detailed contract information including buy/sell volumes, prices, and open interest for both call and put options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_commodity_contract_table_sina_df = ak.option_commodity_contract_table_sina(symbol=\"动力煤期权\", contract=\"zc2103\")\nprint(option_commodity_contract_table_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Securities Company Private Fund Subsidiary Information with AKShare\nDESCRIPTION: This code demonstrates how to use the amac_member_sub_info function from the AKShare library to retrieve information about securities company private fund subsidiaries from the China Securities Investment Fund Association.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_member_sub_info_df = ak.amac_member_sub_info()\nprint(amac_member_sub_info_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Convertible Bond Comparison Table with AKShare\nDESCRIPTION: This function retrieves a comparison table of convertible bonds from East Money, including current prices, premium rates, and key dates. The data reflects the current trading moment with no input parameters required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_cov_comparison_df = ak.bond_cov_comparison()\nprint(bond_cov_comparison_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Fund Manager Data - Python Implementation\nDESCRIPTION: Retrieves comprehensive fund manager data from East Money, including manager names, companies, active funds, experience and performance metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_manager_em_df = ak.fund_manager_em()\nprint(fund_manager_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Baidu Migration Scale Data with AKShare\nDESCRIPTION: Shows how to retrieve historical migration scale data for a specific city using the migration_scale_baidu API. Returns a time series of migration scale indices that reflect the relative population movement in/out of the specified area.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/event/event.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmigration_scale_baidu_df = ak.migration_scale_baidu(area=\"广州市\", indicator=\"move_in\")\nprint(migration_scale_baidu_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Latest Currency Exchange Rate Data Sample\nDESCRIPTION: Shows the format of data returned by the currency_latest function, including the currency code, date and time (UTC), base currency, and exchange rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    currency                      date base         rates\n0        ADA 2023-07-24 10:56:21+00:00  USD      3.213363\n1        AED 2023-07-24 10:56:21+00:00  USD      3.672500\n2        AFN 2023-07-24 10:56:21+00:00  USD     85.665822\n3        ALL 2023-07-24 10:56:21+00:00  USD     91.125190\n4        AMD 2023-07-24 10:56:21+00:00  USD    387.300314\n..       ...                       ...  ...           ...\n215      ZAR 2023-07-24 10:56:21+00:00  USD     17.927659\n216      ZMK 2023-07-24 10:56:21+00:00  USD  19493.346892\n217      ZMW 2023-07-24 10:56:21+00:00  USD     19.493347\n218      ZWD 2023-07-24 10:56:21+00:00  USD    361.900000\n219      ZWL 2023-07-24 10:56:21+00:00  USD   4677.170339\n[220 rows x 4 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jisilu Convertible Bond Equal-weight Index with AKShare in Python\nDESCRIPTION: This code snippet shows how to fetch the Jisilu convertible bond equal-weight index using the AKShare library. It uses the bond_cb_index_jsl function to retrieve historical index data including date, price, volume, and various market statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_cb_index_jsl_df = ak.bond_cb_index_jsl()\nprint(bond_cb_index_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Factory Orders Data with akshare\nDESCRIPTION: This code fetches US factory orders monthly rate data using the akshare package. The function returns historical data from April 1992 to present, with values expressed as percentages, including current, forecasted, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_123\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_factory_orders_df = ak.macro_usa_factory_orders()\nprint(macro_usa_factory_orders_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Single Futures Contract Data from Sina Finance\nDESCRIPTION: Uses the futures_zh_spot function to retrieve real-time market data for a single futures contract from Sina Finance. The function requires a symbol parameter, market type, and adjust parameter to control output format.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_zh_spot_df = ak.futures_zh_spot(symbol='V2205', market=\"CF\", adjust='0')\nprint(futures_zh_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving 易方达科创50ETF Option Data Using AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch options data for the 易方达科创50ETF (E Fund ChiNext 50 ETF) with a specified expiration month using the AKShare library. The returned dataframe contains information like contract code, current price, price change percentage, exercise price, and quantity.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"易方达科创50ETF期权\", end_month=\"2306\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Baltic Dirty Tanker Index with AKShare\nDESCRIPTION: Python function to get Baltic Dirty Tanker Index (crude oil transportation) data from East Money. Returns historical index values and changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_bdti_index_df = ak.macro_china_bdti_index()\nprint(macro_china_bdti_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical REITs Market Data from East Money in Python\nDESCRIPTION: This function fetches historical trading data for a specific REITs security from East Money. It requires a symbol parameter (REITs code) and returns a DataFrame with dates, prices, trading volumes, and other historical market indicators.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nreits_hist_em_df = ak.reits_hist_em(symbol=\"508097\")\nprint(reits_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Personal Spending Monthly Rate with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_personal_spending function from the akshare library to retrieve historical US personal spending monthly rate data. Returns data from 1970 to present with actual values, forecasts, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_personal_spending_df = ak.macro_usa_personal_spending()\nprint(macro_usa_personal_spending_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Money Market Fund Rankings with AKShare\nDESCRIPTION: Fetches money market fund ranking data through fund_money_rank_em(). Returns yields, annualized returns and historical performance metrics for money market funds.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_money_rank_em_df = ak.fund_money_rank_em()\nprint(fund_money_rank_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Central Bank Balance Sheet Data in Python using AkShare\nDESCRIPTION: This code retrieves historical data for China's central bank balance sheet statistics from Sina Finance. It returns a DataFrame containing all historical data with detailed balance sheet items measured in 100 million yuan.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_central_bank_balance_df = ak.macro_china_central_bank_balance()\nprint(macro_china_central_bank_balance_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Index Real-time Data from SW Research\nDESCRIPTION: This code fetches real-time fund index data from Shenwan Hongyuan Research using the index_realtime_fund_sw function from the akshare library. It requires a symbol parameter to specify the index category and returns current data including code, name, previous close, daily change percentage, and yearly change percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_realtime_fund_sw_df = ak.index_realtime_fund_sw(symbol=\"基础一级\")\nprint(index_realtime_fund_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching GFEX Position Rankings with AKShare\nDESCRIPTION: Example code demonstrating how to retrieve daily position and trading volume rankings from GFEX using the AKShare library. The function returns a dictionary with contract codes as keys and ranking data as DataFrame values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_gfex_position_rank_dict = ak.futures_gfex_position_rank(date=\"20231113\")\nprint(futures_gfex_position_rank_dict)\n```\n\n----------------------------------------\n\nTITLE: Fetching German ZEW Economic Sentiment with AKShare\nDESCRIPTION: Retrieves ZEW Economic Sentiment Index data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_155\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_zew_df = ak.macro_germany_zew()\nprint(macro_germany_zew_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving RMB Deposit Balance Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the macro_rmb_deposit function from AKShare to fetch data on RMB deposit balances in China. It returns comprehensive historical data including new deposits, corporate deposits, and savings deposits with their respective changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_rmb_deposit_df = ak.macro_rmb_deposit()\nprint(macro_rmb_deposit_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hong Kong CPI Year-on-Year Rate with AKShare in Python\nDESCRIPTION: This snippet shows how to use the macro_china_hk_cpi_ratio function from AKShare to fetch Hong Kong's Consumer Price Index year-on-year rate. It returns historical data including previous and current values in percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_90\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_cpi_ratio_df = ak.macro_china_hk_cpi_ratio()\nprint(macro_china_hk_cpi_ratio_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US ISM Manufacturing PMI Data with akshare\nDESCRIPTION: This code fetches US ISM Manufacturing PMI report data using the akshare package. The function returns historical data from January 1970 to present, including current, forecasted, and previous PMI values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_120\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_ism_pmi_df = ak.macro_usa_ism_pmi()\nprint(macro_usa_ism_pmi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSI Index Constituent Stock Weights with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the index_stock_cons_weight_csindex function from AKShare to fetch the weights of constituent stocks in a CSI index. It requires an index symbol as input and returns a DataFrame containing detailed information including the weights of each constituent stock.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_stock_cons_weight_csindex_df = ak.index_stock_cons_weight_csindex(symbol=\"000300\")\nprint(index_stock_cons_weight_csindex_df)\n```\n\n----------------------------------------\n\nTITLE: Getting CME Bitcoin Trading Volume Report with AKShare\nDESCRIPTION: Retrieves CME bitcoin trading volume data for a specific date, including futures and options contracts, electronic/floor trading volumes, and open interest changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/dc/dc.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncrypto_bitcoin_cme_df = ak.crypto_bitcoin_cme(date=\"20230830\")\nprint(crypto_bitcoin_cme_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese Fixed Asset Investment Data with AKShare\nDESCRIPTION: Function to fetch China's urban fixed asset investment data from EastMoney. Returns monthly data from 2008 onwards including current month value and year-over-year changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_gdzctz_df = ak.macro_china_gdzctz()\nprint(macro_china_gdzctz_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bond Information from China Money Market using AKShare\nDESCRIPTION: This snippet demonstrates how to use the bond_info_cm function from AKShare to retrieve bond information from the China Money Market. The function accepts various filtering parameters such as bond name, code, type, and coupon type.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_info_cm_df = ak.bond_info_cm(bond_name=\"\", bond_code=\"\", bond_issue=\"\", bond_type=\"短期融资券\", coupon_type=\"零息式\", issue_year=\"2019\", grade=\"A-1\", underwriter=\"重庆农村商业银行股份有限公司\")\nprint(bond_info_cm_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving U.S. Pending Home Sales Index Monthly Rate with AKShare\nDESCRIPTION: Accesses the U.S. Pending Home Sales Index monthly rate data from Jin10 data center, covering the period from March 2001 to present. Returns a DataFrame with the date, current value, forecast value, and previous value, all in percentage units.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_134\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_pending_home_sales_df = ak.macro_usa_pending_home_sales()\nprint(macro_usa_pending_home_sales_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CME Precious Metals Trading Data using AKShare\nDESCRIPTION: This code snippet shows how to use the macro_usa_cme_merchant_goods_holding function from AKShare to retrieve CME precious metals trading data. The function returns historical data from 2018-04-05 to the present, including trading volume for various precious metal contracts and options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_199\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cme_merchant_goods_holding_df = ak.macro_usa_cme_merchant_goods_holding()\nprint(macro_usa_cme_merchant_goods_holding_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Business Inventories Data with akshare\nDESCRIPTION: This code fetches US business inventories monthly rate data using the akshare package. The function returns historical data from March 1992 to present, with values expressed as percentages, including current, forecasted, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_125\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_business_inventories_df = ak.macro_usa_business_inventories()\nprint(macro_usa_business_inventories_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching China's Postal and Telecommunication Data with AKShare\nDESCRIPTION: This code snippet shows how to use the macro_china_postal_telecommunicational function from AKShare to retrieve data on China's postal and telecommunication services. The function returns a DataFrame with various metrics related to postal and telecom industries.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_postal_telecommunicational_df = ak.macro_china_postal_telecommunicational()\nprint(macro_china_postal_telecommunicational_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching SWS Monthly Index Analysis Data with Python\nDESCRIPTION: Retrieves monthly index analysis data from Shenwan Research. Similar to weekly analysis but with monthly aggregation. Returns comprehensive market metrics including turnover rate, P/B ratio and dividend yield.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_analysis_monthly_sw_df = ak.index_analysis_monthly_sw(symbol=\"市场表征\", date=\"20240930\")\nprint(index_analysis_monthly_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LOF Historical Price Data with AkShare (Non-adjusted)\nDESCRIPTION: Uses the fund_lof_hist_em function to fetch non-adjusted historical price data for LOF funds. The function requires a symbol code, period type, start and end dates, and returns a DataFrame with price and trading information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lof_hist_em_df = ak.fund_lof_hist_em(symbol=\"166009\", period=\"daily\", start_date=\"20000101\", end_date=\"20230703\", adjust=\"\")\nprint(fund_lof_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese Import/Export Data with AKShare\nDESCRIPTION: Function to fetch China's customs import and export data from EastMoney. Returns monthly data from 2008 onwards including trade values and year-over-year changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hgjck_df = ak.macro_china_hgjck()\nprint(macro_china_hgjck_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Index Historical Data with AKShare\nDESCRIPTION: API to fetch historical data for Shenwan fund indices. Supports daily, weekly, and monthly periods with parameters for symbol and period selection.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_hist_fund_sw_df = ak.index_hist_fund_sw(symbol=\"807200\", period=\"day\")\nprint(index_hist_fund_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Main Commodity Futures Contracts\nDESCRIPTION: This script demonstrates how to continuously monitor main futures contracts from multiple Chinese exchanges (DCE, CZCE, SHFE, GFEX) using AKShare. It retrieves the main contract codes and then updates the data every 3 seconds in an infinite loop.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport akshare as ak\n\ndce_text = ak.match_main_contract(symbol=\"dce\")\nczce_text = ak.match_main_contract(symbol=\"czce\")\nshfe_text = ak.match_main_contract(symbol=\"shfe\")\ngfex_text = ak.match_main_contract(symbol=\"gfex\")\n\nwhile True:\n    time.sleep(3)\n    futures_zh_spot_df = ak.futures_zh_spot(\n        symbol=\",\".join([dce_text, czce_text, shfe_text, gfex_text]),\n        market=\"CF\",\n        adjust='0')\n    print(futures_zh_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss GDP YoY Data with AKShare\nDESCRIPTION: Fetches historical GDP year-over-year growth data for Switzerland from EastMoney. Returns annual time series with previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_160\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_swiss_gbd_yearly_df = ak.macro_swiss_gbd_yearly()\nprint(macro_swiss_gbd_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time International Futures Data from East Money via AKShare\nDESCRIPTION: This snippet shows how to fetch real-time data for all international futures contracts from East Money using the futures_global_spot_em function. Returns comprehensive market data including price, volume, and open interest.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_global_spot_em_df = ak.futures_global_spot_em()\nprint(futures_global_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Securities Company Direct Investment Fund Data with AKShare\nDESCRIPTION: This code shows how to use the amac_aoin_info function to fetch data about securities company direct investment funds from the China Securities Investment Fund Association database.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_aoin_info_df = ak.amac_aoin_info()\nprint(amac_aoin_info_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shanghai Stock Market Margin Trading Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_market_margin_sh function from AKShare to retrieve historical data on margin trading in the Shanghai stock market. The function returns data from March 31, 2010 to the present, including financing amounts, securities lending volumes, and balances.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_market_margin_sh_df = ak.macro_china_market_margin_sh()\nprint(macro_china_market_margin_sh_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CZCE Position Ranking Data for a Specific Date\nDESCRIPTION: This example demonstrates how to retrieve the position ranking table from the Zhengzhou Commodity Exchange (CZCE) for a specific trading date (February 13, 2020) using the AKShare library.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nget_czce_rank_table_df = ak.get_czce_rank_table(date='20200213')\nprint(get_czce_rank_table_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LOF Historical Price Data with AkShare (Post-adjusted)\nDESCRIPTION: Uses the fund_lof_hist_em function to fetch post-adjusted (hfq) historical price data for LOF funds. Post-adjusted data is commonly used in quantitative investment research as it better reflects the long-term wealth accumulation curve for investors.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lof_hist_em_df = ak.fund_lof_hist_em(symbol=\"166009\", period=\"daily\", start_date=\"20000101\", end_date=\"20230703\", adjust=\"hfq\")\nprint(fund_lof_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LOF Historical Price Data with AkShare (Pre-adjusted)\nDESCRIPTION: Uses the fund_lof_hist_em function to fetch pre-adjusted (qfq) historical price data for LOF funds. Pre-adjusted data maintains continuity in price series by adjusting historical prices while keeping current prices unchanged.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lof_hist_em_df = ak.fund_lof_hist_em(symbol=\"166009\", period=\"daily\", start_date=\"20000101\", end_date=\"20230703\", adjust=\"qfq\")\nprint(fund_lof_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Social Financing Statistics with AKShare\nDESCRIPTION: Function to retrieve total social financing data and its components including RMB loans, trust loans, and corporate bonds. Monthly data available from 2015 onwards.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_shrzgm_df = ak.macro_china_shrzgm()\nprint(macro_china_shrzgm_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Oxford-Man Realized Volatility Data in Python using AKShare\nDESCRIPTION: This snippet demonstrates how to fetch Oxford-Man realized volatility data for a specific index and volatility measure. It uses the article_oman_rv function from AKShare to retrieve the Tukey-Hanning(2) realized kernel variance for the FTSE index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/article/article.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\narticle_oman_rv_df = ak.article_oman_rv(symbol=\"FTSE\", index=\"rk_th2\")\nprint(article_oman_rv_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Hong Kong Fund Historical Data with AKShare in Python\nDESCRIPTION: This example demonstrates using the fund_hk_fund_hist_em function from AKShare to retrieve historical data for Hong Kong funds from East Money. It allows fetching either historical net value details or dividend distribution information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfund_hk_fund_hist_em_df = ak.fund_hk_fund_hist_em(code='1002200683', symbol=\"历史净值明细\")\nprint(fund_hk_fund_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time International Futures Quotes via AKShare (String Input)\nDESCRIPTION: This snippet shows how to retrieve real-time data for specified international futures contracts using the futures_foreign_commodity_realtime function. The example demonstrates passing a comma-separated string of symbol codes to get their current market data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_foreign_commodity_realtime_df = ak.futures_foreign_commodity_realtime(symbol='CT,NID')\nprint(futures_foreign_commodity_realtime_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Crude Oil Production Data with AKShare\nDESCRIPTION: This code retrieves historical US crude oil production data from the Energy Information Administration (EIA). The data includes total domestic production, 48 states production, and Alaska production with their respective changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_141\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_crude_inner_df = ak.macro_usa_crude_inner()\nprint(macro_usa_crude_inner_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Delivery Statistics from Dalian Commodity Exchange in Python\nDESCRIPTION: This code snippet shows how to retrieve delivery statistics from the Dalian Commodity Exchange using the akshare library. It fetches data for a specified trading month, including commodity type, contract, delivery date, volume, and amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_delivery_dce_df = ak.futures_delivery_dce(date=\"202312\")\nprint(futures_delivery_dce_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Repurchase Agreement Data with AKShare in Python\nDESCRIPTION: This snippet demonstrates how to use the AKShare library to retrieve historical data for repurchase agreements. It uses the bond_buy_back_hist_em function with a symbol parameter to fetch data including date, open, close, high, low, volume, and amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_buy_back_hist_em_df = ak.bond_buy_back_hist_em(symbol=\"204001\")\nprint(bond_buy_back_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Entity Attribute Values using AKShare\nDESCRIPTION: This snippet demonstrates how to use the nlp_ownthink API with the 'avg' indicator to retrieve detailed attribute-value pairs for an entity. It returns a DataFrame with attributes in the first column and their corresponding values in the second column.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/nlp/nlp.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnlp_ownthink_df = ak.nlp_ownthink(word=\"人工智能\", indicator=\"avg\")\nprint(nlp_ownthink_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Currency Exchange Rates\nDESCRIPTION: Fetches historical currency exchange rates for a specific date using the currency_history function. Requires an API key from currencyscoop.com and allows filtering by specific currency symbols.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_history_df = ak.currency_history(base=\"USD\", date=\"2023-02-03\", symbols=\"\", api_key=\"此处输入 API\")\nprint(currency_history_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching US Current Account Data with AkShare\nDESCRIPTION: Python code to access US current account report data using the macro_usa_current_account function. Returns values in hundred million USD.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_current_account_df = ak.macro_usa_current_account()\nprint(macro_usa_current_account_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Baidu FX Market Quotes with AKShare\nDESCRIPTION: This code retrieves foreign exchange market quotes from Baidu Stock Market using the ak.fx_quote_baidu() function. The function accepts a symbol parameter (e.g., \"人民币\" for RMB or \"美元\" for USD) and returns a DataFrame with currency codes, names, latest prices, and price changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfx_quote_baidu_df = ak.fx_quote_baidu(symbol=\"人民币\")\nprint(fx_quote_baidu_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Historical Fund Information from East Money using AKShare\nDESCRIPTION: This function retrieves detailed historical information for a specific fund from East Money. It can return various types of data including net value trends, cumulative returns, and rankings based on the indicator parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_open_fund_info_em_df = ak.fund_open_fund_info_em(symbol=\"710001\", indicator=\"单位净值走势\")\nprint(fund_open_fund_info_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Term Structure Data with AKShare API in Python\nDESCRIPTION: This code snippet shows how to fetch term structure data for a specific commodity variety and date using AKShare's Pro API. Term structure displays futures prices across different contract months.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nterm_structure_df = pro.term_structure(variety=\"RB\", date=\"2018-08-08\")\nprint(term_structure_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Codes from Sina Finance using AKShare in Python\nDESCRIPTION: This function retrieves option codes for call or put options on a specific underlying asset and trade date from Sina Finance. It requires the symbol type, trade date, and underlying asset code as inputs.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_sse_codes_sina_df = ak.option_sse_codes_sina(trade_date=\"202002\", underlying=\"510300\")\nprint(option_sse_codes_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CFTC Non-Commercial Commodity Holdings Report using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_usa_cftc_c_holding function from AKShare to fetch the CFTC Non-Commercial Commodity Holdings report. The function returns historical data from 1983-01-07 to the present, including long and short positions for various commodities.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_196\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cftc_c_holding_df = ak.macro_usa_cftc_c_holding()\nprint(macro_usa_cftc_c_holding_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss National Bank Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the Swiss National Bank using the macro_bank_switzerland_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_switzerland_interest_rate_df = ak.macro_bank_switzerland_interest_rate()\nprint(macro_bank_switzerland_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keqiao Textile Foreign Trade Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the textile foreign trade index data from Keqiao Textile Index using the AKShare library. The function returns a DataFrame containing period information, price indices, and prosperity indices with their respective change rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_kq_fz_df = ak.index_kq_fz(symbol=\"外贸指数\")\nprint(index_kq_fz_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China Macro Leverage Data with AKShare\nDESCRIPTION: Function to fetch historical macro leverage ratios for different sectors of Chinese economy including residential, corporate, and government sectors. Returns a DataFrame with leverage metrics from 1992 onwards.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_cnbs_df = ak.macro_cnbs()\nprint(macro_cnbs_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Soybean Meal Price Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the spot_soybean_price_soozhu function from AKShare to retrieve national soybean meal price trend data from the Soozhu platform. It returns approximately 15 days of historical data with date and price columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_soybean_price_soozhu_df = ak.spot_soybean_price_soozhu()\nprint(spot_soybean_price_soozhu_df)\n```\n\nLANGUAGE: output\nCODE:\n```\n         日期    价格\n0   2024-07-28  3.53\n1   2024-07-29  3.32\n2   2024-07-30  3.35\n3   2024-07-31  3.36\n4   2024-08-01  3.35\n5   2024-08-02  3.38\n6   2024-08-03  3.55\n7   2024-08-04  3.52\n8   2024-08-05  3.32\n9   2024-08-06  3.40\n10  2024-08-07  3.33\n11  2024-08-08  3.22\n12  2024-08-09  3.25\n13  2024-08-10  3.41\n14  2024-08-11  3.18\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hourly Air Quality Data for Beijing\nDESCRIPTION: This snippet demonstrates how to use the air_quality_hist function to retrieve hourly air quality data for Beijing over a specific date range. It includes parameters for city, time period, and date range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nair_quality_hist_df = ak.air_quality_hist(city=\"北京\", period=\"hour\", start_date=\"20200425\", end_date=\"20200427\")\nprint(air_quality_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching China-US Treasury Yield Rates - Python\nDESCRIPTION: API for retrieving historical yield rates comparison between Chinese and US treasury bonds from eastmoney.com. Returns data including 2,5,10,30 year rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_us_rate_df = ak.bond_zh_us_rate(start_date=\"19901219\")\nprint(bond_zh_us_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Index Data from Sina Finance with AKShare\nDESCRIPTION: This snippet demonstrates how to use the stock_zh_index_daily function to fetch historical data for a specific stock index from Sina Finance. The symbol parameter specifies which index to retrieve.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_daily_df = ak.stock_zh_index_daily(symbol=\"sz399552\")\nprint(stock_zh_index_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Bond Transaction Summary from Shanghai Stock Exchange\nDESCRIPTION: This snippet shows how to fetch bond transaction summary data from the Shanghai Stock Exchange using the bond_deal_summary_sse function. It returns transaction details including daily and annual transaction counts and amounts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_summary_sse_df = ak.bond_deal_summary_sse(date='20210104')\nprint(bond_summary_sse_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Daily Commodity Margin Deposit Changes with AKShare API\nDESCRIPTION: Retrieves daily changes in commodity margin deposits using the money_in_out API. Requires an API token and accepts a date parameter. Returns variety codes and corresponding changes in margin deposit amounts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fund.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nmoney_in_out_df = pro.money_in_out(date=\"2018-08-08\")\nprint(money_in_out_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving European and American Commodities QDII Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the qdii_e_comm_jsl function from AKShare to retrieve T+0 QDII data for European and American commodities. The function returns a DataFrame containing comprehensive market data including fund codes, prices, premium rates, and fund details for commodity-focused funds.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qdii/qdii.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nqdii_e_comm_jsl_df = ak.qdii_e_comm_jsl()\nprint(qdii_e_comm_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hog Market Supply Dimension Data with AKShare\nDESCRIPTION: Retrieves historical supply dimension data for the hog market, including wholesale pork prices, reserve frozen pork, feed raw materials, and other supply indicators. Returns date-value pairs.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_hog_supply_df = ak.futures_hog_supply(symbol=\"猪肉批发价\")\nprint(futures_hog_supply_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving International Futures Symbol List via AKShare\nDESCRIPTION: This snippet demonstrates how to use the futures_hq_subscribe_exchange_symbol function to get a list of international futures contract symbols from Sina Finance. Returns a dataframe with symbol names and their corresponding codes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_hq_subscribe_exchange_symbol_df = ak.futures_hq_subscribe_exchange_symbol()\nprint(futures_hq_subscribe_exchange_symbol_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China PPI Yearly Data with AKShare\nDESCRIPTION: This snippet shows how to fetch yearly Producer Price Index (PPI) data for China using the AKShare library. The data range is from August 1995 to present and includes actual values, forecasted values, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_ppi_yearly_df = ak.macro_china_ppi_yearly()\nprint(macro_china_ppi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hong Kong Manufacturing PPI with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_hk_ppi function from akshare to fetch Hong Kong's manufacturing Producer Price Index annual rate data. The API returns historical PPI rate data in percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_ppi_df = ak.macro_china_hk_ppi()\nprint(macro_china_hk_ppi_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching New Bond Issuance Data with AKShare\nDESCRIPTION: Gets recent bond issuance data from China Foreign Exchange Trade System. Returns details including bond name, type, issuance date, interest calculation method, price, term, planned issuance amount and rating.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_bond_public_df = ak.macro_china_bond_public()\nprint(macro_china_bond_public_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Open-End Fund Data from East Money using AKShare\nDESCRIPTION: This function fetches the latest daily data for all open-end funds from East Money's website. It returns a DataFrame with fund codes, names, net values, growth rates, and status information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_open_fund_daily_em_df = ak.fund_open_fund_daily_em()\nprint(fund_open_fund_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Industry Allocation Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the AKShare library to fetch industry allocation data for a specific fund. It provides information about the fund's investments across different industry sectors, including percentages and market values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_portfolio_industry_allocation_em_df = ak.fund_portfolio_industry_allocation_em(symbol=\"000001\", date=\"2023\")\nprint(fund_portfolio_industry_allocation_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Option Data from Zhengzhou Commodity Exchange (CZCE) in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve historical option market data from the Zhengzhou Commodity Exchange using AKShare. The function requires specifying the commodity symbol (RM for rapeseed meal) and the year of historical data to retrieve.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_czce_hist_df = ak.option_czce_hist(symbol=\"RM\", year=\"2025\")\nprint(option_czce_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Getting LPR Data with AKShare\nDESCRIPTION: Function to fetch Loan Prime Rate (LPR) data including 1-year and 5-year rates along with short-term and long-term loan rates. Historical data from 1991 to present.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_lpr_df = ak.macro_china_lpr()\nprint(macro_china_lpr_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching US Building Permits Data using AKShare\nDESCRIPTION: This code example shows how to use the macro_usa_building_permits function from AKShare to obtain historical US Building Permits data. The function returns a DataFrame with columns for date, current value, forecast, and previous value. Values are in units of 10,000 households.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_130\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_building_permits_df = ak.macro_usa_building_permits()\nprint(macro_usa_building_permits_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Money Market Fund Historical Data in Python\nDESCRIPTION: Fetches historical net value data for a specific money market fund using its symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_money_fund_info_em_df = ak.fund_money_fund_info_em(symbol=\"000009\")\nprint(fund_money_fund_info_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bond Market Overview from Shanghai Stock Exchange\nDESCRIPTION: This snippet demonstrates how to use the bond_cash_summary_sse function to get an overview of the bond market from the Shanghai Stock Exchange for a specific date. It returns data including number of bonds, custody market value, and face value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_cash_summary_sse_df = ak.bond_cash_summary_sse(date='20210111')\nprint(bond_cash_summary_sse_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sina Fund Real-time Data by Category in Python\nDESCRIPTION: This code retrieves real-time fund data from Sina Finance using AKShare library. The function accepts a symbol parameter to specify the fund category ('封闭式基金', 'ETF基金', or 'LOF基金'), returning detailed market information for funds in the selected category.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_category_sina_df = ak.fund_etf_category_sina(symbol=\"封闭式基金\")\nprint(fund_etf_category_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monthly Air Quality Rankings\nDESCRIPTION: This code snippet shows how to use the air_quality_rank function to get monthly air quality rankings for all cities. It uses a date format of 'YYYY-MM' to specify the month.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nair_quality_rank_df = ak.air_quality_rank(date=\"2020-03\")\nprint(air_quality_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Foreign Exchange Loan Data with AKShare\nDESCRIPTION: Retrieves historical foreign exchange loan data from East Money. Returns monthly data since February 2008 including current month value, year-over-year growth, month-over-month growth and cumulative values in USD billions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_whxd_df = ak.macro_china_whxd()\nprint(macro_china_whxd_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Constituent Stocks with Market Classification using AKShare in Python\nDESCRIPTION: This code snippet uses AKShare to retrieve constituent stock data for an index and adds a 'symbol' column that includes market classification (e.g. 'sz' for Shenzhen). It utilizes the stock_a_code_to_symbol function for conversion.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_stock_cons_df = ak.index_stock_cons(symbol=\"000300\")  # 主要调用 ak.stock_a_code_to_symbol() 来进行转换\nindex_stock_cons_df['symbol'] = index_stock_cons_df['品种代码'].apply(ak.stock_a_code_to_symbol)\nprint(index_stock_cons_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving UK Halifax Monthly House Price Index with AkShare\nDESCRIPTION: Fetches historical data of UK Halifax monthly house price index from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_168\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_uk_halifax_monthly_df = ak.macro_uk_halifax_monthly()\nprint(macro_uk_halifax_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese Official Manufacturing PMI with AKShare\nDESCRIPTION: This snippet shows how to access China's official manufacturing PMI data using the AKShare library. It returns historical data with commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_pmi_yearly_df = ak.macro_china_pmi_yearly()\nprint(macro_china_pmi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Agricultural Index Data with AKShare\nDESCRIPTION: Fetches the agricultural index data from EastMoney. Returns historical data including date, latest value and percentage changes across different time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_agricultural_index_df = ak.macro_china_agricultural_index()\nprint(macro_china_agricultural_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Huaxia Shanghai 50ETF Options Data with AKShare\nDESCRIPTION: This code demonstrates how to retrieve financial options market data for Huaxia Shanghai 50ETF options using the option_finance_board function from akshare. It specifies the symbol and expiration month (December 2022) as parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"华夏上证50ETF期权\", end_month=\"2212\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving 5-Minute ETF Fund Data with Back-adjusted Prices\nDESCRIPTION: Example of retrieving 5-minute intraday market data for an ETF fund with back-adjusted prices (hfq) using the fund_etf_hist_min_em function from AKShare. This request gets data for ETF code 513500 on a specific date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_hist_min_em_df = ak.fund_etf_hist_min_em(symbol=\"513500\", period=\"5\", adjust=\"hfq\", start_date=\"2023-12-11 09:32:00\", end_date=\"2023-12-11 17:40:00\")\nprint(fund_etf_hist_min_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Car Model Sales Ranking Data using AKShare\nDESCRIPTION: This code snippet demonstrates how to retrieve automobile model sales ranking data from Gasgoo Research Institute using the car_sale_rank_gasgoo function. It requires specifying 'symbol' as '车型榜' (model ranking) and 'date' in the format 'YYYYMM'.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_sale_rank_gasgoo_df = ak.car_sale_rank_gasgoo(symbol=\"车型榜\", date=\"202311\")\nprint(car_sale_rank_gasgoo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China Bond New Composite Index Data via AKShare\nDESCRIPTION: Fetches China Bond new composite index data using AKShare. Requires indicator and period as input parameters. Returns date and index value for the specified indicator and period.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_new_composite_index_cbond_df = ak.bond_new_composite_index_cbond(indicator=\"财富\", period=\"总值\")\nprint(bond_new_composite_index_cbond_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Top Traders List with AKShare\nDESCRIPTION: This function fetches the top traders list for financial options from East Money. It allows specifying the underlying asset, indicator type, and trade date, returning detailed information about top traders' activities.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_lhb_em_df = ak.option_lhb_em(symbol=\"510300\", indicator=\"期权持仓情况-认沽持仓量\", trade_date=\"20220121\")\nprint(option_lhb_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Merchants Securities Fund Ratings using AKShare\nDESCRIPTION: Accesses fund ratings from Merchants Securities for a specified date. Returns comprehensive rating data including 3-year ratings, performance metrics, and fund management details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_rating_zs_df = ak.fund_rating_zs(date='20230331')\nprint(fund_rating_zs_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time ETF Fund Data with AKShare in Python\nDESCRIPTION: This snippet demonstrates how to use the fund_etf_fund_daily_em function from AKShare to retrieve real-time ETF fund data from East Money. The function returns current data for all ETFs trading on the given day.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_fund_daily_em_df = ak.fund_etf_fund_daily_em()\nprint(fund_etf_fund_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time REITs Market Data from East Money in Python\nDESCRIPTION: This function provides real-time market data for all REITs listed on Shanghai and Shenzhen exchanges from East Money. It returns a DataFrame with codes, names, prices, trading volumes, and other market indicators. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nreits_realtime_em_df = ak.reits_realtime_em()\nprint(reits_realtime_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Baker Hughes Rig Count Data with AkShare\nDESCRIPTION: Python code to fetch Baker Hughes rig count report data using the macro_usa_rig_count function. Returns detailed drilling statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_rig_count_df = ak.macro_usa_rig_count()\nprint(macro_usa_rig_count_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Free Ratio Data with AKShare API in Python\nDESCRIPTION: This code snippet demonstrates how to fetch free ratio data between two different commodity contracts using AKShare's Pro API. It calculates the price ratio between two different commodities.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nfree_ratio_df = pro.free_ratio(variety1=\"RB\", code1=\"01\", variety2=\"HC\", code2=\"01\", date=\"2018-08-08\")\nprint(free_ratio_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Treasury Bond Issuance Data - Python\nDESCRIPTION: API for accessing treasury bond issuance information from CNINFO database. Returns details like issue dates, amounts and methods for specified date range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_treasure_issue_cninfo_df = ak.bond_treasure_issue_cninfo(start_date=\"20210910\", end_date=\"20211109\")\nprint(bond_treasure_issue_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Option Data from Sina Finance using AKShare in Python\nDESCRIPTION: This function fetches daily data for a specific option contract from Sina Finance. It requires the option symbol as input and returns daily time-series data including open, high, low, close prices, and volume.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_sse_daily_sina_df = ak.option_sse_daily_sina(symbol=\"10002273\")\nprint(option_sse_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Commission Fee Information\nDESCRIPTION: Retrieves commission fee data for commodity options from 9qihuo.com. Returns detailed fee information including transaction costs, price limits, and trading volumes for the specified option symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_comm_info_df = ak.option_comm_info(symbol=\"工业硅期权\")\nprint(option_comm_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local and Foreign Currency Deposit Data with AKShare\nDESCRIPTION: Gets historical deposit data for both local and foreign currencies from East Money. Returns monthly data since February 2008 including current month value, year-over-year growth, month-over-month growth and cumulative values in CNY billions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_wbck_df = ak.macro_china_wbck()\nprint(macro_china_wbck_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Fund Listings - Python Implementation\nDESCRIPTION: Gets data for newly established funds from East Money, including fund codes, names, companies, types, subscription periods and performance.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_new_found_em_df = ak.fund_new_found_em()\nprint(fund_new_found_em_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Contract Position Data with AKShare API\nDESCRIPTION: Example of how to query contract position data using the variety_positions API. Requires an API token from qhkch.com and returns long/short position data for specific contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_positions_df = pro.variety_positions(fields=\"longs\", code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_positions_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Daily Convertible Bond Price Data\nDESCRIPTION: Uses the bond_zh_hs_cov_daily function to retrieve historical daily price data for a specific convertible bond. Returns a time series of open, high, low, close prices and trading volume for the specified bond symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_cov_daily_df = ak.bond_zh_hs_cov_daily(symbol=\"sz128039\")\nprint(bond_zh_hs_cov_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Chinese Industrial Value-Added Growth using AKShare\nDESCRIPTION: This snippet shows how to retrieve China's industrial value-added growth data using the AKShare library. It returns a DataFrame with month, year-on-year growth percentage, cumulative growth percentage, and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_gyzjz_df = ak.macro_china_gyzjz()\nprint(macro_china_gyzjz_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Car Market Data by Country from CPCA\nDESCRIPTION: Retrieves car market data segmented by country of origin including domestic, German, Japanese, French, American and Korean manufacturers.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_market_country_cpca_df = ak.car_market_country_cpca()\nprint(car_market_country_cpca_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Energy Index Data with AKShare\nDESCRIPTION: Fetches energy index data from EastMoney. Returns historical data including date, latest value and percentage changes for different time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_energy_index_df = ak.macro_china_energy_index()\nprint(macro_china_energy_index_df)\n```\n\n----------------------------------------\n\nTITLE: Getting US Producer Price Index (PPI) Data with AkShare\nDESCRIPTION: Python code to access US PPI report data using the macro_usa_ppi function. Returns percentage values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_ppi_df = ak.macro_usa_ppi()\nprint(macro_usa_ppi_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Chinese Industrial Production YoY Growth Rate with AKShare\nDESCRIPTION: This snippet demonstrates how to obtain China's year-over-year industrial production growth rate for large-scale industries using the AKShare library. Returns data with commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_industrial_production_yoy_df = ak.macro_china_industrial_production_yoy()\nprint(macro_china_industrial_production_yoy_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving OPEC Monthly Report Data with AKShare\nDESCRIPTION: This function retrieves monthly OPEC report data from Jin10. It returns historical production data for OPEC member countries. Data ranges from 2017-01-18 to present. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_192\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_cons_opec_month_df = ak.macro_cons_opec_month()\nprint(macro_cons_opec_month_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Individual Fund Achievement Data from XueQiu\nDESCRIPTION: API to fetch detailed fund performance data from XueQiu platform, including period returns, maximum drawdowns and rankings.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_individual_achievement_xq_df = ak.fund_individual_achievement_xq(symbol=\"000001\")\nprint(fund_individual_achievement_xq_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shanghai Silver Benchmark Price History\nDESCRIPTION: This snippet demonstrates how to fetch the historical Shanghai Silver Benchmark Price data from the Shanghai Gold Exchange using the spot_silver_benchmark_sge function. No parameters are needed.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_silver_benchmark_sge_df = ak.spot_silver_benchmark_sge()\nprint(spot_silver_benchmark_sge_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Money Market Fund Daily Data in Python\nDESCRIPTION: Retrieves real-time data for money market funds from East Money. Updates between 16:00-23:00 on trading days.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_money_fund_daily_em_df = ak.fund_money_fund_daily_em()\nprint(fund_money_fund_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Enterprise Commodity Price Index with AKShare\nDESCRIPTION: Function to retrieve enterprise commodity price index data from East Money, including total index and breakdowns by product categories like agricultural products, minerals and energy. Historical data available from 2005.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_qyspjg_df = ak.macro_china_qyspjg()\nprint(macro_china_qyspjg_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Daily Cinema Box Office Rankings in Python using AKShare\nDESCRIPTION: This function retrieves daily box office rankings for individual cinemas based on a specified date. It returns information such as ranking, cinema name, daily box office, number of screenings, and other daily performance metrics for each cinema.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_cinema_daily_df = ak.movie_boxoffice_cinema_daily(date=\"20240219\")\nprint(movie_boxoffice_cinema_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Corporate Bond Issuance Data with AKShare\nDESCRIPTION: Fetches data on corporate bond issuances from CNINFO using AKShare. Requires start and end dates as input. Returns details like bond code, name, issue dates, amounts, and more.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_corporate_issue_cninfo_df = ak.bond_corporate_issue_cninfo(start_date=\"20210911\", end_date=\"20211110\")\nprint(bond_corporate_issue_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Daily Capital Flow Data with AKShare API in Python\nDESCRIPTION: Example code demonstrating how to use the broker_flow API to retrieve significant capital flow data for a broker on a specific date. The offset parameter sets a threshold value to filter only significant flows.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_flow_df = pro.broker_flow(broker=\"永安期货\", date=\"2018-08-08\", offset=\"1000000\")\nprint(broker_flow_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sample Shanghai Gold Exchange Report Data\nDESCRIPTION: This shows a sample output from the macro_china_au_report function, displaying trading data from the Shanghai Gold Exchange including date, commodity, prices, trading volume, and settlement information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_80\n\nLANGUAGE: text\nCODE:\n```\n               日期        商品      开盘价  ...        持仓量   交收方向      交收量\n0      2014-09-05    Pt9995   293.50  ...        NaN             NaN\n1      2014-09-05   Ag(T+D)  4159.00  ...  5252236.0   空支付多      NaN\n2      2014-09-05   Ag99.99  4218.00  ...      322.0             NaN\n3      2014-09-05   Au(T+D)   250.52  ...   144574.0   多支付空  11848.0\n4      2014-09-05  mAu(T+D)   250.87  ...   130808.0   多支付空  23644.0\n           ...       ...      ...  ...        ...    ...      ...\n24389  2023-03-23  NYAuTN12   437.60  ...    28328.0             NaN\n24390  2023-03-23    PGC30g   444.00  ...        NaN             NaN\n24391  2023-03-23   Pt99.95   227.20  ...        NaN             NaN\n24392  2023-03-23   Au99.99   434.00  ...        NaN             NaN\n24393  2023-03-23   Ag(T+D)  5108.00  ...  4965526.0  空支付给多  17670.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving U.S. Conference Board Consumer Confidence Index with AKShare\nDESCRIPTION: Fetches U.S. Conference Board Consumer Confidence Index report data from Jin10, covering the period from January 1970 to present. Returns historical data with current values, forecast values, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_136\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cb_consumer_confidence_df = ak.macro_usa_cb_consumer_confidence()\nprint(macro_usa_cb_consumer_confidence_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Commodity Position Data with AKShare API\nDESCRIPTION: Example showing how to access commodity-wide position data using variety_all_positions API. Returns position data across all contracts for a given commodity symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_all_positions_df = pro.variety_all_positions(fields=\"shorts\", symbol=\"RB\", date=\"2018-08-08\")\nprint(variety_all_positions_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Trade Balance Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian trade balance data using the macro_canada_trade function from AKShare library. Returns historical trade balance figures in billions of Canadian dollars.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_182\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_trade_df = ak.macro_canada_trade()\nprint(macro_canada_trade_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Japanese Annual CPI Data with AkShare\nDESCRIPTION: Fetches historical data of Japanese annual Consumer Price Index from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_japan_cpi_yearly_df = ak.macro_japan_cpi_yearly()\nprint(macro_japan_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Balanced Mixed Fund Position Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the ak.fund_balance_position_lg() function from AKShare to fetch balanced mixed fund position data. It returns historical data including dates, CSI 300 closing prices, and holding percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_balance_position_lg_df = ak.fund_balance_position_lg()\nprint(fund_balance_position_lg_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Fund Ratings Data using AKShare\nDESCRIPTION: Retrieves comprehensive fund rating data from multiple rating agencies through EastMoney. Returns fund codes, names, managers, companies, ratings from different agencies, and other fund details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_rating_all_df = ak.fund_rating_all()\nprint(fund_rating_all_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Member Position Ranking Summary with AKShare\nDESCRIPTION: This function retrieves the sum of member position rankings (top 5, 10, 15, 20, etc.) for specified futures contracts over a date range. The example shows how to get position data for 'IF' and 'C' contracts for two specific dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nget_rank_sum_daily_df = ak.get_rank_sum_daily(start_day=\"20180718\", end_day=\"20180719\", vars_list=[\"IF\", \"C\"])\nprint(get_rank_sum_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Private Fund Management Product Information with AKShare\nDESCRIPTION: This code shows how to use the amac_fund_info function to retrieve private fund management product data with pagination control. It allows specifying start and end pages to manage large data retrieval.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_fund_info_df = ak.amac_fund_info(start_page=\"1\", end_page='100')\nprint(amac_fund_info_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China's Freight Index Data with AKShare\nDESCRIPTION: This snippet shows how to use the macro_china_freight_index function from AKShare to retrieve data on various shipping and freight indices. The function returns a DataFrame containing historical data on multiple shipping-related indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_62\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_freight_index_df = ak.macro_china_freight_index()\nprint(macro_china_freight_index_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Australia Quarterly CPI with akshare\nDESCRIPTION: Retrieves historical Australia Consumer Price Index quarterly data from East Money website. Returns a dataframe with timestamps, previous values (in %), current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_177\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_cpi_quarterly_df = ak.macro_australia_cpi_quarterly()\nprint(macro_australia_cpi_quarterly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Oil Price Data with AKShare\nDESCRIPTION: Fetches historical gasoline and diesel price adjustment data from East Money. Returns adjustment dates, prices and price changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nenergy_oil_hist_df = ak.energy_oil_hist()\nprint(energy_oil_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving RMB Foreign Exchange Swap Quotes with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch RMB foreign exchange swap quotes using the ak.fx_swap_quote() function from the AKShare library. The function returns a DataFrame containing currency pairs and their corresponding swap points for different time periods (1 week, 1 month, 3 months, etc.).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfx_swap_quote_df = ak.fx_swap_quote()\nprint(fx_swap_quote_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Stock Index Short Flow Data with AKShare API\nDESCRIPTION: Retrieves daily net short flow data for stock indices using the stock_flow_short API. Requires an API token and accepts a date parameter. Returns broker positions, negative money flow amounts and index codes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fund.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nstock_flow_short_df = pro.stock_flow_short(date=\"2018-08-08\")\nprint(stock_flow_short_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Securities Company Collective Asset Management Products with AKShare\nDESCRIPTION: This code demonstrates retrieving information about securities company collective asset management products using the amac_securities_info function from AKShare. It returns all historical data available at the current time.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_securities_info_df = ak.amac_securities_info()\nprint(amac_securities_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cape Size Bulk Carrier Freight Index (BCI) with AKShare in Python\nDESCRIPTION: This function fetches historical Cape Size Bulk Carrier Freight Index (BCI) data from East Money. It returns a DataFrame with date, latest value, change percentage, and 3-month, 6-month, 1-year, 2-year, and 3-year change percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_shipping_bci_df = ak.macro_shipping_bci()\nprint(macro_shipping_bci_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Australian CPI Data with AKShare\nDESCRIPTION: Python code to retrieve Australian Consumer Price Index yearly data using the macro_australia_cpi_yearly function from AKShare library. Returns historical CPI data with timestamps and values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_178\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_cpi_yearly_df = ak.macro_australia_cpi_yearly()\nprint(macro_australia_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching A-Share Market Sentiment Index with Python\nDESCRIPTION: Retrieves the A-share market sentiment index data from ChinaScope. Returns one year of historical data including date, market sentiment index and CSI 300 index values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_news_sentiment_scope_df = ak.index_news_sentiment_scope()\nprint(index_news_sentiment_scope_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving U.S. Pending Home Sales Monthly Rate with AKShare\nDESCRIPTION: Retrieves U.S. Pending Home Sales monthly rate data from East Money Economic Data, covering the period from February 2008 to present. Returns a DataFrame containing date, previous value, current value, and publication date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_phs_df = ak.macro_usa_phs()\nprint(macro_usa_phs_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying EastMoney Inventory Data Sample\nDESCRIPTION: Shows the expected output format of the futures_inventory_em function, displaying recent inventory data for futures contracts including dates, inventory levels, and daily changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n        日期     库存     增减\n0   2024-11-19  15522    NaN\n1   2024-11-20  15522    0.0\n2   2024-11-21  16322  800.0\n3   2024-11-22  16902  580.0\n4   2024-11-25  17139  237.0\n..         ...    ...    ...\n61  2025-02-21  38028    0.0\n62  2025-02-24  38146  118.0\n63  2025-02-25  38146    0.0\n64  2025-02-26  37696 -450.0\n65  2025-02-27  37696    0.0\n[66 rows x 3 columns]\n```\n\n----------------------------------------\n\nTITLE: Fetching Total Car Market Statistics from CPCA\nDESCRIPTION: Retrieves total market statistics for narrow/broad passenger vehicles including production, wholesale, retail and export data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_market_total_cpca_df = ak.car_market_total_cpca(symbol=\"狭义乘用车\", indicator=\"产量\")\nprint(car_market_total_cpca_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caixin Services PMI with AKShare\nDESCRIPTION: This snippet shows how to access China's Caixin Services PMI data using the AKShare library. Returns historical data with commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_cx_services_pmi_yearly_df = ak.macro_china_cx_services_pmi_yearly()\nprint(macro_china_cx_services_pmi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving XinCaifu Wealthy Rankings with Python\nDESCRIPTION: Shows how to use the xincaifu_rank function to fetch data from XinCaifu's wealthy individuals ranking list. Takes a year parameter to specify which year's data to retrieve, available from 2003 onwards.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nxincaifu_rank_df = ak.xincaifu_rank(year=\"2022\")\nprint(xincaifu_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Canada CPI Monthly Data with AKShare\nDESCRIPTION: This function retrieves monthly Consumer Price Index (CPI) data for Canada from East Money. It returns historical data including the date, previous value, current value, and release date. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_188\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_cpi_monthly_df = ak.macro_canada_cpi_monthly()\nprint(macro_canada_cpi_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hong Kong Building Transaction Volume with AKShare\nDESCRIPTION: This code snippet shows how to use the macro_china_hk_building_volume function from akshare to fetch data on Hong Kong's building transaction volumes. The API returns historical data on the number of building sales contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_building_volume_df = ak.macro_china_hk_building_volume()\nprint(macro_china_hk_building_volume_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Trading Day Basis Data with AKShare\nDESCRIPTION: Retrieves historical commodity futures spot prices and basis data using the futures_spot_price_previous function. This method provides additional statistics including the highest, lowest, and average basis values over a 180-day period for dominant contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_spot_price_previous_df = ak.futures_spot_price_previous('20240430')\nprint(futures_spot_price_previous_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Complete Commodity List in Python Using AKShare\nDESCRIPTION: This code shows how to retrieve the full list of available commodities from the QiChan platform. The 'variety_all' endpoint returns information about all tradable commodities including their names, symbols, and markets.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_all_df = pro.variety_all()\nprint(variety_all_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Delivery Statistics from Shanghai Futures Exchange in Python\nDESCRIPTION: This code snippet shows how to fetch delivery statistics from the Shanghai Futures Exchange using the akshare library. It retrieves data for a specified trading month, including commodity type, delivery volume, and year-to-date statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_delivery_shfe_df = ak.futures_delivery_shfe(date=\"202312\")\nprint(futures_delivery_shfe_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Flexible Allocation Fund Position Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the ak.fund_linghuo_position_lg() function from AKShare to retrieve flexible allocation fund position data. It returns historical data including dates, CSI 300 closing prices, and holding percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_linghuo_position_lg_df = ak.fund_linghuo_position_lg()\nprint(fund_linghuo_position_lg_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Profitable Brokers Ranking in Python with AKShare\nDESCRIPTION: This code fetches a ranking of the most profitable brokers during a specific time period using broker_in_profit_list function. It returns a DataFrame with broker names and their profit amounts, limited by the specified count parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_in_profit_list_df = pro.broker_in_profit_list(start_date=\"2018-07-08\", end_date=\"2018-08-08\", count=\"10\")\nprint(broker_in_profit_list_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stock Financing Data with AKShare\nDESCRIPTION: This code demonstrates how to use the macro_stock_finance function to fetch stock financing data from Tonghuashun Data Center. The function returns historical data on funds raised through IPOs, additional issuances, and rights issues.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_stock_finance_df = ak.macro_stock_finance()\nprint(macro_stock_finance_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Foreign Futures Historical Data - Python\nDESCRIPTION: Gets historical trading data for foreign futures from Sina Finance. Returns a DataFrame with date, price (open/high/low/close), volume and position data. Requires symbol parameter which can be obtained through ak.hf_subscribe_exchange_symbol().\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_foreign_hist_df = ak.futures_foreign_hist(symbol=\"ZSD\")\nprint(futures_foreign_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Chinese RMB Exchange Rate Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_rmb function from AKShare to retrieve historical data on Chinese RMB exchange rates. The function returns data from January 3, 2017 to May 13, 2021, including mid-point rates and daily changes for various currency pairs with RMB.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_76\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_rmb_df = ak.macro_china_rmb()\nprint(macro_china_rmb_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Variety List in Python using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the AKShare pro_api function to retrieve a list of futures varieties. It requires a valid token from the Qihuo Kecha website admin.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_list_df = pro.variety_list(date=\"2018-08-08\")\nprint(variety_list_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Classified Private Fund Manager Information with AKShare\nDESCRIPTION: This code demonstrates using the amac_manager_classify_info function to fetch classified information about private fund managers. It returns comprehensive details including manager names, fund counts, registration information, and integrity status.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_manager_classify_info_df = ak.amac_manager_classify_info()\nprint(amac_manager_classify_info_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China Export Data (USD) with AKShare\nDESCRIPTION: This code demonstrates how to retrieve China's export data calculated in USD using the AKShare library. The data spans from February 1982 to present and includes actual year-on-year percentage change, forecasted values, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_exports_yoy_df = ak.macro_china_exports_yoy()\nprint(macro_china_exports_yoy_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Yiwu Weekly Price Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the weekly price index data from Yiwu Small Commodity Index using the AKShare library. The function returns a DataFrame containing period information, price indices for various channels, and export price index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_yw_df = ak.index_yw(symbol=\"周价格指数\")\nprint(index_yw_df)\n```\n\n----------------------------------------\n\nTITLE: Calculating Custom Roll Yield Between Specific Contracts with AKShare\nDESCRIPTION: Calculates the roll yield between any two specified contracts on a given date. This allows for custom roll yield analysis beyond just the main and sub-main contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nak.get_roll_yield(date=\"20180718\", var=\"IF\", symbol1=\"IF1812\", symbol2=\"IF1811\")  # 需要收盘收运行\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss Central Bank Interest Rate Data with AkShare\nDESCRIPTION: Fetches historical data of Swiss central bank interest rate decisions from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_161\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_swiss_gbd_bank_rate_df = ak.macro_swiss_gbd_bank_rate()\nprint(macro_swiss_gbd_bank_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Issue Creation Link\nDESCRIPTION: Markdown link to create new issues in the project repository\nSOURCE: https://github.com/akfamily/akshare/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Issue](https://github.com/akfamily/akshare/issues/new)\n```\n\n----------------------------------------\n\nTITLE: Fetching Australian Interest Rate Data with AKShare\nDESCRIPTION: Python code to retrieve Australian central bank interest rate decisions using the macro_australia_bank_rate function from AKShare library. Returns historical interest rate data with timestamps.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_179\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_bank_rate_df = ak.macro_australia_bank_rate()\nprint(macro_australia_bank_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Upgrading AKShare to the latest version\nDESCRIPTION: Command for upgrading AKShare to the latest version using the official PyPI repository. Recommended before using AKShare due to frequent updates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare --upgrade -i https://pypi.org/simple\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Capital Data with AKShare API\nDESCRIPTION: This code snippet shows how to fetch the total capital amount invested in a specific index on a given date. It requires an index ID and date parameter to return the capital value in Chinese Yuan.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_money_df = pro.index_money(index_id=\"index0070c0eb-93ba-2da9-6633-fa70cb90e959\", date=\"2018-08-08\")\nprint(index_money_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Intertemporal Arbitrage Data with AKShare API in Python\nDESCRIPTION: This code snippet demonstrates how to fetch intertemporal arbitrage data between two contracts of the same commodity using AKShare's Pro API. It calculates the spread between different contract months.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nintertemporal_arbitrage_df = pro.intertemporal_arbitrage(variety=\"RB\", code1=\"01\", code2=\"05\", date=\"2018-08-08\")\nprint(intertemporal_arbitrage_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Non-Futures Company Net Position Data in Python using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the AKShare pro_api function to fetch non-futures company net position data for a specific symbol and date. It requires a valid token from the Qihuo Kecha website admin.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_no_futures_df = pro.variety_no_futures(symbol=\"RB\", date=\"2018-08-08\")\nprint(variety_no_futures_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Government Bond Issuance Data - Python\nDESCRIPTION: API for fetching local government bond issuance data from CNINFO database. Returns issuance details within specified date range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_local_government_issue_cninfo_df = ak.bond_local_government_issue_cninfo(start_date=\"20210911\", end_date=\"20211110\")\nprint(bond_local_government_issue_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving London Metal Exchange Holding Report with AKShare\nDESCRIPTION: This function retrieves the London Metal Exchange (LME) holding report data from Jin10. It returns historical long and short positions for various metals. Data ranges from 2015-10-22 to present. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_193\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_lme_holding_df = ak.macro_euro_lme_holding()\nprint(macro_euro_lme_holding_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shanghai 50 Index Option Volatility Data with AkShare\nDESCRIPTION: This code demonstrates how to fetch intraday volatility data for the Shanghai 50 Index Option. The API returns time series data with timestamps and QVIX values, representing option implied volatility for the most recent trading day.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_50index_min_qvix_df = ak.index_option_50index_min_qvix()\nprint(index_option_50index_min_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Research Reports for Futures Commodities in Python Using AKShare\nDESCRIPTION: This code demonstrates how to access research reports related to a specific futures commodity on a given date. The 'variety_reports' endpoint requires a commodity code and date parameters to fetch relevant research publications.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_reports_df = pro.variety_reports(csymbolode=\"RB\", date=\"2018-08-08\")\nprint(variety_reports_df)\n```\n\n----------------------------------------\n\nTITLE: Querying UK Yearly GDP Data with akshare\nDESCRIPTION: Retrieves historical UK GDP yearly growth rate data from East Money website. Returns a dataframe with timestamps, previous values, current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_171\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_uk_gdp_yearly_df = ak.macro_uk_gdp_yearly()\nprint(macro_uk_gdp_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching 50ETF Option Volatility Index - Python\nDESCRIPTION: Retrieves the 50ETF option volatility index (QVIX) data using index_option_50etf_qvix API. Returns complete historical data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_50etf_qvix_df = ak.index_option_50etf_qvix()\nprint(index_option_50etf_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving SGX Futures Settlement Prices - Python\nDESCRIPTION: Retrieves settlement prices for all futures contracts from Singapore Exchange for a specific trading date. Data includes open, high, low, close prices, volume and open interest. Limited to past 60 trading days.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_settlement_price_sgx_df = ak.futures_settlement_price_sgx(date=\"20231108\")\nprint(futures_settlement_price_sgx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Fund Information - East Money\nDESCRIPTION: Fetches index fund information including fund tracking details, fees, and performance metrics. Supports filtering by index type and tracking method.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_info_index_em_df = ak.fund_info_index_em(symbol=\"沪深指数\", indicator=\"增强指数型\")\nprint(fund_info_index_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hog Market Core Data with AKShare API\nDESCRIPTION: Retrieves historical core data for different types of hogs (外三元, 内三元, 土杂猪) from Xuantian data source. Returns date and value pairs for the specified hog type.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_hog_core_df = ak.futures_hog_core(symbol=\"外三元\")\nprint(futures_hog_core_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Celebrity Traffic Value Data with AKShare\nDESCRIPTION: This endpoint retrieves celebrity traffic value metrics which are calculated based on professional standing, attention level, forecast popularity, and marketing power. The data emphasizes celebrities' recent popularity and influence on consumer behavior.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nonline_value_artist_df = ak.online_value_artist()\nprint(online_value_artist_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching 500ETF Option Volatility Index - Python\nDESCRIPTION: Retrieves the 500ETF option volatility index (QVIX) data using index_option_500etf_qvix API. Returns complete historical data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_500etf_qvix_df = ak.index_option_500etf_qvix()\nprint(index_option_500etf_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Core CPI Year-over-Year Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian yearly core Consumer Price Index data using the macro_canada_core_cpi_yearly function from AKShare library. Returns historical CPI statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_185\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_core_cpi_yearly_df = ak.macro_canada_core_cpi_yearly()\nprint(macro_canada_core_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Momentum Index Data with AKShare\nDESCRIPTION: This code fetches the new momentum index data from Caixin using the index_neei_cx function from the akshare library. It returns historical data containing date, new momentum index value, and change percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_neei_cx_df = ak.index_neei_cx()\nprint(index_neei_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching 500ETF Option Volatility Index Intraday - Python\nDESCRIPTION: Retrieves intraday 500ETF option volatility index data using index_option_500etf_min_qvix API. Returns latest trading day's minute-level data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_500etf_min_qvix_df = ak.index_option_500etf_min_qvix()\nprint(index_option_500etf_min_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Huaxia Science Innovation 50ETF Options Data with AKShare\nDESCRIPTION: This code demonstrates how to retrieve financial options market data for Huaxia Science Innovation 50ETF options using the option_finance_board function from akshare. It specifies the symbol and expiration month (June 2023) as parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"华夏科创50ETF期权\", end_month=\"2306\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Fee Information from East Money\nDESCRIPTION: API to fetch fund fee information including transaction fees, subscription and redemption rates from East Money website.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_fee_em_df = fund_fee_em(symbol=\"015641\", indicator=\"认购费率\")\nprint(fund_fee_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Portfolio Changes in Python using AKShare\nDESCRIPTION: Fetches fund portfolio major changes data from EastMoney. Takes fund symbol, indicator type (cumulative buy/sell), and year as input parameters. Returns detailed portfolio change information including stock codes, names, and transaction amounts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_portfolio_change_em_df = ak.fund_portfolio_change_em(symbol=\"003567\", indicator=\"累计买入\", date=\"2023\")\nprint(fund_portfolio_change_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Global Cost of Living Data with AKShare in Python\nDESCRIPTION: This snippet demonstrates how to use the ak.cost_living() function to retrieve cost of living data for cities worldwide. It accepts a 'symbol' parameter to filter results and returns a DataFrame with rank, city name, and price index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncost_living_df = ak.cost_living(symbol=\"world\")\nprint(cost_living_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Agricultural Product Price Index with AKShare\nDESCRIPTION: Retrieves agricultural product wholesale price index data from EastMoney. Returns historical data including date, latest value and percentage changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_agricultural_product_df = ak.macro_china_agricultural_product()\nprint(macro_china_agricultural_product_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Fattening Pig Feed Price Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the spot_mixed_feed_soozhu function from AKShare to retrieve national fattening pig feed (including self-configured feed) price trend data from the Soozhu platform. It returns approximately 15 days of historical data with date and price columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_mixed_feed_soozhu_df = ak.spot_mixed_feed_soozhu()\nprint(spot_mixed_feed_soozhu_df)\n```\n\nLANGUAGE: output\nCODE:\n```\n         日期    价格\n0   2024-07-29  3.24\n1   2024-07-30  3.11\n2   2024-07-31  3.24\n3   2024-08-01  3.18\n4   2024-08-02  3.26\n5   2024-08-03  3.35\n6   2024-08-04  3.46\n7   2024-08-05  3.27\n8   2024-08-06  3.19\n9   2024-08-07  3.25\n10  2024-08-08  3.07\n11  2024-08-09  3.30\n12  2024-08-10  3.55\n13  2024-08-11  3.42\n14  2024-08-12  3.22\n```\n\n----------------------------------------\n\nTITLE: Fetching Commodity Inventory Data from 99qh.com with AKShare\nDESCRIPTION: Retrieves historical inventory data for specific futures commodities from 99qh.com using the futures_inventory_99 function. Returns closing price and inventory levels for the specified symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_inventory_99_df = ak.futures_inventory_99(symbol='豆一')\nprint(futures_inventory_99_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Value Estimations from East Money\nDESCRIPTION: API to fetch fund value estimations including estimated values, growth rates and actual net values from East Money website.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_value_estimation_em_df = ak.fund_value_estimation_em(symbol=\"混合型\")\nprint(fund_value_estimation_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving 1-Minute ETF Fund Data with AKShare\nDESCRIPTION: Example of retrieving 1-minute intraday market data for an ETF fund using the fund_etf_hist_min_em function from AKShare. This request gets data for ETF code 511220 on a specific date without price adjustment.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_hist_min_em_df = ak.fund_etf_hist_min_em(symbol=\"511220\", period=\"1\", adjust=\"\", start_date=\"2024-03-20 09:30:00\", end_date=\"2024-03-20 17:40:00\")\nprint(fund_etf_hist_min_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Car Market Segment Data from CPCA\nDESCRIPTION: Retrieves market data for different car segments (A00, A0, A, B, C) with options for sedans, MPVs and SUVs.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_market_segment_cpca_df = ak.car_market_segment_cpca(symbol=\"轿车\")\nprint(car_market_segment_cpca_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching National Lean Hog Price Data\nDESCRIPTION: This code retrieves national lean hog price data for the last two weeks from soozhu.com using the spot_hog_lean_price_soozhu function. No parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_hog_lean_price_soozhu_df = ak.spot_hog_lean_price_soozhu()\nprint(spot_hog_lean_price_soozhu_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Caixin Manufacturing PMI Final Data with AKShare\nDESCRIPTION: This snippet demonstrates how to retrieve China's Caixin Manufacturing PMI final data using the AKShare library. Returns a DataFrame with commodity name, date, current value, forecast value, and previous value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_cx_pmi_yearly_df = ak.macro_china_cx_pmi_yearly()\nprint(macro_china_cx_pmi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hog Market Cost Dimension Data with AKShare\nDESCRIPTION: Fetches historical cost dimension data related to hog farming, including corn, soybean meal, sow prices, and piglet prices. Returns date-value pairs for the specified cost factor.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_hog_cost_df = ak.futures_hog_cost(symbol=\"玉米\")\nprint(futures_hog_cost_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Shenwan Index Historical Data\nDESCRIPTION: API to access historical data for Shenwan indices with options for different time periods and specific index symbols.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_hist_sw_df = ak.index_hist_sw(symbol=\"801193\", period=\"day\")\nprint(index_hist_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China New Economy Index with AKShare\nDESCRIPTION: This code snippet shows how to retrieve the China New Economy Index data from Caixin using the AKShare library. The function returns all historical data including date, index value, and change value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_nei_cx_df = ak.index_nei_cx()\nprint(index_nei_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity Description using AKShare NLP API\nDESCRIPTION: This snippet shows how to use the nlp_ownthink API with the 'desc' indicator to get a descriptive explanation of an entity. It returns a text description that includes the full name and abbreviation of the entity.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/nlp/nlp.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnlp_ownthink_df = ak.nlp_ownthink(word=\"人工智能\", indicator=\"desc\")\nprint(nlp_ownthink_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Zealand Reserve Bank Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the New Zealand Reserve Bank using the macro_bank_newzealand_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_newzealand_interest_rate_df = ak.macro_bank_newzealand_interest_rate()\nprint(macro_bank_newzealand_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching ChiNext Option Volatility Index - Python\nDESCRIPTION: Retrieves the ChiNext (创业板) option volatility index (QVIX) data using index_option_cyb_qvix API. Returns complete historical data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_cyb_qvix_df = ak.index_option_cyb_qvix()\nprint(index_option_cyb_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Plotting Stock Data with mplfinance\nDESCRIPTION: Example demonstrating how to create candlestick charts using AKShare data with mplfinance library.\nSOURCE: https://github.com/akfamily/akshare/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nimport mplfinance as mpf  # Please install mplfinance as follows: pip install mplfinance\n\nstock_us_daily_df = ak.stock_us_daily(symbol=\"AAPL\", adjust=\"qfq\")\nstock_us_daily_df = stock_us_daily_df.set_index([\"date\"])\nstock_us_daily_df = stock_us_daily_df[\"2020-04-01\": \"2020-04-29\"]\nmpf.plot(stock_us_daily_df, type=\"candle\", mav=(3, 6, 9), volume=True, show_nontrading=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing Eurozone Annual CPI Data\nDESCRIPTION: This function retrieves Eurozone Consumer Price Index (CPI) year-over-year data from 1991 to present. It provides current values, forecast values, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_144\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_cpi_yoy_df = ak.macro_euro_cpi_yoy()\nprint(macro_euro_cpi_yoy_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETF Historical Price Data with AkShare (Post-adjusted)\nDESCRIPTION: Uses the fund_etf_hist_em function to fetch post-adjusted (hfq) historical price data for ETF funds. Post-adjusted data keeps historical prices unchanged while adjusting current prices for corporate actions, making it suitable for analyzing long-term investment returns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_hist_em_df = ak.fund_etf_hist_em(symbol=\"513500\", period=\"daily\", start_date=\"20000101\", end_date=\"20230201\", adjust=\"hfq\")\nprint(fund_etf_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output Structure from AKShare EPU Index API\nDESCRIPTION: This code snippet shows the expected DataFrame structure returned by the article_epu_index function, containing year, month, and country-specific policy index columns. The example shows data for China spanning from 1995 to 2023.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/article/article.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n     year  month  China_Policy_Index\n0    1995      1          192.911910\n1    1995      2          193.987850\n2    1995      3           88.227035\n3    1995      4          131.034710\n4    1995      5          177.096860\n..    ...    ...                 ...\n342  2023      7          704.566080\n343  2023      8          709.881990\n344  2023      9          819.746150\n345  2023     10          603.739890\n346  2023     11          743.397580\n[347 rows x 3 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Commission Information with AKShare\nDESCRIPTION: This code retrieves futures commission fee and margin data from various exchanges using the futures_comm_info function. It accepts a symbol parameter to specify which exchange's data to fetch.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_comm_info_df = ak.futures_comm_info(symbol=\"所有\")\nprint(futures_comm_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving iShares Silver Trust ETF Holdings Data with AKShare\nDESCRIPTION: This function retrieves holdings data for the iShares Silver Trust ETF, the world's largest silver ETF. It returns historical data including the date, total inventory, changes in holdings, and total value. Data ranges from 2004-12-02 to present. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_191\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_cons_silver_df = ak.macro_cons_silver()\nprint(macro_cons_silver_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Option Statistics from Shenzhen Stock Exchange using AKShare\nDESCRIPTION: This code demonstrates how to fetch daily option statistics from Shenzhen Stock Exchange using the option_daily_stats_szse function. The function requires a date parameter in 'YYYYMMDD' format and returns a DataFrame containing trading volumes, open interest, and other metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_daily_stats_szse_df = ak.option_daily_stats_szse(date=\"20240626\")\nprint(option_daily_stats_szse_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Yearly Air Quality Rankings\nDESCRIPTION: This example demonstrates how to fetch yearly air quality rankings for all cities using the air_quality_rank function. It uses a date format of 'YYYY' to specify the year.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nair_quality_rank_df = ak.air_quality_rank(date=\"2019\")\nprint(air_quality_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching China Real Estate Climate Index via AKShare\nDESCRIPTION: Retrieves historical real estate climate index data from National Bureau of Statistics through AKShare. Returns monthly index values with period-over-period changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_real_estate_df = ak.macro_china_real_estate()\nprint(macro_china_real_estate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overflow Index with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the Overflow Index data from Caixin using the AKShare library. It returns historical data with date, index value, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_si_cx_df = ak.index_si_cx()\nprint(index_si_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weibo Stock Sentiment Report with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the ak.stock_js_weibo_report() function to fetch recent stock sentiment data from Weibo. It takes a 'time_period' parameter to specify the time range and returns a DataFrame with stock names and popularity ratings.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_js_weibo_report_df = ak.stock_js_weibo_report(time_period=\"CNHOUR12\")\nprint(stock_js_weibo_report_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching 300ETF Option Volatility Index - Python\nDESCRIPTION: Retrieves the 300ETF option volatility index (QVIX) data using index_option_300etf_qvix API. Returns complete historical data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_300etf_qvix_df = ak.index_option_300etf_qvix()\nprint(index_option_300etf_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Shanghai Securities Fund Ratings via AKShare\nDESCRIPTION: Fetches fund ratings specifically from Shanghai Securities for a given date. Returns detailed rating information including 3-year and 5-year ratings, performance metrics, and fund details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_rating_sh_df = ak.fund_rating_sh(date='20230630')\nprint(fund_rating_sh_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Bull-Bear Line Ranking (Long Side) for Futures in Python Using AKShare\nDESCRIPTION: This code shows how to fetch the Bull-Bear line ranking for the bullish side of futures contracts on a specific date. The 'variety_niuxiong_top' endpoint with 'long' field parameter returns contracts with the strongest bullish signals.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_niuxiong_long_top_df = pro.variety_niuxiong_top(fields=\"long\", date=\"2018-08-08\")\nprint(variety_niuxiong_long_top_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Interest Rate Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian central bank interest rate decisions using the macro_canada_bank_rate function from AKShare library. Returns historical interest rate data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_184\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_bank_rate_df = ak.macro_canada_bank_rate()\nprint(macro_canada_bank_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Technology Input Index with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the Technology Input Index data from Caixin using the AKShare library. It returns historical data with date, index value, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_ti_cx_df = ak.index_ti_cx()\nprint(index_ti_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Convertible Bond Forced Redemption Data with AKShare in Python\nDESCRIPTION: This snippet demonstrates how to use the AKShare library to retrieve forced redemption data for convertible bonds. It uses the bond_cb_redeem_jsl function to fetch data including bond code, name, current price, redemption trigger price, and redemption status.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_cb_redeem_jsl_df = ak.bond_cb_redeem_jsl()\nprint(bond_cb_redeem_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eurozone Quarterly Employment Change Data\nDESCRIPTION: This function fetches Eurozone seasonally adjusted employment change quarter-over-quarter data from 2008 to present. The data includes actual values, forecast values, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_147\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_employment_change_qoq_df = ak.macro_euro_employment_change_qoq()\nprint(macro_euro_employment_change_qoq_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Spot-Futures Comparison Data from 100ppi using AKShare\nDESCRIPTION: This code demonstrates how to retrieve spot-futures comparison data from the 100ppi website using AKShare. It fetches data for a specific commodity and indicator, showing market prices for spot and futures contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_spot_sys_df = ak.futures_spot_sys(symbol=\"铜\", indicator=\"市场价格\")\nprint(futures_spot_sys_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output Format for Currency Conversion Result\nDESCRIPTION: Shows the expected output format from the currency_convert function. The result is a DataFrame containing timestamp, date, source currency, target currency, original amount, and converted value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n        item                value\n0  timestamp  2023-07-24 11:31:20\n1       date           2023-07-24\n2       from                  USD\n3         to                  CNY\n4     amount                10000\n5      value            71898.995\n```\n\n----------------------------------------\n\nTITLE: Retrieving Air Quality Data for Cities Across China using AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch a list of all cities with available air quality data across China using the AKShare library. It returns a DataFrame with information such as province, city, AQI, air quality level, and primary pollutants.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nair_city_table_df = ak.air_city_table()\nprint(air_city_table_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Index Weights Data with AKShare API\nDESCRIPTION: This code demonstrates how to retrieve the weight distribution of components in a specific index on a given date. The function requires both an index ID and a date parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_weights_df = pro.index_weights(index_id=\"index0070c0eb-93ba-2da9-6633-fa70cb90e959\", date=\"2018-08-08\")\nprint(index_weights_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Celebrity Commercial Value Data with AKShare\nDESCRIPTION: This endpoint accesses celebrity commercial value metrics which are calculated based on professional standing, attention level, forecast popularity, and reputation. The data provides a comprehensive view of celebrities' commercial potential in the entertainment industry.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbusiness_value_artist_df = ak.business_value_artist()\nprint(business_value_artist_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Australia Trade Balance with akshare\nDESCRIPTION: Retrieves historical Australia trade balance data from East Money website. Returns a dataframe with timestamps, previous values (in 100M AUD), current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_174\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_trade_df = ak.macro_australia_trade()\nprint(macro_australia_trade_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Repo Rate Data with AKShare\nDESCRIPTION: This code shows how to use the repo_rate_query function from AKShare to retrieve recent repo rate data for a specified symbol. The function accepts one of two symbol choices (\"回购定盘利率\" or \"银银间回购定盘利率\") and returns recent rate data including FR001, FR007, and FR014 metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nrepo_rate_query_df = ak.repo_rate_query(symbol=\"回购定盘利率\")\nprint(repo_rate_query_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Stock Fund Position Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the ak.fund_stock_position_lg() function from AKShare to retrieve stock fund position data. It returns historical data including dates, CSI 300 closing prices, and holding percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_stock_position_lg_df = ak.fund_stock_position_lg()\nprint(fund_stock_position_lg_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching SWS Weekly Index Analysis Data with Python\nDESCRIPTION: Retrieves weekly index analysis data from Shenwan Research. Supports different index types including market representation, primary/secondary industries, and style indices. Returns metrics like closing index, trading volume, P/E ratio, and market cap.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_analysis_weekly_sw_df = ak.index_analysis_weekly_sw(symbol=\"市场表征\", date=\"20241025\")\nprint(index_analysis_weekly_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Contract Details with AkShare\nDESCRIPTION: Demonstrates how to use the futures_contract_detail function to retrieve detailed information about a specific futures contract from Sina Finance. It requires specifying a contract symbol as input parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_detail_df = ak.futures_contract_detail(symbol='V2001')\nprint(futures_contract_detail_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Baltic Clean Tanker Index (BCTI) Data with AKShare in Python\nDESCRIPTION: This function retrieves historical Baltic Clean Tanker Index (BCTI) data from East Money. It returns a DataFrame with date, latest value, change percentage, and 3-month, 6-month, 1-year, 2-year, and 3-year change percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_shipping_bcti_df = ak.macro_shipping_bcti()\nprint(macro_shipping_bcti_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Long-Hu Ratio Ranking (Short Side) for Futures in Python Using AKShare\nDESCRIPTION: This code retrieves the Long-Hu ratio ranking for the short side of futures positions on a specific date. The 'variety_longhu_top' endpoint with 'short' field parameter returns contracts with the strongest short positions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_longhu_short_top_df = pro.variety_longhu_top(fields=\"short\", date=\"2018-08-08\")\nprint(variety_longhu_short_top_df)\n```\n\n----------------------------------------\n\nTITLE: Getting China Stock Market Statistics via AKShare\nDESCRIPTION: Retrieves comprehensive stock market statistics including market cap, trading volume and index data for Shanghai and Shenzhen exchanges via AKShare.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_stock_market_cap_df = ak.macro_china_stock_market_cap()\nprint(macro_china_stock_market_cap_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Data for CNI Indices with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the index_hist_cni function from AKShare to fetch historical price data for a specific CNI index. It requires an index symbol and date range as inputs, returning a DataFrame with daily price and volume data for the specified period.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_hist_cni_df = ak.index_hist_cni(symbol=\"399005\", start_date=\"20230114\", end_date=\"20240114\")\nprint(index_hist_cni_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing US Core PPI Data with AkShare\nDESCRIPTION: Python code to retrieve US Core PPI report data using the macro_usa_core_ppi function. Returns percentage values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_117\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_core_ppi_df = ak.macro_usa_core_ppi()\nprint(macro_usa_core_ppi_df)\n```\n\n----------------------------------------\n\nTITLE: Data Example for Single Futures Contract Real-time Data\nDESCRIPTION: Example output data from the futures_zh_spot function showing real-time market data for a single PVC futures contract, including price, volume, and trading information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_39\n\nLANGUAGE: text\nCODE:\n```\n    symbol    time    open  ...  avg_price  last_close  last_settle_price\n0  PVC2205  151039  8280.0  ...     8449.0      8423.0             8397.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank of Japan Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the Bank of Japan using the macro_bank_japan_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_japan_interest_rate_df = ak.macro_bank_japan_interest_rate()\nprint(macro_bank_japan_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Car Category Market Data from CPCA\nDESCRIPTION: Fetches market data for different vehicle categories like sedans, MPVs and SUVs with wholesale/retail options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_market_cate_cpca_df = ak.car_market_cate_cpca(symbol=\"轿车\", indicator=\"批发\")\nprint(car_market_cate_cpca_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hog Market Cost Dimension Results\nDESCRIPTION: Example output from the futures_hog_cost API showing the date-value structure of returned data for corn prices as a cost factor in hog farming.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_70\n\nLANGUAGE: text\nCODE:\n```\n           date  value\n0    2023-03-18   2915\n1    2023-03-19   2895\n2    2023-03-20   2874\n3    2023-03-21   2903\n4    2023-03-22   2891\n..          ...    ...\n362  2024-03-14   2474\n363  2024-03-15   2486\n364  2024-03-16   2473\n365  2024-03-17   2471\n366  2024-03-18   2462\n[367 rows x 2 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Stock Index Data from Sina Finance\nDESCRIPTION: This code demonstrates how to retrieve historical US stock index data from Sina Finance using the index_us_stock_sina function. It accepts a symbol parameter for different US indices like S&P 500 (.INX), NASDAQ (.IXIC), etc.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_us_stock_sina_df = ak.index_us_stock_sina(symbol=\".INX\")\nprint(index_us_stock_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Futures Commission Data Sample\nDESCRIPTION: Shows the expected output format of the futures_comm_info function, displaying commission fees and margin requirements for various futures contracts from different exchanges.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n         交易所名称          合约名称  ...                  手续费更新时间                   价格更新时间\n0      上海期货交易所        沪银2404  ...  2024-04-15 22:59:13.785  2024-04-15 22:58:45.832\n1      上海期货交易所        沪银2405  ...  2024-04-15 22:59:13.785  2024-04-15 22:58:45.832\n2      上海期货交易所        沪银2406  ...  2024-04-15 22:59:13.785  2024-04-15 22:58:45.832\n3      上海期货交易所        沪银2407  ...  2024-04-15 22:59:13.785  2024-04-15 22:58:45.832\n4      上海期货交易所        沪银2408  ...  2024-04-15 22:59:13.785  2024-04-15 22:58:45.832\n..         ...           ...  ...                      ...                      ...\n695  中国金融期货交易所  30年期国债期货2409  ...  2024-04-15 22:59:37.599  2024-04-15 22:58:45.832\n696  中国金融期货交易所  30年期国债期货2412  ...  2024-04-15 22:59:37.599  2024-04-15 22:58:45.832\n697  中国金融期货交易所     2年期国债2406  ...  2024-04-15 22:59:37.599  2024-04-15 22:58:45.832\n698  中国金融期货交易所     2年期国债2409  ...  2024-04-15 22:59:37.599  2024-04-15 22:58:45.832\n699  中国金融期货交易所     2年期国债2412  ...  2024-04-15 22:59:37.599  2024-04-15 22:58:45.832\n[700 rows x 21 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Stock Holdings Data from CNINFO\nDESCRIPTION: Fetches fund stock holdings data from CNINFO API. Takes a date parameter in YYYYMMDD format and returns details like stock codes, names, number of funds holding, and total holdings value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_report_stock_cninfo_df = ak.fund_report_stock_cninfo(date=\"20210630\")\nprint(fund_report_stock_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reserve Bank of Australia Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the Reserve Bank of Australia using the macro_bank_australia_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_australia_interest_rate_df = ak.macro_bank_australia_interest_rate()\nprint(macro_bank_australia_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Position Data with AKShare API in Python\nDESCRIPTION: Example code demonstrating how to use the broker_positions API to retrieve position data for a specific broker on a given date. The API requires a token that can be obtained from the Qihuo Kecha website administrator.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_positions_df = pro.broker_positions(broker=\"永安期货\", date=\"2018-08-08\")\nprint(broker_positions_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving EastMoney LOF Fund Real-time Data in Python\nDESCRIPTION: This code retrieves real-time LOF fund data from EastMoney financial platform using AKShare library. The function returns comprehensive market data including price, change amount, change percentage, trading volume and other metrics for all LOF funds.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lof_spot_em_df = ak.fund_lof_spot_em()\nprint(fund_lof_spot_em_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Contract Quote Data with AKShare API\nDESCRIPTION: Shows how to retrieve market quotes data for a specific contract using variety_quotes API. Returns OHLC, volume and open interest data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_quotes_df = pro.variety_quotes(code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_quotes_df)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python in R using Reticulate\nDESCRIPTION: R code for loading the Reticulate package and specifying the Python executable to use. This sets up the Python-R bridge for using AKShare.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nlibrary(reticulate)\nuse_python(\"/usr/local/bin/python\")\n```\n\n----------------------------------------\n\nTITLE: Fetching 300ETF Option Volatility Index Intraday - Python\nDESCRIPTION: Retrieves intraday 300ETF option volatility index data using index_option_300etf_min_qvix API. Returns latest trading day's minute-level data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_option_300etf_min_qvix_df = ak.index_option_300etf_min_qvix()\nprint(index_option_300etf_min_qvix_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hog Spot Price Index with AKShare API\nDESCRIPTION: Fetches the hog market price index data including index values, moving averages, pre-sale average prices, transaction average prices, and transaction average weights.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_hog_spot_price_df = ak.index_hog_spot_price()\nprint(index_hog_spot_price_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Options Statistics from Shanghai Stock Exchange\nDESCRIPTION: This function retrieves daily statistics for options trading from the Shanghai Stock Exchange for a specified date. The returned data includes number of contracts, total transaction value, trading volume, and open interest information for different underlying assets.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_daily_stats_sse_df = ak.option_daily_stats_sse(date=\"20240626\")\nprint(option_daily_stats_sse_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving European and American Indices QDII Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the qdii_e_index_jsl function from AKShare to retrieve T+0 QDII data for European and American indices. The function returns a DataFrame containing comprehensive market data including fund codes, prices, premium rates, and fund details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qdii/qdii.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nqdii_e_index_jsl_df = ak.qdii_e_index_jsl()\nprint(qdii_e_index_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sina Futures Main Continuous Contract List with AKShare\nDESCRIPTION: This code snippet shows how to use the futures_display_main_sina function to retrieve a list of all available futures continuous contracts from Sina Finance. It returns a DataFrame with symbol, exchange, and name information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_display_main_sina_df = ak.futures_display_main_sina()\nprint(futures_display_main_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Insurance Industry Operation Data with AkShare\nDESCRIPTION: This code retrieves comprehensive historical data on China's insurance industry operations. The returned DataFrame includes metrics such as premium income, claims paid, and assets across different insurance types, measured in 10,000 yuan.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_insurance_df = ak.macro_china_insurance()\nprint(macro_china_insurance_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bond Market Spot Deal Information with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the bond_spot_deal function from AKShare to fetch bond market spot transaction data from the China Foreign Exchange Trade System. The function returns all current spot market transaction data with no required parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_spot_deal_df = ak.bond_spot_deal()\nprint(bond_spot_deal_df)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pandas Display Settings for AKShare Data\nDESCRIPTION: Python code to configure Pandas display settings for better visualization of AKShare data. Sets options for alignment, maximum columns and rows display.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/answer.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport akshare as ak\n# 列名与数据对其显示\npd.set_option('display.unicode.ambiguous_as_wide', True)\npd.set_option('display.unicode.east_asian_width', True)\n# 显示所有列\npd.set_option('display.max_columns', None)\n# 显示所有行\npd.set_option('display.max_rows', None)\n\nstock_zh_index_daily_df = ak.stock_zh_index_daily(symbol=\"sz399552\")\nprint(stock_zh_index_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Calling AKShare with Parameters in MATLAB\nDESCRIPTION: Example of calling the stock_zh_a_hist function from AKShare in MATLAB with parameters to retrieve historical A-share stock data. Parameters are passed in sequence without using named arguments.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_11\n\nLANGUAGE: matlab\nCODE:\n```\n% 注意其中的传参方式，从左到右，依次传递参数，形参（及其'='）都不需要，参数必须按顺序传递\npy.akshare.stock_zh_a_hist(\"000001\", \"daily\", \"20170301\", '20210907\", \"\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Housing Starts Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian new housing starts data using the macro_canada_new_house_rate function from AKShare library. Returns historical housing start statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_180\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_new_house_rate_df = ak.macro_canada_new_house_rate()\nprint(macro_canada_new_house_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China Securities Commodity Index Data\nDESCRIPTION: Shows how to use the futures_index_ccidx function to retrieve daily data for specific commodity indices from China Securities Index Co. The function requires a symbol parameter to specify which index to query.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_index_ccidx_df = ak.futures_index_ccidx(symbol=\"中证商品期货指数\")\nprint(futures_index_ccidx_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Eurozone Monthly Retail Sales Data\nDESCRIPTION: This function retrieves Eurozone retail sales month-over-month data from 2000 to present. It provides current values, forecast values, and previous values expressed as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_146\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_retail_sales_mom_df = ak.macro_euro_retail_sales_mom()\nprint(macro_euro_retail_sales_mom_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CNIndex Historical Adjustments - Python\nDESCRIPTION: Retrieves historical adjustment data for CNIndex samples using index_detail_hist_adjust_cni API. Requires index symbol as input.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_detail_hist_adjust_cni_df = ak.index_detail_hist_adjust_cni(symbol='399005')\nprint(index_detail_hist_adjust_cni_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hong Kong Interbank Rates with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_hk_market_info function from AKShare to retrieve Hong Kong interbank rates. The function returns historical data from March 20, 2017 to the present, including overnight, 1-week, 2-week, and various other term rates along with their daily changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_74\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_market_info_df = ak.macro_china_hk_market_info()\nprint(macro_china_hk_market_info_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Net Position Data with AKShare API\nDESCRIPTION: Demonstrates querying net position data for a specific broker and commodity using variety_net_positions API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_net_positions_df = pro.variety_net_positions(symbol=\"RB\", broker=\"永安期货\", date=\"2018-08-08\")\nprint(variety_net_positions_df)\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation\nDESCRIPTION: Chronological list of version updates and changes to the AKShare library, including bug fixes and new feature additions for various financial data interfaces.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/changelog.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1.14.83 fix: fix stock_comment_detail_zhpj_lspf_em interface\n1.14.82 fix: fix stock_comment_detail_scrd_desire_daily_em interface\n1.14.81 fix: fix stock_hsgt_hist_em interface\n[...continued version history...]\n```\n\n----------------------------------------\n\nTITLE: Fetching Keqiao Fashion Index Data with AKShare\nDESCRIPTION: This function retrieves data for the specified Keqiao Fashion Index. It requires the 'symbol' parameter to specify which index to fetch. The function returns a DataFrame with date, index value, change value, and change percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nindex_kq_fashion_df = ak.index_kq_fashion(symbol='柯桥时尚指数')\nprint(index_kq_fashion_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from CPCA New Energy Market Data API\nDESCRIPTION: Example of the returned dataframe from the car_market_fuel_cpca function, showing monthly data for both current and previous years. The data represents new energy vehicle market statistics with values in units of 10,000 vehicles.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n     月份    2023年    2024年\n0    1月  33.1542  66.7653\n1    2月  43.9068  38.8294\n2    3月  54.6472      NaN\n3    4月  52.4730      NaN\n4    5月  57.9938      NaN\n5    6月  66.5066      NaN\n6    7月  64.1005      NaN\n7    8月  71.6335      NaN\n8    9月  74.6305      NaN\n9   10月  77.1797      NaN\n10  11月  84.0500      NaN\n11  12月  94.7347      NaN\n```\n\n----------------------------------------\n\nTITLE: Retrieving Convertible Bond Details from THS with AKShare\nDESCRIPTION: This function retrieves comprehensive information about convertible bonds from the TongHuaShun data platform, including bond codes, application dates, conversion prices, and more. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_cov_info_ths_df = ak.bond_zh_cov_info_ths()\nprint(bond_zh_cov_info_ths_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Member Information from China Securities Investment Fund Association with AKShare\nDESCRIPTION: This code demonstrates how to use the amac_member_info function to retrieve comprehensive information about member institutions from China Securities Investment Fund Association. It returns details such as member names, types, numbers, and joining dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_member_info_df = ak.amac_member_info()\nprint(amac_member_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hong Kong GDP Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the macro_china_hk_gbp function from AKShare to fetch Hong Kong's GDP data. It returns historical GDP values in hundred million Hong Kong dollars.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_92\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_gbp_df = ak.macro_china_hk_gbp()\nprint(macro_china_hk_gbp_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Analysis Data from XueQiu\nDESCRIPTION: API to fetch fund analysis data including risk-return ratios, volatility and Sharpe ratios from XueQiu platform.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_individual_analysis_xq_df = ak.fund_individual_analysis_xq(symbol=\"000001\")\nprint(fund_individual_analysis_xq_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US ISM Non-Manufacturing PMI Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_usa_ism_non_pmi function from AKShare to retrieve historical US ISM Non-Manufacturing PMI data. The function returns a DataFrame with columns for date, current value, forecast, and previous value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_126\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_ism_non_pmi_df = ak.macro_usa_ism_non_pmi()\nprint(macro_usa_ism_non_pmi_df)\n```\n\n----------------------------------------\n\nTITLE: PyBroker Backtest Results Output\nDESCRIPTION: This shell output shows the backtest results for the PyBroker strategy, displaying various performance metrics including trade counts, profit/loss statistics, win rates, and risk metrics rounded to 4 decimal places.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/demo.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nLoading bar data...\nLoaded bar data: 0:00:00\nBacktesting: 2020-01-31 00:00:00 to 2023-02-28 00:00:00\nLoading bar data...\nLoaded bar data: 0:00:00\nTest split: 2020-02-03 00:00:00 to 2023-02-28 00:00:00\n100% (748 of 748) |######################| Elapsed Time: 0:00:00 Time:  0:00:00\nFinished backtest: 0:00:03\n                      name        value\n0              trade_count     373.0000\n1     initial_market_value  500000.0000\n2         end_market_value  467328.0900\n3                total_pnl  -33322.7800\n4           unrealized_pnl     650.8700\n5         total_return_pct      -6.6646\n6             total_profit  530528.5100\n7               total_loss -563851.2900\n8               total_fees       0.0000\n9             max_drawdown -113004.2700\n10        max_drawdown_pct     -20.2704\n11                win_rate      45.9215\n12               loss_rate      54.0785\n13          winning_trades     152.0000\n14           losing_trades     179.0000\n15                 avg_pnl     -89.3372\n16          avg_return_pct      -0.0160\n17          avg_trade_bars       1.0000\n18              avg_profit    3490.3191\n19          avg_profit_pct       0.6958\n20  avg_winning_trade_bars       1.0000\n21                avg_loss   -3150.0072\n22            avg_loss_pct      -0.6241\n23   avg_losing_trade_bars       1.0000\n24             largest_win   31157.9400\n25         largest_win_pct       5.9200\n26        largest_win_bars       1.0000\n27            largest_loss  -12682.6000\n28        largest_loss_pct      -2.3100\n29       largest_loss_bars       1.0000\n30                max_wins       8.0000\n31              max_losses       7.0000\n32                  sharpe      -0.0132\n33                 sortino      -0.0231\n34           profit_factor       0.9638\n35             ulcer_index       1.7639\n36                     upi      -0.0039\n37               equity_r2       0.5876\n38               std_error   27448.1177\n```\n\n----------------------------------------\n\nTITLE: Converting AKShare DataFrame to MATLAB Format\nDESCRIPTION: Example of importing AKShare, calling a data interface, and converting the returned Pandas DataFrame to a MATLAB-compatible data structure using the py2matlab helper function.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_13\n\nLANGUAGE: matlab\nCODE:\n```\n% 导入 AKShare 库\nak = py.importlib.import_module('akshare');\n% 代用 AKShare 数据接口\ntemp_df = ak.stock_zh_a_hist();\n% 转化数据格式\ndf = py2matlab(temp_df);\n% 展示获取到本地的数据\ndisp(df)\n```\n\n----------------------------------------\n\nTITLE: Data Example for China Financial Futures Exchange Contract Information\nDESCRIPTION: Example output data from the futures_contract_info_cffex function showing contract details including code, month, price limits, listing date, and more for multiple contracts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n        合约代码    合约月份    挂盘基准价 上市日  ...  跌停板价位 持仓限额 品种  查询交易日\n0           TS2409  2409  100.974  2023-12-11  ...  101.056  2000  TS  2024-02-28\n1           TS2406  2406  101.065  2023-09-11  ...  101.020  2000  TS  2024-02-28\n2           TS2403  2403  101.145  2023-06-12  ...  100.858  2000  TS  2024-02-28\n3           TL2409  2409   99.330  2023-12-11  ...  102.990  2000  TL  2024-02-28\n4           TL2406  2406   98.750  2023-09-11  ...  102.870  2000  TL  2024-02-28\n..             ...   ...      ...         ...  ...      ...   ...  ..         ...\n831  HO2403-C-2075  2403  193.200  2023-12-18  ...   83.800  1200  HO  2024-02-28\n832  HO2403-C-2050  2403  253.400  2023-12-06  ...  115.000  1200  HO  2024-02-28\n833  HO2403-C-2025  2403  234.800  2023-12-18  ...  133.600  1200  HO  2024-02-28\n834  HO2403-C-2000  2403  286.200  2023-12-08  ...  158.600  1200  HO  2024-02-28\n835  HO2403-C-1975  2403  241.200  2024-01-18  ...  189.600  1200  HO  2024-02-28\n[836 rows x 12 columns]\n```\n\n----------------------------------------\n\nTITLE: Fetching Weekly Inventory Report from Shanghai Futures Exchange using AKShare\nDESCRIPTION: This code retrieves the weekly inventory report from the Shanghai Futures Exchange using AKShare. It fetches data for a specific date and displays information about various commodities, including their futures quantities and changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_stock_shfe_js_df = ak.futures_stock_shfe_js(date=\"20240419\")\nprint(futures_stock_shfe_js_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving AI Strategy Index Data with AKShare\nDESCRIPTION: This code fetches the AI strategy index data from Caixin using the index_ai_cx function from the akshare library. It returns historical data containing date, AI strategy index value, and change percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_ai_cx_df = ak.index_ai_cx()\nprint(index_ai_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shanghai Pledged Repo Market Data with AKShare\nDESCRIPTION: This function retrieves market data for the Shanghai Stock Exchange pledged repo market, including pricing and volume information. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_sh_buy_back_em_df = ak.bond_sh_buy_back_em()\nprint(bond_sh_buy_back_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Hog Price Rankings by Province\nDESCRIPTION: This code retrieves real-time hog price rankings for different provinces in China from soozhu.com using the spot_hog_soozhu function. No parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_hog_soozhu_df = ak.spot_hog_soozhu()\nprint(spot_hog_soozhu_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Digital Economy Index with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the Digital Economy Index data from Caixin using the AKShare library. It returns historical data with date, index value, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_dei_cx_df = ak.index_dei_cx()\nprint(index_dei_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Convertible Bond Issuance Data using AKShare\nDESCRIPTION: Retrieves data on convertible bond issuances from CNINFO via AKShare. Takes start and end dates as parameters. Returns comprehensive information including issuance details, conversion prices and dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_cov_issue_cninfo_df = ak.bond_cov_issue_cninfo(start_date=\"20210913\", end_date=\"20211112\")\nprint(bond_cov_issue_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fama-French Current Research Returns in Python using AKShare\nDESCRIPTION: This snippet shows how to fetch Fama-French multi-factor data using the article_ff_crr function from AKShare. The function returns a dataframe containing various factors such as Rm-Rf, SMB, HML, RMW, and CMA, along with their values over different time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/article/article.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\narticle_ff_crr_df = ak.article_ff_crr()\nprint(article_ff_crr_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Convertible Bond Profile Data from Sina Finance\nDESCRIPTION: Uses the bond_cb_profile_sina function to fetch detailed profile information for a specific convertible bond from Sina Finance. The data includes bond name, code, issue details, maturity dates, interest rates and credit rating.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_cb_profile_sina_df = ak.bond_cb_profile_sina(symbol=\"sz128039\")\nprint(bond_cb_profile_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving US Import Price Index with akshare\nDESCRIPTION: This code demonstrates how to use the macro_usa_import_price function from the akshare library to retrieve historical US import price index data. Returns data from 1989 to present with actual values, forecasts, and previous values as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_import_price_df = ak.macro_usa_import_price()\nprint(macro_usa_import_price_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graded Fund Historical Data in Python\nDESCRIPTION: Fetches historical data for a specific graded fund using its symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_graded_fund_info_em_df = ak.fund_graded_fund_info_em(symbol=\"150232\")\nprint(fund_graded_fund_info_em_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Stock Index Long Flow Data with AKShare API\nDESCRIPTION: Retrieves daily net long flow data for stock indices using the stock_flow_long API. Requires an API token and accepts a date parameter. Returns broker positions, money flow amounts and index codes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fund.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nstock_flow_long_df = pro.stock_flow_long(date=\"2018-08-08\")\nprint(stock_flow_long_df)\n```\n\n----------------------------------------\n\nTITLE: AKShare Version Number and Update Notes\nDESCRIPTION: The updates log shows version increments from 1.4.99 to 1.5.90, documenting fixes and additions to data collection interfaces for stocks, bonds, commodities, and macroeconomic indicators.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.5.90 fix: fix macro_china_bond_public interface\n1.5.89 fix: fix stock_info_sh_name_code interface\n1.5.88 fix: fix stock_board_concept_name_ths interface\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monthly Sunrise and Sunset Data in Python using AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch monthly sunrise and sunset data for a specified city and date using the AKShare library. It returns a DataFrame with detailed information including sunrise, sunset, twilight times, and solar noon data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nsunrise_monthly_df = ak.sunrise_monthly(date=\"20240428\", city=\"beijing\")\nprint(sunrise_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Net Margin Data with AKShare API\nDESCRIPTION: Shows how to retrieve net margin data for a contract using variety_net_money API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_net_money_df = pro.variety_net_money(code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_net_money_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss GDP QoQ Data with AKShare\nDESCRIPTION: Fetches historical GDP quarter-over-quarter growth data for Switzerland from EastMoney. Returns quarterly time series with previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_159\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_swiss_gdp_quarterly_df = ak.macro_swiss_gdp_quarterly()\nprint(macro_swiss_gdp_quarterly_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample Output of East Money Global Index Historical Data\nDESCRIPTION: This displays sample output from the index_global_hist_em function, showing historical data for the Dollar Index (美元指数) including date, code, name, open, close, high, low, and amplitude values from 1986 to 2025.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n          日期   代码    名称     今开     最新价   最高     最低    振幅\n0      1986-01-09  UDI  美元指数  124.18  123.21  124.71  122.91  0.00\n1      1986-01-10  UDI  美元指数  123.98  124.16  124.27  123.46  0.66\n2      1986-01-13  UDI  美元指数  124.82  124.47  125.21  124.23  0.79\n3      1986-01-14  UDI  美元指数  124.75  124.67  124.91  124.38  0.43\n4      1986-01-15  UDI  美元指数  124.64  124.30  124.64  124.07  0.46\n...           ...  ...   ...     ...     ...     ...     ...   ...\n10027  2025-03-03  UDI  美元指数  107.38  106.54  107.41  106.42  0.92\n10028  2025-03-04  UDI  美元指数  106.55  105.55  106.66  105.52  1.07\n10029  2025-03-05  UDI  美元指数  105.56  104.32  105.78  104.26  1.44\n10030  2025-03-06  UDI  美元指数  104.34  104.20  104.39  103.74  0.62\n10031  2025-03-07  UDI  美元指数  104.23  103.63  104.25  103.55  0.67\n[10032 rows x 8 columns]\n```\n\n----------------------------------------\n\nTITLE: Accessing AKShare macroeconomic data in MATLAB\nDESCRIPTION: MATLAB command to fetch macroeconomic data from China National Bureau of Statistics using AKShare, showing how to access data without parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_10\n\nLANGUAGE: matlab\nCODE:\n```\npy.akshare.macro_cnbs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shenzhen Stock Market Margin Trading Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the macro_china_market_margin_sz function from AKShare to fetch historical data on margin trading in the Shenzhen stock market. The function returns data from March 31, 2010 to the present, including financing amounts, securities lending volumes, and balances.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_77\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_market_margin_sz_df = ak.macro_china_market_margin_sz()\nprint(macro_china_market_margin_sz_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Convertible Bond Conversion Data with AKShare\nDESCRIPTION: Fetches data on convertible bond conversions from CNINFO using AKShare. Does not require any input parameters. Returns information like bond codes, conversion prices, dates, and underlying stocks.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nbond_cov_stock_issue_cninfo_df = ak.bond_cov_stock_issue_cninfo()\nprint(bond_cov_stock_issue_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing In-Quota Imported Sugar Estimation Index with AKShare\nDESCRIPTION: This function retrieves the In-Quota Imported Sugar Estimation Index from the Msweet Technology Data Center. It returns a DataFrame with various sugar-related metrics and moving averages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nindex_inner_quote_sugar_msweet_df = ak.index_inner_quote_sugar_msweet()\nprint(index_inner_quote_sugar_msweet_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caixin Services PMI Data with AKShare in Python\nDESCRIPTION: Function to obtain Caixin China Services PMI data. The function requires no parameters and returns a DataFrame with dates, PMI values, and change values for the services sector.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_pmi_ser_cx_df = ak.index_pmi_ser_cx()\nprint(index_pmi_ser_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Open-End Fund Rankings using AKShare\nDESCRIPTION: Retrieves open-end fund ranking data through fund_open_fund_rank_em() function. Takes a fund type parameter and returns detailed performance metrics including NAV, returns over various periods, and fees.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_open_fund_rank_em_df = ak.fund_open_fund_rank_em(symbol=\"全部\")\nprint(fund_open_fund_rank_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China Sugar Index Data using AKShare\nDESCRIPTION: This function fetches the China Sugar Index data from the Msweet Technology Data Center. It returns a DataFrame containing dates, comprehensive prices, raw sugar prices, and spot prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nindex_sugar_msweet_df = ak.index_sugar_msweet()\nprint(index_sugar_msweet_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shenzhen Carbon Trading Data with AKShare\nDESCRIPTION: Fetches all historical carbon emission trading data from Shenzhen Carbon Exchange. Returns detailed market data including opening/closing prices, trading volume and amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nenergy_carbon_sz_df = ak.energy_carbon_sz()\nprint(energy_carbon_sz_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving FX Speculative Sentiment Reports with AKShare\nDESCRIPTION: This code fetches currency pair speculative sentiment data using the ak.macro_fx_sentiment() function. It requires specifying start and end dates within the last 30 trading days, and returns sentiment data in 10-minute intervals for various currency pairs including AUDJPY, EURUSD, GBPUSD, and more.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fx/fx.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nfrom datetime import datetime\n\ntest_date = datetime.now().date().isoformat().replace(\"-\", \"\")\nmacro_fx_sentiment_df = ak.macro_fx_sentiment(start_date=test_date, end_date=test_date)\nprint(macro_fx_sentiment_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Currency Exchange Rate Time Series Data Sample\nDESCRIPTION: Shows the format of data returned by the currency_time_series function, with dates as rows and currencies as columns, displaying the exchange rate values over the specified time period.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n          date       ADA     AED  ...        ZMW    ZWD         ZWL\n0   2023-02-03  2.501764  3.6725  ...  19.217069  361.9  804.930876\n1   2023-02-04  2.523126  3.6725  ...  19.190104  361.9  804.930876\n2   2023-02-05  2.548544  3.6725  ...  19.359966  361.9  804.898394\n3   2023-02-06  2.588994  3.6725  ...  19.211667  361.9  812.084265\n4   2023-02-07  2.503360  3.6725  ...  19.163126  361.9  816.624716\n5   2023-02-08  2.615068  3.6725  ...  19.276132  361.9  831.793316\n6   2023-02-09  2.772723  3.6725  ...  19.298303  361.9  833.966241\n7   2023-02-10  2.767700  3.6725  ...  19.377991  361.9  839.246195\n8   2023-02-11  2.736774  3.6725  ...  19.360544  361.9  839.246195\n9   2023-02-12  2.748749  3.6725  ...  19.316502  361.9  839.264194\n10  2023-02-13  2.803486  3.6725  ...  19.196452  361.9  846.084936\n11  2023-02-14  2.587805  3.6725  ...  19.375476  361.9  850.135849\n12  2023-02-15  2.443325  3.6725  ...  19.341588  361.9  856.219979\n13  2023-02-16  2.523309  3.6725  ...  19.494675  361.9  860.307069\n14  2023-02-17  2.474066  3.6725  ...  19.654148  361.9  863.222832\n15  2023-02-18  2.487758  3.6725  ...  19.470201  361.9  863.222832\n16  2023-02-19  2.485208  3.6725  ...  19.340051  361.9  863.295153\n17  2023-02-20  2.487952  3.6725  ...  19.516557  361.9  893.102417\n18  2023-02-21  2.582063  3.6725  ...  19.524095  361.9  893.264541\n19  2023-02-22  2.552943  3.6725  ...  19.613078  361.9  873.680243\n20  2023-02-23  2.621636  3.6725  ...  19.684268  361.9  873.836274\n21  2023-02-24  2.745342  3.6725  ...  19.739989  361.9  894.480661\n22  2023-02-25  2.765595  3.6725  ...  19.820979  361.9  894.480661\n23  2023-02-26  2.737813  3.6725  ...  19.767109  361.9  894.489801\n24  2023-02-27  2.738002  3.6725  ...  19.749675  361.9  886.192242\n25  2023-02-28  2.797012  3.6725  ...  19.865244  361.9  889.436788\n26  2023-03-01  2.803997  3.6725  ...  19.959017  361.9  892.608637\n27  2023-03-02  2.980559  3.6725  ...  20.006057  361.9  898.930254\n28  2023-03-03  2.925695  3.6725  ...  20.023367  361.9  899.419086\n29  2023-03-04  2.939316  3.6725  ...  20.100199  361.9  899.419086\n[30 rows x 221 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Huatai Borai CSI 300ETF Options Data with AKShare\nDESCRIPTION: This code demonstrates how to retrieve financial options market data for Huatai Borai CSI 300ETF options using the option_finance_board function from akshare. It specifies the symbol and expiration month (December 2022) as parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"华泰柏瑞沪深300ETF期权\", end_month=\"2212\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Historical Currency Exchange Rate Data Sample\nDESCRIPTION: Shows the format of data returned by the currency_history function, including the currency code, date, base currency, and historical exchange rates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    currency       date base         rates\n0        ADA 2023-02-03  USD      2.501764\n1        AED 2023-02-03  USD      3.672500\n2        AFN 2023-02-03  USD     89.667343\n3        ALL 2023-02-03  USD    107.092799\n4        AMD 2023-02-03  USD    395.155660\n..       ...        ...  ...           ...\n215      ZAR 2023-02-03  USD     17.470971\n216      ZMK 2023-02-03  USD  19217.069221\n217      ZMW 2023-02-03  USD     19.217069\n218      ZWD 2023-02-03  USD    361.900000\n219      ZWL 2023-02-03  USD    804.930876\n[220 rows x 4 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZZ1000 Index Option Daily Historical Data with AKShare\nDESCRIPTION: This code shows how to fetch daily historical trading data for a specific ZZ1000 index option contract from CFFEX. It returns OHLC prices and trading volume for the specified contract symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_zz1000_daily_sina_df = ak.option_cffex_zz1000_daily_sina(symbol=\"mo2208P6200\")\nprint(option_cffex_zz1000_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Closed-End Fund Scale Data - Python Implementation\nDESCRIPTION: Gets scale data for all closed-end funds from Sina Finance, including fund codes, names, NAV, fund size and other key metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_scale_close_sina_df = ak.fund_scale_close_sina()\nprint(fund_scale_close_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CFTC Non-Commercial Currency Holdings Report using AKShare\nDESCRIPTION: This code snippet shows how to use the macro_usa_cftc_nc_holding function from AKShare to retrieve the CFTC Non-Commercial Currency Holdings report. The function returns historical data from 1983-01-07 to the present, including long and short positions for various currencies.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_195\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_cftc_nc_holding_df = ak.macro_usa_cftc_nc_holding()\nprint(macro_usa_cftc_nc_holding_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Corn Price Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the spot_corn_price_soozhu function from AKShare to retrieve national corn price trend data from the Soozhu platform. It returns approximately 15 days of historical data with date and price columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_corn_price_soozhu_df = ak.spot_corn_price_soozhu()\nprint(spot_corn_price_soozhu_df)\n```\n\nLANGUAGE: output\nCODE:\n```\n         日期    价格\n0   2024-07-27  2.50\n1   2024-07-28  2.47\n2   2024-07-29  2.51\n3   2024-07-30  2.45\n4   2024-07-31  2.43\n5   2024-08-01  2.41\n6   2024-08-02  2.45\n7   2024-08-03  2.52\n8   2024-08-04  2.36\n9   2024-08-05  2.45\n10  2024-08-06  2.45\n11  2024-08-07  2.46\n12  2024-08-08  2.40\n13  2024-08-09  2.45\n14  2024-08-10  2.57\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Economic Index Data with AKShare\nDESCRIPTION: This code fetches the basic economic index data from Caixin using the index_bei_cx function from the akshare library. It returns historical data containing date, basic economic index value, and change percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_bei_cx_df = ak.index_bei_cx()\nprint(index_bei_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Spot-Stock Relationship Data for Commodities\nDESCRIPTION: Shows how to retrieve data on the relationship between spot commodities and related stocks using the futures_spot_stock function. The data comes from East Money and provides information about commodity prices and their producers/consumers.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_spot_stock_df = ak.futures_spot_stock(symbol=\"能源\")\nprint(futures_spot_stock_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CSI 300 Index Option Contracts List from CFFEX via Sina Finance\nDESCRIPTION: This code demonstrates how to retrieve the list of all CSI 300 Index Option contracts from CFFEX using Sina Finance data. The function returns a dictionary with the contract codes, with the first contract being the main contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_hs300_list_sina_df = ak.option_cffex_hs300_list_sina()\nprint(option_cffex_hs300_list_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time-Range Basis Data with AKShare\nDESCRIPTION: Fetches commodity futures spot prices and basis data for a specified time period using the futures_spot_price_daily function. This method allows filtering by specific commodity variables and date range, providing a targeted historical basis analysis.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_spot_price_daily_df = ak.futures_spot_price_daily(start_day=\"20240415\", end_day=\"20240418\", vars_list=[\"CU\", \"RB\"])\nprint(futures_spot_price_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domestic Carbon Trading Data with AKShare\nDESCRIPTION: Fetches historical domestic carbon emission trading data from tanjiaoyi.com. Takes a symbol parameter to specify the trading region and returns date, price, volume and amount data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nenergy_carbon_domestic_df = ak.energy_carbon_domestic(symbol=\"湖北\")\nprint(energy_carbon_domestic_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Profit Data with AKShare API in Python\nDESCRIPTION: This code snippet demonstrates how to fetch profit data for a specific commodity variety and date using AKShare's Pro API. The data includes profit value and profit rate information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nprofit_df = pro.profit(variety=\"RB\", date=\"2019-12-12\")\nprint(profit_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Commodity Spot Price Trends with AKShare\nDESCRIPTION: This snippet demonstrates how to use the spot_price_qh function to retrieve historical spot price data for a specified commodity from 99qh.com. It requires the symbol parameter to specify the commodity.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_price_qh_df = ak.spot_price_qh(symbol='螺纹钢')\nprint(spot_price_qh_df)\n```\n\n----------------------------------------\n\nTITLE: Installing Wheel for lxml Dependency\nDESCRIPTION: Command to install the wheel package as a prerequisite for installing lxml, which is a dependency of AKShare. This should be run in the Windows command prompt.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install wheel\n```\n\n----------------------------------------\n\nTITLE: Displaying COMEX Inventory Data Results\nDESCRIPTION: Example output from the futures_comex_inventory API showing the structure of returned data with columns for index, date, and inventory quantities in both tons and ounces.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_66\n\nLANGUAGE: text\nCODE:\n```\n     序号      日期  COMEX白银库存量-吨  COMEX白银库存量-盎司\n0        1  2018-11-15    249.638588   8.026061e+06\n1        2  2018-11-16    249.638588   8.026061e+06\n2        3  2018-11-19    249.618620   8.025419e+06\n3        4  2018-11-20    249.318222   8.015761e+06\n4        5  2018-11-21    249.318222   8.015761e+06\n    ...         ...           ...            ...\n1244  1245  2023-11-08    618.567383   1.988739e+07\n1245  1246  2023-11-09    618.564383   1.988729e+07\n1246  1247  2023-11-10    618.462382   1.988401e+07\n1247  1248  2023-11-13    618.461542   1.988399e+07\n1248  1249  2023-11-14    618.461542   1.988399e+07\n[1249 rows x 4 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving UK Halifax Annual House Price Index with AkShare\nDESCRIPTION: Fetches historical data of UK Halifax annual house price index from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_169\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_uk_halifax_yearly_df = ak.macro_uk_halifax_yearly()\nprint(macro_uk_halifax_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Australia Monthly Retail Sales Rate with akshare\nDESCRIPTION: Retrieves historical Australia retail sales monthly rate data from East Money website. Returns a dataframe with timestamps, previous values, current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_173\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_retail_rate_monthly_df = ak.macro_australia_retail_rate_monthly()\nprint(macro_australia_retail_rate_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: AKShare Financial Data Function Names\nDESCRIPTION: List of function names for accessing financial market data through AKShare, including stock data, futures data, macro indicators, and market metrics. Each function name is paired with its Chinese description in comments.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"stock_register_db\"  # 注册制审核-达标企业\n\"stock_zh_a_new\"  # 股票数据-次新股\n\"futures_comex_inventory\"  # COMEX库存数据\n\"macro_china_xfzxx\"  # 消费者信心指数\n\"macro_china_gyzjz\"  # 工业增加值增长\n\"macro_china_reserve_requirement_ratio\"  # 存款准备金率\n# ... additional function names omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Shenwan Index Data\nDESCRIPTION: API to retrieve real-time data for various Shenwan indices including market indicators, industry sectors, and style indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_realtime_sw_df = ak.index_realtime_sw(symbol=\"市场表征\")\nprint(index_realtime_sw_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shenwan First-Tier Industry Information with AkShare\nDESCRIPTION: This code retrieves information about Shenwan first-tier industry classifications. The returned data includes industry codes, names, number of constituent stocks, P/E ratios (static and TTM), P/B ratios, and dividend yields for each sector.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nsw_index_first_info_df = ak.sw_index_first_info()\nprint(sw_index_first_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Net Position Margin Data with AKShare API in Python\nDESCRIPTION: Example code demonstrating how to use the broker_net_money API to retrieve net position margin data for a specific broker on a given date. Positive values indicate net long positions, negative values indicate net short positions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_net_money_df = pro.broker_net_money(broker=\"永安期货\", date=\"2018-08-08\")\nprint(broker_net_money_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Zhengzhou Exchange Futures Contract Information\nDESCRIPTION: Retrieves detailed futures contract information from Zhengzhou Commodity Exchange (CZCE) for a specified date. Returns comprehensive contract specifications including trading parameters, fees and limits.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_info_czce_df = ak.futures_contract_info_czce(date=\"20240228\")\nprint(futures_contract_info_czce_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CBIRC Branch Administrative Penalties with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the 'bank_fjcf_table_detail' function from the AKShare library to fetch administrative penalty information from CBIRC branch offices. It retrieves data for the first 5 pages of branch-level penalties.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bank/bank.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbank_fjcf_table_detail_df = ak.bank_fjcf_table_detail(page=5, item=\"分局本级\")\nprint(bank_fjcf_table_detail_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Shenwan Second-Tier Industry Information with AkShare\nDESCRIPTION: This code retrieves information about Shenwan second-tier industry classifications. The returned data includes industry codes, names, parent industries, number of constituent stocks, P/E ratios, P/B ratios, and dividend yields for each sector.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nsw_index_second_info_df = ak.sw_index_second_info()\nprint(sw_index_second_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bond Investment Personnel Information with AKShare\nDESCRIPTION: This code demonstrates using the amac_person_bond_org_list function to fetch information about organizations with bond investment and trading personnel. The function returns organization names, types, and public disclosure URLs.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_person_bond_org_list_df = ak.amac_person_bond_org_list()\nprint(amac_person_bond_org_list_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Technical Indicators for Futures in Python Using AKShare\nDESCRIPTION: This code demonstrates how to access proprietary technical indicators (Long-Hu Ratio and Bull-Bear Line) for a futures contract on a specific date. The 'variety_strategies' endpoint requires contract code and date parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_strategies_df = pro.variety_strategies(code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_strategies_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Guangzhou Exchange Futures Contract Information\nDESCRIPTION: Retrieves futures contract information from Guangzhou Futures Exchange (GFEX) for the most recent trading day. Returns contract specifications for lithium carbonate and industrial silicon futures.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_info_gfex_df = ak.futures_contract_info_gfex()\nprint(futures_contract_info_gfex_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Regional Oil Price Data\nDESCRIPTION: This code snippet shows the sample output data returned by the energy_oil_detail API. The data includes regional oil prices across China, showing prices for different fuel types (0# diesel, 92# gasoline, 95# gasoline, 89# gasoline) along with price changes and previous prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n            日期   地区       V_0      V_92  ...      QE_0     QE_92     QE_95     QE_89\n0   2024-01-18   上海  7.300000  8.120000  ...  7.340000  7.670000  8.160000  7.150000\n1   2024-01-18   云南  7.391245  8.382528  ...  7.433895  7.850000  8.425648  7.229800\n2   2024-01-18  内蒙古  7.190000  8.110000  ...  7.230000  7.640000  8.150000       NaN\n3   2024-01-18   北京  7.370000  8.160000  ...  7.410000  7.700000  8.200000  7.210000\n4   2024-01-18   吉林  7.240000  8.230000  ...  7.280000  7.670000  8.270000       NaN\n5   2024-01-18   四川  7.370000  8.290000  ...  7.410000  7.800000  8.340000  7.240000\n6   2024-01-18   天津  7.320000  8.090000  ...  7.360000  7.700000  8.130000  7.140000\n7   2024-01-18   宁夏  7.200000  7.990000  ...  7.250000  7.600000  8.030000  7.170000\n8   2024-01-18   安徽  7.360000  8.160000  ...  7.400000  7.660000  8.200000  7.180000\n9   2024-01-18   山东  7.230000  8.180000  ...  7.280000  7.670000  8.230000  7.120000\n10  2024-01-18   山西  7.390000  8.220000  ...  7.430000  7.650000  8.260000  7.160000\n11  2024-01-18   广东  7.330000  8.320000  ...  7.370000  7.720000  8.370000  7.170000\n12  2024-01-18   广西  7.380000  8.340000  ...  7.420000  7.760000  8.390000  7.230000\n13  2024-01-18   新疆  7.100000  8.010000  ...  7.140000  7.530000  8.050000       NaN\n14  2024-01-18   江苏  7.280000  8.120000  ...  7.320000  7.670000  8.160000  7.190000\n15  2024-01-18   江西  7.370000  8.180000  ...  7.410000  7.660000  8.230000  7.120000\n16  2024-01-18   河北  7.320000  8.090000  ...  7.360000  7.700000  8.130000  7.140000\n17  2024-01-18   河南  7.300000  8.190000  ...  7.350000  7.710000  8.230000       NaN\n18  2024-01-18   浙江  7.300000  8.120000  ...  7.340000  7.670000  8.160000  7.120000\n19  2024-01-18   海南  7.400000  9.320000  ...  7.450000  8.820000  9.370000  8.130000\n20  2024-01-18   湖北  7.310000  8.210000  ...  7.350000  7.710000  8.260000       NaN\n21  2024-01-18   湖南  7.385677  8.093585  ...  7.428818  7.653788  8.135849  7.172131\n22  2024-01-18   甘肃  7.220000  8.180000  ...  7.260000  7.700000  8.220000  7.120000\n23  2024-01-18   福建  7.310000  8.150000  ...  7.350000  7.670000  8.190000  7.140000\n24  2024-01-18   西藏  7.860000  9.030000  ...  7.900000  8.580000  9.080000  8.100000\n25  2024-01-18   贵州  7.420000  8.230000  ...  7.470000  7.830000  8.280000  7.390000\n26  2024-01-18   辽宁  7.220000  8.300000  ...  7.260000  7.850000  8.350000       NaN\n27  2024-01-18   重庆  7.390000  8.160000  ...  7.430000  7.770000  8.210000  7.340000\n28  2024-01-18   陕西  7.210000  7.980000  ...  7.250000  7.590000  8.020000  7.160000\n29  2024-01-18   青海  7.240000  8.170000  ...  7.280000  7.660000  8.210000  7.190000\n30  2024-01-18  黑龙江  7.160000  8.210000  ...  7.210000  7.730000  8.250000       NaN\n[31 rows x 14 columns]\n```\n\n----------------------------------------\n\nTITLE: Querying UK Unemployment Rate with akshare\nDESCRIPTION: Retrieves historical UK unemployment rate data from East Money website. Returns a dataframe with timestamps, previous values, current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_172\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_uk_unemployment_rate_df = ak.macro_uk_unemployment_rate()\nprint(macro_uk_unemployment_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss CPI YoY Data with AKShare\nDESCRIPTION: Fetches historical Consumer Price Index year-over-year data for Switzerland from EastMoney. Returns quarterly time series with previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_158\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_swiss_cpi_yearly_df = ak.macro_swiss_cpi_yearly()\nprint(macro_swiss_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency Basic Information\nDESCRIPTION: Fetches basic information about currencies using the currency_currencies function. Requires an API key from currencyscoop.com and allows filtering by currency type.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncurrency_currencies_df = ak.currency_currencies(c_type=\"fiat\", api_key=\"此处输入 API\")\nprint(currency_currencies_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Capital Input Index with AKShare\nDESCRIPTION: This code snippet shows how to retrieve the Capital Input Index data from Caixin using the AKShare library. The function returns all historical data including date, index value, and change value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_ci_cx_df = ak.index_ci_cx()\nprint(index_ci_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weekly Cinema Box Office Data with AKShare\nDESCRIPTION: This endpoint retrieves weekly box office data for cinemas on a specified date. The data includes rankings, cinema names, weekly box office earnings, and various cinema performance metrics. The date parameter should be provided in 'YYYYMMDD' format.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_cinema_weekly_df = ak.movie_boxoffice_cinema_weekly(date=\"20240219\")\nprint(movie_boxoffice_cinema_weekly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures-to-Spot Data from Shanghai Futures Exchange in Python\nDESCRIPTION: This code snippet demonstrates how to use the akshare library to fetch futures-to-spot transaction data from the Shanghai Futures Exchange for a specified trading month. It returns details such as contract, delivery volume, and futures-to-spot volume.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_to_spot_shfe_df = ak.futures_to_spot_shfe(date=\"202312\")\nprint(futures_to_spot_shfe_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Fund Manager Comprehensive Information with AKShare\nDESCRIPTION: This code demonstrates how to use the amac_manager_info function to retrieve comprehensive information about private fund managers. It returns details such as manager names, legal representatives, organization types, registration numbers, and dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_manager_info_df = ak.amac_manager_info()\nprint(amac_manager_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Free Spread Data with AKShare API in Python\nDESCRIPTION: This code snippet shows how to access free spread data between two different commodity contracts using AKShare's Pro API. It calculates the price difference between two different commodities.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nfree_spread_df = pro.free_spread(variety1=\"RB\", code1=\"01\", variety2=\"HC\", code2=\"01\", date=\"2018-08-08\")\nprint(free_spread_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Graded Fund Daily Data in Python\nDESCRIPTION: Accesses real-time data for graded funds from East Money, updated between 16:00-23:00 on trading days.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_graded_fund_daily_em_df = ak.fund_graded_fund_daily_em()\nprint(fund_graded_fund_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Data for a Specific Futures Product\nDESCRIPTION: This code demonstrates how to fetch real-time market data for a specific futures product ('white sugar' in this case) using the futures_zh_realtime function from AKShare. It returns detailed market information including prices, volumes, and positions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_zh_realtime_df = ak.futures_zh_realtime(symbol=\"白糖\")\nprint(futures_zh_realtime_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Shanghai Gold Benchmark Price History\nDESCRIPTION: This code retrieves the historical Shanghai Gold Benchmark Price data from the Shanghai Gold Exchange using the spot_golden_benchmark_sge function. No parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_golden_benchmark_sge_df = ak.spot_golden_benchmark_sge()\nprint(spot_golden_benchmark_sge_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trader Prices Data with AKShare API in Python\nDESCRIPTION: This code snippet shows how to access spot trader pricing data for a specific commodity variety and date using AKShare's Pro API. The data includes brand, model, and price information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\ntrader_prices_df = pro.trader_prices(variety=\"RB\", date=\"2020-03-30\")\nprint(trader_prices_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Fund Stock Holdings Data with AKShare in Python\nDESCRIPTION: This code snippet shows how to retrieve the stock holdings data for a specific fund using the AKShare library. It provides information about the stocks held by the fund, including stock codes, names, percentages, and market values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_portfolio_hold_em_df = ak.fund_portfolio_hold_em(symbol=\"000001\", date=\"2024\")\nprint(fund_portfolio_hold_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Dividend Rankings in Python using AKShare\nDESCRIPTION: Fetches fund dividend ranking data from East Money using the fund_fh_rank_em() function. Returns a DataFrame containing fund codes, names, cumulative dividends, dividend counts and establishment dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_fh_rank_em_df = ak.fund_fh_rank_em()\nprint(fund_fh_rank_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Index Historical Data from Sina Finance with AKShare\nDESCRIPTION: This snippet demonstrates how to fetch historical data for a global index from Sina Finance using the index_global_hist_sina function. It requires the index symbol as input (e.g., '瑞士股票指数') and returns a DataFrame with historical price and volume data, limited to 1000 records.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_global_hist_sina_df = ak.index_global_hist_sina(symbol=\"瑞士股票指数\")\nprint(index_global_hist_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank of England Interest Rate Decisions with AKShare in Python\nDESCRIPTION: Fetches historical interest rate decision data from the Bank of England using the macro_bank_english_interest_rate function. Returns a DataFrame with date, current, forecast, and previous interest rate values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/interest_rate/interest_rate.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_bank_english_interest_rate_df = ak.macro_bank_english_interest_rate()\nprint(macro_bank_english_interest_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Futures Inventory Data from EastMoney with AKShare\nDESCRIPTION: Retrieves futures inventory data from EastMoney (东方财富) for the last 60 trading days using the futures_inventory_em function. Returns daily inventory levels and changes for the specified symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_inventory_em_df = ak.futures_inventory_em(symbol=\"A\")\nprint(futures_inventory_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Net Position Margin Change Data with AKShare API in Python\nDESCRIPTION: Example code demonstrating how to use the broker_net_money_chge API to retrieve net position margin changes for a specific broker on a given date. Positive values indicate long positions, negative values indicate short positions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_net_money_chge_df = pro.broker_net_money_chge(broker=\"永安期货\", date=\"2018-08-08\")\nprint(broker_net_money_chge_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stock Index Information using AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the AKShare library to fetch information about stock indices. It imports the akshare module, calls the index_stock_info function, and prints the resulting DataFrame containing index codes, display names, and publish dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_stock_info_df = ak.index_stock_info()\nprint(index_stock_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LOF Fund 5-Minute Intraday Data with Adjustment\nDESCRIPTION: This snippet shows how to retrieve 5-minute interval LOF fund market data with back-adjustment (hfq) applied. It demonstrates fetching historical data for a specific date range using the fund_lof_hist_min_em function.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lof_hist_min_em_df = ak.fund_lof_hist_min_em(symbol=\"166009\", period=\"5\", adjust=\"hfq\", start_date=\"2023-07-01 09:32:00\", end_date=\"2023-07-04 14:40:00\")\nprint(fund_lof_hist_min_em_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Real-time Underlying Asset Data for Options from Sina Finance using AKShare in Python\nDESCRIPTION: This function fetches real-time data for the underlying asset of an option from Sina Finance. It requires the underlying asset symbol as input and returns various market data fields.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_sse_underlying_spot_price_sina_df = ak.option_sse_underlying_spot_price_sina(symbol=\"sh510300\")\nprint(option_sse_underlying_spot_price_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Using AKShare in R with Reticulate\nDESCRIPTION: Example R code demonstrating how to import AKShare in R using Reticulate and fetch stock data. Shows importing the package and calling a method with equivalent Python syntax.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nlibrary(reticulate)  # 导入 reticulate 包\nuse_python(\"/king/local/bin/python\")  # 其中的 king 为本地计算机用户名\n# use_condaenv(condaenv=\"ak_test\", required = TRUE)  # 也可以使用 conda 创建的虚拟环境，其中的 ak_test 为虚拟环境名称\nak <- import(\"akshare\")  # 类似于 import akshare as ak\nstock_df <- ak$stock_zh_a_hist()  # 类似于 ak.stock_zh_a_hist()\nhead(stock_df)  # 查看数据\n```\n\n----------------------------------------\n\nTITLE: Querying Australia Unemployment Rate with akshare\nDESCRIPTION: Retrieves historical Australia unemployment rate data from East Money website. Returns a dataframe with timestamps, previous values (in %), current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_175\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_unemployment_rate_df = ak.macro_australia_unemployment_rate()\nprint(macro_australia_unemployment_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hog Market Supply Dimension Results\nDESCRIPTION: Sample output from the futures_hog_supply API showing the date-value pair structure for wholesale pork prices as a supply dimension indicator.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_72\n\nLANGUAGE: text\nCODE:\n```\n          date  value\n0   2023-12-17  20.14\n1   2023-12-18  20.12\n2   2023-12-19  20.24\n3   2023-12-20  20.39\n4   2023-12-21  20.54\n..         ...    ...\n85  2024-03-11  19.89\n86  2024-03-12  19.96\n87  2024-03-13  20.01\n88  2024-03-14  20.12\n89  2024-03-15  20.27\n[90 rows x 2 columns]\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Retail Sales Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian monthly retail sales rate data using the macro_canada_retail_rate_monthly function from AKShare library. Returns historical retail sales statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_183\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_retail_rate_monthly_df = ak.macro_canada_retail_rate_monthly()\nprint(macro_canada_retail_rate_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing HS300 Index Option Daily Historical Data with AKShare\nDESCRIPTION: This code demonstrates how to retrieve daily historical trading data for a specific HS300 index option contract from CFFEX. It returns date, open, high, low, close prices and trading volume for the specified contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_hs300_daily_sina_df = ak.option_cffex_hs300_daily_sina(symbol=\"io2004C4450\")\nprint(option_cffex_hs300_daily_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hong Kong GDP Ratio with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_hk_gbp_ratio function from akshare to fetch Hong Kong's GDP ratio data. The API returns historical GDP data including previous value, current value, and publication date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_gbp_ratio_df = ak.macro_china_hk_gbp_ratio()\nprint(macro_china_hk_gbp_ratio_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching German Monthly Retail Sales with AKShare\nDESCRIPTION: Retrieves monthly retail sales data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_153\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_retail_sale_monthly_df = ak.macro_germany_retail_sale_monthly()\nprint(macro_germany_retail_sale_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Canceled Private Fund Manager List using AKShare in Python\nDESCRIPTION: This code snippet retrieves the list of canceled private fund managers from the China Securities Investment Fund Association using the amac_manager_cancelled_info function from the AKShare library. The API returns historical data including manager names, social credit codes, registration dates, cancellation dates, and cancellation types without requiring any input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_manager_cancelled_info_df = ak.amac_manager_cancelled_info()\nprint(amac_manager_cancelled_info_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time SSE 50 Index Option Quotes from CFFEX via Sina Finance\nDESCRIPTION: This code demonstrates how to retrieve real-time quotes for a specific SSE 50 Index Option contract from CFFEX via Sina Finance. The function requires a symbol parameter (contract code) and returns a DataFrame with bid/ask prices, volumes, and other market data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_cffex_sz50_spot_sina_df = ak.option_cffex_sz50_spot_sina(symbol=\"ho2303\")\nprint(option_cffex_sz50_spot_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying 99qh.com Inventory Data Sample\nDESCRIPTION: Shows the expected output format of the futures_inventory_99 function, displaying historical inventory data for soybean contracts including dates, closing prices, and inventory levels.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n         日期     收盘价     库存\n0     2005-01-14  3000.0  13107\n1     2005-01-21  2627.0  22695\n2     2005-01-28  2631.0  25031\n3     2005-02-04  2637.0  20023\n4     2005-02-18  2680.0  18454\n...          ...     ...    ...\n4014  2025-02-27  4232.0  37696\n4015  2025-02-28  4218.0  37696\n4016  2025-03-03  4239.0  37536\n4017  2025-03-04  4252.0  37536\n4018  2025-03-05  4175.0  37536\n[4019 rows x 3 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shenwan Third-Tier Industry Information with AkShare\nDESCRIPTION: This code fetches information about Shenwan third-tier industry classifications. The returned data includes industry codes, names, number of constituent stocks, P/E ratios, P/B ratios, and dividend yields for each detailed sector classification.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nsw_index_third_info_df = ak.sw_index_third_info()\nprint(sw_index_third_info_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Gold Price Data from Shanghai Gold Exchange\nDESCRIPTION: This code retrieves historical price data for a specified gold product from the Shanghai Gold Exchange using the spot_hist_sge function. The symbol parameter is required to specify the gold product.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_hist_sge_df = ak.spot_hist_sge(symbol='Au99.99')\nprint(spot_hist_sge_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Society Electricity Usage Data in Python using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_society_electricity function from the AKShare package to retrieve historical data on China's electricity usage across different sectors. The function requires no parameters and returns a DataFrame with comprehensive electricity consumption data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_society_electricity_df = ak.macro_china_society_electricity()\nprint(macro_china_society_electricity_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Profit/Loss Data for Futures Positions in Python Using AKShare\nDESCRIPTION: This code shows how to fetch profit/loss data for brokers' positions in a specific commodity futures contract over a date range. The 'variety_profit' endpoint takes symbol, start_date, and end_date parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_profit_df = pro.variety_profit(symbol=\"RB\", start_date=\"2018-02-08\", end_date=\"2018-08-08\")\nprint(variety_profit_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Financial Fund Historical Data in Python\nDESCRIPTION: Retrieves historical net value details for a specific financial fund using its symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_financial_fund_info_em_df = ak.fund_financial_fund_info_em(symbol=\"000134\")\nprint(fund_financial_fund_info_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hong Kong Unemployment Rate Data with AKShare in Python\nDESCRIPTION: This example demonstrates the use of the macro_china_hk_rate_of_unemployment function from AKShare to retrieve Hong Kong's unemployment rate data. It returns historical unemployment rates in percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_91\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_hk_rate_of_unemployment_df = ak.macro_china_hk_rate_of_unemployment()\nprint(macro_china_hk_rate_of_unemployment_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETF Cumulative Dividend Data from Sina Finance with AKShare in Python\nDESCRIPTION: This snippet shows how to use the fund_etf_dividend_sina function from AKShare to fetch cumulative dividend data for ETF funds from Sina Finance. It requires specifying the ETF symbol.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_dividend_sina_df = ak.fund_etf_dividend_sina(symbol=\"sh510050\")\nprint(fund_etf_dividend_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss SVME PMI Data with AKShare\nDESCRIPTION: Fetches historical SVME Purchasing Managers' Index data for Switzerland from EastMoney. Returns time series data with previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_156\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_swiss_svme_df = ak.macro_swiss_svme()\nprint(macro_swiss_svme_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Financial Fund Daily Data in Python\nDESCRIPTION: Gets real-time data for financial funds from East Money, updated between 16:00-23:00 on trading days.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_financial_fund_daily_em_df = ak.fund_financial_fund_daily_em()\nprint(fund_financial_fund_daily_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Swiss Trade Balance Data with AKShare\nDESCRIPTION: Fetches historical trade balance data for Switzerland from EastMoney. Returns quarterly time series with previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_157\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_swiss_trade_df = ak.macro_swiss_trade()\nprint(macro_swiss_trade_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Risk Analysis Data with AKShare\nDESCRIPTION: This snippet demonstrates how to use the option_risk_analysis_em function from AKShare to retrieve option risk analysis data from East Money. It returns a DataFrame containing various risk metrics for options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_risk_analysis_em_df = ak.option_risk_analysis_em()\nprint(option_risk_analysis_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving 嘉实沪深300ETF Option Data Using AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch options data for the 嘉实沪深300ETF (Harvest CSI 300 ETF) with a specified expiration month using the AKShare library. The returned dataframe contains information like contract code, contract name, underlying asset, option type, exercise price, and exercise dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"嘉实沪深300ETF期权\", end_month=\"2003\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Bloomberg Billionaires Index with AKShare in Python\nDESCRIPTION: This snippet shows how to use the ak.index_bloomberg_billionaires_hist() function to fetch historical Bloomberg Billionaires Index data for a specific year. It accepts a 'year' parameter and returns a DataFrame with billionaire rankings and details for that year.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_bloomberg_billionaires_hist_df=ak.index_bloomberg_billionaires_hist(year='2019')\nprint(index_bloomberg_billionaires_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vegetable Basket Price Index with AKShare\nDESCRIPTION: Fetches the vegetable basket price index from EastMoney. Returns historical data including date, latest value and percentage changes for different time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_vegetable_basket_df = ak.macro_china_vegetable_basket()\nprint(macro_china_vegetable_basket_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining FR007 Interest Rate Swap Curve Data with AkShare\nDESCRIPTION: This code retrieves FR007 interest rate swap curve historical data from China Money. The function requires start and end date parameters and returns data only for the most recent year, with each request limited to one month of data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_swap_rate_df = ak.macro_china_swap_rate(start_date=\"20240501\", end_date=\"20240531\")\nprint(macro_china_swap_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Calling AKShare in MATLAB without parameters\nDESCRIPTION: MATLAB command to call an AKShare function without parameters, demonstrating basic integration between MATLAB and AKShare.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_9\n\nLANGUAGE: matlab\nCODE:\n```\npy.akshare.stock_zh_a_hist\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exchange-Specific Position Rankings with AKShare\nDESCRIPTION: This code snippet shows the functions available in AKShare for retrieving position ranking tables from different Chinese futures exchanges: DCE (Dalian Commodity Exchange), CFFEX (China Financial Futures Exchange), CZCE (Zhengzhou Commodity Exchange), and SHFE (Shanghai Futures Exchange).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nak.get_dce_rank_table()\nak.get_cffex_rank_table()\nak.get_czce_rank_table()\nak.get_shfe_rank_table()\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Tax Receipts Data in Python with AKShare\nDESCRIPTION: This code fetches China's national tax receipts data using the macro_china_national_tax_receipts function from AKShare. The data spans from Q1 2005 to present, providing quarterly tax revenues in 100 million yuan, year-over-year changes, and quarter-over-quarter changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_national_tax_receipts_df = ak.macro_china_national_tax_receipts()\nprint(macro_china_national_tax_receipts_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching German Yearly CPI Data with AKShare\nDESCRIPTION: Retrieves historical yearly Consumer Price Index (CPI) data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_cpi_yearly_df = ak.macro_germany_cpi_yearly()\nprint(macro_germany_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Fund Practitioner Qualification Registration Information with AKShare\nDESCRIPTION: This code shows how to retrieve fund practitioner qualification registration information from China Securities Investment Fund Association. The function takes an organization type parameter and returns details about staff counts and qualification distributions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_person_fund_org_list_df = ak.amac_person_fund_org_list(symbol=\"公募基金管理公司\")\nprint(amac_person_fund_org_list_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Fund Split Data from East Money with AKShare in Python\nDESCRIPTION: This snippet shows how to use the fund_cf_em function from AKShare to fetch fund split data from East Money. It returns historical split information for all funds.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfund_cf_em_df = ak.fund_cf_em()\nprint(fund_cf_em_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Commodity Money Flow Data with AKShare API\nDESCRIPTION: Example of querying total money flow data for a commodity using variety_money API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_money_df = pro.variety_money(symbol=\"RB\", date=\"2018-08-08\")\nprint(variety_money_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Southern CSI 500ETF Options Data with AKShare\nDESCRIPTION: This code demonstrates how to retrieve financial options market data for Southern CSI 500ETF options using the option_finance_board function from akshare. It specifies the symbol and expiration month (June 2023) as parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_finance_board_df = ak.option_finance_board(symbol=\"南方中证500ETF期权\", end_month=\"2306\")\nprint(option_finance_board_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Information with AKShare API\nDESCRIPTION: This code snippet demonstrates how to use the AKShare pro_api to retrieve index information by providing an index ID. It requires a token that can be obtained from the QiHuo Kecha website administrators.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_info_df = pro.index_info(index_id=\"index0070c0eb-93ba-2da9-6633-fa70cb90e959\")\nprint(index_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Risk-Lab Realized Volatility Data in Python using AKShare\nDESCRIPTION: This code demonstrates how to use the article_rlab_rv function from AKShare to fetch realized volatility data from Risk-Lab for a specific index (39693). The function returns historical volatility data as a time series.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/article/article.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\narticle_rlab_rv_df = ak.article_rlab_rv(symbol=\"39693\")\nprint(article_rlab_rv_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Construction Materials Price Index with AKShare\nDESCRIPTION: Python function to get Construction Materials Price Index data from East Money. Returns historical price values and percentage changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_construction_price_index_df = ak.macro_china_construction_price_index()\nprint(macro_china_construction_price_index_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching SSE ETF Option Expiration Month List with AKShare\nDESCRIPTION: This code retrieves the list of available expiration months for SSE ETF options. It returns a list of expiration months for the specified ETF symbol (either 50ETF or 300ETF).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_sse_list_sina_df = ak.option_sse_list_sina(symbol=\"50ETF\", exchange=\"null\")\nprint(option_sse_list_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Environment in MATLAB\nDESCRIPTION: MATLAB command to set up and check the Python environment configuration, essential for calling AKShare from MATLAB.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_8\n\nLANGUAGE: matlab\nCODE:\n```\npyenv\n```\n\n----------------------------------------\n\nTITLE: Accessing Convertible Bond Summary Information from Sina Finance\nDESCRIPTION: Uses the bond_cb_summary_sina function to obtain summary information for a specific convertible bond. Returns bond type, interest payment method, coupon rate, issuance details, maturity information and other key metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_cb_summary_sina_df = ak.bond_cb_summary_sina(symbol=\"sh155255\")\nprint(bond_cb_summary_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Summarized Warehouse Receipt Data with AKShare API in Python\nDESCRIPTION: This code snippet demonstrates how to fetch summarized warehouse receipt data for all commodities on a specific date using AKShare's Pro API. It provides an overview of all commodities' warehouse receipts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nwarehouse_receipt_sum_df = pro.warehouse_receipt(date=\"2018-08-08\")\nprint(warehouse_receipt_sum_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chinese Fiscal Revenue Data with AKShare\nDESCRIPTION: Function to fetch China's fiscal revenue data from EastMoney. Returns monthly data from 2008 onwards including current month revenue and year-over-year changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_czsr_df = ak.macro_china_czsr()\nprint(macro_china_czsr_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hurun Global Unicorn List Data using AKShare\nDESCRIPTION: Demonstrates fetching Hurun's global unicorn company rankings using the hurun_rank API. Returns unicorn company valuations and details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nhurun_rank_df = ak.hurun_rank(indicator=\"胡润全球独角兽榜\", year=\"2023\")\nprint(hurun_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Financial Fund Rankings using AKShare\nDESCRIPTION: Retrieves financial fund ranking data using fund_lcx_rank_em(). Returns fund codes, names, yields and performance metrics, though currently limited due to source data availability.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lcx_rank_em_df = ak.fund_lcx_rank_em()\nprint(fund_lcx_rank_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Mobile Phone Shipment Data with AKShare\nDESCRIPTION: Retrieves historical mobile phone shipment data from EastMoney. Returns data including date, latest value, and percentage changes across various time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_mobile_number_df = ak.macro_china_mobile_number()\nprint(macro_china_mobile_number_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Data from Shanghai Futures Exchange with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the option_shfe_daily function from AKShare to retrieve aluminum options data from the Shanghai Futures Exchange for a specific date. The function returns two dataframes: one with contract-level details and another with implied volatility reference values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_shfe_daily_one, option_shfe_daily_two = ak.option_shfe_daily(symbol=\"铝期权\", trade_date=\"20200827\")\nprint(option_shfe_daily_one)\nprint(option_shfe_daily_two)\n```\n\n----------------------------------------\n\nTITLE: Getting Exchange-Traded Fund Rankings via AKShare\nDESCRIPTION: Obtains exchange-traded fund ranking data using fund_exchange_rank_em(). Returns fund codes, names, types, NAV and historical performance metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_exchange_rank_em_df = ak.fund_exchange_rank_em()\nprint(fund_exchange_rank_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Personnel Announcements with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the ak.fund_announcement_personnel_em() function from AKShare to fetch fund personnel announcements. It requires a fund symbol as input and returns data including fund code, announcement title, fund name, announcement date, and report ID.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_announcement_personnel_em_df = ak.fund_announcement_personnel_em(symbol=\"000001\")\nprint(fund_announcement_personnel_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commodity Index Data with AKShare\nDESCRIPTION: This code fetches the commodity index data from Caixin using the index_cci_cx function from the akshare library. It returns historical data containing date, commodity index value, and change value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_cci_cx_df = ak.index_cci_cx()\nprint(index_cci_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Index Data from Tencent with AKShare\nDESCRIPTION: This snippet shows how to use the stock_zh_index_daily_tx function to fetch historical data for a specific stock index from Tencent. The symbol parameter determines which index to retrieve.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nstock_zh_index_daily_tx_df = ak.stock_zh_index_daily_tx(symbol=\"sh000919\")\nprint(stock_zh_index_daily_tx_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Short Position Contract Pool in Python using AKShare API\nDESCRIPTION: Example of using the pro_api function to access the short_pool endpoint. This code retrieves short position contract data for a specific date using the token-based authentication system. Returns a DataFrame with symbol and code columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/tools.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nshort_pool_df = pro.short_pool(date=\"2018-08-08\")\nprint(short_pool_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China's Road Logistics Price Index with AKShare in Python\nDESCRIPTION: Function to fetch China's road logistics price index data. It accepts a symbol parameter to specify the frequency of the index (weekly, monthly, quarterly, or yearly) and returns a DataFrame with base indices, chain relativity, and year-on-year values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_price_cflp_df = ak.index_price_cflp(symbol=\"周指数\")\nprint(index_price_cflp_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Construction Materials Index with AKShare\nDESCRIPTION: Python function to retrieve Construction Materials Index data from East Money. Returns historical values and percentage changes across multiple time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_construction_index_df = ak.macro_china_construction_index()\nprint(macro_china_construction_index_df)\n```\n\n----------------------------------------\n\nTITLE: Getting Bull-Bear Ratio Data with AKShare API\nDESCRIPTION: Shows how to access bull-bear ratio data for a specific contract using variety_bbr API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_bbr_df = pro.variety_bbr(code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_bbr_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asian Indices QDII Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the qdii_a_index_jsl function from AKShare to retrieve T+0 QDII data for Asian market indices. The function returns a DataFrame containing comprehensive market data including fund codes, prices, premium rates, and fund details for Asian market-focused funds.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qdii/qdii.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nqdii_a_index_jsl_df = ak.qdii_a_index_jsl()\nprint(qdii_a_index_jsl_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shenzhen Pledged Repo Market Data with AKShare\nDESCRIPTION: This function retrieves market data for the Shenzhen Stock Exchange pledged repo market, including pricing and volume information. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_sz_buy_back_em_df = ak.bond_sz_buy_back_em()\nprint(bond_sz_buy_back_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Data from Zhengzhou Commodity Exchange with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the option_czce_daily function from AKShare to retrieve sugar options data from the Zhengzhou Commodity Exchange for a specific date. The function returns a dataframe containing contract-level details including prices, volumes, and implied volatility.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_czce_daily_df = ak.option_czce_daily(symbol=\"白糖期权\", trade_date=\"20240711\")\nprint(option_czce_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Variety Show Statistics with AKShare\nDESCRIPTION: This endpoint retrieves popularity metrics for variety shows including broadcast index, media popularity, user popularity, ratings, and viewership data. The data represents the previous day's statistics with no input parameters required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nvideo_variety_show_df = ak.video_variety_show()\nprint(video_variety_show_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving China's Social Transportation Volume Data with AKShare\nDESCRIPTION: This snippet demonstrates how to use the macro_china_society_traffic_volume function from AKShare to fetch data on China's social transportation volume. The function returns a DataFrame containing various transportation metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_58\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_society_traffic_volume_df = ak.macro_china_society_traffic_volume()\nprint(macro_china_society_traffic_volume_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Economy Industry Average Wage with AKShare\nDESCRIPTION: This code snippet shows how to retrieve the New Economy Industry Average Wage data from Caixin using the AKShare library. It returns historical data with date, wage level, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_neaw_cx_df = ak.index_neaw_cx()\nprint(index_neaw_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Updating R to the latest version in Windows\nDESCRIPTION: R code for updating R to the latest version in Windows using the installr package. This is needed before integrating AKShare with R.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages('installr')\nlibrary(installr)\nupdateR()\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare using Anaconda with Aliyun mirror\nDESCRIPTION: Command to install AKShare package using Aliyun mirror specifically for Anaconda environments. Includes user-specific installation flag.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/answer.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com  --user  --upgrade\n```\n\n----------------------------------------\n\nTITLE: Retrieving Urban Unemployment Data with AKShare\nDESCRIPTION: Function to access urban unemployment survey data from National Bureau of Statistics, breaking down rates by age groups and registration status.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_urban_unemployment_df = ak.macro_china_urban_unemployment()\nprint(macro_china_urban_unemployment_df)\n```\n\n----------------------------------------\n\nTITLE: Importing AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to import the AKShare library in a Python script. It uses the standard import statement and assigns an alias 'ak' for convenience.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n```\n\n----------------------------------------\n\nTITLE: AKShare Version History Notes\nDESCRIPTION: Chronological list of version changes documenting interface fixes and additions across multiple financial data endpoints\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/changelog.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1.12.78 fix: fix stock_info_sh_delist interface\n1.12.77 fix: fix futures_contract_info_shfe interface\n1.12.76 fix: fix bond_zh_hs_spot interface\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Profit Data with AKShare API in Python\nDESCRIPTION: This code demonstrates how to use the pro_api function from AKShare to retrieve index profit data. It requires an API token from the provider and accepts parameters for index_id, start_date, and end_date to filter the results.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_profit_df = pro.index_profit(index_id=\"index0070c0eb-93ba-2da9-6633-fa70cb90e959\", start_date=\"2018-07-08\", end_date=\"2018-08-08\")\nprint(index_profit_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Bank Financial Product Issuance Data in Python with AKShare\nDESCRIPTION: This code retrieves data on the number of financial products issued by Chinese banks using the macro_china_bank_financing function from AKShare. The dataset spans from March 2000 to present, including current values and percentage changes across different time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_bank_financing_df = ak.macro_china_bank_financing()\nprint(macro_china_bank_financing_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keqiao Textile Prosperity Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the textile prosperity index data from Keqiao Textile Index using the AKShare library. The function returns a DataFrame containing period information, total prosperity index, circulation prosperity index, and production prosperity index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_kq_fz_df = ak.index_kq_fz(symbol=\"景气指数\")\nprint(index_kq_fz_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Delivery Statistics from Zhengzhou Commodity Exchange in Python\nDESCRIPTION: This code snippet demonstrates how to use the akshare library to fetch delivery statistics from the Zhengzhou Commodity Exchange for a specified trading day. It returns data on commodity type, delivery volume, and delivery amount.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_delivery_monthly_czce_df = ak.futures_delivery_czce(date=\"20210112\")\nprint(futures_delivery_monthly_czce_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Out-of-Quota Imported Sugar Estimation Index using AKShare\nDESCRIPTION: This function accesses the Out-of-Quota Imported Sugar Estimation Index from the Msweet Technology Data Center. It returns a DataFrame with import costs, profit margins, and spot prices for Brazilian and Thai sugar.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nindex_outer_quote_sugar_msweet_df = ak.index_outer_quote_sugar_msweet()\nprint(index_outer_quote_sugar_msweet_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank Bond Issuance Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the bond_debt_nafmii function from AKShare to retrieve bank bond issuance registration information from the Non-financial Enterprise Debt Financing Instrument Registration System. The function requires a page parameter to specify which page of data to retrieve.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_debt_nafmii_df = ak.bond_debt_nafmii(page=\"2\")\nprint(bond_debt_nafmii_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Long Position Contract Pool in Python using AKShare API\nDESCRIPTION: Example of using the pro_api function to access the long_pool endpoint. This code retrieves long position contract data for a specific date using the token-based authentication system. Returns a DataFrame with symbol and code columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/tools.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nlong_pool_df = pro.long_pool(date=\"2018-08-08\")\nprint(long_pool_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ETF Historical Price Data with AkShare (Non-adjusted)\nDESCRIPTION: Uses the fund_etf_hist_em function to fetch non-adjusted historical price data for ETF funds. The function requires a symbol code, period type, start and end dates, and returns a DataFrame with price and trading information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_hist_em_df = ak.fund_etf_hist_em(symbol=\"513500\", period=\"daily\", start_date=\"20000101\", end_date=\"20230201\", adjust=\"\")\nprint(fund_etf_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Economy Wage Premium with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the New Economy Wage Premium data from Caixin using the AKShare library. It returns historical data with date, premium level, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_awpr_cx_df = ak.index_awpr_cx()\nprint(index_awpr_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minute-Level Options Quotes with AKShare\nDESCRIPTION: This function retrieves minute-level options quote data from East Money for a specified symbol. It returns a DataFrame with time, close, high, low, volume, and amount data for the given option contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\noption_minute_em_df = ak.option_minute_em(symbol=\"MO2402-C-5400\")\nprint(option_minute_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Money Data for Futures Contracts in Python Using AKShare\nDESCRIPTION: This code demonstrates how to use the pro_api function from AKShare to fetch total money data for a specific futures contract on a given date. The 'variety_total_money' endpoint requires a token, contract code, and date parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_total_money_df = pro.variety_total_money(code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_total_money_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Quotes Data with AKShare API\nDESCRIPTION: This code fetches market quotes data for a specific index on a given date, including volume, open interest, price, and bull-bear ratio information. It requires an index ID and date parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_quotes_df = pro.index_quotes(index_id=\"index0070c0eb-93ba-2da9-6633-fa70cb90e959\", date=\"2018-08-08\")\nprint(index_quotes_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weekly Box Office Data in Python using AKShare\nDESCRIPTION: This function fetches weekly box office data for movies based on a specified date. It returns information such as ranking, movie name, weekly box office, cumulative box office, and other performance metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_weekly_df = ak.movie_boxoffice_weekly(date=\"20240218\")\nprint(movie_boxoffice_weekly_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Broker Total Margin Data in Python with AKShare\nDESCRIPTION: This code snippet demonstrates how to retrieve the total margin data for a specific broker on a given date using the broker_total_money function from AKShare API. It requires a token for authentication and returns a DataFrame with symbol and value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_total_money_df = pro.broker_total_money(broker=\"永安期货\", date=\"2018-08-08\")\nprint(broker_total_money_df)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Insurance Premium Income Data in Python with AKShare\nDESCRIPTION: This code fetches China's original insurance premium income data using the macro_china_insurance_income function from AKShare. The dataset covers from July 2004 to present, providing current values and percentage changes over various time periods.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_insurance_income_df = ak.macro_china_insurance_income()\nprint(macro_china_insurance_income_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Minute-level Historical Data for Chinese Convertible Bonds with AKShare\nDESCRIPTION: This code retrieves minute-level historical data for a specific Chinese convertible bond. It accepts parameters for the bond symbol, time period (1, 5, 15, 30, or 60 minutes), price adjustment method, and date range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_cov_min_df = ak.bond_zh_hs_cov_min(symbol=\"sz123124\", period='1', adjust='', start_date=\"1979-09-01 09:32:00\", end_date=\"2222-01-01 09:32:00\")\nprint(bond_zh_hs_cov_min_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Yiwu Electronic Components Index with AKShare\nDESCRIPTION: Python function to fetch Yiwu Small Commodities Electronic Components Index data from East Money. Returns historical daily values and percentage changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_yw_electronic_index_df = ak.macro_china_yw_electronic_index()\nprint(macro_china_yw_electronic_index_df)\n```\n\n----------------------------------------\n\nTITLE: Getting US Real Consumer Spending Data with AkShare\nDESCRIPTION: Python code to access US real consumer spending quarterly rate data using the macro_usa_real_consumer_spending function. Returns data in percentage format.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_real_consumer_spending_df = ak.macro_usa_real_consumer_spending()\nprint(macro_usa_real_consumer_spending_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Labor Input Index with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the Labor Input Index data from Caixin using the AKShare library. It returns historical data with date, index value, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_li_cx_df = ak.index_li_cx()\nprint(index_li_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching CNI Index Sample Details with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the index_detail_cni function from AKShare to retrieve detailed information about the constituent samples of a CNI index. It requires an index symbol and a specific date as inputs, returning a DataFrame with information about each constituent stock, including code, name, industry, and weight.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_detail_cni_df = ak.index_detail_cni(symbol='399001', date='202404')\nprint(index_detail_cni_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caixin Composite PMI Data with AKShare in Python\nDESCRIPTION: Function to obtain Caixin China Composite PMI data. The function requires no parameters and returns a DataFrame with dates, PMI values, and change values for the composite PMI index.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_pmi_com_cx_df = ak.index_pmi_com_cx()\nprint(index_pmi_com_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Brokers Data with Ratings in Python with AKShare\nDESCRIPTION: This code retrieves information about all brokers that have appeared on the top/bottom lists within a specified time period using broker_all function. It returns a DataFrame with broker names and profit ratings from A (best) to E (worst).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_all_df = pro.broker_all(offset_days=\"365\")\nprint(broker_all_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Quality Factor Index Data with AKShare\nDESCRIPTION: This code fetches the quality factor index data from Caixin using the index_qli_cx function from the akshare library. It returns historical data containing date, quality factor index value, and change percentage.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_qli_cx_df = ak.index_qli_cx()\nprint(index_qli_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beijing Carbon Trading Data with AKShare\nDESCRIPTION: Fetches all historical carbon emission trading data from Beijing's electronic trading platform. Returns trading date, volume, average price and amount data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nenergy_carbon_bj_df = ak.energy_carbon_bj()\nprint(energy_carbon_bj_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving EU Carbon Trading Data with AKShare\nDESCRIPTION: Fetches international carbon emission trading data from 2018-03-13 to 2020-04-29. Returns EU EUA and CER market data including prices and trading volumes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/energy/energy.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nenergy_carbon_eu_df = ak.energy_carbon_eu()\nprint(energy_carbon_eu_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shanghai and Shenzhen Bond Market Real-time Data with AKShare\nDESCRIPTION: Uses the bond_zh_hs_spot function to fetch real-time bond market data from Shanghai and Shenzhen exchanges. The function accepts start_page and end_page parameters to paginate through results, with each page containing 80 records.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bond/bond.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nbond_zh_hs_spot_df = ak.bond_zh_hs_spot(start_page=\"1\", end_page=\"5\")\nprint(bond_zh_hs_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Futures Trading Calendar Rules with AKShare\nDESCRIPTION: Retrieves futures trading rules and calendar data for a specific trading date using the futures_rule function. This includes information on margin requirements, price limits, and contract specifications.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_rule_df = ak.futures_rule(date=\"20231205\")\nprint(futures_rule_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Chinese Coastal Power Plant Coal Reserves with AKShare in Python\nDESCRIPTION: This code snippet shows how to use the macro_china_daily_energy function from AKShare to retrieve historical data on coal reserves at six major coastal power plants in China. The data covers the period from January 1, 2016 to the last available date, including daily consumption and days of available coal supply.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_75\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_daily_energy_df = ak.macro_china_daily_energy()\nprint(macro_china_daily_energy_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving U.S. NFIB Small Business Confidence Index with AKShare\nDESCRIPTION: Accesses U.S. NFIB Small Business Confidence Index report data from Jin10, with data ranging from February 1975 to present. Returns a DataFrame with current values, forecast values, and previous values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_usa_nfib_small_business_df = ak.macro_usa_nfib_small_business()\nprint(macro_usa_nfib_small_business_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Yearly Box Office Data in Python using AKShare\nDESCRIPTION: This function obtains yearly box office data for movies based on a specified date. It returns information such as ranking, movie name, total box office, average ticket price, and other annual performance metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_yearly_df = ak.movie_boxoffice_yearly(date=\"20240218\")\nprint(movie_boxoffice_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Dalian Exchange Futures Contract Information\nDESCRIPTION: Retrieves futures contract information from Dalian Commodity Exchange (DCE) for the most recent trading day. Returns contract specifications including trading units, price ticks, and delivery dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_info_dce_df = ak.futures_contract_info_dce()\nprint(futures_contract_info_dce_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Futures News Results from Shanghai Metal Exchange\nDESCRIPTION: Sample output from the futures_news_shmet API showing news articles related to copper, with publication timestamps and content excerpts.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_76\n\nLANGUAGE: text\nCODE:\n```\n                   发布时间                                                 内容\n0   2024-02-05 14:02:44+08:00  【金诚信资源：Lonshi铜矿增储情况】金诚信近日接受机构调研时表示，公司在2022年4月发...\n1   2024-02-05 14:02:44+08:00  【金诚信资源项目进展情况】金诚信近日接受机构调研时表示，公司两岔河磷矿南采区已投产，2023...\n2   2024-02-05 14:02:44+08:00  【金诚信资源：雨季对Dikulushi铜矿和Lonshi铜矿的影响】金诚信近日接受机构调研时...\n3   2024-02-05 14:02:44+08:00  【金诚信：整体来看，铜价存在长期持续震荡上行可能】金诚信近日接受机构调研时表示，从中长期来看...\n4   2024-02-05 14:19:22+08:00  【江苏省雨雪天气或影响该地区铜杆厂生产销售】2月3日11时12分，江苏省气象台变更发布道路结...\n..                        ...                                                ...\n995 2024-03-21 11:39:32+08:00  【中科铜箔2023年铜箔年产量超过34500吨】2023年，湖北中科铜箔的铜箔年产量由原来的...\n996 2024-03-21 11:39:32+08:00  【江西新越年产40万吨电解铜项目环评批准公示】根据建设项目环境影响评价审批程序的有关规定，经...\n997 2024-03-21 11:39:32+08:00  【铜陵有色铜基新材料项目空分制氧项目1号主冷箱顺利封顶】3月16日上午8点18分，随着300...\n998 2024-03-21 11:39:32+08:00  【电工合金：2023年净利润1.36亿元，同比增19.98%】近日，电工合金发布2023年年...\n999 2024-03-21 12:10:40+08:00  【SHMET铜现货报价】上海金属网讯：截止11:30分，上海金属网1#电解铜报72700-7...\n[1000 rows x 2 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSE ETF Option Expiration Day Information with AKShare\nDESCRIPTION: This code demonstrates how to get the expiration date and remaining days until expiration for a specific SSE ETF option contract. It takes parameters for trade date, symbol type (50ETF or 300ETF), and exchange.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_sse_expire_day_sina_df = ak.option_sse_expire_day_sina(trade_date=\"202002\", symbol=\"50ETF\", exchange=\"null\")\nprint(option_sse_expire_day_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Reserve Requirement Ratio Data in Python using AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_reserve_requirement_ratio function from the AKShare package to retrieve historical data on China's reserve requirement ratio. The function requires no parameters and returns a DataFrame with data from the East Money financial website.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_reserve_requirement_ratio_df = ak.macro_china_reserve_requirement_ratio()\nprint(macro_china_reserve_requirement_ratio_df)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Broker Profit Data in Python with AKShare\nDESCRIPTION: This code retrieves profit/loss data for a specific broker over a date range using the broker_profit function. It returns a DataFrame with symbol and total_profit columns, showing commodity-specific profit information for the broker.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_profit_df = pro.broker_profit(broker=\"永安期货\", start_date=\"2018-07-08\", end_date=\"2018-08-08\")\nprint(broker_profit_df)\n```\n\n----------------------------------------\n\nTITLE: Example Output of High Frequency S&P 500 Index Data\nDESCRIPTION: Shows the sample output structure of the hf_sp_500 function, displaying the DataFrame format with columns for date, open, high, low, close, and price values for minute-level S&P 500 index data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/hf/hf.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n              date     open     high      low    close  price\n0       2017-01-02  2241.00  2244.50  2241.00  2243.50      0\n1       2017-01-02  2243.75  2243.75  2243.00  2243.00      0\n2       2017-01-02  2243.25  2243.25  2243.00  2243.25      0\n3       2017-01-02  2243.00  2243.00  2243.00  2243.00      0\n4       2017-01-02  2243.25  2243.75  2243.25  2243.75      0\n...            ...      ...      ...      ...      ...    ...\n222021  2017-12-29  2669.50  2669.75  2669.25  2669.25      0\n222022  2017-12-29  2669.00  2669.25  2669.00  2669.00      0\n222023  2017-12-29  2668.75  2668.75  2668.00  2668.25      0\n222024  2017-12-29  2667.75  2668.50  2667.75  2668.00      0\n222025  2017-12-29  2668.25  2668.50  2667.75  2668.50      0\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Three-way Crossbred Piglet Price Data\nDESCRIPTION: This snippet demonstrates how to fetch national three-way crossbred piglet price data for the last two weeks from soozhu.com using the spot_hog_three_way_soozhu function. No parameters are needed.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_hog_three_way_soozhu_df = ak.spot_hog_three_way_soozhu()\nprint(spot_hog_three_way_soozhu_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Holder Structure Data with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the ak.fund_hold_structure_em() function from AKShare to retrieve fund holder structure data. It returns information such as the number of funds, institutional holding percentage, individual holding percentage, and total shares.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_hold_structure_em_df = ak.fund_hold_structure_em()\nprint(fund_hold_structure_em_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing China's International Tourism Foreign Exchange Income Data with AKShare\nDESCRIPTION: This snippet illustrates how to use the macro_china_international_tourism_fx function from AKShare to access data on China's international tourism foreign exchange income. The function returns a DataFrame with details on various components of tourism income.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_60\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_international_tourism_fx_df = ak.macro_china_international_tourism_fx()\nprint(macro_china_international_tourism_fx_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from broker_pk API Call in Python\nDESCRIPTION: This example shows the expected output format from the broker_pk API call. It displays a DataFrame with statistics including the total count of comparisons, the number of wins for broker1, and the number of wins for broker1 in the most recent 10 comparisons.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n                  broker_pk\ntotal_count             614\nwin_count               295\nrecent_win_count          4\n```\n\n----------------------------------------\n\nTITLE: Retrieving COMEX Inventory Data with AKShare API\nDESCRIPTION: Fetches historical COMEX inventory data for gold or silver from the East Money Financial data center. The data includes inventory quantities in both tons and ounces.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_comex_inventory_df = ak.futures_comex_inventory(symbol=\"黄金\")\nprint(futures_comex_inventory_df)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Broker Position Building Process in Python with AKShare\nDESCRIPTION: This code retrieves the position building process for a specific broker and contract over a defined time period using broker_positions_process function. It returns detailed daily position data including long/short positions, profit calculations, and cost estimates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_positions_process_df = pro.broker_positions_process(broker=\"永安期货\", code=\"rb2010\", start_date=\"2020-02-03\", end_date=\"2020-06-03\")\nprint(broker_positions_process_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving High Frequency S&P 500 Index Data with AKShare\nDESCRIPTION: Demonstrates how to fetch minute-level S&P 500 index data for a specific year using the AKShare Python library. The function accepts a year parameter (between 2012-2018) and returns a DataFrame containing date, open, high, low, and close price data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/hf/hf.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nhf_sp_500_df = ak.hf_sp_500(year=\"2017\")\nprint(hf_sp_500_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Warehouse Receipt Data with AKShare API in Python\nDESCRIPTION: This code snippet shows how to access warehouse receipt data for a specific commodity variety and date using AKShare's Pro API. The data includes total volume and change information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nwarehouse_receipt_df = pro.warehouse_receipt(variety=\"RB\", date=\"2018-08-08\")\nprint(warehouse_receipt_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Japanese Central Bank Interest Rate Data with AkShare\nDESCRIPTION: Fetches historical data of Japanese central bank interest rate decisions from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_japan_bank_rate_df = ak.macro_japan_bank_rate()\nprint(macro_japan_bank_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Cryptocurrency Spot Prices with AKShare\nDESCRIPTION: Retrieves current market data for major cryptocurrencies including price, change, volume and timestamp. Returns data from multiple exchanges like Bitfinex, Bitstamp, and Kraken.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/dc/dc.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncrypto_js_spot_df = ak.crypto_js_spot()\nprint(crypto_js_spot_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Olympic Historical Medal Data with AKShare\nDESCRIPTION: Function to fetch historical Olympic Games medal data from 1896-2016. Returns detailed athlete information including ID, name, demographics, team, event details and medal information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nsport_olympic_hist_df = ak.sport_olympic_hist()\nprint(sport_olympic_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output of AKShare Stock Trading Calendar Data in Python\nDESCRIPTION: This code snippet shows a sample output of the tool_trade_date_hist_sina function. It displays a DataFrame with a single column 'trade_date' containing historical trading dates. The output includes the first and last few rows of the DataFrame.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/tool/tool.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n      trade_date\n0     1990-12-19\n1     1990-12-20\n2     1990-12-21\n3     1990-12-24\n4     1990-12-25\n...          ...\n8550  2025-12-25\n8551  2025-12-26\n8552  2025-12-29\n8553  2025-12-30\n8554  2025-12-31\n[8555 rows x 1 columns]\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Tags using AKShare NLP Knowledge Graph\nDESCRIPTION: This snippet shows how to use the nlp_ownthink API with the 'tag' indicator to fetch category tags associated with an entity. It returns a list of tags that classify the entity.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/nlp/nlp.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnlp_ownthink_df = ak.nlp_ownthink(word=\"人工智能\", indicator=\"tag\")\nprint(nlp_ownthink_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Japanese Leading Indicator Data with AkShare\nDESCRIPTION: Fetches historical data of Japanese leading economic indicators from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_167\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_japan_head_indicator_df = ak.macro_japan_head_indicator()\nprint(macro_japan_head_indicator_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Industrial Index with AKShare\nDESCRIPTION: This code snippet shows how to retrieve the Industrial Index data from Caixin using the AKShare library. The function returns all historical data including date, index value, and change value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_ii_cx_df = ak.index_ii_cx()\nprint(index_ii_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Hog Price Trend for Current Year\nDESCRIPTION: This snippet shows how to get the national hog price trend data for the current year from soozhu.com using the spot_hog_year_trend_soozhu function. No parameters are needed.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_hog_year_trend_soozhu_df = ak.spot_hog_year_trend_soozhu()\nprint(spot_hog_year_trend_soozhu_df)\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare in China using Tsinghua mirror\nDESCRIPTION: Command for installing AKShare in China using the Tsinghua University PyPI mirror to improve download speed.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n----------------------------------------\n\nTITLE: Retrieving China's Civil Aviation Passenger Load Factor Data with AKShare\nDESCRIPTION: This code example demonstrates how to use the macro_china_passenger_load_factor function from AKShare to fetch data on China's civil aviation passenger load factor and cargo load factor. The function returns a DataFrame with historical data on these metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_61\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_passenger_load_factor_df = ak.macro_china_passenger_load_factor()\nprint(macro_china_passenger_load_factor_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Core CPI Month-over-Month Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian monthly core Consumer Price Index data using the macro_canada_core_cpi_monthly function from AKShare library. Returns historical CPI statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_186\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_core_cpi_monthly_df = ak.macro_canada_core_cpi_monthly()\nprint(macro_canada_core_cpi_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Japanese Core CPI Annual Data with AkShare\nDESCRIPTION: Fetches historical data of Japanese annual Core Consumer Price Index from East Money Finance. The function returns a DataFrame containing timestamps, previous values, current values, and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_165\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_japan_core_cpi_yearly_df = ak.macro_japan_core_cpi_yearly()\nprint(macro_japan_core_cpi_yearly_df)\n```\n\n----------------------------------------\n\nTITLE: Using AKShare's Intelligent Q&A Interface\nDESCRIPTION: This snippet demonstrates how to use the nlp_answer API to get responses to natural language questions. It accepts a question string as input and returns a conversational answer based on the AI's knowledge base.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/nlp/nlp.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnlp_answer_df = ak.nlp_answer(question=\"姚明的身高\")\nprint(nlp_answer_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CCTV News Text with AKShare\nDESCRIPTION: This code demonstrates how to use the news_cctv endpoint to retrieve CCTV news text for a specific date. It imports the akshare library, calls the news_cctv function with a date parameter, and prints the resulting DataFrame.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnews_cctv_df = ak.news_cctv(date=\"20240424\")\nprint(news_cctv_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Information from Knowledge Graph using AKShare\nDESCRIPTION: This snippet demonstrates how to use the nlp_ownthink API with the 'entity' indicator to retrieve basic entity information from the knowledge graph. It returns the entity name with a brief category description in brackets.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/nlp/nlp.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nnlp_ownthink_df = ak.nlp_ownthink(word=\"人工智能\", indicator=\"entity\")\nprint(nlp_ownthink_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Australia Quarterly PPI with akshare\nDESCRIPTION: Retrieves historical Australia Producer Price Index quarterly data from East Money website. Returns a dataframe with timestamps, previous values (in %), current values and release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_176\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_australia_ppi_quarterly_df = ak.macro_australia_ppi_quarterly()\nprint(macro_australia_ppi_quarterly_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Yiwu Monthly Prosperity Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the monthly prosperity index data from Yiwu Small Commodity Index using the AKShare library. The function returns a DataFrame containing periods and various prosperity indices including scale, benefit, and market confidence indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_yw_df = ak.index_yw(symbol=\"月景气指数\")\nprint(index_yw_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Commodity Spot Price Indices with AkShare\nDESCRIPTION: This code demonstrates how to retrieve historical data for commodity spot price indices, such as the Baltic Dry Index. The function requires a symbol parameter specifying which index to retrieve and returns date, index value, and change information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_goods_df = ak.spot_goods(symbol=\"波罗的海干散货指数\")\nprint(spot_goods_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Fund Company AUM Data from East Money in Python\nDESCRIPTION: This function fetches historical assets under management data for fund companies from East Money. It requires a year parameter and returns detailed AUM breakdown by fund types. Data is available from 2001 onwards.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_aum_hist_em_df = ak.fund_aum_hist_em(year=\"2023\")\nprint(fund_aum_hist_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CPCA New Energy Market Data with AKShare\nDESCRIPTION: Example usage of the car_market_fuel_cpca function from AKShare to fetch new energy vehicle market statistics. The function can accept a symbol parameter to specify which market segment to retrieve data for.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_market_fuel_cpca_df = ak.car_market_fuel_cpca()\nprint(car_market_fuel_cpca_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Sunrise and Sunset Times with AKShare\nDESCRIPTION: This code shows how to use the sunrise_daily endpoint to get sunrise and sunset times for a specific city and date. It imports the akshare library, calls the sunrise_daily function with date and city parameters, and prints the resulting DataFrame.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nsunrise_daily_df = ak.sunrise_daily(date=\"20240428\", city=\"beijing\")\nprint(sunrise_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving THS ETF Fund Real-time Data in Python\nDESCRIPTION: This code retrieves real-time ETF fund data from TongHuaShun (THS) financial platform using AKShare library. The function accepts an optional date parameter to specify the data date, defaulting to the current date if not provided.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_etf_spot_ths_df = ak.fund_etf_spot_ths(date=\"20240620\")\nprint(fund_etf_spot_ths_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Official Public Index List with AKShare API\nDESCRIPTION: This code retrieves a list of all official public indices available through the API. It returns index IDs and names without requiring any parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_official_df = pro.index_official()\nprint(index_official_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Bull-Bear Ratio Data with AKShare API in Python\nDESCRIPTION: Example code demonstrating how to use the broker_bbr API to retrieve the bull-bear ratio (long/short position ratio) for a specific broker on a given date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_bbr_df = pro.broker_bbr(broker=\"永安期货\", date=\"2018-08-08\")\nprint(broker_bbr_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output of CBIRC Branch Administrative Penalties Data in Python\nDESCRIPTION: This code snippet shows a sample output of the 'bank_fjcf_table_detail' function. It displays a DataFrame containing administrative penalty information, including decision numbers, dates, and other relevant details for multiple cases.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/bank/bank.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n      行政处罚决定书文号  ...             处罚公布日期\n0    楚金罚决字〔2024〕9号  ...  2024-02-08 18:38:00\n1    楚金罚决字〔2024〕8号  ...  2024-02-08 18:28:00\n2    楚金罚决字〔2024〕7号  ...  2024-02-08 18:18:00\n3    遵金罚决字〔2024〕4号  ...  2024-02-08 17:04:00\n4    遵金罚决字〔2024〕3号  ...  2024-02-08 17:03:00\n..             ...  ...                  ...\n85  吉金监罚决字〔2024〕9号  ...  2024-02-02 12:19:02\n86  吉金监罚决字〔2024〕8号  ...  2024-02-02 12:18:30\n87  吉金监罚决字〔2024〕7号  ...  2024-02-02 12:17:47\n88  吉金监罚决字〔2024〕6号  ...  2024-02-02 12:17:08\n89  吉金监罚决字〔2024〕5号  ...  2024-02-02 11:47:50\n[90 rows x 12 columns]\n```\n\n----------------------------------------\n\nTITLE: Fetching German Trade Balance Data with AKShare\nDESCRIPTION: Retrieves seasonally adjusted trade balance data for Germany. Returns a DataFrame with timestamp, previous value, current value and release date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_151\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_germany_trade_adjusted_df = ak.macro_germany_trade_adjusted()\nprint(macro_germany_trade_adjusted_df)\n```\n\n----------------------------------------\n\nTITLE: MATLAB Output Display of AKShare DataFrame\nDESCRIPTION: Example output when calling an AKShare function in MATLAB, showing the Python DataFrame structure and its properties as represented in the MATLAB environment.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nans =\n\n  Python DataFrame - 属性:\n\n          T: [1×1 py.pandas.core.frame.DataFrame]\n         at: [1×1 py.pandas.core.indexing._AtIndexer]\n      attrs: [1×1 py.dict]\n       axes: [1×2 py.list]\n    columns: [1×1 py.pandas.core.indexes.base.Index]\n     dtypes: [1×1 py.pandas.core.series.Series]\n      empty: 0\n        iat: [1×1 py.pandas.core.indexing._iAtIndexer]\n       iloc: [1×1 py.pandas.core.indexing._iLocIndexer]\n      index: [1×1 py.pandas.core.indexes.range.RangeIndex]\n        loc: [1×1 py.pandas.core.indexing._LocIndexer]\n       ndim: [1×1 py.int]\n      shape: [1×2 py.tuple]\n       size: [1×1 py.numpy.int32]\n      style: [1×1 py.pandas.io.formats.style.Styler]\n     values: [1×1 py.numpy.ndarray]\n\n                  日期     开盘     收盘     最高  ...    振幅   涨跌幅   涨跌额   换手率\n    0     2017-03-01   9.49   9.49   9.55  ...  0.84  0.11  0.01  0.21\n    1     2017-03-02   9.51   9.43   9.54  ...  1.26 -0.63 -0.06  0.24\n    2     2017-03-03   9.41   9.40   9.43  ...  0.74 -0.32 -0.03  0.20\n    3     2017-03-06   9.40   9.45   9.46  ...  0.74  0.53  0.05  0.24\n    4     2017-03-07   9.44   9.45   9.46  ...  0.63  0.00  0.00  0.17\n    ...          ...    ...    ...    ...  ...   ...   ...   ...   ...\n    1100  2021-09-01  17.48  17.88  17.92  ...  5.11  0.45  0.08  1.19\n    1101  2021-09-02  18.00  18.40  18.78  ...  5.48  2.91  0.52  1.25\n    1102  2021-09-03  18.50  18.04  18.50  ...  4.35 -1.96 -0.36  0.72\n    1103  2021-09-06  17.93  18.45  18.60  ...  4.55  2.27  0.41  0.78\n    1104  2021-09-07  18.60  19.24  19.56  ...  6.56  4.28  0.79  0.84\n\n    [1105 rows x 11 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inventory Data Type 2 with AKShare API in Python\nDESCRIPTION: This code snippet shows how to access inventory data for a specific commodity variety by year and week number using the second parameter type with AKShare's Pro API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\ninventory_df = pro.inventory(variety=\"RB\", year=\"2019\", week_number=\"10\")\nprint(inventory_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shanghai Gold Exchange Report Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the macro_china_au_report function from AKShare to fetch reports from the Shanghai Gold Exchange. The function returns historical data from September 5, 2014 to the present without requiring any input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_au_report_df = ak.macro_china_au_report()\nprint(macro_china_au_report_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monthly Air Quality Data for Beijing\nDESCRIPTION: This example demonstrates fetching monthly air quality data for Beijing using the air_quality_hist function. It specifies a longer date range to capture monthly data over approximately one year.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nair_quality_hist_df = ak.air_quality_hist(city=\"北京\", period=\"month\", start_date=\"20190425\", end_date=\"20200427\")\nprint(air_quality_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Brand Sales Ranking Data using AKShare\nDESCRIPTION: This code snippet demonstrates how to retrieve automobile brand sales ranking data from Gasgoo Research Institute using the car_sale_rank_gasgoo function. It requires specifying 'symbol' as '品牌榜' (brand ranking) and 'date' in the format 'YYYYMM'.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_sale_rank_gasgoo_df = ak.car_sale_rank_gasgoo(symbol=\"品牌榜\", date=\"202311\")\nprint(car_sale_rank_gasgoo_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Commodity Short Flow Data with AKShare API\nDESCRIPTION: Retrieves daily net short flow data for commodities using the commodity_flow_short API. Requires an API token and accepts a date parameter. Returns broker positions, negative money flow amounts and variety codes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fund.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\ncommodity_flow_short_df = pro.commodity_flow_short(date=\"2018-08-08\")\nprint(commodity_flow_short_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Yiwu Monthly Price Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the monthly price index data from Yiwu Small Commodity Index using the AKShare library. The function returns a DataFrame containing monthly period information and various price indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_yw_df = ak.index_yw(symbol=\"月价格指数\")\nprint(index_yw_df)\n```\n\n----------------------------------------\n\nTITLE: Auto-rebuilding AKShare Documentation on Changes\nDESCRIPTION: This command activates a watch mode that automatically rebuilds documentation when changes are detected. Requires the watchdog Python package to be installed.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake watch\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Swiss Central Bank Interest Rate Data\nDESCRIPTION: Shows the structure and format of the data returned by the macro_swiss_gbd_bank_rate function, including historical interest rates from 2008 to 2022 with their respective release dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_162\n\nLANGUAGE: python\nCODE:\n```\n     时间    前值    现值        发布日期\n0   2008年03月   NaN  2.75  2008-03-16\n1   2008年06月  2.75  2.75  2008-06-16\n2   2008年09月  2.75  2.75  2008-09-16\n3   2008年12月  2.75  0.50  2008-12-16\n4   2009年03月  0.50  0.25  2009-03-16\n5   2009年06月  0.25  0.25  2009-06-16\n6   2009年09月  0.25  0.25  2009-09-16\n7   2009年12月  0.25  0.25  2009-12-16\n8   2010年03月  0.25  0.25  2010-03-16\n9   2010年06月  0.25  0.25  2010-06-16\n10  2010年09月  0.25  0.25  2010-09-16\n11  2010年12月  0.25  0.25  2010-12-16\n12  2011年03月  0.25  0.25  2011-03-16\n13  2011年06月  0.25  0.25  2011-06-16\n14  2011年09月  0.25  0.00  2011-09-16\n15  2011年12月  0.00  0.00  2011-12-16\n16  2012年03月  0.00  0.00  2012-03-16\n17  2012年06月  0.00  0.00  2012-06-16\n18  2012年09月  0.00  0.00  2012-09-16\n19  2012年12月  0.00  0.00  2012-12-16\n20  2013年03月  0.00  0.00  2013-03-16\n21  2013年06月  0.00  0.00  2013-06-16\n22  2013年09月  0.00  0.00  2013-09-16\n23  2013年12月  0.00  0.00  2013-12-16\n24  2014年03月  0.00  0.00  2014-03-16\n25  2014年06月  0.00  0.00  2014-06-16\n26  2014年09月  0.00  0.00  2014-09-16\n27  2014年12月  0.00 -0.25  2014-12-11\n28  2015年03月 -0.25 -0.75  2015-03-19\n29  2015年06月 -0.75 -0.75  2015-06-18\n30  2015年09月 -0.75 -0.75  2015-09-17\n31  2015年12月 -0.75 -0.75  2015-12-10\n32  2016年03月 -0.75 -0.75  2016-03-17\n33  2016年06月 -0.75 -0.75  2016-06-16\n34  2016年09月 -0.75 -0.75  2016-09-15\n35  2016年12月 -0.75 -0.75  2016-12-15\n36  2017年03月 -0.75 -0.75  2017-03-16\n37  2017年06月 -0.75 -0.75  2017-06-15\n38  2017年09月 -0.75 -0.75  2017-09-14\n39  2017年12月 -0.75 -0.75  2017-12-14\n40  2018年03月 -0.75 -0.75  2018-03-15\n41  2018年06月 -0.75 -0.75  2018-06-21\n42  2018年09月 -0.75 -0.75  2018-09-20\n43  2018年12月 -0.75 -0.75  2018-12-13\n44  2019年03月 -0.75 -0.75  2019-03-21\n45  2019年06月 -0.75 -0.75  2019-06-13\n46  2019年09月 -0.75 -0.75  2019-09-19\n47  2019年12月 -0.75 -0.75  2019-12-12\n48  2020年03月 -0.75 -0.75  2020-03-19\n49  2020年06月 -0.75 -0.75  2020-06-18\n50  2020年09月 -0.75 -0.75  2020-09-24\n51  2020年12月 -0.75 -0.75  2020-12-14\n52  2021年03月 -0.75 -0.75  2021-03-25\n53  2021年06月 -0.75 -0.75  2021-06-17\n54  2021年09月 -0.75 -0.75  2021-09-23\n55  2021年12月 -0.75 -0.75  2021-12-16\n56  2022年03月 -0.75 -0.75  2022-03-24\n57  2022年06月 -0.75 -0.25  2022-06-16\n58  2022年09月 -0.25  0.50  2022-09-22\n59  2022年12月  0.50   NaN  2022-12-15\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Economic Events Sample from Baidu\nDESCRIPTION: This code snippet shows a sample of the returned data from the news_economic_baidu function. The data includes columns for date, time, region, event, published value, expected value, previous value, and importance (with higher values indicating more important events).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_203\n\nLANGUAGE: text\nCODE:\n```\n        日期     时间   地区  ...      预期       前值  重要性\n0   2024-11-07  01:30   巴西  ...     NaN      -16.72    1\n1   2024-11-07  02:00   巴西  ...   49.76       50.23    1\n2   2024-11-07  05:30   巴西  ...   11.25       10.75    1\n3   2024-11-07  06:30   美国  ...     NaN  3091171.16    1\n4   2024-11-07  06:30   美国  ...     NaN     6004.39    1\n..         ...    ...  ...  ...     ...         ...  ...\n95  2024-11-07  20:00   英国  ...    4.75        5.00    2\n96  2024-11-07  21:00  俄罗斯  ...     NaN     6285.00    1\n97  2024-11-07  21:00   巴西  ...     NaN      -11.40    1\n98  2024-11-07  21:00   巴西  ...     NaN       -0.40    1\n99  2024-11-07  21:30   美国  ...  187.50      186.20    2\n[100 rows x 8 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fusion Index with AKShare\nDESCRIPTION: This code snippet shows how to retrieve the Fusion Index data from Caixin using the AKShare library. The function returns all historical data including date, index value, and change value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_fi_cx_df = ak.index_fi_cx()\nprint(index_fi_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Profit Probability Data from XueQiu\nDESCRIPTION: API to fetch fund profit probability data including holding periods, profit probabilities and average returns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_individual_profit_probability_xq_df = ak.fund_individual_profit_probability_xq(symbol=\"000001\")\nprint(fund_individual_profit_probability_xq_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Logistics Prosperity Index with AKShare\nDESCRIPTION: Python function to retrieve Logistics Prosperity Index data from East Money. Returns historical index values and percentage changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_lpi_index_df = ak.macro_china_lpi_index()\nprint(macro_china_lpi_index_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Scale Change Data from EastMoney\nDESCRIPTION: Fetches fund scale change data from EastMoney showing subscriptions, redemptions and total asset values. Returns historical data on fund counts and asset changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_scale_change_em_df = ak.fund_scale_change_em()\nprint(fund_scale_change_em_df)\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare using pip with Aliyun mirror\nDESCRIPTION: Command to install AKShare package using Aliyun mirror for faster downloads in China. Uses pip package manager with trusted host configuration.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/answer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com  --upgrade\n```\n\n----------------------------------------\n\nTITLE: Accessing Eurozone Quarterly GDP Year-over-Year Data\nDESCRIPTION: This function retrieves Eurozone quarterly GDP year-over-year rate data from 2013 to present. It provides current values, forecast values, and previous values expressed as percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_142\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_euro_gdp_yoy_df = ak.macro_euro_gdp_yoy()\nprint(macro_euro_gdp_yoy_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Commodity Long Flow Data with AKShare API\nDESCRIPTION: Retrieves daily net long flow data for commodities using the commodity_flow_long API. Requires an API token and accepts a date parameter in YYYY-MM-DD format. Returns broker positions, money flow amounts and variety codes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fund.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\ncommodity_flow_long_df = pro.commodity_flow_long(date=\"2018-08-08\")\nprint(commodity_flow_long_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving DCE Position Rankings with Contract Details\nDESCRIPTION: This code demonstrates how to fetch detailed position ranking data from the Dalian Commodity Exchange (DCE) for a specific date. The function returns a dictionary with contract codes as keys and DataFrames of position rankings as values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_dce_detail_dict = ak.futures_dce_position_rank(date=\"20200513\")\nprint(futures_dce_detail_dict)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with toctree Directive in reStructuredText\nDESCRIPTION: Sets up the table of contents tree structure for AKShare documentation using Sphinx's toctree directive. It specifies a maximum depth of 2, enables globbing, and adds a caption for the table of contents.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n   :caption: Table of contents:\n\n   introduction\n   installation\n   data/index\n   indicator\n   data_tips\n   answer\n   tutorial\n   articles\n   anaconda\n   platform\n   demo\n   changelog\n   contributing\n   dependency\n   deploy_http\n   akdocker/akdocker\n   special\n```\n\n----------------------------------------\n\nTITLE: Fetching Asset-Backed Special Plans Data using AKShare in Python\nDESCRIPTION: This code snippet retrieves information about asset-backed special plans from the China Securities Investment Fund Association using the amac_fund_abs function from the AKShare library. The API returns historical data including registration numbers, plan names, managers, and other relevant information without requiring any input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_fund_abs_df = ak.amac_fund_abs()\nprint(amac_fund_abs_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Long-Hu Ratio Ranking (Long Side) for Futures in Python Using AKShare\nDESCRIPTION: This code retrieves the Long-Hu ratio ranking for the long side of futures positions on a specific date. The 'variety_longhu_top' endpoint with 'long' field parameter returns contracts with the strongest long positions.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_longhu_long_top_df = pro.variety_longhu_top(fields=\"long\", date=\"2018-08-08\")\nprint(variety_longhu_long_top_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Futures Trading Rules Sample Data\nDESCRIPTION: Shows the expected output format of the futures_rule function, displaying trading parameters for various futures contracts including margin percentages, price limits, and contract multipliers.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n     交易所          品种  ...                                      特殊合约参数调整  调整备注\n0    上期所           铜  ...  CU2312合约交易保证金比例为20.0%; CU2401合约交易保证金比例为15.0%   NaN\n1    上期所         铜期权  ...    期权卖方交易保证金中涉及标的期货合约的公司交易保证金按照对应的期货合约保证金标准收取   NaN\n2    上期所           铝  ...  AL2312合约交易保证金比例为20.0%; AL2401合约交易保证金比例为15.0%   NaN\n3    上期所         铝期权  ...    期权卖方交易保证金中涉及标的期货合约的公司交易保证金按照对应的期货合约保证金标准收取   NaN\n4    上期所           锌  ...  ZN2312合约交易保证金比例为20.0%; ZN2401合约交易保证金比例为15.0%   NaN\n..   ...         ...  ...                                           ...   ...\n117  中金所  中证1000股指期权  ...                       保证金调整系数为14%，最低保障系数为0.50   NaN\n118  中金所       2年期国债  ...                          TS2312合约交易保证金比例为1.3%   NaN\n119  中金所       5年期国债  ...                          TF2312合约交易保证金比例为2.5%   NaN\n120  中金所      30年期国债  ...                          TL2312合约交易保证金比例为6.5%   NaN\n121  中金所      10年期国债  ...                           T2312合约交易保证金比例为3.5%   NaN\n[122 rows x 10 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inventory Data Type 1 with AKShare API in Python\nDESCRIPTION: This code snippet demonstrates how to access inventory data for a specific commodity variety and date using the first parameter type with AKShare's Pro API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/fundamental.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\ninventory_df = pro.inventory(variety=\"RB\", date=\"2018-08-08\")\nprint(inventory_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical CNIndex Sample Data - Python\nDESCRIPTION: Retrieves historical sample data for CNIndex using the index_detail_hist_cni API. Requires index symbol and optional date parameter to filter data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_detail_hist_cni_df = ak.index_detail_hist_cni(symbol='399005', date='202201')\nprint(index_detail_hist_cni_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Consumer Confidence Index with AKShare\nDESCRIPTION: Fetches consumer confidence index data from East Money. Returns monthly data including index values, year-over-year and month-over-month growth rates for consumer confidence, satisfaction and expectation indices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_xfzxx_df = ak.macro_china_xfzxx()\nprint(macro_china_xfzxx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bitcoin Holdings Report with AKShare\nDESCRIPTION: Fetches current bitcoin holding reports showing company holdings, market value percentages, and cost basis across public companies, private entities and ETFs.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/dc/dc.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncrypto_bitcoin_hold_report_df = ak.crypto_bitcoin_hold_report()\nprint(crypto_bitcoin_hold_report_df)\n```\n\n----------------------------------------\n\nTITLE: Accessing Fund Company Collective Asset Management Products with AKShare\nDESCRIPTION: This code shows how to use the amac_fund_account_info function to retrieve data about fund companies and their subsidiary collective asset management products from the China Securities Investment Fund Association.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_fund_account_info_df = ak.amac_fund_account_info()\nprint(amac_fund_account_info_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Company Collective Asset Management Products Data in Python\nDESCRIPTION: This code snippet fetches information about futures company collective asset management products from the China Securities Investment Fund Association using the amac_futures_info function from the AKShare library. The API returns comprehensive historical data including product names, codes, managers, custodians, and operational status without requiring any input parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_private.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\namac_futures_info_df = ak.amac_futures_info()\nprint(amac_futures_info_df)\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for AKShare with pip\nDESCRIPTION: This command installs Sphinx and all required dependencies for building the AKShare documentation using the requirements.txt file.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Sample Short Pool Contract Data Structure from AKShare API\nDESCRIPTION: Sample output from the short_pool function showing the structure of returned data. The result is a DataFrame containing two columns: 'code' with contract codes and 'symbol' showing the corresponding instrument symbols.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/tools.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      code symbol\n0    i1901      I\n1   hc1810     HC\n2   ap1811     AP\n3   cf1901     CF\n4   oi1809     OI\n5   oi1905     OI\n6   rm1905     RM\n7   sf1809     SF\n8   ta1811     TA\n9   zc1809     ZC\n10  zc1811     ZC\n11  zc1901     ZC\n12  cu1809     CU\n13  cu1810     CU\n14  cu1901     CU\n15  al1811     AL\n16  al1812     AL\n17  zn1810     ZN\n18  pb1810     PB\n19  sn1809     SN\n20  ag1812     AG\n21  fu1901     FU\n22  ru1809     RU\n23  ru1811     RU\n24  ru1901     RU\n25  ru1905     RU\n26   a1901      A\n27   c1811      C\n28  cs1809     CS\n29   l1809      L\n30   l1901      L\n31   m1811      M\n32   m1901      M\n33   p1809      P\n34   p1905      P\n35   v1809      V\n36   y1809      Y\n37   y1901      Y\n38   y1905      Y\n39  if1808     IF\n40  if1809     IF\n41  ih1808     IH\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Transaction Rules with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the AKShare library to fetch fund transaction rules data for a specific fund. It retrieves information such as purchase rules, redemption rules, and other fees associated with the fund.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_individual_detail_info_xq_df = ak.fund_individual_detail_info_xq(symbol=\"000001\")\nprint(fund_individual_detail_info_xq_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Panamax Bulk Carrier Freight Index (BPI) with AKShare in Python\nDESCRIPTION: This function fetches historical Panamax Bulk Carrier Freight Index (BPI) data from East Money. It returns a DataFrame with date, latest value, change percentage, and 3-month, 6-month, 1-year, 2-year, and 3-year change percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmacro_shipping_bpi_df = ak.macro_shipping_bpi()\nprint(macro_shipping_bpi_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving National Bureau of Statistics Data with AKShare\nDESCRIPTION: This code demonstrates how to use the macro_china_nbs_nation function to get data from China's National Bureau of Statistics. The example retrieves the last 5 years of national population data using specified path and period parameters.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_china_nbs_nation_df = ak.macro_china_nbs_nation(kind=\"年度数据\", path=\"人口 > 总人口\", period=\"LAST5\")\nprint(macro_china_nbs_nation_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample Output of Sina Finance Global Index Historical Data\nDESCRIPTION: This displays sample output from the index_global_hist_sina function, showing historical data for the Swiss Stock Index (瑞士股票指数) including date, open, high, low, close, and volume values from 2021 to 2025.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n           date      open      high       low     close    volume\n0    2021-03-22  10931.56  11048.58  10928.34  11048.58  51627000\n1    2021-03-23  11030.89  11118.33  11016.21  11098.66  48422000\n2    2021-03-24  11048.59  11106.94  11033.37  11063.87  43812000\n3    2021-03-25  11026.65  11102.78  11017.32  11098.81  52086000\n4    2021-03-26  11113.90  11143.86  11091.63  11116.81  46264000\n..          ...       ...       ...       ...       ...       ...\n995  2025-03-03  13032.86  13199.05  12956.84  13166.68  30859832\n996  2025-03-04  13099.49  13146.92  12991.81  13006.74  38551012\n997  2025-03-05  13081.21  13161.90  13066.22  13112.75  38270072\n998  2025-03-06  13090.73  13105.02  12928.22  13056.91  36533732\n999  2025-03-07  12959.80  12965.30  12888.30  12904.70   4468362\n[1000 rows x 6 columns]\n```\n\n----------------------------------------\n\nTITLE: Querying Net Margin Changes with AKShare API\nDESCRIPTION: Example of accessing net margin change data for a contract using variety_net_money_chge API.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_net_money_chge_df = pro.variety_net_money_chge(code=\"rb1810\", date=\"2018-08-08\")\nprint(variety_net_money_chge_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Economic Policy Uncertainty Index Data with AKShare\nDESCRIPTION: This code snippet demonstrates how to use the article_epu_index function from AKShare to retrieve Economic Policy Uncertainty (EPU) index data for China. The function requires a country/region symbol as input and returns a DataFrame with year, month, and country-specific policy index values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/article/article.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\narticle_epu_index_df = ak.article_epu_index(symbol=\"China\")  # 注意单词第一个字母大写\nprint(article_epu_index_df)\n```\n\n----------------------------------------\n\nTITLE: Querying Baidu Migration Area Details with AKShare\nDESCRIPTION: Demonstrates how to fetch detailed migration data for inbound/outbound movement for a specific city using the migration_area_baidu API. Returns data for top 100 cities including city name, province name, and migration scale value.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/event/event.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmigration_area_baidu_df = ak.migration_area_baidu(area=\"重庆市\", indicator=\"move_in\", date=\"20230922\")\nprint(migration_area_baidu_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hurun Rich List Data using AKShare\nDESCRIPTION: Demonstrates how to retrieve Hurun's rich list data using the hurun_rank API. Returns wealth rankings with details like name, wealth amount (in 100M CNY), company and industry.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nhurun_rank_df = ak.hurun_rank(indicator=\"胡润百富榜\", year=\"2023\")\nprint(hurun_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Structured Fund Data from Sina Finance in Python\nDESCRIPTION: This function retrieves data about structured funds from Sina Finance. It returns a DataFrame containing fund codes, names, net values, scale, shares, establishment dates, fund managers, and update dates. No input parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_scale_structured_sina_df = ak.fund_scale_structured_sina()\nprint(fund_scale_structured_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Delivery Matching Data from Dalian Commodity Exchange in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve delivery matching data from the Dalian Commodity Exchange using the akshare library. It fetches data for a specified commodity, including contract number, matching date, member numbers, and settlement price.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_delivery_match_dce_df = ak.futures_delivery_match_dce(symbol=\"a\")\nprint(futures_delivery_match_dce_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Monthly Box Office Data in Python with AKShare\nDESCRIPTION: This function retrieves monthly box office data for movies based on a given date. It provides information including ranking, movie name, monthly box office, market share, and other performance indicators.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_monthly_df = ak.movie_boxoffice_monthly(date=\"20240218\")\nprint(movie_boxoffice_monthly_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hurun Global Rich List Data using AKShare\nDESCRIPTION: Shows how to get Hurun's global rich list data using the hurun_rank API. Returns worldwide wealth rankings with details in USD (100M).\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nhurun_rank_df = ak.hurun_rank(indicator=\"胡润全球富豪榜\", year=\"2023\")\nprint(hurun_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Index with AKShare\nDESCRIPTION: This code snippet demonstrates how to fetch the Base Index data from Caixin using the AKShare library. It returns historical data with date, index value, and change value columns.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_bi_cx_df = ak.index_bi_cx()\nprint(index_bi_cx_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Information from China Financial Futures Exchange\nDESCRIPTION: Uses the futures_contract_info_cffex function to retrieve contract information data from the China Financial Futures Exchange for a specified trading date. The function requires a date parameter in the format 'YYYYMMDD'.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_info_cffex_df = ak.futures_contract_info_cffex(date=\"20240228\")\nprint(futures_contract_info_cffex_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output Data Structure\nDESCRIPTION: Example of the returned data structure showing position rankings for various futures contracts. The output is a dictionary containing DataFrames with member rankings, trading volumes, and position changes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n{'si2312':     rank vol_party_name   vol  ...  short_open_interest_chg  symbol  variety\n0      1           中信期货  2940  ...                       50  SI2312       SI\n1      2           国海良时  1013  ...                        1  SI2312       SI\n2      3           永安期货   956  ...                     -376  SI2312       SI\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Fetching Hurun Art List Data using AKShare\nDESCRIPTION: Demonstrates retrieving Hurun's art rankings using the hurun_rank API. Returns artist rankings and sales data.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nhurun_rank_df = ak.hurun_rank(indicator=\"胡润艺术榜\", year=\"2023\")\nprint(hurun_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Output Data for Yang-Zhang Realized Volatility\nDESCRIPTION: Example output from the volatility_yz_rv function showing the calculated daily realized volatility. The output is a DataFrame with a date column and an rv (realized volatility) column containing the volatility values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/indicator.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n          date        rv\n0   2024-09-10  0.001955\n1   2024-09-11  0.002207\n2   2024-09-12  0.002113\n3   2024-09-13  0.002216\n4   2024-09-18  0.002039\n5   2024-09-19  0.002631\n6   2024-09-20  0.002043\n7   2024-09-23  0.002116\n8   2024-09-24  0.002374\n9   2024-09-25  0.003624\n10  2024-09-26  0.003392\n11  2024-09-27  0.005944\n12  2024-09-30  0.008488\n13  2024-10-08  0.011529\n14  2024-10-09  0.008031\n15  2024-10-10  0.006964\n16  2024-10-11  0.004970\n17  2024-10-14  0.004435\n18  2024-10-15  0.003706\n19  2024-10-16  0.004293\n20  2024-10-17  0.003534\n21  2024-10-18  0.004322\n22  2024-10-21  0.004417\n23  2024-10-22  0.002922\n24  2024-10-23  0.002124\n25  2024-10-24  0.001814\n26  2024-10-25  0.001605\n27  2024-10-28  0.002125\n28  2024-10-29  0.002045\n29  2024-10-30  0.002428\n30  2024-10-31  0.002718\n31  2024-11-01  0.002932\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Contract Information from Shanghai Futures Exchange using AKShare\nDESCRIPTION: This snippet shows how to fetch futures contract information from the Shanghai Futures Exchange using AKShare. It retrieves data for a specific date, displaying details such as contract codes, listing dates, expiration dates, and benchmark prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_contract_info_shfe_df = ak.futures_contract_info_shfe(date=\"20240513\")\nprint(futures_contract_info_shfe_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Canadian Unemployment Rate Data with AKShare\nDESCRIPTION: Python code to retrieve Canadian unemployment rate data using the macro_canada_unemployment_rate function from AKShare library. Returns historical unemployment statistics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_181\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_canada_unemployment_rate_df = ak.macro_canada_unemployment_rate()\nprint(macro_canada_unemployment_rate_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hog Spot Price Index Results\nDESCRIPTION: Example output from the index_hog_spot_price API showing index values, various moving averages, pricing data, and transaction weights for the hog market.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_74\n\nLANGUAGE: text\nCODE:\n```\n       日期        指数   4个月均线   6个月均线  12个月均线  预售均价   成交均价  成交均重\n0    2015-01-05   92.88     NaN     NaN     NaN   0.00  13.49     0\n1    2015-01-12   92.82     NaN     NaN     NaN   0.00  13.48     0\n2    2015-01-19   93.29     NaN     NaN     NaN   0.00  13.55     0\n3    2015-01-26   93.48     NaN     NaN     NaN   0.00  13.57     0\n4    2015-02-02   92.12     NaN     NaN     NaN   0.00  13.38     0\n..          ...     ...     ...     ...     ...    ...    ...   ...\n460  2024-02-05  107.08  100.72  105.82  103.19  16.06  15.55   116\n461  2024-02-26   95.14   99.63  103.68  103.25  15.64  13.81   122\n462  2024-03-04   96.85   99.31  102.08  103.02  15.60  14.06   120\n463  2024-03-11   98.45   99.10  101.32  102.79  15.69  14.30   122\n464  2024-03-18  100.62   99.07  100.69  102.65  15.76  14.61   125\n[465 rows x 8 columns]\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare as User to Avoid Permission Issues\nDESCRIPTION: Command to install AKShare with the --user flag to avoid permission denied errors, which is useful when you don't have administrator rights.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare --user\n```\n\n----------------------------------------\n\nTITLE: Retrieving China's Road Logistics Volume Index with AKShare in Python\nDESCRIPTION: Function to obtain China's road logistics volume index data. The function accepts a symbol parameter to specify the frequency of the index (monthly, quarterly, or yearly) and returns a DataFrame with date and index values.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/index/index.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nindex_volume_cflp_df = ak.index_volume_cflp(symbol=\"月指数\")\nprint(index_volume_cflp_df)\n```\n\n----------------------------------------\n\nTITLE: Viewing Compiled AKShare Documentation in Browser\nDESCRIPTION: This command opens the compiled HTML documentation in the default web browser, allowing immediate preview of the documentation.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake htmlview\n```\n\n----------------------------------------\n\nTITLE: Installing Reticulate package in R\nDESCRIPTION: Command for installing the Reticulate package in R which provides an interface between R and Python, allowing AKShare to be used in R.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"reticulate\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Asset Allocation Data from CNINFO\nDESCRIPTION: Retrieves fund asset allocation data showing distribution across equity, fixed income and cash. Returns coverage metrics and allocation percentages across asset classes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_report_asset_allocation_cninfo_df = ak.fund_report_asset_allocation_cninfo()\nprint(fund_report_asset_allocation_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Index Capital Flow Trends with AKShare API\nDESCRIPTION: This code demonstrates how to retrieve capital flow data for a specific index on a given date. It shows the net position changes by broker and variety, with positive values indicating inflows and negative values showing outflows.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_trend_df = pro.index_trend(index_id=\"index0070c0eb-93ba-2da9-6633-fa70cb90e959\", date=\"2018-08-08\")\nprint(index_trend_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching TV Drama Show Data with AKShare\nDESCRIPTION: This endpoint retrieves TV drama show metrics including broadcast index, media popularity, user popularity, ratings, and viewership data. The data represents the previous day's statistics with no input parameters required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nvideo_tv_df = ak.video_tv()\nprint(video_tv_df)\n```\n\n----------------------------------------\n\nTITLE: Cleaning AKShare Documentation Build Files\nDESCRIPTION: This command removes all generated documentation files without affecting the source documentation files, allowing for a fresh rebuild.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Roll Yield Data with AKShare\nDESCRIPTION: Example code demonstrating how to use AKShare to fetch roll yield data for specific futures contracts between given dates. The function returns a DataFrame with date, roll yield, nearest contract, and deferred contract information.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nget_roll_yield_bar_df = ak.get_roll_yield_bar(type_method=\"date\", var=\"RB\", start_day=\"20180618\", end_day=\"20180718\")\nprint(get_roll_yield_bar_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving LOF Fund 1-Minute Intraday Data with AKShare\nDESCRIPTION: This snippet demonstrates how to fetch 1-minute interval LOF fund market data using the fund_lof_hist_min_em function from AKShare. It specifies a LOF fund symbol, time period, adjustment type, and date range.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_lof_hist_min_em_df = ak.fund_lof_hist_min_em(symbol=\"166009\", period=\"1\", adjust=\"\", start_date=\"2024-03-20 09:30:00\", end_date=\"2024-03-20 14:40:00\")\nprint(fund_lof_hist_min_em_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Purchase Status - East Money\nDESCRIPTION: Gets current purchase and redemption status for all funds including minimum investment amounts, fee rates and daily subscription limits.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_purchase_em_df = ak.fund_purchase_em()\nprint(fund_purchase_em_df)\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare Package\nDESCRIPTION: Commands for installing AKShare via pip, including options for users in China using Aliyun mirrors.\nSOURCE: https://github.com/akfamily/akshare/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install akshare --upgrade\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install akshare -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host=mirrors.aliyun.com  --upgrade\n```\n\n----------------------------------------\n\nTITLE: Compiling AKShare Documentation to HTML Format\nDESCRIPTION: This command builds the documentation in HTML format using the make utility. The generated documentation will be available in the build/html directory.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Accessing Bull-Bear Line Ranking (Short Side) for Futures in Python Using AKShare\nDESCRIPTION: This code shows how to fetch the Bull-Bear line ranking for the bearish side of futures contracts on a specific date. The 'variety_niuxiong_top' endpoint with 'short' field parameter returns contracts with the strongest bearish signals.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/commodity.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\n\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nvariety_niuxiong_short_top_df = pro.variety_niuxiong_top(fields=\"short\", date=\"2018-08-08\")\nprint(variety_niuxiong_short_top_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Currency Basic Information Data Sample\nDESCRIPTION: Shows the format of data returned by the currency_currencies function, including ID, name, code, precision, symbol, and formatting details for each currency.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/currency/currency.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n      id                           name  ... decimal_mark thousands_separator\n0      1                     UAE Dirham  ...            .                   ,\n1      2                        Afghani  ...            .                   ,\n2      3                            Lek  ...            .                   ,\n3      4                  Armenian Dram  ...            .                   ,\n4      5  Netherlands Antillean Guilder  ...            ,                   .\n..   ...                            ...  ...          ...                 ...\n156  157                      CFP Franc  ...            .                   ,\n157  158                    Yemeni Rial  ...            .                   ,\n158  159                           Rand  ...            .                   ,\n159  160                 Zambian Kwacha  ...            .                   ,\n160  161                Zimbabwe Dollar  ...            .                   ,\n[161 rows x 10 columns]\n```\n\n----------------------------------------\n\nTITLE: Accessing Macroeconomic Calendar Data from Wall Street Insights with AKShare\nDESCRIPTION: This snippet demonstrates how to use the macro_info_ws function from AKShare to retrieve macroeconomic calendar data for a specific date. The function returns economic events with details like time, region, event name, importance, current value, expected value, previous value, and links.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_200\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nmacro_info_ws_df = ak.macro_info_ws(date=\"20240514\")\nprint(macro_info_ws_df)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hog Market Core Data Results\nDESCRIPTION: Sample output from the futures_hog_core API showing the date-value pair structure of the returned data for hog market prices.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_68\n\nLANGUAGE: text\nCODE:\n```\n           date  value\n0    2023-03-18  15.42\n1    2023-03-19  15.46\n2    2023-03-20  15.42\n3    2023-03-21  15.44\n4    2023-03-22  15.25\n..          ...    ...\n362  2024-03-14  14.58\n363  2024-03-15  14.53\n364  2024-03-16  14.54\n365  2024-03-17  14.67\n366  2024-03-18  14.71\n[367 rows x 2 columns]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Automobile Manufacturer Sales Ranking Data using AKShare\nDESCRIPTION: This code snippet demonstrates how to retrieve automobile manufacturer sales ranking data from Gasgoo Research Institute using the car_sale_rank_gasgoo function. It requires specifying 'symbol' as '车企榜' (manufacturer ranking) and 'date' in the format 'YYYYMM'.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_sale_rank_gasgoo_df = ak.car_sale_rank_gasgoo(symbol=\"车企榜\", date=\"202311\")\nprint(car_sale_rank_gasgoo_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Futures News from Shanghai Metal Exchange with AKShare\nDESCRIPTION: Retrieves financial news related to futures markets from the Shanghai Metal Exchange. The API allows filtering by different metal categories or news types and returns publication time and content.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfutures_news_shmet_df = ak.futures_news_shmet(symbol=\"铜\")\nprint(futures_news_shmet_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Options Data from Guangzhou Futures Exchange (GFEX) in Python\nDESCRIPTION: This code snippet demonstrates how to use the AKShare library to fetch daily option contract data from the Guangzhou Futures Exchange. The function requires specifying the commodity symbol (Industrial Silicon in this example) and the trading date.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_gfex_daily_df = ak.option_gfex_daily(symbol=\"工业硅\", trade_date=\"20230418\")\nprint(option_gfex_daily_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Option Data from Sina Financial\nDESCRIPTION: Fetches historical daily price data for specific commodity option contracts. Returns date, open, high, low, close prices and volume data for the specified contract.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/option/option.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\noption_commodity_hist_sina_df = ak.option_commodity_hist_sina(symbol=\"au2012C328\")\nprint(option_commodity_hist_sina_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Hurun Global 500 List Data using AKShare\nDESCRIPTION: Shows how to retrieve Hurun's world top 500 companies data using the hurun_rank API. Returns company valuations and leadership details.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nhurun_rank_df = ak.hurun_rank(indicator=\"胡润世界500强\", year=\"2022\")\nprint(hurun_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of AKShare Interface Renaming\nDESCRIPTION: Tabular representation of interface name changes in AKShare showing version numbers, old interface names, new interface names, and modification dates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| AKShare 版本 | 旧接口名称                                       | 新接口名称                                       | 修改日期     |\n|------------|---------------------------------------------|---------------------------------------------|----------|\n| 1.16.29    | futures_global_em                           | futures_global_spot_em                      | 20250305 |\n| 1.13.88    | index_cflp_volume                           | index_volume_cflp                           | 20240527 |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Industry Allocation Data from CNINFO\nDESCRIPTION: Fetches fund industry allocation data showing distribution across different sectors. Returns industry codes, names, coverage metrics and allocation percentages.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_report_industry_allocation_cninfo_df = ak.fund_report_industry_allocation_cninfo(date=\"20210630\")\nprint(fund_report_industry_allocation_cninfo_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hong Kong Fund Rankings using AKShare\nDESCRIPTION: API to fetch Hong Kong fund rankings data from East Money website including fund codes, names, currencies, and various performance metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/fund/fund_public.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nfund_hk_rank_em_df = ak.fund_hk_rank_em()\nprint(fund_hk_rank_em_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching Real-time Air Quality Data for Hebei Province using AKShare\nDESCRIPTION: This code snippet shows how to retrieve real-time air quality data for all cities in Hebei province using the AKShare library. It returns a DataFrame with detailed air quality metrics including AQI, pollutant concentrations, and geographical coordinates.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nair_quality_hebei_df = ak.air_quality_hebei()\nprint(air_quality_hebei_df)\n```\n\n----------------------------------------\n\nTITLE: Running AKShare in Docker\nDESCRIPTION: Docker commands for pulling and running AKShare in a container with Jupyter support.\nSOURCE: https://github.com/akfamily/akshare/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull registry.cn-shanghai.aliyuncs.com/akfamily/aktools:jupyter\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it registry.cn-shanghai.aliyuncs.com/akfamily/aktools:jupyter python\n```\n\n----------------------------------------\n\nTITLE: Getting Car Manufacturer Rankings from CPCA\nDESCRIPTION: Retrieves manufacturer rankings for passenger vehicles with options for monthly/cumulative data and wholesale/retail metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\ncar_market_man_rank_cpca_df = ak.car_market_man_rank_cpca(symbol=\"狭义乘用车-单月\", indicator=\"批发\")\nprint(car_market_man_rank_cpca_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Real-time Multiple Futures Contracts Data\nDESCRIPTION: Example code showing how to use the futures_zh_spot function to retrieve real-time market data for multiple futures contracts. The code is incomplete in the provided snippet.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare using pip in Python\nDESCRIPTION: This snippet shows how to install AKShare using pip, the Python package installer. It demonstrates both the standard installation and an upgrade to the latest version.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare --upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing AKShare in Anaconda in China\nDESCRIPTION: Command for installing AKShare in Anaconda environment in China using the Tsinghua University PyPI mirror with user-specific installation.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install akshare --upgrade --user -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n----------------------------------------\n\nTITLE: Accessing Forbes China Rankings with Python\nDESCRIPTION: Demonstrates how to use the forbes_rank function to retrieve data from Forbes China's ranking lists. Takes a symbol parameter to specify which ranking list to access from the 87 available options.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nforbes_rank_df = ak.forbes_rank(symbol=\"2020福布斯中国400富豪榜\")\nprint(forbes_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Installing lxml from Wheel File\nDESCRIPTION: Command to install the lxml library from a previously downloaded wheel file. This approach is useful when the standard pip installation of lxml fails.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npip install 带后缀的完整路径和文件名\n```\n\n----------------------------------------\n\nTITLE: Fixing Installation Timeout with Extended Default Timeout\nDESCRIPTION: Command to fix installation timeout errors by extending the default pip timeout when installing AKShare.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/installation.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npip --default-timeout=100 install -U akshare\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Loss-Making Brokers Ranking in Python with AKShare\nDESCRIPTION: This code fetches a ranking of brokers with the highest losses during a specific time period using broker_in_loss_list function. It returns a DataFrame with broker names and their loss amounts, limited by the specified count parameter.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_in_loss_list_df = pro.broker_in_loss_list(start_date=\"2018-07-08\", end_date=\"2018-08-08\", count=\"10\")\nprint(broker_in_loss_list_df)\n```\n\n----------------------------------------\n\nTITLE: Stock Financing Data Sample\nDESCRIPTION: Sample output from the macro_stock_finance function showing monthly data on funds raised through various stock issuance methods in the Chinese market, including initial public offerings, additional issuances, and rights issues.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_86\n\nLANGUAGE: text\nCODE:\n```\n      月份    募集资金  首发募集资金 增发募集资金 配股募集资金\n0   2024-07    53.67   21.00    32.67     NaN\n1   2024-06   109.70   38.76    70.93     NaN\n2   2024-05    84.48   21.49    62.99     NaN\n3   2024-04   182.98    9.31   173.67     NaN\n4   2024-03   306.71   53.24   253.47     NaN\n5   2024-02    44.83   18.00    26.83     NaN\n6   2024-01   497.90  116.16   381.74     NaN\n7   2023-12   439.66  110.33   329.33     NaN\n8   2023-11   416.33   81.24   317.10   17.98\n9   2023-10   318.09   57.45   260.64     NaN\n10  2023-09   310.89  142.20   168.69     NaN\n11  2023-08   889.95  244.96   632.48   12.51\n12  2023-07  1145.18  602.19   542.99     NaN\n13  2023-06   600.35  313.84   189.29   97.22\n14  2023-05   566.78  368.03   198.75     NaN\n15  2023-04  1532.55  416.53  1116.01     NaN\n16  2023-03  1174.06  482.81   691.25     NaN\n17  2023-02   888.74  165.32   719.69    3.74\n18  2023-01  1246.71  192.72  1053.99     NaN\n19  2022-12  1391.35  252.57  1120.48   18.30\n20  2022-11  1014.84  271.62   695.28   47.94\n21  2022-10   621.47  186.86   434.62     NaN\n22  2022-09  1239.08  541.32   697.75     NaN\n23  2022-08  1856.48  669.71  1086.50  100.27\n24  2022-07  1620.69  382.63  1238.06     NaN\n25  2022-06   493.75  354.55   139.20     NaN\n26  2022-05   344.12  181.95   162.17     NaN\n27  2022-04  1194.55  638.77   418.45  137.34\n28  2022-03  1101.39  566.20   463.71   71.47\n29  2022-02   438.57  172.34   259.57    6.66\n```\n\n----------------------------------------\n\nTITLE: Retrieving Delivery Matching Data from Zhengzhou Commodity Exchange using AKShare\nDESCRIPTION: This snippet demonstrates how to fetch delivery matching data from the Zhengzhou Commodity Exchange using the AKShare library. It retrieves data for a specific date and displays information about matched buyers and sellers, delivery quantities, and contract codes.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/futures/futures.md#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nfutures_delivery_match_czce_df = ak.futures_delivery_match_czce(date=\"20210106\")\nprint(futures_delivery_match_czce_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Air Quality Data for City Monitoring Points with AKShare in Python\nDESCRIPTION: This code snippet demonstrates how to use the air_quality_watch_point function from AKShare to retrieve air quality data for monitoring points in a specified city and date range. It requires the akshare library and returns a DataFrame with air quality metrics.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nair_quality_watch_point_df = ak.air_quality_watch_point(city=\"杭州\", start_date=\"2018-01-01\", end_date=\"2020-04-27\")\nprint(air_quality_watch_point_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Air Quality Rankings for a Specific Date\nDESCRIPTION: This example demonstrates how to fetch air quality rankings for all cities on a specific date using the air_quality_rank function. It specifies a date in the format 'YYYY-MM-DD'.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\nair_quality_rank_df = ak.air_quality_rank(date=\"2020-03-20\")\nprint(air_quality_rank_df)\n```\n\n----------------------------------------\n\nTITLE: Sample Long Pool Contract Data Structure from AKShare API\nDESCRIPTION: Sample output from the long_pool function showing the structure of returned data. The result is a DataFrame containing two columns: 'code' with contract codes and 'symbol' showing the corresponding instrument symbols.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/tools.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      code symbol\n0   rb1810     RB\n1   rb1901     RB\n2    j1809      J\n3    j1901      J\n4   ap1810     AP\n5   ap1901     AP\n6   ap1903     AP\n7   ap1905     AP\n8   cf1809     CF\n9   fg1809     FG\n10  ma1809     MA\n11  rm1901     RM\n12  sf1901     SF\n13  sm1901     SM\n14  sr1809     SR\n15  sr1905     SR\n16  ta1808     TA\n17  ta1903     TA\n18  cu1811     CU\n19  cu1905     CU\n20  al1808     AL\n21  zn1808     ZN\n22  ni1809     NI\n23  au1812     AU\n24   b1901      B\n25   c1905      C\n26  cs1901     CS\n27  jd1809     JD\n28  jd1901     JD\n29   m1809      M\n30  pp1809     PP\n31  pp1901     PP\n32   v1901      V\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Air Quality Data for Beijing\nDESCRIPTION: This code snippet shows how to use the air_quality_hist function to fetch daily air quality data for Beijing within a specified date range. It uses similar parameters as the hourly example but with a 'day' period.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nair_quality_hist_df = ak.air_quality_hist(city=\"北京\", period=\"day\", start_date=\"20200320\", end_date=\"20200427\")\nprint(air_quality_hist_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Personal Index List with AKShare API\nDESCRIPTION: This code snippet fetches a list of personal indices associated with the user's account. It doesn't require any parameters but needs a valid API token for authentication.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/index_data.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nindex_mine_df = pro.index_mine()\nprint(index_mine_df)\n```\n\n----------------------------------------\n\nTITLE: Using broker_pk API in akshare to Compare Broker Performance in Python\nDESCRIPTION: This code demonstrates how to use the pro_api from akshare to compare the performance between two brokers (永安期货 and 兴证期货) for a specific trading symbol (RB). The API returns statistics about their relative performance, including total matches, win counts, and recent win trends.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/qhkc/broker.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom akshare import pro_api\npro = pro_api(token=\"在此处输入您的 token, 可以联系奇货可查网站管理员获取\")\nbroker_pk_df = pro.broker_pk(broker1=\"永安期货\", broker2=\"兴证期货\", symbol=\"RB\")\nprint(broker_pk_df)\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Week Yearly Box Office Data in Python with AKShare\nDESCRIPTION: This function fetches first-week yearly box office data for movies based on a given date. It provides information including ranking, movie name, first-week box office, percentage of total box office, and other opening week performance indicators.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/others/others.md#2025-04-23_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nimport akshare as ak\n\nmovie_boxoffice_yearly_first_week_df = ak.movie_boxoffice_yearly_first_week(date=\"20201018\")\nprint(movie_boxoffice_yearly_first_week_df)\n```\n\n----------------------------------------\n\nTITLE: Fetching National Backup Two-way Crossbred Sow Price Data\nDESCRIPTION: This code retrieves national backup two-way crossbred sow price data for the last two weeks from soozhu.com using the spot_hog_crossbred_soozhu function. No parameters are required.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/spot/spot.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport akshare as ak\n\nspot_hog_crossbred_soozhu_df = ak.spot_hog_crossbred_soozhu()\nprint(spot_hog_crossbred_soozhu_df)\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies with Minimum Versions for AKShare Project\nDESCRIPTION: Lists the required Python packages and their minimum versions for the AKShare project. Includes documentation generation tools like Sphinx and its extensions, as well as utilities like setuptools and markdown parsers.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsphinx>=7.4.3\nsphinx_rtd_theme>=2.0.0\nreadthedocs-sphinx-search>=0.3.2\nsphinx-markdown-tables>=0.0.17\nsetuptools>=69.2.0\nrecommonmark>=0.7.1\nmarkdown>=3.6\n```\n\n----------------------------------------\n\nTITLE: National Bureau of Statistics Population Data Sample\nDESCRIPTION: Sample output showing national population data from China's National Bureau of Statistics for the last 5 years, including total population, male and female population, and urban/rural population figures.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_82\n\nLANGUAGE: text\nCODE:\n```\n                  2022年    2021年    2020年      2019年        2018年\n年末总人口(万人)  141175.0  141260.0  141212.0  141008.0000  140541.000000\n男性人口(万人)    72206.0   72311.0   72357.0   72039.0000   71863.871426\n女性人口(万人)    68969.0   68949.0   68855.0   68969.0000   68677.128574\n城镇人口(万人)    92071.0   91425.0   90220.0   88426.1168   86432.715000\n乡村人口(万人)    49104.0   49835.0   50992.0   52581.8832   54108.285000\n```\n\n----------------------------------------\n\nTITLE: Regional Bureau of Statistics Data Sample\nDESCRIPTION: Sample output from the macro_china_nbs_region function showing regional GDP data for Hebei province across different quarters, and disposable income data for various regions in China during 2022.\nSOURCE: https://github.com/akfamily/akshare/blob/main/docs/data/macro/macro.md#2025-04-23_snippet_84\n\nLANGUAGE: text\nCODE:\n```\nregion_gdp_df\n河北省                                2023年第二季度   2023年第一季度  2022年第四季度\n地区生产总值_累计值(亿元)                 20779.0        10041.0        42370.0\n地区生产总值指数(上年同期=100)_累计值(%)    106.1         105.1          103.8\n\nregion_income_df\n居民人均可支配收入_累计值(元)      2022年第四季度     2022年第三季度     2022年第二季度  2022年第一季度\n北京市                            77414.548842      58596.590041     39391.260057    20630.0\n天津市                            48976.122565      38934.695987     25453.536929    14082.0\n河北省                            30867.016699      22783.082852     14998.243977     7863.0\n...                               ...               ...              ...              ...\n新疆维吾尔自治区                   27062.738782      16553.955250     10747.883634     5713.0\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies with Minimum Version Requirements\nDESCRIPTION: Lists the required Python packages with minimum version constraints for the AKShare project. Includes libraries for HTTP requests (aiohttp, requests), data processing (pandas), parsing (beautifulsoup4, lxml), file handling (xlrd, openpyxl), and various utility libraries.\nSOURCE: https://github.com/akfamily/akshare/blob/main/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.11.13\nbeautifulsoup4>=4.9.1\nlxml>=4.2.1\npandas>=0.25\nrequests>=2.22.0\nurllib3>=1.25.8\nhtml5lib>=1.0.1\ntqdm>=4.43.0\nxlrd>=1.2.0\nopenpyxl>=3.0.3\njsonpath>=0.82\ntabulate>=0.8.6\ndecorator>=4.4.2\nmini-racer>=0.12.4\nnest_asyncio>=1.6.0\n```\n\n----------------------------------------\n\nTITLE: Project Documentation Link\nDESCRIPTION: Markdown link to the project's documentation\nSOURCE: https://github.com/akfamily/akshare/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Documentation](https://akshare.akfamily.xyz/)\n```\n\n----------------------------------------\n\nTITLE: Email Contact Format for Security Issues\nDESCRIPTION: Email address format for reporting security-related issues and vulnerabilities\nSOURCE: https://github.com/akfamily/akshare/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<albertandking@gmail.com>\n```"
  }
]