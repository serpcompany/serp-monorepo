[
  {
    "owner": "tinyplex",
    "repo": "tinybase",
    "content": "TITLE: Working with Tabular Data in TinyBase\nDESCRIPTION: This snippet shows how to use TinyBase for tabular data structures. It demonstrates setting table data and individual cell values, then retrieving row data by ID.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstore\n  .setTable('pets', {fido: {species: 'dog'}})\n  .setCell('pets', 'fido', 'color', 'brown');\n\nconsole.log(store.getRow('pets', 'fido'));\n// -> {species: 'dog', color: 'brown'}\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Store with ValuesSchema\nDESCRIPTION: Creates a TinyBase store and sets a ValuesSchema to define value types and defaults, demonstrating how the schema validates and corrects input data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/1_using_schemas.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore().setValuesSchema({\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n});\nstore.setValues({employees: 3, website: 'pets.com'});\nconsole.log(store.getValues());\n// -> {employees: 3, open: false}\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Store in JavaScript\nDESCRIPTION: Creates a new empty TinyBase store instance using the createStore function imported from the tinybase module. Returns a Store object that can be used to manage data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/2_creating_a_store.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore();\n```\n\n----------------------------------------\n\nTITLE: Integrating TinyBase with React using Hooks\nDESCRIPTION: This snippet shows how to use TinyBase's React integration. It demonstrates the useCell hook which automatically binds component state to a database cell and re-renders when the data changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {useCell} from 'tinybase/ui-react';\n\nconst App1 = () => {\n  const color = useCell('pets', 'fido', 'color', store);\n  return <>Color: {color}</>;\n};\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App1 />);\nconsole.log(app.innerHTML);\n// -> 'Color: brown'\n\nstore.setCell('pets', 'fido', 'color', 'walnut');\nconsole.log(app.innerHTML);\n// -> 'Color: walnut'\n\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Project from Vite Template\nDESCRIPTION: Commands to create a new TinyBase project using a Vite template, install dependencies, and start the development server.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/1_getting_started.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tiged tinyplex/vite-tinybase my-tinybase-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-tinybase-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Modifying TinyBase Store Data at Different Granularities (JavaScript)\nDESCRIPTION: This code demonstrates various methods to modify data in a TinyBase Store, including setValue, setTable, setRow, and setCell.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setValue('employees', 4);\nconsole.log(store.getValues());\n// -> {employees: 4, open: true}\n\nstore.setTable('species', {dog: {price: 5}});\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog'}}, species: {dog: {price: 5}}}\n\nstore.setRow('species', 'cat', {price: 4});\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog'}}, species: {dog: {price: 5}, cat: {price: 4}}}\n\nstore.setCell('pets', 'fido', 'color', 'brown');\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown'}}, species: {dog: {price: 5}, cat: {price: 4}}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Key-Value Store with TinyBase\nDESCRIPTION: This example demonstrates how to create a TinyBase Store and populate it with simple key-value pairs. It initializes a store, sets values individually and in bulk, then retrieves all values.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore()\n  .setValues({employees: 3})\n  .setValue('open', true);\n\nconsole.log(store.getValues());\n// -> {employees: 3, open: true}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Queries with TinyQL in TinyBase\nDESCRIPTION: Illustrates the use of TinyQL to create complex queries across multiple tables in TinyBase. The example joins 'pets' and 'owners' tables, performs aggregations, and demonstrates how to access and sort query results.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createQueries} from 'tinybase';\n\nstore\n  .setTable('pets', {\n    fido: {species: 'dog', ownerId: '1', price: 5},\n    rex: {species: 'dog', ownerId: '2', price: 4},\n    felix: {species: 'cat', ownerId: '2', price: 3},\n    cujo: {species: 'dog', ownerId: '3', price: 4},\n  })\n  .setTable('owners', {\n    1: {name: 'Alice', state: 'CA'},\n    2: {name: 'Bob', state: 'CA'},\n    3: {name: 'Carol', state: 'WA'},\n  });\n\nconst queries = createQueries(store);\nqueries.setQueryDefinition(\n  'prices',\n  'pets',\n  ({select, join, group}) => {\n    select('species');\n    select('owners', 'state');\n    select('price');\n    join('owners', 'ownerId');\n    group('price', 'avg').as('avgPrice');\n  },\n);\n\nqueries\n  .getResultSortedRowIds('prices', 'avgPrice', true)\n  .forEach((rowId) => {\n    console.log(queries.getResultRow('prices', rowId));\n  });\n// -> {species: 'dog', state: 'CA', avgPrice: 4.5}\n// -> {species: 'dog', state: 'WA', avgPrice: 4}\n// -> {species: 'cat', state: 'CA', avgPrice: 3}\n\nqueries.destroy();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from TinyBase Store\nDESCRIPTION: Demonstrates various getter methods to retrieve data at different hierarchy levels including values, tables, rows, and cells. Shows the output of each getter method.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getValues());\n// -> {employees: 3, open: true}\n\nconsole.log(store.getValue('employees'));\n// -> 3\n\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog'}}, species: {dog: {price: 5}}}\n\nconsole.log(store.getTable('pets'));\n// -> {fido: {species: 'dog'}}\n\nconsole.log(store.getRow('pets', 'fido'));\n// -> {species: 'dog'}\n\nconsole.log(store.getCell('pets', 'fido', 'species'));\n// -> 'dog'\n```\n\n----------------------------------------\n\nTITLE: Using React Hooks with TinyBase\nDESCRIPTION: Shows integration with React using TinyBase's ui-react module, demonstrating reactive data binding with hooks.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {useCell} from 'tinybase/ui-react';\n\nconst App1 = () => {\n  const color = useCell('pets', 'fido', 'color', store);\n  return <>Color: {color}</>;\n};\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App1 />); // !act\nconsole.log(app.innerHTML);\n// -> 'Color: brown'\n\nstore.setCell('pets', 'fido', 'color', 'walnut'); // !act\nconsole.log(app.innerHTML);\n// -> 'Color: walnut'\n\nroot.unmount(); // !act\n```\n\n----------------------------------------\n\nTITLE: Enumerating IDs in TinyBase Store\nDESCRIPTION: Shows how to retrieve arrays of IDs for values, tables, rows, and cells using various getter methods.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getValueIds());\n// -> ['employees', 'open']\n\nconsole.log(store.getTableIds());\n// -> ['pets', 'species']\n\nconsole.log(store.getRowIds('pets'));\n// -> ['fido']\n\nconsole.log(store.getCellIds('pets', 'fido'));\n// -> ['species']\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic TinyBase Store in Node\nDESCRIPTION: JavaScript module that demonstrates creating a TinyBase store, setting values and cells, and displaying them in the console.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/1_getting_started.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore();\nstore.setValue('v1', 'Hello');\nstore.setCell('t1', 'r1', 'c1', 'World');\nconsole.log(store.getValue('v1') + ' ' + store.getCell('t1', 'r1', 'c1'));\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Store with Sample Data\nDESCRIPTION: Creates a TinyBase Store and sets initial tabular data for pets and species tables.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore().setTables({\n  pets: {fido: {species: 'dog'}},\n  species: {dog: {price: 5}},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Listeners in TinyBase\nDESCRIPTION: Demonstrates how to register and use listeners for data changes in TinyBase, including table-level event handling.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = store.addTableListener('pets', () =>\n  console.log('changed'),\n);\n\nstore.setCell('pets', 'fido', 'sold', false);\n// -> 'changed'\n\nstore.delListener(listenerId);\n```\n\n----------------------------------------\n\nTITLE: Setting Tables in TinyBase Store (JavaScript)\nDESCRIPTION: This example shows how to set tabular data in a TinyBase Store using the setTables method.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setTables({pets: {fido: {species: 'dog'}}});\n```\n\n----------------------------------------\n\nTITLE: Initializing Key-Value Store in TinyBase\nDESCRIPTION: Demonstrates creating a basic key-value store using TinyBase's createStore function. Shows how to set and retrieve simple values.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore()\n  .setValues({employees: 3})\n  .setValue('open', true);\n\nconsole.log(store.getValues());\n// -> {employees: 3, open: true}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Synchronization in TinyBase\nDESCRIPTION: Shows how to set up data synchronization between clients and servers using WebSockets in TinyBase with MergeableStore.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {WebSocketServer, WebSocket} from 'ws';\nimport {createMergeableStore} from 'tinybase';\nimport {createWsServer} from 'tinybase/synchronizers/synchronizer-ws-server';\nimport {createWsSynchronizer} from 'tinybase/synchronizers/synchronizer-ws-client';\n\n// On a server machine:\nconst server = createWsServer(\n  new WebSocketServer({port: 8040}),\n);\n\n// On a client machine:\nconst store1 = createMergeableStore();\nconst synchronizer1 = await createWsSynchronizer(\n  store1,\n  new WebSocket('ws://localhost:8040'),\n);\nawait synchronizer1.startSync();\n\n// ...\n\nsynchronizer1.destroy();\nserver.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Transactions in TinyBase\nDESCRIPTION: This snippet demonstrates how to use transactions to wrap multiple store changes and reduce listener calls. It compares regular sequential mutations with a transaction that batches changes together.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/6_transactions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore().setTables({pets: {fido: {species: 'dog'}}});\nconst listenerId = store.addRowListener('pets', 'fido', () =>\n  console.log('Fido changed'),\n);\n\n// Multiple changes, not in a transaction\nstore.setCell('pets', 'fido', 'color', 'brown');\nstore.setCell('pets', 'fido', 'sold', false);\n// -> 'Fido changed'\n// -> 'Fido changed'\n\n// Multiple changes in a transaction\nstore.transaction(() => {\n  store.setCell('pets', 'fido', 'color', 'walnut');\n  store.setCell('pets', 'fido', 'sold', true);\n});\n// -> 'Fido changed'\n\nstore.delListener(listenerId);\n```\n\n----------------------------------------\n\nTITLE: Using useSetCellCallback Hook for Interactive Updates in React\nDESCRIPTION: Demonstrates the use of useSetCellCallback hook to create an interactive component that updates a cell value in response to a button click. The example shows how to handle user events and update the Store accordingly.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/2_using_react_hooks.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSetCellCallback} from 'tinybase/ui-react';\n\nconst App3 = () => {\n  const handleClick = useSetCellCallback(\n    'pets',\n    'fido',\n    'sold',\n    (event) => event.bubbles,\n    [],\n    store,\n  );\n  return (\n    <span>\n      Sold: {useCell('pets', 'fido', 'sold', store) ? 'yes' : 'no'}\n      <br />\n      <button onClick={handleClick}>Sell</button>\n    </span>\n  );\n};\nroot.render(<App3 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>Sold: no<br><button>Sell</button></span>'\n\nconst button = app.querySelector('button');\n// User clicks the <button> element:\n// -> button MouseEvent('click', {bubbles: true})\n\nconsole.log(store.getTables());\n// -> {pets: {fido: {color: 'walnut', species: 'dog', sold: true}}}\nconsole.log(app.innerHTML);\n// -> '<span>Sold: yes<br><button>Sell</button></span>'\n```\n\n----------------------------------------\n\nTITLE: Iterating Over TinyBase Store Data\nDESCRIPTION: Shows how to use forEach methods to iterate over store contents, demonstrating nested iteration through tables and rows.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.forEachTable((tableId, forEachRow) => {\n  console.log(tableId);\n  forEachRow((rowId) => console.log(`- ${rowId}`));\n});\n// -> 'pets'\n// -> '- fido'\n// -> 'species'\n// -> '- dog'\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Listeners in TinyBase\nDESCRIPTION: This example demonstrates TinyBase's listener capabilities. It shows how to add a table listener that executes a callback when data changes, and how to properly clean up by removing listeners when no longer needed.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = store.addTableListener('pets', () =>\n  console.log('changed'),\n);\n\nstore.setCell('pets', 'fido', 'sold', false);\n// -> 'changed'\n\nstore.delListener(listenerId);\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Data with SessionPersister in JavaScript\nDESCRIPTION: Demonstrates how to create a TinyBase store, initialize a SessionPersister, and perform explicit save and load operations to browser session storage. Shows how data is serialized to JSON and can be manually manipulated.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/1_an_intro_to_persistence.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\nimport {createSessionPersister} from 'tinybase/persisters/persister-browser';\n\nconst store = createStore()\n  .setValues({employees: 3})\n  .setTables({pets: {fido: {species: 'dog'}}});\nconst persister = createSessionPersister(store, 'petStore');\n\nawait persister.save();\nconsole.log(sessionStorage.getItem('petStore'));\n// -> '[{\"pets\":{\"fido\":{\"species\":\"dog\"}}},{\"employees\":3}]'\n\nsessionStorage.setItem(\n  'petStore',\n  '[{\"pets\":{\"toto\":{\"species\":\"dog\"}}},{\"employees\":4}]',\n);\nawait persister.load();\nconsole.log(store.getTables());\n// -> {pets: {toto: {species: 'dog'}}}\nconsole.log(store.getValues());\n// -> {employees: 4}\n\nsessionStorage.clear();\n```\n\n----------------------------------------\n\nTITLE: Synchronizing TinyBase Store Between Devices Using WebSockets\nDESCRIPTION: Shows how to set up synchronization between TinyBase stores on different devices using WebSockets. It includes creating a WebSocket server and a client synchronizer to enable real-time data synchronization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {WebSocketServer, WebSocket} from 'ws';\nimport {createMergeableStore} from 'tinybase';\nimport {createWsServer} from 'tinybase/synchronizers/synchronizer-ws-server';\nimport {createWsSynchronizer} from 'tinybase/synchronizers/synchronizer-ws-client';\n\n// On a server machine:\nconst server = createWsServer(\n  new WebSocketServer({port: 8040}),\n);\n\n// On a client machine:\nconst store1 = createMergeableStore();\nconst synchronizer1 = await createWsSynchronizer(\n  store1,\n  new WebSocket('ws://localhost:8040'),\n);\nawait synchronizer1.startSync();\n\n// ...\n\nsynchronizer1.destroy();\nserver.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating Memoized Store with useCreateStore Hook in React\nDESCRIPTION: Illustrates the use of useCreateStore hook to create a memoized TinyBase Store instance within a React component. This approach ensures that the Store is only created once, even if the component re-renders.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/2_using_react_hooks.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCreateStore} from 'tinybase/ui-react';\n\nconst App4 = () => {\n  const store = useCreateStore(() => {\n    console.log('Store created');\n    return createStore().setTables({pets: {fido: {species: 'dog'}}});\n  });\n  return <span>{store.getCell('pets', 'fido', 'species')}</span>;\n};\n\nroot.render(<App4 />); // !act\n// -> 'Store created'\n\nroot.render(<App4 />); // !act\n// No second Store creation\n```\n\n----------------------------------------\n\nTITLE: Using TinyBase in Browser with CDN\nDESCRIPTION: HTML file demonstrating how to integrate TinyBase in a web page using a CDN. Shows importing the library, creating a store, setting values, and displaying them on the page.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/1_getting_started.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>My First TinyBase App</title>\n    <script type=\"importmap\">\n      {\"imports\": {\"tinybase\": \"https://esm.sh/tinybase@\"}}\n    </script>\n    <script type=\"module\">\n      import {createStore} from 'tinybase';\n\n      addEventListener('load', () => {\n        const store = createStore();\n        store.setValue('v1', 'Hello');\n        store.setCell('t1', 'r1', 'c1', 'World');\n\n        document.body.innerHTML =\n          store.getValue('v1') + ' ' + store.getCell('t1', 'r1', 'c1');\n      });\n    </script>\n  </head>\n  <body />\n</html>\n```\n\n----------------------------------------\n\nTITLE: Schema-based Typing with TinyBase\nDESCRIPTION: Shows how to use schema-based typing in TinyBase by importing from 'tinybase/with-schemas'. This provides stricter type checking based on the defined schema, including type constraints and validation for object properties.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/8_tinybase_and_typescript.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStore} from 'tinybase/with-schemas';\n\n// NB the 'with-schemas'\n\nconst store = createStore().setValuesSchema({\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n});\n\nstore.setValues({employees: 3}); //                      OK\nstore.setValues({employees: true}); //                   TypeScript error\nstore.setValues({employees: 3, website: 'pets.com'}); // TypeScript error\n```\n\n----------------------------------------\n\nTITLE: Checking Empty TinyBase Store Contents\nDESCRIPTION: Demonstrates how to verify that a newly created store is empty by checking its values and tables. Shows that both getValues() and getTables() return empty objects.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/2_creating_a_store.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getValues());\n// -> {}\n\nconsole.log(store.getTables());\n// -> {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Cell Value with useCell Hook in React\nDESCRIPTION: Demonstrates how to use the useCell hook to render a cell value from a TinyBase Store in a React component. The example shows how the component automatically updates when the cell value changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/2_using_react_hooks.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createStore} from 'tinybase';\nimport {useCell} from 'tinybase/ui-react';\n\nconst store = createStore().setCell('pets', 'fido', 'color', 'brown');\nconst App = () => <span>{useCell('pets', 'fido', 'color', store)}</span>;\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>brown</span>'\n\nstore.setCell('pets', 'fido', 'color', 'walnut'); // !act\nconsole.log(app.innerHTML);\n// -> '<span>walnut</span>'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Persister for Local String Storage in JavaScript\nDESCRIPTION: This example demonstrates how to create a custom Persister object that persists the Store to a local string called storeJson and automatically loads by polling for changes every second. It implements the required functions getPersisted, setPersisted, addPersisterListener, and delPersisterListener.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/4_custom_persistence.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\nimport {createCustomPersister} from 'tinybase/persisters';\n\nconst store = createStore().setTables({pets: {fido: {species: 'dog'}}});\nlet storeJson;\nlet interval;\n\nconst persister = createCustomPersister(\n  store,\n  async () => {\n    try {\n      return JSON.parse(storeJson);\n    } catch {}\n  },\n  async (getContent) => (storeJson = JSON.stringify(getContent())),\n  (listener) => (interval = setInterval(listener, 1000)),\n  () => clearInterval(interval),\n);\n\nawait persister.save();\nconsole.log(storeJson);\n// -> '[{\"pets\":{\"fido\":{\"species\":\"dog\"}}},{}]'\n\nstoreJson = '[{\"pets\":{\"fido\":{\"species\":\"dog\",\"color\":\"brown\"}}},{}]';\nawait persister.load();\n\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown'}}}\n\npersister.destroy();\n```\n\n----------------------------------------\n\nTITLE: Adding a Tables Listener to TinyBase Store\nDESCRIPTION: Demonstrates how to add a listener that responds to any changes in the Store's tabular data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = store.addTablesListener(() =>\n  console.log('Tables changed!'),\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TinyBase Store Listener Non-Trigger\nDESCRIPTION: Illustrates that the listener is not called when a setter method doesn't actually change the data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setCell('pets', 'fido', 'species', 'dog');\n// Since the data didn't actually change, the listener was not called.\n```\n\n----------------------------------------\n\nTITLE: Using useResultRowIds Hook with TinyBase Queries in React\nDESCRIPTION: Demonstrates how to use the useResultRowIds hook to reactively display query results in a React component. The example shows creating a store, defining a query, and using the hook to render the result.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/3_building_a_ui_with_queries.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createQueries, createStore} from 'tinybase';\nimport {useResultRowIds} from 'tinybase/ui-react';\n\nconst store = createStore().setTable('pets', {\n  fido: {species: 'dog', color: 'brown'},\n  felix: {species: 'cat', color: 'black'},\n  cujo: {species: 'dog', color: 'black'},\n});\nconst queries = createQueries(store).setQueryDefinition(\n  'dogColors',\n  'pets',\n  ({select, where}) => {\n    select('color');\n    where('species', 'dog');\n  },\n);\nconst App = () => (\n  <span>{JSON.stringify(useResultRowIds('dogColors', queries))}</span>\n);\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>[\"fido\",\"cujo\"]</span>'\n\nstore.setCell('pets', 'cujo', 'species', 'wolf'); // !act\nconsole.log(app.innerHTML);\n// -> '<span>[\"fido\"]</span>'\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from TinyBase Store (JavaScript)\nDESCRIPTION: This example shows how to delete data from a TinyBase Store using methods like delValue and delTable.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delValue('employees');\nconsole.log(store.getValues());\n// -> {open: true}\n\nstore.delTable('species');\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown'}}}\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase with React in HTML\nDESCRIPTION: This HTML snippet sets up a basic TinyBase app with React integration. It includes necessary script imports, creates a TinyBase store, and renders a CellView component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/1_getting_started_with_ui_react.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>My First TinyBase App</title>\n    <script type=\"importmap\">\n      {\n        \"imports\": {\n          \"tinybase\": \"https://esm.sh/tinybase@\",\n          \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n          \"react\": \"https://esm.sh/react@\",\n          \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n          \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n        }\n      }\n    </script>\n    <script type=\"module\" src=\"https://esm.sh/tsx\"></script>\n    <script type=\"text/jsx\">\n      import {createStore} from \"tinybase\";\n      import {CellView} from \"tinybase/ui-react\";\n      import {createRoot} from \"react-dom/client\";\n      import React from \"react\";\n\n      const store = createStore();\n      store.setCell('t1', 'r1', 'c1', 'Hello World');\n      createRoot(document.body).render(\n        <CellView store={store} tableId=\"t1\" rowId=\"r1\" cellId=\"c1\" />,\n      );\n    </script>\n  </head>\n  <body />\n</html>\n```\n\n----------------------------------------\n\nTITLE: Nesting Context Providers in React with TinyBase\nDESCRIPTION: This snippet illustrates how to nest Provider components, merging contexts from different levels. It shows how stores with different IDs can be accessed from deeply nested components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/5_using_context.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst App3 = () => {\n  const petStore = useCreateStore(() =>\n    createStore().setTables({pets: {fido: {species: 'dog'}}}),\n  );\n\n  return (\n    <Provider storesById={{pet: petStore}}>\n      <OuterPane />\n    </Provider>\n  );\n};\n\nconst OuterPane = () => {\n  const planetStore = useCreateStore(() =>\n    createStore().setTables({planets: {mars: {moons: 2}}}),\n  );\n  return (\n    <Provider store={planetStore}>\n      <InnerPane />\n    </Provider>\n  );\n};\n\nconst InnerPane = () => (\n  <span>\n    <CellView tableId=\"pets\" rowId=\"fido\" cellId=\"species\" store=\"pet\" />,\n    {useCell('planets', 'mars', 'moons')}\n  </span>\n);\n\nroot.render(<App3 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>dog,2</span>'\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Types to the ui-react Module in TinyBase\nDESCRIPTION: Demonstrates how to apply schema-based typing to the entire ui-react module by using the WithSchemas type. This approach allows accessing type-aware hooks and components from a single typed module reference.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as UiReact from 'tinybase/ui-react/with-schemas';\nimport {createStore} from 'tinybase/with-schemas';\n\nconst tablesSchema = {\n  pets: {species: {type: 'string'}},\n} as const;\nconst valuesSchema = {\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n} as const;\n\n// Cast the whole module to be schema-based with WithSchemas:\nconst UiReactWithSchemas = UiReact as UiReact.WithSchemas<\n  [typeof tablesSchema, typeof valuesSchema]\n>;\n// Deconstruct to access the hooks and components you need:\nconst {TableView, useTable, ValueView} = UiReactWithSchemas;\n\nconst store = createStore().setSchema(tablesSchema, valuesSchema);\nconst App = () => (\n  <div>\n    <TableView store={store} tableId=\"species\" /> {/*   OK               */}\n    <TableView store={store} tableId=\"customers\" /> {/* TypeScript error */}\n    {/* ... */}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using TinyBase Queries Context in React Application\nDESCRIPTION: Shows how to use the TinyBase Provider component to provide a Queries object context to the entire React application. This example demonstrates creating a store and queries, then using them in a nested component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/3_building_a_ui_with_queries.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Provider, ResultRowView, useRemoteRowId} from 'tinybase/ui-react';\n\nconst App4 = () => {\n  const store = useCreateStore(() =>\n    createStore().setTable('pets', {\n      fido: {species: 'dog', color: 'brown'},\n      felix: {species: 'cat', color: 'black'},\n      cujo: {species: 'dog', color: 'black'},\n    }),\n  );\n  const queries = useCreateQueries(store, (store) =>\n    createQueries(store).setQueryDefinition(\n      'dogColors',\n      'pets',\n      ({select, where}) => {\n        select('color');\n        where('species', 'dog');\n      },\n    ),\n  );\n\n  return (\n    <Provider queries={queries}>\n      <Pane />\n    </Provider>\n  );\n};\n\nconst Pane = () => (\n  <span>\n    <ResultRowView queryId=\"dogColors\" rowId=\"cujo\" debugIds={true} />/\n    {useRemoteRowId('dogColors', 'cujo')}\n  </span>\n);\n\nroot.render(<App4 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>cujo:{color:{black}}/</span>'\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Data with useTable Hook in React\nDESCRIPTION: Shows how to use the useTable hook to render an entire table from a TinyBase Store in a React component. The example demonstrates how the component updates when table data changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/2_using_react_hooks.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useTable} from 'tinybase/ui-react';\n\nconst App2 = () => <span>{JSON.stringify(useTable('pets', store))}</span>;\nroot.render(<App2 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>{\"fido\":{\"color\":\"walnut\"}}</span>'\n\nstore.setCell('pets', 'fido', 'species', 'dog'); // !act\nconsole.log(app.innerHTML);\n// -> '<span>{\"fido\":{\"color\":\"walnut\",\"species\":\"dog\"}}</span>'\n```\n\n----------------------------------------\n\nTITLE: Adding TablesSchema to TinyBase Store\nDESCRIPTION: Sets a TablesSchema on a TinyBase store to define the structure of tabular data, showing how the schema enforces data types and applies defaults when adding rows.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/1_using_schemas.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nstore.setTablesSchema({\n  pets: {\n    species: {type: 'string'},\n    sold: {type: 'boolean', default: false},\n  },\n});\nstore.setRow('pets', 'fido', {species: 'dog', color: 'brown', sold: 'maybe'});\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', sold: false}}}\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyQL Store and Queries\nDESCRIPTION: Sets up a basic TinyQL environment by creating a store with sample pet data and initializing a query object.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createQueries, createStore} from 'tinybase';\n\nconst store = createStore().setTable('pets', {\n  fido: {species: 'dog', color: 'brown'},\n  felix: {species: 'cat', color: 'black'},\n  cujo: {species: 'dog', color: 'black'},\n});\n\nconst queries = createQueries(store);\nqueries.setQueryDefinition('query', 'pets', (keywords) => {\n  // TinyQL goes here\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Store with Values and Tables\nDESCRIPTION: Creates a new TinyBase store and initializes it with values and tables using method chaining. Sets basic store values and nested table data structures.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore()\n  .setValues({employees: 3, open: true})\n  .setTables({\n    pets: {fido: {species: 'dog'}},\n    species: {dog: {price: 5}},\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Metrics with TinyBase\nDESCRIPTION: Demonstrates creating a store with tabular data and setting up a metric to track the highest price across all species. Uses the createMetrics function to initialize metrics tracking and setMetricDefinition to define a max aggregation.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/1_an_intro_to_metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMetrics, createStore} from 'tinybase';\n\nconst store = createStore().setTable('species', {\n  dog: {price: 5},\n  cat: {price: 4},\n  worm: {price: 1},\n});\n\nconst metrics = createMetrics(store);\nmetrics.setMetricDefinition(\n  'highestPrice', // metricId\n  'species', //      tableId to aggregate\n  'max', //          aggregation\n  'price', //        cellId to aggregate\n);\n\nconsole.log(metrics.getMetric('highestPrice'));\n// -> 5\n```\n\n----------------------------------------\n\nTITLE: Creating Metrics for Data Aggregation in TinyBase (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create and use metrics in TinyBase. It sets up a metric to calculate the highest price across species, logs the result, and adds a listener to track changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst metrics = createMetrics(store);\nmetrics.setMetricDefinition(\n  'highestPrice', // metricId\n  'species', //      tableId to aggregate\n  'max', //          aggregation\n  'price', //        cellId to aggregate\n);\n\nconsole.log(metrics.getMetric('highestPrice'));\n// -> 5\n\nmetrics.addMetricListener('highestPrice', () =>\n  console.log(metrics.getMetric('highestPrice')),\n);\nstore.setCell('species', 'horse', 'price', 20);\n// -> 20\n\nmetrics.destroy();\n```\n\n----------------------------------------\n\nTITLE: Setting a Value in TinyBase Store\nDESCRIPTION: Sets a string value in the TinyBase Store using a specific value ID. This demonstrates the basic key-value storage capability of TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v1.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setValue('v1', 'Hello World');\n```\n\n----------------------------------------\n\nTITLE: Adding a Type-Aware Listener to a TinyBase Store\nDESCRIPTION: Demonstrates how schema-based typing works with listeners in TinyBase. The listener's parameters are type-aware based on the defined schema, allowing TypeScript to catch type errors and provide proper autocompletion.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstore.addValueListener(null, (store, valueId, newValue, oldValue) => {\n  valueId == 'employees'; // OK\n  valueId == 'open'; //      OK\n  valueId == 'website'; //   TypeScript error\n\n  if (valueId == 'employees') {\n    newValue as number; //   OK\n    oldValue as number; //   OK\n    newValue as boolean; //  TypeScript error\n    oldValue as boolean; //  TypeScript error\n  }\n  if (valueId == 'open') {\n    newValue as boolean; //  OK\n    oldValue as boolean; //  OK\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Const Assertions with Schema Variables in TinyBase\nDESCRIPTION: Demonstrates the proper way to define schema variables using the 'as const' assertion to maintain the literal types needed for effective schema-based typing in TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst valuesSchema = {\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n} as const; // NB the `as const` modifier\nstore.setValuesSchema(valuesSchema);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic TinyBase Relationships\nDESCRIPTION: Demonstrates setting up a basic many-to-one relationship between pets and species tables using TinyBase's relationship module. Shows how to traverse relationships in both directions using getRemoteRowId and getLocalRowIds methods.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/1_an_intro_to_relationships.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createRelationships, createStore} from 'tinybase';\n\nconst store = createStore()\n  .setTable('pets', {\n    fido: {species: 'dog'},\n    felix: {species: 'cat'},\n    cujo: {species: 'dog'},\n  })\n  .setTable('species', {\n    dog: {price: 5},\n    cat: {price: 4},\n  });\n\nconst relationships = createRelationships(store);\nrelationships.setRelationshipDefinition(\n  'petSpecies', // relationshipId\n  'pets', //       localTableId to link from\n  'species', //    remoteTableId to link to\n  'species', //    cellId containing remote key\n);\n\nconsole.log(relationships.getRemoteRowId('petSpecies', 'fido'));\n// -> 'dog'\nconsole.log(relationships.getLocalRowIds('petSpecies', 'dog'));\n// -> ['fido', 'cujo']\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Queries with Listeners in TinyBase\nDESCRIPTION: This snippet shows how to add a listener to a Queries object to track changes in query results. It demonstrates the reactive nature of TinyBase queries and how to respond to data changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/1_an_intro_to_queries.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = queries.addResultTableListener('dogColors', () => {\n  console.log(queries.getResultTable('dogColors'));\n});\nstore.setCell('pets', 'cujo', 'species', 'wolf');\n// -> {fido: {color: 'brown'}}\n```\n\n----------------------------------------\n\nTITLE: Implementing TinyBase Inspector in React Application\nDESCRIPTION: This code snippet demonstrates how to set up and use the TinyBase Inspector component within a React application. It shows the basic structure including the Provider component and the Inspector component placement.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/12_inspecting_data.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst {Provider, useCreateStore} = TinyBaseUiReact;\nconst {Inspector} = TinyBaseUiReactInspector;\n\nconst App = () => (\n  <Provider store={useCreateStore(createStore)}>\n    <Body />\n  </Provider>\n);\n\nconst Body = () => {\n  return (\n    <>\n      <h1>My app</h1>\n      {/* ... */}\n      <Inspector />\n    </>\n  );\n};\n\naddEventListener('load', () =>\n  ReactDOM.createRoot(document.body).render(<App />),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Components for HTML Table Rendering\nDESCRIPTION: This example demonstrates component composition by creating custom TableView, RowView, and CellView components to render store data as an HTML table. It passes custom components through props to control how each level of the data hierarchy is rendered, resulting in a proper HTML table structure.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/3_using_react_components.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {TableView} from 'tinybase/ui-react';\n\nconst MyTableView = (props) => (\n  <table>\n    <tbody>\n      <TableView {...props} rowComponent={MyRowView} />\n    </tbody>\n  </table>\n);\n\nconst MyRowView = (props) => (\n  <tr>\n    <th>{props.rowId}</th>\n    <RowView {...props} cellComponent={MyCellView} />\n  </tr>\n);\n\nconst MyCellView = (props) => (\n  <td>\n    <CellView {...props} />\n  </td>\n);\n\nconst App5 = () => <MyTableView store={store} tableId=\"pets\" />;\nroot.render(<App5 />); // !act\nconsole.log(app.innerHTML);\n// -> '<table><tbody><tr><th>fido</th><td>walnut</td><td>42</td></tr></tbody></table>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Metrics Listeners\nDESCRIPTION: Shows how to implement reactive metrics tracking by adding a listener that responds to changes in the underlying data. Demonstrates how the metrics object automatically updates when store data changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/1_an_intro_to_metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = metrics.addMetricListener('highestPrice', () => {\n  console.log(metrics.getMetric('highestPrice'));\n});\nstore.setCell('species', 'horse', 'price', 20);\n// -> 20\n```\n\n----------------------------------------\n\nTITLE: Persisting TinyBase Store to Browser Session Storage\nDESCRIPTION: Demonstrates how to persist a TinyBase Store to browser session storage using a SessionPersister. It shows saving the store data and retrieving it from session storage, which can be used to maintain state between page reloads.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createSessionPersister} from 'tinybase/persisters/persister-browser';\n\nconst persister = createSessionPersister(store, 'demo');\nawait persister.save();\n\nconsole.log(sessionStorage.getItem('demo'));\n// ->\n`\n[\n  {\n    \"pets\":{\n      \"fido\":{\"species\":\"dog\",\"color\":\"walnut\",\"sold\":false},\n      \"polly\":{\"species\":\"parrot\",\"sold\":false}\n    }\n  },\n  {\"employees\":3,\"open\":true}\n]\n`;\n\npersister.destroy();\nsessionStorage.clear();\n```\n\n----------------------------------------\n\nTITLE: Creating a MergeableStore in TinyBase\nDESCRIPTION: This snippet demonstrates how to create a MergeableStore instance and add data to it. The MergeableStore extends the regular Store interface and maintains additional metadata for synchronization purposes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/1_using_a_mergeablestore.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMergeableStore} from 'tinybase';\n\nconst store1 = createMergeableStore('store1'); // !resetHlc\nstore1.setCell('pets', 'fido', 'species', 'dog');\n\nconsole.log(store1.getContent());\n// -> [{pets: {fido: {species: 'dog'}}}, {}]\n```\n\n----------------------------------------\n\nTITLE: Creating the Todo and TodoText Components\nDESCRIPTION: Implements the Todo and TodoText components for rendering individual todo items. Uses TinyBase hooks for managing todo state and interactions.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst Todo = (props) => (\n  <li className=\"todo\">\n    <TodoText {...props} />\n  </li>\n);\n\nconst TodoText = ({tableId, rowId}) => {\n  const done = useCell(tableId, rowId, 'done');\n  const className = 'text' + (done ? ' done' : '');\n  const handleClick = useSetCellCallback(tableId, rowId, 'done', () => !done, [\n    done,\n  ]);\n\n  return (\n    <span className={className} onClick={handleClick}>\n      <CellView tableId={tableId} rowId={rowId} cellId=\"text\" />\n    </span>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Main App Component with Store and Index Initialization\nDESCRIPTION: Creates the main React application component that initializes the TinyBase store and indexes, handles data loading, and provides the root UI structure.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const store = useCreateStore(createStore);\n  const indexes = useCreateIndexes(store, indexWords);\n  // ...\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(async () => {\n    await loadWords(store);\n    setIsLoading(false);\n  }, []);\n\n  const [stem, setStem] = useState('');\n  return (\n    <Provider store={store} indexes={indexes}>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <>\n          <Input stem={stem} onChange={setStem} />\n          <Results stem={stem} />\n        </>\n      )}\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading City Data into TinyBase Store\nDESCRIPTION: Defines a function to load city data from a TSV file into a TinyBase store. It fetches the data, parses it, and uses a transaction to efficiently insert all records into the 'cities' table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst NUMERIC = /^[\\d\\.-]+$/;\n\nconst loadCities = async (store) => {\n  const rows = (\n    await (await fetch(`https://tinybase.org/assets/cities.tsv`)).text()\n  ).split('\\n');\n  const cellIds = rows.shift().split('\\t');\n  store.transaction(() =>\n    rows.forEach((row, rowId) =>\n      row\n        .split('\\t')\n        .forEach((cell, c) =>\n          store.setCell(\n            'cities',\n            rowId,\n            cellIds[c],\n            NUMERIC.test(cell) ? parseFloat(cell) : cell,\n          ),\n        ),\n    ),\n  );\n};\n\nconst CUSTOM_CELLS = [\n  'Name',\n  'Country',\n  'Population',\n  'Latitude',\n  'Longitude',\n  'Elevation',\n];\n```\n\n----------------------------------------\n\nTITLE: Adding a Cell listener for reactive updates in TinyBase\nDESCRIPTION: This snippet sets up a CellListener that will be triggered whenever the specified Cell value changes, causing the UI to update automatically.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v3.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nstore.addCellListener('t1', 'r1', 'c1', update);\n```\n\n----------------------------------------\n\nTITLE: Custom Slice ID Generation in TinyBase\nDESCRIPTION: This example demonstrates how to generate custom slice IDs in TinyBase based on row data. It groups pets into 'heavy' and 'light' categories based on their weight.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/3_advanced_index_definition.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nindexes.setIndexDefinition(\n  'byWeightRange', //                                           indexId\n  'pets', //                                                    tableId to index\n  (getCell) => (getCell('weight') > 40 ? 'heavy' : 'light'), // => sliceId\n);\n\nconsole.log(indexes.getSliceIds('byWeightRange'));\n// -> ['heavy', 'light']\nconsole.log(indexes.getSliceRowIds('byWeightRange', 'light'));\n// -> ['felix', 'cujo']\n```\n\n----------------------------------------\n\nTITLE: Implementing Index Reactivity in TinyBase\nDESCRIPTION: Illustrates how to add listeners to an Index to react to changes in the underlying Store data. This example shows adding listeners for changes in Slice IDs and Slice Row IDs, and how they respond to updates in the Store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/1_an_intro_to_indexes.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nindexes.addSliceIdsListener('bySpecies', () => {\n  console.log(indexes.getSliceIds('bySpecies'));\n});\nstore.setRow('pets', 'lowly', {species: 'worm'});\n// -> ['dog', 'cat', 'worm']\n\nindexes.addSliceRowIdsListener('bySpecies', 'worm', () => {\n  console.log(indexes.getSliceRowIds('bySpecies', 'worm'));\n});\nstore.setRow('pets', 'smaug', {species: 'worm'});\n// -> ['lowly', 'smaug']\n```\n\n----------------------------------------\n\nTITLE: Rendering City Table with TinyBase SortedTableInHtmlTable\nDESCRIPTION: Creates a CityTable component using TinyBase's SortedTableInHtmlTable. It configures the table to display city data with sorting, pagination, and custom cell definitions.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst CityTable = () => (\n  <SortedTableInHtmlTable\n    tableId=\"cities\"\n    cellId=\"Population\"\n    descending={true}\n    limit={10}\n    sortOnClick={true}\n    paginator={true}\n    customCells={CUSTOM_CELLS}\n    idColumn={false}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Transactions in TinyBase\nDESCRIPTION: This snippet demonstrates how to implement transaction rollback using the doRollback callback. It shows making multiple changes including invalid values, then conditionally rolling back based on transaction log information.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/6_transactions.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.transaction(\n  () => {\n    store.setCell('pets', 'fido', 'color', 'black');\n    store.setCell('pets', 'fido', 'eyes', ['left', 'right']);\n    store.setCell('pets', 'fido', 'buyer', {name: 'Bob'});\n  },\n  () => {\n    const [, , changedCells, invalidCells] = store.getTransactionLog();\n    console.log(store.getTables());\n    // -> {pets: {fido: {species: 'dog', color: 'black', sold: true}}}\n    console.log(changedCells);\n    // -> {pets: {fido: {color: ['brown', 'black']}}}\n    console.log(invalidCells);\n    // -> {pets: {fido: {eyes: [['left', 'right']], buyer: [{name: 'Bob'}]}}}\n    return invalidCells['pets'] != null;\n  },\n);\n\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown', sold: true}}}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Todo Data\nDESCRIPTION: Sets up initial data for the Todo application with a 'todos' table containing three sample todo items. This data structure will be used to initialize the TinyBase store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst INITIAL_TODOS = {\n  todos: {\n    0: {text: 'Clean the floor'},\n    1: {text: 'Install TinyBase'},\n    2: {text: 'Book holiday'},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Checkpoints for Undo Stack in TinyBase (JavaScript)\nDESCRIPTION: This snippet shows how to use checkpoints in TinyBase to create an undo stack. It demonstrates setting a checkpoint, making changes to the store, and then reverting to the previous state using the checkpoint.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createCheckpoints} from 'tinybase';\n\nconst checkpoints = createCheckpoints(store);\n\nstore.setCell('pets', 'felix', 'sold', false);\ncheckpoints.addCheckpoint('pre-sale');\n\nstore.setCell('pets', 'felix', 'sold', true);\nconsole.log(store.getCell('pets', 'felix', 'sold'));\n// -> true\n\ncheckpoints.goBackward();\nconsole.log(store.getCell('pets', 'felix', 'sold'));\n// -> false\n```\n\n----------------------------------------\n\nTITLE: Using TinyBase Store Listener Parameters\nDESCRIPTION: Shows how to use the Store reference and getCellChange function provided as listener parameters.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId2 = store.addTablesListener((store, getCellChange) =>\n  console.log(getCellChange('species', 'dog', 'price')),\n);\n\nstore.setCell('species', 'dog', 'price', 8);\n// -> [true, 7, 8]\n\nstore.delListener(listenerId2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Second MergeableStore in TinyBase\nDESCRIPTION: This snippet demonstrates creating another MergeableStore instance with different data to be used for demonstrating the merge functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/1_using_a_mergeablestore.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store2 = createMergeableStore();\nstore2.setCell('pets', 'felix', 'species', 'cat');\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkpoints in TinyBase\nDESCRIPTION: Demonstrates basic checkpoint functionality including creating checkpoints, managing state changes, and navigating checkpoint history. Shows how to track changes to a store's data and implement undo functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/10_using_checkpoints/1_an_intro_to_checkpoints.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createCheckpoints, createStore} from 'tinybase';\n\nconst store = createStore().setTables({pets: {fido: {sold: false}}});\n\nconst checkpoints = createCheckpoints(store);\nconsole.log(checkpoints.getCheckpointIds());\n// -> [[], '0', []]\n\nstore.setCell('pets', 'fido', 'sold', true);\ncheckpoints.addCheckpoint('sale');\nconsole.log(checkpoints.getCheckpointIds());\n// -> [['0'], '1', []]\n\ncheckpoints.goBackward();\nconsole.log(store.getCell('pets', 'fido', 'sold'));\n// -> false\nconsole.log(checkpoints.getCheckpointIds());\n// -> [[], '0', ['1']]\n```\n\n----------------------------------------\n\nTITLE: Setting Up TinyBase in Node Application\nDESCRIPTION: Commands to create a new Node project and install TinyBase as a dependency.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/1_getting_started.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir MyFirstTinyBaseApp\ncd MyFirstTinyBaseApp\nnpm init -y\nnpm install tinybase\n```\n\n----------------------------------------\n\nTITLE: Creating UndoRedo Component with TinyBase Hooks\nDESCRIPTION: A React component that provides undo and redo functionality using TinyBase's useUndoInformation and useRedoInformation hooks, with conditional rendering based on availability.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst UndoRedo = () => {\n  const [canUndo, handleUndo, , undoLabel] = useUndoInformation();\n  const undo = canUndo ? (\n    <div id=\"undo\" onClick={handleUndo}>\n      undo {undoLabel}\n    </div>\n  ) : (\n    <div id=\"undo\" className=\"disabled\" />\n  );\n\n  const [canRedo, handleRedo, , redoLabel] = useRedoInformation();\n  const redo = canRedo ? (\n    <div id=\"redo\" onClick={handleRedo}>\n      redo {redoLabel}\n    </div>\n  ) : (\n    <div id=\"redo\" className=\"disabled\" />\n  );\n\n  return (\n    <div id=\"undoRedo\">\n      {undo}\n      {redo}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Index Structure in JavaScript\nDESCRIPTION: Demonstrates the conceptual structure of a Store and its corresponding Index using JavaScript object literals. This example shows how pet data in a Store would be represented in an Index grouped by species.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/1_an_intro_to_indexes.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ // Store\n  pets: {\n    fido: {species: 'dog'},\n    felix: {species: 'cat'},\n    cujo: {species: 'dog'},\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ // Indexes\n  bySpecies: {\n    dog: ['fido', 'cujo'],\n    cat: ['felix'],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Persistence with TinyBase Persister\nDESCRIPTION: Shows how to set up automatic loading and saving with a TinyBase persister. The example demonstrates initializing defaults, starting auto-persistence, and observing how changes to the store or storage are automatically synchronized.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/1_an_intro_to_persistence.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait persister.startAutoLoad([{pets: {fido: {species: 'dog'}}}, {}]);\nawait persister.startAutoSave();\n\nstore.delValues().setTables({pets: {felix: {species: 'cat'}}});\n// ...\nconsole.log(sessionStorage.getItem('petStore'));\n// -> '[{\"pets\":{\"felix\":{\"species\":\"cat\"}}},{}]'\n\nsessionStorage.setItem('petStore', '[{\"pets\":{\"toto\":{\"species\":\"dog\"}}},{}]');\n// -> StorageEvent('storage', {storageArea: sessionStorage, key: 'petStore'})\n// ...\nconsole.log(store.getTables());\n// -> {pets: {toto: {species: \"dog\"}}}\n\npersister.destroy();\nsessionStorage.clear();\n```\n\n----------------------------------------\n\nTITLE: Initializing dynamic Cell values in TinyBase Store with current time\nDESCRIPTION: Instead of setting a static value, this snippet creates a function to set the current time as a Cell value in the TinyBase Store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v3.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-store.setCell('t1', 'r1', 'c1', 'Hello World');\n+const setTime = () => {\n+  store.setCell('t1', 'r1', 'c1', new Date().toLocaleTimeString());\n+};\n+setTime();\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Persistence and Synchronization\nDESCRIPTION: Updates the persister to use a different key for the MergeableStore and adds synchronization with the WebSocket server when a server path ID is available.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_8\n\nLANGUAGE: diff-js\nCODE:\n```\n   useCreatePersister(\n     store,\n-    (store) => createLocalPersister(store, 'todos/store'),\n+    (store) => createLocalPersister(store, 'todos/mergeableStore'),\n     [],\n     async (persister) => {\n       await persister.startAutoLoad([INITIAL_TODOS]);\n       checkpoints?.clear();\n       await persister.startAutoSave();\n     },\n     [checkpoints],\n   );\n+  const [serverPathId, createServerPathId] = useServerPathId();\n+  useCreateSynchronizer(\n+    store,\n+    async (store) => {\n+      if (serverPathId) {\n+        const synchronizer = await createWsSynchronizer(\n+          store,\n+          new WebSocket(WS_SERVER + serverPathId),\n+        );\n+        await synchronizer.startSync();\n+        checkpoints?.clear();\n+        return synchronizer;\n+      }\n+    },\n+    [serverPathId, checkpoints],\n+  );\n```\n\n----------------------------------------\n\nTITLE: Using Indexes Context Provider\nDESCRIPTION: Demonstrates how to use the Provider component to make Indexes available throughout the React component tree.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/2_building_a_ui_with_indexes.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Provider, useSliceRowIds} from 'tinybase/ui-react';\n\nconst App5 = () => {\n  const store = useCreateStore(() =>\n    createStore().setTable('pets', {\n      fido: {species: 'dog'},\n      felix: {species: 'cat'},\n      cujo: {species: 'dog'},\n    }),\n  );\n  const indexes = useCreateIndexes(store, (store) =>\n    createIndexes(store).setIndexDefinition('bySpecies', 'pets', 'species'),\n  );\n\n  return (\n    <Provider indexes={indexes}>\n      <Pane />\n    </Provider>\n  );\n};\n\nconst Pane = () => (\n  <span>\n    <SliceView indexId=\"bySpecies\" sliceId=\"dog\" debugIds={true} />/\n    {useSliceRowIds('bySpecies', 'cat')}\n  </span>\n);\n\nroot.render(<App5 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>dog:{fido:{species:{dog}}cujo:{species:{dog}}}/felix</span>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Data Loading Function\nDESCRIPTION: A function to load table data from a TSV file, parse it correctly (handling numbers), and populate a TinyBase store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst NUMERIC = /^[\\d\\.]+$/;\n\nconst loadTable = async (store, tableId) => {\n  store.startTransaction();\n  const rows = (\n    await (await fetch(`https://tinybase.org/assets/${tableId}.tsv`)).text()\n  ).split('\\n');\n  const cellIds = rows.shift().split('\\t');\n  rows.forEach((row) => {\n    const cells = row.split('\\t');\n    if (cells.length == cellIds.length) {\n      const rowId = cells.shift();\n      cells.forEach((cell, c) => {\n        if (cell != '') {\n          if (NUMERIC.test(cell)) {\n            cell = parseFloat(cell);\n          }\n          store.setCell(tableId, rowId, cellIds[c + 1], cell);\n        }\n      });\n    }\n  });\n  store.finishTransaction();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating the First WebSocket Client for TinyBase Synchronization\nDESCRIPTION: Sets up the first client with a MergeableStore and WsSynchronizer that connects to the WebSocket server. This initializes the connection that will be used for bidirectional data synchronization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// On the first client machine:\nimport {createMergeableStore} from 'tinybase';\nimport {createWsSynchronizer} from 'tinybase/synchronizers/synchronizer-ws-client';\nimport {WebSocket} from 'ws';\n\nconst clientStore1 = createMergeableStore();\nconst clientSynchronizer1 = await createWsSynchronizer(\n  clientStore1,\n  new WebSocket('ws://localhost:8048'),\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Cell Data with CellView Component in React\nDESCRIPTION: This snippet demonstrates how to use the CellView component from TinyBase to display a single cell value from a store and how it automatically updates when the store changes. It creates a store with a 'brown' color cell for a pet named 'fido', then renders this value in a span element using CellView.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/3_using_react_components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createStore} from 'tinybase';\nimport {CellView} from 'tinybase/ui-react';\n\nconst store = createStore().setCell('pets', 'fido', 'color', 'brown');\nconst App = () => (\n  <span>\n    <CellView tableId=\"pets\" rowId=\"fido\" cellId=\"color\" store={store} />\n  </span>\n);\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>brown</span>'\n\nstore.setCell('pets', 'fido', 'color', 'walnut'); // !act\nconsole.log(app.innerHTML);\n// -> '<span>walnut</span>'\n```\n\n----------------------------------------\n\nTITLE: Using useMetric Hook with TinyBase Metrics in React\nDESCRIPTION: Demonstrates how to use the useMetric hook to bind a metric value to a React component and automatically re-render on changes. Shows creation of store, metrics, and basic component integration.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/2_building_a_ui_with_metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createMetrics, createStore} from 'tinybase';\nimport {useMetric} from 'tinybase/ui-react';\n\nconst store = createStore().setTable('species', {\n  dog: {price: 5},\n  cat: {price: 4},\n  worm: {price: 1},\n});\nconst metrics = createMetrics(store);\nmetrics.setMetricDefinition('highestPrice', 'species', 'max', 'price');\nconst App = () => <span>{useMetric('highestPrice', metrics)}</span>;\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>5</span>'\n\nstore.setCell('species', 'horse', 'price', 20); // !act\nconsole.log(app.innerHTML);\n// -> '<span>20</span>'\n```\n\n----------------------------------------\n\nTITLE: Using useCreateMetrics Hook in React\nDESCRIPTION: Shows how to use useCreateMetrics hook to create and memoize a Metrics object within a React application. Includes store creation and metric definition setup.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/2_building_a_ui_with_metrics.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCreateMetrics, useCreateStore} from 'tinybase/ui-react';\n\nconst App2 = () => {\n  const store = useCreateStore(() =>\n    createStore().setTable('species', {\n      dog: {price: 5},\n      cat: {price: 4},\n      worm: {price: 1},\n    }),\n  );\n  const metrics = useCreateMetrics(store, (store) =>\n    createMetrics(store).setMetricDefinition(\n      'highestPrice',\n      'species',\n      'max',\n      'price',\n    ),\n  );\n  return <span>{metrics?.getMetric('highestPrice')}</span>;\n};\n\nroot.render(<App2 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>5</span>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkpoint Reactivity in TinyBase\nDESCRIPTION: Shows how to implement reactive checkpoint listeners that respond to changes in the checkpoint stack. Demonstrates adding and removing listeners, and handling checkpoint state changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/10_using_checkpoints/1_an_intro_to_checkpoints.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = checkpoints.addCheckpointIdsListener(() => {\n  console.log(checkpoints.getCheckpointIds());\n});\nstore.setCell('pets', 'fido', 'species', 'dog');\n// -> [['0'], undefined, []]\ncheckpoints.addCheckpoint();\n// -> [['0'], '2', []]\n\ncheckpoints.delListener(listenerId);\n```\n\n----------------------------------------\n\nTITLE: Merging Two MergeableStore Instances in TinyBase\nDESCRIPTION: This snippet shows how to merge two MergeableStore instances using the merge method. The merge operation combines the data from both stores and resolves any conflicts based on the timestamp metadata.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/1_using_a_mergeablestore.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstore1.merge(store2);\n\nconsole.log(store1.getContent());\n// -> [{pets: {felix: {species: 'cat'}, fido: {species: 'dog'}}}, {}]\n\nconsole.log(store2.getContent());\n// -> [{pets: {felix: {species: 'cat'}, fido: {species: 'dog'}}}, {}]\n```\n\n----------------------------------------\n\nTITLE: Using TinyBase ResultTableView with Custom Row Component in React\nDESCRIPTION: Demonstrates how to use the ResultTableView component with a custom row component to display query results. The example shows creating a custom row component and using it within ResultTableView.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/3_building_a_ui_with_queries.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ResultCellView, ResultTableView} from 'tinybase/ui-react';\n\nconst MyResultRowView = (props) => (\n  <span>\n    {props.rowId}: <ResultCellView {...props} cellId=\"color\" />\n  </span>\n);\n\nconst App3 = () => (\n  <div>\n    <ResultTableView\n      queryId=\"dogColors\"\n      resultRowComponent={MyResultRowView}\n      queries={queries}\n    />\n  </div>\n);\n\nstore.setTable('pets', {\n  fido: {species: 'dog', color: 'brown'},\n  felix: {species: 'cat', color: 'black'},\n  cujo: {species: 'dog', color: 'black'},\n});\n\nroot.render(<App3 />); // !act\nconsole.log(app.innerHTML);\n// -> '<div><span>fido: brown</span><span>cujo: black</span></div>'\n```\n\n----------------------------------------\n\nTITLE: Enhancing Debugging with debugIds Prop\nDESCRIPTION: This snippet shows how to use the 'debugIds' prop with RowView to display the structure of the row with cell IDs. This creates a JSON-like representation that clearly shows the row ID, cell IDs, and their values, which is useful for debugging.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/3_using_react_components.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst App4 = () => (\n  <span>\n    <RowView tableId=\"pets\" rowId=\"fido\" store={store} debugIds={true} />\n  </span>\n);\n\nroot.render(<App4 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>fido:{color:{walnut}weight:{42}}</span>'\n```\n\n----------------------------------------\n\nTITLE: Triggering TinyBase Store Listener with Cell Update\nDESCRIPTION: Shows how updating a cell in the Store triggers the previously added listener.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setCell('species', 'dog', 'price', 6);\n// -> 'Tables changed!'\n```\n\n----------------------------------------\n\nTITLE: Complex DatabasePersisterConfig for Existing Database\nDESCRIPTION: This code shows a more complex configuration for binding TinyBase to an existing database with custom table and column names, specifying detailed mappings between Store Tables and database tables.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst databasePersisterConfig: DatabasePersisterConfig = {\n  mode: 'tabular',\n  tables: {\n    load: {\n      the_pets_table: {tableId: 'pets', rowIdColumnName: 'pet_id'},\n      the_species_table: {tableId: 'species', rowIdColumnName: 'species_id'},\n    },\n    save: {\n      pets: {tableId: 'the_pets_table', rowIdColumnName: 'pet_id'},\n      species: {tableId: 'the_species_table', rowIdColumnName: 'species_id'},\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Aggregation Metric in JavaScript with TinyBase\nDESCRIPTION: Demonstrates how to create a metric using a custom aggregation function to calculate the hypotenuse of distance values in a table. It uses the createStore, setTable, createMetrics, and setMetricDefinition methods from TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/3_advanced_metric_definition.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMetrics, createStore} from 'tinybase';\n\nconst store = createStore().setTable('dimensions', {\n  x: {distance: 1},\n  y: {distance: 2},\n  z: {distance: 2},\n});\n\nconst metrics = createMetrics(store);\nmetrics.setMetricDefinition(\n  'hypotenuse', //                            metricId\n  'dimensions', //                            tableId to aggregate\n  (distances) => Math.hypot(...distances), // custom aggregation\n  'distance', //                              cellId to aggregate\n);\n\nconsole.log(metrics.getMetric('hypotenuse'));\n// -> 3\n```\n\n----------------------------------------\n\nTITLE: Creating Metric with Custom Row Value Derivation in JavaScript\nDESCRIPTION: Illustrates how to create a metric that derives custom values from each row instead of using a single cell value. This example calculates the average density of cuboids by dividing mass by volume for each row.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/3_advanced_metric_definition.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setTable('cuboids', {\n  0: {mass: 10, volume: 5},\n  1: {mass: 12, volume: 3},\n  2: {mass: 24, volume: 4},\n});\n\nmetrics.setMetricDefinition(\n  'averageDensity', //                                 metricId\n  'cuboids', //                                        tableId to aggregate\n  'avg', //                                            aggregation\n  (getCell) => getCell('mass') / getCell('volume'), // => number to aggregate\n);\n\nconsole.log(metrics.getMetric('averageDensity'));\n// -> 4\n```\n\n----------------------------------------\n\nTITLE: Adding Reactive Relationship Listeners\nDESCRIPTION: Demonstrates how to implement reactive listeners for relationship changes using addRemoteRowIdListener. The listener fires whenever the relationship's remote row ID changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/1_an_intro_to_relationships.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId = relationships.addRemoteRowIdListener(\n  'petSpecies',\n  'cujo',\n  () => {\n    console.log(relationships.getRemoteRowId('petSpecies', 'cujo'));\n  },\n);\nstore.setCell('pets', 'cujo', 'species', 'wolf');\n// -> 'wolf'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BroadcastChannel Synchronization Between Browser Contexts\nDESCRIPTION: Shows how data changes in the UI context are synchronized to the service worker context using the BroadcastChannel API, demonstrating cross-context synchronization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfrontStore.setCell('pets', 'fido', 'species', 'dog');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconsole.log(backStore.getTables());\n// -> {pets: {fido: {species: 'dog'}}}\n```\n\n----------------------------------------\n\nTITLE: Value vs Reference in TinyBase Store\nDESCRIPTION: Illustrates that data returned from getter methods is by value, not by reference. Modifications to returned objects don't affect the store's data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fido = store.getRow('pets', 'fido');\nfido.color = 'brown';\nconsole.log(fido);\n// -> {species: 'dog', color: 'brown'}\n\nconsole.log(store.getRow('pets', 'fido'));\n// -> {species: 'dog'}\n```\n\n----------------------------------------\n\nTITLE: Creating the NewTodo Component for Adding Todos\nDESCRIPTION: Implements the NewTodo component, which allows users to add new todos. It uses React state for managing input and TinyBase hooks for adding new rows to the store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst NewTodo = () => {\n  const [text, setText] = useState('');\n  const handleChange = useCallback(({target: {value}}) => setText(value), []);\n  const handleKeyDown = useAddRowCallback(\n    'todos',\n    ({which, target: {value: text}}) =>\n      which == 13 && text != '' ? {text} : null,\n    [],\n    undefined,\n    () => setText(''),\n    [setText],\n  );\n\n  return (\n    <input\n      id=\"newTodo\"\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      placeholder=\"New Todo\"\n      value={text}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implicit Deletion in TinyBase Store (JavaScript)\nDESCRIPTION: This snippet demonstrates how setting an object that omits previously existing data implicitly deletes that data in a TinyBase Store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown'}}}\n\nstore.setRow('pets', 'fido', {species: 'dog'});\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog'}}}\n// The `color` Cell has been deleted.\n```\n\n----------------------------------------\n\nTITLE: Initializing Yjs Persisters with Auto-load and Auto-save\nDESCRIPTION: This snippet demonstrates how to create two Yjs documents and bind them to TinyBase Store objects using persisters with auto-load and auto-save functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\nimport {createYjsPersister} from 'tinybase/persisters/persister-yjs';\nimport {Doc} from 'yjs';\n\nconst doc1 = new Doc();\nconst store1 = createStore();\nconst persister1 = createYjsPersister(store1, doc1);\nawait persister1.startAutoLoad();\nawait persister1.startAutoSave();\n\nconst doc2 = new Doc();\nconst store2 = createStore();\nconst persister2 = createYjsPersister(store2, doc2);\nawait persister2.startAutoLoad();\nawait persister2.startAutoSave();\n```\n\n----------------------------------------\n\nTITLE: Complex TinyQL Query Implementation\nDESCRIPTION: Demonstrates a complex query with joins, computed columns, grouping, and having clauses to analyze pet prices by state.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition(\n  'query',\n  'pets',\n  ({select, join, where, group, having}) => {\n    select('state', 'name').as('stateName');\n    select(\n      (getTableCell) =>\n        getTableCell('species', 'price') * getTableCell('color', 'premium'),\n    ).as('fullPrice');\n\n    ['species', 'color', 'owner'].forEach((table) => join(table, `${table}Id`));\n    join('region', 'owner', 'regionId').as('state');\n\n    where('state', 'country', 'US');\n\n    group('fullPrice', 'avg').as('avgFullPrice');\n\n    having((getCell) => getCell('avgFullPrice') >= 5);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Relationships in TinyBase with JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Store with two tables ('pets' and 'species_color'), and define a relationship between them using a custom function to derive the remote Row Id. It showcases the flexibility of TinyBase's relationship module for complex data structures.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/3_advanced_relationship_definitions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createRelationships, createStore} from 'tinybase';\n\nconst store = createStore()\n  .setTable('pets', {\n    fido: {species: 'dog', color: 'brown'},\n    felix: {species: 'cat', color: 'black'},\n    cujo: {species: 'dog', color: 'black'},\n  })\n  .setTable('species_color', {\n    dog_brown: {price: 6},\n    dog_black: {price: 5},\n    cat_brown: {price: 4},\n    cat_black: {price: 2},\n  });\n\nconst relationships = createRelationships(store);\nrelationships.setRelationshipDefinition(\n  'petSpeciesColor', // relationshipId\n  'pets', //            localTableId to link from\n  'species_color', //   remote TableId to link to\n  (getCell) => `${getCell('species')}_${getCell('color')}`, // => remote Row Id\n);\n\nconsole.log(relationships.getRemoteRowId('petSpeciesColor', 'fido'));\n// -> 'dog_brown'\nconsole.log(relationships.getLocalRowIds('petSpeciesColor', 'dog_black'));\n// -> ['cujo']\n```\n\n----------------------------------------\n\nTITLE: Basic TinyBase Import\nDESCRIPTION: The simplest way to import core TinyBase functionality using ESNext, ESM, non-minified format from the main module.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {createMetrics, createStore} from 'tinybase';\n```\n\n----------------------------------------\n\nTITLE: Implementing the Todos Component for Displaying Todo List\nDESCRIPTION: Creates the Todos component using TinyBase's TableView to render the list of todos. It uses the Todo component to render individual todo items.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst Todos = () => (\n  <ul id=\"todos\">\n    <TableView tableId=\"todos\" rowComponent={Todo} />\n  </ul>\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Database and Loading Changes Back to TinyBase\nDESCRIPTION: This snippet demonstrates inserting a new row directly into the SQLite database, loading those changes back into the TinyBase Store, and finally destroying the persister.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ndb.exec(`INSERT INTO pets (_id, species) VALUES ('cujo', 'wolf')`);\nawait tabularPersister.load();\nconsole.log(store.getTable('pets'));\n// -> {felix: {species: 'cat'}, fido: {species: 'dog'}, cujo: {species: 'wolf'}}\n\ntabularPersister.destroy();\n```\n\n----------------------------------------\n\nTITLE: Using MetricView Component in React\nDESCRIPTION: Demonstrates the MetricView component usage for rendering metric values with automatic updates on changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/2_building_a_ui_with_metrics.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {MetricView} from 'tinybase/ui-react';\n\nconst App3 = () => (\n  <div>\n    <MetricView metricId=\"highestPrice\" metrics={metrics} />\n  </div>\n);\n\nroot.render(<App3 />); // !act\nconsole.log(app.innerHTML);\n// -> '<div>20</div>'\n```\n\n----------------------------------------\n\nTITLE: Using RowView Component for Default Cell Concatenation\nDESCRIPTION: This snippet shows the default behavior of the RowView component, which concatenates all cell values in a row. It adds a 'weight' cell to the 'fido' row and demonstrates how RowView renders both the color and weight values together without any separation.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/3_using_react_components.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {RowView} from 'tinybase/ui-react';\n\nstore.setCell('pets', 'fido', 'weight', 42);\nconst App2 = () => (\n  <span>\n    <RowView tableId=\"pets\" rowId=\"fido\" store={store} />\n  </span>\n);\n\nroot.render(<App2 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>walnut42</span>'\n```\n\n----------------------------------------\n\nTITLE: Implementing EditableValueView in a React Component\nDESCRIPTION: Shows how to replace a ValuesInHtmlTable component with an EditableValueView to make a specific value (username) editable in the UI. The component is placed within a container div with an id for styling.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/08_EditableValueView.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n     <>\n      <ValuesInHtmlTable />\n\n-     <ValuesInHtmlTable headerRow={false} idColumn={false} />\n+     <div id='edit'>\n+       Username:\n+       <EditableValueView valueId='username' />\n+     </div>\n     </>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Editing in ValuesInHtmlTable\nDESCRIPTION: Shows how to enable the editable property on the ValuesInHtmlTable component, which will internally use the EditableValueView for all values in the table, providing a consistent editing experience.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/08_EditableValueView.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n-     <ValuesInHtmlTable />\n+     <ValuesInHtmlTable editable={true}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Types Component for Todo Type Selection\nDESCRIPTION: Creates a new Types component that lists available todo types and allows users to select a type for filtering.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Types = () => (\n  <ul id=\"types\">\n    {TYPES.map((type) => (\n      <Type key={type} type={type} />\n    ))}\n  </ul>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server for TinyBase Synchronization\nDESCRIPTION: Sets up a WebSocket server on port 8048 using the 'ws' package to broker synchronization messages between clients. The server acts as a relay for TinyBase MergeableStore synchronization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// On a server machine:\nimport {createWsServer} from 'tinybase/synchronizers/synchronizer-ws-server';\nimport {WebSocketServer} from 'ws';\n\nconst server = createWsServer(new WebSocketServer({port: 8048}));\n```\n\n----------------------------------------\n\nTITLE: Adapting Types with Schema Changes in TinyBase\nDESCRIPTION: Shows how TypeScript typing adapts when schemas are added, removed, or changed in TinyBase. Each modification to the schema returns a store with updated type definitions that reflect the current schema state.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tablesSchema = {\n  pets: {species: {type: 'string'}},\n} as const;\n\nconst valuesSchema = {\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n} as const;\n\nconst store = createStore();\nconst storeWithBothSchemas = store.setSchema(tablesSchema, valuesSchema);\nconst storeWithJustValuesSchema = storeWithBothSchemas.delTablesSchema();\nconst storeWithValuesAndNewTablesSchema = storeWithBothSchemas.setTablesSchema({\n  pets: {\n    species: {type: 'string'},\n    sold: {type: 'boolean', default: false},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Typed Store with Values Schema in TinyBase\nDESCRIPTION: Creates a typed TinyBase store with a values schema that enforces types for specific fields at compile time. This example defines a schema with a numeric 'employees' field and a boolean 'open' field with a default value.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStore} from 'tinybase/with-schemas';\n\n// NB the 'with-schemas'\n\nconst store = createStore().setValuesSchema({\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n});\n\nstore.setValues({employees: 3}); //                      OK\nstore.setValues({employees: true}); //                   TypeScript error\nstore.setValues({employees: 3, website: 'pets.com'}); // TypeScript error\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values and Tables from TinyBase Store (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve the set values and tables from a TinyBase Store using getValues and getTables methods.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getValues());\n// -> {employees: 3, open: true}\n\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog'}}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Checkpoints with Persister Integration\nDESCRIPTION: Diff showing how to create a Checkpoints object using the useCreateCheckpoints hook and integrate it with the existing persister, ensuring the checkpoints are cleared after initial load.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n+  const checkpoints = useCreateCheckpoints(store, createCheckpoints);\n   useCreatePersister(\n     store,\n     (store) => createLocalPersister(store, 'todos/store'),\n     [],\n     async (persister) => {\n       await persister.startAutoLoad([INITIAL_TODOS]);\n+      checkpoints?.clear();\n       await persister.startAutoSave();\n     },\n+    [checkpoints],\n   );\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters Component in React with TinyBase\nDESCRIPTION: React component that renders a sidebar of filterable country first letters and starred items. Uses TinyBase hooks for state management and IndexView for efficient rendering of filter options.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst Filters = () => {\n  const {\n    indexes: currentIndexes,\n    indexId: currentIndexId,\n    sliceId: currentSliceId,\n  } = useCurrentSlice();\n\n  return (\n    <div id=\"filters\">\n      <Filter\n        indexes=\"starIndexes\"\n        indexId=\"star\"\n        sliceId=\"true\"\n        label={STAR}\n        selected={\n          currentIndexes == 'starIndexes' &&\n          currentIndexId == 'star' &&\n          currentSliceId == 'true'\n        }\n      />\n      <IndexView\n        indexId=\"firstLetter\"\n        indexes=\"countryIndexes\"\n        sliceComponent={Filter}\n        getSliceComponentProps={useCallback(\n          (sliceId) => ({\n            selected:\n              currentIndexes == 'countryIndexes' &&\n              currentIndexId == 'firstLetter' &&\n              currentSliceId == sliceId,\n          }),\n          [currentIndexes, currentIndexId, currentSliceId],\n        )}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enhancing Type Component with Pending Count by Category\nDESCRIPTION: Updates the Type component to show the number of pending todos for each category. It retrieves the metric value for the specific type and displays it in parentheses when greater than zero.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v4.md#2025-04-16_snippet_4\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Type = ({type}) => {\n+  const pending = useMetric(type);\n   const currentType = useValue('type', 'viewStore');\n   const handleClick = useSetValueCallback(\n     'type',\n     () => type,\n     [type],\n     'viewStore',\n   );\n   const className = 'type' + (type == currentType ? ' current' : '');\n\n   return (\n     <li className={className} onClick={handleClick}>\n       {type}\n+      {pending > 0 ? ` (${pending})` : ''}\n     </li>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Enhancing TodoText Component with Checkpoint Creation\nDESCRIPTION: Diff showing how to update the TodoText component to create checkpoints when a todo is marked as complete or resumed, using multiple hooks for better organization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_5\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const TodoText = ({tableId, rowId}) => {\n-  const done = useCell(tableId, rowId, 'done');\n+  const {done, text} = useRow(tableId, rowId);\n   const className = 'text' + (done ? ' done' : '');\n-  const handleClick = useSetCellCallback(tableId, rowId, 'done', () => !done, [\n-    done,\n-  ]);\n+  const setCell = useSetCellCallback(tableId, rowId, 'done', () => !done, [\n+    done,\n+  ]);\n+  const addCheckpoint = useSetCheckpointCallback(\n+    () => `${done ? 'resuming' : 'completing'} '${text}'`,\n+    [done],\n+  );\n+  const handleClick = useCallback(() => {\n+    setCell();\n+    addCheckpoint();\n+  }, [setCell, addCheckpoint]);\n\n   return (\n     <span className={className} onClick={handleClick}>\n       <CellView tableId={tableId} rowId={rowId} cellId=\"text\" />\n     </span>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Loading Data from SQLite into TinyBase Store\nDESCRIPTION: This code shows how to load data from SQLite back into the TinyBase Store after database changes. It includes both manual loading and cleanup by destroying the persister.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait jsonPersister.load();\nconsole.log(store.getTables());\n// -> {pets: {felix: {species: 'cat'}}}\n\njsonPersister.destroy();\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Schemas in TinyBase\nDESCRIPTION: Demonstrates how to apply and use schemas in TinyBase to enforce data types and default values for table cells.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setTablesSchema({\n  pets: {\n    species: {type: 'string'},\n    color: {type: 'string'},\n    sold: {type: 'boolean', default: false},\n  },\n});\n\nstore.setRow('pets', 'polly', {species: 'parrot'});\nconsole.log(store.getRow('pets', 'polly'));\n// -> {species: 'parrot', sold: false}\n\nstore.delTablesSchema();\n```\n\n----------------------------------------\n\nTITLE: Basic Having Clause Example in TinyQL\nDESCRIPTION: Demonstrates using the having clause to filter grouped results based on aggregated values. Shows filtering pets by minimum price after grouping.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition('query', 'pets', ({select, group, having}) => {\n  select('pets', 'species');\n  select('pets', 'price');\n  group('price', 'min').as('minPrice');\n  group('price', 'max').as('maxPrice');\n  having('minPrice', 3);\n});\n\nqueries.forEachResultRow('query', (rowId) => {\n  console.log({[rowId]: queries.getResultRow('query', rowId)});\n});\n```\n\n----------------------------------------\n\nTITLE: Removing TinyBase Store Listener\nDESCRIPTION: Demonstrates how to remove a previously added listener using its ID.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delListener(listenerId);\nstore.setCell('species', 'dog', 'price', 7);\n// Listener has been unregistered and so is not called.\n```\n\n----------------------------------------\n\nTITLE: Checking Data Existence in TinyBase Store\nDESCRIPTION: Shows how to use has* methods to check for existence of values, tables, rows, and cells without retrieving the actual data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.hasValue('website'));\n// -> false\n\nconsole.log(store.hasTable('customers'));\n// -> false\n\nconsole.log(store.hasRow('pets', 'fido'));\n// -> true\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Component in React with TinyBase\nDESCRIPTION: Individual filter component that renders a single filter option with label and count. Uses TinyBase hooks for slice management and click handling.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst Filter = ({\n  indexes = 'countryIndexes',\n  indexId,\n  sliceId,\n  selected,\n  label = sliceId,\n}) => {\n  const handleClick = useSetCurrentSlice(indexes, indexId, sliceId);\n  const className = 'filter' + (selected ? ' current' : '');\n  const rowIdCount = useSliceRowIds(indexId, sliceId, indexes).length;\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <span className=\"label\">{label}</span>\n      <span className=\"count\">{rowIdCount}</span>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Where Clause Operations\nDESCRIPTION: Demonstrates filtering data using where clauses with both direct value comparison and custom functions.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition('query', 'pets', ({select, where}) => {\n  select('species');\n  where('species', 'dog');\n});\n\nconsole.log(queries.getResultTable('query'));\n// -> {fido: {species: 'dog'}, cujo: {species: 'dog'}}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Definition\nDESCRIPTION: Shows how to create and define a relationship between the genres and metadata tables using the createRelationships function.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/05_RelationshipInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-js\nCODE:\n```\n const store = useCreateStore(createStore);\n+const relationships = useCreateRelationships(store, (store) =>\n+  createRelationships(store).setRelationshipDefinition(\n+    'genresMetadata',\n+    'genres',\n+    'metadata',\n+    (_, rowId) => rowId + '_meta',\n+  ),\n+);\n```\n\n----------------------------------------\n\nTITLE: Creating a DOM update function for TinyBase Cell values\nDESCRIPTION: This snippet creates a reusable update function that gets the current Cell value and updates the DOM accordingly, replacing the previous direct DOM update.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v3.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n-document.body.innerHTML = store.getCell('t1', 'r1', 'c1');\n+const update = () => {\n+  document.body.innerHTML = store.getCell('t1', 'r1', 'c1');\n+};\n+update();\n```\n\n----------------------------------------\n\nTITLE: Implementing Countries Component in React with TinyBase\nDESCRIPTION: Main component that displays the grid of country cards using TinyBase's SliceView component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst Countries = () => (\n  <div id=\"countries\">\n    <SliceView {...useCurrentSlice()} rowComponent={Country} />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Persistence\nDESCRIPTION: Configures the main store with schema and local storage persistence, including auto-loading and auto-saving functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v3.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = useCreateStore(() => createStore().setTablesSchema(SCHEMA));\nuseCreatePersister(\n  store,\n  (store) => createLocalPersister(store, 'todos/store'),\n  [],\n  async (persister) => {\n    await persister.startAutoLoad([INITIAL_TODOS]);\n    await persister.startAutoSave();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using TinyBase Queries in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Store, define a Table, create a Queries object, set a query definition, and retrieve query results. It showcases the basic usage of the TinyBase queries module.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/1_an_intro_to_queries.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createQueries, createStore} from 'tinybase';\n\nconst store = createStore().setTable('pets', {\n  fido: {species: 'dog', color: 'brown'},\n  felix: {species: 'cat', color: 'black'},\n  cujo: {species: 'dog', color: 'black'},\n});\n\nconst queries = createQueries(store);\nqueries.setQueryDefinition('dogColors', 'pets', ({select, where}) => {\n  select('color');\n  where('species', 'dog');\n});\n\nconsole.log(queries.getResultTable('dogColors'));\n// -> {fido: {color: 'brown'}, cujo: {color: 'black'}}\n```\n\n----------------------------------------\n\nTITLE: Basic Select Operation\nDESCRIPTION: Shows how to perform a basic select operation to retrieve a specific column from the pets table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition('query', 'pets', ({select}) => select('color'));\n\nconsole.log(queries.getResultTable('query'));\n// -> {fido: {color: 'brown'}, felix: {color: 'black'}, cujo: {color: 'black'}}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sorted Index in TinyBase\nDESCRIPTION: This snippet demonstrates how to create an index with custom sorting in TinyBase. It indexes pets by species and sorts them by weight within each species group.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/3_advanced_index_definition.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createIndexes, createStore} from 'tinybase';\n\nconst store = createStore().setTable('pets', {\n  fido: {species: 'dog', weight: 42},\n  felix: {species: 'cat', weight: 13},\n  cujo: {species: 'dog', weight: 37},\n});\n\nconst indexes = createIndexes(store);\nindexes.setIndexDefinition(\n  'bySpecies', // indexId\n  'pets', //      tableId to index\n  'species', //   cellId to index\n  'weight', //    cellId to sort by\n);\n\nconsole.log(indexes.getSliceRowIds('bySpecies', 'dog'));\n// -> ['cujo', 'fido']\n```\n\n----------------------------------------\n\nTITLE: TinyQL Keywords Structure\nDESCRIPTION: Demonstrates the basic structure of a TinyQL query using all available keywords: select, join, where, group, and having.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition(\n  'query',\n  'pets',\n  ({select, join, where, group, having}) => {\n    select(/* ... */);\n    select(/* ... */);\n    join(/* ... */);\n    where(/* ... */);\n    group(/* ... */);\n    having(/* ... */);\n    // and so on...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating TodoType Component for Checkpoint Creation\nDESCRIPTION: Diff showing how to modify the TodoType component to create checkpoints when a todo's type is changed, using the useCheckpoints hook.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_4\n\nLANGUAGE: diff-js\nCODE:\n```\n const TodoType = ({tableId, rowId}) => {\n   const type = useCell(tableId, rowId, 'type');\n+  const checkpoints = useCheckpoints();\n   const handleChange = useSetCellCallback(\n     tableId,\n     rowId,\n     'type',\n     ({target: {value}}) => value,\n     [],\n+    undefined,\n+    (_store, type) => checkpoints.addCheckpoint(`changing to '${type}'`),\n+    [checkpoints],\n   );\n```\n\n----------------------------------------\n\nTITLE: Adding the Share Component to the UI\nDESCRIPTION: Adds the Share component to the application UI and rearranges some existing components for clarity, while temporarily removing the undo buttons.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_10\n\nLANGUAGE: diff-js\nCODE:\n```\n-      <Title />\n+      <Share\n+        serverPathId={serverPathId}\n+        createServerPathId={createServerPathId}\n+      />\n       <NewTodo />\n       <Types />\n-      <UndoRedo />\n       <Todos />\n+      <Title />\n       <Inspector />\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Server Address for Client Connection\nDESCRIPTION: Defines the WebSocket server address that clients will connect to for synchronization. This server has been deployed specifically for the demo application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst WS_SERVER = 'wss://todo.demo.tinybase.org/';\n```\n\n----------------------------------------\n\nTITLE: Custom IndexView and SliceView Components\nDESCRIPTION: Shows how to create and use custom components with IndexView and SliceView for customized rendering of index data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/2_building_a_ui_with_indexes.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {IndexView} from 'tinybase/ui-react';\n\nconst MyRowView = (props) => <>{props.rowId};</>;\n\nconst MySliceView = (props) => (\n  <div>\n    {props.sliceId}:<SliceView {...props} rowComponent={MyRowView} />\n  </div>\n);\n\nconst App4 = () => (\n  <IndexView\n    indexId=\"bySpecies\"\n    indexes={indexes}\n    sliceComponent={MySliceView}\n  />\n);\n\nroot.render(<App4 />); // !act\nconsole.log(app.innerHTML);\n// -> '<div>dog:fido;cujo;</div><div>cat:felix;</div><div>worm:lowly;</div>'\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutator Listeners in TinyBase (JavaScript)\nDESCRIPTION: This snippet shows how to create a mutator listener in TinyBase by setting the 'mutator' flag to true. It demonstrates a listener that ensures the 'species' cell value is one of the known species, defaulting to 'unknown' if not.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/3_mutating_data_with_listeners.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst SPECIES = ['unknown', 'dog', 'cat', 'worm'];\nstore.addCellListener(\n  'pets',\n  null,\n  'species',\n  (store, tableId, rowId, cellId, newCell) => {\n    if (!SPECIES.includes(newCell)) {\n      store.setCell(tableId, rowId, cellId, SPECIES[0]);\n    }\n  },\n  true, // This listener is permitted to mutate the Store.\n);\n\nstore.setCell('pets', 'fido', 'species', 'worm');\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'worm', color: 'walnut'}}}\n\nstore.setCell('pets', 'fido', 'species', 'wolf');\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'unknown', color: 'walnut'}}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying an Index in TinyBase\nDESCRIPTION: Shows how to create a Store with pet data, define an Index based on species, and query the resulting Index structure. This example demonstrates the use of createStore, createIndexes, setIndexDefinition, and methods to retrieve Index data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/1_an_intro_to_indexes.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createIndexes, createStore} from 'tinybase';\n\nconst store = createStore().setTable('pets', {\n  fido: {species: 'dog'},\n  felix: {species: 'cat'},\n  cujo: {species: 'dog'},\n});\n\nconst indexes = createIndexes(store);\nindexes.setIndexDefinition(\n  'bySpecies', // indexId\n  'pets', //      tableId to index\n  'species', //    cellId to index on\n);\n\nconsole.log(indexes.getSliceIds('bySpecies'));\n// -> ['dog', 'cat']\nconsole.log(indexes.getSliceRowIds('bySpecies', 'dog'));\n// -> ['fido', 'cujo']\n```\n\n----------------------------------------\n\nTITLE: Establishing Synchronization Baseline Between Stores\nDESCRIPTION: A simple example of establishing the initial synchronization between two Store objects.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait syncDocs();\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Schema\nDESCRIPTION: Creates a schema definition for the todo items specifying data types, default values, and allowed values for each field.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v3.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst TYPES = ['Home', 'Work', 'Archived'];\nconst SCHEMA = {\n  todos: {\n    text: {type: 'string'},\n    done: {type: 'boolean', default: false},\n    type: {type: 'string', default: 'Home', allow: TYPES},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoType Component for Type Selection\nDESCRIPTION: Creates a TodoType component that allows users to change the type of an individual todo item using a dropdown menu.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst TodoType = ({tableId, rowId}) => {\n  const type = useCell(tableId, rowId, 'type');\n  const handleChange = useSetCellCallback(\n    tableId,\n    rowId,\n    'type',\n    ({target: {value}}) => value,\n    [],\n  );\n\n  return (\n    <select className=\"type\" onChange={handleChange} value={type}>\n      {TYPES.map((type) => (\n        <option>{type}</option>\n      ))}\n    </select>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Component\nDESCRIPTION: Shows how to modify the Provider component to include the queries object in the app-wide context.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/06_ResultTableInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-js\nCODE:\n```\n   return (\n-    <Provider store={store}>{isLoading ? <Loading /> : <Body />}</Provider>\n+    <Provider store={store} queries={queries}>\n+      {isLoading ? <Loading /> : <Body />}\n+    </Provider>\n   );\n```\n\n----------------------------------------\n\nTITLE: Array Value vs Reference in TinyBase Store\nDESCRIPTION: Demonstrates that arrays returned from ID getter methods are by value, not by reference. Modifications to returned arrays don't affect the store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tableIds = store.getTableIds();\ntableIds.pop();\nconsole.log(tableIds);\n// -> ['pets']\n\nconsole.log(store.getTableIds());\n// -> ['pets', 'species']\n```\n\n----------------------------------------\n\nTITLE: TinyBase React DOM Components Documentation Table\nDESCRIPTION: Markdown table documenting table-based components for rendering different types of TinyBase data structures with links to their respective demos.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/4_using_react_dom_components.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Component                    | Purpose                                                    |                                                            |\n| ---------------------------- | ---------------------------------------------------------- | ---------------------------------------------------------- |\n| ValuesInHtmlTable            | Renders Values.                                            | [demo](/demos/ui-components/valuesinhtmltable/)            |\n| TableInHtmlTable             | Renders a Table.                                           | [demo](/demos/ui-components/tableinhtmltable/)             |\n| SortedTableInHtmlTable       | Renders a sorted Table, with optional interactivity.       | [demo](/demos/ui-components/sortedtableinhtmltable/)       |\n| SliceInHtmlTable             | Renders a Slice from an Index.                             | [demo](/demos/ui-components/sliceinhtmltable/)             |\n| RelationshipInHtmlTable      | Renders the local and remote Tables of a relationship      | [demo](/demos/ui-components/relationshipinhtmltable/)      |\n| ResultTableInHtmlTable       | Renders a ResultTable.                                     | [demo](/demos/ui-components/resulttableinhtmltable/)       |\n| ResultSortedTableInHtmlTable | Renders a sorted ResultTable, with optional interactivity. | [demo](/demos/ui-components/resultsortedtableinhtmltable/) |\n```\n\n----------------------------------------\n\nTITLE: Implementing Country Component in React with TinyBase\nDESCRIPTION: Individual country card component with star/unstar functionality and country details display using TinyBase cell management.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst Country = (props) => {\n  const {tableId, rowId} = props;\n  const star = useCell(tableId, rowId, 'star', 'starStore');\n  const setStar = useSetCellCallback(\n    tableId,\n    rowId,\n    'star',\n    () => true,\n    [],\n    'starStore',\n  );\n  const setUnstar = useDelCellCallback(\n    tableId,\n    rowId,\n    'star',\n    true,\n    'starStore',\n  );\n  const handleClick = star ? setUnstar : setStar;\n\n  return (\n    <div className=\"country\">\n      <div className=\"star\" onClick={handleClick}>\n        {star ? STAR : UNSTAR}\n      </div>\n      <div className=\"flag\">\n        <CellView {...props} cellId=\"emoji\" store=\"countryStore\" />\n      </div>\n      <div className=\"name\">\n        <CellView {...props} cellId=\"name\" store=\"countryStore\" />\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating the Main App Component with TinyBase Store\nDESCRIPTION: Defines the main App component that initializes a TinyBase Store with sample data and provides it to child components through a Provider context.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const store = useCreateStore(createStore);\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(() => {\n    loadValues(store);\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <Provider store={store}>{isLoading ? <Loading /> : <Body />}</Provider>\n  );\n};\n\naddEventListener('load', () => createRoot(document.body).render(<App />));\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Queries with TinyQL in TinyBase\nDESCRIPTION: Demonstrates how to create and execute complex queries using TinyQL, including joins, aggregations, and sorting.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createQueries} from 'tinybase';\n\nstore\n  .setTable('pets', {\n    fido: {species: 'dog', ownerId: '1', price: 5},\n    rex: {species: 'dog', ownerId: '2', price: 4},\n    felix: {species: 'cat', ownerId: '2', price: 3},\n    cujo: {species: 'dog', ownerId: '3', price: 4},\n  })\n  .setTable('owners', {\n    1: {name: 'Alice', state: 'CA'},\n    2: {name: 'Bob', state: 'CA'},\n    3: {name: 'Carol', state: 'WA'},\n  });\n\nconst queries = createQueries(store);\nqueries.setQueryDefinition(\n  'prices',\n  'pets',\n  ({select, join, group}) => {\n    select('species');\n    select('owners', 'state');\n    select('price');\n    join('owners', 'ownerId');\n    group('price', 'avg').as('avgPrice');\n  },\n);\n\nqueries\n  .getResultSortedRowIds('prices', 'avgPrice', true)\n  .forEach((rowId) => {\n    console.log(queries.getResultRow('prices', rowId));\n  });\n// -> {species: 'dog', state: 'CA', avgPrice: 4.5}\n// -> {species: 'dog', state: 'WA', avgPrice: 4}\n// -> {species: 'cat', state: 'CA', avgPrice: 3}\n\nqueries.destroy();\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up BroadcastChannel Synchronizers\nDESCRIPTION: Shows how to properly clean up BroadcastChannel synchronizers to ensure that channel listeners are properly removed when they're no longer needed.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfrontSynchronizer.destroy();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbackSynchronizer.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating Relationships with React Hooks\nDESCRIPTION: Shows how to use useCreateRelationships hook for memoized relationship creation within React components. Includes store and relationship initialization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/2_building_a_ui_with_relationships.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCreateRelationships, useCreateStore} from 'tinybase/ui-react';\n\nconst App2 = () => {\n  const store = useCreateStore(() =>\n    createStore()\n      .setTable('pets', {\n        fido: {species: 'dog'},\n        felix: {species: 'cat'},\n        cujo: {species: 'dog'},\n      })\n      .setTable('species', {dog: {price: 5}, cat: {price: 4}}),\n  );\n  const relationships = useCreateRelationships(store, (store) =>\n    createRelationships(store).setRelationshipDefinition(\n      'petSpecies',\n      'pets',\n      'species',\n      'species',\n    ),\n  );\n  return <span>{relationships?.getRemoteRowId('petSpecies', 'fido')}</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Store and React App\nDESCRIPTION: Creates the main App component, initializes a TinyBase store, and sets up loading state. It uses useCreateStore to memoize the store creation and manages the loading state for data fetching.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const store = useCreateStore(createStore);\n  // ...\n  const [isLoading, setIsLoading] = useState(true);\n  useMemo(async () => {\n    await loadCities(store);\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <Provider store={store}>\n      {isLoading ? <Loading /> : <Body />}\n      <Inspector />\n    </Provider>\n  );\n}\n\naddEventListener('load', () => createRoot(document.body).render(<App />));\n```\n\n----------------------------------------\n\nTITLE: Importing Additional TinyBase Components for Todo App v2\nDESCRIPTION: Updates the import statements to include new components and hooks required for the enhanced Todo app, such as createIndexes, SliceView, and useCreateIndexes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createStore} from 'tinybase';\n+import {createIndexes, createStore} from 'tinybase';\n import {\n   CellView,\n   Provider,\n-  TableView,\n+  SliceView,\n   useAddRowCallback,\n   useCell,\n+  useCreateIndexes,\n   useCreateStore,\n   useSetCellCallback,\n+  useSetValueCallback,\n+  useValue,\n } from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Importing React and TinyBase Components\nDESCRIPTION: Imports necessary functions and components from React, ReactDOM, and TinyBase libraries for React integration.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v4.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\nimport {CellView, Provider} from 'tinybase/ui-react';\nimport {Inspector} from 'tinybase/ui-react-inspector';\nimport {createRoot} from 'react-dom/client';\nimport React from 'react';\n```\n\n----------------------------------------\n\nTITLE: Updating Database Data Directly with SQL\nDESCRIPTION: This snippet demonstrates updating the Store data directly in the SQLite database using SQL. It replaces the existing data with a new pet record.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndb.exec(\n  'UPDATE tinybase SET store = ' +\n    `'[{\"pets\":{\"felix\":{\"species\":\"cat\"}}},{}]' WHERE _id = '_';`,\n);\n```\n\n----------------------------------------\n\nTITLE: Viewing MergeableStore Metadata in TinyBase\nDESCRIPTION: This snippet shows how to access the internal metadata that a MergeableStore maintains for conflict resolution. The metadata includes timestamps using a hybrid logical clock (HLC) and hashes that enable the 'last write wins' approach.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/1_using_a_mergeablestore.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store1.getMergeableContent());\n// ->\n[\n  [\n    {\n      pets: [\n        {\n          fido: [\n            {species: ['dog', 'Nn1JUF-----FnHIC', 290599168]},\n            '',\n            2682656941,\n          ],\n        },\n        '',\n        2102515304,\n      ],\n    },\n    '',\n    3506229770,\n  ],\n  [{}, '', 0],\n];\n```\n\n----------------------------------------\n\nTITLE: Loading Word Data from TSV File into TinyBase Store\nDESCRIPTION: Asynchronously loads a TSV file containing word frequency data and inserts it into a TinyBase store within a single transaction for efficiency.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst loadWords = async (store) => {\n  const words = (\n    await (await fetch(`https://tinybase.org/assets/words.tsv`)).text()\n  ).split('\\n');\n  store.transaction(() =>\n    words.forEach((row, rowId) => {\n      const [word, perMillion] = row.split('\\t');\n      store.addRow('words', {\n        rank: rowId + 1,\n        word,\n        perMillion: Number(perMillion),\n      });\n    }),\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Synchronization and Manipulating Data on the First Client\nDESCRIPTION: Demonstrates starting the synchronization process on the first client and making data changes. Once synchronization is started, data changes will be propagated to other connected clients.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait clientSynchronizer1.startSync();\nclientStore1.setCell('pets', 'fido', 'species', 'dog');\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Linked List Relationships\nDESCRIPTION: Shows how to create a linked list relationship within the same table using the 'next' property to chain rows together. Demonstrates traversing the linked list using getLinkedRowIds method.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/1_an_intro_to_relationships.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setTable('pets', {\n  fido: {species: 'dog', next: 'felix'},\n  felix: {species: 'cat', next: 'cujo'},\n  cujo: {species: 'dog'},\n});\n\nrelationships.setRelationshipDefinition('petSequence', 'pets', 'pets', 'next');\n\nconsole.log(relationships.getLinkedRowIds('petSequence', 'fido'));\n// -> ['fido', 'felix', 'cujo']\nconsole.log(relationships.getLinkedRowIds('petSequence', 'felix'));\n// -> ['felix', 'cujo']\n```\n\n----------------------------------------\n\nTITLE: Extending TinyBase's WsServerDurableObject Class\nDESCRIPTION: JavaScript code that defines a Durable Object class by extending TinyBase's WsServerDurableObject to enable client synchronization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport class TinyBaseDurableObject extends WsServerDurableObject {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase and React Modules\nDESCRIPTION: Imports necessary modules from TinyBase, React, and related libraries for building the application. This includes core TinyBase functions, React hooks, and UI components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useMemo, useState} from 'react';\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createQueries, createStore} from 'tinybase';\nimport {Provider, useCreateStore} from 'tinybase/ui-react';\nimport {SortedTableInHtmlTable} from 'tinybase/ui-react-dom';\nimport {Inspector} from 'tinybase/ui-react-inspector';\n```\n\n----------------------------------------\n\nTITLE: Creating Main Body Component in React\nDESCRIPTION: Defines the Body component that renders the main content of the application, which includes the CityTable component. This component is displayed after data loading is complete.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Body = () => {\n  return (\n    <main>\n      <CityTable />\n    </main>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Saving TinyBase Store Data Using Tabular Mapping\nDESCRIPTION: This snippet saves the TinyBase Store data to SQLite using tabular mapping, creating separate database tables for each Store Table according to the mapping configuration.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nawait tabularPersister.save();\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Stores and Indexes in React Component\nDESCRIPTION: Enhances the App component to create a viewStore for current type selection and an Indexes object for indexing todos by type. Updates the Provider to include these new objects.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const App = () => {\n   const store = useCreateStore(() => createStore().setTables(INITIAL_TODOS));\n+  const viewStore = useCreateStore(() =>\n+    createStore().setValue('type', 'Home'),\n+  );\n+  const indexes = useCreateIndexes(store, (store) =>\n+    createIndexes(store).setIndexDefinition('types', 'todos', 'type'),\n+  );\n\n   return (\n-    <Provider store={store}>\n+    <Provider store={store} storesById={{viewStore}} indexes={indexes}>\n       <Title />\n       <NewTodo />\n+      <Types />\n       <Todos />\n       <Inspector />\n     </Provider>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Listening to Transaction Lifecycle Events\nDESCRIPTION: This example demonstrates how to register listeners for different stages of a transaction's lifecycle: start, willFinish, and didFinish. It shows when each listener is called and whether data mutation is permitted at each stage.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/6_transactions.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delTables();\n\nconst startListenerId = store.addStartTransactionListener(() => {\n  console.log('Start transaction');\n  console.log(store.getTables());\n  // Can mutate data\n});\n\nconst willFinishListenerId = store.addWillFinishTransactionListener(() => {\n  console.log('Will finish transaction');\n  console.log(store.getTables());\n  // Can mutate data\n});\n\nconst didFinishListenerId = store.addDidFinishTransactionListener(() => {\n  console.log('Did finish transaction');\n  console.log(store.getTables());\n  // Cannot mutate data\n});\n\nstore.setTable('pets', {fido: {species: 'dog'}});\n// -> 'Start transaction'\n// -> {}\n// -> 'Will finish transaction'\n// -> {pets: {fido: {species: 'dog'}}}\n// -> 'Did finish transaction'\n// -> {pets: {fido: {species: 'dog'}}}\n\nstore\n  .delListener(startListenerId)\n  .delListener(willFinishListenerId)\n  .delListener(didFinishListenerId);\n```\n\n----------------------------------------\n\nTITLE: Custom Cell Component Definition\nDESCRIPTION: Shows how to create a custom cell component for displaying popularity values with custom formatting.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/05_RelationshipInHtmlTable.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Popularity = (props) => (\n  <b>\n    <CellView {...props} />\n  </b>\n);\n\nconst customRelationshipCells = {\n  'genres.name': 'Genre',\n  'metadata.popularity': {\n    label: 'Popularity',\n    component: Popularity,\n  },\n  'metadata.text': 'Description',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cell Component for Dictionary Links\nDESCRIPTION: A React component that renders cell content as links to an online dictionary, using the useCell hook from TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst DictionaryCell = ({tableId, rowId, cellId, store}) => {\n  const word = useCell(tableId, rowId, cellId, store);\n  return (\n    <a\n      href={'https://www.merriam-webster.com/dictionary/' + word}\n      target=\"_blank\"\n    >\n      {word}\n    </a>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SliceInHtmlTable in React Component\nDESCRIPTION: Replaces multiple TableInHtmlTable components with a single SliceInHtmlTable component that displays genres with names of exactly 6 characters in length.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/04_SliceInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n-    <>\n-      <TableInHtmlTable tableId='genres' />\n-      <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n-      <TableInHtmlTable tableId='genres' customCells={customCells} />\n-    </>\n+    <SliceInHtmlTable indexId='genresByNameLength' sliceId='length 6' />\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Synchronization for Yjs\nDESCRIPTION: This snippet shows a simple function to synchronize two Yjs documents by copying full state between them using Yjs's applyUpdate and encodeStateAsUpdate functions.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {applyUpdate, encodeStateAsUpdate} from 'yjs';\n\nconst syncDocs = async () => {\n  // ...\n  applyUpdate(doc1, encodeStateAsUpdate(doc2));\n  applyUpdate(doc2, encodeStateAsUpdate(doc1));\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a MergeableStore with React Hook\nDESCRIPTION: React code snippet that creates a TinyBase MergeableStore using a custom hook to ensure it's not recreated on each render.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport const App = () => {\n  const store = useCreateMergeableStore(createMergeableStore);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes for Fast Lookups in TinyBase (JavaScript)\nDESCRIPTION: This snippet shows how to create and use indexes in TinyBase for fast data lookups. It creates an index on the 'species' cell, demonstrates querying slice IDs and row IDs, and sets up a listener for changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createIndexes} from 'tinybase';\n\nconst indexes = createIndexes(store);\nindexes.setIndexDefinition(\n  'bySpecies', // indexId\n  'pets', //      tableId to index\n  'species', //   cellId to index\n);\n\nconsole.log(indexes.getSliceIds('bySpecies'));\n// -> ['dog', 'cat']\nconsole.log(indexes.getSliceRowIds('bySpecies', 'dog'));\n// -> ['fido', 'rex', 'cujo']\n\nindexes.addSliceIdsListener('bySpecies', () =>\n  console.log(indexes.getSliceIds('bySpecies')),\n);\nstore.setRow('pets', 'lowly', {species: 'worm'});\n// -> ['dog', 'cat', 'worm']\n\nindexes.destroy();\n```\n\n----------------------------------------\n\nTITLE: Adding Row Listener in TinyBase Store\nDESCRIPTION: Demonstrates how to add a listener for changes to a specific row in a table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId3 = store.addRowListener(\n  'pets',\n  'fido',\n  (store, tableId, rowId) =>\n    console.log(`${rowId} row in ${tableId} table changed`),\n);\n\nstore.setCell('pets', 'fido', 'color', 'brown');\n// -> 'fido row in pets table changed'\n\nstore.delListener(listenerId3);\n```\n\n----------------------------------------\n\nTITLE: Basic SortedTableInHtmlTable Implementation\nDESCRIPTION: Shows the basic implementation of SortedTableInHtmlTable component replacing TableInHtmlTable.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n     <>\n-      <TableInHtmlTable tableId='genres' />\n-      <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n-      <TableInHtmlTable tableId='genres' customCells={customCells} />\n+      <SortedTableInHtmlTable\n+        tableId='movies'\n+      />\n     </>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Creating TinyBase Indexes\nDESCRIPTION: Initializes indexes for country and star data using TinyBase createIndexes functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst countryIndexes = useCreateIndexes(countryStore, (store) =>\n  createIndexes(store).setIndexDefinition(\n    'firstLetter',\n    'countries',\n    (getCell) => getCell('name')[0],\n    'name',\n    defaultSorter,\n  ),\n);\n\nconst starIndexes = useCreateIndexes(starStore, (store) =>\n  createIndexes(store).setIndexDefinition('star', 'countries', 'star'),\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Table-wide Editing\nDESCRIPTION: Modifies the TableInHtmlTable component to enable editing functionality across all cells by adding the editable prop.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/09_EditableCellView.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n-     <TableInHtmlTable tableId='genres' />\n+     <TableInHtmlTable tableId='genres' editable={true}/>\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Data in TinyBase Store\nDESCRIPTION: Demonstrates behavior when accessing non-existent data, showing undefined values for missing values/cells and empty objects for missing tables/rows.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/4_reading_from_stores.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(store.getValue('website'));\n// -> undefined\n\nconsole.log(store.getTable('customers'));\n// -> {}\n\nconsole.log(store.getRow('pets', 'felix'));\n// -> {}\n\nconsole.log(store.getCell('pets', 'fido', 'color'));\n// -> undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics for Dice Roll Statistics\nDESCRIPTION: Creates a Metrics object linked to the store and configures two metric definitions: one for tracking the average dice roll value and another for counting the total number of rolls.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst metrics = createMetrics(store)\n  .setMetricDefinition('average', 'rolls', 'avg', 'result')\n  .setMetricDefinition('count', 'rolls', 'sum');\n```\n\n----------------------------------------\n\nTITLE: Implementing ResultSortedTableInHtmlTable in React\nDESCRIPTION: This code shows how to replace the SortedTableInHtmlTable component with ResultSortedTableInHtmlTable. It updates the props to use queryId instead of tableId and removes the customCells prop as column labels are defined in the query.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/07_ResultSortedTableInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n     <>\n-      <SortedTableInHtmlTable\n-        tableId='movies'\n-        customCells={customCells}\n-        cellId='rating'\n+      <ResultSortedTableInHtmlTable\n+        queryId='recentMovies'\n+        cellId='Rating'\n         descending={true}\n         limit={7}\n         sortOnClick={true}\n         paginator={true}\n       />\n     </>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Creating a Dice Roll Component with React\nDESCRIPTION: Defines a React component that renders each dice roll as a Unicode character. It uses the useCell hook to access the roll result value from the TinyBase store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Roll = ({tableId, rowId}) => (\n  <span className=\"roll\">\n    {String.fromCharCode(9855 + useCell(tableId, rowId, 'result'))}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Provider Component with Single Store in React\nDESCRIPTION: This snippet demonstrates how to use the Provider component to make a single Store available to child components without explicitly passing it down. It shows the creation of a Store and its use in nested components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/5_using_context.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createStore} from 'tinybase';\nimport {CellView, Provider, useCell, useCreateStore} from 'tinybase/ui-react';\n\nconst App = () => {\n  const store = useCreateStore(() =>\n    createStore().setTables({pets: {fido: {species: 'dog', color: 'brown'}}}),\n  );\n\n  return (\n    <Provider store={store}>\n      <Pane />\n    </Provider>\n  );\n};\n\nconst Pane = () => (\n  <span>\n    <CellView tableId=\"pets\" rowId=\"fido\" cellId=\"species\" />,\n    {useCell('pets', 'fido', 'color')}\n  </span>\n);\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>dog,brown</span>'\n```\n\n----------------------------------------\n\nTITLE: Importing ResultTableInHtmlTable Dependencies\nDESCRIPTION: Shows the necessary import changes to switch from TableInHtmlTable to ResultTableInHtmlTable component, including adding queries-related imports.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/06_ResultTableInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createStore} from 'tinybase';\n+import {createQueries, createStore} from 'tinybase';\n-import {Provider, useCell, useCreateStore} from 'tinybase/ui-react';\n+import {Provider, useCell, useCreateQueries, useCreateStore} from 'tinybase/ui-react';\n-import {TableInHtmlTable} from 'tinybase/ui-react-dom';\n+import {ResultTableInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Converting from setValue to setCell in TinyBase\nDESCRIPTION: Shows how to change from using the setValue method with a simple key to using setCell with table, row, and cell identifiers. This modification stores 'Hello World' in a tabular structure instead of as a keyed value.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v2.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-store.setValue('v1', 'Hello World');\n+store.setCell('t1', 'r1', 'c1', 'Hello World');\n```\n\n----------------------------------------\n\nTITLE: Implementing Current Slice Hooks\nDESCRIPTION: Defines custom hooks for managing the current slice state in the application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst useCurrentSlice = () => useValues('viewStore');\n\nconst useSetCurrentSlice = (indexes, indexId, sliceId) =>\n  useSetValuesCallback(\n    () => ({indexes, indexId, sliceId}),\n    [indexes, indexId, sliceId],\n    'viewStore',\n  );\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for SliceInHtmlTable Component\nDESCRIPTION: Modifies imports to replace TableInHtmlTable with SliceInHtmlTable and adds necessary functions for index creation and management.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/04_SliceInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createStore} from 'tinybase';\n+import {createIndexes, createStore} from 'tinybase';\n-import {Provider, useCell, useCreateStore} from 'tinybase/ui-react';\n+import {Provider, useCell, useCreateIndexes, useCreateStore} from 'tinybase/ui-react';\n-import {TableInHtmlTable} from 'tinybase/ui-react-dom';\n+import {SliceInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase Components for Checkpoints Implementation\nDESCRIPTION: Diff showing the additional imports needed from TinyBase and TinyBase React UI libraries to implement checkpoints functionality for undo/redo features.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createIndexes, createMetrics, createStore} from 'tinybase';\n+import {createCheckpoints, createIndexes, createMetrics, createStore} from 'tinybase';\n import {createLocalPersister, createSessionPersister} from 'tinybase/persisters/persister-browser';\n import {\n   CellView,\n+  CheckpointView,\n   Provider,\n   SliceView,\n   useAddRowCallback,\n   useCell,\n+  useCheckpoints,\n+  useCreateCheckpoints,\n   useCreateIndexes,\n   useCreateMetrics,\n   useCreatePersister,\n   useCreateStore,\n   useMetric,\n+  useRedoInformation,\n+  useRow,\n   useSetCellCallback,\n+  useSetCheckpointCallback,\n   useSetValueCallback,\n+  useUndoInformation,\n   useValue,\n } from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for TinyBase and React\nDESCRIPTION: Imports the necessary modules from TinyBase, React, and TinyBase's React UI library for building the application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useCallback, useMemo, useState} from 'react';\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createIndexes, createStore} from 'tinybase';\nimport {\n  Provider,\n  useCreateIndexes,\n  useCreateStore,\n  useRow,\n  useSliceRowIds,\n} from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics to the TinyBase Provider Component\nDESCRIPTION: Updates the Provider component to include the metrics object, making it available throughout the application alongside the store, viewStore, and indexes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v4.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-jsx\nCODE:\n```\n   return (\n-    <Provider store={store} storesById={{viewStore}} indexes={indexes}>\n+    <Provider\n+      store={store}\n+      storesById={{viewStore}}\n+      indexes={indexes}\n+      metrics={metrics}\n+    >\n       <Title />\n       <NewTodo />\n       <Types />\n       <Todos />\n       <Inspector />\n     </Provider>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Optimizing Custom Aggregation Metric with Shortcuts in JavaScript\nDESCRIPTION: Shows how to optimize a custom aggregation metric by providing shortcut functions for adding, removing, and replacing values. This example improves the performance of the hypotenuse calculation by using constant-time operations for updates.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/3_advanced_metric_definition.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sqr = (num) => num * num;\nconst sqrt = Math.sqrt;\nmetrics.setMetricDefinition(\n  'fasterHypotenuse', //                      metricId\n  'dimensions', //                            tableId to aggregate\n  (distances) => Math.hypot(...distances), // custom aggregation\n  'distance', //                              cellId to aggregate\n  (metric, add) => sqr(sqr(metric) + sqr(add)), //                 add\n  (metric, rem) => sqr(sqr(metric) - sqr(rem)), //                 remove\n  (metric, add, rem) => sqr(sqr(metric) + sqr(add) - sqr(rem)), // replace\n);\n\nstore.setCell('dimensions', 'x', 'distance', 3);\nstore.setCell('dimensions', 'z', 'distance', 6);\nconsole.log(metrics.getMetric('hypotenuse'));\n// -> 7\n```\n\n----------------------------------------\n\nTITLE: Creating TinyBase Store and Queries with React Hooks\nDESCRIPTION: Shows how to use useCreateStore and useCreateQueries hooks to create a TinyBase Store and Queries object within a React component. This approach provides convenient memoization for performance optimization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/3_building_a_ui_with_queries.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCreateQueries, useCreateStore} from 'tinybase/ui-react';\n\nconst App2 = () => {\n  const store = useCreateStore(() =>\n    createStore().setTable('pets', {\n      fido: {species: 'dog', color: 'brown'},\n      felix: {species: 'cat', color: 'black'},\n      cujo: {species: 'dog', color: 'black'},\n    }),\n  );\n  const queries = useCreateQueries(store, (store) =>\n    createQueries(store).setQueryDefinition(\n      'dogColors',\n      'pets',\n      ({select, where}) => {\n        select('color');\n        where('species', 'dog');\n      },\n    ),\n  );\n  return <span>{JSON.stringify(useResultRowIds('dogColors', queries))}</span>;\n};\n\nroot.render(<App2 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>[\"fido\",\"cujo\"]</span>'\n```\n\n----------------------------------------\n\nTITLE: Switching from ValuesInHtmlTable to TableInHtmlTable Component\nDESCRIPTION: Demonstrates how to change imports from ValuesInHtmlTable to TableInHtmlTable in a React component using TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {ValuesInHtmlTable} from 'tinybase/ui-react-dom';\n+import {TableInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Tables in TinyBase Store\nDESCRIPTION: This JSX snippet shows how to load multiple tables into a TinyBase Store using a transaction.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/10_Inspector.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nuseMemo(async () => {\n  store.startTransaction();\n  await Promise.all(\n    ['movies', 'genres', 'people', 'cast'].map((tableId) =>\n      loadTable(store, tableId),\n    ),\n  );\n  store.finishTransaction();\n  setIsLoading(false);\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tabular Persister for SQLite\nDESCRIPTION: This code creates a SQLiteWasmPersister using tabular mapping mode. It explicitly maps Store Tables to database tables for both save and load operations.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst tabularPersister = createSqliteWasmPersister(store, sqlite3, db, {\n  mode: 'tabular',\n  tables: {\n    save: {pets: 'pets', species: 'animal_species'},\n    load: {pets: 'pets', animal_species: 'species'},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Saving TinyBase Store Data to SQLite\nDESCRIPTION: This snippet demonstrates how to save TinyBase Store data to SQLite using the persister. The save method returns a Promise that resolves when the save operation is complete.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nawait jsonPersister.save();\n```\n\n----------------------------------------\n\nTITLE: Enhancing NewTodo Component with Checkpoint Creation\nDESCRIPTION: Diff showing how to update the NewTodo component to create checkpoints when users add new todos, using the useSetCheckpointCallback hook.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-js\nCODE:\n```\n const NewTodo = () => {\n   const [text, setText] = useState('');\n   const type = useValue('type', 'viewStore');\n   const handleChange = useCallback(({target: {value}}) => setText(value), []);\n+  const addCheckpoint = useSetCheckpointCallback(\n+    () => `adding '${text}'`,\n+    [text],\n+  );\n   const handleKeyDown = useAddRowCallback(\n     'todos',\n     ({which, target: {value: text}}) =>\n       which == 13 && text != '' ? {text, type} : null,\n     [type],\n     undefined,\n-    () => setText(''),\n+    () => {\n+      setText('');\n+      addCheckpoint();\n+    },\n-    [setText],\n+    [setText, addCheckpoint],\n   );\n```\n\n----------------------------------------\n\nTITLE: Altering TinyBase TablesSchema with New Required Fields\nDESCRIPTION: Demonstrates how changing a TablesSchema by adding new required fields updates existing data with default values to maintain schema compliance.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/1_using_schemas.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nstore.setTablesSchema({\n  pets: {\n    species: {type: 'string'},\n    legs: {type: 'number', default: 4},\n    sold: {type: 'boolean', default: false},\n  },\n});\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', sold: false, legs: 4}}}\n```\n\n----------------------------------------\n\nTITLE: Data Loss When Changing TinyBase TablesSchema\nDESCRIPTION: Illustrates how significantly changing a TablesSchema can result in data loss when existing data no longer matches the new schema requirements.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/1_using_schemas.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nstore.setTablesSchema({\n  pets: {\n    color: {type: 'string'},\n    weight: {type: 'number'},\n  },\n});\nconsole.log(store.getTables());\n// -> {}\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Synchronization from First to Second Client\nDESCRIPTION: Shows how data from the first client is automatically synchronized to the second client. After synchronization, the second client's store will contain the data that was added to the first client.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconsole.log(clientStore2.getTables());\n// -> {pets: {fido: {species: 'dog'}}}\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Persister for SQLite\nDESCRIPTION: This code creates a SQLiteWasmPersister using JSON serialization mode (the default). It requires the sqlite3 module instance and the database connection.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst jsonPersister = createSqliteWasmPersister(store, sqlite3, db);\n```\n\n----------------------------------------\n\nTITLE: Styling Application Layout\nDESCRIPTION: Defines CSS styles for the application layout using LESS syntax.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_6\n\nLANGUAGE: less\nCODE:\n```\n@accentColor: #d81b60;\n@spacing: 0.5rem;\n@border: 1px solid #ccc;\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\nbody {\n  box-sizing: border-box;\n  display: flex;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  margin: 0;\n  height: 100vh;\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Validation in TinyBase TablesSchema\nDESCRIPTION: Shows how TablesSchema enforces strict type checking without type casting, requiring values to match the exact specified types.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/1_using_schemas.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nstore.setCell('pets', 'fido', 'legs', '3');\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', sold: false, legs: 4}}}\n\nstore.setCell('pets', 'fido', 'legs', 3);\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', sold: false, legs: 3}}}\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase Components in JavaScript\nDESCRIPTION: This snippet demonstrates the import statements needed for using the TinyBase Inspector and other components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/10_Inspector.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Provider, useCreateStore, useTableIds} from 'tinybase/ui-react';\nimport {Inspector} from 'tinybase/ui-react-inspector';\n```\n\n----------------------------------------\n\nTITLE: Setting Up BroadcastChannel Synchronization in Browser UI\nDESCRIPTION: Shows how to create a BroadcastChannelSynchronizer in the UI part of a browser application. This enables synchronization between different parts of a browser using the BroadcastChannel API.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createBroadcastChannelSynchronizer} from 'tinybase/synchronizers/synchronizer-broadcast-channel';\n\nconst frontStore = createMergeableStore();\nconst frontSynchronizer = createBroadcastChannelSynchronizer(\n  frontStore,\n  'syncChannel',\n);\nawait frontSynchronizer.startSync();\n```\n\n----------------------------------------\n\nTITLE: Rendering Colored Dice Rolls Component\nDESCRIPTION: Updates the Roll component to add color styling based on the 'color' cell value, displaying dice as Unicode characters with appropriate color classes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Roll = ({tableId, rowId}) => (\n  <span className={`roll ${useCell(tableId, rowId, 'color')}`}>\n    {String.fromCharCode(9855 + useCell(tableId, rowId, 'result'))}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Reactive Query Updates Example\nDESCRIPTION: Demonstrates TinyQL's reactive capabilities by showing how query results automatically update when underlying data changes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.addResultSortedRowIdsListener(\n  'query',\n  'avgFullPrice',\n  true,\n  0,\n  3,\n  (_queries, _queryId, _cellId, _descending, _offset, _limit, rowIds) =>\n    console.log(queries.getResultTable('query')),\n);\n\n// Bob is actually in British Columbia!\nstore.setCell('owner', 2, 'regionId', '4');\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes with useCreateIndexes Hook\nDESCRIPTION: Shows how to use useCreateIndexes hook to create and initialize an Indexes object within a React component with proper memoization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/2_building_a_ui_with_indexes.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCreateIndexes, useCreateStore} from 'tinybase/ui-react';\n\nconst App2 = () => {\n  const store = useCreateStore(() =>\n    createStore().setTable('pets', {\n      fido: {species: 'dog'},\n      felix: {species: 'cat'},\n      cujo: {species: 'dog'},\n    }),\n  );\n  const indexes = useCreateIndexes(store, (store) =>\n    createIndexes(store).setIndexDefinition('bySpecies', 'pets', 'species'),\n  );\n  return <span>{JSON.stringify(useSliceIds('bySpecies', indexes))}</span>;\n};\n\nroot.render(<App2 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>[\"dog\",\"cat\"]</span>'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Functions and Components\nDESCRIPTION: Imports necessary functions and components from React, TinyBase, and related modules. These imports provide the building blocks for the Todo application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useCallback, useState} from 'react';\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createStore} from 'tinybase';\nimport {\n  CellView,\n  Provider,\n  TableView,\n  useAddRowCallback,\n  useCell,\n  useCreateStore,\n  useSetCellCallback,\n} from 'tinybase/ui-react';\nimport {Inspector} from 'tinybase/ui-react-inspector';\n```\n\n----------------------------------------\n\nTITLE: Creating an Index of Word Stems for Fast Search\nDESCRIPTION: Sets up a TinyBase index that registers each word in multiple slices based on its prefixes (stems) for efficient prefix-based search functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst indexWords = (store) =>\n  createIndexes(store).setIndexDefinition('stems', 'words', (getCell) => {\n    const word = getCell('word');\n    const stems = [];\n    for (let l = 0; l <= word.length; l++) {\n      stems.push(word.substring(0, l));\n    }\n    return stems;\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple TinyBase Store\nDESCRIPTION: This snippet creates a TinyBase Store with a simple data structure containing a 'pets' table with one row for 'fido'.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst store = createStore().setTables({pets: {fido: {species: 'dog'}}});\n```\n\n----------------------------------------\n\nTITLE: Importing the EditableValueView Component in React\nDESCRIPTION: Demonstrates how to import the EditableValueView component from the TinyBase UI React DOM library alongside the ValuesInHtmlTable component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/08_EditableValueView.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {ValuesInHtmlTable} from 'tinybase/ui-react-dom';\n+import {EditableValueView, ValuesInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Setting up Import Map for TinyBase and React\nDESCRIPTION: Configures an import map to load TinyBase, React, and related modules from ESM.sh. This enables the use of these libraries directly in the browser with proper module resolution.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Values in TinyBase Store (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a TinyBase Store and set keyed values using the setValues method.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore();\nstore.setValues({employees: 3, open: true});\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Component with Queries in JSX\nDESCRIPTION: This snippet shows how to update the Provider component to include the queries object in the app-wide context, allowing child components to access the defined queries.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/07_ResultSortedTableInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-js\nCODE:\n```\n   return (\n-    <Provider store={store}>{isLoading ? <Loading /> : <Body />}</Provider>\n+    <Provider store={store} queries={queries}>\n+      {isLoading ? <Loading /> : <Body />}\n+    </Provider>\n   );\n```\n\n----------------------------------------\n\nTITLE: Creating the Top-Level App Component with TinyBase Store\nDESCRIPTION: Defines the main App component, creates a TinyBase store with initial data, and sets up the component structure. Uses the Provider component to make the store available throughout the app.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const store = useCreateStore(() => createStore().setTables(INITIAL_TODOS));\n\n  return (\n    <Provider store={store}>\n      <Title />\n      <NewTodo />\n      <Todos />\n      <Inspector />\n    </Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Removing CustomCells Definition in JavaScript\nDESCRIPTION: This snippet shows the removal of the customCells object, which is no longer needed as column labels are defined directly in the query.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/07_ResultSortedTableInHtmlTable.md#2025-04-16_snippet_4\n\nLANGUAGE: diff-js\nCODE:\n```\n-const customCells = {name: 'Name', year: 'Year', rating: 'Rating'};\n```\n\n----------------------------------------\n\nTITLE: Cell Value Consolidation in Transactions\nDESCRIPTION: This example shows how transactions only trigger listeners with the final value, regardless of intermediate changes. A cell listener is only called once after multiple changes to the same cell within a transaction.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/6_transactions.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId2 = store.addCellListener(\n  'pets',\n  'fido',\n  'color',\n  (store, tableId, rowId, cellId, newCell) =>\n    console.log(`Fido color changed to ${newCell}`),\n);\n\nstore.transaction(() => {\n  store.setCell('pets', 'fido', 'color', 'black');\n  store.setCell('pets', 'fido', 'color', 'brown');\n});\n// -> 'Fido color changed to brown'\n\nstore.delListener(listenerId2);\n```\n\n----------------------------------------\n\nTITLE: Resolving Conflicting Changes to the Same Cell\nDESCRIPTION: This example shows how Yjs resolves conflicting changes to the same cell by using a client ID-based tie-breaking mechanism.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Here we force the clientID so that the reconciliation is deterministic.\ndoc1.clientID = 1;\ndoc2.clientID = 2;\n\nstore1.setCell('pets', 'fido', 'price', 4);\nstore2.setCell('pets', 'fido', 'price', 5);\n// ...\nawait syncDocs();\nconsole.log(store1.getCell('pets', 'fido', 'price'));\n// -> 5\nconsole.log(store2.getCell('pets', 'fido', 'price'));\n// -> 5\n```\n\n----------------------------------------\n\nTITLE: Select with Transformation\nDESCRIPTION: Demonstrates how to select data with a transformation function that converts colors to uppercase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition('query', 'pets', ({select}) =>\n  select((getCell) => getCell('color')?.toUpperCase()).as('COLOR'),\n);\n\nconsole.log(queries.getResultTable('query'));\n// -> {fido: {COLOR: 'BROWN'}, felix: {COLOR: 'BLACK'}, cujo: {COLOR: 'BLACK'}}\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationshipInHtmlTable Component\nDESCRIPTION: Demonstrates the replacement of TableInHtmlTable with RelationshipInHtmlTable component and its basic usage.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/05_RelationshipInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n-    <>\n-      <TableInHtmlTable tableId='genres' />\n-      <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n-      <TableInHtmlTable tableId='genres' customCells={customCells} />\n-    </>\n+    <RelationshipInHtmlTable relationshipId='genresMetadata' />\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite in Browser with sqlite-wasm\nDESCRIPTION: This code initializes an in-memory SQLite database in the browser using the sqlite-wasm module. It imports necessary modules and creates a database instance.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport sqlite3InitModule from '@sqlite.org/sqlite-wasm';\nimport {createStore} from 'tinybase';\nimport {createSqliteWasmPersister} from 'tinybase/persisters/persister-sqlite-wasm';\n\nconst sqlite3 = await sqlite3InitModule();\nlet db = new sqlite3.oo1.DB(':memory:', 'c');\n```\n\n----------------------------------------\n\nTITLE: Implementing React Components with TinyBase Store\nDESCRIPTION: Replaces the direct DOM manipulation with React components, setting up a Provider and CellView to display and update store data. Includes the Inspector component for debugging.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v4.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ncreateRoot(document.body).render(\n  <Provider store={store}>\n    <CellView tableId=\"t1\" rowId=\"r1\" cellId=\"c1\" />\n    <Inspector />\n  </Provider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Schema-Typed Stores in TinyBase\nDESCRIPTION: Demonstrates how to handle multiple stores with different schemas by creating separate typed module instances for each schema. This approach allows for type-safe component and hook usage across multiple stores.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst UiReactWithPetShopSchemas = UiReact as UiReact.WithSchemas<\n  [typeof petShopTablesSchema, typeof petShopValuesSchema]\n>;\nconst {\n  TableView: PetShopTableView,\n  useTable: usePetShopTable,\n  ValueView: usePetShopValueView,\n} = UiReactWithPetShopSchemas;\n\nconst UiReactWithSettingsSchemas = UiReact as UiReact.WithSchemas<\n  [typeof settingsTablesSchema, typeof settingsValuesSchema]\n>;\nconst {\n  TableView: SettingsTableView,\n  useTable: useSettingsTable,\n  ValueView: useSettingsValueView,\n} = UiReactWithSettingsSchemas;\n\nconst petShopStore = createStore().setSchema(\n  petShopTablesSchema,\n  petShopValuesSchema,\n);\nconst settingsStore = createStore().setSchema(\n  settingsTablesSchema,\n  settingsValuesSchema,\n);\nconst App = () => (\n  <div>\n    <PetShopTableView store={petShopStore} tableId=\"species\" />\n    <SettingsTableView store={settingsStore} tableId=\"viewSettings\" />\n    {/* ... */}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Loaded Tables in React Component\nDESCRIPTION: This JSX snippet shows a simple React component that displays the names of loaded tables in a TinyBase Store.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/10_Inspector.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Body = () => {\n  return (\n    <>\n      <div id='info'>\n        Loaded tables: {useTableIds().join(', ')}\n      </div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering the React Application with TinyBase Provider\nDESCRIPTION: Creates the React application with TinyBase's Provider component to make store and metrics available to all child components. Displays the count, average, roll table, and Inspector for debugging.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ncreateRoot(document.body).render(\n  <Provider store={store} metrics={metrics}>\n    <p>\n      Count: <MetricView metricId=\"count\" />\n      <br />\n      Average: <MetricView metricId=\"average\" />\n    </p>\n    <TableView tableId=\"rolls\" rowComponent={Roll} />\n    <Inspector />\n  </Provider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Persistence with Durable Objects\nDESCRIPTION: JavaScript method that overrides the createPersister method to store data in Durable Object storage, ensuring data is preserved even when all clients disconnect.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// ...\ncreatePersister() {\n  return createDurableObjectStoragePersister(\n    createMergeableStore(),\n    this.ctx.storage,\n  );\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes for Dice Rolls\nDESCRIPTION: Creates an Indexes object for the Store and configures an index for the 'rolls' table based on the 'result' cell, sorting by dice color.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst indexes = createIndexes(store).setIndexDefinition(\n  'rolls',\n  'rolls',\n  'result',\n  'color',\n);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up WebSocket Synchronizers and Server\nDESCRIPTION: Shows how to properly clean up resources by destroying the synchronizers on both clients and the WebSocket server to close connections and listeners.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclientSynchronizer1.destroy();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclientSynchronizer2.destroy();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nserver.destroy();\n```\n\n----------------------------------------\n\nTITLE: Using Provider Component with Multiple Stores in React\nDESCRIPTION: This example shows how to use the Provider component with multiple Store objects. It demonstrates how to provide stores with IDs and how to reference specific stores in child components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/5_using_context.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App2 = () => {\n  const petStore = useCreateStore(() =>\n    createStore().setTables({pets: {fido: {species: 'dog'}}}),\n  );\n  const planetStore = useCreateStore(() =>\n    createStore().setTables({planets: {mars: {moons: 2}}}),\n  );\n\n  return (\n    <Provider storesById={{pet: petStore, planet: planetStore}}>\n      <Pane2 />\n    </Provider>\n  );\n};\n\nconst Pane2 = () => (\n  <span>\n    <CellView tableId=\"pets\" rowId=\"fido\" cellId=\"species\" store=\"pet\" />,\n    {useCell('planets', 'mars', 'moons', 'planet')}\n  </span>\n);\n\nroot.render(<App2 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>dog,2</span>'\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase Persister Functions\nDESCRIPTION: Adds imports for local and session storage persister functions from TinyBase, along with necessary React hooks.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v3.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createIndexes, createStore} from 'tinybase';\nimport {createLocalPersister, createSessionPersister} from 'tinybase/persisters/persister-browser';\nimport {\n  CellView,\n  Provider,\n  SliceView,\n  useAddRowCallback,\n  useCell,\n  useCreateIndexes,\n  useCreatePersister,\n  useCreateStore,\n  useSetCellCallback,\n  useSetValueCallback,\n  useValue,\n} from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Creating a Share Component for Collaboration\nDESCRIPTION: Implements a React component that displays either a button to start sharing or a link to share the current collaborative space with others.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst Share = ({serverPathId, createServerPathId}) => (\n  <div id=\"share\">\n    {serverPathId ? (\n      <a href={'?' + serverPathId} target=\"_blank\">\n        &#128279; Share link\n      </a>\n    ) : (\n      <span onClick={createServerPathId}>&#128228; Start sharing</span>\n    )}\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from TinyBase Store\nDESCRIPTION: Gets a value from the TinyBase Store by its ID and updates the page content with it. Shows how to retrieve stored data and use it in the DOM.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v1.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.innerHTML = store.getValue('v1');\n```\n\n----------------------------------------\n\nTITLE: Modeling Table Relationships in TinyBase (JavaScript)\nDESCRIPTION: This snippet demonstrates how to model table relationships in TinyBase. It sets up a relationship between the 'pets' and 'species' tables, allowing access to related data across tables.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createRelationships} from 'tinybase';\n\nconst relationships = createRelationships(store);\nrelationships.setRelationshipDefinition(\n  'petSpecies', // relationshipId\n  'pets', //       local tableId to link from\n  'species', //    remote tableId to link to\n  'species', //    cellId containing remote key\n);\n\nconsole.log(\n  store.getCell(\n    relationships.getRemoteTableId('petSpecies'),\n    relationships.getRemoteRowId('petSpecies', 'fido'),\n    'price',\n  ),\n);\n// -> 5\n\nrelationships.destroy();\n```\n\n----------------------------------------\n\nTITLE: Upgrading Todo Component to Include Type Selection\nDESCRIPTION: Enhances the Todo component to display and allow changing of the todo type using a new TodoType component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_8\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Todo = (props) => (\n   <li className=\"todo\">\n     <TodoText {...props} />\n+    <TodoType {...props} />\n   </li>\n );\n```\n\n----------------------------------------\n\nTITLE: Advanced Sorting in TinyBase Indexes\nDESCRIPTION: This code snippet shows how to implement advanced sorting in TinyBase indexes. It sorts species slices alphabetically and animals within each species in reverse weight order.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/3_advanced_index_definition.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nindexes.setIndexDefinition(\n  'bySpecies', // indexId\n  'pets', //      tableId to index\n  'species', //   cellId to index\n  'weight', //    cellId to sort by\n  (id1, id2) => (id1 < id2 ? -1 : 1), // Slices in alphabetical order\n  (id1, id2) => (id1 > id2 ? -1 : 1), // Rows in reverse numerical order\n);\n\nconsole.log(indexes.getSliceIds('bySpecies'));\n// -> ['cat', 'dog']\nconsole.log(indexes.getSliceRowIds('bySpecies', 'dog'));\n// -> ['fido', 'cujo']\n```\n\n----------------------------------------\n\nTITLE: Using Relationship Hooks in React Components\nDESCRIPTION: Demonstrates using the useRemoteRowId hook to display and update relationship data reactively. Shows setup of store and relationships with basic pet/species example.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/2_building_a_ui_with_relationships.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createRelationships, createStore} from 'tinybase';\nimport {useRemoteRowId} from 'tinybase/ui-react';\n\nconst store = createStore()\n  .setTable('pets', {fido: {species: 'dog'}, cujo: {species: 'dog'}})\n  .setTable('species', {wolf: {price: 10}, dog: {price: 5}});\nconst relationships = createRelationships(store).setRelationshipDefinition(\n  'petSpecies',\n  'pets',\n  'species',\n  'species',\n);\nconst App = () => (\n  <span>{useRemoteRowId('petSpecies', 'cujo', relationships)}</span>\n);\n```\n\n----------------------------------------\n\nTITLE: Equivalent SQL Query\nDESCRIPTION: Shows the SQL equivalent of the complex TinyQL query for comparison purposes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  state.name AS stateName,\n  AVG(species.price * color.premium) AS avgFullPrice,\nFROM\n  pets\n  LEFT JOIN species\n    ON species._rowId = pets.speciesId\n  LEFT JOIN color\n    ON color._rowId = pets.colorId\n  LEFT JOIN owner\n    ON owner._rowId = pets.ownerId\n    LEFT JOIN region AS state\n      ON region._rowId = owner.regionId\nWHERE\n  state.country = 'US'\nGROUP BY\n  stateName\nHAVING\n  avgFullPrice >= 5;\nORDER BY\n  avgFullPrice DESC\nLIMIT\n  3\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server with Data Persistence\nDESCRIPTION: Demonstrates how to create a WebSocket server that persists synchronized data to files. This allows clients to disconnect and reconnect while maintaining data state on the server.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createFilePersister} from 'tinybase/persisters/persister-file';\n\nconst persistingServer = createWsServer(\n  new WebSocketServer({port: 8050}),\n  (pathId) =>\n    createFilePersister(\n      createMergeableStore(),\n      pathId.replace(/[^a-zA-Z0-9]/g, '-') + '.json',\n    ),\n);\n\npersistingServer.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating interval updates for TinyBase Cell values\nDESCRIPTION: This code sets up an interval that updates the Cell value every second, triggering the listener and causing the UI to refresh with the current time.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v3.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nsetInterval(setTime, 1000);\n```\n\n----------------------------------------\n\nTITLE: Rendering IndexView for Grouped Dice Rolls\nDESCRIPTION: Sets up the React application to use IndexView for displaying grouped rolls, replacing the previous TableView implementation.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ncreateRoot(document.body).render(\n  <Provider store={store} indexes={indexes}>\n    <IndexView indexId=\"rolls\" sliceComponent={Rolls} />\n    <Inspector />\n  </Provider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Title Component to Display Pending Todo Count\nDESCRIPTION: Enhances the Title component to dynamically show the number of pending todos using the useMetric hook. It displays a count when there are pending todos or shows 'All done!' when everything is complete.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v4.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-js\nCODE:\n```\n-const Title = () => 'Todos';\n+const Title = () => {\n+  const pending = useMetric('pending');\n+\n+  return pending > 0 ? `Todo: ${pending}` : 'All done!';\n+};\n```\n\n----------------------------------------\n\nTITLE: Sorting Configuration\nDESCRIPTION: Demonstrates how to configure sorting behavior including cell selection, direction, and pagination limit.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_4\n\nLANGUAGE: diff-jsx\nCODE:\n```\n       <SortedTableInHtmlTable\n         tableId='movies'\n         customCells={customCells}\n+        cellId='rating'\n+        descending={true}\n+        limit={7}\n       />\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebSocket Synchronization with Durable Objects\nDESCRIPTION: React code snippet that creates a WebSocket synchronizer to connect the client store with a Cloudflare Durable Object at the specified endpoint.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// ...\nuseCreateSynchronizer(store, async (store) => {\n  const synchronizer = await createWsSynchronizer(\n    store,\n    new WebSocket('wss://example.com/foo'),\n  );\n  await synchronizer.startSync();\n  return synchronizer;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Persistence for Offline Support\nDESCRIPTION: React code snippet that sets up local persistence to maintain data when offline or when the browser is refreshed, using session storage with the key 'foo'.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// ...\nuseCreatePersister(\n  store,\n  (store) => createLocalPersister(store, 'foo'),\n  [],\n  async (persister) => {\n    await persister.startAutoLoad(/* any initial contents */);\n    await persister.startAutoSave();\n  },\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Relationship Context Provider Setup\nDESCRIPTION: Shows how to use the Provider component to make relationships available throughout a React application. Includes context setup and consumption example.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/2_building_a_ui_with_relationships.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Provider} from 'tinybase/ui-react';\n\nconst App4 = () => {\n  const store = useCreateStore(() =>\n    createStore()\n      .setTable('pets', {fido: {species: 'dog'}, cujo: {species: 'dog'}})\n      .setTable('species', {wolf: {price: 10}, dog: {price: 5}}),\n  );\n  const relationships = useCreateRelationships(store, (store) =>\n    createRelationships(store).setRelationshipDefinition(\n      'petSpecies',\n      'pets',\n      'species',\n      'species',\n    ),\n  );\n\n  return (\n    <Provider relationships={relationships}>\n      <Pane />\n    </Provider>\n  );\n};\n\nconst Pane = () => (\n  <span>\n    <RemoteRowView\n      relationshipId=\"petSpecies\"\n      localRowId=\"cujo\"\n      debugIds={true}\n    />\n    /{useRemoteRowId('petSpecies', 'cujo')}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Creating Store\nDESCRIPTION: Imports necessary functions and components from TinyBase and React libraries, then creates a new Store instance that will hold the dice roll data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createMetrics, createStore} from 'tinybase';\nimport {MetricView, Provider, TableView, useCell} from 'tinybase/ui-react';\nimport {Inspector} from 'tinybase/ui-react-inspector';\n\nconst store = createStore();\n```\n\n----------------------------------------\n\nTITLE: Creating a Store without Type Benefits in TinyBase\nDESCRIPTION: Shows an incorrect pattern that doesn't leverage schema-based typing benefits. This example creates a store but doesn't capture the return value from setValuesSchema, which would provide the proper typing.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStore} from 'tinybase/with-schemas';\n\nconst store = createStore(); // This is not a schema-typed Store\n\nstore.setValuesSchema({\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n}); // Instead you should use the return type from this method\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Mutating Listeners in TinyBase (JavaScript)\nDESCRIPTION: This snippet demonstrates the default behavior of listeners in TinyBase, where they cannot update data. It shows how a listener attempting to replace 'walnut' with 'brown' fails silently.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/3_mutating_data_with_listeners.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore();\nstore.setRow('pets', 'fido', {species: 'dog', color: 'black'});\n\nconst colorListenerId = store.addCellListener(\n  'pets',\n  null,\n  'color',\n  (store, tableId, rowId, cellId, newCell) => {\n    if (newCell == 'walnut') {\n      store.setCell(tableId, rowId, cellId, 'brown');\n    }\n  },\n);\n\nstore.setCell('pets', 'fido', 'color', 'walnut');\nconsole.log(store.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'walnut'}}}\n\nstore.delListener(colorListenerId);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bidirectional Synchronization Between Clients\nDESCRIPTION: Shows how changes made on the second client are synchronized back to the first client, demonstrating the bidirectional nature of the synchronization process.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclientStore2.setCell('pets', 'felix', 'species', 'cat');\nconsole.log(clientStore2.getTables());\n// -> {pets: {fido: {species: 'dog'}, felix: {species: 'cat'}}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconsole.log(clientStore1.getTables());\n// -> {pets: {fido: {species: 'dog'}, felix: {species: 'cat'}}}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cell Display\nDESCRIPTION: Configures which cells to display and their labels in the table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-js\nCODE:\n```\n-const customCells = {name: {label: 'Name', component: DictionaryCell}};\n+const customCells = {name: 'Name', year: 'Year', rating: 'Rating'};\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloudflare Worker for WebSocket Routing\nDESCRIPTION: JavaScript code that exports a default worker configuration using TinyBase's getWsServerDurableObjectFetch function to route WebSocket requests based on URL path.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  fetch: getWsServerDurableObjectFetch('TinyBaseDurableObjects'),\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading from Store to MergeableStore for Synchronization\nDESCRIPTION: Diff showing the conversion from a regular TinyBase Store to a MergeableStore, which is necessary for synchronization. The MergeableStore tracks metadata required to merge data without conflicts while maintaining compatibility with the Store API.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-js\nCODE:\n```\n-const store = useCreateStore(() => createStore().setTablesSchema(SCHEMA));\n+const store = useCreateMergeableStore(() =>\n+  createMergeableStore().setTablesSchema(SCHEMA),\n+);\n```\n\n----------------------------------------\n\nTITLE: TinyBase Editable Components Documentation Table\nDESCRIPTION: Markdown table documenting editable components for individual Cells and Values with links to their respective demos.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/4_using_react_dom_components.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Component         | Purpose                                                 |                                                 |\n| ----------------- | ------------------------------------------------------- | ----------------------------------------------- |\n| EditableCellView  | Renders a Cell and lets you change its type and value.  | [demo](/demos/ui-components/editablecellview/)  |\n| EditableValueView | Renders a Value and lets you change its type and value. | [demo](/demos/ui-components/editablevalueview/) |\n```\n\n----------------------------------------\n\nTITLE: Implementing EditableCellView Component\nDESCRIPTION: Replaces standard table views with an EditableCellView component for specific cell editing, targeting the genres table's g05 row name field.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/09_EditableCellView.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-jsx\nCODE:\n```\n-      <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n-      <TableInHtmlTable tableId='genres' customCells={customCells} />\n+     <div id='edit'>\n+       Genre 5 name:\n+       <EditableCellView tableId='genres' rowId='g05' cellId='name' />\n+     </div>\n     </>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Adding Checkpoints to Provider Component\nDESCRIPTION: Diff showing how to make the Checkpoints object available throughout the app by including it in the Provider component properties.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-jsx\nCODE:\n```\n   return (\n     <Provider\n       store={store}\n       storesById={{viewStore}}\n       indexes={indexes}\n       metrics={metrics}\n+      checkpoints={checkpoints}\n     >\n       <Title />\n       <NewTodo />\n       <Types />\n+      <UndoRedo />\n       <Todos />\n       <Inspector />\n     </Provider>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Initializing Import Aliases for TinyBase and React\nDESCRIPTION: Sets up import aliases for TinyBase, React, and related modules using an importmap in HTML. This allows for easy module imports in the application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Component for Individual Todo Types\nDESCRIPTION: Creates a Type component that represents a single todo type, handles selection, and updates the viewStore when clicked.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Type = ({type}) => {\n  const currentType = useValue('type', 'viewStore');\n  const handleClick = useSetValueCallback(\n    'type',\n    () => type,\n    [type],\n    'viewStore',\n  );\n  const className = 'type' + (type == currentType ? ' current' : '');\n\n  return (\n    <li className={className} onClick={handleClick}>\n      {type}\n    </li>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Support with TinyBase\nDESCRIPTION: Demonstrates the basic type support in TinyBase. The example shows how the API enforces that cells and values can only be numbers, strings, or booleans, with TypeScript errors for invalid types.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/8_tinybase_and_typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore();\n\nstore.setValues({employees: 3}); //                OK\nstore.setValues({employees: true}); //             OK\nstore.setValues({employees: ['Alice', 'Bob']}); // TypeScript error\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server for TinyBase Synchronization\nDESCRIPTION: Implements a simple WebSocket server using the WsServer class from TinyBase's synchronizer-ws-server module. This server acts as a broker between clients for collaborative data sharing without storing the data itself.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {WsServer} from 'tinybase/synchronizers/synchronizer-ws-server';\n\nconst server = createWsServer(new ws.WebSocketServer({port: 8043}));\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Spinner Component in React\nDESCRIPTION: Defines a simple Loading component that displays a spinning animation while data is being loaded. The component is a div element with a specific ID for styling.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Loading = () => <div id=\"loading\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing the Body Component with ValuesInHtmlTable\nDESCRIPTION: Renders two ValuesInHtmlTable components - one with default settings and another with header row and ID column disabled.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst Body = () => {\n  return (\n    <>\n      <ValuesInHtmlTable />\n      <ValuesInHtmlTable headerRow={false} idColumn={false} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Imports to Include useCell Hook\nDESCRIPTION: Updates the import statement to include the useCell hook required for the custom cell component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_5\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {Provider, useCreateStore} from 'tinybase/ui-react';\n+import {Provider, useCell, useCreateStore} from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase with Schema-Based Typing\nDESCRIPTION: Demonstrates how to use schema-aware type definitions by appending 'with-schemas' to the import path.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {createStore} from 'tinybase/with-schemas';\n\n// NB the 'with-schemas'\n```\n\n----------------------------------------\n\nTITLE: Applying Table Schema in TinyBase Store\nDESCRIPTION: Demonstrates how to set a TablesSchema on a TinyBase Store to enforce data types and default values for table cells. The example shows setting a schema for a 'pets' table and how it automatically applies default values when setting a new row.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setTablesSchema({\n  pets: {\n    species: {type: 'string'},\n    color: {type: 'string'},\n    sold: {type: 'boolean', default: false},\n  },\n});\n\nstore.setRow('pets', 'polly', {species: 'parrot'});\nconsole.log(store.getRow('pets', 'polly'));\n// -> {species: 'parrot', sold: false}\n\nstore.delTablesSchema();\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Metrics for Todo Tracking\nDESCRIPTION: Initializes metrics using useCreateMetrics hook, defining metrics for counting pending todos overall and for each type. The metrics track todos that aren't marked as done, both in total and categorized by their type.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v4.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n   const indexes = useCreateIndexes(store, (store) =>\n     createIndexes(store).setIndexDefinition('types', 'todos', 'type'),\n   );\n+  const metrics = useCreateMetrics(store, (store) => {\n+    const metrics = createMetrics(store);\n+    metrics.setMetricDefinition('pending', 'todos', 'sum', (getCell) =>\n+      !getCell('done') ? 1 : 0,\n+    );\n+    TYPES.forEach((type) => {\n+      metrics.setMetricDefinition(type, 'todos', 'sum', (getCell) =>\n+        getCell('type') == type && !getCell('done') ? 1 : 0,\n+      );\n+    });\n+    return metrics;\n+  });\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting with Derived Slice IDs in TinyBase\nDESCRIPTION: This snippet showcases how to combine custom slice ID generation with custom sorting in TinyBase. It groups pets by weight range and sorts them by weight within each group.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/3_advanced_index_definition.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nindexes.setIndexDefinition(\n  'byWeightRange', //                                           indexId\n  'pets', //                                                    tableId to index\n  (getCell) => (getCell('weight') > 40 ? 'heavy' : 'light'), // => sliceId\n  (getCell) => -getCell('weight'), //                           => sort key\n);\n\nconsole.log(indexes.getSliceRowIds('byWeightRange', 'light'));\n// -> ['cujo', 'felix']\n```\n\n----------------------------------------\n\nTITLE: Sorted Column Styling\nDESCRIPTION: CSS styling for the sorted column header to indicate sort status.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_5\n\nLANGUAGE: less\nCODE:\n```\nth.sorted {\n  background: #ddd;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slice Component for Displaying Rolls\nDESCRIPTION: Defines the Rolls component that uses SliceView to display each group of rolls on a new line, ensuring the Roll component is used for rendering each row.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Rolls = (props) => (\n  <div className=\"rolls\">\n    <SliceView {...props} rowComponent={Roll} />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Typography and Color Styles\nDESCRIPTION: Defines global CSS styles for typography, colors, and layout using Less syntax, including a custom font import.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_6\n\nLANGUAGE: less\nCODE:\n```\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  align-items: flex-start;\n  color: #333;\n  display: flex;\n  font-family: Inter, sans-serif;\n  font-size: 0.8rem;\n  min-height: 100vh;\n  justify-content: space-around;\n  letter-spacing: -0.04rem;\n  line-height: 1.5rem;\n  margin: 0;\n  user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hook for Managing Server Path IDs\nDESCRIPTION: Implements a custom React hook that manages the unique path ID for collaborative spaces. It retrieves the ID from the URL query string and provides a function to generate new IDs.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst useServerPathId = () => {\n  const [serverPathId, setServerPathId] = useState(\n    parent.location.search.substring(1),\n  );\n  return [\n    serverPathId,\n    useCallback(() => {\n      const newServerPathId = getUniqueId();\n      parent.history.replaceState(null, null, '?' + newServerPathId);\n      setServerPathId(newServerPathId);\n    }, []),\n  ];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a TinyBase Store\nDESCRIPTION: Imports the createStore function from TinyBase and initializes a new Store object. This is the fundamental step to begin working with TinyBase data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v1.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createStore} from 'tinybase';\n\nconst store = createStore();\n```\n\n----------------------------------------\n\nTITLE: Using SliceView Component\nDESCRIPTION: Demonstrates the usage of SliceView component to render individual slices of an index with debug information enabled.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/2_building_a_ui_with_indexes.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {SliceView} from 'tinybase/ui-react';\n\nconst App3 = () => (\n  <div>\n    <SliceView\n      indexId=\"bySpecies\"\n      sliceId=\"dog\"\n      indexes={indexes}\n      debugIds={true}\n    />\n  </div>\n);\n\nroot.render(<App3 />); // !act\nconsole.log(app.innerHTML);\n// -> '<div>dog:{fido:{species:{dog}}cujo:{species:{dog}}}</div>'\n```\n\n----------------------------------------\n\nTITLE: Styling the HTML Tables\nDESCRIPTION: CSS styles for the HTML tables generated by ValuesInHtmlTable components, including borders, shadows, and spacing.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_8\n\nLANGUAGE: less\nCODE:\n```\ntable {\n  background: white;\n  border-collapse: collapse;\n  box-shadow: 0 0 1rem #0004;\n  font-size: inherit;\n  line-height: inherit;\n  margin: 2rem;\n  table-layout: fixed;\n  th,\n  td {\n    overflow: hidden;\n    padding: 0.25rem 0.5rem;\n    white-space: nowrap;\n    border-width: 1px 0;\n    border-style: solid;\n    border-color: #eee;\n    text-align: left;\n  }\n  thead th {\n    border-bottom-color: #ccc;\n  }\n  button,\n  input {\n    border: 1px solid #ccc;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Types and Updating Initial Todos\nDESCRIPTION: Introduces a list of todo types and updates the initial todos to include type information for each todo item.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n+const TYPES = ['Home', 'Work', 'Archived'];\n const INITIAL_TODOS = {\n   todos: {\n-    0: {text: 'Clean the floor'},\n+    0: {text: 'Clean the floor', type: 'Home'},\n-    1: {text: 'Install TinyBase'},\n+    1: {text: 'Install TinyBase', type: 'Work'},\n-    2: {text: 'Book holiday'},\n+    2: {text: 'Book holiday', type: 'Archived'},\n   },\n };\n```\n\n----------------------------------------\n\nTITLE: Search Input Component with Change Handler\nDESCRIPTION: Creates an input component for word search with a callback to update the parent component state when the user types.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst Input = ({stem, onChange}) => (\n  <input\n    value={stem}\n    onChange={useCallback(({target: {value}}) => onChange(value), [])}\n    placeholder=\"Search for a word\"\n    autoFocus={true}\n    spellCheck={false}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Cells to TableInHtmlTable Component\nDESCRIPTION: Updates the component to include a new table with custom cell rendering using the customCells prop.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_7\n\nLANGUAGE: diff-jsx\nCODE:\n```\n       <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n+      <TableInHtmlTable tableId='genres' customCells={customCells} />\n```\n\n----------------------------------------\n\nTITLE: Managing Tabular Data in TinyBase\nDESCRIPTION: Shows how to work with tabular data structures in TinyBase, including setting table data and manipulating individual cells.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstore\n  .setTable('pets', {fido: {species: 'dog'}})\n  .setCell('pets', 'fido', 'color', 'brown');\n\nconsole.log(store.getRow('pets', 'fido'));\n// -> {species: 'dog', color: 'brown'}\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyBase Stores and Persisters\nDESCRIPTION: Creates and configures three TinyBase stores for countries, stars, and view state with their respective persisters.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const countryStore = useCreateStore(() =>\n    createStore().setTablesSchema({\n      countries: {emoji: {type: 'string'}, name: {type: 'string'}},\n    }),\n  );\n  useCreatePersister(\n    countryStore,\n    (store) =>\n      createRemotePersister(\n        store,\n        'https://tinybase.org/assets/countries.json',\n      ),\n    [],\n    async (persister) => await persister.load(),\n  );\n\n  const starStore = useCreateStore(() =>\n    createStore().setTablesSchema({countries: {star: {type: 'boolean'}}}),\n  );\n  useCreatePersister(\n    starStore,\n    (store) => createLocalPersister(store, 'countries/starStore'),\n    [],\n    async (persister) => {\n      await persister.startAutoLoad([{\n        countries: {\n          GB: {star: true},\n          NZ: {star: true},\n          AU: {star: true},\n          SE: {star: true},\n          IE: {star: true},\n          IN: {star: true},\n          BZ: {star: true},\n          US: {star: true},\n        },\n      }]);\n      await persister.startAutoSave();\n    },\n  );\n\n  const viewStore = useCreateStore(() =>\n    createStore().setValuesSchema({\n      indexes: {type: 'string', default: 'countryIndexes'},\n      indexId: {type: 'string', default: 'firstLetter'},\n      sliceId: {type: 'string', default: 'A'},\n    }),\n  );\n  useCreatePersister(\n    viewStore,\n    (store) => createSessionPersister(store, 'countries/viewStore'),\n    [],\n    async (persister) => {\n      await persister.startAutoLoad();\n      await persister.startAutoSave();\n    },\n  );\n```\n\n----------------------------------------\n\nTITLE: Results Component Using Index Slices\nDESCRIPTION: Retrieves and displays search results using TinyBase's useSliceRowIds hook to efficiently get matching words from the indexed data.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Results = ({stem}) => {\n  const resultRowIds = useSliceRowIds('stems', stem.toLowerCase());\n  return (\n    resultRowIds.length > 0 &&\n    resultRowIds\n      .slice(0, 14)\n      .map((rowId) => <Result rowId={rowId} stemLength={stem.length} />)\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Import Maps for TinyBase and React\nDESCRIPTION: Configures import maps to load TinyBase, React, and related modules from CDN sources for the application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Synchronizer Client\nDESCRIPTION: Adds the import for the WebSocket synchronizer client function that will be used to create a synchronizer for communicating with the WebSocket server.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_4\n\nLANGUAGE: diff-js\nCODE:\n```\n import {createCheckpoints, createIndexes, createMetrics, createStore} from 'tinybase';\n+import {createWsSynchronizer} from 'tinybase/synchronizers/synchronizer-ws-client';\n```\n\n----------------------------------------\n\nTITLE: Using Schema-Based Typing in React Native with TinyBase\nDESCRIPTION: Shows a workaround for using schema-based typing in React Native environments, where module resolution differs from Node.js. This approach explicitly imports code and types from different locations to achieve proper typing.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/03_schemas/2_schema_based_typing.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// code\nimport React from 'react';\nimport * as UiReact from 'tinybase/ui-react';\nimport type {WithSchemas} from 'tinybase/ui-react/with-schemas';\n// types\nimport {TablesSchema, ValuesSchema, createStore} from 'tinybase/with-schemas';\n\nconst tablesSchema = {\n  pets: {species: {type: 'string'}},\n} as const;\nconst valuesSchema = {\n  employees: {type: 'number'},\n  open: {type: 'boolean', default: false},\n} as const;\n\nconst UiReactWithSchemas = UiReact as unknown as WithSchemas<\n  [typeof tablesSchema, typeof valuesSchema]\n>;\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase Components and Functions for Indexing\nDESCRIPTION: Modifies imports to use indexing functionality instead of metrics, replacing metrics-related imports with IndexView and other necessary components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createIndexes, createStore} from 'tinybase';\nimport {IndexView, Provider, SliceView, useCell} from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Implementing ResultTableInHtmlTable\nDESCRIPTION: Shows the replacement of multiple TableInHtmlTable instances with a single ResultTableInHtmlTable component using the defined queryId.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/06_ResultTableInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n-    <>\n-      <TableInHtmlTable tableId='genres' />\n-      <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n-      <TableInHtmlTable tableId='genres' customCells={customCells} />\n-    </>\n+    <ResultTableInHtmlTable queryId='genresStartingWithA' />\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Importing RelationshipInHtmlTable Dependencies\nDESCRIPTION: Shows the necessary import changes to switch from TableInHtmlTable to RelationshipInHtmlTable component, including required functions and hooks.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/05_RelationshipInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createStore} from 'tinybase';\n+import {createRelationships, createStore} from 'tinybase';\n-import {Provider, useCell, useCreateStore} from 'tinybase/ui-react';\n+import {\n+  CellView,\n+  Provider,\n+  useCell,\n+  useCreateRelationships,\n+  useCreateStore,\n+} from 'tinybase/ui-react';\n-import {TableInHtmlTable} from 'tinybase/ui-react-dom';\n+import {RelationshipInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Implementing View Store Persistence\nDESCRIPTION: Sets up session storage persistence for the view store to maintain UI state across page reloads while keeping multiple windows independent.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v3.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewStore = useCreateStore(() =>\n  createStore().setValuesSchema({type: {type: 'string', default: 'Home'}}),\n);\nuseCreatePersister(\n  viewStore,\n  (store) => createSessionPersister(store, 'todos/viewStore'),\n  [],\n  async (persister) => {\n    await persister.startAutoLoad();\n    await persister.startAutoSave();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Styles for the Application\nDESCRIPTION: Sets up default CSS styles for the entire application. Includes font face definition, box-sizing reset, and basic typography settings to ensure consistent styling across the app.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_10\n\nLANGUAGE: less\nCODE:\n```\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  user-select: none;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  font-size: 0.8rem;\n  line-height: 1.5rem;\n  margin: 0;\n  color: #333;\n}\n```\n\n----------------------------------------\n\nTITLE: Group Operation with Aggregation\nDESCRIPTION: Shows how to use group operations to aggregate data with counting and averaging functions.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstore.setTable('pets', {\n  fido: {species: 'dog', price: 5},\n  felix: {species: 'cat', price: 4},\n  cujo: {species: 'dog', price: 4},\n  tom: {species: 'cat', price: 3},\n  carnaby: {species: 'parrot', price: 3},\n  polly: {species: 'parrot', price: 3},\n});\n\nqueries.setQueryDefinition('query', 'pets', ({select, group}) => {\n  select('species');\n  select('price');\n  group('price', 'count').as('count');\n  group('price', 'avg').as('avgPrice');\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Indexes in Provider Context\nDESCRIPTION: Updates the Provider component to include the indexes object in the context, making it available to child components.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/04_SliceInHtmlTable.md#2025-04-16_snippet_2\n\nLANGUAGE: diff-js\nCODE:\n```\n   return (\n-    <Provider store={store}>{isLoading ? <Loading /> : <Body />}</Provider>\n+    <Provider store={store} indexes={indexes}>\n+      {isLoading ? <Loading /> : <Body />}\n+    </Provider>\n   );\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Aliases for TinyBase and React Modules\nDESCRIPTION: Sets up import aliases for TinyBase, React, and related modules using an importmap in HTML. This allows for easy module imports in the application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-dom\": \"https://esm.sh/tinybase/ui-react-dom@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Relationships in TinyBase\nDESCRIPTION: Shows how to create and use relationships between tables for linked data access.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createRelationships} from 'tinybase';\n\nconst relationships = createRelationships(store);\nrelationships.setRelationshipDefinition(\n  'petSpecies', // relationshipId\n  'pets', //       local tableId to link from\n  'species', //    remote tableId to link to\n  'species', //    cellId containing remote key\n);\n\nconsole.log(\n  store.getCell(\n    relationships.getRemoteTableId('petSpecies'),\n    relationships.getRemoteRowId('petSpecies', 'fido'),\n    'price',\n  ),\n);\n// -> 5\n\nrelationships.destroy();\n```\n\n----------------------------------------\n\nTITLE: Upgrading Todos Component to Use SliceView\nDESCRIPTION: Updates the Todos component to use SliceView instead of TableView, allowing filtered display of todos based on the selected type.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_7\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Todos = () => (\n   <ul id=\"todos\">\n-    <TableView tableId=\"todos\" rowComponent={Todo} />\n+    <SliceView\n+      indexId=\"types\"\n+      sliceId={useValue('type', 'viewStore')}\n+      rowComponent={Todo}\n+    />\n   </ul>\n );\n```\n\n----------------------------------------\n\nTITLE: Importing Specific TinyBase Modules\nDESCRIPTION: Examples of importing specific persister, synchronizer, and UI modules from their respective packages.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {createSessionPersister} from 'tinybase/persisters/persister-browser';\nimport {createWsSynchronizer} from 'tinybase/synchronizers/synchronizer-ws-client';\nimport {useCell} from 'tinybase/ui-react';\nimport {TableInHtmlTable} from 'tinybase/ui-react-dom';\n\n// ... etc\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Colored Dice Rolls\nDESCRIPTION: Adds color-specific CSS classes for the dice rolls to display them in red, green, or blue depending on their color property.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_3\n\nLANGUAGE: less\nCODE:\n```\n.roll {\n  display: inline-block;\n  font-size: 3rem;\n  padding: 0 1rem;\n  line-height: 3rem;\n  &.red {\n    color: #900;\n  }\n  &.green {\n    color: #090;\n  }\n  &.blue {\n    color: #009;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading NewTodo Component to Set Default Type\nDESCRIPTION: Updates the NewTodo component to set the default type of a new todo to the currently selected type from the viewStore.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_11\n\nLANGUAGE: diff-js\nCODE:\n```\n const NewTodo = () => {\n   const [text, setText] = useState('');\n+  const type = useValue('type', 'viewStore');\n   const handleChange = useCallback(({target: {value}}) => setText(value), []);\n   const handleKeyDown = useAddRowCallback(\n     'todos',\n     ({which, target: {value: text}}) =>\n-      which == 13 && text != '' ? {text} : null,\n+      which == 13 && text != '' ? {text, type} : null,\n-    [],\n+    [type],\n     undefined,\n     () => setText(''),\n     [setText],\n   );\n```\n\n----------------------------------------\n\nTITLE: Importing Minified TinyBase Modules\nDESCRIPTION: Shows how to import minified versions of TinyBase modules from the top-level 'min' folder instead of the default non-minified code.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {createStore} from 'tinybase'; // non-minified\n// or\nimport {createStore} from 'tinybase/min'; // minified\n```\n\n----------------------------------------\n\nTITLE: Cascading Deletion in TinyBase Store (JavaScript)\nDESCRIPTION: This example illustrates the cascading effect of deletions in a TinyBase Store when removing the final child of a parent object.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/3_writing_to_stores.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstore.delCell('pets', 'fido', 'species');\nconsole.log(store.getTables());\n// -> {}\n// The `fido` Row and `pets` Table have been recursively deleted.\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics and Aggregations in TinyBase\nDESCRIPTION: Shows how to use the Metrics object in TinyBase to create running aggregations of cell values in a table. The example sets up a 'species' table and demonstrates how to track the highest price among different pet species.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/readme.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMetrics} from 'tinybase';\n\nstore.setTable('species', {\n  dog: {price: 5},\n  cat: {price: 4},\n  worm: {price: 1},\n});\n```\n\n----------------------------------------\n\nTITLE: Example TinyBase Store Structure in JSON Format\nDESCRIPTION: This JSON represents the structure of a TinyBase Store after loading from an existing database with the complex mapping configuration. It shows how database tables are mapped to Store Tables.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pets\": {\n    \"fido\": {\"species\": \"dog\", \"color\": \"brown\"},\n    \"felix\": {\"species\": \"cat\", \"color\": \"black\"}\n  },\n  \"species\": {\n    \"dog\": {\"price\": 5},\n    \"cat\": {\"price\": 4}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dice Roll Generation Logic\nDESCRIPTION: Sets up an interval that adds a new dice roll to the store every half second, using Math.random() to generate random results between 1 and 6. The process stops after 48 rolls.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet rolls = 0;\nconst interval = setInterval(() => {\n  if (rolls++ == 48) {\n    clearInterval(interval);\n  } else {\n    store.addRow('rolls', {\n      result: Math.ceil(Math.random() * 6),\n    });\n  }\n}, 500);\n```\n\n----------------------------------------\n\nTITLE: Loading Spinner Component\nDESCRIPTION: Simple component that displays a loading spinner while the word data is being fetched and indexed.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst Loading = () => <div id=\"loading\" />;\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Listeners in TinyBase Store\nDESCRIPTION: Shows how to use wildcard listeners to detect changes in any row of any table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/5_listening_to_stores.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst listenerId4 = store.addRowListener(null, null, (store, tableId, rowId) =>\n  console.log(`${rowId} row in ${tableId} table changed`),\n);\n\nstore.setCell('pets', 'fido', 'color', 'walnut');\n// -> 'fido row in pets table changed'\n\nstore.setCell('species', 'dog', 'price', '9');\n// -> 'dog row in species table changed'\n\nstore.delListener(listenerId4);\n```\n\n----------------------------------------\n\nTITLE: Complex Having Condition in TinyQL\nDESCRIPTION: Shows how to use a custom function for complex having conditions, comparing minimum and maximum prices.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nqueries.setQueryDefinition('query', 'pets', ({select, group, having}) => {\n  select('pets', 'species');\n  select('pets', 'price');\n  group('price', 'min').as('minPrice');\n  group('price', 'max').as('maxPrice');\n  having((getCell) => getCell('minPrice') == getCell('maxPrice'));\n});\n\nconsole.log(queries.getResultTable('query'));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Query Definition\nDESCRIPTION: Demonstrates how to create a memoized Queries object and define a query that filters genres starting with 'A' and includes the name length.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/06_ResultTableInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n const store = useCreateStore(createStore);\n+const queries = useCreateQueries(store, (store) =>\n+  createQueries(store).setQueryDefinition(\n+    'genresStartingWithA',\n+    'genres',\n+    ({select, where}) => {\n+      select('name');\n+      select((getCell) => getCell('name').length).as('length');\n+      where((getCell) => getCell('name').startsWith('A'));\n+    },\n+  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Controls\nDESCRIPTION: Implements pagination functionality using the built-in paginator component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_8\n\nLANGUAGE: diff-jsx\nCODE:\n```\n       <SortedTableInHtmlTable\n         tableId='movies'\n         customCells={customCells}\n         cellId='rating'\n         descending={true}\n         limit={7}\n         sortOnClick={true}\n+        paginator={true}\n       />\n```\n\n----------------------------------------\n\nTITLE: Setting Up BroadcastChannel Synchronization in a Service Worker\nDESCRIPTION: Shows how to create a BroadcastChannelSynchronizer in a service worker to sync with the UI part. Both share the same channel name to establish the synchronization connection.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst backStore = createMergeableStore();\nconst backSynchronizer = createBroadcastChannelSynchronizer(\n  backStore,\n  'syncChannel',\n);\nawait backSynchronizer.startSync();\n```\n\n----------------------------------------\n\nTITLE: Importing EditableCellView Component\nDESCRIPTION: Adds the EditableCellView component to existing imports from tinybase/ui-react-dom.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/09_EditableCellView.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {TableInHtmlTable} from 'tinybase/ui-react-dom';\n+import {EditableCellView, TableInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: TinyBase Import Path Structure\nDESCRIPTION: The syntax pattern for TinyBase imports showing the order of optional path components for accessing different combinations of features.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntinybase\n  [ /min ]\n    [ /store | /metrics | /queries | ... ]\n      [ /with-schemas ]\n```\n\n----------------------------------------\n\nTITLE: Updating Import Map for TinyBase Inspector in HTML\nDESCRIPTION: This snippet shows the changes needed in the import map to include the TinyBase Inspector component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/10_Inspector.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Replacing ValuesInHtmlTable with TableInHtmlTable in React Component\nDESCRIPTION: Updates the React component to use TableInHtmlTable with the 'genres' tableId, demonstrating how to toggle header rows and ID columns.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-jsx\nCODE:\n```\n const Body = () => {\n   return (\n     <>\n-      <ValuesInHtmlTable />\n-\n-      <ValuesInHtmlTable headerRow={false} idColumn={false} />\n+      <TableInHtmlTable tableId='genres' />\n+      <TableInHtmlTable tableId='genres' headerRow={false} idColumn={false} />\n     </>\n   );\n };\n```\n\n----------------------------------------\n\nTITLE: Compiling TinyBase for Production\nDESCRIPTION: Compilation of TypeScript into minified production-ready modules\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compileForProd\n```\n\n----------------------------------------\n\nTITLE: Generating Random Colored Dice Rolls\nDESCRIPTION: Updates the code that adds new rows to the store to include a random color (red, green, or blue) alongside the dice roll result.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstore.addRow('rolls', {\n  result: Math.ceil(Math.random() * 6),\n  color: ['red', 'green', 'blue'][Math.floor(Math.random() * 3)],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map for React and TinyBase Dependencies\nDESCRIPTION: Updates the import map configuration to include React, ReactDOM, and TinyBase React UI modules alongside the base TinyBase package.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v4.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cell Components for Table\nDESCRIPTION: Creates a configuration object that specifies custom components and labels for specific columns in the table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst customCells = {name: {label: 'Name', component: DictionaryCell}};\n```\n\n----------------------------------------\n\nTITLE: Setting Up TinyBase Store with Multiple Tables\nDESCRIPTION: This snippet creates a new database and populates a TinyBase Store with two tables: 'pets' and 'species'. This demonstrates a more complex data structure for tabular mapping.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ndb = new sqlite3.oo1.DB(':memory:', 'c');\nstore.setTables({\n  pets: {felix: {species: 'cat'}, fido: {species: 'dog'}},\n  species: {dog: {price: 5}, cat: {price: 4}},\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Relationship View Components\nDESCRIPTION: Demonstrates using RemoteRowView component with custom row rendering. Shows how to create custom view components for relationship data display.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/09_using_relationships/2_building_a_ui_with_relationships.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {CellView, RemoteRowView} from 'tinybase/ui-react';\n\nconst MyRowView = (props) => (\n  <>\n    {props.rowId}: <CellView {...props} cellId=\"price\" />\n  </>\n);\n\nconst App3 = () => (\n  <div>\n    <RemoteRowView\n      relationshipId=\"petSpecies\"\n      localRowId=\"cujo\"\n      rowComponent={MyRowView}\n      relationships={relationships}\n    />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Metadata Table\nDESCRIPTION: Demonstrates creation of a second table for metadata that links to the genres table, showing how to define relationships between tables.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/05_RelationshipInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n   useMemo(async () => {\n     await loadTable(store, 'genres');\n+    store.setTable('metadata', {\n+      g01_meta: {text: 'Dramatic movies to make you think', popularity: 6},\n+      g02_meta: {text: 'These ones make you laugh', popularity: 7},\n+      g03_meta: {text: 'Fun for all the family', popularity: 8},\n+      g04_meta: {text: 'For the romantics at heart', popularity: 5},\n+      g05_meta: {text: 'From cartoons to CGI', popularity: 5},\n+      g06_meta: {text: 'Escape to another world', popularity: 4},\n+      g07_meta: {text: 'Tales of the American West', popularity: 3},\n+      g08_meta: {text: 'Stay on the edge of your seat', popularity: 6},\n+      g09_meta: {text: 'For your inner explorer', popularity: 7},\n+      g10_meta: {text: 'Fast-paced action from start to finish', popularity: 8},\n+      g11_meta: {text: 'Jump scares to give you nightmares', popularity: 6},\n+      g12_meta: {text: 'Murders and mysteries', popularity: 5},\n+      g14_meta: {text: 'Take a step back in time', popularity: 3},\n+      g15_meta: {text: 'A glimpse of the future', popularity: 8},\n+      g16_meta: {text: 'Who did it?', popularity: 5},\n+   });\n    setIsLoading(false);\n  }, []);\n```\n\n----------------------------------------\n\nTITLE: Importing SortedTableInHtmlTable Component\nDESCRIPTION: Shows how to import the SortedTableInHtmlTable component instead of the basic TableInHtmlTable component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {TableInHtmlTable} from 'tinybase/ui-react-dom';\n+import {SortedTableInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Updating Grid Layout for UndoRedo Component\nDESCRIPTION: CSS diff showing how to update the grid layout to accommodate the new UndoRedo component by adding an additional row to the grid template.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_7\n\nLANGUAGE: diff-less\nCODE:\n```\n body {\n   display: grid;\n   grid-template-columns: 35% minmax(0, 1fr);\n-  grid-template-rows: auto 1fr;\n+  grid-template-rows: auto auto 1fr;\n```\n\n----------------------------------------\n\nTITLE: Interactive Sorting Implementation\nDESCRIPTION: Adds click-to-sort functionality to column headers.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_6\n\nLANGUAGE: diff-jsx\nCODE:\n```\n       <SortedTableInHtmlTable\n         tableId='movies'\n         customCells={customCells}\n         cellId='rating'\n         descending={true}\n         limit={7}\n+        sortOnClick={true}\n       />\n```\n\n----------------------------------------\n\nTITLE: Styling EditableValueView with LESS\nDESCRIPTION: CSS styling for the EditableValueView component and its container. Adds visual styling for the edit container and customizes the appearance of the type-change button within the editable value component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/08_EditableValueView.md#2025-04-16_snippet_2\n\nLANGUAGE: less\nCODE:\n```\n#edit {\n  background: white;\n  box-shadow: 0 0 1rem #0004;\n  margin: 2rem;\n  min-width: 16rem;\n  padding: 0.5rem 1rem 1rem;\n}\n.editableValue {\n  button {\n    width: 4rem;\n    margin-right: 0.5rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improving RowView Output with Separator Prop\nDESCRIPTION: This example demonstrates how to improve the readability of RowView output by using the 'separator' prop. It uses a comma to separate cell values when rendering the row, making the output more readable for debugging or display purposes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/02_building_uis/3_using_react_components.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst App3 = () => (\n  <span>\n    <RowView tableId=\"pets\" rowId=\"fido\" store={store} separator=\",\" />\n  </span>\n);\n\nroot.render(<App3 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>walnut,42</span>'\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to run the client application in development mode.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adding Synchronizer WebSocket Client Import to HTML\nDESCRIPTION: Updates the import map to include the WebSocket client synchronizer module from TinyBase, which is required for client-side synchronization functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_3\n\nLANGUAGE: diff-html\nCODE:\n```\n <script type=\"importmap\">\n   {\n     \"imports\": {\n       \"tinybase\": \"https://esm.sh/tinybase@\",\n       \"tinybase/persisters/persister-browser\": \"https://esm.sh/tinybase/persisters/persister-browser@\",\n+      \"tinybase/synchronizers/synchronizer-ws-client\": \"https://esm.sh/tinybase/synchronizers/synchronizer-ws-client@\",\n       \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n       \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n       \"react\": \"https://esm.sh/react@\",\n       \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n       \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n     }\n   }\n </script>\n\n```\n\n----------------------------------------\n\nTITLE: Function for Formatting Word Frequency\nDESCRIPTION: Converts the per-million word frequency into a human-readable percentage or displays 'rare' for very infrequent words.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst frequency = (perMillion) => {\n  if (perMillion < 10) {\n    return 'rare';\n  }\n  return (perMillion / 10000).toFixed(3) + '%';\n};\n```\n\n----------------------------------------\n\nTITLE: Table Column Width Styling\nDESCRIPTION: CSS styling to stabilize column widths during sorting transitions.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_7\n\nLANGUAGE: less\nCODE:\n```\nthead th {\n  width: 5rem;\n  &:nth-of-type(2) {\n    width: 28rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Data into TinyBase Store\nDESCRIPTION: Populates the TinyBase Store with sample user preference data using a transaction to ensure atomicity.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst loadValues = (store) => {\n  store\n    .startTransaction()\n    .setValue('username', 'John Appleseed')\n    .setValue('email address', 'john.appleseed@example.com')\n    .setValue('dark mode', true)\n    .setValue('font size', 14)\n    .finishTransaction();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics and Aggregations in TinyBase\nDESCRIPTION: Shows how to create and use metrics for running aggregations on table data with reactive updates.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createMetrics} from 'tinybase';\n\nstore.setTable('species', {\n  dog: {price: 5},\n  cat: {price: 4},\n  worm: {price: 1},\n});\n\nconst metrics = createMetrics(store);\nmetrics.setMetricDefinition(\n  'highestPrice', // metricId\n  'species', //      tableId to aggregate\n  'max', //          aggregation\n  'price', //        cellId to aggregate\n);\n\nconsole.log(metrics.getMetric('highestPrice'));\n// -> 5\n\nmetrics.addMetricListener('highestPrice', () =>\n  console.log(metrics.getMetric('highestPrice')),\n);\nstore.setCell('species', 'horse', 'price', 20);\n// -> 20\n\nmetrics.destroy();\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for ResultSortedTableInHtmlTable in JavaScript\nDESCRIPTION: This snippet shows the changes in import statements to support the ResultSortedTableInHtmlTable component. It adds createQueries and useCreateQueries, and replaces SortedTableInHtmlTable with ResultSortedTableInHtmlTable.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/07_ResultSortedTableInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createStore} from 'tinybase';\n+import {createQueries, createStore} from 'tinybase';\n-import {Provider, useCell, useCreateStore} from 'tinybase/ui-react';\n+import {Provider, useCell, useCreateQueries, useCreateStore} from 'tinybase/ui-react';\n-import {SortedTableInHtmlTable} from 'tinybase/ui-react-dom';\n+import {ResultSortedTableInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Querying SQLite Database to Verify Stored Data\nDESCRIPTION: This code executes a SQL query to check that data was properly stored in the SQLite database. It shows the JSON representation of the Store in the 'tinybase' table.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(db.exec('SELECT * FROM tinybase;', {rowMode: 'object'}));\n// -> [{_id: '_', store: '[{\"pets\":{\"fido\":{\"species\":\"dog\"}}},{}]'}]\n```\n\n----------------------------------------\n\nTITLE: Styling for Types Component\nDESCRIPTION: Adds CSS styling for the Types component to ensure proper margin.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n#types {\n  margin: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Test Output Example for TinyBase Store Operations\nDESCRIPTION: ASCII chart output from performance testing showing microseconds per row metrics for store operations with multiple row counts. The chart demonstrates time complexity visualization for performance analysis.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/3_testing.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGrow store, different table to index with multiple row count, µs per row\nFirst: 16.3 µs per row\n Last: 3.61 µs per row\n  Min: 2.76 µs per row\n  Max: 29.89 µs per row\n  Avg: 7.33 µs per row\n\n      90.00 ┼───────────────────────────────────────\n      84.00 ┤\n      78.00 ┤\n      72.00 ┤\n      66.00 ┤\n      60.00 ┤\n      54.00 ┤\n      48.00 ┤\n      42.00 ┤\n      36.00 ┤\n      30.00 ┤╭╮\n      24.00 ┤││     ╭╮\n      18.00 ┼╯│     ││         ╭╮\n      12.00 ┤ ╰╮   ╭╯│    ╭╮   ││          ╭╮\n       6.00 ┼──╰───╯─╰────╯╰───╯╰──────────╯╰╮──╭───\n       0.00 ┤                                ╰──╯\n```\n\n----------------------------------------\n\nTITLE: Styling for TodoType Component\nDESCRIPTION: Adds CSS styling for the TodoType component's select element to ensure proper appearance within the todo item.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_10\n\nLANGUAGE: less\nCODE:\n```\n#todos .todo .type {\n  border: none;\n  color: #777;\n  font: inherit;\n  font-size: 0.8rem;\n  margin-top: 0.1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Additional TinyBase Metric Functions and Hooks\nDESCRIPTION: Imports the necessary functions and hooks from TinyBase to work with metrics, including createMetrics, useCreateMetrics, and useMetric.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v4.md#2025-04-16_snippet_0\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createIndexes, createStore} from 'tinybase';\n+import {createIndexes, createMetrics, createStore} from 'tinybase';\n import {createLocalPersister, createSessionPersister} from 'tinybase/persisters/persister-browser';\n import {\n   CellView,\n   Provider,\n   SliceView,\n   useAddRowCallback,\n   useCell,\n   useCreateIndexes,\n+  useCreateMetrics,\n   useCreatePersister,\n   useCreateStore,\n+  useMetric,\n   useSetCellCallback,\n   useSetValueCallback,\n   useValue,\n } from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Adding TinyBase Persister Import to HTML\nDESCRIPTION: Updates the import map to include the TinyBase browser persister module for enabling local storage functionality.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v3.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/persisters/persister-browser\": \"https://esm.sh/tinybase/persisters/persister-browser@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Pre-publish Package Check\nDESCRIPTION: Command to run all checks before publishing to npm\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prePublishPackage\n```\n\n----------------------------------------\n\nTITLE: Setting up TinyBase Import Map in Browser\nDESCRIPTION: Registers an import map for the TinyBase library from esm.sh to be used in a browser environment.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v1.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating Todo List Layout for Grid Changes\nDESCRIPTION: CSS diff showing how to update the #todos element to span two rows in the adjusted grid layout to accommodate the new UndoRedo component.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_9\n\nLANGUAGE: diff-less\nCODE:\n```\n #todos {\n   grid-column: 2;\n+  grid-row: 2 / span 2;\n   margin: 0;\n   padding: 0;\n }\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Todo Items\nDESCRIPTION: Applies styling to individual todo items using LESS. Sets up layout, colors, and special styling for completed todos.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_12\n\nLANGUAGE: less\nCODE:\n```\n#todos .todo {\n  background: #fff;\n  border: @border;\n  display: flex;\n  margin-bottom: @spacing;\n  padding: @spacing;\n  .text {\n    cursor: pointer;\n    flex: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    user-select: none;\n    white-space: nowrap;\n    &::before {\n      content: '\\1F7E0';\n      padding: 0 0.5rem 0 0.25rem;\n    }\n    &.done {\n      color: #ccc;\n      &::before {\n        content: '\\2705';\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Todos List\nDESCRIPTION: Applies styling to the Todos list container using LESS. Sets grid positioning and removes default list styling.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_10\n\nLANGUAGE: less\nCODE:\n```\n#todos {\n  grid-column: 2;\n  margin: 0;\n  padding: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing TinyBase\nDESCRIPTION: Commands to clone the TinyBase repository from GitHub and install developer dependencies\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:tinyplex/tinybase.git\ncd tinybase\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Indexes for Fast Lookups in TinyBase\nDESCRIPTION: Demonstrates creating and using indexes for efficient data lookups and reactive updates.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createIndexes} from 'tinybase';\n\nconst indexes = createIndexes(store);\nindexes.setIndexDefinition(\n  'bySpecies', // indexId\n  'pets', //      tableId to index\n  'species', //   cellId to index\n);\n\nconsole.log(indexes.getSliceIds('bySpecies'));\n// -> ['dog', 'cat']\nconsole.log(indexes.getSliceRowIds('bySpecies', 'dog'));\n// -> ['fido', 'rex', 'cujo']\n\nindexes.addSliceIdsListener('bySpecies', () =>\n  console.log(indexes.getSliceIds('bySpecies')),\n);\nstore.setRow('pets', 'lowly', {species: 'worm'});\n// -> ['dog', 'cat', 'worm']\n\nindexes.destroy();\n```\n\n----------------------------------------\n\nTITLE: Expanding TinyBase Imports for Synchronization\nDESCRIPTION: Updates the imports to include necessary functions for creating a MergeableStore and generating unique IDs for collaboration spaces.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_5\n\nLANGUAGE: diff-js\nCODE:\n```\n-import {createCheckpoints, createIndexes, createMetrics, createStore} from 'tinybase';\n+import {\n+  createCheckpoints,\n+  createIndexes,\n+  createMergeableStore,\n+  createMetrics,\n+  createStore,\n+  getUniqueId,\n+} from 'tinybase';\n```\n\n----------------------------------------\n\nTITLE: Setting up Import Aliases for TinyBase and React\nDESCRIPTION: Creates an import map to alias TinyBase, React, and related modules for use in the browser via ES modules.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\\\"importmap\\\">\n  {\n    \\\"imports\\\": {\n      \\\"tinybase\\\": \\\"https://esm.sh/tinybase@\\\",\n      \\\"tinybase/ui-react\\\": \\\"https://esm.sh/tinybase/ui-react@\\\",\n      \\\"tinybase/ui-react-dom\\\": \\\"https://esm.sh/tinybase/ui-react-dom@\\\",\n      \\\"react\\\": \\\"https://esm.sh/react@\\\",\n      \\\"react/jsx-runtime\\\": \\\"https://esm.sh/react/jsx-runtime@\\\",\n      \\\"react-dom/client\\\": \\\"https://esm.sh/react-dom/client@\\\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling Loading Spinner with CSS Animation\nDESCRIPTION: Applies CSS styles to the loading spinner, creating a 270° arc with a spinning animation. Uses LESS syntax for nested styles and keyframe animation definition.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Application\nDESCRIPTION: Sets up the React application entry point using createRoot.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('load', () =>\n  createRoot(document.body).render(<App />),\n);\n```\n\n----------------------------------------\n\nTITLE: React Native TinyBase Import\nDESCRIPTION: Special import syntax for React Native applications where the Metro bundler may require explicit file paths to modules.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport {createStore} from 'tinybase/index.js';\nimport {useCell} from 'tinybase/ui-react/index.js';\n```\n\n----------------------------------------\n\nTITLE: Adding React Hooks for MergeableStore and Synchronizer\nDESCRIPTION: Updates the imports from TinyBase's React UI library to include hooks for creating MergeableStore and Synchronizer instances.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_6\n\nLANGUAGE: diff-js\nCODE:\n```\n import {\n   CellView,\n   CheckpointView,\n   Provider,\n   SliceView,\n   useAddRowCallback,\n   useCell,\n   useCheckpoints,\n   useCreateCheckpoints,\n   useCreateIndexes,\n+  useCreateMergeableStore,\n   useCreateMetrics,\n   useCreatePersister,\n   useCreateStore,\n+  useCreateSynchronizer,\n   useMetric,\n   useRedoInformation,\n   useRow,\n   useSetCellCallback,\n   useSetCheckpointCallback,\n   useSetValueCallback,\n   useUndoInformation,\n   useValue,\n } from 'tinybase/ui-react';\n```\n\n----------------------------------------\n\nTITLE: Styling UndoRedo Component\nDESCRIPTION: CSS styling for the UndoRedo component, including cursor styles, text overflow handling, and disabled state appearance, with special styling for undo and redo icons.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v5.md#2025-04-16_snippet_8\n\nLANGUAGE: less\nCODE:\n```\n#undoRedo {\n  grid-column: 1;\n  grid-row: 3;\n  #undo,\n  #redo {\n    cursor: pointer;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    user-select: none;\n    &::before {\n      padding-right: 0.5rem;\n      vertical-align: middle;\n    }\n    &.disabled {\n      cursor: default;\n      opacity: 0.3;\n    }\n  }\n  #undo::before {\n    content: '\\21A9';\n  }\n  #redo::before {\n    content: '\\21AA';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Main Body Component with LESS\nDESCRIPTION: Applies minimal styling to the main body component using LESS. Sets padding for the main element to provide spacing around the content.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_6\n\nLANGUAGE: less\nCODE:\n```\nmain {\n  padding: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Movie Data Table\nDESCRIPTION: Demonstrates switching the data loading from genres to movies table for a larger dataset.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-jsx\nCODE:\n```\n   useMemo(async () => {\n-    await loadTable(store, 'genres');\n+    await loadTable(store, 'movies');\n     setIsLoading(false);\n   }, []);\n```\n\n----------------------------------------\n\nTITLE: Styling Dice Roll Display\nDESCRIPTION: Applies CSS styling to the dice roll elements to control their appearance, including font size, padding, and line height.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n.roll {\n  display: inline-block;\n  font-size: 3rem;\n  padding: 0 1rem;\n  line-height: 3rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Persistence Documentation\nDESCRIPTION: A markdown link pointing to the detailed persistence documentation located at /guides/persistence/an-intro-to-persistence\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/_schemas_and_persistence/4_persisting_data.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-> /guides/persistence/an-intro-to-persistence\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkpoints for Undo/Redo in TinyBase\nDESCRIPTION: Demonstrates how to implement undo/redo functionality using checkpoints in TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createCheckpoints} from 'tinybase';\n\nconst checkpoints = createCheckpoints(store);\n\nstore.setCell('pets', 'felix', 'sold', false);\ncheckpoints.addCheckpoint('pre-sale');\n\nstore.setCell('pets', 'felix', 'sold', true);\nconsole.log(store.getCell('pets', 'felix', 'sold'));\n// -> true\n\ncheckpoints.goBackward();\nconsole.log(store.getCell('pets', 'felix', 'sold'));\n// -> false\n```\n\n----------------------------------------\n\nTITLE: Updating Load Sequence for Table Data\nDESCRIPTION: Shows how to modify the initialization code to load tabular data asynchronously instead of simple values.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-jsx\nCODE:\n```\n-  useMemo(() => {\n-    loadValues(store);\n+  useMemo(async () => {\n+    await loadTable(store, 'genres');\n     setIsLoading(false);\n   }, []);\n```\n\n----------------------------------------\n\nTITLE: Styling Table Links with CSS\nDESCRIPTION: Adds CSS styling to maintain the inherited color for links within the table cells.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/02_TableInHtmlTable.md#2025-04-16_snippet_8\n\nLANGUAGE: less\nCODE:\n```\na {\n  color: inherit;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styling for the Application\nDESCRIPTION: Defines basic CSS styles for the application, including font loading, typography settings, and spacing for page elements.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/averaging.md#2025-04-16_snippet_7\n\nLANGUAGE: less\nCODE:\n```\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\n\nbody {\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  margin: 0;\n}\np {\n  margin: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests\nDESCRIPTION: Commands for running performance tests with pre-compiled code or with compilation\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run testPerf\nnpm run compileAndTestPerf\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map for TinyBase and React Dependencies\nDESCRIPTION: Sets up module import aliases for TinyBase, React, and related dependencies using an import map in HTML.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"tinybase\": \"https://esm.sh/tinybase@\",\n      \"tinybase/persisters/persister-browser\": \"https://esm.sh/tinybase/persisters/persister-browser@\",\n      \"tinybase/persisters/persister-remote\": \"https://esm.sh/tinybase/persisters/persister-remote@\",\n      \"tinybase/ui-react\": \"https://esm.sh/tinybase/ui-react@\",\n      \"tinybase/ui-react-inspector\": \"https://esm.sh/tinybase/ui-react-inspector@\",\n      \"react\": \"https://esm.sh/react@\",\n      \"react/jsx-runtime\": \"https://esm.sh/react/jsx-runtime@\",\n      \"react-dom/client\": \"https://esm.sh/react-dom/client@\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling City Table with LESS\nDESCRIPTION: Applies CSS styles to the city table using LESS. Styles include table layout, borders, padding, and specific styles for table headers and cells to improve readability and aesthetics.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/06_city_database.md#2025-04-16_snippet_9\n\nLANGUAGE: less\nCODE:\n```\ntable {\n  border-collapse: collapse;\n  font-size: inherit;\n  line-height: inherit;\n  margin-top: 0.5rem;\n  table-layout: fixed;\n  width: 100%;\n  caption {\n    text-align: left;\n    button {\n      border: 0;\n      margin-right: 0.25rem;\n    }\n  }\n  th,\n  td {\n    overflow: hidden;\n    padding: 0.15rem 0.5rem 0.15rem 0;\n    white-space: nowrap;\n  }\n  th {\n    border: solid #ddd;\n    border-width: 1px 0;\n    cursor: pointer;\n    text-align: left;\n    width: 15%;\n    &:nth-child(1) {\n      width: 25%;\n    }\n  }\n  td {\n    border-bottom: 1px solid #eee;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Result Item Component\nDESCRIPTION: Displays a single word result with its rank and frequency, highlighting the matching portion of the word based on the search stem.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst Result = ({rowId, stemLength}) => {\n  const {rank, word, perMillion} = useRow('words', rowId);\n  return (\n    <div className=\"result\">\n      <b>{word.substring(0, stemLength)}</b>\n      {word.substring(stemLength)}\n      <small>\n        <b>\n          {rank}\n          {suffix(rank)}\n        </b>\n        , {frequency(perMillion)}\n      </small>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the NewTodo Input\nDESCRIPTION: Applies styling to the NewTodo input element using LESS. Sets border, font, padding, and width properties for consistent appearance.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_8\n\nLANGUAGE: less\nCODE:\n```\n#newTodo {\n  border: @border;\n  display: block;\n  font: inherit;\n  letter-spacing: inherit;\n  padding: @spacing;\n  width: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Commands for running unit tests with pre-compiled code or with compilation\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run testUnit\n```\n\n----------------------------------------\n\nTITLE: Styling Filters Component with LESS\nDESCRIPTION: LESS styles for the filters sidebar component, including hover states and count display formatting.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_11\n\nLANGUAGE: less\nCODE:\n```\n#filters {\n  overflow-y: scroll;\n  border-right: @border;\n  padding: @spacing;\n  .filter {\n    cursor: pointer;\n    &.current {\n      color: @accentColor;\n    }\n    .label,\n    .count {\n      display: inline-block;\n      width: 2em;\n    }\n    .count {\n      color: #777;\n      font-size: 0.8rem;\n      text-align: left;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Main App Components\nDESCRIPTION: Renders the main application components within a TinyBase Provider wrapper.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n  return (\n    <Provider\n      storesById={{countryStore, starStore, viewStore}}\n      indexesById={{countryIndexes, starIndexes}}\n    >\n      <Filters />\n      <Countries />\n      <Inspector />\n    </Provider>\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding TinyBase Inspector to React Component\nDESCRIPTION: This JSX snippet demonstrates how to add the TinyBase Inspector component to a React application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/10_Inspector.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Body = () => {\n  return (\n    <>\n      <div id='info'>\n       Loaded tables: {useTableIds().join(', ')}\n      </div>\n      <Inspector open={true} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running a TinyBase Node Application\nDESCRIPTION: Command to execute a TinyBase JavaScript module in Node.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/1_getting_started.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode index.mjs\n```\n\n----------------------------------------\n\nTITLE: Code Linting and Formatting\nDESCRIPTION: Command to run linting and prettier formatting checks on the codebase\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Rendering the App on Page Load\nDESCRIPTION: Sets up an event listener to render the React application when the page has finished loading.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\naddEventListener('load', () => createRoot(document.body).render(<App />));\n```\n\n----------------------------------------\n\nTITLE: Styling the Loading Spinner\nDESCRIPTION: CSS styles for the loading spinner animation using Less syntax, including a spinning SVG icon.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_5\n\nLANGUAGE: less\nCODE:\n```\n#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"2rem\\\" viewBox=\\\"0 0 100 100\\\"><path d=\\\"M50 10A40 40 0 1 1 10 50\\\" stroke=\\\"black\\\" fill=\\\"none\\\" stroke-width=\\\"4\\\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Outlines the main project directories and their contents including source, tests, website content, and distribution files.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/2_architecture.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n  common/\n  persisters/\n  ui-react/\n  tinybase.d.ts\n  tinybase.ts\ntest/\n  unit/\n  perf/\n  e2e/\n  jest/\nsite/\n  demos/\n  guides/\n  ui/\ndist/\n```\n\n----------------------------------------\n\nTITLE: Importing Individual TinyBase Submodules\nDESCRIPTION: How to import only the specific submodules needed for minimal bundle size, rather than using the complete package.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/01_the_basics/7_importing_tinybase.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {createMetrics} from 'tinybase/metrics';\nimport {createStore} from 'tinybase/store';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Styling EditableCellView Container\nDESCRIPTION: Defines CSS styles for the editable cell container and its button elements, including positioning, shadows, and spacing.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/09_EditableCellView.md#2025-04-16_snippet_2\n\nLANGUAGE: less\nCODE:\n```\n#edit {\n  align-self: flex-start;\n  background: white;\n  box-shadow: 0 0 1rem #0004;\n  margin: 2rem;\n  min-width: 16rem;\n  padding: 0.5rem 1rem 1rem;\n}\n.editableCell {\n  button {\n    width: 4rem;\n    margin-right: 0.5rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling for Loading Spinner\nDESCRIPTION: CSS animation and styling for the loading spinner, creating a rotating arc effect.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_14\n\nLANGUAGE: less\nCODE:\n```\n#loading {\n  animation: spin 1s infinite linear;\n  height: 2rem;\n  margin: 40vh auto;\n  width: 2rem;\n  &::before {\n    content: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"2rem\" viewBox=\"0 0 100 100\"><path d=\"M50 10A40 40 0 1 1 10 50\" stroke=\"black\" fill=\"none\" stroke-width=\"4\" /></svg>');\n  }\n}\n\n@keyframes spin {\n  from {\n    transform: rotate(0);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Files Structure\nDESCRIPTION: Lists the main configuration files at the root level of the TinyBase project, including package management, testing, and code style configurations.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/2_architecture.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackage.json\njest.config.js\n.prettierrc\n.eslintrc.json\ngulpfile.mjs\n```\n\n----------------------------------------\n\nTITLE: Pagination Controls Styling\nDESCRIPTION: CSS styling for pagination controls positioning and appearance.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/03_SortedTableInHtmlTable.md#2025-04-16_snippet_9\n\nLANGUAGE: less\nCODE:\n```\ntable caption {\n  caption-side: top;\n  text-align: left;\n  margin-bottom: 1rem;\n  button {\n    margin-right: 0.5rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect - TinyBase Metrics Guide\nDESCRIPTION: A Markdown redirect link pointing to the guide for using metrics in TinyBase.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/_metrics_and_indexes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Metrics And Indexes\n\n-> /guides/using-metrics\n```\n\n----------------------------------------\n\nTITLE: Function for Generating Ordinal Suffixes\nDESCRIPTION: Utility function that adds the appropriate ordinal suffix (st, nd, rd, th) to the ranking number of a word.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst suffix = (rank) => {\n  switch (rank % 100) {\n    case 11:\n    case 12:\n    case 13:\n      return 'th';\n  }\n  switch (rank % 10) {\n    case 1:\n      return 'st';\n    case 2:\n      return 'nd';\n    case 3:\n      return 'rd';\n    default:\n      return 'th';\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Join Operation Example\nDESCRIPTION: Shows how to join pet and owner tables using the ownerId as a foreign key.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstore\n  .setTable('pets', {\n    fido: {species: 'dog', buyerId: '1', sellerId: '2'},\n    felix: {species: 'cat', buyerId: '2'},\n    cujo: {species: 'dog', buyerId: '3', sellerId: '1'},\n  })\n  .setTable('humans', {\n    1: {name: 'Alice'},\n    2: {name: 'Bob'},\n    3: {name: 'Carol'},\n  });\n\nqueries.setQueryDefinition('query', 'pets', ({select, join}) => {\n  select('buyers', 'name').as('buyer');\n  select('sellers', 'name').as('seller');\n  join('humans', 'buyerId').as('buyers');\n  join('humans', 'sellerId').as('sellers');\n});\n```\n\n----------------------------------------\n\nTITLE: Styling for Search Results\nDESCRIPTION: CSS styles for the result items, including layout, sizing, and typography for the main text and metadata.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_10\n\nLANGUAGE: less\nCODE:\n```\n.result {\n  display: block;\n  width: 20rem;\n  margin: 0.25rem auto;\n  small {\n    float: right;\n    color: #777;\n    font-size: 0.7rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the TinyBase Vite Template for Durable Objects\nDESCRIPTION: Command to create a copy of the Vite template for TinyBase with Cloudflare Durable Objects integration.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx tiged tinyplex/vite-tinybase-ts-react-sync-durable-object my-tinybase-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading Component\nDESCRIPTION: Defines a simple loading spinner component to display while data is loading.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Loading = () => <div id=\\\"loading\\\" />;\n```\n\n----------------------------------------\n\nTITLE: Installing Client Dependencies\nDESCRIPTION: Command to install necessary npm packages for the client application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Global Application Styling\nDESCRIPTION: General CSS styles for the entire application, including font loading, text color, spacing, and basic reset properties.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_15\n\nLANGUAGE: less\nCODE:\n```\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  color: #333;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  font-size: 1rem;\n  line-height: 1.2rem;\n  margin: 0;\n  user-select: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting the Second WebSocket Client for Synchronization\nDESCRIPTION: Sets up the second client with an empty MergeableStore and connects it to the same WebSocket server. This client will receive the synchronized data from the first client.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/05_synchronization/2_using_a_synchronizer.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// On the second client machine:\nconst clientStore2 = createMergeableStore();\nconst clientSynchronizer2 = await createWsSynchronizer(\n  clientStore2,\n  new WebSocket('ws://localhost:8048'),\n);\nawait clientSynchronizer2.startSync();\n```\n\n----------------------------------------\n\nTITLE: Styling the Hello World Display\nDESCRIPTION: Adds CSS styling to the page using LESS syntax. Configures the font (Inter) and centers the content both horizontally and vertically on the page.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v1.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\n\nbody {\n  align-items: center;\n  display: flex;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  height: 100vh;\n  justify-content: center;\n  margin: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Roll Groups Layout\nDESCRIPTION: Defines CSS for the rolls container to ensure proper whitespace handling for the grouped dice displays.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/02_rolling_dice/grouping.md#2025-04-16_snippet_5\n\nLANGUAGE: less\nCODE:\n```\n.rolls {\n  white-space: nowrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Share Button\nDESCRIPTION: Adds CSS styling for the share button and link to make them visually prominent in the application interface.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v6.md#2025-04-16_snippet_11\n\nLANGUAGE: less\nCODE:\n```\n#share {\n  a,\n  span {\n    background: #eee;\n    border: @border;\n    color: #000;\n    cursor: pointer;\n    display: inline-block;\n    padding: 0.5rem 1rem;\n    text-align: center;\n    text-decoration: none;\n    width: 10rem;\n  }\n  a {\n    border-color: @accentColor;\n    background: #ddd;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spell Checking\nDESCRIPTION: Command to check for spelling mistakes in code and documentation\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run spell\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Change Propagation Between Stores\nDESCRIPTION: Example showing changes being propagated in both directions between two synchronized Stores.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstore2.setValue('open', true);\nawait syncDocs();\nconsole.log(store1.getValues());\n// -> {open: true}\n```\n\n----------------------------------------\n\nTITLE: Styling Countries Component with LESS\nDESCRIPTION: LESS styles for the country grid display, including card layout and responsive grid configuration.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_14\n\nLANGUAGE: less\nCODE:\n```\n#countries {\n  flex: 1;\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n  grid-auto-rows: max-content;\n  gap: @spacing;\n  padding: @spacing * 2;\n  overflow-y: scroll;\n  .country {\n    background: #fff;\n    border: @border;\n    padding: @spacing;\n    position: relative;\n    height: fit-content;\n    .star {\n      cursor: pointer;\n      display: inline;\n      left: 8px;\n      position: absolute;\n      top: 5px;\n      user-select: none;\n    }\n    .flag {\n      font-size: 5rem;\n      line-height: 1em;\n    }\n    .name {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      vertical-align: top;\n      white-space: nowrap;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module File Structure Pattern\nDESCRIPTION: Shows the typical module file organization pattern with TypeScript definition and implementation files.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/2_architecture.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n  @types/\n    module.d.ts\n  module.ts\n```\n\n----------------------------------------\n\nTITLE: Compiling Documentation Assets\nDESCRIPTION: Commands for compiling specific parts of the documentation\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compileDocsAssetsOnly\nnpm run compileDocsPagesOnly\n```\n\n----------------------------------------\n\nTITLE: Handling Non-conflicting Updates to Different Cells\nDESCRIPTION: Demonstrates how updates to different cells in the same row are merged without conflict during synchronization.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstore1.setCell('pets', 'fido', 'color', 'brown');\nstore2.setCell('pets', 'fido', 'legs', 4);\n// ...\nawait syncDocs();\nconsole.log(store1.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown', 'legs': 4}}}\nconsole.log(store2.getTables());\n// -> {pets: {fido: {species: 'dog', color: 'brown', 'legs': 4}}}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Validation\nDESCRIPTION: Command to validate TypeScript code and check for type errors and unused exports\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ts\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Commands to compile production code, generate documentation and run end-to-end tests\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compileForProd\nnpm run compileDocs\nnpm run testE2e\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple SQLite Tables After Tabular Save\nDESCRIPTION: This code executes SQL queries to verify that data was properly stored in multiple SQLite tables according to the tabular mapping configuration.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/2_database_persistence.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(db.exec('SELECT * FROM pets;', {rowMode: 'object'}));\n// -> [{_id: 'felix', species: 'cat'}, {_id: 'fido', species: 'dog'}]\nconsole.log(db.exec('SELECT * FROM animal_species;', {rowMode: 'object'}));\n// -> [{_id: 'dog', price: 5}, {_id: 'cat', price: 4}]\n```\n\n----------------------------------------\n\nTITLE: Converting from getValue to getCell in TinyBase\nDESCRIPTION: Shows how to retrieve data from a TinyBase store using the getCell method instead of getValue. This change accesses the same 'Hello World' data but now from a table, row, and cell structure.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/01_hello_world/v2.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n-document.body.innerHTML = store.getValue('v1');\n+document.body.innerHTML = store.getCell('t1', 'r1', 'c1');\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Client Directory\nDESCRIPTION: Command to change to the client directory of the newly created project.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-tinybase-app/client\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Aggregation and Row Value Derivation in JavaScript\nDESCRIPTION: Demonstrates how to combine both custom aggregation and custom row value derivation in a single metric definition. This example counts the number of cuboids with a density greater than 5.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/3_advanced_metric_definition.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmetrics.setMetricDefinition(\n  'countOfDenseCuboids',\n  'cuboids',\n  (densities) => densities.filter((density) => density > 5).length,\n  (getCell) => getCell('mass') / getCell('volume'),\n);\n\nconsole.log(metrics.getMetric('countOfDenseCuboids'));\n// -> 1\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Query in TinyBase\nDESCRIPTION: This code demonstrates how to create and register a query for recent movies in TinyBase. It selects specific columns, applies a filter for movies made since 2018, and sets up the query definition.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/07_ResultSortedTableInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n const store = useCreateStore(createStore);\n+const queries = useCreateQueries(store, (store) =>\n+  createQueries(store).setQueryDefinition(\n+    'recentMovies',\n+    'movies',\n+    ({select, where}) => {\n+      select('name').as('Name');\n+      select('year').as('Year');\n+      select('rating').as('Rating');\n+      where((getCell) => getCell('year') >= 2018);\n+    },\n+  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Markdown Redirect Link\nDESCRIPTION: A markdown redirect link pointing to the schema-based typing documentation guide located in the schemas section.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/_schemas_and_persistence/2_schema_based_typing.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Schema-Based Typing\n\n-> /guides/schemas/schema-based-typing\n```\n\n----------------------------------------\n\nTITLE: Implementing Browser Session Persistence in TinyBase\nDESCRIPTION: Shows how to persist TinyBase store data to browser session storage and retrieve it.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/home/index.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createSessionPersister} from 'tinybase/persisters/persister-browser';\n\nconst persister = createSessionPersister(store, 'demo');\nawait persister.save();\n\nconsole.log(sessionStorage.getItem('demo'));\n// ->\n`\n[\n  {\n    \"pets\":{\n      \"fido\":{\"species\":\"dog\",\"color\":\"walnut\",\"sold\":false},\n      \"polly\":{\"species\":\"parrot\",\"sold\":false}\n    }\n  },\n  {\"employees\":3,\"open\":true}\n]\n`;\n\npersister.destroy();\nsessionStorage.clear();\n```\n\n----------------------------------------\n\nTITLE: Using Metrics Context Provider in React\nDESCRIPTION: Shows how to use the Provider component to make Metrics objects available throughout a React application via context.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/07_using_metrics/2_building_a_ui_with_metrics.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Provider} from 'tinybase/ui-react';\n\nconst App4 = () => {\n  const store = useCreateStore(() =>\n    createStore().setTable('species', {\n      dog: {price: 5},\n      cat: {price: 4},\n      worm: {price: 1},\n    }),\n  );\n  const metrics = useCreateMetrics(store, (store) =>\n    createMetrics(store).setMetricDefinition(\n      'highestPrice',\n      'species',\n      'max',\n      'price',\n    ),\n  );\n\n  return (\n    <Provider metrics={metrics}>\n      <Pane />\n    </Provider>\n  );\n};\n\nconst Pane = () => (\n  <span>\n    <MetricView metricId=\"highestPrice\" />,{useMetric('highestPrice')}\n  </span>\n);\n\nroot.render(<App4 />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>5,5</span>'\n```\n\n----------------------------------------\n\nTITLE: Compiling TinyBase for Testing\nDESCRIPTION: Quick compilation of TypeScript into a single module for testing purposes\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compileForTest\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Link for TinyBase Schema Documentation\nDESCRIPTION: A simple markdown link directing users to the schemas guide section in the TinyBase documentation.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/_schemas_and_persistence/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Schemas And Persistence\n\n-> /guides/schemas\n```\n\n----------------------------------------\n\nTITLE: TinyQL Documentation Redirect Link\nDESCRIPTION: Markdown redirect link to the main TinyQL documentation located in the guides section under 'using-queries/tinyql'\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/_making_queries/2_tinyql.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-> /guides/using-queries/tinyql\n```\n\n----------------------------------------\n\nTITLE: Compile and Run Unit Tests\nDESCRIPTION: Command to compile code and run unit tests in one step\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compileAndTestUnit\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation\nDESCRIPTION: Commands to compile and serve the TinyBase documentation website locally\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/13_how_tinybase_is_built/1_developing_tinybase.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compileDocs\nnpm run serveDocs\n```\n\n----------------------------------------\n\nTITLE: Linking to Query Guide in Markdown\nDESCRIPTION: This snippet contains a Markdown link to the guide on using queries in TinyBase. It directs users to a more comprehensive resource for understanding and implementing queries.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/_making_queries/1_using_queries.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Using Queries\n\n-> /guides/using-queries/an-intro-to-queries\n```\n\n----------------------------------------\n\nTITLE: Styling the App with LESS\nDESCRIPTION: Defines the overall styling for the application using LESS. Sets up a grid layout, defines colors, spacing, and other CSS properties for a consistent look and feel.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n@accentColor: #d81b60;\n@spacing: 0.5rem;\n@border: 1px solid #ccc;\n@font-face {\n  font-family: Inter;\n  src: url(https://tinybase.org/fonts/inter.woff2) format('woff2');\n}\n\nbody {\n  display: grid;\n  grid-template-columns: 35% minmax(0, 1fr);\n  grid-template-rows: auto 1fr;\n  box-sizing: border-box;\n  font-family: Inter, sans-serif;\n  letter-spacing: -0.04rem;\n  grid-gap: @spacing * 2 @spacing;\n  margin: 0;\n  min-height: 100vh;\n  padding: @spacing * 2;\n  * {\n    box-sizing: border-box;\n    outline-color: @accentColor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the App on Window Load\nDESCRIPTION: Sets up an event listener to render the App component when the window loads. This ensures that the DOM is fully loaded before the React app is initialized.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nwindow.addEventListener('load', () =>\n  createRoot(document.body).render(<App />),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing the Title Component\nDESCRIPTION: Creates a simple Title component that renders the app's title. This component is a placeholder for future enhancements.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v1.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst Title = () => 'Todos';\n```\n\n----------------------------------------\n\nTITLE: Making and Synchronizing Changes Between Stores\nDESCRIPTION: This snippet demonstrates making changes to one Store and synchronizing them to another Store using the syncDocs function.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/04_persistence/3_third_party_crdt_persistence.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstore1.setTables({pets: {fido: {species: 'dog'}}});\nawait syncDocs();\n\nconsole.log(store2.getTables());\n// -> {pets: {fido: {species: 'dog'}}}\n```\n\n----------------------------------------\n\nTITLE: Importing TinyBase and React Dependencies\nDESCRIPTION: Imports the necessary modules from React, React DOM, TinyBase, and TinyBase UI components for the demo.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/01_ValuesInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {useMemo, useState} from 'react';\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createStore} from 'tinybase';\nimport {Provider, useCreateStore} from 'tinybase/ui-react';\nimport {ValuesInHtmlTable} from 'tinybase/ui-react-dom';\n```\n\n----------------------------------------\n\nTITLE: Styling for Type Component\nDESCRIPTION: Adds CSS styling for individual Type components, including cursor style and highlighting for the current selection.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/04_todo/v2.md#2025-04-16_snippet_6\n\nLANGUAGE: less\nCODE:\n```\n#types .type {\n  cursor: pointer;\n  margin-bottom: @spacing;\n  user-select: none;\n  &.current {\n    color: @accentColor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required React and TinyBase Dependencies\nDESCRIPTION: Imports necessary functions and components from React and TinyBase libraries for the application.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useCallback} from 'react';\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createIndexes, createStore, defaultSorter} from 'tinybase';\nimport {\n  createLocalPersister,\n  createSessionPersister,\n} from 'tinybase/persisters/persister-browser';\nimport {createRemotePersister} from 'tinybase/persisters/persister-remote';\nimport {\n  CellView,\n  IndexView,\n  Provider,\n  SliceView,\n  useCell,\n  useCreateIndexes,\n  useCreatePersister,\n  useCreateStore,\n  useDelCellCallback,\n  useSetCellCallback,\n  useSetRowCallback,\n  useSetValuesCallback,\n  useSliceRowIds,\n  useValues,\n} from 'tinybase/ui-react';\nimport {Inspector} from 'tinybase/ui-react-inspector';\n```\n\n----------------------------------------\n\nTITLE: Defining Star Constants\nDESCRIPTION: Defines Unicode constants for star and unstar symbols used in the interface.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/03_countries.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst STAR = '\\u2605';\nconst UNSTAR = '\\u2606';\n```\n\n----------------------------------------\n\nTITLE: Configuring Durable Objects in wrangler.toml\nDESCRIPTION: Cloudflare configuration for binding a namespace of Durable Objects to a class and setting up migrations.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/06_integrations/1_cloudflare_durable_objects.md#2025-04-16_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[durable_objects.bindings]]\nname = \"TinyBaseDurableObjects\"\nclass_name = \"TinyBaseDurableObject\"\n\n[[migrations]]\ntag = \"v1\"\nnew_classes = [\"TinyBaseDurableObject\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying TinyBase Guides Introduction in Markdown\nDESCRIPTION: This markdown snippet introduces the TinyBase guides, explaining their purpose in relation to the API documentation and their focus on explaining TinyBase concepts.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Guides\n\nThis series of guides helps explain the concepts behind TinyBase and is designed\nto complement the more comprehensive API documentation.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Complex Data Structure\nDESCRIPTION: Creates a multi-table data structure including pets, species, colors, owners, and regions for demonstration purposes.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/11_using_queries/2_tinyql.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstore\n  .setTable('pets', {\n    fido: {speciesId: '1', colorId: '1', ownerId: '1'},\n    rex: {speciesId: '1', colorId: '2', ownerId: '6'},\n    cujo: {speciesId: '1', colorId: '3', ownerId: '3'},\n    felix: {speciesId: '2', colorId: '2', ownerId: '2'},\n    tom: {speciesId: '2', colorId: '1', ownerId: '5'},\n    lowly: {speciesId: '3', colorId: '1', ownerId: '4'},\n    smaug: {speciesId: '3', colorId: '4', ownerId: '1'},\n  })\n  .setTable('species', {\n    1: {name: 'dog', price: 5},\n    2: {name: 'cat', price: 4},\n    3: {name: 'worm', price: 1},\n  })\n  .setTable('color', {\n    1: {name: 'brown', premium: 1.0},\n    2: {name: 'black', premium: 1.5},\n    3: {name: 'white', premium: 2},\n    4: {name: 'silver', premium: 4},\n  })\n  .setTable('owner', {\n    1: {name: 'Alice', regionId: '1'},\n    2: {name: 'Bob', regionId: '1'},\n    3: {name: 'Carol', regionId: '2'},\n    4: {name: 'Dennis', regionId: '2'},\n    5: {name: 'Errol', regionId: '3'},\n    6: {name: 'Fiona', regionId: '4'},\n  })\n  .setTable('region', {\n    1: {name: 'California', country: 'US'},\n    2: {name: 'New York', country: 'US'},\n    3: {name: 'Washington', country: 'US'},\n    4: {name: 'British Columbia', country: 'CA'},\n  });\n```\n\n----------------------------------------\n\nTITLE: Styling for the Search Input\nDESCRIPTION: CSS styles for the search input field, including border, font, and sizing properties.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/09_word_frequencies.md#2025-04-16_snippet_7\n\nLANGUAGE: less\nCODE:\n```\ninput {\n  border: 0;\n  border-bottom: 1px solid #999;\n  display: block;\n  font: inherit;\n  letter-spacing: inherit;\n  font-weight: 600;\n  margin: 1rem auto;\n  outline: 0;\n  padding: 0;\n  width: 20rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Info Display with Less CSS\nDESCRIPTION: This Less CSS snippet centers the info display within its container.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/10_Inspector.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\n#info {\n  align-self: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring TinyBase Indexes\nDESCRIPTION: Adds code to create indexes in the Store and set up an index definition that categorizes genres by the length of their names.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/demos/10_ui_components/04_SliceInHtmlTable.md#2025-04-16_snippet_1\n\nLANGUAGE: diff-js\nCODE:\n```\n const store = useCreateStore(createStore);\n+const indexes = useCreateIndexes(store, (store) =>\n+  createIndexes(store).setIndexDefinition(\n+    'genresByNameLength',\n+    'genres',\n+    (getCell) => 'length ' + getCell('name').length,\n+  ),\n+);\n```\n\n----------------------------------------\n\nTITLE: Using useSliceIds Hook with TinyBase Indexes in React\nDESCRIPTION: Demonstrates how to use the useSliceIds hook to track and render Index slice IDs with automatic re-rendering on changes. Shows store creation, index definition, and component implementation.\nSOURCE: https://github.com/tinyplex/tinybase/blob/main/site/guides/08_using_indexes/2_building_a_ui_with_indexes.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {createIndexes, createStore} from 'tinybase';\nimport {useSliceIds} from 'tinybase/ui-react';\n\nconst store = createStore().setTable('pets', {\n  fido: {species: 'dog'},\n  felix: {species: 'cat'},\n  cujo: {species: 'dog'},\n});\nconst indexes = createIndexes(store);\nindexes.setIndexDefinition(\n  'bySpecies', // indexId\n  'pets', //      tableId to index\n  'species', //   cellId to index on\n);\nconst App = () => (\n  <span>{JSON.stringify(useSliceIds('bySpecies', indexes))}</span>\n);\n\nconst app = document.createElement('div');\nconst root = createRoot(app);\nroot.render(<App />); // !act\nconsole.log(app.innerHTML);\n// -> '<span>[\"dog\",\"cat\"]</span>'\n\nstore.setRow('pets', 'lowly', {species: 'worm'}); // !act\nconsole.log(app.innerHTML);\n// -> '<span>[\"dog\",\"cat\",\"worm\"]</span>'\n```"
  }
]