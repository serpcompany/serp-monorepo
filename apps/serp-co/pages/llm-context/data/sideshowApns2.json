[
  {
    "owner": "sideshow",
    "repo": "apns2",
    "content": "TITLE: Basic APNS/2 Certificate-Based Push Notification Example\nDESCRIPTION: Complete example demonstrating how to send a push notification using certificate-based authentication. Shows certificate loading, notification configuration, and client setup for both development and production environments.\nSOURCE: https://github.com/sideshow/apns2/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"log\"\n  \"fmt\"\n\n  \"github.com/sideshow/apns2\"\n  \"github.com/sideshow/apns2/certificate\"\n)\n\nfunc main() {\n\n  cert, err := certificate.FromP12File(\"../cert.p12\", \"\")\n  if err != nil {\n    log.Fatal(\"Cert Error:\", err)\n  }\n\n  notification := &apns2.Notification{}\n  notification.DeviceToken = \"11aa01229f15f0f0c52029d8cf8cd0aeaf2365fe4cebc4af26cd6d76b7919ef7\"\n  notification.Topic = \"com.sideshow.Apns2\"\n  notification.Payload = []byte(`{\"aps\":{\"alert\":\"Hello!\"}}`) // See Payload section below\n\n  // If you want to test push notifications for builds running directly from XCode (Development), use\n  // client := apns2.NewClient(cert).Development()\n  // For apps published to the app store or installed as an ad-hoc distribution use Production()\n\n  client := apns2.NewClient(cert).Production()\n  res, err := client.Push(notification)\n\n  if err != nil {\n    log.Fatal(\"Error:\", err)\n  }\n\n  fmt.Printf(\"%v %v %v\\n\", res.StatusCode, res.ApnsID, res.Reason)\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Authentication Example for APNS/2\nDESCRIPTION: Example showing how to configure and use JWT token-based authentication with APNS/2. Demonstrates loading an authentication key and creating a token client.\nSOURCE: https://github.com/sideshow/apns2/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nauthKey, err := token.AuthKeyFromFile(\"../AuthKey_XXX.p8\")\nif err != nil {\n  log.Fatal(\"token error:\", err)\n}\n\ntoken := &token.Token{\n  AuthKey: authKey,\n  // KeyID from developer account (Certificates, Identifiers & Profiles -> Keys)\n  KeyID:   \"ABC123DEFG\",\n  // TeamID from developer account (View Account -> Membership)\n  TeamID:  \"DEF123GHIJ\",\n}\n...\n\nclient := apns2.NewTokenClient(token)\nres, err := client.Push(notification)\n```\n\n----------------------------------------\n\nTITLE: Marshaling and Unmarshaling YAML Data in Go\nDESCRIPTION: A complete example showing how to use the yaml.v3 package to unmarshal YAML into a Go struct and map, and then marshal them back to YAML. The example demonstrates struct field naming, tag usage for renaming fields, and flow style formatting.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/yaml.v3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\nLANGUAGE: YAML\nCODE:\n```\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Complete Ping Command Example with Kingpin in Go\nDESCRIPTION: A comprehensive example of a ping command implementation using Kingpin. Shows definition of flags with defaults, required arguments, and optional arguments with custom types.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n\n  \"gopkg.in/alecthomas/kingpin.v2\"\n)\n\nvar (\n  debug   = kingpin.Flag(\"debug\", \"Enable debug mode.\").Bool()\n  timeout = kingpin.Flag(\"timeout\", \"Timeout waiting for ping.\").Default(\"5s\").OverrideDefaultFromEnvar(\"PING_TIMEOUT\").Short('t').Duration()\n  ip      = kingpin.Arg(\"ip\", \"IP address to ping.\").Required().IP()\n  count   = kingpin.Arg(\"count\", \"Number of packets to send\").Int()\n)\n\nfunc main() {\n  kingpin.Version(\"0.0.1\")\n  kingpin.Parse()\n  fmt.Printf(\"Would ping: %s with timeout %s and count %d\\n\", *ip, *timeout, *count)\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Chat CLI Application with Kingpin in Go\nDESCRIPTION: A complete example of creating a command-line chat application using the Kingpin library, demonstrating global flags, subcommands, and command-specific flags. The application supports 'register' and 'post' commands with various options.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"os\"\n  \"strings\"\n  \"gopkg.in/alecthomas/kingpin.v2\"\n)\n\nvar (\n  app      = kingpin.New(\"chat\", \"A command-line chat application.\")\n  debug    = app.Flag(\"debug\", \"Enable debug mode.\").Bool()\n  serverIP = app.Flag(\"server\", \"Server address.\").Default(\"127.0.0.1\").IP()\n\n  register     = app.Command(\"register\", \"Register a new user.\")\n  registerNick = register.Arg(\"nick\", \"Nickname for user.\").Required().String()\n  registerName = register.Arg(\"name\", \"Name of user.\").Required().String()\n\n  post        = app.Command(\"post\", \"Post a message to a channel.\")\n  postImage   = post.Flag(\"image\", \"Image to post.\").File()\n  postChannel = post.Arg(\"channel\", \"Channel to post to.\").Required().String()\n  postText    = post.Arg(\"text\", \"Text to post.\").Strings()\n)\n\nfunc main() {\n  switch kingpin.MustParse(app.Parse(os.Args[1:])) {\n  // Register user\n  case register.FullCommand():\n    println(*registerNick)\n\n  // Post message\n  case post.FullCommand():\n    if *postImage != nil {\n    }\n    text := strings.Join(*postText, \" \")\n    println(\"Post:\", text)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Sub-commands in Kingpin\nDESCRIPTION: Example of implementing hierarchical sub-commands in Kingpin, showing how to create nested command structures with 'delete user' and 'delete post' functionality and their respective flags and arguments.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  deleteCommand     = kingpin.Command(\"delete\", \"Delete an object.\")\n  deleteUserCommand = deleteCommand.Command(\"user\", \"Delete a user.\")\n  deleteUserUIDFlag = deleteUserCommand.Flag(\"uid\", \"Delete user by UID rather than username.\")\n  deleteUserUsername = deleteUserCommand.Arg(\"username\", \"Username to delete.\")\n  deletePostCommand = deleteCommand.Command(\"post\", \"Delete a post.\")\n)\n\nfunc main() {\n  switch kingpin.Parse() {\n  case \"delete user\":\n  case \"delete post\":\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Kingpin Usage Example in Go\nDESCRIPTION: A minimal example showing how to define flags and arguments with Kingpin. This demonstrates the fluent API style with a verbose flag and a required name argument.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  verbose = kingpin.Flag(\"verbose\", \"Verbose mode.\").Short('v').Bool()\n  name    = kingpin.Arg(\"name\", \"Name of user.\").Required().String()\n)\n\nfunc main() {\n  kingpin.Parse()\n  fmt.Printf(\"%v, %s\\n\", *verbose, *name)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Units Package for Base2 Byte Conversions in Go\nDESCRIPTION: This code demonstrates how to use the units package to parse a string representation of bytes (\"1KB\") and how to use predefined constants (units.Mebibyte) for byte calculations. The package provides functionality similar to Go's time package but for byte units.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/github.com/alecthomas/units/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nn, err := ParseBase2Bytes(\"1KB\")\n// n == 1024\nn = units.Mebibyte * 512\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parsers for Kingpin Flags\nDESCRIPTION: Implementation of a custom HTTP header parser for Kingpin flags, demonstrating how to create a type that conforms to Go's flag.Value interface for complex value parsing and accumulation.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPHeaderValue http.Header\n\nfunc (h *HTTPHeaderValue) Set(value string) error {\n  parts := strings.SplitN(value, \":\", 2)\n  if len(parts) != 2 {\n    return fmt.Errorf(\"expected HEADER:VALUE got '%s'\", value)\n  }\n  (*http.Header)(h).Add(parts[0], parts[1])\n  return nil\n}\n\nfunc (h *HTTPHeaderValue) String() string {\n  return \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cumulative IP Address Arguments in Kingpin\nDESCRIPTION: Implementation of a custom IP address list type for Kingpin that can consume multiple positional arguments, demonstrating how to handle cumulative argument values.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype ipList []net.IP\n\nfunc (i *ipList) Set(value string) error {\n  if ip := net.ParseIP(value); ip == nil {\n    return fmt.Errorf(\"'%s' is not an IP address\", value)\n  } else {\n    *i = append(*i, ip)\n    return nil\n  }\n}\n\nfunc (i *ipList) String() string {\n  return \"\"\n}\n\nfunc (i *ipList) IsCumulative() bool {\n  return true\n}\n\nfunc IPList(s Settings) (target *[]net.IP) {\n  target = new([]net.IP)\n  s.SetValue((*ipList)(target))\n  return\n}\n```\n\n----------------------------------------\n\nTITLE: Using IP List Arguments in Kingpin\nDESCRIPTION: Example of how to use the custom IP list argument type in a Kingpin application, allowing multiple IP addresses to be passed as positional arguments.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nips := IPList(kingpin.Arg(\"ips\", \"IP addresses to ping.\"))\n```\n\n----------------------------------------\n\nTITLE: Installing APNS/2 and Dependencies\nDESCRIPTION: Commands for installing the APNS/2 package and its test dependencies using go get.\nSOURCE: https://github.com/sideshow/apns2/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/sideshow/apns2\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/stretchr/testify\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTTP Header Flag in Kingpin\nDESCRIPTION: Example of how to use the custom HTTP header flag helper function in a Kingpin application, creating a repeatable flag that can collect multiple HTTP headers.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nheaders = HTTPHeader(kingpin.Flag(\"header\", \"Add a HTTP header to the request.\").Short('H'))\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Function for HTTP Header Flag in Kingpin\nDESCRIPTION: A convenience function for creating HTTP header flags in Kingpin applications, simplifying the creation and usage of the custom HTTP header parser.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc HTTPHeader(s Settings) (target *http.Header) {\n  target = &http.Header{}\n  s.SetValue((*HTTPHeaderValue)(target))\n  return\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JWT v4 Package in Go\nDESCRIPTION: The new import path for JWT v4.0.0 which is backwards compatible with v3.x.y tags and github.com/dgrijalva/jwt-go\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/github.com/golang-jwt/jwt/v4/MIGRATION_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/golang-jwt/jwt/v4\"\n```\n\n----------------------------------------\n\nTITLE: Installing JWT v4 Dependencies\nDESCRIPTION: Commands to install the JWT v4 package and update Go module dependencies\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/github.com/golang-jwt/jwt/v4/MIGRATION_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/golang-jwt/jwt/v4\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Providing Static Completion Options in Kingpin (Go)\nDESCRIPTION: Demonstrates how to use HintOptions to provide static completion options for a flag, allowing both predefined and custom user input.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\napp := kingpin.New(\"completion\", \"My application with bash completion.\")\napp.Flag(\"port\", \"Provide a port to connect to\").\n    Required().\n    HintOptions(\"80\", \"443\", \"8080\").\n    IntVar(&c.port)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Completion Options in Kingpin (Go)\nDESCRIPTION: Shows how to use HintAction with a custom function to dynamically generate completion options for a flag, useful for reading from files or databases.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc listHosts() []string {\n  // Provide a dynamic list of hosts from a hosts file or otherwise\n  // for bash completion. In this example we simply return static slice.\n\n  // You could use this functionality to reach into a hosts file to provide\n  // completion for a list of known hosts.\n  return []string{\"sshhost.example\", \"webhost.example\", \"ftphost.example\"}\n}\n\napp := kingpin.New(\"completion\", \"My application with bash completion.\")\napp.Flag(\"flag-1\", \"\").HintAction(listHosts).String()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Newline Elision in Go Templates\nDESCRIPTION: This example shows how the backslash syntax works after closing delimiters to eliminate subsequent newlines. When placed after a closing delimiter, it removes all newlines until a non-newline character is encountered.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/github.com/alecthomas/template/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n{{if true}}\\\nhello\n{{end}}\\\n```\n\n----------------------------------------\n\nTITLE: Default Help Template Output in Kingpin (Go)\nDESCRIPTION: Shows an example of the default help output generated by Kingpin, including usage, flags, and commands.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n$ go run ./examples/curl/curl.go --help\nusage: curl [<flags>] <command> [<args> ...]\n\nAn example implementation of curl.\n\nFlags:\n  --help            Show help.\n  -t, --timeout=5s  Set connection timeout.\n  -H, --headers=HEADER=VALUE\n                    Add HTTP headers to the request.\n\nCommands:\n  help [<command>...]\n    Show help.\n\n  get url <url>\n    Retrieve a URL.\n\n  get file <file>\n    Retrieve a file.\n\n  post [<flags>] <url>\n    POST a resource.\n```\n\n----------------------------------------\n\nTITLE: Compact Help Template Output in Kingpin (Go)\nDESCRIPTION: Illustrates the compact help output format in Kingpin, which provides a more concise representation of the command-line structure.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n$ go run ./examples/curl/curl.go --help\nusage: curl [<flags>] <command> [<args> ...]\n\nAn example implementation of curl.\n\nFlags:\n  --help            Show help.\n  -t, --timeout=5s  Set connection timeout.\n  -H, --headers=HEADER=VALUE\n                    Add HTTP headers to the request.\n\nCommands:\n  help [<command>...]\n  get [<flags>]\n    url <url>\n    file <file>\n  post [<flags>] <url>\n```\n\n----------------------------------------\n\nTITLE: Configuring Short Help Flag in Kingpin (Go)\nDESCRIPTION: Demonstrates how to set up a short -h flag for displaying help information in a Kingpin application.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nkingpin.CommandLine.HelpFlag.Short('h')\n```\n\n----------------------------------------\n\nTITLE: Output With Newline Elision\nDESCRIPTION: Shows the resulting output when newline elision is used. The excessive newlines are removed, producing a cleaner output with just the content and a single trailing newline.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/github.com/alecthomas/template/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhello\\n\n```\n\n----------------------------------------\n\nTITLE: Output Without Newline Elision\nDESCRIPTION: Shows the default output that would occur without newline elision. Multiple newlines are preserved, creating unwanted whitespace in the output.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/github.com/alecthomas/template/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\\n\nhello\\n\n\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Kingpin Library in Go\nDESCRIPTION: Command to install the Kingpin library using Go's package manager. This installs the current stable v2 version of the library.\nSOURCE: https://github.com/sideshow/apns2/blob/master/vendor/gopkg.in/alecthomas/kingpin.v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get gopkg.in/alecthomas/kingpin.v2\n```"
  }
]