[
  {
    "owner": "quasarframework",
    "repo": "quasar.git",
    "content": "TITLE: Creating New Quasar Project with Package Managers\nDESCRIPTION: Commands to create a new Quasar project using different package managers including Yarn, NPM, PNPM, and Bun (experimental).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quick-start.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create quasar\n$ npm init quasar@latest\n$ pnpm create quasar@latest\n# experimental support\n$ bun create quasar@latest\n```\n\n----------------------------------------\n\nTITLE: Adding SSR Mode to Quasar Project\nDESCRIPTION: Command to add SSR mode to an existing Quasar project using Quasar CLI. This creates necessary SSR-related files and folders in the project structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add ssr\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar SSR Webserver with Express.js\nDESCRIPTION: This code snippet shows a complete server.js file that configures the Quasar SSR webserver using Express.js. It includes functions for creating the server, listening on a port, closing the server, serving static content, and rendering preload tags for various file types.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-webserver.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Runs in Node context.\n */\n\n/**\n * Make sure to yarn/npm/pnpm/bun install (in your project root)\n * anything you import here (except for express and compression).\n */\nimport express from 'express'\nimport compression from 'compression'\nimport {\n  defineSsrCreate,\n  defineSsrListen,\n  defineSsrClose,\n  defineSsrServeStaticContent,\n  defineSsrRenderPreloadTag\n} from '#q-app/wrappers'\n\n/**\n * Create your webserver and return its instance.\n * If needed, prepare your webserver to receive\n * connect-like middlewares.\n *\n * Can be async: defineSsrCreate(async ({ ... }) => { ... })\n *\n * Param: ({\n *   port, // on dev: devServer port; on prod: process.env.PORT or quasar.config > ssr > prodPort\n *   resolve: {\n *      urlPath, // (url) => path string with publicPath ensured to be included,\n *      root, // (pathPart1, ...pathPartN) => path string (joins to the root folder),\n *      public // (pathPart1, ...pathPartN) => path string (joins to the public folder)\n *   },\n *   publicPath, // string\n *   folders: {\n *     root, // path string of the root folder\n *     public // path string of the public folder\n *   },\n *   render // (ssrContext) => html string\n * })\n */\nexport const create = defineSsrCreate((/* { ... } */) => {\n  const app = express()\n\n  // attackers can use this header to detect apps running Express\n  // and then launch specifically-targeted attacks\n  app.disable('x-powered-by')\n\n  // place here any middlewares that\n  // absolutely need to run before anything else\n  if (process.env.PROD) {\n    app.use(compression())\n  }\n\n  return app\n})\n\n/**\n * You need to make the server listen to the indicated port\n * and return the listening instance or whatever you need to\n * close the server with.\n *\n * The \"listenResult\" param for the \"close()\" definition below\n * is what you return here.\n *\n * For production, you can instead export your\n * handler for serverless use or whatever else fits your needs.\n *\n * Can be async: defineSsrListen(async ({ app, devHttpsApp, port }) => { ... })\n *\n * Param: ({\n *   app, // Expressjs app or whatever is returned from create()\n *   devHttpsApp, // DEV only, if using HTTPS\n *   port, // on dev: devServer port; on prod: process.env.PORT or quasar.config > ssr > prodPort\n *   resolve: {\n *      urlPath, // (url) => path string with publicPath ensured to be included,\n *      root, // (pathPart1, ...pathPartN) => path string (joins to the root folder),\n *      public // (pathPart1, ...pathPartN) => path string (joins to the public folder)\n *   },\n *   publicPath, // string\n *   folders: {\n *     root, // path string of the root folder\n *     public // path string of the public folder\n *   },\n *   render, // (ssrContext) => html string\n *   serve: {\n *     static, // ({ urlPath = '/', pathToServe = '.', opts = {} }) => void (OR whatever returned by serveStaticContent())\n *     error // DEV only; ({ err, req, res }) => void\n *   },\n * })\n */\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  const server = devHttpsApp || app\n  return server.listen(port, () => {\n    if (process.env.PROD) {\n      console.log('Server listening at port ' + port)\n    }\n  })\n})\n\n/**\n * Should close the server and free up any resources.\n * Will be used on development only when the server needs\n * to be rebooted.\n *\n * Should you need the result of the \"listen()\" call above,\n * you can use the \"listenResult\" param.\n *\n * Can be async: defineSsrClose(async ({ listenResult }) => { ... })\n *\n * Param: ({\n *   app, // Expressjs app or whatever is returned from create()\n *   devHttpsApp, // DEV only, if using HTTPS\n *   port, // on dev: devServer port; on prod: process.env.PORT or quasar.config > ssr > prodPort\n *   resolve: {\n *      urlPath, // (url) => path string with publicPath ensured to be included,\n *      root, // (pathPart1, ...pathPartN) => path string (joins to the root folder),\n *      public // (pathPart1, ...pathPartN) => path string (joins to the public folder)\n *   },\n *   publicPath, // string\n *   folders: {\n *     root, // path string of the root folder\n *     public // path string of the public folder\n *   },\n *   serve: {\n *     static, // ({ urlPath = '/', pathToServe = '.', opts = {} }) => void (OR whatever returned by serveStaticContent())\n *     error // DEV only; ({ err, req, res }) => void\n *   },\n *   render, // (ssrContext) => html string\n *   listenResult // whatever returned from listen()\n * })\n */\nexport const close = defineSsrClose(({ listenResult }) => {\n  return listenResult.close()\n})\n\nconst maxAge = process.env.DEV\n  ? 0\n  : 1000 * 60 * 60 * 24 * 30\n\n/**\n * Should return a function that will be used to configure the webserver\n * to serve static content at \"urlPath\" from \"pathToServe\" folder/file.\n *\n * Notice resolve.urlPath(urlPath) and resolve.public(pathToServe) usages.\n *\n * Can be async: defineSsrServeStaticContent(async ({ app, resolve }) => {\n * Can return an async function: return async ({ urlPath = '/', pathToServe = '.', opts = {} }) => {\n *\n * Param: ({\n *   app, // Expressjs app or whatever is returned from create()\n *   port, // on dev: devServer port; on prod: process.env.PORT or quasar.config > ssr > prodPort\n *   resolve: {\n *      urlPath: (url) => path string with publicPath ensured to be included,\n *      root: (pathPart1, ...pathPartN) => path string (joins to the root folder),\n *      public: (pathPart1, ...pathPartN) => path string (joins to the public folder)\n *   },\n *   publicPath, // string\n *   folders: {\n *     root, // path string of the root folder\n *     public // path string of the public folder\n *   },\n *   render: (ssrContext) => html string\n * })\n */\nexport const serveStaticContent = defineSsrServeStaticContent(({ app, resolve }) => {\n  return ({ urlPath = '/', pathToServe = '.', opts = {} }) => {\n    const serveFn = express.static(resolve.public(pathToServe), { maxAge, ...opts })\n    app.use(resolve.urlPath(urlPath), serveFn)\n  }\n})\n\nconst jsRE = /\\.js$/\nconst cssRE = /\\.css$/\nconst woffRE = /\\.woff$/\nconst woff2RE = /\\.woff2$/\nconst gifRE = /\\.gif$/\nconst jpgRE = /\\.jpe?g$/\nconst pngRE = /\\.png$/\n\n/**\n * Should return a String with HTML output\n * (if any) for preloading indicated file\n */\nexport const renderPreloadTag = defineSsrRenderPreloadTag((file/* , { ssrContext } */) => {\n  if (jsRE.test(file) === true) {\n    return `<script src=\"${file}\" defer crossorigin></script>`\n  }\n\n  if (cssRE.test(file) === true) {\n    return `<link rel=\"stylesheet\" href=\"${file}\" crossorigin>`\n  }\n\n  if (woffRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"font\" type=\"font/woff\" crossorigin>`\n  }\n\n  if (woff2RE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"font\" type=\"font/woff2\" crossorigin>`\n  }\n\n  if (gifRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"image\" type=\"image/gif\" crossorigin>`\n  }\n\n  if (jpgRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"image\" type=\"image/jpeg\" crossorigin>`\n  }\n\n  if (pngRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"image\" type=\"image/png\" crossorigin>`\n  }\n\n  return ''\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Boot File in Quasar\nDESCRIPTION: Sets up a boot file for Axios configuration in Quasar, creating an axios instance with custom baseURL and making it globally available in Vue components through app.config.globalProperties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/ajax-requests.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport axios from 'axios'\n\nconst api = axios.create({ baseURL: 'https://api.example.com' })\n\nexport default defineBoot(({ app }) => {\n  // for use inside Vue files (Options API) through this.$axios and this.$api\n\n  app.config.globalProperties.$axios = axios\n  // ^ ^ ^ this will allow you to use this.$axios (for Vue Options API form)\n  //       so you won't necessarily have to import axios in each vue file\n\n  app.config.globalProperties.$api = api\n  // ^ ^ ^ this will allow you to use this.$api (for Vue Options API form)\n  //       so you can easily perform requests against your app's API\n})\n\nexport { axios, api }\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy Rules in Quasar Config File\nDESCRIPTION: This code snippet demonstrates various ways to configure API proxy rules in the quasar.config file. It includes examples of string shorthand, options with path rewriting, RegExp matching, proxy instance configuration, and websocket proxying.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/api-proxying.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  proxy: {\n    // string shorthand: http://localhost:5173/foo -> http://localhost:4567/foo\n    '/foo': 'http://localhost:4567',\n    // with options: http://localhost:5173/api/bar-> http://jsonplaceholder.typicode.com/bar\n    '/api': {\n      target: 'http://jsonplaceholder.typicode.com',\n      changeOrigin: true,\n      rewrite: (path) => path.replace(/^\\/api/, ''),\n    },\n    // with RegExp: http://localhost:5173/fallback/ -> http://jsonplaceholder.typicode.com/\n    '^/fallback/.*': {\n      target: 'http://jsonplaceholder.typicode.com',\n      changeOrigin: true,\n      rewrite: (path) => path.replace(/^\\/fallback/, ''),\n    },\n    // Using the proxy instance\n    '/api': {\n      target: 'http://jsonplaceholder.typicode.com',\n      changeOrigin: true,\n      configure: (proxy, options) => {\n        // proxy will be an instance of 'http-proxy'\n      },\n    },\n    // Proxying websockets or socket.io: ws://localhost:5173/socket.io -> ws://localhost:5174/socket.io\n    // Exercise caution using `rewriteWsOrigin` as it can leave the proxying open to CSRF attacks.\n    '/socket.io': {\n      target: 'ws://localhost:5174',\n      ws: true,\n      rewriteWsOrigin: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of quasar.config File in JavaScript\nDESCRIPTION: Demonstrates the basic structure of the quasar.config file, exporting a function that receives a context object and returns the configuration object. It shows how to use the context to dynamically configure the app based on the build mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\n\nexport default defineConfig((ctx) => { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  /*\n  {\n    dev: true,\n    prod: false,\n    mode: { spa: true },\n    modeName: 'spa',\n    target: {},\n    targetName: undefined,\n    arch: {},\n    archName: undefined,\n    debug: undefined\n  }\n  */\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n\n  return {\n    // ... your config\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Quasar Dialog Plugin with Composition API\nDESCRIPTION: Vue Single File Component implementation of a dialog plugin using Quasar's Composition API with useDialogPluginComponent. Includes template structure, component setup, and event handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- notice dialogRef here -->\n  <q-dialog ref=\"dialogRef\" @hide=\"onDialogHide\">\n    <q-card class=\"q-dialog-plugin\">\n      <!--\n        ...content\n        ... use q-card-section for it?\n      -->\n\n      <!-- buttons example -->\n      <q-card-actions align=\"right\">\n        <q-btn color=\"primary\" label=\"OK\" @click=\"onOKClick\" />\n        <q-btn color=\"primary\" label=\"Cancel\" @click=\"onCancelClick\" />\n      </q-card-actions>\n    </q-card>\n  </q-dialog>\n</template>\n\n<script>\nimport { useDialogPluginComponent } from 'quasar'\n\nexport default {\n  props: {\n    // ...your custom props\n  },\n\n  emits: [\n    // REQUIRED; need to specify some events that your\n    // component will emit through useDialogPluginComponent()\n    ...useDialogPluginComponent.emits\n  ],\n\n  setup () {\n    // REQUIRED; must be called inside of setup()\n    const { dialogRef, onDialogHide, onDialogOK, onDialogCancel } = useDialogPluginComponent()\n    // dialogRef      - Vue ref to be applied to QDialog\n    // onDialogHide   - Function to be used as handler for @hide on QDialog\n    // onDialogOK     - Function to call to settle dialog with \"ok\" outcome\n    //                    example: onDialogOK() - no payload\n    //                    example: onDialogOK({ /*.../* }) - with payload\n    // onDialogCancel - Function to call to settle dialog with \"cancel\" outcome\n\n    return {\n      // This is REQUIRED;\n      // Need to inject these (from useDialogPluginComponent() call)\n      // into the vue scope for the vue html template\n      dialogRef,\n      onDialogHide,\n\n      // other methods that we used in our vue html template;\n      // these are part of our example (so not required)\n      onOKClick () {\n        // on OK, it is REQUIRED to\n        // call onDialogOK (with optional payload)\n        onDialogOK()\n        // or with payload: onDialogOK({ ... })\n        // ...and it will also hide the dialog automatically\n      },\n\n      // we can passthrough onDialogCancel directly\n      onCancelClick: onDialogCancel\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Quasar Config Structure with Context\nDESCRIPTION: Shows the basic structure of a quasar.config file that exports a function taking a context parameter. The context provides build-time information like dev/prod mode and target platform.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\n\nexport default defineConfig((ctx) => { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false,\n    mode: { spa: true },\n    modeName: 'spa',\n    target: {},\n    targetName: undefined,\n    arch: {},\n    archName: undefined,\n    debug: undefined\n  }\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n\n  return {\n    // ... your config\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive QTable with Grid Property in Vue\nDESCRIPTION: Shows how to create a responsive QTable using the grid property for smaller screen sizes, utilizing Quasar's screen plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Using grid prop\" file=\"ResponsiveGrid\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing QTable Top Section with Add/Remove Row Functionality in Vue\nDESCRIPTION: Shows how to customize the top section of a QTable component, including the implementation of add and remove row functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom top with add/remove row\" file=\"CustomTop\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Options in quasar.config File\nDESCRIPTION: Configuration options for Server-Side Rendering in the quasar.config file, including PWA settings, store serialization, port configuration, and middleware management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nssr: {\n  /**\n   * If a PWA should take over or just a SPA.\n   * @default false\n   */\n  pwa?: boolean;\n\n  /**\n   * When using SSR+PWA, this is the name of the\n   * PWA index html file that the client-side fallbacks to.\n   * For production only.\n   *\n   * Do NOT use index.html as name as it will mess SSR up!\n   *\n   * @default 'offline.html'\n   */\n  pwaOfflineHtmlFilename?: string;\n\n  /**\n   * Extend/configure the Workbox GenerateSW options\n   * Specify Workbox options which will be applied on top of\n   *  `pwa > extendGenerateSWOptions()`.\n   * More info: https://developer.chrome.com/docs/workbox/the-ways-of-workbox/\n   */\n  pwaExtendGenerateSWOptions?: (config: object) => void;\n\n  /**\n   * Extend/configure the Workbox InjectManifest options\n   * Specify Workbox options which will be applied on top of\n   *  `pwa > extendInjectManifestOptions()`.\n   * More info: https://developer.chrome.com/docs/workbox/the-ways-of-workbox/\n   */\n  pwaExtendInjectManifestOptions?: (config: object) => void;\n\n  /**\n   * Manually serialize the store state and provide it yourself\n   * as window.__INITIAL_STATE__ to the client-side (through a <script> tag)\n   * @default false\n   */\n  manualStoreSerialization?: boolean;\n\n  /**\n   * Manually inject the store state into ssrContext.state\n   * @default false\n   */\n  manualStoreSsrContextInjection?: boolean;\n\n  /**\n   * Manually handle the store hydration instead of letting Quasar CLI do it.\n   *\n   * For Pinia: store.state.value = window.__INITIAL_STATE__\n   *\n   * @default false\n   */\n  manualStoreHydration?: boolean;\n\n  /**\n   * Manually call $q.onSSRHydrated() instead of letting Quasar CLI do it.\n   * This announces that client-side code should takeover.\n   * @default false\n   */\n  manualPostHydrationTrigger?: boolean;\n\n  /**\n   * The default port (3000) that the production server should use\n   * (gets superseded if process.env.PORT is specified at runtime)\n   * @default 3000\n   */\n  prodPort?: number;\n\n  /**\n   * List of middleware files in src-ssr/middlewares\n   * Order is important.\n   */\n  middlewares?: string[];\n\n  /**\n   * Add/remove/change properties of production generated package.json\n   */\n  extendPackageJson?: (pkg: { [index in string]: any }) => void;\n\n  /**\n   * Extend the Esbuild config that is used for the SSR webserver\n   * (which includes the SSR middlewares)\n   */\n  extendSSRWebserverConf?: (config: EsbuildConfiguration) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Axios in Vue Composition API with Quasar\nDESCRIPTION: Demonstrates how to use the configured Axios API instance within a Vue component's setup function. Includes error handling with Quasar's Notify plugin to display user-friendly error messages.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/ajax-requests.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\nimport { api } from 'boot/axios'\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n  const data = ref(null)\n\n  function loadData () {\n    api.get('/api/backend')\n      .then((response) => {\n        data.value = response.data\n      })\n      .catch(() => {\n        $q.notify({\n          color: 'negative',\n          position: 'top',\n          message: 'Loading failed',\n          icon: 'report_problem'\n        })\n      })\n  }\n\n  return { data, loadData }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Camera API with Capacitor in Vue Component\nDESCRIPTION: Implementation of Capacitor's Camera API in a Vue component for capturing and displaying images. Includes image quality and editing options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-btn color=\"primary\" label=\"Get Picture\" @click=\"captureImage\" />\n\n    <img :src=\"imageSrc\">\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { Camera, CameraResultType } from '@capacitor/camera'\n\nexport default {\n  setup () {\n    const imageSrc = ref('')\n\n    async function captureImage () {\n      const image = await Camera.getPhoto({\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Uri\n      })\n\n      imageSrc.value = image.webPath\n    }\n\n    return {\n      imageSrc,\n      captureImage\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Headers with Axios in Pinia Store\nDESCRIPTION: Shows how to handle authentication in a Pinia store by setting global authorization headers for all subsequent Axios requests after a successful login or registration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/ajax-requests.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { api } from 'boot/axios'\n\nexport const useAuthStore = defineStore('auth', {\n  actions: {\n    register (form) {\n      return api.post('/auth/register', form)\n        .then(response => {\n          api.defaults.headers.common['Authorization'] = 'Bearer ' + response.data.token\n          // do something with { token: response.data.token, user: response.data.user }\n        })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Imports with Promises\nDESCRIPTION: Demonstrates how to use dynamic imports with Promises to lazy load resources like JSON files on demand, with proper error handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./categories.json')\n  .then(categories => {\n    // hey, we have lazy loaded the file\n    // and we have its content in \"categories\"\n  })\n  .catch(() => {\n    // oops, something went wrong...\n    // couldn't load the resource\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Store with Pinia\nDESCRIPTION: Creates a counter store implementation using Pinia. The store defines state (counter), getters (doubleCount), and actions (increment).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/state-management-with-pinia.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    counter: 0,\n  }),\n  getters: {\n    doubleCount: (state) => state.counter * 2,\n  },\n  actions: {\n    increment() {\n      this.counter++;\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Plugin in JavaScript\nDESCRIPTION: Shows how to import and use the Dialog plugin both outside and inside a Vue component using the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dialog } from 'quasar'\n(Object) Dialog.create({ ... })\n\n// inside of a Vue file\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n  $q.dialog({ ... }) // returns Object\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Guards with Vue Router and Pinia in Quasar\nDESCRIPTION: This snippet demonstrates how to use Vue Router's beforeEach guard to check authentication status using a Pinia store in a Quasar application. It redirects unauthenticated users trying to access protected routes to a signin page while preserving the originally requested path in the query parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/routing.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ({ store /*, ssrContext */ }) {\n  // ...\n  const userStore = useUserStore(store)\n\n  Router.beforeEach((to, from, next) => {\n    if (to.matched.some(record => record.meta.requiresAuth) && !userStore.isSignedIn) {\n      next({ name: 'account-signin', query: { next: to.fullPath } })\n    } else {\n      next()\n    }\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Router Integration with QItem Component\nDESCRIPTION: Demonstrates how to connect QItem components with Vue Router using the router-link properties for navigation. Shows basic implementation with an inbox menu item.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/list-and-list-items.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-item to=\"/inbox\" exact>\n  <q-item-section avatar>\n    <q-icon name=\"inbox\" />\n  </q-item-section>\n\n  <q-item-section>\n    Inbox\n  </q-item-section>\n</q-item>\n```\n\n----------------------------------------\n\nTITLE: Anatomy of the ssrContext Object in Quasar SSR\nDESCRIPTION: Provides a detailed breakdown of the properties available in the ssrContext object, including Express.js request and response objects, Quasar's $q object, nonce attribute, and rendering callbacks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-context.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nssrContext: {\n  req,        // Express.js object\n  res,        // Express.js object\n  $q,         // The Quasar's $q Object\n\n  nonce,      // (optional to set it yourself)\n              // The global \"nonce\" attribute to use\n\n  onRendered, // Registers a function to be executed server-side after\n              // app has been rendered with Vue. You might need this\n              // to access ssrContext again after it has been fully processed.\n              // Example: ssrContext.onRendered(() => { /* ... */ })\n\n  rendered    // (optional to set it yourself)\n              // Set this to a function which will be executed server-side\n              // after the app has been rendered with Vue.\n              // We recommend using the \"onRendered\" instead.\n              //\n              // Purpose: backward compatibility with Vue ecosystem packages\n              // (like @vue/apollo-ssr)\n              // Example: ssrContext.rendered = () => { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of QTabPanels in Vue\nDESCRIPTION: Demonstrates the basic implementation of QTabPanels component. This example shows how to create a simple tab panel structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Main Process for Preload Script in Quasar\nDESCRIPTION: This snippet shows how to configure the Electron main process to use a preload script in a Quasar project. It demonstrates importing necessary modules and setting up the BrowserWindow with the correct preload script path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add this at the top:\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst currentDir = fileURLToPath(new URL('.', import.meta.url))\n// ...\n\nfunction createWindow () {\n  // ...\n  mainWindow = new BrowserWindow({\n    // ...\n    webPreferences: {\n      // HERE IS THE MAGIC:\n      preload: path.resolve(\n        currentDir,\n        path.join(process.env.QUASAR_ELECTRON_PRELOAD_FOLDER, 'electron-preload' + process.env.QUASAR_ELECTRON_PRELOAD_EXTENSION)\n      )\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR with PWA in Quasar Configuration File\nDESCRIPTION: This snippet demonstrates how to enable Progressive Web App (PWA) functionality for a server-side rendered Quasar application by setting the appropriate configuration in the quasar.config file. Setting 'pwa: true' within the 'ssr' object enables the PWA client takeover after the initial SSR-rendered page load.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-with-pwa.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  ssr: {\n    pwa: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Vue Components with defineAsyncComponent\nDESCRIPTION: Shows how to lazy load components using Vue's defineAsyncComponent and dynamic imports, creating separate chunks that are loaded only when the component is needed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport { defineAsyncComponent } from 'vue'\nexport default {\n  components: {\n    SomeComponent: defineAsyncComponent(() => import('components/SomeComponent')),\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Quasar Build Configuration TypeScript Interface\nDESCRIPTION: Comprehensive TypeScript interface definition for Quasar build configuration options. Includes target configurations, Vite extensions, Vue plugin options, TypeScript settings, and various build process hooks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/** Build configuration options. */\nbuild?: QuasarBuildConfiguration;\n\nimport { Plugin, UserConfig as ViteUserConfig } from \"vite\";\nimport { Options as VuePluginOptions } from \"@vitejs/plugin-vue\"\n\ninterface InvokeParams {\n  isClient: boolean;\n  isServer: boolean;\n}\n\ninterface BuildTargetOptions {\n  /**\n   * @default ['es2022', 'firefox115', 'chrome115', 'safari14']\n   */\n  browser?: string[];\n  /**\n   * @example 'node20'\n   */\n  node?: string;\n}\n\ninterface PluginEntryRunOptions {\n  server?: boolean;\n  client?: boolean;\n}\n\ntype PluginEntry =\n  | [pluginName: string, options?: any, runOptions?: PluginEntryRunOptions]\n  | [pluginFactory: (options?: any) => Plugin, options?: any, runOptions?: PluginEntryRunOptions]\n  | Plugin\n  | null\n  | undefined\n  | false;\n\ninterface QuasarBuildConfiguration {\n  /**\n   * @example\n   * {\n   *   browser: ['es2022', 'firefox115', 'chrome115', 'safari14'],\n   *   node: 'node20'\n   * }\n   */\n  target?: BuildTargetOptions;\n  /**\n   * Extend Vite config generated by Quasar CLI.\n   *\n   * You can either return overrides or directly modify the config object.\n   *\n   * @example\n   * ```js\n   * // return overrides\n   * extendViteConf: (config) => ({\n   *   optimizeDeps: {\n   *     include: ['some-package']\n   *   }\n   * })\n   * ```\n   *\n   * @example\n   * ```js\n   * // directly modify the config object\n   * import { mergeConfig } from 'vite'\n   * // ...\n   * extendViteConf(config) {\n   *   config.optimizeDeps = mergeConfig(config.optimizeDeps, {\n   *     include: ['some-package']\n   *   }, false)\n   * }\n   * ```\n   */\n  extendViteConf?: (\n    config: ViteUserConfig,\n    invokeParams: InvokeParams\n  ) => ViteUserConfig | void;\n  /**\n   * Options to supply to @vitejs/plugin-vue\n   *\n   * @see https://v2.quasar.dev/quasar-cli-vite/handling-vite#vite-vue-plugin-options\n   */\n  viteVuePluginOptions?: VuePluginOptions;\n  /**\n   * Vite plugins\n   *\n   * @see https://v2.quasar.dev/quasar-cli-vite/handling-vite#adding-vite-plugins\n   *\n   * @example\n   * // ESM\n   * import { somePlugin } from 'some-plugin'\n   * // ...\n   * [\n   *   [ 'some-plugin', { ...pluginOptions... } ],\n   *\n   *   // disable running on client or server threads (set server/client to false):\n   *   [ 'some-plugin', { ...pluginOptions... }, { server: true, client: true } ],\n   *\n   *   [ somePlugin, { ...pluginOptions... } ],\n   *\n   *   // disable running on client or server threads (set server/client to false):\n   *   [ somePlugin, { ...pluginOptions... }, { server: true, client: true } ],\n   *\n   *   somePlugin({ ...pluginOptions... })\n   * ]\n   *\n   * @example\n   * // CJS\n   * [\n   *   [ 'some-plugin', { ...pluginOptions... } ],\n   *\n   *   // disable running on client or server threads (set server/client to false):\n   *   [ 'some-plugin', { ...pluginOptions... }, { server: true, client: true } ],\n   *\n   *   [ require('some-plugin'), { ...pluginOptions... } ],\n   *\n   *   // disable running on client or server threads (set server/client to false):\n   *   [ require('some-plugin'), { ...pluginOptions... }, { server: true, client: true } ],\n   *\n   *   require('some-plugin')({ ...pluginOptions... })\n   * ]\n   */\n  vitePlugins?: PluginEntry[];\n  /**\n   * @see https://v2.quasar.dev/quasar-cli-vite/handling-vite#folder-aliases\n   *\n   * @example\n   * {\n   *   // import { ... } from 'locales/...'\n   *   locales: path.join(__dirname, 'src/locales')\n   * }\n   */\n  alias?: { [key: string]: string };\n  /**\n   * Configuration for TypeScript integration.\n   */\n  typescript?: {\n    /**\n     * Once your codebase is fully using TypeScript and all team members are comfortable with it,\n     * you can set this to `true` to enforce stricter type checking.\n     * It is recommended to set this to `true` and use stricter typescript-eslint rules.\n     *\n     * It will set the following TypeScript options:\n     * - \"strict\": true\n     * - \"allowUnreachableCode\": false\n     * - \"allowUnusedLabels\": false\n     * - \"noImplicitOverride\": true\n     * - \"exactOptionalPropertyTypes\": true\n     * - \"noUncheckedIndexedAccess\": true\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#getting-stricter-checks\n     */\n    strict?: boolean;\n\n    /**\n     * Extend the generated `.quasar/tsconfig.json` file.\n     *\n     * If you don't have dynamic logic, you can directly modify your `tsconfig.json` file instead.\n     */\n    extendTsConfig?: (tsConfig: TSConfig) => void;\n\n    /**\n     * Generate a shim file for `*.vue` files to process them as plain Vue component instances.\n     *\n     * Vue Language Tools VS Code extension can analyze `*.vue` files in a better way, without the shim file.\n     * So, you can disable the shim file generation and let the extension handle the types.\n     *\n     * However, some tools like ESLint can't work with `*.vue` files without the shim file.\n     * So, if your tooling is not properly working, enable this option.\n     */\n    vueShim?: boolean;\n  };\n  /**\n   * Public path of your app.\n   * Use it when your public path is something else,\n   * like _\"<protocol>://<domain>/some/nested/folder\"_ – in this case,\n   * it means the distributables are in _\"some/nested/folder\"_ on your webserver.\n   *\n   * @default '/'\n   */\n  publicPath?: string;\n  /**\n   * Sets [Vue Router mode](https://router.vuejs.org/guide/essentials/history-mode.html).\n   * History mode requires configuration on your deployment web server too.\n   *\n   * @default 'hash'\n   */\n  vueRouterMode?: \"hash\" | \"history\";\n  /**\n   * Sets Vue Router base.\n   * Should not need to configure this, unless absolutely needed.\n   */\n  vueRouterBase?: string;\n  /**\n   * Automatically open remote Vue Devtools when running in development mode.\n   */\n  vueDevtools?: boolean;\n  /**\n   * Should the Vue Options API be available? If all your components only use Composition API\n   * it would make sense performance-wise to disable Vue Options API for a compile speedup.\n   *\n   * @default true\n   */\n  vueOptionsAPI?: boolean;\n  /**\n   * Do you want to analyze the production bundles?\n   * Generates and opens an HTML report.\n   *\n   * @default false\n   */\n  analyze?: boolean;\n  /**\n   * Folder where Quasar CLI should generate the distributables.\n   * Relative path to project root directory.\n   *\n   * @default 'dist/{ctx.modeName}' For all modes except Cordova.\n   * @default 'src-cordova/www' For Cordova mode.\n   */\n  distDir?: string;\n\n  /**\n   * Add properties to `process.env` that you can use in your website/app JS code.\n   *\n   * @see https://v2.quasar.dev/quasar-cli-vite/handling-process-env\n   *\n   * @example { SOMETHING: 'someValue' }\n   */\n  env?: { [index: string]: string | boolean | undefined | null };\n  /**\n   * Defines constants that get replaced in your app.\n   * Unlike `env`, you will need to use JSON.stringify() on the values yourself except for booleans.\n   * Also, these will not be prefixed with `process.env.`.\n   *\n   * @example { SOMETHING: JSON.stringify('someValue') } -> console.log(SOMETHING) // console.log('someValue')\n   */\n  rawDefine?: { [index: string]: string | boolean | undefined | null };\n  /**\n   * Folder where Quasar CLI should look for .env* files.\n   * Can be an absolute path or a relative path to project root directory.\n   *\n   * @default project root directory\n   */\n  envFolder?: string;\n  /**\n   * Additional .env* files to be loaded.\n   * Each entry can be an absolute path or a relative path to quasar.config > build > envFolder.\n   *\n   * @example ['.env.somefile', '../.env.someotherfile']\n   */\n  envFiles?: string[];\n\n  /**\n   * Build production assets with or without the hash part in filenames.\n   * Example: \"454d87bd\" in \"assets/index.454d87bd.js\"\n   *\n   * When used, please be careful how you configure your web server cache strategy as\n   * files will not change name so your client might get 304 (Not Modified) even when\n   * it's not the case.\n   *\n   * Will not change anything if your Vite config already touches the\n   * build.rollupOptions.output.entryFileNames/chunkFileNames/assetFileNames props.\n   *\n   * Gets applied to production builds only.\n   *\n   * Useful especially for (but not restricted to) PWA. If set to false then updating the\n   * PWA will force to re-download all assets again, regardless if they were changed or\n   * not (due to how Rollup works through Vite).\n   *\n   * @default true\n   */\n  useFilenameHashes?: boolean;\n\n  /**\n   * whether to inject module preload polyfill.\n   * @default false\n   */\n  polyfillModulePreload?: boolean;\n  /**\n   * Ignores the public folder.\n   * @default false\n   */\n  ignorePublicFolder?: boolean;\n\n  /**\n   * Prepare external services before `$ quasar dev` command runs\n   * like starting some backend or any other service that the app relies on.\n   * Can use async/await or directly return a Promise.\n   */\n  beforeDev?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook after Quasar dev server is started (`$ quasar dev`).\n   * At this point, the dev server has been started and is available should you wish to do something with it.\n   * Can use async/await or directly return a Promise.\n   */\n  afterDev?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook before Quasar builds app for production (`$ quasar build`).\n   * At this point, the distributables folder hasn't been created yet.\n   * Can use async/await or directly return a Promise.\n   */\n  beforeBuild?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook after Quasar built app for production (`$ quasar build`).\n   * At this point, the distributables folder has been created and is available\n   *  should you wish to do something with it.\n   * Can use async/await or directly return a Promise.\n   */\n  afterBuild?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook if publishing was requested (`$ quasar build -P`),\n   *  after Quasar built app for production and the afterBuild hook (if specified) was executed.\n   * Can use async/await or directly return a Promise.\n   */\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Navigation in QTable with Vue\nDESCRIPTION: Demonstrates how to add keyboard navigation functionality to a QTable component, allowing users to navigate through rows using arrow keys, PageUp, PageDown, Home, and End.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Keyboard navigation\" file=\"KeyboardNavigation\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Electron Mode to Quasar Project\nDESCRIPTION: Command to add Electron mode to a Quasar project. This installs necessary Electron packages and creates the /src-electron folder structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add electron\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Guard with Vue Router in Quasar\nDESCRIPTION: Example of setting up router navigation guards using Pinia store for authentication checking. Demonstrates how to protect routes that require authentication by redirecting unauthorized users to the signin page.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/routing.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\n\nexport default defineRouter(({ store /*, ssrContext */ }) => {\n  // ...\n  const userStore = useUserStore(store);\n\n  Router.beforeEach((to, from, next) => {\n    if (to.matched.some(record => record.meta.requiresAuth) && !userStore.isSignedIn) {\n      next({ name: 'account-signin', query: { next: to.fullPath } })\n    } else {\n      next()\n    }\n  })\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring QTable Columns in Vue.js\nDESCRIPTION: Demonstrates how to configure columns for QTable component with detailed options including sorting, formatting, styling and alignment. Shows proper column definition structure with required and optional properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolumns: [ // array of Objects\n  {\n    name: 'desc',\n    label: 'Dessert (100g serving)',\n    field: 'name',\n    required: true,\n    align: 'left',\n    sortable: true,\n    sort: (a, b, rowA, rowB) => parseInt(a, 10) - parseInt(b, 10),\n    rawSort: (a, b, rowA, rowB) => parseInt(a, 10) - parseInt(b, 10),\n    sortOrder: 'ad',\n    format: (val, row) => `${val}%`,\n    style: 'width: 500px',\n    classes: 'my-special-class',\n    headerStyle: 'width: 500px',\n    headerClasses: 'my-special-class'\n  },\n  { name: 'calories', label: 'Calories', field: 'calories', sortable: true },\n  { name: 'fat', label: 'Fat (g)', field: 'fat', sortable: true },\n  { name: 'carbs', label: 'Carbs (g)', field: 'carbs' },\n  { name: 'protein', label: 'Protein (g)', field: 'protein' },\n  { name: 'sodium', label: 'Sodium (mg)', field: 'sodium' },\n  { name: 'calcium', label: 'Calcium (%)', field: 'calcium', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) },\n  { name: 'iron', label: 'Iron (%)', field: 'iron', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) }\n]\n```\n\n----------------------------------------\n\nTITLE: Using openURL Function in Quasar\nDESCRIPTION: Demonstrates how to use the openURL utility to handle opening URLs across different platforms (browser, Cordova, Electron). It takes care of platform-specific quirks and provides rejection handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openURL } from 'quasar'\n\nopenURL('http://...')\n\n// full syntax:\nopenURL(\n  String url,\n  Function rejectFn, // optional; gets called if window cannot be opened\n  Object windowFeatures // optional requested features for the new window\n)\n```\n\n----------------------------------------\n\nTITLE: Basic QInput with Mask Example\nDESCRIPTION: Example showing how to implement a basic QInput component with masking functionality\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/input.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-input\n  filled\n  v-model=\"price\"\n  label=\"Price with 2 decimals\"\n  mask=\"#.##\"\n  fill-mask=\"#\"\n  reverse-fill-mask\n  hint=\"Mask: #.00\"\n  input-class=\"text-right\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar Global CLI\nDESCRIPTION: Commands to install the Quasar global CLI tool using different package managers. The global CLI enables additional features like running Quasar commands directly in terminal and local http server testing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quick-start.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add @quasar/cli\n$ npm i -g @quasar/cli\n$ pnpm add -g @quasar/cli\n# experimental support\n$ bun install -g @quasar/cli\n```\n\n----------------------------------------\n\nTITLE: BEX Bridge Messaging Examples\nDESCRIPTION: This comprehensive snippet showcases various ways to use the BEX bridge for messaging between different parts of the extension. It includes examples of listening for messages, sending messages, handling responses, and broadcasting messages.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen to a message from the client\nbridge.on('test', message => {\n  console.log(message)\n  console.log(message.payload)\n  console.log(message.from)\n})\n\n// Send a message and split payload into chunks\nbridge.send({\n  event: 'test',\n  to: 'app',\n  payload: [ 'chunk1', 'chunk2', 'chunk3', ... ]\n}).then(responsePayload => { ... }).catch(err => { ... })\n\n// Send a message and wait for a response\nbridge.send({\n  event: 'test',\n  to: 'background',\n  payload: { banner: 'Hello from content-script' }\n}).then(responsePayload => { ... }).catch(err => { ... })\n\n// Listen to a message from the client and respond synchronously\nbridge.on('test', message => {\n  console.log(message)\n  return { banner: 'Hello from a content-script!' }\n})\n\n// Listen to a message from the client and respond asynchronously\nbridge.on('test', async message => {\n  console.log(message)\n  const result = await someAsyncFunction()\n  return result\n})\nbridge.on('test', message => {\n  console.log(message)\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({ banner: 'Hello from a content-script!' })\n    }, 1000)\n  })\n})\n\n// Broadcast a message to app & content scripts\nbridge.portList.forEach(portName => {\n  bridge.send({ event: 'test', to: portName, payload: 'Hello from background!' })\n})\n\n// Find any connected content script and send a message to it\nconst contentPort = bridge.portList.find(portName => portName.startsWith('content@'))\nif (contentPort) {\n  bridge.send({ event: 'test', to: contentPort, payload: 'Hello from background!' })\n}\n\n// Send a message to a certain content script\nbridge\n  .send({ event: 'test', to: 'content@my-content-script-2345', payload: 'Hello from a content-script!' })\n  .then(responsePayload => { ... })\n  .catch(err => { ... })\n\n// Listen for connection events\nbridge.on('@quasar:ports', ({ portList, added, removed }) => {\n  console.log('Ports:', portList)\n  if (added) {\n    console.log('New connection:', added)\n  } else if (removed) {\n    console.log('Connection removed:', removed)\n  }\n})\n\n// Current bridge port name\nconsole.log(bridge.portName)\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-side Pagination, Filtering, and Sorting in QTable with Vue\nDESCRIPTION: Demonstrates how to set up server-side pagination, filtering, and sorting for a QTable component, including handling the @request event and loading state.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Synchronizing with server\" file=\"Synchronizing\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Function in JavaScript with Quasar\nDESCRIPTION: Demonstrates how to use the debounce function from Quasar to limit the rate at which a function can fire. It includes examples of using debounce with event listeners and as a method in a Vue component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { debounce } from 'quasar'\n\n(Debounced Function) debounce(Function fn, Number milliseconds_to_wait, Boolean immediate)\n\n// Example:\nwindow.addEventListener(\n  'resize',\n  debounce(function() {\n    // .... things to do ...\n  }, 300 /*ms to wait*/)\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmethods: {\n  myMethod () { .... }\n},\n\ncreated () {\n  this.myMethod = debounce(this.myMethod, 500)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Geolocation with Capacitor in Vue Component\nDESCRIPTION: Example of using Capacitor's Geolocation API to track device position in a Vue component. Demonstrates position monitoring setup, cleanup, and real-time updates.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    GPS position: <strong>{{ position }}</strong>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount } from 'vue'\nimport { Geolocation } from '@capacitor/geolocation'\n\nexport default {\n  setup () {\n    const position = ref('determining...')\n\n    function getCurrentPosition() {\n      Geolocation.getCurrentPosition().then(newPosition => {\n        console.log('Current', newPosition)\n        position.value = newPosition\n      })\n    }\n\n    let geoId\n\n    onMounted(() => {\n      getCurrentPosition()\n\n      // we start listening\n      geoId = Geolocation.watchPosition({}, (newPosition, err) => {\n        console.log('New GPS position')\n        position.value = newPosition\n      })\n    })\n\n    onBeforeUnmount(() => {\n      // we do cleanup\n      Geolocation.clearWatch(geoId)\n    })\n\n    return {\n      position\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Store with Pinia\nDESCRIPTION: Example implementation of a counter store using Pinia, demonstrating state, getters, and actions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/state-management-with-pinia.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    counter: 0,\n  }),\n  getters: {\n    doubleCount: (state) => state.counter * 2,\n  },\n  actions: {\n    increment() {\n      this.counter++;\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Transitions in Quasar Menu Component\nDESCRIPTION: An example showing how to implement transition effects on a Quasar Menu component using the transition-show and transition-hide props. This specifies jump-down animation when opening and jump-up animation when closing the menu.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/transitions/transitions.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-menu\n  transition-show=\"jump-down\"\n  transition-hide=\"jump-up\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring vue-i18n in Quasar Boot Files\nDESCRIPTION: Setting up vue-i18n internationalization in a Quasar boot file and making it available to the application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport { createI18n } from 'vue-i18n'\nimport messages from 'src/i18n'\n\nexport default defineBoot(({ app }) => {\n  // Create I18n instance\n  const i18n = createI18n({\n    locale: 'en-US',\n    messages\n  })\n\n  // Tell app to use the I18n instance\n  app.use(i18n)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options in Quasar.config\nDESCRIPTION: Detailed configuration object for Quasar Framework's build process. Includes options for webpack transpilation, ESBuild targets, hooks, Vue Router settings, TypeScript configuration, and various build optimizations like minification and RTL support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  /**\n   * Transpile JS code with Babel\n   *\n   * @default true\n   */\n  webpackTranspile?: boolean;\n  /**\n   * Add dependencies for transpiling with Babel (from node_modules, which are by default not transpiled).\n   * It is ignored if \"transpile\" is not set to true.\n   * @example [ /my-dependency/, 'my-dep', ...]\n   */\n  webpackTranspileDependencies?: (RegExp | string)[];\n  /**\n   * Esbuild is used to build contents of /src-pwa, /src-ssr, /src-electron, /src-bex\n   * @example\n   *    {\n   *      browser: ['es2022', 'firefox115', 'chrome115', 'safari14'],\n   *      node: 'node20'\n   *    }\n   */\n  esbuildTarget?: EsbuildTargetOptions;\n\n  /**\n   * Extend Webpack config generated by Quasar CLI.\n   * Equivalent to chainWebpack(), but you have direct access to the Webpack config object.\n   */\n  extendWebpack?: (\n    config: WebpackConfiguration,\n    invokeParams: InvokeParams\n  ) => void;\n  /**\n   * Extend Webpack config generated by Quasar CLI.\n   * Equivalent to extendWebpack(), but using [webpack-chain](https://github.com/sorrycc/webpack-chain) instead.\n   */\n  chainWebpack?: (chain: WebpackChain, invokeParams: InvokeParams) => void;\n\n  /**\n   * Prepare external services before `$ quasar dev` command runs\n   * like starting some backend or any other service that the app relies on.\n   * Can use async/await or directly return a Promise.\n   */\n  beforeDev?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook after Quasar dev server is started (`$ quasar dev`).\n   * At this point, the dev server has been started and is available should you wish to do something with it.\n   * Can use async/await or directly return a Promise.\n   */\n  afterDev?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook before Quasar builds app for production (`$ quasar build`).\n   * At this point, the distributables folder hasn't been created yet.\n   * Can use async/await or directly return a Promise.\n   */\n  beforeBuild?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook after Quasar built app for production (`$ quasar build`).\n   * At this point, the distributables folder has been created and is available\n   *  should you wish to do something with it.\n   * Can use async/await or directly return a Promise.\n   */\n  afterBuild?: (params: QuasarHookParams) => void;\n  /**\n   * Run hook if publishing was requested (`$ quasar build -P`),\n   *  after Quasar built app for production and the afterBuild hook (if specified) was executed.\n   * Can use async/await or directly return a Promise.\n   * `opts` is Object of form `{arg, distDir}`,\n   * where \"arg\" is the argument supplied (if any) to -P parameter.\n   */\n  onPublish?: (ops: { arg: string; distDir: string }) => void;\n\n  /**\n   * Public path of your app.\n   * Use it when your public path is something else,\n   * like _\"<protocol>://<domain>/some/nested/folder\"_ – in this case,\n   * it means the distributables are in _\"some/nested/folder\"_ on your webserver.\n   *\n   * @default '/'\n   */\n  publicPath?: string;\n  /**\n   * @default 'index.html'\n   */\n  htmlFilename?: string;\n  /**\n   * Folder where Quasar CLI should generate the distributables.\n   * Relative path to project root directory.\n   *\n   * @default 'dist/{ctx.modeName}' For all modes except Cordova.\n   * @default 'src-cordova/www' For Cordova mode.\n   */\n  distDir?: string;\n  /**\n   * Ignores the public folder.\n   */\n  ignorePublicFolder?: boolean;\n\n  /**\n   * Sets [Vue Router mode](https://router.vuejs.org/guide/essentials/history-mode.html).\n   * History mode requires configuration on your deployment web server too.\n   *\n   * @default 'hash'\n   */\n  vueRouterMode?: \"hash\" | \"history\";\n  /**\n   * Sets Vue Router base.\n   * Should not need to configure this, unless absolutely needed.\n   */\n  vueRouterBase?: string;\n  /** Include vue runtime + compiler version, instead of default Vue runtime-only. */\n  vueCompiler?: boolean;\n  /**\n   * Automatically open remote Vue Devtools when running in development mode.\n   */\n  vueDevtools?: boolean;\n  /**\n   * Should the Vue Options API be available? If all your components only use Composition API\n   * it would make sense performance-wise to disable Vue Options API for a compile speedup.\n   *\n   * @default true\n   */\n  vueOptionsAPI?: boolean;\n\n  /** Show a progress bar while compiling with Webpack. */\n  webpackShowProgress?: boolean;\n  /**\n   * Source map [strategy](https://webpack.js.org/configuration/devtool/) to use.\n   */\n  webpackDevtool?: WebpackConfiguration[\"devtool\"];\n\n  /**\n   * @example\n   * {\n   *   // import { ... } from 'locales/...'\n   *   locales: path.join(__dirname, 'src/locales')\n   * }\n   */\n  alias?: { [key: string]: string };\n  /**\n   * Configuration for TypeScript integration.\n   */\n  typescript?: {\n    /**\n     * Once your codebase is fully using TypeScript and all team members are comfortable with it,\n     * you can set this to `true` to enforce stricter type checking.\n     * It is recommended to set this to `true` and use stricter typescript-eslint rules.\n     *\n     * It will set the following TypeScript options:\n     * - \"strict\": true\n     * - \"allowUnreachableCode\": false\n     * - \"allowUnusedLabels\": false\n     * - \"noImplicitOverride\": true\n     * - \"exactOptionalPropertyTypes\": true\n     * - \"noUncheckedIndexedAccess\": true\n     *\n     * @see https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#getting-stricter-checks\n     */\n    strict?: boolean;\n\n    /**\n     * Extend the generated `.quasar/tsconfig.json` file.\n     *\n     * If you don't have dynamic logic, you can directly modify your `tsconfig.json` file instead.\n     */\n    extendTsConfig?: (tsConfig: TSConfig) => void;\n\n    /**\n     * Generate a shim file for `*.vue` files to process them as plain Vue component instances.\n     *\n     * Vue Language Tools VS Code extension can analyze `*.vue` files in a better way, without the shim file.\n     * So, you can disable the shim file generation and let the extension handle the types.\n     *\n     * However, some tools like ESLint can't work with `*.vue` files without the shim file.\n     * So, if your tooling is not properly working, enable this option.\n     */\n    vueShim?: boolean;\n  };\n\n  /**\n   * Add properties to `process.env` that you can use in your website/app JS code.\n   *\n   * @example { SOMETHING: 'someValue' }\n   */\n  env?: { [index: string]: string | boolean | undefined | null };\n  /**\n   * Defines constants that get replaced in your app.\n   * Unlike `env`, you will need to use JSON.stringify() on the values yourself except for booleans.\n   * Also, these will not be prefixed with `process.env.`.\n   *\n   * @example { SOMETHING: JSON.stringify('someValue') } -> console.log(SOMETHING) // console.log('someValue')\n   */\n  rawDefine?: { [index: string]: string | boolean | undefined | null };\n  /**\n   * Folder where Quasar CLI should look for .env* files.\n   * Can be an absolute path or a relative path to project root directory.\n   *\n   * @default project root directory\n   */\n  envFolder?: string;\n  /**\n   * Additional .env* files to be loaded.\n   * Each entry can be an absolute path or a relative path to quasar.config > build > envFolder.\n   *\n   * @example ['.env.somefile', '../.env.someotherfile']\n   */\n  envFiles?: string[];\n\n  /**\n   * Gzip the distributables.\n   * Could be either a boolean or compression plugin options object.\n   * In addition, you can specify which file extension you want to\n   * gzip with extension array field in replacement of compression plugin test option.\n   * By default it's ['js','css'].\n   * @example\n   *    {\n   *      extension: ['js','css','svg'],\n   *      threshold: 0,\n   *      minRatio: 1\n   *    }\n   * @default false\n   */\n  gzip?:\n    | boolean\n    | (DefinedDefaultAlgorithmAndOptions<any> & {\n        extensions: string[];\n      });\n  /**\n   * Show analysis of build bundle with webpack-bundle-analyzer.\n   * When providing an object, it represents webpack-bundle-analyzer config options.\n   */\n  analyze?: boolean | BundleAnalyzerPlugin.Options;\n\n  /**\n   * Minification options. [Full list](https://github.com/webpack-contrib/terser-webpack-plugin/#minify).\n   */\n  uglifyOptions?: TerserOptions;\n  /** Options to supply to `sass-loader` for `.scss` files. */\n  scssLoaderOptions?: object;\n  /** Options to supply to `sass-loader` for [`.sass`](https://github.com/webpack-contrib/sass-loader#sassoptions) files. */\n  sassLoaderOptions?: object;\n  /** Options to supply to `stylus-loader`. */\n  stylusLoaderOptions?: object;\n  /** Options to supply to `less-loader`. */\n  lessLoaderOptions?: object;\n  /** Options to supply to `vue-loader` */\n  vueLoaderOptions?: object;\n  /** Options to supply to `ts-loader` */\n  tsLoaderOptions?: object;\n  /**\n   * RTL options. [Full list](https://github.com/vkalinichev/postcss-rtl).\n   * When providing an object, it is the configuration for postcss-rtl plugin, and if fromRTL is present it will only be used for client styles\n   * When providing a function, the function will receive a boolean that is true for client side styles and false otherwise and the path to the style file\n   *\n   */\n  rtl?:\n    | boolean\n    | object\n    | ((isClientCSS: boolean, resourcePath: string) => object);\n\n  /**\n   * Set to `false` to disable minification, or specify the minifier to use.\n   * Available options are 'terser' or 'esbuild'.\n   * If set to anything but boolean false then it also applies to CSS.\n   * For production only.\n   * @default 'esbuild'\n   */\n  minify?: boolean | 'terser' | 'esbuild';\n  /**\n   * Minification options for html-minifier-terser: https://github.com/terser/html-minifier-terser?tab=readme-ov-file#options-quick-reference\n   * @default\n   *  {\n   *    removeComments: true,\n   *    collapseWhitespace: true,\n   *    removeAttributeQuotes: true,\n   *    collapseBooleanAttributes: true,\n   *    removeScriptTypeAttributes: true\n   *  }\n   */\n  htmlMinifyOptions?: HtmlMinifierOptions;\n```\n\n----------------------------------------\n\nTITLE: Production Build Examples\nDESCRIPTION: Examples of building Quasar applications for different platforms and modes including SPA, SSR, PWA, BEX, Cordova, and Electron.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Build a SPA for production\n$ quasar build\n# ...or\n$ quasar build -m spa\n\n# Build a SSR for production\n$ quasar build -m ssr\n\n# Build a PWA for production\n$ quasar build -m pwa\n\n# Build a BEX for production\n$ quasar build -m bex -T [chrome|firefox]\n\n# Build a Mobile App (through Cordova)\n$ quasar build -m cordova -T [android|ios]\n# or the short form:\n$ quasar build -m [android|ios]\n\n# Build an Electron App for production\n$ quasar build -m electron\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar build -m ios -- some params --and options --here\n# when on Windows and using Powershell:\n$ quasar build -m ios '--' some params --and options --here\n\n# Create a production build with ability to debug it\n# (has source-maps and code is NOT minified)\n$ quasar build -d [-m <mode>]\n```\n\n----------------------------------------\n\nTITLE: Axios Boot File with Named Exports\nDESCRIPTION: Complete example of an Axios boot file with named exports for use in other files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrapper'\nimport axios from 'axios'\n\n// We create our own axios instance and set a custom base URL.\n// Note that if we wouldn't set any config here we do not need\n// a named export, as we could just `import axios from 'axios'`\nconst api = axios.create({\n  baseURL: 'https://api.example.com'\n})\n\n// for use inside Vue files through this.$axios and this.$api\n// (only in Vue Options API form)\nexport default defineBoot(({ app }) => {\n  app.config.globalProperties.$axios = axios\n  app.config.globalProperties.$api = api\n})\n\n// Here we define a named export\n// that we can later use inside .js files:\nexport { axios, api }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Icon Library in Quasar Config\nDESCRIPTION: Shows how to add Material Icons to a Quasar application by editing the quasar.config file and configuring the extras array.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/installing-icon-libraries.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nextras: [\n  'material-icons'\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Analytics Event Tracking Module - JavaScript\nDESCRIPTION: Module that provides functions for logging events and page views to Google Analytics through Google Tag Manager's dataLayer. Handles tracking of custom events and screen views with optional session ID support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logEvent(category, action, label, sessionId = null) {\n    window.dataLayer.push({\n      appEventCategory: category,\n      appEventAction: action,\n      appEventLabel: label,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appEvent' })\n  },\n\n  logPage(path, name, sessionId = null) {\n    window.dataLayer.push({\n      screenPath: path,\n      screenName: name,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appScreenView' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta Plugin with Composition API in Vue\nDESCRIPTION: Example showing how to use the useMeta composable to manage meta tags, page titles, DOM attributes, and script/style tags using Composition API. Demonstrates comprehensive meta configuration including Open Graph tags and JSON-LD.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/meta.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMeta } from 'quasar'\n\nconst metaData = {\n  title: 'Index Page',\n  titleTemplate: title => `${title} - My Website`,\n\n  meta: {\n    description: { name: 'description', content: 'Page 1' },\n    keywords: { name: 'keywords', content: 'Quasar website' },\n    equiv: { 'http-equiv': 'Content-Type', content: 'text/html; charset=UTF-8' },\n    ogTitle:  {\n      property: 'og:title',\n      template (ogTitle) {\n        return `${ogTitle} - My Website`\n      }\n    }\n  },\n\n  link: {\n    material: { rel: 'stylesheet', href: 'https://fonts.googleapis.com/icon?family=Material+Icons' }\n  },\n\n  script: {\n    ldJson: {\n      type: 'application/ld+json',\n      innerHTML: `{ \"@context\": \"http://schema.org\" }`\n    }\n  },\n\n  htmlAttr: {\n    'xmlns:cc': 'http://creativecommons.org/ns#',\n    empty: undefined\n  },\n\n  bodyAttr: {\n    'action-scope': 'xyz',\n    empty: undefined\n  },\n\n  noscript: {\n    default: 'This is content for browsers with no JS (or disabled JS)'\n  }\n}\n\nexport default {\n  setup () {\n    useMeta(metaData)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useQuasar Composable in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the useQuasar composable from Quasar and use it within the setup function to access the $q object.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-quasar.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vue-i18n in a Quasar Component\nDESCRIPTION: Example of a Vue component using vue-i18n for text interpolation, prop binding, and v-html directive with the Composition API for reactive translations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-page>\n    <!-- text interpolation, reactive -->\n    {{ $t('hello') }}\n\n    <!-- prop/attr binding, reactive -->\n    <q-btn :label=\"$t('hello')\" />\n\n    <!-- v-html directive usage -->\n    <span v-html=\"content\"></span>\n  </q-page>\n</template>\n\n<script setup>\nimport { computed } from 'vue'\nimport { useI18n } from 'vue-i18n'\n\nconst { t } = useI18n()\n\n// bound to a static variable, non-reactive\n// const staticContent = t('hello')\n// bound to a reactive variable, but one-time assignment, locale changes will not update the value\n// const reactiveStaticContent = ref(t('hello'))\n\n// bound to a reactive variable, locale changes will reflect the value\nconst content = computed(() => t('hello'))\n\nfunction notify() {\n  Notify.create({\n    type: 'positive',\n    message: t('hello')\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia Store in Quasar\nDESCRIPTION: Basic Pinia store initialization file that creates and configures the Pinia instance for a Quasar application. Supports both SSR and non-SSR modes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/state-management-with-pinia.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from '#q-app/wrappers'\nimport { createPinia } from 'pinia'\n\nexport default defineStore((/* { ssrContext } */) => {\n  const pinia = createPinia()\n\n  // You can add Pinia plugins here\n  // pinia.use(SomePiniaPlugin)\n\n  return pinia\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar QUploader Component\nDESCRIPTION: This snippet provides an example of how to extend Quasar's QUploader component to support custom upload services. It demonstrates the structure and required methods for creating a custom uploader component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createUploaderComponent } from 'quasar'\nimport { computed } from 'vue'\n\n// export a Vue component\nexport default createUploaderComponent({\n  // defining the QUploader plugin here\n\n  name: 'MyUploader', // your component's name\n\n  props: {\n    // ...your custom props\n  },\n\n  emits: [\n    // ...your custom events name list\n  ],\n\n  injectPlugin ({ props, emit, helpers }) {\n    // can call any other composables here\n    // as this function will run in the component's setup()\n\n    // [ REQUIRED! ]\n    // We're working on uploading files\n    const isUploading = computed(() => {\n      // return <Boolean>\n    })\n\n    // [ optional ]\n    // Shows overlay on top of the\n    // uploader signaling it's waiting\n    // on something (blocks all controls)\n    const isBusy = computed(() => {\n      // return <Boolean>\n    })\n\n    // [ REQUIRED! ]\n    // Abort and clean up any process\n    // that is in progress\n    function abort () {\n      // ...\n    }\n\n    // [ REQUIRED! ]\n    // Start the uploading process\n    function upload () {\n      // ...\n    }\n\n    return {\n      isUploading,\n      isBusy,\n\n      abort,\n      upload\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using $q Object with Vue Composition API and Script Setup\nDESCRIPTION: Demonstrates how to use the $q object in a Vue component using Composition API with script setup syntax. Shows platform detection and version access.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/the-q-object.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"$q.platform.is.ios\">\n      Gets rendered only on iOS platform.\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { useQuasar } from 'quasar'\n\nconst $q = useQuasar()\n\nconsole.log($q.platform.is.ios)\n\n// showing an example on a method, but\n// can be any part of Vue script\nfunction show () {\n  // prints out Quasar version\n  console.log($q.version)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Applications with CLI\nDESCRIPTION: Demonstrates how to use the Quasar CLI to build distributables for various modes including SPA, SSR, PWA, Cordova, Capacitor, Electron, and BEX. It shows different options and parameters for customizing the build process.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -h\n\n  Description\n    Builds distributables of your app.\n\n  Usage\n    $ quasar build\n    $ quasar build -p <port number>\n\n    $ quasar build -m ssr\n\n    # alias for \"quasar build -m cordova -T ios\"\n    $ quasar build -m ios\n\n    # alias for \"quasar build -m cordova -T android\"\n    $ quasar build -m android\n\n    # passing extra parameters and/or options to\n    # underlying \"cordova\" executable:\n    $ quasar build -m ios -- some params --and options --here\n    # when on Windows and using Powershell:\n    $ quasar build -m ios '--' some params --and options --here\n\n  Options\n    --mode, -m      App mode [spa|ssr|pwa|cordova|capacitor|electron|bex] (default: spa)\n    --target, -T    App target\n                      - Cordova (default: all installed)\n                        [android|ios]\n                      - Capacitor\n                        [android|ios]\n                      - Electron with default \"@electron/packager\" bundler (default: yours)\n                        [darwin|win32|linux|mas|all]\n                      - Electron with \"electron-builder\" bundler (default: yours)\n                        [darwin|mac|win32|win|linux|all]\n                      - Bex\n                        [chrome|firefox]\n    --publish, -P   Also trigger publishing hooks (if any are specified)\n                      - Has special meaning when building with Electron mode and using\n                        electron-builder as bundler\n    --debug, -d     Build for debugging purposes\n    --skip-pkg, -s  Build only UI (skips creating Cordova/Capacitor/Electron executables)\n                      - Cordova (it only fills in /src-cordova/www folder with the UI code)\n                      - Capacitor (it only fills in /src-capacitor/www folder with the UI code)\n                      - Electron (it only creates the /dist/electron/UnPackaged folder)\n    --help, -h      Displays this message\n\n    ONLY for Cordova and Capacitor mode:\n    --ide, -i       Open IDE (Android Studio / XCode) instead of finalizing with a\n                      terminal/console-only build\n\n    ONLY for Electron mode:\n    --bundler, -b   Bundler (@electron/packager or electron-builder)\n                      [packager|builder]\n    --arch, -A      App architecture (default: yours)\n                      - with default \"@electron/packager\" bundler:\n                          [ia32|x64|armv7l|arm64|mips64el|all]\n                      - with \"electron-builder\" bundler:\n                          [ia32|x64|armv7l|arm64|all]\n\n    ONLY for electron-builder (when using \"publish\" parameter):\n    --publish, -P  Publish options [onTag|onTagOrDraft|always|never]\n                     - see https://www.electron.build/configuration/publish\n\n    Only for BEX mode:\n    --target, -T     (required) Browser family target [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Validation Rule in JavaScript for QInput\nDESCRIPTION: This example shows how to create an asynchronous validation rule for a QInput component. Async rules can be implemented using async/await or by returning a Promise directly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/input.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvalue => condition || errorMessage\n```\n\n----------------------------------------\n\nTITLE: Implementing QTable with External Expansion Model in Vue\nDESCRIPTION: Shows how to implement a QTable with an external expansion model. This approach allows for more flexible control over row expansion behavior.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"External expansion model\" file=\"ExpandedRowExternal\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up Axios Boot File in Quasar\nDESCRIPTION: Creates an Axios boot file that configures global axios instance and api service for the Quasar application. This setup allows using axios throughout the app without needing to import it in each component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/ajax-requests.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport axios from 'axios'\n\nconst api = axios.create({ baseURL: 'https://api.example.com' })\n\nexport default defineBoot(({ app }) => {\n  // for use inside Vue files (Options API) through this.$axios and this.$api\n\n  app.config.globalProperties.$axios = axios\n  // ^ ^ ^ this will allow you to use this.$axios (for Vue Options API form)\n  //       so you won't necessarily have to import axios in each vue file\n\n  app.config.globalProperties.$api = api\n  // ^ ^ ^ this will allow you to use this.$api (for Vue Options API form)\n  //       so you can easily perform requests against your app's API\n})\n\nexport { axios, api }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Based on process.env in JavaScript\nDESCRIPTION: This snippet demonstrates how to use dynamic imports in combination with process.env to conditionally load and use an npm package based on the Quasar mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.MODE === 'electron') {\n  import('my-fancy-npm-package').then(package => {\n    // notice \"default\" below, which is the prop with which\n    // you can access what your npm imported package exports\n    package.default.doSomething()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Webpack Aliases with chainWebpack\nDESCRIPTION: Equivalent configuration using the chainWebpack method to add custom Webpack aliases in a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\nimport { fileURLToPath } from 'node:url'\n\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      chainWebpack (chain, { isServer, isClient }) {\n        chain.resolve.alias\n          .set('myalias', fileURLToPath(new URL('./src/somefolder', import.meta.url)))\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Mode in Quasar\nDESCRIPTION: Example showing how to differentiate between development and production environments, and how to implement mode-specific functionality for Electron mode using process.env variables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.DEV) {\n  console.log(`I'm on a development build`)\n}\n\n// process∙env∙MODE is the <mode> in\n// \"quasar dev/build -m <mode>\"\n// (defaults to 'spa' if -m parameter is not specified)\n\nif (process.env.MODE === 'electron') {\n  const { BrowserWindow } = require('@electron/remote')\n  const win = BrowserWindow.getFocusedWindow()\n\n  if (win.isMaximized()) {\n    win.unmaximize()\n  }\n  else {\n    win.maximize()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Applications\nDESCRIPTION: Command line options for building Quasar applications with various modes and targets. Includes options for debugging, publishing, and platform-specific builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -h\n\n  Description\n    Builds distributables of your app.\n\n  Usage\n    $ quasar build\n    $ quasar build -p <port number>\n\n    $ quasar build -m ssr\n\n    # alias for \"quasar build -m cordova -T ios\"\n    $ quasar build -m ios\n\n    # alias for \"quasar build -m cordova -T android\"\n    $ quasar build -m android\n\n    # passing extra parameters and/or options to\n    # underlying \"cordova\" executable:\n    $ quasar build -m ios -- some params --and options --here\n    # when on Windows and using Powershell:\n    $ quasar build -m ios '--' some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in Vue Component\nDESCRIPTION: Demonstrates three different patterns for using Pinia store in a Vue component: direct store usage, computed properties, and destructured store properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/state-management-with-pinia.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <!-- Option 1 -->\n    <div>Direct store</div>\n    <!-- Read the state value directly -->\n    <div>{{ store.counter }}</div>\n    <!-- Use getter directly -->\n    <div>{{ store.doubleCount }}</div>\n\n    <!-- Manipulate state directly -->\n    <q-btn @click=\"store.counter--\">-</q-btn>\n    <!-- Use an action -->\n    <q-btn @click=\"store.increment()\">+</q-btn>\n  </div>\n\n  <div>\n    <!-- Option 2 -->\n    <div>Indirect store</div>\n    <!-- Use the computed state -->\n    <div>{{ count }}</div>\n    <!-- Use the computed getter -->\n    <div>{{ doubleCountValue }}</div>\n\n    <!-- Use the exposed function -->\n    <q-btn @click=\"decrementCount()\">-</q-btn>\n    <!-- Use the exposed function -->\n    <q-btn @click=\"incrementCount()\">+</q-btn>\n  </div>\n\n  <div>\n    <!-- Option 3 -->\n    <div>Destructured store</div>\n    <!-- Use the destructured state -->\n    <div>{{ counter }}</div>\n    <!-- Use the destructured getter -->\n    <div>{{ doubleCount }}</div>\n\n    <!-- Manipulate state directly-->\n    <q-btn @click=\"counter--\">-</q-btn>\n    <!-- Use an action -->\n    <q-btn @click=\"increment()\">+</q-btn>\n  </div>\n</template>\n\n<script>\nimport { computed } from 'vue';\nimport { useCounterStore } from 'stores/counter';\nimport { storeToRefs } from 'pinia';\n\nexport default {\n  setup() {\n    const store = useCounterStore();\n\n    // Option 2: use computed and functions to use the store\n    const count = computed(() => store.counter);\n    const doubleCountValue = computed(() => store.doubleCount);\n    const incrementCount = () => store.increment(); // use action\n    const decrementCount = () => store.counter--; // manipulate directly\n\n    // Option 3: use destructuring to use the store in the template\n    const { counter, doubleCount } = storeToRefs(store); // state and getters need \"storeToRefs\"\n    const { increment } = store; // actions can be destructured directly\n\n    return {\n      // Option 1: return the store directly and couple it in the template\n      store,\n\n      // Option 2: use the store in functions and compute the state to use in the template\n      count,\n      doubleCountValue,\n      incrementCount,\n      decrementCount,\n\n      // Option 3: pass the destructed state, getters and actions to the template\n      counter,\n      increment,\n      doubleCount,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing PreFetch in a Vue Component\nDESCRIPTION: Example of a Vue component that uses the preFetch hook to fetch data from a Pinia store before rendering, using the Options API approach.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>{{ item.title }}</div>\n</template>\n\n<script>\nimport { useRoute } from 'vue-router'\nimport { useMyStore } from 'stores/myStore'\n\nexport default {\n  // our hook here\n  preFetch ({ store, currentRoute, previousRoute, redirect, ssrContext, urlPath, publicPath }) {\n    // fetch data, validate route and optionally redirect to some other route...\n\n    // ssrContext is available only server-side in SSR mode\n\n    // No access to \"this\" here\n\n    // Return a Promise if you are running an async job\n    // Example:\n    const myStore = useMyStore() // useMyStore(store) for SSR\n    return myStore.fetchItem(currentRoute.params.id) // assumes it is async\n  },\n\n  setup () {\n    const myStore = useMyStore()\n    const $route = useRoute()\n\n    // display the item from store state.\n    const item = computed(() => myStore.items[$route.params.id])\n\n    return { item }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar in a Vite Project\nDESCRIPTION: Commands for installing the necessary Quasar packages in an existing Vite project using different package managers. This includes installing the core Quasar library, extras, the Vite plugin, and the required Sass dependencies.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vite-plugin/vite-plugin.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add quasar @quasar/extras\n$ yarn add --dev @quasar/vite-plugin sass-embedded@^1.80.2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save quasar @quasar/extras\n$ npm install --save-dev @quasar/vite-plugin sass-embedded@^1.80.2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add quasar @quasar/extras\n$ pnpm add -D @quasar/vite-plugin sass-embedded@^1.80.2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add quasar @quasar/extras\n$ bun add --dev @quasar/vite-plugin sass-embedded@^1.80.2\n```\n\n----------------------------------------\n\nTITLE: Quasar Layout Template with Router View\nDESCRIPTION: Template structure for a Quasar layout component with router-view integration\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-layout>\n    ...\n\n    <!-- this is where the Pages are injected -->\n    <q-page-container>\n      <router-view></router-view>\n    </q-page-container>\n\n    ...\n  </q-layout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Quasar Development Server\nDESCRIPTION: Command to start the Quasar development server for local development of a single page application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev\n```\n\n----------------------------------------\n\nTITLE: Using Notify Inside a Vue File\nDESCRIPTION: Shows how to use the Notify plugin within a Vue component by using the useQuasar composable to access Quasar's API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.notify('Message')\n  // or with a config object:\n  $q.notify({...})\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Interacting with Service Worker in Quasar PWA\nDESCRIPTION: This code snippet demonstrates how to register and interact with a service worker in a Quasar PWA using the register-service-worker package. It includes various lifecycle event handlers for the service worker.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/handling-service-worker.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { register } from 'register-service-worker'\n\nregister(process.env.SERVICE_WORKER_FILE, {\n  ready (registration) {\n    console.log('Service worker is active.')\n  },\n\n  registered (registration) {\n    console.log('Service worker has been registered.')\n  },\n\n  cached (registration) {\n    console.log('Content has been cached for offline use.')\n  },\n\n  updatefound (registration) {\n    console.log('New content is downloading.')\n  },\n\n  updated (registration) {\n    console.log('New content is available; please refresh.')\n  },\n\n  offline () {\n    console.log('No internet connection found. App is running in offline mode.')\n  },\n\n  error (error) {\n    console.error('Error during service worker registration:', error)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Boot File Implementation with defineBoot\nDESCRIPTION: Shows the basic structure of a boot file using defineBoot wrapper for better IDE support. The function receives app, router, and store as parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nexport default defineBoot(({ app, router, store }) => {\n  // something to do\n})\n```\n\n----------------------------------------\n\nTITLE: Generating New Quasar Components and Files\nDESCRIPTION: Shows how to use the Quasar CLI to quickly scaffold new pages, layouts, components, boot files, stores, and SSR middleware. It includes options for specifying the file format (JS or TS) and provides examples of usage.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new -h\n\n  Description\n    Quickly scaffold files.\n\n  Usage\n    $ quasar new <p|page> [-f <js|ts>] <page_file_name>\n    $ quasar new <l|layout> [-f <js|ts>] <layout_file_name>\n    $ quasar new <c|component> [-f <js|ts>] <component_file_name>\n    $ quasar new <b|boot> [-f <js|ts>] <boot_name>\n    $ quasar new <s|store> [-f <js|ts>] <store_module_name>\n    $ quasar new ssrmiddleware [-f <js|ts>] <middleware_name>\n\n  Examples\n    # Create src/pages/MyNewPage.vue:\n    $ quasar new p MyNewPage\n\n    # Create src/pages/MyNewPage.vue and src/pages/OtherPage.vue:\n    $ quasar new p MyNewPage OtherPage\n\n    # Create src/layouts/shop/Checkout.vue\n    $ quasar new layout shop/Checkout.vue\n\n    # Create src/layouts/shop/Checkout.vue (forcing TypeScript)\n    $ quasar new layout -f ts shop/Checkout.vue\n\n    # Create a store with TypeScript (-f ts is optional if tsconfig.json is present)\n    $ quasar new store -f ts myStore\n\n  Options\n    --help, -h            Displays this message\n\n    --format -f <option>  (optional) Use a supported format for the template.\n                          This gets inferred automatically for your project.\n                          Possible overriding values:\n                             * js - JS template\n                             * ts - TS template\n```\n\n----------------------------------------\n\nTITLE: Installing a Quasar App Extension via CLI\nDESCRIPTION: Command to add a Quasar App Extension to your project using the ext-id. After execution, the extension may prompt for configuration options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar ext add <ext-id>\n```\n\n----------------------------------------\n\nTITLE: Building Quasar SPA for Production\nDESCRIPTION: Command to build a production-ready bundle of Quasar SPA application\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/deploying.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Methods with Vue Options API\nDESCRIPTION: Shows how to access Quasar component methods using Vue references in the Options API pattern. Demonstrates proper lifecycle handling using the mounted hook.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!--\n    Notice ref=\"myRef\". We will use the name\n    assigned to \"ref\" in the script part below\n  -->\n  <q-bogus ref=\"myRef\" />\n</template>\n\n<script>\nexport default {\n  // we can now access `this.$refs.myRef`\n  // an example on the mounted() Vue component hook\n  mounted () {\n    // calling \"next()\" method:\n    this.$refs.myRef.next()\n  }\n  // calling before mount point might result in errors\n  // as Vue hasn't yet prepared the Vue reference\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Development Build in JavaScript\nDESCRIPTION: This snippet demonstrates how to use process.env.DEV to check if the code is running in a development build. It also shows how to use process.env.MODE to perform actions specific to the Electron mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.DEV) {\n  console.log(`I'm on a development build`)\n}\n\n// process∙env∙MODE is the <mode> in\n// \"quasar dev/build -m <mode>\"\n// (defaults to 'spa' if -m parameter is not specified)\n\nif (process.env.MODE === 'electron') {\n  import('@electron/remote').then(({ BrowserWindow }) => {\n    const win = BrowserWindow.getFocusedWindow()\n\n    if (win.isMaximized()) {\n      win.unmaximize()\n    }\n    else {\n      win.maximize()\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Component Using useHydration for Conditional Rendering\nDESCRIPTION: This example shows a complete Vue.js component that uses the useHydration composable. It demonstrates how to conditionally render content only after hydration has occurred, which is useful in SSR scenarios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-hydration.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"isHydrated\">\n      Gets rendered only after hydration.\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useHydration } from 'quasar'\n\nexport default {\n  setup () {\n    const { isHydrated } = useHydration()\n\n    return {\n      isHydrated\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Platform Detection in Vue Component Setup\nDESCRIPTION: Demonstrates how to use platform detection within a Vue component's setup function using the useQuasar composable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/platform-detection.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.platform.is.mobile\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Launch Options in DevServer\nDESCRIPTION: Examples of configuring the development server to open specific browsers like Google Chrome or Firefox using the open property in the Quasar configuration file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// opens Google Chrome\ndevServer: {\n  open: {\n    app: { name: 'google chrome' }\n  }\n}\n\n// opens Firefox\ndevServer: {\n  open: {\n    app: { name: 'firefox' }\n  }\n}\n\n// opens Google Chrome and automatically deals with cross-platform issues:\nimport open from 'open'\n\ndevServer: {\n  open: {\n    app: { name: open.apps.chrome }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Securely Exposing IPC Communication in Electron Preload Script\nDESCRIPTION: This snippet illustrates the correct way to expose IPC-based APIs in an Electron preload script. It demonstrates how to provide a specific method for each IPC message, ensuring better security compared to exposing the entire IPC renderer.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Good code\ncontextBridge.exposeInMainWorld('myAPI', {\n  loadPreferences: () => ipcRenderer.invoke('myAPI:load-prefs')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy in Quasar Config File\nDESCRIPTION: This code snippet demonstrates how to set up API proxying in the Quasar configuration file. It shows how to proxy all requests starting with '/api' to a specified target URL, including options for changing the origin and rewriting the path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/api-proxying.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  proxy: {\n    // proxy all requests starting with /api to jsonplaceholder\n    '/api': {\n      target: 'http://some.api.target.com:7070',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': ''\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger/Interceptor SSR Middleware\nDESCRIPTION: Example of a logging middleware that intercepts all client requests. Should be configured as the first middleware in the chain to capture all requests.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineSsrMiddleware(({ app, resolve }) => {\n  app.all(resolve.urlPath('*'), (req, _, next) => {\n    console.log('someone requested:', req.url)\n    next()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Form Submission Button Example in Vue\nDESCRIPTION: Demonstrates how to use QBtn for form submission with loading state and Enter key support. Shows implementation of a save button with loading feedback and disabled state during submission.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Form Submission\" file=\"FormSubmission\" />\n```\n\n----------------------------------------\n\nTITLE: Component Events Declaration in Vue 3\nDESCRIPTION: Example showing how to declare custom events in Vue 3 components using the emits option. This is a new requirement in Vue 3 for components that emit custom events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script>\n// your Vue component;\n// let's assume that we emit 'ok' and 'myEvent' events\n// from this component\n\nexport default {\n  // ...\n  emits: [ 'ok', 'myEvent' ],\n  // ...\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Serverless Handler Export in Quasar SSR\nDESCRIPTION: This snippet shows how to configure a Quasar SSR application to conditionally start a server in development mode or export a handler in production for serverless environments. It implements the defineSsrListen function to handle both scenarios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-webserver.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrListen } from '#q-app/wrappers'\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  if (process.env.DEV) {\n    // for dev, start listening on the created server\n    const server = devHttpsApp || app;\n    return server.listen(port, () => {\n      // we're ready to serve clients\n    })\n  }\n  else { // in production\n    // return an object with a \"handler\" property\n    // that the server script will be named-export\n    return { handler: app }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deep Object Equality Checking in Quasar\nDESCRIPTION: Demonstrates how to use is.deepEqual to recursively compare two objects for equality. Supports complex data types including Map, Set, ArrayBuffer, RegExp, and Date objects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/type-checking-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { is } from 'quasar'\n\nconst objA = { /* ... */ }\nconst objB = { /* ... */ }\n\nconsole.log( is.deepEqual(objA, objB) ) // true or false\n```\n\n----------------------------------------\n\nTITLE: Lazy-Loading Route Configuration in Vue Router\nDESCRIPTION: Example of configuring routes with lazy-loading in routes.js\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/',\n    component: () => import('pages/Landing')\n  }\n]\n\nexport default routes\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration in Quasar App Extension\nDESCRIPTION: This snippet demonstrates how to extend the Vite configuration in a Quasar App Extension using the extendViteConf method. It allows for custom modifications to the Vite config for both client and server builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nextendViteConf (viteConf, { isClient, isServer }) {\n  // do stuff in-place with viteConf\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Script Logic\nDESCRIPTION: Background script implementation that listens for new tab events and communicates with the Quasar app using a bridge. Creates event listeners for tab updates and sends messages to the main app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/background-script.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/background'\n\nconst bridge = createBridge({ debug: false })\n\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  bridge.send('bex.tab.opened', { url: tab.url })\n})\n```\n\n----------------------------------------\n\nTITLE: Router-Based Layout Implementation\nDESCRIPTION: Shows how to implement QPageContainer with router-view for handling multiple pages, including both the layout template and individual page structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- vue file for Layout: -->\n<q-layout>\n  ...\n  <q-page-container>\n    <router-view />\n  </q-page-container>\n  ...\n</q-layout>\n\n<!-- vue file for a Page: -->\n<q-page padding>\n  <!-- page content -->\n</q-page>\n```\n\n----------------------------------------\n\nTITLE: Vertical Scroll Position Methods (JavaScript)\nDESCRIPTION: Methods to get and set vertical scroll position of an element or page, with optional animation duration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getVerticalScrollPosition, setVerticalScrollPosition } = scroll\n\n// Get scroll position of an element or page.\n// Use it in conjunction with `getScrollTarget()`\ngetVerticalScrollPosition(scrollTargetDomElement) // returns a Number (pixels)\n\n// Setting scroll position of an element or page:\nsetVerticalScrollPosition (scrollTargetElement, offset[, duration])\n// if \"duration\" is specified then it will animate the scrolling\n```\n\n----------------------------------------\n\nTITLE: Reading a Cookie Inside a Vue Component\nDESCRIPTION: Demonstrates how to read a cookie value inside a Vue component using the Composition API with useQuasar to access the cookie functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n  const value = $q.cookies.get('cookie_name')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios in Quasar Boot Files\nDESCRIPTION: Setting up Axios in a boot file, creating an API instance, and making it available globally in Vue components through app.config.globalProperties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport axios from 'axios'\n\nconst api = axios.create({ baseURL: 'https://api.example.com' })\n\nexport default defineBoot(({ app }) => {\n  // for use inside Vue files (Options API) through this.$axios and this.$api\n\n  app.config.globalProperties.$axios = axios\n  // ^ ^ ^ this will allow you to use this.$axios (for Vue Options API form)\n  //       so you won't necessarily have to import axios in each vue file\n\n  app.config.globalProperties.$api = api\n  // ^ ^ ^ this will allow you to use this.$api (for Vue Options API form)\n  //       so you can easily perform requests against your app's API\n})\n\nexport { axios, api }\n```\n\n----------------------------------------\n\nTITLE: Creating New Quasar Project\nDESCRIPTION: Commands to initialize a new Quasar project using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quasar-cli.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create quasar\n\n$ npm init quasar@latest\n\n$ pnpm create quasar@latest\n\n$ bun create quasar@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring BEX Options in quasar.config\nDESCRIPTION: Demonstrates various BEX configuration options in quasar.config, including extra scripts, extending Esbuild config, and modifying the manifest file dynamically.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbex: {\n  /**\n   * The list of extra scripts (js/ts) not in your bex manifest that you want to\n   * compile and use in your browser extension. Maybe dynamic use them?\n   *\n   * Each entry in the list should be a relative filename to /src-bex/\n   *\n   * @example [ 'my-script.ts', 'sub-folder/my-other-script.js' ]\n   */\n  extraScripts?: string[];\n\n  /**\n   * Extend the Esbuild config that is used for the bex scripts\n   * (background, content scripts, dom script)\n   */\n  extendBexScriptsConf?: (config: EsbuildConfiguration) => void;\n\n  /**\n   * Should you need some dynamic changes to the Browser Extension manifest file\n   * (/src-bex/manifest.json) then use this method to do it.\n   */\n  extendBexManifestJson?: (json: object) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Authentication in Quasar Boot Files\nDESCRIPTION: Example of interfering with Vue Router configuration in a boot file to implement authentication logic using beforeEach navigation guard.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\n\nexport default defineBoot(({ router, store }) => {\n  router.beforeEach((to, from, next) => {\n    // Now you need to add your authentication logic here, like calling an API endpoint\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Definition for SSR in Quasar\nDESCRIPTION: Demonstrates how to create a router factory function for SSR that generates fresh router instances for each request to prevent state pollution.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/writing-universal-code.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\nexport default defineRouter((/* { store, ssrContext } */) => {\n  const Router = new VueRouter({...})\n  return Router\n})\n```\n\n----------------------------------------\n\nTITLE: Using Colors in SCSS\nDESCRIPTION: Shows how to use Quasar color variables in SCSS styling\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Notice lang=\"scss\" -->\n<style lang=\"scss\">\ndiv {\n  color: $red-1;\n  background-color: $grey-5;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Switcher Component in Quasar\nDESCRIPTION: Implementation of a language switcher using Quasar's QSelect component with vue-i18n's useI18n composable to change the application's language.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- ...... -->\n  <q-select\n    v-model=\"locale\"\n    :options=\"localeOptions\"\n    label=\"Quasar Language\"\n    dense\n    borderless\n    emit-value\n    map-options\n    options-dense\n    style=\"min-width: 150px\"\n  />\n  <!-- ...... -->\n</template>\n\n<script setup>\nimport { useI18n } from 'vue-i18n'\n\nconst { locale } = useI18n({ useScope: 'global' })\n\nconst localeOptions: [\n  { value: 'en-US', label: 'English' },\n  { value: 'de', label: 'German' }\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with defineRouter for SSR in Quasar\nDESCRIPTION: Demonstrates how to properly set up a Vue Router for SSR applications using Quasar's defineRouter wrapper. This approach creates a fresh router instance for each request to prevent state pollution across requests.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/writing-universal-code.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\n\nexport default defineRouter((/* { store, ssrContext } */) {\n  const Router = new VueRouter({...})\n  return Router\n})\n```\n\n----------------------------------------\n\nTITLE: Basic QMenu Component Example\nDESCRIPTION: Shows how to use the basic QMenu component with v-close-popup directive for automatic closing of menu items.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/menu/menu.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Boot File Structure with defineBoot\nDESCRIPTION: Basic example of a boot file using defineBoot wrapper for better IDE autocomplete. Shows how to access app, router, and store instances.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nexport default defineBoot(({ app, router, store }) => {\n  // something to do\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Webserver with Express in Quasar\nDESCRIPTION: This code snippet demonstrates how to create and configure an SSR webserver using Express in a Quasar project. It includes functions for creating the server, listening on a port, closing the server, serving static content, and rendering preload tags.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-webserver.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport compression from 'compression'\nimport {\n  defineSsrCreate,\n  defineSsrListen,\n  defineSsrClose,\n  defineSsrServeStaticContent,\n  defineSsrRenderPreloadTag\n} from '#q-app/wrappers'\n\nexport const create = defineSsrCreate((/* { ... } */) => {\n  const app = express()\n\n  app.disable('x-powered-by')\n\n  if (process.env.PROD) {\n    app.use(compression())\n  }\n\n  return app\n})\n\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  const server = devHttpsApp || app\n  return server.listen(port, () => {\n    if (process.env.PROD) {\n      console.log('Server listening at port ' + port)\n    }\n  })\n})\n\nexport const close = defineSsrClose(({ listenResult }) => {\n  return listenResult.close()\n})\n\nconst maxAge = process.env.DEV\n  ? 0\n  : 1000 * 60 * 60 * 24 * 30\n\nexport const serveStaticContent = defineSsrServeStaticContent(({ app, resolve }) => {\n  return ({ urlPath = '/', pathToServe = '.', opts = {} }) => {\n    const serveFn = express.static(resolve.public(pathToServe), { maxAge, ...opts })\n    app.use(resolve.urlPath(urlPath), serveFn)\n  }\n})\n\nconst jsRE = /\\.js$/\nconst cssRE = /\\.css$/\nconst woffRE = /\\.woff$/\nconst woff2RE = /\\.woff2$/\nconst gifRE = /\\.gif$/\nconst jpgRE = /\\.jpe?g$/\nconst pngRE = /\\.png$/\n\nexport const renderPreloadTag = defineSsrRenderPreloadTag((file/* , { ssrContext } */) => {\n  if (jsRE.test(file) === true) {\n    return `<link rel=\"modulepreload\" href=\"${file}\" crossorigin>`\n  }\n\n  if (cssRE.test(file) === true) {\n    return `<link rel=\"stylesheet\" href=\"${file}\" crossorigin>`\n  }\n\n  if (woffRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"font\" type=\"font/woff\" crossorigin>`\n  }\n\n  if (woff2RE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"font\" type=\"font/woff2\" crossorigin>`\n  }\n\n  if (gifRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"image\" type=\"image/gif\" crossorigin>`\n  }\n\n  if (jpgRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"image\" type=\"image/jpeg\" crossorigin>`\n  }\n\n  if (pngRE.test(file) === true) {\n    return `<link rel=\"preload\" href=\"${file}\" as=\"image\" type=\"image/png\" crossorigin>`\n  }\n\n  return ''\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Imports Based on Environment in Quasar\nDESCRIPTION: Shows how to conditionally import packages based on the current Quasar mode using process.env combined with dynamic imports.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.MODE === 'electron') {\n  import('my-fancy-npm-package').then(package => {\n    // notice \"default\" below, which is the prop with which\n    // you can access what your npm imported package exports\n    package.default.doSomething()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Light and Dark Modes in CSS\nDESCRIPTION: CSS selectors for styling both light and dark modes in a Quasar application. Uses body class selectors to apply different styles based on the current theme mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/dark-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.body--light {\n  /* ... */\n}\n\n.body--dark {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Geolocation with Capacitor in Vue Component\nDESCRIPTION: Example showing how to integrate Capacitor's Geolocation API in a Vue component to track and display GPS position. Includes position watching and cleanup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    GPS position: <strong>{{ position }}</strong>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount } from 'vue'\nimport { Geolocation } from '@capacitor/geolocation'\n\nexport default {\n  setup () {\n    const position = ref('determining...')\n\n    function getCurrentPosition() {\n      Geolocation.getCurrentPosition().then(newPosition => {\n        console.log('Current', newPosition)\n        position.value = newPosition\n      })\n    }\n\n    let geoId\n\n    onMounted(() => {\n      getCurrentPosition()\n\n      // we start listening\n      geoId = Geolocation.watchPosition({}, (newPosition, err) => {\n        console.log('New GPS position')\n        position.value = newPosition\n      })\n    })\n\n    onBeforeUnmount(() => {\n      // we do cleanup\n      Geolocation.clearWatch(geoId)\n    })\n\n    return {\n      position\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Notify Outside of a Vue File\nDESCRIPTION: Demonstrates how to import and use the Notify plugin outside of a Vue component file, either with a simple string message or a configuration object.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notify } from 'quasar'\n\nNotify.create('Danger, Will Robinson! Danger!')\n// or with a config object:\nNotify.create({\n  message: 'Danger, Will Robinson! Danger!'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Boot Files for SSR in Quasar\nDESCRIPTION: Demonstrates how to configure boot files in the quasar.config file to specify which files should run on server-side, client-side, or both. This is essential when integrating third-party libraries.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/writing-universal-code.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  boot: [\n    'some-boot-file', // runs on both server & client\n    { path: 'some-other', server: false } // this boot file gets embedded only on client-side\n    { path: 'third', client: false } // this boot file gets embedded only on server-side\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DevServer Types with TypeScript\nDESCRIPTION: TypeScript type definitions for DevServer options that extend Vite's server configuration. Includes custom types for open and https options specific to Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ServerOptions as ViteServerOptions } from \"vite\";\nimport { Options as OpenOptions } from \"open\";\ntype DevServerOptions = Omit<ViteServerOptions, \"open\" | \"https\"> & {\n  open?: Omit<OpenOptions, \"wait\"> | boolean;\n  https?: ViteServerOptions[\"https\"] | boolean;\n};\n\n/**\n * Vite \"server\" options.\n * Some properties are overwritten based on the Quasar mode you're using in order\n * to ensure a correct config.\n * Note: if you're proxying the development server (i.e. using a cloud IDE),\n * set the `public` setting to your public application URL.\n */\ndevServer?: DevServerOptions;\n```\n\n----------------------------------------\n\nTITLE: Nested Routes Configuration with Layout and Pages\nDESCRIPTION: Complete example of configuring nested routes with layouts and pages in Vue Router\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport User from 'layouts/User'\nimport Profile from 'pages/Profile'\nimport Posts from 'pages/Posts'\n\nconst routes = [\n  {\n    path: '/user',\n    component: User,\n    children: [\n      {\n        path: 'profile',\n        component: Profile\n      },\n      {\n        path: 'posts',\n        component: Posts\n      }\n    ]\n  }\n]\n\nexport default routes\n```\n\n----------------------------------------\n\nTITLE: Electron Configuration Options in Quasar\nDESCRIPTION: Comprehensive configuration options for Electron including preload scripts, package.json extension, Esbuild config customization, and bundler selection between packager and builder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/configuring-electron.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelectron: {\n  preloadScripts?: string[];\n\n  extendPackageJson?: (pkg: { [index in string]: any }) => void;\n\n  extendElectronMainConf?: (config: EsbuildConfiguration) => void;\n\n  extendElectronPreloadConf?: (config: EsbuildConfiguration) => void;\n\n  bundler?: \"packager\" | \"builder\";\n  packager?: ElectronPackager.Options;\n  builder?: ElectronBuilder.Configuration;\n\n  unPackagedInstallParams?: string[];\n\n  inspectPort?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: useRenderCache TypeScript Interface\nDESCRIPTION: TypeScript function signature showing the return type and available methods with their parameters and generic types.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-render-cache.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useRenderCache(): {\n  getCache: <T = any>(key: string, defaultValue?: T | (() => T)) => T;\n  setCache: <T = any>(key: string, value: T) => void;\n  hasCache: (key: string) => boolean;\n  clearCache: (key?: string) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Form Validation in Vue Composition API\nDESCRIPTION: Implementation of form validation and reset functionality using Vue Composition API with QForm references.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/form.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetup () {\n  const myForm = ref(null)\n\n  function validate () {\n    myForm.value.validate().then(success => {\n      if (success) {\n        // yay, models are correct\n      }\n      else {\n        // oh no, user has filled in\n        // at least one invalid value\n      }\n    })\n  }\n\n  // to reset validations:\n  function reset () {\n    myForm.value.resetValidation()\n  }\n\n  return {\n    myForm,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics Event and Page Tracking in JavaScript\nDESCRIPTION: Core analytics module that provides functions for logging events and page views to Google Analytics through Google Tag Manager's dataLayer. Includes methods for tracking custom events and screen views with optional session ID support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logEvent(category, action, label, sessionId = null) {\n    window.dataLayer.push({\n      appEventCategory: category,\n      appEventAction: action,\n      appEventLabel: label,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appEvent' })\n  },\n\n  logPage(path, name, sessionId = null) {\n    window.dataLayer.push({\n      screenPath: path,\n      screenName: name,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appScreenView' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Script Event Handling\nDESCRIPTION: Background script implementation that listens for new tab events and communicates with the Quasar app using a bridge. Creates an event listener for chrome.tabs.onUpdated and sends the tab URL to the app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/background-script.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Importing the file below initializes the extension background.\n *\n * Warnings:\n * 1. Do NOT remove the import statement below. It is required for the extension to work.\n *    If you don't need createBridge(), leave it as \"import '#q-app/bex/background'\".\n * 2. Do NOT import this file in multiple background scripts. Only in one!\n * 3. Import it in your background service worker (if available for your target browser).\n */\nimport { createBridge } from '#q-app/bex/background'\n\nconst bridge = createBridge({ debug: false })\n\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  bridge.send('bex.tab.opened', { url: tab.url })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Settings in Quasar Config File\nDESCRIPTION: This snippet shows how to configure Capacitor-specific settings in the quasar.config file. It includes options for hiding the splashscreen, setting CLI preparation parameters, and defining app metadata.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  capacitor: {\n    /**\n     * Automatically hide the Capacitor Splashscreen when app is ready,\n     * (is using the Splashscreen Capacitor plugin).\n     *\n     * @default true\n     */\n    hideSplashscreen?: boolean;\n\n    /**\n     * Preparation params with which the Capacitor CLI is called\n     *\n     * @default [ 'sync', ctx.targetName ]\n     */\n    capacitorCliPreparationParams?: string[];\n\n    /** If not present, will look for `package.json > name` */\n    appName?: string;\n    /** If not present, will look for `package.json > version` */\n    version?: string;\n    /** If not present, will look for `package.json > description` */\n    description?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LoadingBar Inside Vue Components\nDESCRIPTION: Demonstrates how to use LoadingBar plugin within Vue components using the useQuasar composable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading-bar.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.loadingBar.start()\n  $q.loadingBar.stop()\n  $q.loadingBar.increment(value)\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Header Cell in QTable with Vue\nDESCRIPTION: Shows how to use a header-cell-[name] slot to customize the rendering of a specific header cell in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Header-cell-[name] slot\" file=\"SlotHeaderCellName\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Async SSR Middleware in Quasar\nDESCRIPTION: Shows how to create an async SSR middleware function. This allows for asynchronous operations within the middleware setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\nexport default defineSsrMiddleware(async ({ app, port, resolve, publicPath, folders, render, serve }) => {\n  // something to do with the server \"app\"\n  await something()\n})\n```\n\n----------------------------------------\n\nTITLE: Upgrading Electron Package with Package Managers\nDESCRIPTION: Commands to upgrade Electron to the latest version using different package managers (Yarn, NPM, PNPM, and Bun). These commands should be run from the root directory of a Quasar project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ yarn upgrade electron@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ npm install electron@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ pnpm add electron@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ bun add electron@latest\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Configuration in quasar.config File using JavaScript\nDESCRIPTION: Demonstrates how to perform asynchronous operations before returning the Quasar configuration object, allowing for dynamic configuration based on external data or processes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\n\nexport default async defineConfig((ctx) => {\n  const data = await someAsyncFunction()\n  return {\n    // ... use \"data\"\n  }\n})\n\n// or:\nexport default defineConfig((ctx) => {\n  return new Promise(resolve => {\n    // some async work then:\n    // resolve() with the quasar config\n    resolve({\n      //\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Option Filtering Implementation\nDESCRIPTION: Shows how to implement filtering functionality in QSelect, including basic filtering and autocomplete features\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/select.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Filtering options\" file=\"InputFilterOptions\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Store for SSR in Quasar\nDESCRIPTION: Shows how to set up a Pinia store factory function that creates fresh store instances for each SSR request, with support for plugins.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/writing-universal-code.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from '#q-app/wrappers'\nimport { createPinia } from 'pinia'\n\n/*\n * If not building with SSR mode, you can\n * directly export the Store instantiation;\n *\n * The function below can be async too; either use\n * async/await or return a Promise which resolves\n * with the Store instance.\n */\n\nexport default defineStore((/* { ssrContext } */) => {\n  const pinia = createPinia()\n\n  // You can add Pinia plugins here\n  // pinia.use(SomePiniaPlugin)\n\n  return pinia\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PWA Options in Quasar Config\nDESCRIPTION: Configuration options for PWA in quasar.config file, including Workbox mode settings, service worker filename, manifest options, and meta tag injection settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/configuring-pwa.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npwa: {\n  workboxMode?: \"GenerateSW\" | \"InjectManifest\";\n\n  /**\n   * Generated service worker filename to use (needs to end with .js)\n   * @default sw.js\n   */\n  swFilename?: string;\n\n  /**\n   * PWA manifest filename to use on your browser\n   * @default manifest.json\n   */\n  manifestFilename?: string;\n\n  /**\n   * Should you need some dynamic changes to the /src-pwa/manifest.json,\n   * use this method to do it.\n   */\n  extendManifestJson?: (json: PwaManifestOptions) => void;\n\n  /**\n   * Does the PWA manifest tag requires crossorigin auth?\n   * @default false\n   */\n  useCredentialsForManifestTag?: boolean;\n\n  /**\n   * Auto inject the PWA meta tags?\n   * If using the function form, return HTML tags as one single string.\n   * @default true\n   */\n  injectPwaMetaTags?: boolean | ((injectParam: InjectPwaMetaTagsParams) => string);\n\n  /**\n   * Extend the Esbuild config that is used for the custom service worker\n   * (if using it through workboxMode: 'InjectManifest')\n   */\n  extendPWACustomSWConf?: (config: EsbuildConfiguration) => void;\n\n  /**\n   * Extend/configure the Workbox GenerateSW options\n   */\n  extendGenerateSWOptions?: (config: GenerateSWOptions) => void;\n\n  /**\n   * Extend/configure the Workbox InjectManifest options\n   */\n  extendInjectManifestOptions?: (config: InjectManifestOptions) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Router Pages in Quasar\nDESCRIPTION: Shows how to implement lazy loading for Vue Router routes using dynamic imports. This creates separate chunks that are loaded only when the specific route is visited.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/some-page',\n    component: () => import('pages/SomePage')\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment File Loading in quasar.config.js\nDESCRIPTION: This example shows how to configure the loading of .env files in the quasar.config.js file. It demonstrates setting a custom environment folder, specifying additional .env files, and filtering environment variables exposed to the client.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  /**\n   * Folder where Quasar CLI should look for .env* files.\n   * Can be an absolute path or a relative path to project root directory.\n   *\n   * @default project root directory\n   */\n  envFolder?: string;\n\n  /**\n   * Additional .env* files to be loaded.\n   * Each entry can be an absolute path or a relative path to quasar.config > build > envFolder.\n   *\n   * @example ['.env.somefile', '../.env.someotherfile']\n   */\n  envFiles?: string[];\n\n  /**\n   * Filter the env variables that are exposed to the client\n   * through the env files. This does not account also for the definitions\n   * assigned directly to quasar.config > build > env prop.\n   *\n   * Requires @quasar/app-vite v2.0.3+\n   */\n  envFilter?:\n    (env: { [index: string]: string | boolean | undefined | null })\n      => { [index: string]: string | boolean | undefined | null };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling for Docker/WSL HMR Support\nDESCRIPTION: Configuration to enable filesystem polling for Hot Module Replacement when using Docker containers or WSL where native file watching may not work.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  // ...\n  extendWebpack(cfg) {\n    cfg.watchOptions = {\n      aggregateTimeout: 200,\n      poll: 1000,\n    };\n  },\n// ...\n```\n\n----------------------------------------\n\nTITLE: Running Tunnelmole CLI\nDESCRIPTION: Command to start Tunnelmole and expose a local port (80 in this example) to the internet.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80\n```\n\n----------------------------------------\n\nTITLE: Basic Prompts Structure for Quasar App Extension\nDESCRIPTION: Basic structure for the prompts.js file that handles App Extension installation questions. Exports an async function that receives an api parameter and returns an array of questions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/prompts-api.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// For @quasar/app-vite 1.6+ and @quasar/app-webpack v3.11+\n//   1. It can be async\n//   2. It receives the \"api\" param\nexport default function (api) {\n  return [\n    // questions\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Developing Electron Apps with Quasar CLI\nDESCRIPTION: Commands for starting Electron development mode, including options for passing extra parameters to the Electron executable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m electron\n\n# ..or the longer form:\n$ quasar dev --mode electron\n\n# passing extra parameters and/or options to\n# underlying \"electron\" executable:\n$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n# when on Windows and using Powershell:\n$ quasar dev -m electron '--' --no-sandbox --disable-setuid-sandbox\n```\n\n----------------------------------------\n\nTITLE: Basic Vue SFC Structure with Script Setup\nDESCRIPTION: Demonstrates the basic structure of a Vue Single File Component using Composition API with script setup syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- you define your Vue template here -->\n</template>\n\n<script setup>\n// This is where your Javascript goes\n// to define your Vue component, which\n// can be a Layout, a Page or your own\n// component used throughout the app.\n</script>\n\n<style>\n/* This is where your CSS goes */\n</style>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Route Configuration with Children\nDESCRIPTION: Example of configuring nested routes with lazy loading for layouts and pages\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n  {\n    path: '/user',\n    component: () => import('layouts/user'),\n    children: [\n      {\n        path: 'feed',\n        component: () => import('pages/user-feed')\n      },\n      {\n        path: 'profile',\n        component: () => import('pages/user-profile')\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Single File Selection in Vue\nDESCRIPTION: Implementation of QFile component for selecting a single file with basic configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/file.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Single file\" file=\"BasicSingle\" />\n```\n\n----------------------------------------\n\nTITLE: Using Webpack Magic Comments for Dynamic Imports\nDESCRIPTION: Demonstrates using Webpack magic comments (webpackInclude and webpackExclude) to constrain which files are included in the bundle when using dynamic imports.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait import(\n  /* webpackInclude: /(ar|en-US|ro)\\.js$/ */\n  'quasar/lang/' + langIso\n)\n  .then(lang => {\n    Lang.set(lang.default)\n  })\n```\n\n----------------------------------------\n\nTITLE: Axios Integration Boot File\nDESCRIPTION: Configuration for integrating Axios with Quasar, including custom instance creation and global property setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport axios from 'axios'\n\nconst api = axios.create({ baseURL: 'https://api.example.com' })\n\nexport default defineBoot(({ app }) => {\n  // for use inside Vue files (Options API) through this.$axios and this.$api\n\n  app.config.globalProperties.$axios = axios\n  // ^ ^ ^ this will allow you to use this.$axios (for Vue Options API form)\n  //       so you won't necessarily have to import axios in each vue file\n\n  app.config.globalProperties.$api = api\n  // ^ ^ ^ this will allow you to use this.$api (for Vue Options API form)\n  //       so you can easily perform requests against your app's API\n})\n\nexport { axios, api }\n```\n\n----------------------------------------\n\nTITLE: Executing Code When DOM is Ready in Quasar\nDESCRIPTION: Demonstrates how to use the ready function to execute code when the DOM is fully loaded and ready for manipulation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\nconst { ready } = dom\n\n// Execute a Function when DOM is ready:\nready(function () {\n  // ....\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Methods with Vue Composition API\nDESCRIPTION: Demonstrates how to set up and use Vue component references to access methods in Quasar components using the Composition API. Shows proper mounting lifecycle handling and ref exposure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!--\n    Notice ref=\"myRef\". We will use the name\n    assigned to \"ref\" in the script part below\n  -->\n  <q-bogus ref=\"myRef\" />\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\n\nexport default {\n  setup () {\n    const myRef = ref(null)\n\n    // after the component has mounted into DOM:\n    onMounted(() => {\n      // we call \"next()\" method of our component\n      myRef.value.next()\n    })\n    // calling before mount point might result in errors\n    // as Vue hasn't yet prepared the Vue reference\n\n    // we expose myRef to the scope so Vue\n    // can use it in the template as well\n    return { myRef }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Debugger for Quasar Apps in VS Code\nDESCRIPTION: VS Code launch configuration for debugging Quasar applications in Chrome. This setup includes source map path overrides for proper source mapping and disables content validation for HMR compatibility with Vite.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"chrome\",\n  \"request\": \"launch\",\n  \"name\": \"Quasar App: chrome\",\n  \"url\": \"http://localhost:8080\",\n  // To properly reflect changes after HMR with Vite\n  \"enableContentValidation\": false,\n  \"webRoot\": \"${workspaceFolder}/src\",\n  // No need to configure sourcemap explicitly for vite.\n  \"sourceMapPathOverrides\": {\n    \"webpack://package-name/./src/*\": \"${webRoot}/*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quasar Configuration Context Function in JavaScript\nDESCRIPTION: Exports a function that receives the Quasar context (ctx) object. This function demonstrates how to access environment variables properly in Quasar configuration files and shows example output of the context object with development and production flags.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false [[! highlight]]\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating i18n Boot File in TypeScript\nDESCRIPTION: TypeScript implementation of the i18n boot file with type definitions for messages and schemas, setting up vue-i18n with proper type safety.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers';\nimport { createI18n } from 'vue-i18n';\n\nimport messages from 'src/i18n';\n\nexport type MessageLanguages = keyof typeof messages;\n// Type-define 'en-US' as the master schema for the resource\nexport type MessageSchema = typeof messages['en-US'];\n\n// See https://vue-i18n.intlify.dev/guide/advanced/typescript.html#global-resource-schema-type-definition\n/* eslint-disable @typescript-eslint/no-empty-object-type */\ndeclare module 'vue-i18n' {\n  // define the locale messages schema\n  export interface DefineLocaleMessage extends MessageSchema {}\n\n  // define the datetime format schema\n  export interface DefineDateTimeFormat {}\n\n  // define the number format schema\n  export interface DefineNumberFormat {}\n}\n/* eslint-enable @typescript-eslint/no-empty-object-type */\n\nexport default defineBoot(({ app }) => {\n  const i18n = createI18n<{ message: MessageSchema }, MessageLanguages>({\n    locale: 'en-US',<% if (sfcStyle === 'composition' || sfcStyle === 'composition-setup') { %>\n    legacy: false,<% } %>\n    messages,\n  });\n\n  // Set i18n instance on app\n  app.use(i18n);\n});\n```\n\n----------------------------------------\n\nTITLE: Native Form Submit Example\nDESCRIPTION: Example of implementing native form submission with QForm and handling submit events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/form.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<q-form action=\"https://some-url.com\" method=\"post\">\n  <q-input name=\"firstname\" ...>\n  <!-- ... -->\n</q-form>\n```\n\n----------------------------------------\n\nTITLE: Using api.ctx in Quasar App Extension\nDESCRIPTION: Shows how to use the api.ctx object to make decisions based on the context in which 'quasar dev' or 'quasar build' runs. This example demonstrates checking for development mode and Electron mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (api.ctx.dev === true && api.ctx.mode.electron === true) {\n  api.beforeDev((api) => {\n    // do something when running quasar dev and\n    // with Electron mode\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration in Quasar Config File\nDESCRIPTION: Demonstrates how to extend the Vite configuration using the extendViteConf property in the Quasar config file. This example shows how to modify the chunkSizeWarningLimit in the Vite build options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendViteConf (viteConf, { isServer, isClient }) {\n    return {\n      build: {\n        chunkSizeWarningLimit: 750\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Quasar App Extension Uninstall Script\nDESCRIPTION: Demonstrates the basic structure of the uninstall.js file for a Quasar App Extension. The file exports a default function that receives an API object as its parameter.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// can be async\nexport default function (api) {\n  // props and methods for \"api\" Object\n  // are described below\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Asset in Vue Component\nDESCRIPTION: Demonstrates how to reference an image asset in a Vue component's template. The image source is processed by Vite as a module dependency.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-assets.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<img src=\"./logo.png\">\n```\n\n----------------------------------------\n\nTITLE: Complete Dialog Component Implementation\nDESCRIPTION: A comprehensive example showing how to implement a custom dialog component using useDialogPluginComponent, including template structure, component setup, and event handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-dialog-plugin-component.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- notice dialogRef here -->\n  <q-dialog ref=\"dialogRef\" @hide=\"onDialogHide\">\n    <q-card class=\"q-dialog-plugin\">\n      <!--\n        ...content\n        ... use q-card-section for it?\n      -->\n\n      <!-- buttons example -->\n      <q-card-actions align=\"right\">\n        <q-btn color=\"primary\" label=\"OK\" @click=\"onOKClick\" />\n        <q-btn color=\"primary\" label=\"Cancel\" @click=\"onCancelClick\" />\n      </q-card-actions>\n    </q-card>\n  </q-dialog>\n</template>\n\n<script>\nimport { useDialogPluginComponent } from 'quasar'\n\nexport default {\n  props: {\n    // ...your custom props\n  },\n\n  emits: [\n    // REQUIRED; need to specify some events that your\n    // component will emit through useDialogPluginComponent()\n    ...useDialogPluginComponent.emits\n  ],\n\n  setup () {\n    // REQUIRED; must be called inside of setup()\n    const { dialogRef, onDialogHide, onDialogOK, onDialogCancel } = useDialogPluginComponent()\n    // dialogRef      - Vue ref to be applied to QDialog\n    // onDialogHide   - Function to be used as handler for @hide on QDialog\n    // onDialogOK     - Function to call to settle dialog with \"ok\" outcome\n    //                    example: onDialogOK() - no payload\n    //                    example: onDialogOK({ /*.../* }) - with payload\n    // onDialogCancel - Function to call to settle dialog with \"cancel\" outcome\n\n    return {\n      // This is REQUIRED;\n      // Need to inject these (from useDialogPluginComponent() call)\n      // into the vue scope for the vue html template\n      dialogRef,\n      onDialogHide,\n\n      // other methods that we used in our vue html template;\n      // these are part of our example (so not required)\n      onOKClick () {\n        // on OK, it is REQUIRED to\n        // call onDialogOK (with optional payload)\n        onDialogOK()\n        // or with payload: onDialogOK({ ... })\n        // ...and it will also hide the dialog automatically\n      },\n\n      // we can passthrough onDialogCancel directly\n      onCancelClick: onDialogCancel\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: RegExp Validation in Quasar\nDESCRIPTION: Shows how to verify if a value is a regular expression using is.regexp utility. Works with both literal and constructor syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/type-checking-utils.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { is } from 'quasar'\n\nconst pattern1 = /\\w+/\nconsole.log( is.regexp(pattern1) ) // true\n\nconst pattern2 = new RegExp('\\\\w+')\nconsole.log( is.regexp(pattern2) ) // true\n```\n\n----------------------------------------\n\nTITLE: File Restrictions Implementation\nDESCRIPTION: Shows how to implement file type and size restrictions using QFile component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/file.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic restrictions\" file=\"RestrictionBasic\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in SSR Context\nDESCRIPTION: Demonstrates how to access cookies in a Server-Side Rendering context by using the parseSSR method with ssrContext. This pattern ensures proper cookie handling on both server and client sides.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\n\n// you need access to `ssrContext`\nfunction (ssrContext) {\n  const cookies = process.env.SERVER\n    ? Cookies.parseSSR(ssrContext)\n    : Cookies // otherwise we're on client\n\n  // \"cookies\" is equivalent to the global import as in non-SSR builds\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Quasar App Extension Install Script in JavaScript\nDESCRIPTION: Basic structure of the install script for a Quasar App Extension. The function receives an API object with various properties and methods for interacting with the host app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// can be async\nexport default function (api) {\n  // props and methods for \"api\" Object\n  // are described below\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Options in quasar.config File\nDESCRIPTION: This snippet demonstrates how to configure various SSR options in the quasar.config file, including PWA settings, store serialization, and server port configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  ssr: {\n    pwa?: boolean;\n    pwaOfflineHtmlFilename?: string;\n    pwaExtendGenerateSWOptions?: (config: object) => void;\n    pwaExtendInjectManifestOptions?: (config: object) => void;\n    manualStoreSerialization?: boolean;\n    manualStoreSsrContextInjection?: boolean;\n    manualStoreHydration?: boolean;\n    manualPostHydrationTrigger?: boolean;\n    prodPort?: number;\n    middlewares?: string[];\n    extendPackageJson?: (pkg: { [index in string]: any }) => void;\n    extendSSRWebserverConf?: (config: EsbuildConfiguration) => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR with PWA in Quasar Config\nDESCRIPTION: Configuration snippet for enabling PWA support in a server-side rendered Quasar application. This setting is added to the quasar.config file to enable PWA functionality alongside SSR.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-with-pwa.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  ssr: {\n    pwa: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deviceready Event in Vue Component\nDESCRIPTION: Demonstrates proper handling of Cordova's deviceready event in a Vue component file, showing how to safely access device APIs after initialization\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  ... we are sure 'deviceready' has been triggered here ...\n</template>\n\n<script>\n// outside of the default export,\n// we need to listen to the event for ourselves:\ndocument.addEventListener('deviceready', () => {\n  // it's only now that we are sure\n  // the event has triggered\n}, false)\n\nexport default {\n  // we are sure 'deviceready' has been triggered here\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirection in Quasar Boot Files\nDESCRIPTION: Example of redirecting to another page using a boot file. This checks for user authorization and redirects to the login page if the user is not authorized and not already on the login page.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(({ urlPath, redirect }) => {\n  // ...\n  const isAuthorized = // ...\n  if (!isAuthorized && !urlPath.startsWith('/login')) {\n    redirect({ path: '/login' })\n    return\n  }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Route Definition in Vue Router\nDESCRIPTION: Example of defining a route with lazy loading in Vue Router, which loads the component on demand.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/some-page',\n    component: () => import('pages/SomePage.vue')\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Quasar CLI Project\nDESCRIPTION: Commands for checking and performing upgrades in a Quasar UI v2 project using the Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# check for upgradable packages\n$ quasar upgrade\n\n# do the actual upgrade\n$ quasar upgrade --install\n```\n\n----------------------------------------\n\nTITLE: Quasar TypeScript Configuration\nDESCRIPTION: Extended TypeScript configuration for Quasar projects\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/supporting-ts.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"target\": \"esnext\",\n    \"allowJs\": true,\n    \"resolveJsonModule\": true,\n    \"moduleDetection\": \"force\",\n    \"isolatedModules\": true,\n    \"module\": \"preserve\",\n    \"noEmit\": true,\n    \"lib\": [\n      \"esnext\",\n      \"dom\",\n      \"dom.iterable\"\n    ],\n    \"paths\": { ... }\n  },\n  \"exclude\": [ ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useTimeout Composable in Quasar\nDESCRIPTION: This snippet demonstrates how to import and use the useTimeout composable in a Vue 3 setup function. It returns two functions: registerTimeout for scheduling a function execution after a delay, and removeTimeout for cancelling the scheduled timeout.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-timeout.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTimeout } from 'quasar'\n\nsetup () {\n  const {\n    registerTimeout,\n    removeTimeout\n  } = useTimeout()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation in Vue Options API\nDESCRIPTION: Implementation of form validation and reset functionality using Vue Options API with QForm references.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/form.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.$refs.myForm.validate().then(success => {\n  if (success) {\n    // yay, models are correct\n  }\n  else {\n    // oh no, user has filled in\n    // at least one invalid value\n  }\n})\n\n// to reset validations:\nthis.$refs.myForm.resetValidation()\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Utils with Tree-Shaking in Quasar\nDESCRIPTION: Demonstrates how to import only specific DOM utility methods using ES6 destructuring to help with Tree Shaking, which reduces bundle size by including only the methods you need.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\nconst { offset } = dom\n\n// Offset on screen\nconsole.log(offset(DomElement))\n// { top: 10, left: 100 }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Runtime Path Determination\nDESCRIPTION: Shows how dynamic imports can use paths determined at runtime, unlike static imports which require fixed paths at compile time.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport('pages/' + pageName + '/' + id)\n```\n\n----------------------------------------\n\nTITLE: Using Body Slot for Custom Row Rendering in QTable with Vue\nDESCRIPTION: Demonstrates how to use a body slot to customize the entire row rendering in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Body slot\" file=\"SlotBody\" />\n```\n\n----------------------------------------\n\nTITLE: Promisified Redirection in Quasar Boot Files\nDESCRIPTION: Example of using Promise rejection with a URL property to trigger redirects in Quasar boot files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(({ urlPath }) => {\n  return new Promise((resolve, reject) => {\n    // ...\n    const isAuthorized = // ...\n    if (!isAuthorized && !urlPath.startsWith('/login')) {\n      // the \"url\" param here is of the same type\n      // as for \"redirect\" above\n      reject({ url: '/login' })\n      return\n    }\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: QRange with Step Configuration\nDESCRIPTION: Demonstrates QRange implementation with step values, including floating point steps and snap-to-step functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/range.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With Step\" file=\"Step\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Opening Options in Quasar DevServer\nDESCRIPTION: Examples of configuring the devServer.open property to specify which browser should open the development server. Shows configuration for Google Chrome and Firefox browsers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// opens Google Chrome\ndevServer: {\n  open: {\n    app: { name: 'google chrome' }\n  }\n}\n\n// opens Firefox\ndevServer: {\n  open: {\n    app: { name: 'firefox' }\n  }\n}\n\n// opens Google Chrome and automatically deals with cross-platform issues:\nimport open from 'open'\n\ndevServer: {\n  open: {\n    app: { name: open.apps.chrome }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for BEX Components in JavaScript\nDESCRIPTION: This snippet shows how to define routes for different BEX components (Options, Popup, DevTools) using Vue Router in a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  { path: '/options', component: () => import('pages/OptionsPage.vue') },\n  { path: '/popup', component: () => import('pages/PopupPage.vue') },\n  { path: '/devtools', component: () => import('pages/DevToolsPage.vue') }\n]\n```\n\n----------------------------------------\n\nTITLE: Caching Listeners Example with Vue Render Functions\nDESCRIPTION: Example demonstrating how to cache click event listeners in Vue render functions to prevent unnecessary listener detachment and reattachment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-render-cache.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h } from 'vue'\nimport { useRenderCache } from 'quasar'\n\nexport default {\n  setup () {\n    const { getCache } = useRenderCache()\n\n    function getNode (i) {\n      return h('div', {\n        onClick: getCache(\n          `click#${ i }`,\n          () => { console.log(`clicked on node ${ i }`) }\n        )\n      })\n    }\n\n    function getContent () {\n      const acc = []\n      for (let i = 0; i < 10; i++) {\n        acc.push(\n          getNode(i)\n        )\n      }\n      return acc\n    }\n\n    return () => {\n      h('div', getContent)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting Axios Instance from Boot File\nDESCRIPTION: Creating an Axios instance with custom configuration and exporting it for use in other JavaScript files while also making it available in Vue components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\n\n// We create our own axios instance and set a custom base URL.\n// Note that if we wouldn't set any config here we do not need\n// a named export, as we could just `import axios from 'axios'`\nconst api = axios.create({\n  baseURL: 'https://api.example.com'\n})\n\n// for use inside Vue files through this.$axios and this.$api\n// (only in Vue Options API form)\nexport default defineBoot(({ app }) => {\n  app.config.globalProperties.$axios = axios\n  app.config.globalProperties.$api = api\n})\n\n// Here we define a named export\n// that we can later use inside .js files:\nexport { axios, api }\n```\n\n----------------------------------------\n\nTITLE: Basic QPullToRefresh Implementation\nDESCRIPTION: Basic implementation of QPullToRefresh component with refresh functionality. Requires implementing an @refresh handler that calls the done() callback when new data is loaded.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/pull-to-refresh.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Building PWA for Production with Quasar CLI\nDESCRIPTION: Commands for building a Progressive Web App for production using Quasar CLI. This creates an optimized build suitable for deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m pwa\n\n# ..or the longer form:\n$ quasar build --mode pwa\n```\n\n----------------------------------------\n\nTITLE: Checking if a Cookie Exists Inside a Vue Component\nDESCRIPTION: Demonstrates how to verify if a cookie exists inside a Vue component using the Composition API with useQuasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n  const hasIt = $q.cookies.has('cookie_name')\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Configuration in App.vue for SSR\nDESCRIPTION: Shows how to configure dark mode in the App.vue file specifically for SSR builds using the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dark.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    // calling here; equivalent to when component is created\n    $q.dark.set(true)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with Axios HTTP Requests\nDESCRIPTION: Example demonstrating how to use runSequentialPromises with Axios HTTP requests, including both array and object-based approaches.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSequentialPromises } from 'quasar'\nimport axios from 'axios'\n\nconst keyList = [ 'users', 'phones', 'laptops' ]\n\nrunSequentialPromises([\n  () => axios.get('https://some-url.com/users'),\n  () => axios.get('https://some-other-url.com/items/phones'),\n  () => axios.get('https://some-other-url.com/items/laptops')\n]).then(resultAggregator => {\n  resultAggregator.forEach(result => {\n    console.log(keyList[ result.key ], result.value)\n  })\n}).catch(errResult => {\n  console.error(`Error encountered while fetching ${ keyList[ errResult.key ] }:`)\n  console.error(errResult.reason)\n  console.log('Managed to get these results before this error:')\n  console.log(errResult.resultAggregator)\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Icon Set Configuration with @quasar/app-vite\nDESCRIPTION: Example of dynamically configuring the Quasar Icon Set in a boot file for @quasar/app-vite projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport { IconSet } from 'quasar'\n\n// relative path to your node_modules/quasar/..\n// change to YOUR path\nconst iconSetList = import.meta.glob('../../node_modules/quasar/icon-set/*.js')\n// or just a select few (example below with only mdi-v7 and fontawesome-v6):\n// import.meta.glob('../../node_modules/quasar/icon-set/(mdi-v7|fontawesome-v6).js')\n\nexport default defineBoot(async () => {\n  const iconSetName = 'mdi-v7' // ... some logic to determine it (use Cookies Plugin?)\n\n  try {\n    iconSetList[ `../../node_modules/quasar/icon-set/${ iconSetName }.js` ]().then(lang => {\n      IconSet.set(setDefinition.default)\n    })\n  }\n  catch (err) {\n    console.error(err)\n    // Requested Quasar Icon Set does not exist,\n    // let's not break the app, so catching error\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL with Postcss in Quasar CLI with Vite\nDESCRIPTION: Configuration for enabling RTL support in a Quasar project using Vite by uncommenting the rtlcss import and adding it to the PostCSS plugins. The highlighted lines show the changes needed to support right-to-left layouts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport autoprefixer from 'autoprefixer'\nimport rtlcss from 'postcss-rtlcss'\n\nexport default {\n  plugins: [\n    // https://github.com/postcss/autoprefixer\n    autoprefixer({\n      overrideBrowserslist: [\n        'last 4 Chrome versions',\n        'last 4 Firefox versions',\n        'last 4 Edge versions',\n        'last 4 Safari versions',\n        'last 4 Android versions',\n        'last 4 ChromeAndroid versions',\n        'last 4 FirefoxAndroid versions',\n        'last 4 iOS versions'\n      ]\n    }),\n\n    // https://github.com/elchininet/postcss-rtlcss\n    // If you want to support RTL css, then\n    // 1. yarn/pnpm/bun/npm install postcss-rtlcss\n    // 2. optionally set quasar.config.js > framework > lang to an RTL language\n    // 3. uncomment the following line (and its import statement above):\n    rtlcss()\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QTable with Virtual Scroll and Expansion Model in Vue\nDESCRIPTION: Demonstrates how to use virtual scroll with QTable and an expansion model. It includes information about special CSS classes for handling virtual scroll size calculations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Virtual scroll with expansion model\" file=\"VirtscrollExpandedRow\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Router in Pinia Stores\nDESCRIPTION: Shows how to access the Vue Router within a Pinia store action. This allows for navigation operations directly from store actions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/state-management-with-pinia.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useWhateverStore = defineStore('whatever', {\n  // ...\n  actions: {\n    whateverAction () { // do NOT use arrow function\n      this.router.push('...')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete useMeta Implementation Example in Vue Component\nDESCRIPTION: Full example showing how to implement reactive meta updates using useMeta composable with ref and component setup function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-meta.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport { useMeta } from 'quasar'\n\nexport default {\n  setup () {\n    const title = ref('Some title') // we define the \"title\" prop\n\n    // NOTICE the parameter here is a function\n    // Under the hood, it is converted to a Vue computed prop for reactivity\n    useMeta(() => {\n      return {\n        // whenever \"title\" from above changes, your meta will automatically update\n        title: title.value\n      }\n    })\n\n    function setAnotherTitle () {\n      title.value = 'Another title' // will automatically trigger a Meta update due to the binding\n    }\n\n    return {\n      setAnotherTitle\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Back Button Behavior in Quasar Config File\nDESCRIPTION: This snippet shows how to configure the back button behavior for Capacitor apps in the quasar.config file. It includes options for handling app exit on mobile phone back button and disabling Quasar's back button management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      capacitor: {\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up BEX Bridge in Content Script\nDESCRIPTION: This code demonstrates how to import, create, and connect the BEX bridge in a content script. It includes error handling for the connection process and explains the structure of the bridge's portName.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/content'\n\nconst bridge = createBridge({ debug: false })\n\nbridge.connectToBackground()\n  .then(() => {\n    console.log('Connected to background')\n  })\n  .catch(err => {\n    console.error('Failed to connect to background:', err)\n  })\n```\n\n----------------------------------------\n\nTITLE: Using the Quasar Global Object in JavaScript\nDESCRIPTION: Examples of accessing and using various parts of the Quasar global object, including components, utilities, and plugins in a JavaScript context.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nQuasar.QBtn\nQuasar.getCssVar('primary')\nQuasar.debounce(fn, 200)\nQuasar.Notify.create('Hi and welcome!')\nQuasar.utils.is.deepEqual(objA, objB)\n```\n\n----------------------------------------\n\nTITLE: QIntersection List Implementation\nDESCRIPTION: Example of using QIntersection with a list of items, incorporating transition effects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/intersection.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"A list with transition\" file=\"List\" scrollable no-edit />\n```\n\n----------------------------------------\n\nTITLE: Developing SPA with Quasar CLI\nDESCRIPTION: Command to start the development server for a Quasar single page application. This launches the app in development mode with hot-reloading and other development features.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev\n```\n\n----------------------------------------\n\nTITLE: Service Worker Registration in Quasar\nDESCRIPTION: JavaScript code for registering and handling Service Worker lifecycle events in a Quasar application. Implements various callbacks for ready, registered, cached, updated, offline, and error states.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/handling-service-worker.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { register } from 'register-service-worker'\n\nregister(process.env.SERVICE_WORKER_FILE, {\n  ready (registration) {\n    console.log('Service worker is active.')\n  },\n\n  registered (registration) {\n    console.log('Service worker has been registered.')\n  },\n\n  cached (registration) {\n    console.log('Content has been cached for offline use.')\n  },\n\n  updatefound (registration) {\n    console.log('New content is downloading.')\n  },\n\n  updated (registration) {\n    console.log('New content is available; please refresh.')\n  },\n\n  offline () {\n    console.log('No internet connection found. App is running in offline mode.')\n  },\n\n  error (error) {\n    console.error('Error during service worker registration:', error)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Standard QRange Implementation\nDESCRIPTION: Basic implementation of QRange component that allows selection of a range between min and max values. Uses an object for selection that holds both lower (min) and higher (max) values.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/range.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Standard\" file=\"Standard\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Plugins in Quasar Config File\nDESCRIPTION: Illustrates different ways to add Vite plugins in the Quasar config file. It shows how to enable or disable plugins for client-side or server-side, and demonstrates various syntaxes for plugin configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  vitePlugins: [\n    [ '<plugin-name>', { /* plugin options */ } ],\n    [ '<plugin-name>', { /* plugin options */ }, { server: true, client: true } ],\n    [ '<plugin-name>', { /* plugin options */ }, { server: false } ],\n    [ '<plugin-name>', { /* plugin options */ }, { client: false } ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: QImg Fit Modes\nDESCRIPTION: Shows different fit modes available with QImg component including cover, fill, contain, none, and scale-down.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/img.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Fit modes\" file=\"FitModes\" />\n```\n\n----------------------------------------\n\nTITLE: Quasar App Event Handler Setup\nDESCRIPTION: Setup function in Quasar application that demonstrates how to send messages to content scripts using the BEX bridge for highlighting content.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetup () {\n  const $q = useQuasar()\n\n  async function myButtonClickHandler () {\n    await $q.bex.send('highlight.content', { selector: '.some-class' })\n    $q.notify('Text has been highlighted')\n  }\n\n  return { myButtonClickHandler }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in quasar.config.js\nDESCRIPTION: This example shows how to access terminal variables and pass environment variables to the UI code from the quasar.config.js file. It demonstrates setting different API URLs for development and production builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing terminal variables\nconsole.log(process.env)\n\nexport default defineConfig((ctx) => {\n  return {\n    // ...\n\n    build: {\n      // passing down to UI code from the quasar.config file\n      env: {\n        API: ctx.dev\n          ? 'https://dev.api.com'\n          : 'https://prod.api.com'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Service Worker Implementation\nDESCRIPTION: Default implementation of a custom service worker for PWA when using Workbox's InjectManifest mode, including precaching and routing configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/configuring-pwa.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clientsClaim } from 'workbox-core'\nimport {\n  precacheAndRoute,\n  cleanupOutdatedCaches,\n  createHandlerBoundToURL,\n} from 'workbox-precaching'\nimport { registerRoute, NavigationRoute } from 'workbox-routing'\n\nself.skipWaiting();\nclientsClaim();\n\n// Use with precache injection\nprecacheAndRoute(self.__WB_MANIFEST)\n\ncleanupOutdatedCaches()\n\n// Non-SSR fallbacks to index.html\n// Production SSR fallbacks to offline.html (except for dev)\nif (process.env.MODE !== 'ssr' || process.env.PROD) {\n  registerRoute(\n    new NavigationRoute(\n      createHandlerBoundToURL(process.env.PWA_FALLBACK_HTML),\n      { denylist: [new RegExp(process.env.PWA_SERVICE_WORKER_REGEX), /workbox-(.)*\\.js$/] }\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Body-Cell Slot for Custom Cell Rendering in QTable with Vue\nDESCRIPTION: Shows how to use a body-cell slot to customize the rendering of each cell in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Body-cell slot\" file=\"SlotBodyCell\" />\n```\n\n----------------------------------------\n\nTITLE: Closing Multiple Levels of Popups with v-close-popup Directive in Vue\nDESCRIPTION: This snippet demonstrates how to use the v-close-popup directive to close multiple levels of popups. The value passed to the directive determines how many levels of popups to close.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/close-popup.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<... v-close-popup=\"3\">\n```\n\n----------------------------------------\n\nTITLE: Date Arithmetic Operations\nDESCRIPTION: Examples of adding, subtracting, and adjusting dates using Quasar's date utilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nlet newDate = new Date(2017, 2, 7)\n\nnewDate = date.addToDate(newDate, { days: 7, months: 1 })\n// `newDate` is now 2017-3-14 00:00:00\n\nnewDate = date.subtractFromDate(newDate, { hours: 24, milliseconds: 10000 })\n// `newDate` is now 2017-3-12 23:59:50\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date(2017, 10, 2)\nconst adjustedDate = date.adjustDate(newDate, { year: 2010, month: 2 })\n// `adjustedDate` is 2010-2-2\n```\n\n----------------------------------------\n\nTITLE: API Documentation for runSequentialPromises\nDESCRIPTION: Detailed API documentation for the runSequentialPromises function, including parameter descriptions, return types, and various usage scenarios. The function supports both array and object-based promise sequences with configurable threading and error handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Run a list of Promises sequentially, optionally on multiple threads.\n *\n * @param {*} sequentialPromises - Array of Functions or Object with Functions as values\n *                          Array of Function form: [ (resultAggregator: Array) => Promise<any>, ... ]\n *                          Object form: { [key: string]: (resultAggregator: object) => Promise<any>, ... }\n * @param {*} opts - Optional options Object\n *                   Object form: { threadsNumber?: number, abortOnFail?: boolean }\n *                   Default: { threadsNumber: 1, abortOnFail: true }\n *                   When configuring threadsNumber AND using http requests, be\n *                       aware of the maximum threads that the hosting browser\n *                       supports (usually 5); any number of threads above that\n *                       won't add any real benefits\n * @returns Promise<Array<Object> | Object>\n */\n```\n\n----------------------------------------\n\nTITLE: Vue Router 4 Configuration Setup\nDESCRIPTION: Default router configuration for Vue Router 4 in Quasar, showing how to create and configure the router instance with different history modes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createMemoryHistory, createWebHistory, createWebHashHistory } from 'vue-router'\nimport routes from './routes'\n\nexport default function (/* { store, ssrContext } */) {\n  const createHistory = process.env.SERVER\n    ? createMemoryHistory\n    : process.env.VUE_ROUTER_MODE === 'history' ? createWebHistory : createWebHashHistory\n\n  const Router = createRouter({\n    scrollBehavior: () => ({ left: 0, top: 0 }),\n    routes,\n\n    // Leave this as is and make changes in the quasar.config file instead!\n    // quasar.config file -> build -> vueRouterMode\n    // quasar.config file -> build -> publicPath\n    history: createHistory(process.env.VUE_ROUTER_BASE)\n  })\n\n  return Router\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating serverless-http Package for SSR in Quasar Framework\nDESCRIPTION: This example demonstrates how to use the serverless-http package to create a handler for serverless environments. It wraps the app with serverless-http in production while maintaining the development server setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-webserver.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrListen } from '#q-app/wrappers'\nimport serverless from 'serverless-http'\n\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  if (process.env.DEV) {\n    // for dev, start listening on the created server\n    const server = devHttpsApp || app;\n    return server.listen(port, () => {\n      // we're ready to serve clients\n    })\n  }\n  else { // in production\n    return { handler: serverless(app) }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Vue Directive in Boot File\nDESCRIPTION: Boot file that globally registers the custom directive with Vue, making it available throughout the application as v-my-directive.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/provide-a-directive.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyDirective from '../directive/MyDirective.js'\n\nexport default ({ app }) => {\n  app.directive('my-directive', MyDirective)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Icons in a Vue Component with Quasar Framework\nDESCRIPTION: This snippet demonstrates how to import and use SVG icons from different icon sets in a Vue component using Quasar Framework. It shows the usage of q-icon and q-btn components with imported SVG icons.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/extras/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-icon :name=\"matMenu\" />\n    <q-btn :icon=\"mdiAbTesting\" />\n  </div>\n</template>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nimport { matMenu } from '@quasar/extras/material-icons'\nimport { mdiAbTesting } from '@quasar/extras/mdi-v5'\n\nexport default {\n  // ...\n  created () {\n    this.matMenu = matMenu\n    this.mdiAbTesting = mdiAbTesting\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Date Utils with ES6 Destructuring\nDESCRIPTION: Shows how to import specific date utility functions using ES6 destructuring to optimize tree shaking.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// we import all of `date`\nimport { date } from 'quasar'\n// destructuring to keep only what is needed\nconst { addToDate } = date\n\nconst newDate = addToDate(new Date(), { days: 7, months: 1 })\n```\n\n----------------------------------------\n\nTITLE: Messaging Through BEX Bridge\nDESCRIPTION: This comprehensive snippet demonstrates various messaging techniques using the BEX bridge, including listening for messages, sending messages with payload chunking, handling responses, broadcasting messages, and listening for connection events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen to a message from the client\nbridge.on('test', message => {\n  console.log(message)\n  console.log(message.payload)\n  console.log(message.from)\n})\n\n// Send a message and split payload into chunks\nbridge.send({\n  event: 'test',\n  to: 'app',\n  payload: [ 'chunk1', 'chunk2', 'chunk3', ... ]\n}).then(responsePayload => { ... }).catch(err => { ... })\n\n// Send a message and wait for a response\nbridge.send({\n  event: 'test',\n  to: 'background',\n  payload: { banner: 'Hello from content-script' }\n}).then(responsePayload => { ... }).catch(err => { ... })\n\n// Listen to a message from the client and respond synchronously\nbridge.on('test', message => {\n  console.log(message)\n  return { banner: 'Hello from a content-script!' }\n})\n\n// Listen to a message from the client and respond asynchronously\nbridge.on('test', async message => {\n  console.log(message)\n  const result = await someAsyncFunction()\n  return result\n})\nbridge.on('test', message => {\n  console.log(message)\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({ banner: 'Hello from a content-script!' })\n    }, 1000)\n  })\n})\n\n// Broadcast a message to app & content scripts\nbridge.portList.forEach(portName => {\n  bridge.send({ event: 'test', to: portName, payload: 'Hello from background!' })\n})\n\n// Find any connected content script and send a message to it\nconst contentPort = bridge.portList.find(portName => portName.startsWith('content@'))\nif (contentPort) {\n  bridge.send({ event: 'test', to: contentPort, payload: 'Hello from background!' })\n}\n\n// Send a message to a certain content script\nbridge\n  .send({ event: 'test', to: 'content@my-content-script-2345', payload: 'Hello from a content-script!' })\n  .then(responsePayload => { ... })\n  .catch(err => { ... })\n\n// Listen for connection events\nbridge.on('@quasar:ports', ({ portList, added, removed }) => {\n  console.log('Ports:', portList)\n  if (added) {\n    console.log('New connection:', added)\n  } else if (removed) {\n    console.log('Connection removed:', removed)\n  }\n})\n\n// Current bridge port name\nconsole.log(bridge.portName)\n```\n\n----------------------------------------\n\nTITLE: Manual Post-Hydration Triggering with Composition API\nDESCRIPTION: Example using Vue Composition API to manually trigger post-hydration in a Quasar SSR application when the manualPostHydrationTrigger option is enabled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// App.vue\n\nimport { onMounted } from 'vue'\nimport { useQuasar } from 'quasar'\nexport default {\n  // ....\n  setup () {\n    // ...\n    const $q = useQuasar()\n    onMounted(() => {\n      $q.onSSRHydrated()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Implementation in Vue Component\nDESCRIPTION: Vue component implementation showing how to capture and display images using the Cordova camera plugin\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-btn color=\"primary\" label=\"Get Picture\" @click=\"captureImage\" />\n\n    <img :src=\"imageSrc\">\n  </div>\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\nimport { ref } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n    const imageSrc = ref('')\n\n    function captureImage () {\n      navigator.camera.getPicture(\n        data => { // on success\n          imageSrc.value = `data:image/jpeg;base64,${data}`\n        },\n        () => { // on fail\n          $q.notify('Could not access device camera.')\n        },\n        {\n          // camera options\n        }\n      )\n    }\n\n    return {\n      imageSrc,\n      captureImage\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Scripts for BEX in quasar.config\nDESCRIPTION: Demonstrates how to add extra scripts to be compiled and used in the browser extension, which are not included in the manifest file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbex: {\n  /**\n   * The list of extra scripts (js/ts) not in your bex manifest that you want to\n   * compile and use in your browser extension. Maybe dynamic use them?\n   *\n   * Each entry in the list should be a relative filename to /src-bex/\n   *\n   * @example [ 'my-script.ts', 'sub-folder/my-other-script.js' ]\n   */\n  extraScripts?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Column Cell in QTable with Vue\nDESCRIPTION: Demonstrates how to use a body-cell-[name] slot to customize the rendering of a specific column in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Body-cell-[name] slot\" file=\"SlotBodyCellName\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Validation Rule in JavaScript for QInput\nDESCRIPTION: This snippet demonstrates how to create a simple validation rule for a QInput component. The rule checks if the input value includes the word 'Hello' and returns an error message if it doesn't.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/input.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvalue => value.includes('Hello') || 'Field must contain word Hello'\n```\n\n----------------------------------------\n\nTITLE: Router Authentication Boot File\nDESCRIPTION: Example of implementing router authentication logic in a Quasar boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\n\nexport default defineBoot(({ router, store }) => {\n  router.beforeEach((to, from, next) => {\n    // Now you need to add your authentication logic here, like calling an API endpoint\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useInterval Composable in Quasar\nDESCRIPTION: This snippet demonstrates how to import and use the useInterval composable in a Vue 3 setup function. It shows the basic structure and available methods.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-interval.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterval } from 'quasar'\n\nsetup () {\n  const {\n    registerInterval,\n    removeInterval\n  } = useInterval()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Boot File for Brand Colors\nDESCRIPTION: Example of setting up default brand colors using a Quasar boot file\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { setCssVar } from 'quasar'\nimport { defineBoot } from '#q-app/wrappers'\n\nexport default defineBoot(() => {\n  setCssVar('primary', '#ff0000')\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Router Pages Statically in Quasar\nDESCRIPTION: Demonstrates the standard way to define Vue Router routes using static imports. This approach loads all components upfront during initial bundle loading.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SomePage from 'pages/SomePage'\n\nconst routes = [\n  {\n    path: '/some-page',\n    component: SomePage\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Manual Store Hydration in Quasar SSR Boot File\nDESCRIPTION: Code snippet demonstrating how to manually hydrate a Pinia store on the client-side using a boot file when the manualStoreHydration option is enabled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// MAKE SURE TO CONFIGURE THIS BOOT FILE\n// TO RUN ONLY ON CLIENT-SIDE\nimport { defineBoot } from '#q-app/wrappers'\n\nexport default defineBoot(({ store }) => {\n  // For Pinia\n  store.state.value = window.__INITIAL_STATE__\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for PWA Mode\nDESCRIPTION: TypeScript configurations specific to PWA mode in a Quasar project, including environment declarations and service worker setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    SERVICE_WORKER_FILE: string;\n    PWA_FALLBACK_HTML: string;\n    PWA_SERVICE_WORKER_REGEX: string;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// at the top of the file\ndeclare const self: ServiceWorkerGlobalScope &\n  typeof globalThis & { skipWaiting: () => void };\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar Configuration to Include a Plugin in JavaScript\nDESCRIPTION: The extendConf function that adds the AppVisibility plugin to the host app's quasar.config framework plugins array. This ensures the plugin will be available to the application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/inject-quasar-plugin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction extendConf (conf) {\n  // we push to /quasar.config file > framework > plugins:\n  conf.framework.plugins.push('AppVisibility')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Error Handling Middleware in Quasar\nDESCRIPTION: Core middleware implementation for handling SSR rendering and error cases in Quasar applications. Manages route catching, page rendering, and error handling including 404 and 500 responses.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrMiddleware } from '#q-app/wrappers'\n\n// This middleware should execute as last one\n// since it captures everything and tries to\n// render the page with Vue\n\nexport default defineSsrMiddleware(({ app, resolve, render, serve }) => {\n  // we capture any other Express route and hand it\n  // over to Vue and Vue Router to render our page\n  app.get(resolve.urlPath('*'), (req, res) => {\n    res.setHeader('Content-Type', 'text/html')\n\n    render(/* the ssrContext: */ { req, res })\n      .then(html => {\n        // now let's send the rendered html to the client\n        res.send(html)\n      })\n      .catch(err => {\n        // oops, we had an error while rendering the page\n\n        // we were told to redirect to another URL\n        if (err.url) {\n          if (err.code) {\n            res.redirect(err.code, err.url)\n          } else {\n            res.redirect(err.url)\n          }\n        } else if (err.code === 404) {\n          // hmm, Vue Router could not find the requested route\n\n          // Should reach here only if no \"catch-all\" route\n          // is defined in /src/routes\n          res.status(404).send('404 | Page Not Found')\n        } else if (process.env.DEV) {\n          // well, we treat any other code as error;\n          // if we're in dev mode, then we can use Quasar CLI\n          // to display a nice error page that contains the stack\n          // and other useful information\n\n          // serve.error is available on dev only\n          serve.error({ err, req, res })\n        } else {\n          // we're in production, so we should have another method\n          // to display something to the client when we encounter an error\n          // (for security reasons, it's not ok to display the same wealth\n          // of information as we do in development)\n\n          // Render Error Page on production or\n          // create a route (/src/routes) for an error page and redirect to it\n          res.status(500).send('500 | Internal Server Error')\n\n          if (process.env.DEBUGGING) {\n            console.error(err.stack)\n          }\n        }\n      })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning the Forked Quasar Repository\nDESCRIPTION: Commands to clone the forked Quasar repository to your local machine and checkout the development branch. This is the first step in setting up your local environment for contributing to Quasar documentation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/your-user-name/quasar.git\n$ cd quasar\n$ git checkout dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Installation Script for Quasar App Extension\nDESCRIPTION: The install.js script handles rendering template files into the host application based on user prompts. It checks Quasar compatibility and conditionally renders different service templates depending on user selections.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api) {\n  // (Optional!)\n  // Quasar compatibility check; you may need\n  // hard dependencies, as in a minimum version of the \"quasar\"\n  // package or a minimum version of Quasar App CLI\n  api.compatibleWith('quasar', '^2.0.0')\n\n  if (api.hasVite === true) {\n    api.compatibleWith('@quasar/app-vite', '^2.0.0')\n  }\n  else { // api.hasWebpack === true\n    api.compatibleWith('@quasar/app-webpack', '^4.0.0')\n  }\n\n  // We render some files into the hosting project\n\n  if (api.prompts.serviceA) {\n    api.render('./templates/serviceA')\n  }\n\n  if (api.prompts.serviceB) {\n    // we supply interpolation variables\n    // to the template\n    api.render('./templates/serviceB', {\n      productName: api.prompts.productName\n    })\n  }\n\n  // we always render the following template:\n  api.render('./templates/common-files')\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including SSR-Specific Content in index.html\nDESCRIPTION: HTML template syntax for conditionally including content that should only be rendered in SSR builds using the ctx.mode.ssr check.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<% if (ctx.mode.ssr) { %>{{ someProp }} <% } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring manifest.json for Browser Extensions\nDESCRIPTION: Illustrates the structure of the manifest.json file for browser extensions, including shared configurations and browser-specific settings for Chrome and Firefox.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": {\n    \"manifest_version\": 3,\n\n    \"icons\": {\n      \"16\": \"icons/icon-16x16.png\",\n      \"48\": \"icons/icon-48x48.png\",\n      \"128\": \"icons/icon-128x128.png\"\n    },\n\n    \"permissions\": [\n      \"storage\",\n      \"tabs\"\n    ],\n\n    \"host_permissions\": [ \"*://*/*\" ],\n    \"content_security_policy\": {\n      \"extension_pages\": \"script-src 'self'; object-src 'self';\"\n    },\n    \"web_accessible_resources\": [\n      {\n        \"resources\": [ \"*\" ],\n        \"matches\": [ \"*://*/*\" ]\n      }\n    ],\n\n    \"action\": {\n      \"default_popup\": \"www/index.html\"\n    },\n\n    \"content_scripts\": [\n      {\n        \"matches\": [ \"<all_urls>\" ],\n        \"css\": [ \"assets/content.css\" ],\n        \"js\": [ \"my-content-script.ts\" ]\n      }\n    ]\n  },\n\n  \"chrome\": {\n    \"background\": {\n      \"service_worker\": \"background.ts\"\n    }\n  },\n\n  \"firefox\": {\n    \"background\": {\n      \"scripts\": [ \"background.ts\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using chainWebpack to Add ESLint Loader in Quasar Config\nDESCRIPTION: Equivalent configuration using the chainWebpack method to add ESLint loader to the Webpack configuration in a Quasar app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  chainWebpack (chain, { isServer, isClient }) {\n    chain.module.rule('eslint')\n      .test(/\\.(js|vue)$/)\n      .enforce('pre')\n      .exclude\n        .add((/[\\\\/]node_modules[\\\\/]/))\n        .end()\n      .use('eslint-loader')\n        .loader('eslint-loader')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Quasar Project Modes\nDESCRIPTION: Demonstrates how to add or remove support for different Quasar modes including PWA, BEX, Cordova, Capacitor, and Electron. It also shows how to check currently installed modes and provides information about mode-specific folders.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode -h\n\n  Description\n    Add/Remove support for PWA / BEX / Cordova / Capacitor / Electron modes.\n\n  Usage\n    $ quasar mode [add|remove] [pwa|ssr|bex|cordova|capacitor|electron] [--yes]\n\n    # determine what modes are currently installed:\n    $ quasar mode\n\n  Options\n    --yes, -y     Skips the \"Are you sure?\" question\n                  when removing a Quasar mode\n    --help, -h    Displays this message\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode remove pwa\n```\n\n----------------------------------------\n\nTITLE: Defining SSR Middleware in Quasar\nDESCRIPTION: Demonstrates how to define an SSR middleware function using the defineSsrMiddleware wrapper. The function receives an object with various properties for server configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrMiddleware } from '#q-app/wrappers'\n\nexport default defineSsrMiddleware(({\n  app,\n  port,\n  resolve,\n  publicPath,\n  folders,\n  render,\n  serve\n}) => {\n  // something to do with the server \"app\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using Loading Plugin Inside Vue Component\nDESCRIPTION: Example showing how to use the Loading plugin within a Vue component setup function using the useQuasar hook\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.loading.show({\n    delay: 400 // ms\n  })\n\n  $q.loading.hide()\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple File Selection in Vue\nDESCRIPTION: Example showing how to configure QFile for multiple file selection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/file.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Multiple files\" file=\"BasicMultiple\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration for SSR in quasar.config\nDESCRIPTION: Example showing how to extend webpack configuration specifically for server-side and client-side builds using the isServer and isClient flags in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendWebpack(cfg, { isServer, isClient }) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Boot File Creation Command\nDESCRIPTION: CLI command to generate a new boot file in a Quasar project with optional TypeScript support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new boot <name> [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Implementing Axios in Pinia Store Actions\nDESCRIPTION: Shows how to use Axios within Pinia store actions for authentication, including setting global headers after successful API requests.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/ajax-requests.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { api } from 'boot/axios'\n\nexport const useAuthStore = defineStore('auth', {\n  actions: {\n    register (form) {\n      return api.post('/auth/register', form)\n        .then(response => {\n          api.defaults.headers.common['Authorization'] = 'Bearer ' + response.data.token\n          // do something with { token: response.data.token, user: response.data.user }\n        })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera API with Capacitor in Vue Component\nDESCRIPTION: Integration of Capacitor's Camera API to capture and display images in a Vue component. Includes image quality settings and different result type handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-btn color=\"primary\" label=\"Get Picture\" @click=\"captureImage\" />\n\n    <img :src=\"imageSrc\">\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { Camera, CameraResultType } from '@capacitor/camera'\n\nexport default {\n  setup () {\n    const imageSrc = ref('')\n\n    async function captureImage () {\n      const image = await Camera.getPhoto({\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Uri\n      })\n\n      imageSrc.value = image.webPath\n    }\n\n    return {\n      imageSrc,\n      captureImage\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Touch Swipe Directive Implementation\nDESCRIPTION: Basic implementation of the v-touch-swipe directive with mouse event support. The directive allows handling swipe gestures from both touch and mouse inputs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-swipe.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-swipe.mouse=\"userHasSwiped\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Vite Plugin Configuration in Quasar Config\nDESCRIPTION: Shows how to conditionally apply Vite plugin configurations based on Quasar modes or development/production environments using the context (ctx) parameter in the Quasar config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf, { isClient, isServer }) {\n        if (ctx.mode.pwa) {\n          viteConf.plugins.push(/* ... */)\n        }\n\n        if (ctx.dev) {\n          viteConf.plugins.push(/* ... */)\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Google Analytics in Quasar\nDESCRIPTION: This JavaScript code sets up an afterEach hook on the router to log page views to Google Analytics after each route change. It's designed to be used in a Quasar boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\nimport ga from 'analytics.js'\n\nexport default defineRouter(({ router }) => {\n  router.afterEach((to, from) => {\n    ga.logPage(to.path, to.name, sessionId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring App Extension Index for Quasar Plugin in JavaScript\nDESCRIPTION: The main index.js file of a Quasar App Extension that sets up compatibility checks with Quasar and extends the quasar.config file of the host app. It performs Quasar version compatibility checks and calls the extendConf method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/inject-quasar-plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api) {\n  // (Optional!)\n  // Quasar compatibility check; you may need\n  // hard dependencies, as in a minimum version of the \"quasar\"\n  // package or a minimum version of Quasar App CLI\n  api.compatibleWith('quasar', '^2.0.0')\n\n  if (api.hasVite === true) {\n    api.compatibleWith('@quasar/app-vite', '^2.0.0')\n  }\n  else { // api.hasWebpack === true\n    api.compatibleWith('@quasar/app-webpack', '^4.0.0')\n  }\n\n  // Here we extend /quasar.config file, so we can add\n  // a boot file which registers our new Vue directive;\n  // \"extendConf\" will be defined below (keep reading the tutorial)\n  api.extendQuasarConf(extendConf)\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dynamic Imports with File Extensions\nDESCRIPTION: Demonstrates how to optimize dynamic imports by specifying file extensions to reduce the number of generated chunks during build.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// bad\nimport('./folder/' + pageName)\n\n// much better\nimport('./folder/' + pageName + '.vue')\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Middleware in Quasar Config\nDESCRIPTION: Configuration setup for SSR middlewares in quasar.config file, showing how to position the render middleware as the last one in the execution chain.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nssr: {\n  middlewares: [\n    // ..... all other middlewares\n\n    'render' // references /src-ssr/middlewares/render.js;\n             // you can name the file however you want,\n             // just make sure that it runs as last middleware\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Environment Variables in quasar.config.js\nDESCRIPTION: This snippet shows how to use the envFilter function in quasar.config.js to filter out unwanted environment variables or modify their values before they are exposed to the client-side code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  // @quasar/app-vite v2.0.3+\n  envFilter (originalEnv) {\n    const newEnv = {}\n    for (const key in originalEnv) {\n      if (/* ...decide if it goes in or not... */) {\n        newEnv[ key ] = originalEnv[ key ]\n      }\n    }\n\n    // remember to return your processed env\n    return newEnv\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Example of QTabPanels with Nested QTabs in Vue\nDESCRIPTION: Illustrates a more advanced use case with nested tab structures, demonstrating the flexibility of QTabPanels and QTabs components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"A more complex example\" file=\"WithNestedQTabs\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript in VS Code for Quasar Projects\nDESCRIPTION: VS Code settings to specify the TypeScript SDK path for Quasar projects using TypeScript.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript.tsdk\": \"node_modules/typescript/lib\"\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Virtual Scroll\nDESCRIPTION: Example demonstrating horizontal virtual scrolling functionality\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/virtual-scroll.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Horizontal\" file=\"BasicHorizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Using Platform Detection in Vue Template\nDESCRIPTION: Shows how to access platform information directly in a Vue template.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/platform-detection.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$q.platform.is.cordova\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSplitAttrs in Quasar\nDESCRIPTION: Demonstrates the basic implementation of useSplitAttrs composable in a Vue setup function. Shows how to import and destructure the composable to access attributes and listeners.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-split-attrs.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSplitAttrs } from 'quasar'\n\nsetup () {\n  const {\n    attributes,\n    listeners\n  } = useSplitAttrs()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Express.js with Connect in Quasar SSR\nDESCRIPTION: This code snippet demonstrates how to replace the default Express.js server with Connect, an alternative lightweight connect API compatible server. The code shows the create function that initializes the Connect server with compression middleware for production.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-webserver.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrCreate } from '#q-app/wrappers'\nimport connect from 'connect'\nimport compression from 'compression'\n\nexport const create = defineSsrCreate((/* { ... } */) => {\n  const app = connect()\n\n  // place here any middlewares that\n  // absolutely need to run before anything else\n  if (process.env.PROD) {\n    app.use(compression())\n  }\n\n  return app\n})\n```\n\n----------------------------------------\n\nTITLE: Containerized QLayout Example in Vue\nDESCRIPTION: Demonstrates a containerized QLayout with drawers on each side, using specific breakpoints for the drawers. The layout is contained within a div with a set height.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/layout/layout.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Containerized QLayout\" file=\"Container\" />\n```\n\n----------------------------------------\n\nTITLE: Checkbox with QItem Integration\nDESCRIPTION: Shows how to integrate QCheckbox within QItem components using label tags for improved click response.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With QItem\" file=\"InaList\" />\n```\n\n----------------------------------------\n\nTITLE: Using Header Slot for Custom Header Row Rendering in QTable with Vue\nDESCRIPTION: Shows how to use a header slot to customize the entire header row rendering in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Header slot\" file=\"SlotHeader\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Analytics Event and Page Tracking Module in JavaScript\nDESCRIPTION: Defines an analytics module with methods for logging events and page views to Google Analytics through Google Tag Manager's dataLayer. Includes functions for tracking custom events and screen views with optional session ID support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logEvent(category, action, label, sessionId = null) {\n    window.dataLayer.push({\n      appEventCategory: category,\n      appEventAction: action,\n      appEventLabel: label,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appEvent' })\n  },\n\n  logPage(path, name, sessionId = null) {\n    window.dataLayer.push({\n      screenPath: path,\n      screenName: name,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appScreenView' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Code Stripping Based on process.env in JavaScript\nDESCRIPTION: This example shows how if() branches depending on process.env are evaluated at compile-time, resulting in code stripping for production builds. The unused branch is completely removed from the final bundle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.DEV) {\n  console.log('dev')\n}\nelse {\n  console.log('build')\n}\n\n// running with \"quasar dev\" will result in:\nconsole.log('dev')\n// while running with \"quasar build\" will result in:\nconsole.log('build')\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar Dependencies\nDESCRIPTION: Command to install the required dependencies for the Quasar project using pnpm. This must be executed after cloning the repository to set up the development environment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm i\n```\n\n----------------------------------------\n\nTITLE: Middleware Parameter Object Structure\nDESCRIPTION: Detailed structure of the middleware parameter object showing all available properties and their types.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  app, // Expressjs app or whatever is returned from src-ssr/server -> create()\n  port, // on dev: devServer port; on prod: process.env.PORT or quasar.config > ssr > prodPort\n  resolve: {\n    urlPath, // (url) => path string with publicPath ensured to be included,\n    root, // (pathPart1, ...pathPartN) => path string (joins to the root folder),\n    public // (pathPart1, ...pathPartN) => path string (joins to the public folder)\n  },\n  publicPath, // string\n  folders: {\n    root, // path string of the root folder\n    public // path string of the public folder\n  },\n  render, // (ssrContext) => html string\n  serve: {\n    static, // ({ urlPath = '/', pathToServe = '.', opts = {} }) => void (OR whatever returned by src-ssr/server -> serveStaticContent())\n    error // DEV only; ({ err, req, res }) => void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript ESLint Configuration\nDESCRIPTION: Complete ESLint configuration for JavaScript projects including Vue.js specific rules and global settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/linter.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport js from '@eslint/js'\nimport globals from 'globals'\nimport pluginVue from 'eslint-plugin-vue'\nimport pluginQuasar from '@quasar/app-webpack/eslint'\n\n// the following is optional, if you want prettier too:\nimport prettierSkipFormatting from '@vue/eslint-config-prettier/skip-formatting'\n\nexport default [\n  {\n    // ignores: []\n  },\n\n  ...pluginQuasar.configs.recommended(),\n  js.configs.recommended,\n\n  ...pluginVue.configs[ 'flat/essential' ],\n\n  {\n    languageOptions: {\n      ecmaVersion: 'latest',\n      sourceType: 'module',\n\n      globals: {\n        ...globals.browser,\n        ...globals.node,\n        process: 'readonly',\n        ga: 'readonly',\n        cordova: 'readonly',\n        Capacitor: 'readonly',\n        chrome: 'readonly',\n        browser: 'readonly'\n      }\n    },\n\n    rules: {\n      'prefer-promise-reject-errors': 'off',\n      'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'\n    }\n  },\n\n  {\n    files: [ 'src-pwa/custom-service-worker.js' ],\n    languageOptions: {\n      globals: {\n        ...globals.serviceworker\n      }\n    }\n  },\n\n  prettierSkipFormatting\n]\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Application for Production\nDESCRIPTION: Command to build the Quasar application for production deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-vite-2/BASE/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Code Stripping Based on Environment in Quasar\nDESCRIPTION: Demonstrates how if-branches with process.env conditions are evaluated at compile-time and stripped out of the final bundle based on the build mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.DEV) {\n  console.log('dev')\n}\nelse {\n  console.log('build')\n}\n\n// running with \"quasar dev\" will result in:\nconsole.log('dev')\n// while running with \"quasar build\" will result in:\nconsole.log('build')\n```\n\n----------------------------------------\n\nTITLE: Vue-i18n Integration Boot File\nDESCRIPTION: Setup for integrating vue-i18n internationalization in a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport { createI18n } from 'vue-i18n'\nimport messages from 'src/i18n'\n\nexport default defineBoot(({ app }) => {\n  // Create I18n instance\n  const i18n = createI18n({\n    locale: 'en-US',\n    messages\n  })\n\n  // Tell app to use the I18n instance\n  app.use(i18n)\n})\n```\n\n----------------------------------------\n\nTITLE: Quasar CLI Boot File Integration\nDESCRIPTION: Implementation of EventBus in a Quasar CLI boot file for global availability throughout the application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/event-bus-util.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventBus } from 'quasar'\nimport { defineBoot } from '#q-app/wrappers'\n\nexport default defineBoot(({ app }) => {\n  const bus = new EventBus()\n\n  // for Options API\n  app.config.globalProperties.$bus = bus\n\n  // for Composition API\n  app.provide('bus', bus)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Environment Variables in quasar.config.js\nDESCRIPTION: This snippet demonstrates how to use environment variables set in the terminal within the quasar.config.js file to dynamically configure the API URL based on the build type and a custom MY_API variable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-process-env.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# we set an env variable in terminal\n$ MY_API=api.com quasar build\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// then we pick it up in the /quasar.config file\nbuild: {\n  env: {\n    API: ctx.dev\n      ? 'https://dev.' + process.env.MY_API\n      : 'https://prod.' + process.env.MY_API\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Quasar CLI Project with Package Managers\nDESCRIPTION: Commands for setting up a new Quasar CLI project using different package managers (npm, yarn, pnpm, or bun). These commands initiate the Quasar project creation process, allowing developers to scaffold a new project folder with the necessary structure and dependencies.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init quasar\n# or:\nyarn create quasar\n# or:\npnpm create quasar\n# or:\nbun create quasar\n```\n\n----------------------------------------\n\nTITLE: Implementing a Vue Directive with SSR Support\nDESCRIPTION: An example showing how to define a custom Vue directive with both client-side implementation (mounted hook) and server-side rendering support via the getSSRProps method. The directive sets an element's ID attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/vue-ssr-directives.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myDirective = {\n  mounted (el, binding) {\n    // client-side implementation:\n    // directly update the DOM\n    el.id = binding.value\n  },\n\n  getSSRProps (binding) {\n    // server-side implementation:\n    // return the props to be rendered.\n    // getSSRProps only receives the directive binding.\n    return {\n      id: binding.value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Loading Plugin Outside Vue Component\nDESCRIPTION: Example demonstrating how to use the Loading plugin outside of a Vue component context, including custom spinner configuration\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Loading,\n\n  // optional!, for example below\n  // with custom spinner\n  QSpinnerGears\n} from 'quasar'\n\n// default options\nLoading.show()\n\n// fully customizable\nLoading.show({\n  spinner: QSpinnerGears,\n  // other props\n})\n\nLoading.hide()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Node.js Environment\nDESCRIPTION: TypeScript declaration file for defining custom environment variables and types in a Quasar project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    NODE_ENV: string;\n    VUE_ROUTER_MODE: 'hash' | 'history' | 'abstract' | undefined;\n    VUE_ROUTER_BASE: string | undefined;\n    // Define any custom env variables you have here, if you wish\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Scroll Fire Directive in Vue\nDESCRIPTION: Demonstrates basic implementation of the Scroll Fire directive in a Vue component. The directive is applied to a DOM element and triggers a method when the element comes into view upon scrolling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/scroll-fire.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" scrollable />\n```\n\n----------------------------------------\n\nTITLE: Using Local/Session Storage Outside Vue Components\nDESCRIPTION: Demonstrates how to use LocalStorage and SessionStorage APIs directly by importing from Quasar framework outside of Vue components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/web-storage.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LocalStorage, SessionStorage } from 'quasar'\n\nLocalStorage.set(key, value)\nlet value = LocalStorage.getItem(key)\n\nSessionStorage.set(key, value)\nlet value = SessionStorage.getItem(key)\n```\n\n----------------------------------------\n\nTITLE: TypeScript ESLint Configuration\nDESCRIPTION: Complete ESLint configuration for TypeScript projects including Vue.js and TypeScript specific rules.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/linter.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport js from '@eslint/js'\nimport globals from 'globals'\nimport pluginVue from 'eslint-plugin-vue'\nimport pluginQuasar from '@quasar/app-webpack/eslint'\nimport { defineConfigWithVueTs, vueTsConfigs } from '@vue/eslint-config-typescript'\n\nexport default defineConfigWithVueTs(\n  {\n    // ignores: []\n  },\n\n  pluginQuasar.configs.recommended(),\n  js.configs.recommended,\n\n  pluginVue.configs[ 'flat/essential' ],\n\n  {\n    files: ['**/*.ts', '**/*.vue'],\n    rules: {\n      '@typescript-eslint/consistent-type-imports': [\n        'error',\n        { prefer: 'type-imports' }\n      ],\n    }\n  },\n  vueTsConfigs.recommendedTypeChecked,\n\n  {\n    languageOptions: {\n      ecmaVersion: 'latest',\n      sourceType: 'module',\n\n      globals: {\n        ...globals.browser,\n        ...globals.node,\n        process: 'readonly',\n        ga: 'readonly',\n        cordova: 'readonly',\n        Capacitor: 'readonly',\n        chrome: 'readonly',\n        browser: 'readonly'\n      }\n    },\n\n    rules: {\n      'prefer-promise-reject-errors': 'off',\n      'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'\n    }\n  },\n\n  {\n    files: [ 'src-pwa/custom-service-worker.ts' ],\n    languageOptions: {\n      globals: {\n        ...globals.serviceworker\n      }\n    }\n  },\n\n  prettierSkipFormatting\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a New Language in Vue-i18n Configuration\nDESCRIPTION: Example of how to add a new language (German) to the existing i18n configuration by modifying the src/i18n/index.js file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport enUS from './en-US'\nimport de from './de'\n\nexport default {\n  'en-US': enUS,\n  'de': de\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BEX Options in quasar.config\nDESCRIPTION: Shows various configuration options for BEX in the quasar.config file, including adding extra scripts, extending Esbuild config, and modifying the manifest file dynamically.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbex: {\n  /**\n   * The list of extra scripts (js/ts) not in your bex manifest that you want to\n   * compile and use in your browser extension. Maybe dynamic use them?\n   *\n   * Each entry in the list should be a relative filename to /src-bex/\n   *\n   * @example [ 'my-script.ts', 'sub-folder/my-other-script.js' ]\n   */\n  extraScripts?: string[];\n\n  /**\n   * Extend the Esbuild config that is used for the bex scripts\n   * (background, content scripts, dom script)\n   */\n  extendBexScriptsConf?: (config: EsbuildConfiguration) => void;\n\n  /**\n   * Should you need some dynamic changes to the Browser Extension manifest file\n   * (/src-bex/manifest.json) then use this method to do it.\n   */\n  extendBexManifestJson?: (json: object) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Image Events in QEditor\nDESCRIPTION: Example of implementing custom image paste and drop event handlers in QEditor.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/editor.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<q-editor\n  v-model=\"editor\"\n  @paste=\"evt => pasteCapture(evt)\"\n  @drop=\"evt => dropCapture(evt)\"\n />\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading External Packages\nDESCRIPTION: Demonstrates how to dynamically import npm packages from node_modules, which can be useful for loading third-party libraries on demand.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport('my-package')\n  .then(myPackage => {\n    // use the package\n  })\n```\n\n----------------------------------------\n\nTITLE: Quasar Component Event Handling\nDESCRIPTION: Vue component implementation showing how to listen for and handle background script events in a Quasar application. Includes proper event cleanup in component lifecycle hooks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/background-script.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\nimport { onBeforeUnmount } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    // Our function which receives the URL sent by the background script.\n    function doOnTabOpened (url) {\n      console.log('New Browser Tab Openend: ', url)\n    }\n\n    // Add our listener\n    $q.bex.on('bex.tab.opened', doOnTabOpened)\n\n    // Don't forget to clean it up\n    onBeforeUnmount(() => {\n      $q.bex.off('bex.tab.opened', doOnTabOpened)\n    })\n\n    return {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Quasar App Extension Index File\nDESCRIPTION: Demonstrates the basic structure of the src/index.js file for a Quasar App Extension. The file exports a default function that receives an 'api' object with various properties and methods.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// can be async\nexport default function (api) {\n  // props & methods for \"api\" Object described below\n}\n```\n\n----------------------------------------\n\nTITLE: Using exportFile Function in Quasar\nDESCRIPTION: Documentation of the exportFile utility function that triggers browser to download files with specified content and MIME type. Shows the function signature with parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Forces browser to download file with specified content\n *\n * @param {*} fileName - String\n * @param {*} rawData - String | ArrayBuffer | ArrayBufferView | Blob\n * @param {*} opts - String (mimeType) or Object\n *                   Object form: { mimeType?: String, byteOrderMark?: String | Uint8Array, encoding?: String }\n * @returns Boolean | Error\n */\n```\n\n----------------------------------------\n\nTITLE: Sending Inline HTML for 500 Error in SSR Middleware\nDESCRIPTION: This snippet shows an alternative approach to handling 500 errors by directly sending HTML as a string from the SSR middleware. This method avoids potential infinite loops that could occur when redirecting to a route.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nres.status(500).send(`<html>....</html>`)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages from Quasar App to Content Script\nDESCRIPTION: This JavaScript snippet demonstrates how to send a message from a Quasar App to a content script using the BEX bridge. It includes a button click handler that triggers a highlight action.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetup () {\n  const $q = useQuasar()\n\n  async function myButtonClickHandler () {\n    await $q.bex.send('highlight.content', { selector: '.some-class' })\n    $q.notify('Text has been highlighted')\n  }\n\n  return { myButtonClickHandler }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Platform\nDESCRIPTION: Example of conditionally rendering components based on different platform detections.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/platform-detection.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div v-if=\"$q.platform.is.desktop\">\n  I'm only rendered on desktop!\n</div>\n\n<div v-if=\"$q.platform.is.mobile\">\n  I'm only rendered on mobile!\n</div>\n\n<div v-if=\"$q.platform.is.electron\">\n  I'm only rendered on Electron!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Quasar Components in HTML with UMD\nDESCRIPTION: Examples of using Quasar components and directives in HTML with the UMD version, showing the correct tag usage pattern with required closing tags.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- components -->\n<q-btn label=\"My Button\"></q-btn>\n\n<!-- directives -->\n<div v-ripple>...</div>\n```\n\n----------------------------------------\n\nTITLE: Adding BEX Mode to Quasar Project\nDESCRIPTION: Command to add Browser Extension (BEX) mode to an existing Quasar project. This creates the necessary /src-bex folder and configuration files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add bex\n```\n\n----------------------------------------\n\nTITLE: Using $q Object with Vue Options API\nDESCRIPTION: Illustrates how to use the $q object in a Vue component using the traditional Options API approach.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/the-q-object.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"$q.platform.is.ios\">\n      Gets rendered only on iOS platform.\n    </div>\n  </div>\n</template>\n\n<script>\n// not available here outside\n// of the export\n\nexport default {\n  // inside a Vue component script\n  ...,\n\n  // showing an example on a method, but\n  // can be any part of Vue script\n  methods: {\n    show () {\n      // prints out Quasar version\n      console.log(this.$q.version)\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Practical Example of useSplitAttrs Usage\nDESCRIPTION: Complete example showing how to use useSplitAttrs including logging the values of both attributes and listeners refs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-split-attrs.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSplitAttrs } from 'quasar'\n\nsetup () {\n  const {\n    attributes, // is a Vue ref()\n    listeners // is a Vue ref()\n  } = useSplitAttrs()\n\n  console.log(attributes.value)\n  // prints out a key-value object\n\n  console.log(listeners.value)\n  // prints out a key-value object\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Identifiers in JavaScript with Quasar\nDESCRIPTION: Demonstrates how to use the uid function from Quasar to generate unique identifiers. This is useful for creating unique keys or IDs in applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { uid } from 'quasar'\n\nlet uid = uid()\n// Example: 501e7ae1-7e6f-b923-3e84-4e946bff31a8\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Applications for Different Modes\nDESCRIPTION: Shows examples of building Quasar applications for various modes including SPA, SSR, PWA, BEX, Cordova, and Electron. It also demonstrates how to pass extra parameters to the underlying Cordova executable and create a debug build.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Build a SPA for production\n$ quasar build\n# ...or\n$ quasar build -m spa\n\n# Build a SSR for production\n$ quasar build -m ssr\n\n# Build a PWA for production\n$ quasar build -m pwa\n\n# Build a BEX for production\n$ quasar build -m bex -T [chrome|firefox]\n\n# Build a Mobile App (through Cordova)\n$ quasar build -m cordova -T [android|ios]\n# or the short form:\n$ quasar build -m [android|ios]\n\n# Build an Electron App for production\n$ quasar build -m electron\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar build -m ios -- some params --and options --here\n# when on Windows and using Powershell:\n$ quasar build -m ios '--' some params --and options --here\n\n# Create a production build with ability to debug it\n# (has source-maps and code is NOT minified)\n$ quasar build -d [-m <mode>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Boot Files for SSR in quasar.config File\nDESCRIPTION: This snippet shows how to configure boot files to run on server-side, client-side, or both when using SSR in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  boot: [\n    'some-boot-file', // runs on both server and client\n    { path: 'some-other', server: false }, // this boot file gets embedded only on client-side\n    { path: 'third', client: false } // this boot file gets embedded only on server-side\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useQuasar to Invoke Custom Dialog Components\nDESCRIPTION: Shows how to use the useQuasar hook within a Vue component to create a dialog with a custom component and handle its events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This way of using it can reside ONLY\n * inside of a Vue component\n */\n\nimport { useQuasar } from 'quasar'\nimport CustomComponent from '..path.to.component..'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.dialog({\n    component: CustomComponent,\n\n    // props forwarded to your custom component\n    componentProps: {\n      text: 'something',\n      persistent: true,\n      // ...more..props...\n    }\n  }).onOk(() => {\n    console.log('OK')\n  }).onCancel(() => {\n    console.log('Cancel')\n  }).onDismiss(() => {\n    console.log('Called on OK or Cancel')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Device Plugin Implementation in Vue\nDESCRIPTION: Vue component implementation showing how to access and display device information using the Cordova device plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-page class=\"flex flex-center\">\n      <div>IMEI: {{ imei }}</div>\n    </q-page>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup () {\n    const imei = ref(\n      window.device === void 0\n        ? 'Run this on a mobile/tablet device'\n        : window.device\n    )\n\n    return {\n      imei\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Script for SSR Deployment in package.json\nDESCRIPTION: The default npm start script in the distributables package.json file that launches the SSR application by running the index.mjs file with Node.js.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/deploying.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"start\": \"node index.mjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Array-based Promise Sequence Example\nDESCRIPTION: Example showing how to use runSequentialPromises with an array of promise functions, including error handling and result aggregation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSequentialPromises } from 'quasar'\n\nrunSequentialPromises([\n  (resultAggregator) => new Promise((resolve, reject) => { /* do some work... */ }),\n  (resultAggregator) => new Promise((resolve, reject) => { /* do some work... */ })\n  // ...\n]).then(resultAggregator => {\n  console.log('result from first Promise:', resultAggregator[0].value)\n  console.log('result from second Promise:', resultAggregator[1].value)\n}).catch(errResult => {\n  console.error(`Error encountered on job #${ errResult.key }:`)\n  console.error(errResult.reason)\n  console.log('Managed to get these results before this error:')\n  console.log(errResult.resultAggregator)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in Quasar App Extension\nDESCRIPTION: Shows how to use api.registerCommand to register a new command that will be available as 'quasar run <ext-id> <cmd> [args]' or the short form 'quasar <ext-id> <cmd> [args]'.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napi.registerCommand('start', ({ args, params }) => {\n  // do something here\n\n  // this registers the \"start\" command\n  // and this handler is executed when running\n  // $ quasar run <ext-id> start\n})\n```\n\n----------------------------------------\n\nTITLE: Basic QInfiniteScroll Implementation\nDESCRIPTION: Demonstrates basic usage of QInfiniteScroll component for loading content as user scrolls. The component automatically loads more items when scrolling reaches within 500px of the bottom.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/infinite-scroll.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" scrollable />\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Builder in Quasar Config File\nDESCRIPTION: Example configuration in quasar.config file for using electron-builder to publish a Windows EXE setup file to Amazon S3.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/build-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nelectron: {\n  bundler: 'builder', // set here instead of using command line flag --bundler\n  builder: {\n    appId: 'com.electron.myelectronapp',\n    win: {\n      target: 'nsis'\n    },\n    publish: {\n      'provider': 's3',\n      'bucket': 'myS3bucket'\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Accessing ssrContext in Quasar Boot Files, Router, and Store\nDESCRIPTION: Demonstrates how to access the ssrContext object in Quasar boot files, Vue Router initialization, Pinia store initialization, and the preFetch method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-context.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// a boot file\nexport default defineBoot(({ ..., ssrContext }) => { /* ... */ })\n\n// src/router/index.js\nexport default defineRouter(({ ..., ssrContext }) { /* ... */ })\n\n// src/store/index.js\nexport default defineStore(({ ..., ssrContext }) { /* ... */ })\n\n// with preFetch:\npreFetch: definePreFetch(({ ..., ssrContext }) { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: Initializing AddressbarColor Plugin in Quasar Boot File\nDESCRIPTION: Creates a boot file to initialize the AddressbarColor plugin and set a default color for the mobile browser's address bar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/addressbar-color.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AddressbarColor } from 'quasar'\n\nexport default () => {\n  AddressbarColor.set('#a2e3fa')\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse Scrolling Implementation\nDESCRIPTION: Implements a messenger-style reverse infinite scroll where new content is loaded at the top while scrolling upwards.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/infinite-scroll.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Reverse (Messenger style)\" file=\"Reverse\" scrollable />\n```\n\n----------------------------------------\n\nTITLE: Implementing Node.js Upload Server\nDESCRIPTION: Basic Node.js server implementation to handle file uploads using Express and Formidable. Includes bandwidth throttling and CORS configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport express from 'express'\nimport formidable from 'formidable'\nimport throttle from 'express-throttle-bandwidth'\n\nconst app = express()\n\nconst port = process.env.PORT || 4444\nconst folder = fileURLToPath(new URL('./files', import.meta.url))\n\nif (!fs.existsSync(folder)) {\n  fs.mkdirSync(folder)\n}\n\napp.set('port', port)\napp.use(throttle(1024 * 128))\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*')\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')\n  next()\n})\n\napp.post('/upload', (req, res) => {\n  const form = new formidable.IncomingForm()\n\n  form.uploadDir = folder\n  form.parse(req, (_, fields, files) => {\n    console.log('\\n-----------')\n    console.log('Fields', fields)\n    console.log('Received:', Object.keys(files))\n    console.log()\n    res.send('Thank you')\n  })\n})\n\napp.listen(port, () => {\n  console.log('\\nUpload server running on http://localhost:' + port)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flex Row Layout in HTML\nDESCRIPTION: Demonstrates how to create a simple flex row layout using Quasar's 'row' class. This example shows three columns within a flex container.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div>First column</div>\n  <div>Second column</div>\n  <div>Third column</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dialog Component with Composition API\nDESCRIPTION: Example of a custom dialog component using script setup and the useDialogPluginComponent composable to properly interface with the Dialog plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-dialog ref=\"dialogRef\" @hide=\"onDialogHide\">\n    <q-card class=\"q-dialog-plugin\">\n      <!--\n        ...content\n        ... use q-card-section for it?\n      -->\n\n      <!-- buttons example -->\n      <q-card-actions align=\"right\">\n        <q-btn color=\"primary\" label=\"OK\" @click=\"onOKClick\" />\n        <q-btn color=\"primary\" label=\"Cancel\" @click=\"onDialogCancel\" />\n      </q-card-actions>\n    </q-card>\n  </q-dialog>\n</template>\n\n<script setup>\nimport { useDialogPluginComponent } from 'quasar'\n\nconst props = defineProps({\n  // ...your custom props\n})\n\ndefineEmits([\n  // REQUIRED; need to specify some events that your\n  // component will emit through useDialogPluginComponent()\n  ...useDialogPluginComponent.emits\n])\n\nconst { dialogRef, onDialogHide, onDialogOK, onDialogCancel } = useDialogPluginComponent()\n// dialogRef      - Vue ref to be applied to QDialog\n// onDialogHide   - Function to be used as handler for @hide on QDialog\n// onDialogOK     - Function to call to settle dialog with \"ok\" outcome\n//                    example: onDialogOK() - no payload\n//                    example: onDialogOK({ /*...*/ }) - with payload\n// onDialogCancel - Function to call to settle dialog with \"cancel\" outcome\n\n// this is part of our example (so not required)\nfunction onOKClick () {\n  // on OK, it is REQUIRED to\n  // call onDialogOK (with optional payload)\n  onDialogOK()\n  // or with payload: onDialogOK({ ... })\n  // ...and it will also hide the dialog automatically\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTPS for Quasar DevServer\nDESCRIPTION: Configuration for enabling HTTPS in the development server with custom SSL certificates, including paths for key, certificate, and CA files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  server: {\n    type: 'https', // NECESSARY (alternative is type 'http')\n\n    options: {\n      // Use ABSOLUTE paths or path.join(__dirname, 'root/relative/path')\n      key: \"/path/to/server.key\",\n      pfx: \"/path/to/server.pfx\",\n      cert: \"/path/to/server.crt\",\n      ca: \"/path/to/ca.pem\",\n      passphrase: 'webpack-dev-server' // do you need it?\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files in Quasar\nDESCRIPTION: Configuration object for specifying custom file paths for core components of a Quasar application. Allows overriding default locations for root component, router, store, PWA files, and more.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsourceFiles?: {\n  rootComponent?: string;\n  router?: string;\n  store?: string;\n  pwaRegisterServiceWorker?: string;\n  pwaServiceWorker?: string;\n  pwaManifestFile?: string;\n  electronMain?: string;\n  bexManifestFile?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser and Node Targets in Quasar Config\nDESCRIPTION: Configuration for specifying browser and Node.js version targets in the quasar.config file. Sets compatibility for modern browsers and Node.js runtime environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/browser-compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  target: {\n    browser: [ 'es2022', 'firefox115', 'chrome115', 'safari14' ],\n    node: 'node20'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar Configuration in App Extension\nDESCRIPTION: This function extends the Quasar configuration by adding UI components, setting icon sets, and registering boot files. It ensures compatibility with both Vite and Webpack build systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction extendQuasarConf (conf, api) {\n  conf.extras.push('ionicons-v4')\n  conf.framework.iconSet = 'ionicons-v4'\n\n  //\n  // We register a boot file. User does not need to tamper with it,\n  // so we keep it into the App Extension code:\n  //\n\n  // make sure my-ext boot file is registered\n  conf.boot.push('~quasar-app-extension-my-starter-kit/src/boot/my-starter-kit-boot.js')\n\n  // @quasar/app-vite does not need this\n  if (api.hasVite !== true) {\n    // make sure boot file get transpiled\n    conf.build.webpackTranspileDependencies.push(/quasar-app-extension-my-starter-kit[\\\\/]src/)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia in PreFetch for Non-SSR Apps\nDESCRIPTION: Example showing how to initialize a Pinia store in the preFetch hook for non-SSR applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// App.vue - handling Pinia stores\n// example with a store named \"myStore\"\n// placed in /src/stores/myStore.js|ts\n\nimport { useMyStore } from 'stores/myStore'\n\nexport default {\n  // ...\n  preFetch () {\n    const myStore = useMyStore()\n    // do something with myStore\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Webpack Aliases with extendWebpack\nDESCRIPTION: Example of adding custom Webpack aliases by extending the default configuration using the extendWebpack method in quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\nimport { fileURLToPath } from 'node:url'\n\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendWebpack (cfg, { isServer, isClient }) {\n        cfg.resolve.alias = {\n          ...cfg.resolve.alias, // This adds the existing alias\n\n          // Add your own alias like this\n          myalias: fileURLToPath(new URL('./src/somefolder', import.meta.url)),\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Component Usage Examples\nDESCRIPTION: Shows how to access the EventBus instance in components using both Options API and Composition API approaches.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/event-bus-util.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Options API\nthis.$bus\n\n// Composition API\nimport { inject } from 'vue'\n\nconst bus = inject('bus') // inside setup()\n```\n\n----------------------------------------\n\nTITLE: Configuring PWA Options in Quasar Config File\nDESCRIPTION: Configuration options for PWA in quasar.config file, including Workbox mode, service worker settings, and manifest customization options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/configuring-pwa.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npwa: {\n  workboxMode?: \"GenerateSW\" | \"InjectManifest\";\n\n  /**\n   * Generated service worker filename to use (needs to end with .js)\n   * @default sw.js\n   */\n  swFilename?: string;\n\n  /**\n   * PWA manifest filename to use on your browser\n   * @default manifest.json\n   */\n  manifestFilename?: string;\n\n  /**\n   * Should you need some dynamic changes to the /src-pwa/manifest.json,\n   * use this method to do it.\n   */\n  extendManifestJson?: (json: PwaManifestOptions) => void;\n\n  /**\n   * Does the PWA manifest tag requires crossorigin auth?\n   * @default false\n   */\n  useCredentialsForManifestTag?: boolean;\n\n  /**\n   * Auto inject the PWA meta tags?\n   * If using the function form, return HTML tags as one single string.\n   * @default true\n   */\n  injectPwaMetaTags?: boolean | ((injectParam: InjectPwaMetaTagsParams) => string);\n\n  /**\n   * Extend the Esbuild config that is used for the custom service worker\n   * (if using it through workboxMode: 'InjectManifest')\n   */\n  extendPWACustomSWConf?: (config: EsbuildConfiguration) => void;\n\n  /**\n   * Extend/configure the Workbox GenerateSW options\n   */\n  extendGenerateSWOptions?: (config: GenerateSWOptions) => void;\n\n  /**\n   * Extend/configure the Workbox InjectManifest options\n   */\n  extendInjectManifestOptions?: (config: InjectManifestOptions) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quasar Loading Plugin with PreFetch\nDESCRIPTION: Example showing how to use the Quasar Loading plugin to show a loading indicator while the preFetch hook is running.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Loading } from 'quasar'\n\nexport default {\n  // ...\n  preFetch ({ /* ... */ }) {\n    Loading.show()\n\n    return new Promise(resolve => {\n      // do something async here\n      // then call \"resolve()\"\n    }).then(() => {\n      Loading.hide()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser DevTools Access in Electron Main Process\nDESCRIPTION: Implementation of conditional DevTools access in an Electron app. Opens DevTools automatically in debug mode and prevents access in production. Uses the createWindow function to manage BrowserWindow instance behavior.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/troubleshooting-and-tips.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createWindow () {\n  mainWindow = new BrowserWindow({ ... })\n\n  if (process.env.DEBUGGING) {\n    // if on DEV or Production with debug enabled\n    mainWindow.webContents.openDevTools()\n  }\n  else {\n    // we're on production; no access to devtools pls\n    mainWindow.webContents.on('devtools-opened', () => {\n      mainWindow.webContents.closeDevTools()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Scroll Target Container Implementation\nDESCRIPTION: Shows how to implement QInfiniteScroll with a custom scroll target container, allowing for more specific control over the scrolling behavior.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/infinite-scroll.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom Scroll Target Container\" file=\"Container\" />\n```\n\n----------------------------------------\n\nTITLE: Mode-Specific CSS Configuration\nDESCRIPTION: Shows how to configure different CSS files for different build modes (SPA vs Cordova) in a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  css: [\n    ctx.mode.spa ? 'app-spa.sass' : null, // looks for /src/css/app-spa.sass\n    ctx.mode.cordova ? 'app-cordova.sass' : null  // looks for /src/css/app-cordova.sass\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova CLI\nDESCRIPTION: Command to install Cordova CLI globally using npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g cordova\n```\n\n----------------------------------------\n\nTITLE: Getting Computed Style in Quasar\nDESCRIPTION: Shows how to retrieve the computed CSS style of a visible DOM element. This returns the browser-computed style value, not just inline styles.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\nconst { style } = dom\n\n// Get COMPUTED style (when DomElement is visible!)\n// Computed means a DomElement might not have \"height\" CSS property set,\n// but that does not mean it doesn't have a height when it's displayed.\n// The following method accesses the computed CSS provided by the browser:\nconsole.log(style(DomElement, 'height'))\n// '10px' <<< notice it returns a String ending in 'px'\n```\n\n----------------------------------------\n\nTITLE: Object-based Promise Sequence Example\nDESCRIPTION: Demonstrates using runSequentialPromises with an object containing named promise functions, showing result handling and error management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSequentialPromises } from 'quasar'\n\nrunSequentialPromises({\n  phones: (resultAggregator) => new Promise((resolve, reject) => { /* do some work... */ }),\n  laptops: (resultAggregator) => new Promise((resolve, reject) => { /* do some work... */ })\n}).then(resultAggregator => {\n  console.log('result from first Promise:', resultAggregator.phones.value)\n  console.log('result from second Promise:', resultAggregator.laptops.value)\n}).catch(errResult => {\n  console.error(`Error encountered on job (${ errResult.key}):`)\n  console.error(errResult.reason)\n  console.log('Managed to get these results before this error:')\n  console.log(errResult.resultAggregator)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Bottom Sheet Plugin in JavaScript\nDESCRIPTION: Shows how to use the Bottom Sheet plugin both outside and inside a Vue component. Demonstrates importing and initializing the plugin using both direct import and the useQuasar composable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/bottom-sheet.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BottomSheet } from 'quasar'\nBottomSheet.create({ ... }) // returns Object\n\n// inside of a Vue file\nimport { useQuasar } from 'quasar'\nsetup () {\n  const $q = useQuasar()\n  $q.bottomSheet({ ... }) // returns Object\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PWA Source Files\nDESCRIPTION: Configuration snippet for quasar.config file to customize PWA file paths including service worker registration, custom service worker, and manifest file locations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/preparation.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsourceFiles: {\n  pwaRegisterServiceWorker: 'src-pwa/register-service-worker',\n  pwaServiceWorker: 'src-pwa/custom-service-worker',\n  pwaManifestFile: 'src-pwa/manifest.json',\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Address Bar Color Change in Vue Component\nDESCRIPTION: Demonstrates how to dynamically change the address bar color within a Vue component using the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/addressbar-color.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    // equivalent to calling this on creating the component\n    const $q = useQuasar()\n    $q.addressbarColor.set('#a2e3fa')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript in Quasar Project\nDESCRIPTION: Commands to install the TypeScript package using different package managers (Yarn, NPM, PNPM, Bun) in a Quasar project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev typescript@~5.5.3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev typescript@~5.5.3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -D typescript@~5.5.3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add --dev typescript@~5.5.3\n```\n\n----------------------------------------\n\nTITLE: Multi-threaded Promise Sequence Example\nDESCRIPTION: Demonstrates configuring multiple threads for parallel promise execution, with a note about browser thread limitations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSequentialPromises } from 'quasar'\n\nrunSequentialPromises([ /* ... */ ], { threadsNumber: 3 })\n  .then(resultAggregator => {\n    resultAggregator.forEach(result => {\n      console.log(result.value)\n    })\n  })\n  .catch(errResult => {\n    console.error(`Error encountered:`)\n    console.error(errResult.reason)\n    console.log('Managed to get these results before this error:')\n    console.log(errResult.resultAggregator)\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic useDialogPluginComponent Syntax\nDESCRIPTION: Shows the basic setup and usage of useDialogPluginComponent, including the core functions it provides for dialog management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-dialog-plugin-component.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDialogPluginComponent } from 'quasar'\n\nsetup () {\n  const { dialogRef, onDialogHide, onDialogOK, onDialogCancel } = useDialogPluginComponent()\n\n  // dialogRef      - Vue ref to be applied to QDialog\n  // onDialogHide   - Function to be used as handler for @hide on QDialog\n  // onDialogOK     - Function to call to settle dialog with \"ok\" outcome\n  //                    example: onDialogOK() - no payload\n  //                    example: onDialogOK({ /*.../* }) - with payload\n  // onDialogCancel - Function to call to settle dialog with \"cancel\" outcome\n\n  return {\n    dialogRef,\n    onDialogHide\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Meta with Composition API\nDESCRIPTION: Example demonstrating how to implement reactive meta tags using the Composition API with ref and computed properties. Shows dynamic title updates based on component state.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/meta.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMeta } from 'quasar'\nimport { ref } from 'vue'\n\nexport default {\n  setup () {\n    const title = ref('Some title')\n\n    useMeta(() => {\n      return {\n        title: title.value\n      }\n    })\n\n    function setAnotherTitle () {\n      title.value = 'Another title'\n    }\n\n    return {\n      setAnotherTitle\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Variables in Quasar Config\nDESCRIPTION: Example of defining variables in quasar.config file that can be referenced in index.html. Shows how to set and use template variables for dynamic HTML content.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\n\nexport default defineConfig((ctx) => {\n  return {\n    htmlVariables: {\n      myVar: 'some-content'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Listening in Quasar SSR\nDESCRIPTION: This code snippet shows how to configure the listen function for a Quasar SSR server to start listening on the configured port. It handles both development and production environments, using either the normal app or the HTTPS app for development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-webserver.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  const server = devHttpsApp || app;\n  return server.listen(port, () => {\n    if (process.env.PROD) {\n      console.log('Server listening at port ' + port);\n    }\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PreFetch in Vue Component\nDESCRIPTION: Example of a Vue component with PreFetch hook implementation using Pinia store\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/prefetch-feature.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>{{ item.title }}</div>\n</template>\n\n<script>\nimport { useRoute } from 'vue-router'\nimport { useMyStore } from 'stores/myStore.js'\n\nexport default {\n  // our hook here\n  preFetch ({ store, currentRoute, previousRoute, redirect, ssrContext, urlPath, publicPath }) {\n    // fetch data, validate route and optionally redirect to some other route...\n\n    // ssrContext is available only server-side in SSR mode\n\n    // No access to \"this\" here\n\n    // Return a Promise if you are running an async job\n    // Example:\n    const myStore = useMyStore() // useMyStore(store) for SSR\n    return myStore.fetchItem(currentRoute.params.id) // assumes it is async\n  },\n\n  setup () {\n    const myStore = useMyStore()\n    const $route = useRoute()\n\n    // display the item from store state.\n    const item = computed(() => myStore.items[$route.params.id])\n\n    return { item }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Status Bar Padding in Quasar Config File\nDESCRIPTION: This snippet demonstrates how to configure iOS status bar padding in the quasar.config file. It allows enabling or disabling dynamic top padding on iOS mobile devices.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      capacitor: {\n        iosStatusBarPadding: true/false, // add the dynamic top padding on iOS mobile devices\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced HTML Variables Example\nDESCRIPTION: Shows more complex usage of HTML variables including nested objects and conditional rendering in templates.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nhtmlVariables: {\n  title: 'test name',\n  some: {\n    prop: 'my-prop'\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<%= title %>\n<%= some.prop %>\n<% if (some.prop) { %><%= title %><% } %>\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Handling with QRouteTab in Vue\nDESCRIPTION: Demonstrates advanced usage of QRouteTab with custom click handlers for delayed navigation, cancellation, and redirection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tabs.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-tabs\n    no-caps\n    class=\"bg-orange text-white shadow-2\"\n  >\n    <q-route-tab :to=\"{ query: { tab: '1' } }\" exact replace label=\"Activate in 2s\" @click=\"navDelay\" />\n    <q-route-tab :to=\"{ query: { tab: '2' } }\" exact replace label=\"Do nothing\" @click=\"navCancel\" />\n    <q-route-tab :to=\"{ query: { tab: '3' } }\" exact replace label=\"Navigate to the second tab\" @click=\"navRedirect\" />\n    <q-route-tab :to=\"{ query: { tab: '4' } }\" exact replace label=\"Navigate immediately\" @click=\"navPass\" />\n  </q-tabs>\n</template>\n\n<script>\nexport default {\n  setup () {\n    function navDelay (e, go) {\n      e.preventDefault() // we cancel the default navigation\n\n      // console.log('triggering navigation in 2s')\n      setTimeout(() => {\n        // console.log('navigating as promised 2s ago')\n        go()\n      }, 2000)\n    }\n\n    function navCancel (e) {\n      e.preventDefault() // we cancel the default navigation\n    }\n\n    function navRedirect (e, go) {\n      e.preventDefault() // we cancel the default navigation\n\n      // call this at your convenience\n      go({\n        to: { query: { tab: '2', noScroll: true } },\n        // replace: boolean; default is what the tab is configured with\n        // returnRouterError: boolean; default is false\n      })\n      .then(vueRouterResult => { /* ... */ })\n      .catch(vueRouterError => {\n        /* ...will not reach here unless returnRouterError === true */\n      })\n    }\n\n    function navPass () {}\n\n    return { navDelay, navCancel, navRedirect, navPass }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Async Quasar Configuration\nDESCRIPTION: Demonstrates how to create asynchronous Quasar configurations using async/await or Promises.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig(async (ctx) => {\n  const data = await someAsyncFunction()\n  return {\n    // ... use \"data\"\n  }\n})\n\n// or:\nexport default defineConfig((ctx) => {\n  return new Promise(resolve => {\n    // some async work then:\n    // resolve() with the quasar config\n    resolve({\n      //\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Folder Aliases in Quasar Config\nDESCRIPTION: Demonstrates two methods for adding custom folder aliases in a Quasar project. The first method uses the build.alias property, while the second extends the Vite config directly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\n\nexport default (ctx) => {\n  return {\n    build: {\n      alias: {\n        utils: fileURLToPath(new URL('./src/utils', import.meta.url))\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\n\nexport default (ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf, { isServer, isClient }) {\n        Object.assign(viteConf.resolve.alias, {\n          utils: fileURLToPath(new URL('./src/utils', import.meta.url))\n        })\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Plugin Implementation in Vue\nDESCRIPTION: Vue component implementation demonstrating how to capture and display images using the Cordova camera plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-btn color=\"primary\" label=\"Get Picture\" @click=\"captureImage\" />\n\n    <img :src=\"imageSrc\">\n  </div>\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\nimport { ref } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n    const imageSrc = ref('')\n\n    function captureImage () {\n      navigator.camera.getPicture(\n        data => { // on success\n          imageSrc.value = `data:image/jpeg;base64,${data}`\n        },\n        () => { // on fail\n          $q.notify('Could not access device camera.')\n        },\n        {\n          // camera options\n        }\n      )\n    }\n\n    return {\n      imageSrc,\n      captureImage\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Local/Session Storage Inside Vue Components\nDESCRIPTION: Shows how to access LocalStorage and SessionStorage through the Quasar instance within Vue components using the composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/web-storage.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.localStorage.set(key, value)\n  const value = $q.localStorage.getItem(key)\n\n  $q.sessionStorage.set(key, value)\n  const otherValue = $q.sessionStorage.getItem(key)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Electron Preload Script in Quasar\nDESCRIPTION: This example demonstrates how to implement an Electron preload script in a Quasar project. It shows how to use contextBridge to expose a custom API to the renderer process, allowing secure communication between Node.js and the UI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// example which injects window.myAPI.doAThing() into the renderer\n// thread (/src/*)\n\nconst { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  doAThing: () => {}\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Vite's glob Import\nDESCRIPTION: Example of using Vite's glob import to dynamically import multiple files and create routes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst importList = import.meta.glob('./pages/*.vue')\nconst startIndex = '/pages/'.length\n\nconst routes = Object.keys(importList).map(key => {\n  return {\n    path: key.substring(startIndex, key.length - 4),\n    component: importList[ key ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: QMenu Integration Example\nDESCRIPTION: Demonstrates how to use QInfiniteScroll within a QMenu component, showing integration capabilities with other Quasar components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/infinite-scroll.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Usage in QMenu\" file=\"Menu\" />\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Usage in Vue Component\nDESCRIPTION: Demonstrates how to use the Dark plugin inside a Vue component using the Composition API. Shows how to get status, set status, and toggle dark mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dark.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\nsetup () {\n  const $q = useQuasar()\n\n  // get status\n  console.log($q.dark.isActive) // true, false\n\n  // get configured status\n  console.log($q.dark.mode) // \"auto\", true, false\n\n  // set status\n  $q.dark.set(true) // or false or \"auto\"\n\n  // toggle\n  $q.dark.toggle()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error 500 Response in SSR Middleware\nDESCRIPTION: Direct HTML response implementation for handling 500 errors in SSR middleware.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nres.status(500).send(`<html>....</html>`)\n```\n\n----------------------------------------\n\nTITLE: Responsive Column Layout in Quasar\nDESCRIPTION: Demonstrates a responsive layout using Quasar's breakpoint-specific column classes. This example shows how columns stack vertically on small screens and adjust their width on larger screens.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div class=\"col-xs-12 col-sm-6 col-md-4\">\n    col\n  </div>\n  <div class=\"col-xs-12 col-sm-6 col-md-4\">\n    col\n  </div>\n  <div class=\"col-xs-12 col-sm-6 col-md-4\">\n    col\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Express Server for Heroku Deployment\nDESCRIPTION: Basic Express server setup for serving Quasar SPA on Heroku with history mode support\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/deploying.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport serveStatic from 'serve-static'\nimport history from 'connect-history-api-fallback'\n\nconst port = process.env.PORT || 5000\nconst app = express()\n\napp.use(history())\napp.use(serveStatic(__dirname + '/dist/spa'))\napp.listen(port)\n```\n\n----------------------------------------\n\nTITLE: Using LoadingBar Outside Vue Components\nDESCRIPTION: Shows how to use LoadingBar plugin outside of Vue components by importing directly from Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading-bar.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoadingBar } from 'quasar'\n\nLoadingBar.start()\nLoadingBar.stop()\nLoadingBar.increment(value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorting in QTable with Vue\nDESCRIPTION: Shows how to implement custom sorting logic for a QTable component, allowing for more complex or specific sorting behaviors.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom sorting\" file=\"CustomSorting\" />\n```\n\n----------------------------------------\n\nTITLE: Generated Boot File Template\nDESCRIPTION: Default template generated when creating a new boot file, showing the basic structure with async support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\n// \"async\" is optional!\n// remove it if you don't need it\nexport default async defineBoot(({ /* app, router, store */ }) => {\n  // something to do\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Builder in Quasar Config File\nDESCRIPTION: Example configuration in quasar.config file for using electron-builder to publish a Windows EXE setup file to Amazon S3. Includes settings for app ID, build target, and publishing provider.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/build-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nelectron: {\n  bundler: 'builder', // set here instead of using command line flag --bundler\n  builder: {\n    appId: 'com.electron.myelectronapp',\n    win: {\n      target: 'nsis'\n    },\n    publish: {\n      'provider': 's3',\n      'bucket': 'myS3bucket'\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Files in Electron\nDESCRIPTION: JavaScript code demonstrating how to access local files in an Electron app using @electron/remote. It shows how to construct a file path using the app's userData directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport path from 'path'\nimport { app } from '@electron/remote'\n\nconst filePath = path.join(app.getPath('userData'), '/some.file')\n```\n\n----------------------------------------\n\nTITLE: Synchronized Scrolling Implementation\nDESCRIPTION: Shows how to synchronize scrolling between multiple containers using the scroll event\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Synchronized\" file=\"Synchronized\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PreFetch in Quasar Config File\nDESCRIPTION: Basic configuration to enable PreFetch feature in quasar.config file\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/prefetch-feature.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  preFetch: true\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Type Declarations\nDESCRIPTION: TypeScript declarations for Node.js environment variables\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/supporting-ts.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    NODE_ENV: string;\n    VUE_ROUTER_MODE: 'hash' | 'history' | 'abstract' | undefined;\n    VUE_ROUTER_BASE: string | undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger/Interceptor SSR Middleware\nDESCRIPTION: Example implementation of a logging middleware that intercepts all client requests. Should be positioned as the first middleware in the execution chain.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineSsrMiddleware(({ app, resolve }) => {\n  app.all(resolve.urlPath('*'), (req, _, next) => {\n    console.log('someone requested:', req.url)\n    next()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Frame Debounce in JavaScript with Quasar\nDESCRIPTION: Shows how to use the frameDebounce function from Quasar, which delays calling a function until the next browser frame is scheduled to run. This is useful for optimizing performance-intensive operations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { frameDebounce } from 'quasar'\n\n(Debounced Function) frameDebounce(Function fn)\n\n// Example:\nwindow.addEventListener(\n  'resize',\n  frameDebounce(function() {\n    .... things to do ...\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating i18n Boot File in JavaScript\nDESCRIPTION: JavaScript implementation of the i18n boot file that initializes vue-i18n with English as the default locale and injects it into the Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport { createI18n } from 'vue-i18n'\nimport messages from 'src/i18n'\n\nexport default defineBoot(({ app }) => {\n  const i18n = createI18n({\n    locale: 'en-US',\n    globalInjection: true,\n    messages\n  })\n\n  // Set i18n instance on app\n  app.use(i18n)\n})\n```\n\n----------------------------------------\n\nTITLE: Fontawesome Pro Boot Configuration in Quasar Config\nDESCRIPTION: Shows how to configure the boot array and framework settings in quasar.config to use Fontawesome Pro instead of the free version.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/installing-icon-libraries.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nboot: [\n  ...\n  'fontawesome-pro' // Add boot file\n],\nextra: [\n  // 'fontawesome-v6' // Disable free version!\n],\nframework: {\n  // if you want Quasar to use Fontawesome for its icons\n  iconSet: 'fontawesome-v6-pro'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PreFetch with <script setup>\nDESCRIPTION: Example of implementing the preFetch hook in a Vue component using the <script setup> syntax and the defineOptions macro, requiring Vue 3.3+.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n/**\n * The defineOptions is a macro.\n * The options will be hoisted to module scope and cannot access local\n * variables in <script setup> that are not literal constants.\n */\ndefineOptions({\n  preFetch ({ store }) {\n    console.log('running preFetch')\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Render Middleware\nDESCRIPTION: Core implementation of the SSR render middleware that handles Vue rendering, error handling, and response management. Includes handling for redirects, 404 errors, and server errors in both development and production environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ app, resolve, render, serve }) => {\n  // we capture any other Express route and hand it\n  // over to Vue and Vue Router to render our page\n  app.get(resolve.urlPath('*'), (req, res) => {\n    res.setHeader('Content-Type', 'text/html')\n\n    render({ req, res })\n      .then(html => {\n        // now let's send the rendered html to the client\n        res.send(html)\n      })\n      .catch(err => {\n        // oops, we had an error while rendering the page\n\n        // we were told to redirect to another URL\n        if (err.url) {\n          if (err.code) {\n            res.redirect(err.code, err.url)\n          }\n          else {\n            res.redirect(err.url)\n          }\n        }\n        // hmm, Vue Router could not find the requested route\n        else if (err.code === 404) {\n          // Should reach here only if no \"catch-all\" route\n          // is defined in /src/routes\n          res.status(404).send('404 | Page Not Found')\n        }\n        // well, we treat any other code as error;\n        // if we're in dev mode, then we can use Quasar CLI\n        // to display a nice error page that contains the stack\n        // and other useful information\n        else if (process.env.DEV) {\n          // serve.error is available on dev only\n          serve.error({ err, req, res })\n        }\n        // we're in production, so we should have another method\n        // to display something to the client when we encounter an error\n        // (for security reasons, it's not ok to display the same wealth\n        // of information as we do in development)\n        else {\n          // Render Error Page on production or\n          // create a route (/src/routes) for an error page and redirect to it\n          res.status(500).send('500 | Internal Server Error')\n\n          if (process.env.DEBUGGING) {\n            console.error(err.stack)\n          }\n        }\n      })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Date Creation and Validation\nDESCRIPTION: Shows how to create and validate dates using Quasar's date utilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = date.buildDate({ year: 2010, date: 5, hours: 15, milliseconds: 123 })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst dateString = 'Wed, 09 Aug 1995 00:00:00 GMT'\n\nif (date.isValid(dateString)) {\n  // Do something with date string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with Perl Mojolicious\nDESCRIPTION: This snippet shows how to implement a file upload endpoint using Perl Mojolicious framework. It includes CORS configuration and a route for handling file uploads.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_5\n\nLANGUAGE: perl\nCODE:\n```\nuse Mojolicious::Lite -signatures;\n\n# CORS\napp->hook(after_dispatch => sub {\n    my $c = shift;\n    $c->res->headers->header('Access-Control-Allow-Origin' => '*');\n});\noptions '*' => sub ($c) {\n   $c->res->headers->header('Access-Control-Allow-Methods' => 'GET, OPTIONS, POST, DELETE, PUT');\n   $c->res->headers->header('Access-Control-Allow-Headers' => 'Content-Type');\n   $c->render(text => '');\n};\n\npost '/upload' => sub ($c) {\n   my $uploads = $c->req->uploads('files');\n\n   foreach my $f (@{$uploads}) {\n      $f->move_to('/tmp/' . $f->filename);\n   }\n\n   $c->render(text => 'Saved!');\n};\n\napp->start;\n```\n\n----------------------------------------\n\nTITLE: Configuring No Data Label in QTable with Vue\nDESCRIPTION: Demonstrates how to set up and customize the no data label for a QTable component when there is no data to display.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"No Data Label\" file=\"NoData\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Quasar's Morph Utility in JavaScript\nDESCRIPTION: Demonstrates the basic usage of Quasar's morph utility to transform one DOM element into another. The function returns a cancelMorph function that can be used to cancel or reverse the animation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/morph-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { morph } from 'quasar'\n\n// Morph one DOM element to another:\nconst cancelMorph = morph({\n  from: '#from-el',\n  to: '#to-el'\n})\n\n// call cancelMorph() to cancel the morphing\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta Plugin with Options API in Vue\nDESCRIPTION: Example showing how to use createMetaMixin to manage meta tags and other meta-related configurations using Options API. Shows the same comprehensive meta configuration as the Composition API example.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/meta.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMetaMixin } from 'quasar'\n\nconst metaData = {\n  title: 'Index Page',\n  titleTemplate: title => `${title} - My Website`,\n\n  meta: {\n    description: { name: 'description', content: 'Page 1' },\n    keywords: { name: 'keywords', content: 'Quasar website' },\n    equiv: { 'http-equiv': 'Content-Type', content: 'text/html; charset=UTF-8' },\n    ogTitle:  {\n      property: 'og:title',\n      template (ogTitle) {\n        return `${ogTitle} - My Website`\n      }\n    }\n  },\n\n  link: {\n    material: { rel: 'stylesheet', href: 'https://fonts.googleapis.com/icon?family=Material+Icons' }\n  },\n\n  script: {\n    ldJson: {\n      type: 'application/ld+json',\n      innerHTML: `{ \"@context\": \"http://schema.org\" }`\n    }\n  },\n\n  htmlAttr: {\n    'xmlns:cc': 'http://creativecommons.org/ns#',\n    empty: undefined\n  },\n\n  bodyAttr: {\n    'action-scope': 'xyz',\n    empty: undefined\n  },\n\n  noscript: {\n    default: 'This is content for browsers with no JS (or disabled JS)'\n  }\n}\n\nexport default {\n  mixins: [\n    createMetaMixin(metaData)\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Boot File with Promise Return\nDESCRIPTION: Example showing how a boot file can return a Promise for handling asynchronous operations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(({ /* app, router, store */ }) => {\n  return new Promise((resolve, reject) => {\n    // do something\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Control Functions in Vue Component\nDESCRIPTION: Vue component setup function implementing window control methods using the exposed Electron API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup () {\n    // we rely upon\n    function minimize () {\n      if (process.env.MODE === 'electron') {\n        window.myWindowAPI.minimize()\n      }\n    }\n\n    function toggleMaximize () {\n      if (process.env.MODE === 'electron') {\n        window.myWindowAPI.toggleMaximize()\n      }\n    }\n\n    function closeApp () {\n      if (process.env.MODE === 'electron') {\n        window.myWindowAPI.close()\n      }\n    }\n\n    return { minimize, toggleMaximize, closeApp }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Pinia Store via CLI\nDESCRIPTION: Command line instruction for creating a new Pinia store using Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/state-management-with-pinia.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new store <store_name> [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Vertical QTabs with QSplitter and QTabPanels in Vue\nDESCRIPTION: Shows how to create a layout with vertical tabs using QTabs, QSplitter, and QTabPanels components, providing a more complex interface structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With vertical QTabs and QSplitter\" file=\"TabsAndSplitter\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Router Routes with PreFetch Components\nDESCRIPTION: Example of Vue Router configuration showing nested routes where PreFetch hooks can be implemented\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/prefetch-feature.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    path: '/',\n    component: LandingPage\n  },\n  {\n    path: '/shop',\n    component: ShopLayout,\n    children: [\n      {\n        path: 'all',\n        component: ShopAll\n      },\n      {\n        path: 'new',\n        component: ShopNew\n      },\n      {\n        path: 'product/:name',\n        component: ShopProduct,\n        children: [{\n          path: 'overview',\n          component: ShopProductOverview\n        }]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Child Component with Composition API\nDESCRIPTION: Shows how to create a Vue component that connects to a parent QForm using the Composition API with useFormChild hook for validation purposes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFormChild } from 'quasar'\n\nuseFormChild ({\n  validate,     // Function returning a Boolean (or a Promise resolving to a Boolean)\n  resetValidation, // Optional function which resets validation\n  requiresQForm // Boolean -> if \"true\" and your component\n                //   is not wrapped by QForm it then displays\n                //   an error message\n})\n\n// some component\nexport default {\n  setup () {\n    // required! should return a Boolean\n    function validate () {\n      console.log('called my-comp.validate()')\n      return true\n    }\n\n    function resetValidation () {\n      // ...\n    }\n\n    useFormChild({ validate, resetValidation, requiresQForm: true })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar Configuration in App Extension\nDESCRIPTION: Demonstrates how to use api.extendQuasarConf to extend the quasar.config file. This example shows how to register boot and CSS files, and handle differences between Vite and Webpack configurations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api, ctx) {\n  api.extendQuasarConf((conf, api) => {\n    // make sure my-ext boot file is registered\n    conf.boot.push('~quasar-app-extension-my-ext/src/boot/my-ext-bootfile.js')\n\n    if (api.hasVite !== true) {\n      // make sure boot file transpiles\n      conf.build.webpackTranspileDependencies.push(/quasar-app-extension-my-ext[\\/]src[\\/]boot/)\n      // if boot file imports anything, make sure that\n      // the regex above matches those files too!\n    }\n\n    // make sure my-ext css goes through webpack\n    conf.css.push('~quasar-app-extension-my-ext/src/component/my-ext.sass')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar Configuration for Directive Registration\nDESCRIPTION: Configuration extension function that registers the directive's boot file and sets up webpack transpilation dependencies if needed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/provide-a-directive.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction extendConf (conf, api) {\n  conf.boot.push('~quasar-app-extension-my-directive/src/boot/register-my-directive.js')\n\n  if (api.hasVite !== true) {\n    conf.build.webpackTranspileDependencies.push(/quasar-app-extension-my-directive[\\/]src/)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Quasar Layout and Pages with CLI\nDESCRIPTION: Commands to generate new layout and page components using Quasar CLI\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new layout User\n app:new Generated layout: src/layouts/User.vue +0ms\n app:new Make sure to reference it in src/router/routes.js +2ms\n\n$ quasar new page Profile Posts\n app:new Generated page: src/pages/Profile.vue +0ms\n app:new Make sure to reference it in src/router/routes.js +2ms\n\n app:new Generated page: src/pages/Posts.vue +1ms\n app:new Make sure to reference it in src/router/routes.js +0ms\n```\n\n----------------------------------------\n\nTITLE: Setting Default Notification Configuration in a Vue Component\nDESCRIPTION: Demonstrates how to set default configuration for all notifications from within a Vue component using the useQuasar composable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.notify.setDefaults({\n    position: 'top-right',\n    timeout: 2500,\n    textColor: 'white',\n    actions: [{ icon: 'close', color: 'white' }]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ssrContext in Vue Components with Composition API\nDESCRIPTION: Shows how to access the ssrContext object in a Vue component using the Composition API. It uses the useSSRContext hook and checks if it's running on the server-side.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-context.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSSRContext } from 'vue'\n\nexport default {\n  // ...\n  setup () {\n    // we need to guard it and call it only on SSR server-side:\n    const ssrContext = process.env.SERVER ? useSSRContext() : null\n    // ...do something with it\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Meta Configuration with useMeta in Quasar\nDESCRIPTION: Demonstrates how to use useMeta composable for static meta configuration in a Quasar component's setup function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-meta.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMeta } from 'quasar'\n\nsetup () {\n  useMeta({ /* meta config */ })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic v-scroll Directive Usage with Vue Template\nDESCRIPTION: Demonstrates basic implementation of v-scroll directive in a Vue component with a template and setup function. The onScroll handler receives the scroll position in pixels.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/scroll.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  ...\n  <div v-scroll=\"onScroll\">...</div>\n  ...\n</template>\n\n<script>\nexport default {\n  setup () {\n    function onScroll (position) {\n      // when this method is invoked then it means user\n      // has scrolled the page to `position`\n      //\n      // `position` is an Integer designating the current\n      // scroll position in pixels.\n    }\n\n    return { onScroll }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dynamic Imports with Specific Folder Paths\nDESCRIPTION: Shows how to optimize dynamic imports by using more specific folder paths to limit the number of potential files being chunked during build.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// bad -- makes chunks for any JSON inside ./folder (recursive search)\nconst asset = 'my/jsons/categories.json'\nimport('./folder/' + asset)\n\n// good -- makes chunks only for JSONs inside ./folder/my/jsons\nconst asset = 'categories.json'\nimport('./folder/my/jsons/' + asset)\n```\n\n----------------------------------------\n\nTITLE: Single vs Multiple Selection Model\nDESCRIPTION: Demonstrates the difference between single and multiple selection models. Single selection can use any type while multiple selection requires an Array\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/select.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Single vs multiple selection\" file=\"ModelSingleMultiple\" />\n```\n\n----------------------------------------\n\nTITLE: Secure IPC Implementation Example\nDESCRIPTION: Recommended way to implement IPC communication in preload script with proper security measures.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Good code\ncontextBridge.exposeInMainWorld('myAPI', {\n  loadPreferences: () => ipcRenderer.invoke('myAPI:load-prefs')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Icon Sets in Quasar CLI\nDESCRIPTION: Full example of including MDI & Fontawesome icon sets and configuring Quasar to use Fontawesome for its components in a Quasar CLI project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nextras: [\n  'mdi-v7',\n  'fontawesome-v6'\n],\nframework: {\n  iconSet: 'fontawesome-v6'\n}\n```\n\n----------------------------------------\n\nTITLE: Nested QMenu Implementation\nDESCRIPTION: Example of creating nested menus (submenus) using multiple QMenu components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/menu/menu.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Menus in menus\" file=\"MenuInMenu\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing useFormChild Composable in Vue 3 Setup Function\nDESCRIPTION: This snippet demonstrates how to import and use the useFormChild composable within a Vue 3 component's setup function. It shows the structure of the composable's configuration object, including the validate and resetValidation functions, and the requiresQForm option.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-form-child.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFormChild } from 'quasar'\n\nsetup () {\n  // function validate () { ... }\n  // function resetValidation () { ... }\n\n  useFormChild({\n    validate, // Function; Can be async;\n              // Should return a Boolean (or a Promise resolving to a Boolean)\n    resetValidation,    // Optional function which resets validation\n    requiresQForm: true // should it error out if no parent QForm is found?\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Component with Dialog Plugin\nDESCRIPTION: Demonstrates how to invoke a custom component using the Dialog plugin, both by importing Dialog directly and by using the useQuasar composable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This way of using it can reside outside\n * of a Vue component as well\n */\n\nimport { Dialog } from 'quasar'\nimport CustomComponent from '..path.to.component..'\n\nDialog.create({\n  component: CustomComponent,\n\n  // props forwarded to your custom component\n  componentProps: {\n    text: 'something',\n    persistent: true,\n    // ...more..props...\n  }\n}).onOk(() => {\n  console.log('OK')\n}).onCancel(() => {\n  console.log('Cancel')\n}).onDismiss(() => {\n  console.log('Called on OK or Cancel')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete useId Implementation Example\nDESCRIPTION: Full example showing how to implement useId in a Vue component with props and template binding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-id.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div :id=\"id\">\n    Some component\n  </div>\n</template>\n\n<script>\nimport { useId } from 'quasar'\n\nexport default {\n  props: {\n    for: String\n  },\n\n  setup () {\n    const id = useId({\n      getValue: () => props.for,\n      required: true\n    })\n\n    return { id }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Screen Plugin in Vue Component Setup\nDESCRIPTION: Example showing how to use the Screen plugin in a Vue component by importing useQuasar. Demonstrates creating a computed property that changes button color based on screen size.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// script part of a Vue component\nimport { useQuasar } from 'quasar'\nimport { computed } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n    const buttonColor = computed(() => {\n      return $q.screen.lt.md\n        ? 'primary'\n        : 'secondary'\n    })\n\n    return { buttonColor }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Cookie Inside a Vue Component\nDESCRIPTION: Demonstrates how to delete a cookie inside a Vue component using the Composition API with useQuasar, including handling cookies with specific path or domain options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.cookies.remove('cookie_name')\n\n  // if cookie was set with specific options like path and/or domain\n  // then you need to also supply them when removing:\n  $q.cookies.remove('cookie_name', options)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating App Icons with Icon Genie CLI for Capacitor in Quasar\nDESCRIPTION: This command uses Icon Genie CLI to generate and place app icons for a Capacitor-based Quasar mobile app. It requires specifying the mode as capacitor, the input icon path, and optionally a background image path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/app-icons-capacitor.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m capacitor -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia Store in Quasar\nDESCRIPTION: Initializes Pinia store system in a Quasar application. This is automatically created when running 'quasar new store' or when selecting Pinia during project scaffolding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/state-management-with-pinia.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from '#q-app/wrappers'\nimport { createPinia } from 'pinia'\n\n/*\n * If not building with SSR mode, you can\n * directly export the Store instantiation;\n *\n * The function below can be async too; either use\n * async/await or return a Promise which resolves\n * with the Store instance.\n */\n\nexport default defineStore((/* { ssrContext } */) => {\n  const pinia = createPinia()\n\n  // You can add Pinia plugins here\n  // pinia.use(SomePiniaPlugin)\n\n  return pinia\n})\n```\n\n----------------------------------------\n\nTITLE: Promise-based SSR Middleware\nDESCRIPTION: Example of implementing an SSR middleware using Promise-based return instead of async/await.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\nexport default defineSsrMiddleware(({ app, port, resolve, publicPath, folders, render, serve }) => {\n  return new Promise((resolve, reject) => {\n    // something to do with the server \"app\"\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Writing a Cookie Outside of a Vue File\nDESCRIPTION: Shows how to set a cookie value outside of a Vue component by importing the Cookies utility directly, with optional configuration options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\n\nCookies.set('cookie_name', cookie_value)\n\n// or pass in options also:\nCookies.set('cookie_name', cookie_value, options)\n```\n\n----------------------------------------\n\nTITLE: Basic QDrawer Implementation in Vue\nDESCRIPTION: Demonstrates basic usage of QDrawer component in a QLayout container. Shows how to integrate the drawer into a layout system.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Component Import in Vue\nDESCRIPTION: Example of importing and registering a component with lazy loading in a Vue component using defineAsyncComponent.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport { defineAsyncComponent } from 'vue'\nexport default {\n  components: {\n    SomeComponent: defineAsyncComponent(() => import('components/SomeComponent.vue')),\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Error 500 Route in Vue Router\nDESCRIPTION: Route configuration for handling 500 error pages in Vue Router.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ path: 'error500', component: () => import('pages/Error500.vue') }\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttle Function in JavaScript with Quasar\nDESCRIPTION: Demonstrates how to use the throttle function from Quasar to limit the maximum number of times a function can be called over time. Includes examples of using throttle with event listeners and as a method in a Vue component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { throttle } from 'quasar'\n\n(Throttled Function) throttle(Function fn, Number limit_in_milliseconds)\n\n// Example:\nwindow.addEventListener(\n  'resize',\n  throttle(function() {\n    .... things to do ...\n  }, 300 /* execute at most once every 0.3s */)\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmethods: {\n  myMethod () { .... }\n},\n\ncreated () {\n  this.myMethod = throttle(this.myMethod, 500)\n}\n```\n\n----------------------------------------\n\nTITLE: Mini-mode with Click Event\nDESCRIPTION: Implementation of mini-mode drawer that toggles to full mode on click.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Mini-mode with click trigger\" file=\"MiniClickEvent\" />\n```\n\n----------------------------------------\n\nTITLE: Registering i18n Boot File in Quasar Config\nDESCRIPTION: Configuration snippet showing how to register the i18n boot file in the quasar.config.js file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nreturn {\n  boot: [\n    // ...\n    'i18n'\n  ],\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronized Pagination in QTable with Vue\nDESCRIPTION: Shows how to use v-model:pagination directive to synchronize and control pagination from outside the QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Synchronized pagination\" file=\"PaginationSync\" />\n```\n\n----------------------------------------\n\nTITLE: Replacing Express.js with Connect in Quasar SSR\nDESCRIPTION: This code snippet shows how to replace the default Express.js server with a Connect-compatible server in a Quasar SSR project. It demonstrates the creation of a Connect app and applying compression middleware in production.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-webserver.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrCreate } from '#q-app/wrappers'\nimport connect from 'connect'\nimport compression from 'compression'\n\nexport const create = defineSsrCreate((/* { ... } */) => {\n  const app = connect()\n\n  // place here any middlewares that\n  // absolutely need to run before anything else\n  if (process.env.PROD) {\n    app.use(compression())\n  }\n\n  return app\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendor Chunk Exclusions in Quasar\nDESCRIPTION: Shows how to configure Quasar to exclude specific packages from the vendor chunk, creating separate chunks for them instead.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  vendor: {\n    remove: [ 'my-package' ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Type Checking in Quasar\nDESCRIPTION: Shows how to verify if a value is an object using is.object utility method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/type-checking-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { is } from 'quasar'\n\nconst obj = { some: 'value' }\nconsole.log( is.object(obj) ) // true\n```\n\n----------------------------------------\n\nTITLE: Initializing QTable with Internal Expansion Model in Vue\nDESCRIPTION: Demonstrates how to set up a QTable with an internal expansion model for expanding rows. This example includes the necessary components and data structure for expanding table rows.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Internal expansion model\" file=\"ExpandedRowInternal\" />\n```\n\n----------------------------------------\n\nTITLE: New Value Creation Handler\nDESCRIPTION: Demonstrates how to handle creation of new values in QSelect using new-value-mode prop and @new-value event\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/select.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"New value mode\" file=\"CreateNewValueMode\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Touch Repeat in Vue\nDESCRIPTION: Demonstrates the basic usage of v-touch-repeat directive in a Vue template. This snippet shows how to apply the directive to an element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-repeat.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-repeat=\"myHandler\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Setting ESLint as Default Formatter in VS Code for Quasar Projects\nDESCRIPTION: VS Code configuration to set ESLint as the default formatter when not using Prettier in Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable QTooltip in Vue\nDESCRIPTION: Demonstrates how to create a reusable QTooltip that can be shared with different target elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Using target\" file=\"Target\" />\n```\n\n----------------------------------------\n\nTITLE: Watching AppVisibility Status Changes in Vue Component\nDESCRIPTION: Shows how to watch for changes in app visibility status within a Vue component using the Composition API. Uses watch to monitor the appVisible property and log status changes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/app-visibility.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>...</template>\n\n<script>\nimport { useQuasar } from 'quasar'\nimport { watch } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    watch(() => $q.appVisible, val => {\n      console.log(val ? 'App became visible' : 'App went in the background')\n    })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing SSR Context in Boot File\nDESCRIPTION: This code shows how to access the SSR context in a boot file and add custom properties to it for use in the index.html template.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ app, ..., ssrContext }) => {\n  // You can add props to the ssrContext then use them in the /index.html.\n  // Example - let's say we ssrContext.someProp = 'some value', then in index template we can reference it:\n  // {{ someProp }}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Loading State in QTable with Vue\nDESCRIPTION: Shows how to implement a default loading state for a QTable component when data is being fetched or processed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Default loading\" file=\"Loading\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useHydration Composable in Vue.js Setup\nDESCRIPTION: This snippet demonstrates how to import and use the useHydration composable in a Vue.js component's setup function. It returns an isHydrated ref that can be used to conditionally render content after hydration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-hydration.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useHydration } from 'quasar'\n\nsetup () {\n  const { isHydrated } = useHydration()\n}\n```\n\n----------------------------------------\n\nTITLE: Label Slots Usage in QOptionGroup\nDESCRIPTION: Demonstrates how to use label slots in QOptionGroup component. Shows both generic and index-specific label slots with QTooltip integration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/option-group.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Label slots\" file=\"LabelSlots\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo-Redo with Mutation Observer in Vue\nDESCRIPTION: This snippet shows how to use the Mutation directive to implement an undo-redo functionality in a Vue application using Quasar Framework.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/mutation.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Undo/Redo\" file=\"UndoRedo\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Language Pack Loading (Non-SSR)\nDESCRIPTION: Implementation of dynamic language pack loading for non-SSR Quasar applications using both Vite and Webpack configurations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-language-packs.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport { Lang } from 'quasar'\n\nconst langList = import.meta.glob('../../node_modules/quasar/lang/*.js')\n\nexport default defineBoot(async () => {\n  const langIso = 'de'\n  try {\n    langList[ `../../node_modules/quasar/lang/${ langIso }.js` ]().then(lang => {\n      Lang.set(lang.default)\n    })\n  }\n  catch (err) {\n    console.error(err)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Color Values with getPaletteColor in Quasar\nDESCRIPTION: Demonstrates how to use getPaletteColor function to retrieve hex color values from Quasar's color palette. This utility allows accessing brand colors and palette colors programmatically.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/color-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { colors } from 'quasar'\n\nconst { getPaletteColor } = colors\n\nconsole.log(getPaletteColor('primary')) // '#1976d2'\nconsole.log(getPaletteColor('red-2')) // '#ffcdd2'\n```\n\n----------------------------------------\n\nTITLE: Inspecting Vite Config using Quasar CLI\nDESCRIPTION: Shows the usage of the Quasar CLI command for inspecting the generated Vite configuration. This command allows developers to view and analyze the Vite config for different Quasar commands and app modes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar inspect -h\n\n  Description\n    Inspect Quasar generated Vite config\n\n  Usage\n    $ quasar inspect\n    $ quasar inspect -c build\n    $ quasar inspect -m electron -p 'build.outDir'\n\n  Options\n    --cmd, -c        Quasar command [dev|build] (default: dev)\n    --mode, -m       App mode [spa|ssr|pwa|bex|cordova|capacitor|electron] (default: spa)\n    --depth, -d      Number of levels deep (default: 2)\n    --path, -p       Path of config in dot notation\n                        Examples:\n                          -p module.rules\n                          -p plugins\n    --thread, -t     Display only one specific app mode config thread\n    --help, -h       Displays this message\n```\n\n----------------------------------------\n\nTITLE: Using Image Asset in CSS Background\nDESCRIPTION: Shows how to use an image asset as a background in CSS. The URL is processed by Vite as a module dependency.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-assets.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbackground: url(./logo.png)\n```\n\n----------------------------------------\n\nTITLE: Practical Example of useTimeout Composable in Quasar\nDESCRIPTION: This example demonstrates how to use the useTimeout composable in a Vue 3 setup function. It shows how to register a timeout that logs a parameter after a 2-second delay, and notes that multiple calls to the function will only execute the last registered function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-timeout.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTimeout } from 'quasar'\n\nsetup () {\n  const { registerTimeout } = useTimeout()\n\n  function onSomeEvent (param) {\n    registerTimeout(() => {\n      console.log('param is', param)\n    }, 2000) // in 2 seconds\n  }\n\n  // ...\n\n  // You can call onSomeEvent() multiple\n  // times in a row and only the last\n  // registered Function will run when it\n  // is time for it\n\n  // Note that the delay is reset each\n  // time you register/override the timeout\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics Router Integration in Quasar\nDESCRIPTION: Boot file implementation that automatically tracks page views by hooking into the router's afterEach navigation guard. Sends page tracking information to Google Analytics after each route change.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\nimport ga from 'analytics.js'\n\nexport default defineRouter(({ router }) => {\n  router.afterEach((to, from) => {\n    ga.logPage(to.path, to.name, sessionId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Hosting for Quasar PWA Service Worker\nDESCRIPTION: This JSON configuration for Firebase hosting ensures that the service worker file (sw.js) is not cached by browsers, which is crucial for proper updates in Quasar PWAs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/handling-service-worker.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"headers\": [\n      { \"source\":\"/sw.js\", \"headers\": [{\"key\": \"Cache-Control\", \"value\": \"no-cache\"}] }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Cookie Outside of a Vue File\nDESCRIPTION: Shows how to read a cookie value outside of a Vue component by importing the Cookies utility directly. Returns null when the cookie is not set.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\nconst value = Cookies.get('cookie_name')\n```\n\n----------------------------------------\n\nTITLE: Basic EventBus Usage Example\nDESCRIPTION: Demonstrates how to import, instantiate and use the EventBus for basic event handling with event emission and listening.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/event-bus-util.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventBus } from 'quasar'\n\nconst bus = new EventBus()\n\nbus.on('some-event', (arg1, arg2, arg3) => {\n // do some work\n})\n\nbus.emit('some-event', 'arg1 value', 'arg2 value', 'arg3 value')\n```\n\n----------------------------------------\n\nTITLE: Using api.compatibleWith in Quasar App Extension\nDESCRIPTION: Shows how to use api.compatibleWith to ensure the App Extension is compatible with a package installed in the host app through a semver condition. This example checks compatibility with different Quasar app versions based on the engine being used.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (api.hasVite === true) {\n  api.compatibleWith('@quasar/app-vite', '^2.0.0')\n}\nelse {\n  api.compatbileWith('@quasar/app-webpack', '^4.0.0')\n}\n```\n\n----------------------------------------\n\nTITLE: Early Ripple Trigger Implementation\nDESCRIPTION: Shows how to trigger ripple effects on first user interaction (mousedown, touchstart, keydown) instead of default click/keyup events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/material-ripples.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Triggering immediately\" file=\"Early\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors in Components\nDESCRIPTION: Demonstrates how to use custom colors with Quasar components\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<q-btn color=\"brand\" ... />\n```\n\n----------------------------------------\n\nTITLE: Debounced v-scroll Implementation\nDESCRIPTION: Shows how to implement v-scroll with debouncing using Quasar's debounce utility. The scroll handler is debounced by 200ms to improve performance.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/scroll.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { debounce } from 'quasar'\n\nexport default {\n  setup () {\n    function onScroll (position) {\n      // when this method is invoked then it means user\n      // has scrolled the page to `position`\n      //\n      // `position` is an Integer designating the current\n      // scroll position in pixels.\n    }\n\n    return {\n      onScroll: debounce(onScroll, 200) // debounce for 200ms\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Quasar App Extension Development Environment\nDESCRIPTION: Commands for setting up and running the development environment for a Quasar app extension. Includes instructions for installing dependencies, building the app extension, and starting different playground environments for testing with Vite or Webpack.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ <%= packageManager?.name ?? 'pnpm' %> i # install the dependencies\n\n$ <%= packageManager?.name ?? 'pnpm' %> build # build the app-extension. Run this after making any change in ./app-extension\n\n$ <%= packageManager?.name ?? 'pnpm' %> dev:vite # start the app-vite playground\n$ <%= packageManager?.name ?? 'pnpm' %> dev:webpack # start the app-webpack playground\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics Router Hook - JavaScript\nDESCRIPTION: Boot file implementation that adds a router hook to automatically track page views after each route change using the analytics module.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\nimport ga from 'analytics.js'\n\nexport default defineRouter(({ router }) => {\n  router.afterEach((to, from) => {\n    ga.logPage(to.path, to.name, sessionId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Promise Handling\nDESCRIPTION: Example of using dynamic import to lazy load a JSON file and handle the Promise.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport('./categories.json')\n  .then(categories => {\n    // hey, we have lazy loaded the file\n    // and we have its content in \"categories\"\n  })\n  .catch(() => {\n    // oops, something went wrong...\n    // couldn't load the resource\n  })\n```\n\n----------------------------------------\n\nTITLE: Applying Safe Area Insets for iOS Notches and Status Bars\nDESCRIPTION: CSS code to handle safe areas for iOS devices with notches or status bars, ensuring content doesn't overlap with system UI elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n// for your app's header\npadding-top: constant(safe-area-inset-top) // for iOS 11.0\npadding-top: env(safe-area-inset-top) // for iOS 11.2 +\n// for your app's footer\npadding-bottom: constant(safe-area-inset-bottom)\npadding-bottom: env(safe-area-inset-bottom)\n```\n\n----------------------------------------\n\nTITLE: Writing a Secure Cookie Example\nDESCRIPTION: Demonstrates setting a cookie with the secure flag enabled, which ensures the cookie is only sent over HTTPS connections.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\n\nCookies.set('quasar', 'framework', {\n  secure: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using Intersection Directive with Once Modifier in Vue\nDESCRIPTION: Shows how to use the Intersection directive with the 'once' modifier to trigger the handler function only once when the element comes into view.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/intersection.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nv-intersection.once\n```\n\n----------------------------------------\n\nTITLE: Developing PWA with Quasar CLI\nDESCRIPTION: Commands for starting a development server for PWA mode in Quasar. Includes both short and long form syntax options. Note that development server uses minimal Service Worker precaching.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m pwa\n\n# ..or the longer form:\n$ quasar dev --mode pwa\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Animation Classes with Vue Transition (HTML)\nDESCRIPTION: This snippet demonstrates how to apply multiple animation classes, including modifiers for delay, repetition, and speed, to a Quasar button using Vue's transition component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/animations.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<transition\n  appear\n  enter-active-class=\"animated fadeIn slower delay-5s repeat-2\"\n  leave-active-class=\"animated fadeOut\"\n>\n  <!-- Wrapping only one DOM element, defined by QBtn -->\n  <q-btn\n    color=\"secondary\"\n    icon=\"mail\"\n    label=\"Email\"\n  />\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Using normalizeToInterval Method in Quasar\nDESCRIPTION: Demonstrates the normalizeToInterval formatter which normalizes a number to a specified interval. This method is useful for creating cyclic values within a defined range.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format } from 'quasar'\nconst { normalizeToInterval } = format\n\n// (Number) normalizeToInterval(Number, Number lower_margin, Number upper_margin)\n\nconsole.log( normalizeToInterval(21, 10, 20) ) // 10\nconsole.log( normalizeToInterval(33, 10, 20) ) // 11\nconsole.log( normalizeToInterval(52, 10, 20) ) // 19\nconsole.log( normalizeToInterval(5, 10, 16) ) // 12\n```\n\n----------------------------------------\n\nTITLE: QIntersection with Transition Effects\nDESCRIPTION: Shows how to implement QIntersection with transition animations, utilizing Quasar's built-in transition system.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/intersection.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With transition\" file=\"Transition\" scrollable no-edit />\n```\n\n----------------------------------------\n\nTITLE: Async Boot File Implementation\nDESCRIPTION: Example of an async boot file that can handle asynchronous operations during initialization.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nexport default defineBoot(async ({ app, router, store }) => {\n  // something to do\n  await something()\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified Promise Rejection Redirect\nDESCRIPTION: A simplified version of Promise-based redirection in a Quasar boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(() => {\n  // ...\n  const isAuthorized = // ...\n  if (!isAuthorized && !urlPath.startsWith('/login')) {\n    return Promise.reject({ url: '/login' })\n  }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Validation Rule\nDESCRIPTION: Example showing how to write a basic validation rule for QField component that checks if a value is less than 10\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/field.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvalue => value < 10 || 'Value should be lower'\n```\n\n----------------------------------------\n\nTITLE: Checking if a Cookie Exists Outside of a Vue File\nDESCRIPTION: Shows how to verify if a cookie exists outside of a Vue component by importing the Cookies utility directly. Returns a boolean value.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\nCookies.has('cookie_name') // Boolean\n```\n\n----------------------------------------\n\nTITLE: Accessing ssrContext in Vue Components with Options API\nDESCRIPTION: Demonstrates how to access the ssrContext object in a Vue component using the Options API. The ssrContext is available as a property on the component instance.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-context.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  created () { // can be any other Vue component lifecycle hook\n    this.ssrContext\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Screen Plugin in HTML Template\nDESCRIPTION: Example of using the $q.screen object in a Vue template to conditionally set the 'dense' property of a q-list component based on screen size.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-list :dense=\"$q.screen.lt.md\">\n  <q-item>\n    <q-item-section>John Doe</q-item-section>\n  </q-item>\n\n  <q-item>\n    <q-item-section>Jane Doe</q-item-section>\n  </q-item>\n</q-list>\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive QTable with Dense Property in Vue\nDESCRIPTION: Demonstrates how to create a responsive QTable using the dense property in combination with Quasar's screen plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Using dense prop\" file=\"ResponsiveDense\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Sizes for q-gutter Classes in Quasar\nDESCRIPTION: Example showing different gutter sizes available with the q-gutter-* classes in Quasar. This demonstrates how the same element layout appears with different spacing between elements using various size classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Sizes for q-gutter\" file=\"GutterSize\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Script for Web Page Injection in JavaScript\nDESCRIPTION: This JavaScript code creates an IFrame to inject a Quasar app into a web page, handling events for resizing and toggling the drawer. It demonstrates how to create a bridge between the content script and the Quasar app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/content'\n\nconst bridge = createBridge({ debug: false });\n\nbridge.on('wb.drawer.toggle', ({ data, respond }) => {\n  if (data.open) {\n    setIFrameHeight('100%')\n  } else {\n    resetIFrameHeight()\n  }\n  respond()\n})\n\nconst iFrame = document.createElement('iframe')\nconst defaultFrameHeight = '62px'\n\nfunction setIFrameHeight (height) {\n  iFrame.height = height\n}\n\nfunction resetIFrameHeight () {\n  setIFrameHeight(defaultFrameHeight)\n}\n\niFrame.id = 'bex-app-iframe'\niFrame.width = '100%'\nresetIFrameHeight()\n\nObject.assign(iFrame.style, {\n  position: 'fixed',\n  top: '0',\n  right: '0',\n  bottom: '0',\n  left: '0',\n  border: '0',\n  zIndex: '9999999',\n  overflow: 'visible'\n})\n\n;(function () {\n  iFrame.src = chrome.runtime.getURL('www/index.html')\n  document.body.prepend(iFrame)\n})()\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with Tokens\nDESCRIPTION: Demonstrates how to format dates using the formatDate utility with various tokens and i18n support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst timeStamp = Date.now()\nconst formattedString = date.formatDate(timeStamp, 'YYYY-MM-DDTHH:mm:ss.SSSZ')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst formattedString = date.formatDate(timeStamp, 'MMMM - dddd', {\n  days: ['Duminica', 'Luni', /* and all the rest of days - remember starting with Sunday */],\n  daysShort: ['Dum', 'Lun', /* and all the rest of days - remember starting with Sunday */],\n  months: ['Ianuarie', 'Februarie', /* and all the rest of months */],\n  monthsShort: ['Ian', 'Feb', /* and all the rest of months */]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Previous Results in Promise Chain\nDESCRIPTION: Shows how to access results from previous promises in the sequence using the resultAggregator parameter.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSequentialPromises } from 'quasar'\n\nrunSequentialPromises({\n  phones: () => new Promise((resolve, reject) => { /* do some work... */ }),\n  vendors: (resultAggregator) => {\n    new Promise((resolve, reject) => {\n      // You can do something with resultAggregator.phones.value here...\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using $q Object with Vue Composition API without Script Setup\nDESCRIPTION: Shows how to implement $q object functionality in a Vue component using standard Composition API syntax without script setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/the-q-object.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"$q.platform.is.ios\">\n      Gets rendered only on iOS platform.\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    console.log($q.platform.is.ios)\n\n    // showing an example on a method, but\n    // can be any part of Vue script\n    function show () {\n      // prints out Quasar version\n      console.log($q.version)\n    }\n\n    return {\n      show\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of QResizeObserver Component in Vue.js\nDESCRIPTION: Example showing how to implement the QResizeObserver component. The component emits a 'resize' event whenever its parent container's dimensions change, including an initial event when first mounted to the DOM.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/resize-observer.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Virtual Scroll Features\nDESCRIPTION: Examples showing scroll position control and dynamic item generation\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/virtual-scroll.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Scroll to position\" file=\"ScrollTo\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Generate items on the fly\" file=\"GenerateItems\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Virtual scroll with multiple rows for a data row\" file=\"VirtscrollMultipleRows\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Virtual scroll with expansion model\" file=\"VirtscrollExpandedRow\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar Sass Variables\nDESCRIPTION: Example demonstrating how to extend Quasar's built-in Sass variables by merging new space values with existing ones using Sass map functions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/sass-scss-variables/sass-scss-variables.md#2025-04-16_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"quasar/src/css/variables\" as q;\n@use \"sass:map\";\n\n$space-xxl: (x: 64px, y: 64px);\n\n$new-spaces: (\n  xxl: $space-xxl,\n);\n\n$spaces: map.merge(q.$spaces, $new-spaces);\n```\n\n----------------------------------------\n\nTITLE: Mode Management Commands\nDESCRIPTION: Commands for adding and removing support for different Quasar modes including PWA, SSR, BEX, Cordova, Capacitor, and Electron.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode -h\n\n  Description\n    Add/Remove support for PWA / BEX / Cordova / Capacitor / Electron modes.\n\n  Usage\n    $ quasar mode [add|remove] [pwa|ssr|bex|cordova|capacitor|electron] [--yes]\n\n    # determine what modes are currently installed:\n    $ quasar mode\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in Quasar Config File for PWA Development\nDESCRIPTION: This JavaScript code snippet shows how to configure HTTPS in the Quasar config file for PWA development, including specifying SSL certificate paths.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/handling-service-worker.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  https: {\n    // Use ABSOLUTE paths or fileURLToPath(new URL('./root/relative/path', import.meta.url))\n    // https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener\n    key: \"/path/to/server.key\",\n    pfx: \"/path/to/server.pfx\",\n    cert: \"/path/to/server.crt\",\n    ca: \"/path/to/ca.pem\",\n    passphrase: 'vite-dev-server' // do you need it?\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scroll to Element Helper (JavaScript)\nDESCRIPTION: Example function demonstrating how to scroll to a specific element within its container using Quasar scroll utilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getScrollTarget, setVerticalScrollPosition } = scroll\n\n// takes an element object\nfunction scrollToElement (el) {\n  const target = getScrollTarget(el)\n  const offset = el.offsetTop\n  const duration = 1000\n  setVerticalScrollPosition(target, offset, duration)\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Closing Notifications\nDESCRIPTION: Demonstrates how to programmatically dismiss a notification by capturing and using the dismiss function returned when creating a notification.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst dismiss = $q.notify({...})\n...\ndismiss()\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Child Component with Options API\nDESCRIPTION: Demonstrates how to create a Vue component that connects to a parent QForm using the Options API with QFormChildMixin for validation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QFormChildMixin } from 'quasar'\n\n// some component\nexport default {\n  mixins: [ QFormChildMixin ],\n\n  methods: {\n    // required! should return a Boolean\n    validate () {\n      console.log('called my-comp.validate()')\n      return true\n    },\n\n    // optional\n    resetValidation () {\n      // ...\n    }\n  },\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppFullscreen Outside Vue Components\nDESCRIPTION: Demonstrates how to import and use the AppFullscreen plugin directly outside of a Vue component. Shows requesting and exiting fullscreen mode with promise handling for success and error cases.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/app-fullscreen.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppFullscreen } from 'quasar'\n\n// Requesting fullscreen mode:\nAppFullscreen.request()\n  .then(() => {\n    // success!\n  })\n  .catch(err => {\n    // oh, no!!!\n  })\n\n// Exiting fullscreen mode:\nAppFullscreen.exit()\n  .then(() => {\n    // success!\n  })\n  .catch(err => {\n    // oh, no!!!\n  })\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Controls in QTable with Vue\nDESCRIPTION: Demonstrates how to use the pagination slot to create custom pagination controls for a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Pagination slot\" file=\"PaginationSlot\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Webpack Configuration in Quasar App Extension\nDESCRIPTION: This function allows modification of the Webpack configuration when the host application uses Webpack. It uses webpack-chain to manipulate the configuration object with context awareness for client/server builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction chainWebpack (cfg, { isClient, isServer }, api) {\n  // cfg is a Webpack chain Object;\n  // docs on how to use it: webpack-chain docs (https://github.com/neutrinojs/webpack-chain)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue DevTools in DevServer\nDESCRIPTION: Configuration example for enabling remote Vue DevTools in the Quasar development server setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  vueDevtools: true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar Testing Extensions\nDESCRIPTION: Commands for installing different testing harnesses in a Quasar project. Includes options for Cypress E2E testing and unit testing with Jest or Vitest.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/testing-and-auditing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd your-quasar-project\n\n$ quasar ext add @quasar/testing-e2e-cypress\n# or\n$ quasar ext add @quasar/testing-unit-jest\n# or\n$ quasar ext add @quasar/testing-unit-vitest\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Redirection in PreFetch\nDESCRIPTION: Example showing how to redirect users based on authentication status using the preFetch hook's redirect function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// We assume here we already wrote the authentication logic\n// in one Pinia Store, so take as a high-level example only.\nimport { useMyStore } from 'stores/myStore'\n\npreFetch ({ store, redirect }) {\n  const myStore = useMyStore() // useMyStore(store) for SSR\n  if (!myStore.isAuthenticated) {\n    redirect({ path: '/login' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Redirection in PreFetch\nDESCRIPTION: Example of implementing authentication-based route redirection in PreFetch hook\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/prefetch-feature.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMyStore } from 'stores/myStore'\n\npreFetch ({ store, redirect }) {\n  const myStore = useMyStore() // useMyStore(store) for SSR\n  if (!myStore.isAuthenticated) {\n    redirect({ path: '/login' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue QUploader Component with Authentication\nDESCRIPTION: Example of QUploader component implementation with JWT authentication using factory function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-uploader\n    label=\"Upload\"\n    :factory=\"factoryFn\"\n    style=\"max-width: 300px\"\n  />\n</template>\n\n<script>\nexport default {\n  methods: {\n    factoryFn (file) {\n      return new Promise((resolve, reject) => {\n        // Retrieve JWT token from your store.\n        const token = \"myToken\";\n        resolve({\n          url: 'http://localhost:4444/fileuploader/upload',\n          method: 'POST',\n          headers: [\n            { name: 'Authorization', value: `Bearer ${token}` }\n          ]\n        })\n      })\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Router in Pinia Store\nDESCRIPTION: Example showing how to access the router instance within a Pinia store's actions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/state-management-with-pinia.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useWhateverStore = defineStore('whatever', {\n  // ...\n  actions: {\n    whateverAction () { // do NOT use arrow function\n      this.router.push('...')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Buttons Implementation in HTML\nDESCRIPTION: HTML markup for submit and reset buttons within a QForm component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/form.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <q-btn label=\"Submit\" type=\"submit\" color=\"primary\"/>\n  <q-btn label=\"Reset\" type=\"reset\" color=\"primary\" flat class=\"q-ml-sm\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing QInnerLoading in Vue Components\nDESCRIPTION: Basic example of using QInnerLoading component from Quasar Framework. The component overlays a loading spinner on a component while background processes are running. The parent element must have relative positioning.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/inner-loading.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Asset Paths in JavaScript\nDESCRIPTION: Example of accessing asset paths in JavaScript using require() to ensure Webpack processes the assets correctly. This approach is needed for computed properties or dynamic asset loading.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-assets.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed: {\n  background () {\n    return require('./bgs/' + this.id + '.jpg')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Cookie Outside of a Vue File\nDESCRIPTION: Shows how to delete a cookie outside of a Vue component by importing the Cookies utility directly, with proper handling of path and domain options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\n\nCookies.remove('cookie_name')\n\n// if cookie was set with specific options like path and/or domain\n// then you need to also supply them when removing:\nCookies.remove('cookie_name', options)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Column Distribution in Quasar\nDESCRIPTION: Shows two examples of flex column distribution using Quasar classes. The first example uses equal width columns, while the second demonstrates specific width allocations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div class=\"col\">1</div>\n  <div class=\"col\">1</div>\n  <div class=\"col\">1</div>\n  <!--\n     we have 3 children, so equivalent\n     to above would be to use `col-4`\n     on each of the children\n  -->\n</div>\n\n<div class=\"row\">\n  <div class=\"col-3\">1</div>\n  <div class=\"col-6\">2</div>\n  <div class=\"col-3\">1</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reactive Meta Configuration with useMeta in Quasar\nDESCRIPTION: Shows how to implement reactive meta configuration using useMeta composable with a computed property approach.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-meta.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useMeta } from 'quasar'\n\nsetup () {\n  // essentially acting as a computed property\n  useMeta(() => {\n    // compute or reference other stuff\n    // in your component\n    // then return:\n    return { /* meta config */ }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ajax URL Filtering in Vue\nDESCRIPTION: Example demonstrating how to implement URL filtering for QAjaxBar using the hijackFilter property. This allows selective triggering of the loading bar based on specific URLs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/ajax-bar.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-ajax-bar :hijack-filter=\"myFilterFn\" />\n</template>\n\n<script>\nexport default {\n  setup () {\n    return {\n      myFilterFn (url) {\n        // example (only https://my-service.com/* should trigger)\n        return /^https:\\/\\/my-service\\.com/.test(url)\n      }\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using AppVisibility Outside Vue Component\nDESCRIPTION: Demonstrates how to import and use the AppVisibility plugin outside of a Vue component context, accessing the appVisible boolean property directly from the Quasar import.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/app-visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AppVisibility } from 'quasar'\nAppVisibility.appVisible // Boolean\n\n// inside of a Vue file\nimport { useQuasar } from 'quasar'\nsetup () {\n  const $q = useQuasar()\n  // now use $q.appVisible (Boolean)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore for App Signing\nDESCRIPTION: Command to create a private key using keytool for signing Android APKs. This generates a keystore file that should be securely stored for future app updates.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 20000\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova-specific Framework Options in Quasar Config\nDESCRIPTION: This snippet demonstrates how to configure Cordova-specific options within the framework config of the quasar.config file. It includes settings for iOS status bar padding and back button behavior.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/configuring-cordova.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      cordova: {\n        // add the dynamic top padding on iOS mobile devices\n        iosStatusBarPadding: true/false,\n\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Masonry Layouts with Pseudo-selectors in Sass\nDESCRIPTION: Sass implementation for creating masonry layouts using pseudo-selectors instead of explicit break elements. This approach is useful when adding explicit break elements is not feasible.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flexbox-patterns.md#2025-04-16_snippet_5\n\nLANGUAGE: sass\nCODE:\n```\n.container-class\n  &--2-rows\n    :before\n      flex: 1 0 100% !important\n      height: 0 !important\n      order: 1\n  &--2-columns\n    :before\n      flex: 1 0 100% !important\n      width: 0 !important\n      order: 1\n  &--3-rows\n    :before,\n    :after\n      flex: 1 0 100% !important\n      height: 0 !important\n      order: 2\n  &--3-columns\n    :before,\n    :after\n      flex: 1 0 100% !important\n      width: 0 !important\n      order: 2\n```\n\n----------------------------------------\n\nTITLE: Inlining SVG in Quasar Icon Component\nDESCRIPTION: Shows how to inline an SVG directly within a Quasar Icon component, allowing for size and color control through QIcon props.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<q-icon color=\"accent\" size=\"5rem\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    <path d=\"M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z\"/>\n  </svg>\n</q-icon>\n```\n\n----------------------------------------\n\nTITLE: Quasar Components Implementation\nDESCRIPTION: Shows how to use Quasar components like QBtn and QIcon in templates.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <q-btn @click=\"doSomething\" label=\"Do something\" />\n  <q-icon name=\"alarm\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing v-close-popup in a Dialog with Menu in Vue\nDESCRIPTION: This snippet demonstrates using the v-close-popup directive in a QDialog containing a QMenu. It shows how to close both the menu and its parent dialog.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/close-popup.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Dialog with menu\" file=\"DialogMenu\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for PWA Web Workers\nDESCRIPTION: TypeScript configuration specifically for PWA files, extending the base config and adding WebWorker library support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/pwa-with-typescript.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"lib\": [\"WebWorker\", \"ESNext\"]\n  },\n  \"include\": [\"*.ts\", \"*.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Half-Selected Rating States\nDESCRIPTION: Example demonstrating floating number ratings with half-selected states\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Different icon and color when half selected\" file=\"HalfSelected\" />\n```\n\n----------------------------------------\n\nTITLE: Handling DOM Events in Quasar\nDESCRIPTION: Shows various cross-browser event utility methods for detecting click types, getting key codes, measuring mouse wheel movement, determining event positions, and controlling event propagation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { event } from 'quasar'\n\nnode.addEventListener('click', evt => {\n  // left clicked?\n  (Boolean) event.leftClick(evt)\n\n  // middle clicked?\n  (Boolean) event.middleClick(evt)\n\n  // right clicked?\n  (Boolean) event.rightClick(evt)\n\n  // key in number format\n  (Number) event.getEventKey(evt)\n\n  // Mouse wheel distance (in pixels)\n  (Object {x, y}) event.getMouseWheelDistance(evt)\n\n  // position on viewport\n  // works both for mouse and touch events!\n  (Object {top, left}) event.position(evt)\n\n  // get target DOM Element on which mouse or touch\n  // event has fired upon\n  (DOM Element) event.targetElement(evt)\n\n  // call stopPropagation and preventDefault\n  event.stopAndPrevent(evt)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Drawer Toggle in Vue Component\nDESCRIPTION: This Vue component snippet demonstrates how to toggle a drawer in a Quasar app and send an event to the content script to resize the IFrame accordingly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<q-drawer :model-value=\"drawerIsOpen\" @update:model-value=\"drawerToggled\">\n  Some Content\n</q-drawer>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\nimport { ref } from 'vue'\n\nsetup () {\n  const $q = useQuasar()\n  const drawerIsOpen = ref(true)\n\n  async function drawerToggled () {\n    await $q.bex.send('wb.drawer.toggle', {\n      open: drawerIsOpen.value\n    })\n\n    drawerIsOpen.value = !drawerIsOpen.value\n  }\n\n  return { drawerToggled }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing BEX Bridge in Quasar App Components\nDESCRIPTION: These snippets show how to access the BEX bridge in different Vue component styles within a Quasar app. It demonstrates usage in Composition API with script setup, Composition API with script, and Options API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div />\n</template>\n\n<script setup>\nimport { useQuasar } from 'quasar'\nconst $q = useQuasar()\n\n// Use $q.bex (the bridge)\n// $q.bex.portName is \"app\"\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div />\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n    // Use $q.bex (the bridge)\n    // $q.bex.portName is \"app\"\n  }\n}\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div />\n</template>\n\n<script>\nexport default {\n  // Use this.$q.bex (the bridge)\n  // this.$q.bex.portName is \"app\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Pug Loader with extendWebpack\nDESCRIPTION: Example of adding a Pug loader to the Webpack configuration using the extendWebpack method in quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  extendWebpack (cfg) {\n    cfg.module.rules.push({\n      test: /\\.pug$/,\n      loader: 'pug-plain-loader'\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IDE Autocompletion Setup for quasar.config in JavaScript\nDESCRIPTION: Shows how to import and use the defineConfig function to enable IDE autocompletion for the Quasar configuration options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\n\nexport default defineConfig((ctx) => {\n  /* configuration options */\n})\n```\n\n----------------------------------------\n\nTITLE: Basic QImg Usage Example\nDESCRIPTION: Demonstrates the basic implementation of the QImg component for displaying images with loading effects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/img.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirection in Quasar Boot File\nDESCRIPTION: Demonstrates how to implement page redirection using the redirect() method in a Quasar boot file. Includes authorization check logic and handling of different redirect scenarios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(({ urlPath, redirect }) => {\n  // ...\n  const isAuthorized = // ...\n  if (!isAuthorized && !urlPath.startsWith('/login')) {\n    redirect({ path: '/login' })\n    return\n  }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using AppFullscreen Inside Vue Components\nDESCRIPTION: Shows how to access the AppFullscreen plugin within Vue components using the useQuasar composable. Includes examples of requesting and exiting fullscreen mode with promise handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/app-fullscreen.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  // Requesting fullscreen mode:\n  $q.fullscreen.request()\n    .then(() => {\n      // success!\n    })\n    .catch(err => {\n      // oh, no!!!\n    })\n\n  // Exiting fullscreen mode:\n  $q.fullscreen.exit()\n    .then(() => {\n      // success!\n    })\n    .catch(err => {\n      // oh, no!!!\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SSR-Compatible Vue Directive in JavaScript\nDESCRIPTION: Demonstrates how to define a Vue directive that works with SSR by implementing both client-side and server-side logic. The directive sets an element's ID attribute based on the binding value.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/vue-ssr-directives.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst myDirective = {\n  mounted (el, binding) {\n    // client-side implementation:\n    // directly update the DOM\n    el.id = binding.value\n  },\n\n  getSSRProps (binding) {\n    // server-side implementation:\n    // return the props to be rendered.\n    // getSSRProps only receives the directive binding.\n    return {\n      id: binding.value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Loading State for QTable in Vue\nDESCRIPTION: Demonstrates how to create a custom loading state for a QTable component, allowing for more tailored user feedback during data loading.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom loading state\" file=\"CustomLoading\" />\n```\n\n----------------------------------------\n\nTITLE: Async Boot File Implementation\nDESCRIPTION: Demonstrates how to create an async boot file that can handle asynchronous operations during initialization.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nexport default defineBoot(async ({ app, router, store }) => {\n  // something to do\n  await something()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Components Using PreFetch\nDESCRIPTION: Example route configuration showing the structure of routes that can utilize the preFetch hook in their components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    path: '/',\n    component: LandingPage\n  },\n  {\n    path: '/shop',\n    component: ShopLayout,\n    children: [\n      {\n        path: 'all',\n        component: ShopAll\n      },\n      {\n        path: 'new',\n        component: ShopNew\n      },\n      {\n        path: 'product/:name',\n        component: ShopProduct,\n        children: [{\n          path: 'overview',\n          component: ShopProductOverview\n        }]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite Project with Vue Template\nDESCRIPTION: Commands for scaffolding a new Vite project using different package managers. Each command creates a new Vue-based Vite project which will be used as the foundation for adding Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vite-plugin/vite-plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create vite my-vue-app --template vue\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init vite my-vue-app -- --template vue\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create vite my-vue-app -- --template vue\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun create vite my-vue-app\n# then select \"Vue\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Analytics Event and Page Logging in JavaScript\nDESCRIPTION: This code snippet defines two functions for logging events and page views to Google Analytics using the dataLayer push method. It's designed to be used in a Quasar app with Cordova.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  logEvent(category, action, label, sessionId = null) {\n    window.dataLayer.push({\n      appEventCategory: category,\n      appEventAction: action,\n      appEventLabel: label,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appEvent' })\n  },\n\n  logPage(path, name, sessionId = null) {\n    window.dataLayer.push({\n      screenPath: path,\n      screenName: name,\n      sessionId: sessionId\n    })\n    window.dataLayer.push({ 'event': 'appScreenView' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar SSR Middleware Configuration\nDESCRIPTION: Example of configuring SSR middleware in the Quasar configuration file, including conditional middleware based on production or development environment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nssr: {\n  middlewares: [\n    // references /src-ssr/middlewares/<name>.js\n    '<name>',\n    ctx.prod ? '<name>' : '', // I run only on production!\n    ctx.dev ? '<name>' : '' // I run only on development\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using copyToClipboard Function in Quasar\nDESCRIPTION: Shows how to use the copyToClipboard utility to copy text to the system clipboard. The function returns a Promise that resolves on success and rejects on failure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { copyToClipboard } from 'quasar'\n\ncopyToClipboard('some text')\n  .then(() => {\n    // success!\n  })\n  .catch(() => {\n    // fail\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Vue Plugin Options in Quasar Config\nDESCRIPTION: Shows how to configure options for the Vite Vue Plugin (@vitejs/plugin-vue) in the Quasar config file. This example enables experimental props destructuring and custom element tag detection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  viteVuePluginOptions: {\n    script: {\n      propsDestructure: true\n    },\n    template: {\n      compilerOptions: {\n        isCustomElement: (tag) => tag.startsWith('my-')\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Screen Plugin Outside Vue Components\nDESCRIPTION: Demonstrates importing and using the Screen object directly outside of Vue components to access screen properties like gt.md, md, and name.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Screen } from 'quasar'\n\n// Screen.gt.md\n// Screen.md\n// Screen.name ('xs', 'sm', ...)\n```\n\n----------------------------------------\n\nTITLE: Importing Axios Instance from Boot File\nDESCRIPTION: Example of importing a named export (api) from a boot file in another JavaScript file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// we import one of the named exports from src/boot/axios.js\nimport { api } from 'boot/axios'\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar Boot File in quasar.config\nDESCRIPTION: Adds the addressbar-color boot file to the Quasar configuration to enable the plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/addressbar-color.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  boot: [\n    'addressbar-color'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Language Pack Selection Component\nDESCRIPTION: Vue component implementation for dynamically changing Quasar language packs at runtime using a QSelect component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-language-packs.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-select\n    v-model=\"lang\"\n    :options=\"langOptions\"\n    label=\"Quasar Language\"\n    dense\n    borderless\n    emit-value\n    map-options\n    options-dense\n    style=\"min-width: 150px\"\n  />\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\nimport languages from 'quasar/lang/index.json'\nimport { ref, watch } from 'vue'\n\nconst modules = import.meta.glob('../../node_modules/quasar/lang/(de|en-US|es).js')\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n    const lang = ref($q.lang.isoName)\n\n    watch(lang, val => {\n      modules[`../../node_modules/quasar/lang/${val}.js`]().then(lang => {\n        $q.lang.set(lang.default)\n      })\n    })\n\n    return {\n      lang,\n      langOptions\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Public Folder in Electron App\nDESCRIPTION: JavaScript code demonstrating how to access files in the public folder of an Electron app. It uses the fileURLToPath function and process.env.QUASAR_PUBLIC_FOLDER to resolve the correct path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst currentDir = fileURLToPath(new URL('.', import.meta.url))\n\nconst publicFolder = path.resolve(currentDir, process.env.QUASAR_PUBLIC_FOLDER)\n```\n\n----------------------------------------\n\nTITLE: Using between Method for Number Constraints in Quasar\nDESCRIPTION: Shows how to use the between formatter which constrains a number to a specified range. This method ensures the value is not less than the minimum or greater than the maximum.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format } from 'quasar'\nconst { between } = format\n\n// (Number) between(Number, Number min, Number max)\nconsole.log( between(50, 10, 20) )\n// 20\n```\n\n----------------------------------------\n\nTITLE: TypeScript-Enhanced EventBus Usage\nDESCRIPTION: Shows how to use EventBus with TypeScript type definitions for strongly-typed events and their arguments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/event-bus-util.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Quasar v2.11.11+\nimport { EventBus } from 'quasar'\n\nconst bus = new EventBus<{\n    'some-event': (arg1: string, arg2: string, arg3: string) => void;\n    'other': (arg: boolean) => void;\n}>()\n\nbus.emit('some-event', 'arg1 value', 'arg2 value', 'arg3 value')\n```\n\n----------------------------------------\n\nTITLE: Tunnelmole CLI Example with Output\nDESCRIPTION: Example of running Tunnelmole CLI against port 80, showing the generated HTTP and HTTPS URLs that forward to the local port.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80\nhttp://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\nhttps://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Notification Types in a Boot File\nDESCRIPTION: Demonstrates how to register a custom notification type with specific styling and behavior in a Quasar boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notify } from 'quasar'\n\nNotify.registerType('my-notif', {\n  icon: 'announcement',\n  progress: true,\n  color: 'brown',\n  textColor: 'white',\n  classes: 'glossy'\n})\n```\n\n----------------------------------------\n\nTITLE: Virtual Scroll Table Implementation\nDESCRIPTION: Examples of table-type virtual scroll with various header configurations\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/virtual-scroll.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic table\" file=\"TableBasic\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Table with scrolling header/footer\" file=\"TableBasicHeader\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Sticky headers table\" file=\"TableSticky\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Playing with sticky headers\" file=\"TableSticky2\" />\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Runtime Path\nDESCRIPTION: Example of using dynamic import with a path determined at runtime.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport('pages/' + pageName + '/' + idWithExtension)\n```\n\n----------------------------------------\n\nTITLE: Basic QAjaxBar Implementation in Vue\nDESCRIPTION: Basic example showing how to implement QAjaxBar component in a Vue template. The component automatically captures Ajax calls and displays a loading bar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/ajax-bar.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring QEditor Exclusive Dropdowns\nDESCRIPTION: Shows how to implement dropdowns with exclusive options where users can only select one option, with different label and icon behaviors.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/editor.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<q-editor\n  v-model=\"model\"\n  :toolbar=\"[\n    [\n      {\n        label: 'Dynamic label',\n        icon: 'help_outline',\n        options: ['left', 'center', 'right', 'justify']\n      }\n    ],\n    [\n      {\n        label: 'Static label',\n        fixedLabel: true,\n        options: ['left', 'center', 'right', 'justify']\n      }\n    ],\n    [\n      {\n        label: 'Some label',\n        icon: 'account_balance',\n        fixedIcon: true,\n        options: ['left', 'center', 'right', 'justify']\n      }\n    ]\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Body Classes in Quasar Config\nDESCRIPTION: Configuration example showing how to enable body classes in the quasar.config file by setting the screen.bodyClasses option to true.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nframework: {\n  config: {\n    screen: {\n      bodyClasses: true // <<< add this\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic QRating Component Implementation\nDESCRIPTION: Basic usage of QRating component showing standard star rating functionality\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to QInnerLoading\nDESCRIPTION: Example showing how to add labels to QInnerLoading component using the label prop, introduced in Quasar v2.2+. This allows adding descriptive text alongside the loading spinner.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/inner-loading.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Label props\" file=\"LabelProp\" />\n```\n\n----------------------------------------\n\nTITLE: QRange with Labels\nDESCRIPTION: Shows various label implementations including dynamic labels, always-visible labels, and custom label values.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/range.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With label\" file=\"Label\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating serverless-http Package with Quasar SSR\nDESCRIPTION: This example demonstrates how to use the serverless-http package with Quasar SSR to convert Express-style middleware to AWS Lambda compatible handlers. It requires manual installation of the serverless-http package and properly adapts the app object for serverless environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-webserver.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrListen } from '#q-app/wrappers'\nimport serverless from 'serverless-http'\n\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  if (process.env.DEV) {\n    // for dev, start listening on the created server\n    const server = devHttpsApp || app;\n    return server.listen(port, () => {\n      // we're ready to serve clients\n    })\n  }\n  else { // in production\n    return { handler: serverless(app) }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Store Hydration in Boot File for SSR\nDESCRIPTION: This snippet demonstrates how to manually hydrate the Pinia store on the client-side when using SSR, implemented in a boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\n\nexport default defineBoot(({ store }) => {\n  // For Pinia\n  store.state.value = window.__INITIAL_STATE__\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Virtual Scroll\nDESCRIPTION: Basic example showing a vertical virtual scroll implementation\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/virtual-scroll.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Back Button Behavior in Quasar\nDESCRIPTION: Configuration options for handling the back button behavior in Cordova-based Quasar applications. Allows controlling app exit behavior and back button management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/dialog.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      cordova: {\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start/End of Date Operations in Quasar\nDESCRIPTION: Demonstrates how to set a date to the start or end of a time unit using Quasar's startOfDate and endOfDate functions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nlet newDate = new Date('2000')\n// set to beginning of year 2000 (January 1st, 2000, 00:00:00.000)\nnewDate = date.startOfDate(newDate, 'year')\n// set to end of year 2000 (December 31st, 2000, 23:59:59.999)\nnewDate = date.endOfDate(newDate, 'year')\n```\n\n----------------------------------------\n\nTITLE: Positioning QTooltip in Vue\nDESCRIPTION: Illustrates various positioning options for QTooltip, including the use of 'anchor' and 'self' props for customization.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport TooltipPositioning from './TooltipPositioning.vue'\n</script>\n\n<TooltipPositioning />\n```\n\n----------------------------------------\n\nTITLE: Using Sass Variables in Vue Components\nDESCRIPTION: Example showing how to use Quasar's built-in Sass variables like $red-1 and $grey-5 within a Vue component's style block using Sass syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/sass-scss-variables/sass-scss-variables.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style lang=\"sass\">\ndiv\n  color: $red-1\n  background-color: $grey-5\n</style>\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration for Electron\nDESCRIPTION: Example showing how to extend or modify the Vite configuration specifically for Electron mode in Quasar applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/configuring-electron.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf) {\n        if (ctx.mode.electron) {\n          // do something with viteConf\n          // or return an object to deeply merge with current viteConf\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up BEX Bridge in Content Scripts\nDESCRIPTION: This code demonstrates how to create and set up the BEX bridge in content scripts. It imports the createBridge function, initializes the bridge, and connects to the background script.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/content'\n\nconst bridge = createBridge({ debug: false })\n\nbridge.connectToBackground()\n  .then(() => {\n    console.log('Connected to background')\n  })\n  .catch(err => {\n    console.error('Failed to connect to background:', err)\n  })\n```\n\n----------------------------------------\n\nTITLE: Testing Patterns in JavaScript with Quasar's TestPattern Function\nDESCRIPTION: Shows how to use the testPattern function from Quasar to test strings against specific patterns like email addresses and hexadecimal color codes. This is useful for input validation and data verification.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { patterns } from 'quasar'\n\nconst { testPattern } = patterns\n\ntestPattern.email('foo@bar.com') // true\ntestPattern.email('foo') // false\n\ntestPattern.hexColor('#fff') // true\ntestPattern.hexColor('#ffffff') // true\ntestPattern.hexColor('#FFF') // true\ntestPattern.hexColor('#gggggg') // false\n```\n\n----------------------------------------\n\nTITLE: Basic QPageSticky Implementation in Vue\nDESCRIPTION: Demonstrates basic usage of QPageSticky within a QLayout component. The example shows how to position elements statically and handle various layout scenarios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page-sticky.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for PWA in Quasar\nDESCRIPTION: This snippet provides a TypeScript configuration file specifically for the PWA part of a Quasar project. It extends the base tsconfig.json and includes settings for WebWorker and ESNext libraries.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/pwa-with-typescript.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"lib\": [\"WebWorker\", \"ESNext\"]\n  },\n  \"include\": [\"*.ts\", \"*.d.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Slot Parameters in QPopupEdit\nDESCRIPTION: Demonstrates the available parameters in QPopupEdit's default slot including initialValue, value, validate, set, cancel, and updatePosition functions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/popup-edit.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ initialValue, value, validate, set, cancel, updatePosition }\n```\n\n----------------------------------------\n\nTITLE: Custom Content in QBtnToggle\nDESCRIPTION: Demonstrates how to customize button content using slots and tooltips in QBtnToggle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-toggle.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom buttons content\" file=\"CustomContent\" />\n```\n\n----------------------------------------\n\nTITLE: Promise-based Boot File\nDESCRIPTION: Example showing how to return a Promise from a boot file for handling asynchronous operations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\nexport default defineBoot(({ /* app, router, store */ }) => {\n  return new Promise((resolve, reject) => {\n    // do something\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of QTooltip in Vue\nDESCRIPTION: Demonstrates the basic implementation of QTooltip component within a Vue template. The tooltip is placed as a direct child of the target element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Basic QDate Usage\nDESCRIPTION: Simple implementation of QDate component showing basic date selection functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/date.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" overflow />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Font with CSS\nDESCRIPTION: CSS implementation for adding a custom font to a Quasar application, including @font-face declaration and utility class definition\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/typography/typography.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: customfont;\n  src: url(./fonts/customfont.woff);\n}\n\n// declare a class which applies it\n.my-font {\n  font-family: 'customfont';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Capitalize Method in Quasar\nDESCRIPTION: Shows how to use the capitalize formatter which transforms the first character of a string to uppercase. This example demonstrates importing the method and applying it to a string.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format } from 'quasar'\nconst { capitalize } = format\n\nconsole.log( capitalize('some text') )\n// Some text\n```\n\n----------------------------------------\n\nTITLE: Importing Platform for SSR in Quasar\nDESCRIPTION: Demonstrates how to properly import and use the Platform module in a server-side rendering context. It shows how to parse SSR context when on the server and use the regular Platform import on the client.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-frequently-asked-questions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// example with Platform; same thing for Cookies\nimport { Platform } from 'quasar'\n\n// you need access to `ssrContext`\nfunction (ssrContext) {\n  const platform = process.env.SERVER\n    ? Platform.parseSSR(ssrContext)\n    : Platform // otherwise we're on client\n\n  // platform is equivalent to the global import as in non-SSR builds\n}\n```\n\n----------------------------------------\n\nTITLE: Basic QBtnGroup Usage Example\nDESCRIPTION: Example showing basic usage of QBtnGroup component with warning about maintaining consistent design props between parent and child components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-group.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: warning\nYou must use same design props (flat, outline, push, ...) on both the parent QBtnGroup and the children QBtn/QBtnDropdown.\n:::\n```\n\n----------------------------------------\n\nTITLE: Basic QToggle Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of QToggle component with color prop for controlling the toggle's color.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Standard\" />\n```\n\n----------------------------------------\n\nTITLE: QDate with Native Form Integration\nDESCRIPTION: Example showing how to integrate QDate with native form submission, requiring a name property.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/date.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: List Choice Prompt Configuration\nDESCRIPTION: Configuration for a list of choices prompt with multiple options, each having a display name, value, and short name.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/prompts-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'iconSet',\n  type: 'list',\n  message: 'Choose Icon Set',\n  choices: [\n    {\n      name: 'Material Icons (recommended)',\n      value: 'material-icons',\n      short: 'Material Icons'\n    },\n    {\n      name: 'Fontawesome v6',\n      value: 'fontawesome-v6',\n      short: 'Fontawesome v6'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deep Copying Objects in JavaScript with Quasar's Extend Function\nDESCRIPTION: Shows how to use the extend function from Quasar to create deep copies of objects. This function is similar to jQuery.extend() and can be used to merge multiple objects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { extend } from 'quasar'\n\nlet newObject = extend([Boolean deepCopy], targetObj, obj, ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue-i18n Plugin in Quasar Config File\nDESCRIPTION: Configuration for the @intlify/unplugin-vue-i18n Vite plugin in quasar.config.js, showing how to set up the plugin with various options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\n\n// ...\n\nbuild: {\n  vitePlugins: [\n    ['@intlify/unplugin-vue-i18n/vite', {\n      // if you want to use Vue I18n Legacy API, you need to set `compositionOnly: false`\n      // compositionOnly: false,\n\n      // if you want to use named tokens in your Vue I18n messages, such as 'Hello {name}',\n      // you need to set `runtimeOnly: false`\n      // runtimeOnly: false,\n\n      ssr: ctx.modeName === 'ssr',\n\n      // you need to set i18n resource including paths !\n      include: [ fileURLToPath(new URL('./src/i18n', import.meta.url)) ]\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Functions with Quasar SSR\nDESCRIPTION: This snippet shows how to integrate Firebase Cloud Functions with Quasar SSR applications. It uses the Firebase functions package to create an HTTPS handler from the Quasar app in production, while maintaining standard development behavior.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-webserver.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrListen } from '#q-app/wrappers'\nimport * as functions from 'firebase-functions'\n\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  if (process.env.DEV) {\n    // for dev, start listening on the created server\n    const server = devHttpsApp || app;\n    return server.listen(port, () => {\n      // we're ready to serve clients\n    })\n  }\n  else { // in production\n    return {\n      handler: functions.https.onRequest(app)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Quasar Dialog Plugin with Options API\nDESCRIPTION: Vue Single File Component implementation of a dialog plugin using Quasar's Options API. Shows standard component structure with methods for showing/hiding dialog and handling events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-dialog ref=\"dialog\" @hide=\"onDialogHide\">\n    <q-card class=\"q-dialog-plugin\">\n      <!--\n        ...content\n        ... use q-card-section for it?\n      -->\n\n      <!-- buttons example -->\n      <q-card-actions align=\"right\">\n        <q-btn color=\"primary\" label=\"OK\" @click=\"onOKClick\" />\n        <q-btn color=\"primary\" label=\"Cancel\" @click=\"onCancelClick\" />\n      </q-card-actions>\n    </q-card>\n  </q-dialog>\n</template>\n\n<script>\nexport default {\n  props: {\n    // ...your custom props\n  },\n\n  emits: [\n    // REQUIRED\n    'ok', 'hide'\n  ],\n\n  methods: {\n    // following method is REQUIRED\n    // (don't change its name --> \"show\")\n    show () {\n      this.$refs.dialog.show()\n    },\n\n    // following method is REQUIRED\n    // (don't change its name --> \"hide\")\n    hide () {\n      this.$refs.dialog.hide()\n    },\n\n    onDialogHide () {\n      // required to be emitted\n      // when QDialog emits \"hide\" event\n      this.$emit('hide')\n    },\n\n    onOKClick () {\n      // on OK, it is REQUIRED to\n      // emit \"ok\" event (with optional payload)\n      // before hiding the QDialog\n      this.$emit('ok')\n      // or with payload: this.$emit('ok', { ... })\n\n      // then hiding dialog\n      this.hide()\n    },\n\n    onCancelClick () {\n      // we just need to hide the dialog\n      this.hide()\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Practical Example of useTick in Quasar Component\nDESCRIPTION: This example demonstrates how to use the useTick composable in a component's setup function, registering a tick that logs a parameter. It highlights the ability to override previously registered ticks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-tick.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTick } from 'quasar'\n\nsetup () {\n  const { registerTick } = useTick()\n\n  function onSomeEvent (param) {\n    registerTick(() => {\n      console.log('param is', param)\n    })\n  }\n\n  // ...\n\n  // You can call onSomeEvent() multiple\n  // times in a row and only the last\n  // registered \"tick\" will run when it\n  // is time for it\n}\n```\n\n----------------------------------------\n\nTITLE: Using Terminal Environment Variables in Quasar Config\nDESCRIPTION: Shows how to pass environment variables from the terminal to the quasar.config file and then to the application code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# we set an env variable in terminal\n$ MY_API=api.com quasar build\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration\nDESCRIPTION: Configuration for Firebase hosting with proper cache control headers for different file types\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/deploying.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"headers\": [\n      {\n        \"source\": \"/**\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"no-cache, no-store, must-revalidate\"\n          }\n        ]\n      },\n      {\n        \"source\": \"**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"max-age=604800\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spread QBtnToggle Horizontally\nDESCRIPTION: Example of spreading QBtnToggle buttons horizontally across available space.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-toggle.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Spread horizontally\" file=\"Spread\" />\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Target in Quasar (JavaScript)\nDESCRIPTION: Method to get the parent DOM element that handles page scrolling. Returns either a DOM Element or window Object that has scroll or overflow-auto Quasar CSS Helper class.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getScrollTarget } = scroll\n\n// Get parent DomNode that handles page scrolling\n// Usually this is element with classname \".layout-view\" or \"window\"\ngetScrollTarget(DomElement) // returns a DOM Element (or window Object)\n```\n\n----------------------------------------\n\nTITLE: Vertical Swipeable and Infinite QTabPanels in Vue\nDESCRIPTION: Shows how to implement vertically swipeable and infinite tab panels, providing an alternative navigation method for vertical layouts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Vertical swipeable and infinite\" file=\"VerticalSwipeable\" />\n```\n\n----------------------------------------\n\nTITLE: QExpansionItem Advanced Configuration\nDESCRIPTION: Shows advanced configuration options including toggle side switching and custom header slots.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/expansion-item.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Switch toggle side\" file=\"SwitchToggleSide\" />\n\n<DocExample title=\"Header slot\" file=\"HeaderSlot\" />\n\n<DocExample title=\"Handling events\" file=\"HandlingEvents\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Form Child Integration - Options API\nDESCRIPTION: Implementation of custom form component integration with QForm using the Options API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/form.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { QFormChildMixin } from 'quasar'\n\nexport default {\n  mixins: [ QFormChildMixin ],\n\n  methods: {\n    validate () {\n      console.log('called my-comp.validate()')\n      return true\n    },\n\n    resetValidation () {\n      // ...\n    }\n  },\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: QToggle within QItem in Vue\nDESCRIPTION: Shows how to integrate QToggle components within QItem for list-based layouts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With QItem\" file=\"List\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Vue-i18n Dependency with Package Managers\nDESCRIPTION: Commands for installing the vue-i18n dependency using different package managers including Yarn, NPM, PNPM, and Bun.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add vue-i18n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save vue-i18n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add vue-i18n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Properties in Batch with Quasar\nDESCRIPTION: Shows how to apply multiple CSS properties to a DOM element at once using an object containing property-value pairs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\nconst { css } = dom\n\n// Apply a list of CSS properties to a DomNode\ncss(DomElement, {\n  height: '10px',\n  display: 'flex'\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting Dialogs with v-close-popup Directive in Vue\nDESCRIPTION: This example illustrates how to use v-close-popup with nested dialogs. It emphasizes that for the directive to close multiple dialogs, they must be in a parent-child relationship.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/close-popup.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Dialog in Dialog\" file=\"DialogInDialog\" />\n```\n\n----------------------------------------\n\nTITLE: QToggle with Custom Model Values in Vue\nDESCRIPTION: Shows how to use custom model values instead of default true/false in QToggle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom model values\" file=\"CustomValues\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Element Height and Width in Quasar\nDESCRIPTION: Demonstrates how to get an element's height and width as numeric values, which are aliases for the style method that return Numbers instead of Strings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\nconst { height, width } = dom\n\n\n// Some aliases of the previous method for \"width\" and \"height\" which\n// returns Numbers instead of Strings:\nconsole.log(\n  height(DomElement),\n  width(DomElement)\n)\n// 10 100\n```\n\n----------------------------------------\n\nTITLE: Using TypeHorizontal Component in Vue\nDESCRIPTION: Example showing horizontal stepper implementation with navigation between steps\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Horizontal\" file=\"TypeHorizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Design Overview Example\nDESCRIPTION: Demonstrates the main design variations of QSelect component including filled, outlined, standout, and borderless styles\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/select.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Design Overview\" file=\"DesignOverview\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite CSS Settings in Quasar Config\nDESCRIPTION: Configuration example showing how to extend Vite's CSS-related settings in the Quasar configuration file, including modules, postcss, and preprocessor options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/css-preprocessors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendViteConf (viteConf, { isClient, isServer }) {\n    viteConf.css.modules = ...\n    viteConf.css.postcss = ...\n    viteConf.css.preprocessorOptions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Quasar Icon Set at Runtime (Composition API)\nDESCRIPTION: Example of changing the Quasar Icon Set at runtime using the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\nimport mdiIconSet from 'quasar/icon-set/mdi-v7.js'\n\nsetup () {\n  const $q = useQuasar()\n\n  function changeIconSetToMdiIconSet () {\n    $q.iconSet.set(mdiIconSet)\n  }\n\n  return {\n    changeIconSetToMdiIconSet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QColor with QInput Integration\nDESCRIPTION: Demonstrates validation rules integration with QInput component including hexColor, rgbOrRgbaColor, and anyColor patterns.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/color-picker.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-input\n    v-model=\"color\"\n    rules=\"[\"hexColor\", \"rgbOrRgbaColor\", \"anyColor\"]\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server\nDESCRIPTION: Command to start the Quasar application in development mode with hot-code reloading and error reporting features.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-vite-2/BASE/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: IPC Main Thread Handler Implementation\nDESCRIPTION: Example of handling IPC messages in the main thread corresponding to the preload script's exposed methods.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nipcMain.handle('myAPI:load-prefs', () => {\n  return {\n    // object that contains preferences\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: QTree Node Model Structure\nDESCRIPTION: Example structure showing configuration properties for QTree nodes including keys, labels, icons, and behavior settings\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tree.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  nodeKey: String|Number, // Required, unique identifier\n  label: String, // Node's label text\n  icon: String, // Node's icon\n  iconColor: String, // Node's icon color\n  img: String, // Node's image path\n  avatar: String, // Node's avatar path\n  children: Array, // Child nodes\n  disabled: Boolean, // Node disabled state\n  expandable: Boolean, // Node expandable state\n  selectable: Boolean, // Node selectable state\n  handler: Function, // Click handler function\n  tickable: Boolean, // Node tickable state\n  noTick: Boolean, // Hide node checkbox\n  tickStrategy: String, // Node-specific tick strategy\n  lazy: Boolean, // Enable lazy loading\n  header: String, // Custom header slot name\n  body: String // Custom body slot name\n}\n```\n\n----------------------------------------\n\nTITLE: Native Form Integration\nDESCRIPTION: Example of QFile integration with native form submission, including proper name attribute setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/file.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinia Store with defineStore for SSR in Quasar\nDESCRIPTION: Shows how to set up a Pinia store for SSR applications using Quasar's defineStore wrapper. This factory function creates a new Pinia instance for each request to maintain state isolation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/writing-universal-code.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineStore } from '#q-app/wrappers'\nimport { createPinia } from 'pinia'\n\n/*\n * If not building with SSR mode, you can\n * directly export the Store instantiation;\n *\n * The function below can be async too; either use\n * async/await or return a Promise which resolves\n * with the Store instance.\n */\n\nexport default defineStore((/* { ssrContext } */) => {\n  const pinia = createPinia()\n\n  // You can add Pinia plugins here\n  // pinia.use(SomePiniaPlugin)\n\n  return pinia\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files in quasar.config for BEX\nDESCRIPTION: Demonstrates how to specify custom source files for BEX in the quasar.config file, particularly for changing the default manifest file location.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// should you wish to change default files\nsourceFiles: {\n  bexManifestFile?: 'src-bex/manifest.json',\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Day Selection in QDate\nDESCRIPTION: Implementation of QDate with multiple day selection capability where the model is an Array.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/date.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Multiple days\" file=\"SelectionMultiple\" overflow />\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Back Button in Quasar\nDESCRIPTION: Configuration options for handling back button behavior in Capacitor applications using Quasar framework config.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// quasar.config file\nreturn {\n  framework: {\n    config: {\n      capacitor: {\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BEX Manifest Content Scripts Configuration\nDESCRIPTION: JSON configuration for content scripts and CSS files in the Browser Extension manifest.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"content_scripts\": [\n  {\n    \"matches\": [ \"<all_urls>\" ],\n    \"css\": [ \"assets/content.css\" ],\n    \"js\": [ \"my-content-script.js\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Vue Transition Component with Quasar Button (HTML)\nDESCRIPTION: This example shows how to use Vue's transition component to apply enter and leave animations to a Quasar button.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/animations.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<transition\n  appear\n  enter-active-class=\"animated fadeIn\"\n  leave-active-class=\"animated fadeOut\"\n>\n  <!-- Wrapping only one DOM element, defined by QBtn -->\n  <q-btn\n    color=\"secondary\"\n    icon=\"mail\"\n    label=\"Email\"\n  />\n</transition>\n```\n\n----------------------------------------\n\nTITLE: Using Meta Plugin with Composition API in Quasar v2\nDESCRIPTION: Shows how to implement the Meta plugin using Vue 3 Composition API in a Vue component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Composition API variant\n// for some .vue file\nimport { useMeta } from 'quasar'\n\nexport default {\n  setup () {\n    // Needs to be called directly under the setup() method!\n    useMeta({\n      // ...definition\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Transitions Implementation\nDESCRIPTION: Shows how to implement different transition animations for the QSelect menu, noting that transitions don't work with options-cover prop\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/select.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Menu transitions\" file=\"MenuTransitions\" />\n```\n\n----------------------------------------\n\nTITLE: Native Form Integration\nDESCRIPTION: Example of QRange integration with native forms, showing proper name property usage for form data submission.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/range.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova CLI\nDESCRIPTION: Command to globally install the Cordova CLI as a prerequisite for mobile development\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g cordova\n```\n\n----------------------------------------\n\nTITLE: QMenu with Various Content\nDESCRIPTION: Demonstrates different types of content that can be placed inside a QMenu component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/menu/menu.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Idea for content\" file=\"VariousContent\" />\n```\n\n----------------------------------------\n\nTITLE: Router Link Integration with QBtn\nDESCRIPTION: Shows how to use QBtn with Vue Router for navigation, including delayed, cancelled or redirected navigation capabilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Links with delayed, cancelled or redirected navigation (v2.9+)\" file=\"LinksWithGo\" no-edit />\n```\n\n----------------------------------------\n\nTITLE: Using Quasar Functions Outside Vue Components\nDESCRIPTION: Shows how to access Quasar functionality outside of Vue components by importing directly from the Quasar package.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/the-q-object.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Quasar, Platform } from 'quasar'\n\nconsole.log(Quasar.version)\nconsole.log(Platform.is.ios)\n```\n\n----------------------------------------\n\nTITLE: Basic useId Usage in Vue Setup\nDESCRIPTION: Demonstrates the basic implementation of useId composable in a Vue component's setup function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-id.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useId } from 'quasar'\n\nsetup () {\n  const id = useId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Array-based Icon Configuration\nDESCRIPTION: Example showing how to set different icons for each rating value\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Different icon for each rating\" file=\"ArrayIcon\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useInterval Composable\nDESCRIPTION: This snippet provides the TypeScript function signature for the useInterval composable, showing the return type and methods available.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-interval.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useInterval(): {\n  registerInterval(fn: () => void, interval: string | number): void;\n  removeInterval(): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scroll Position Methods (JavaScript)\nDESCRIPTION: Methods to get and set horizontal scroll position of an element or page, with optional animation duration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getHorizontalScrollPosition, setHorizontalScrollPosition } = scroll\n\n// Get scroll position of an element or page.\n// Use it in conjunction with `getScrollTarget()`\ngetHorizontalScrollPosition(scrollTargetDomElement) // returns a Number (pixels)\n\n// Setting scroll position of an element or page:\nsetHorizontalScrollPosition (scrollTargetElement, offset[, duration])\n// if \"duration\" is specified then it will animate the scrolling\n```\n\n----------------------------------------\n\nTITLE: Generating Icons with Icon Genie CLI\nDESCRIPTION: Commands for generating necessary icons using Icon Genie CLI for SSR-only and SSR+PWA modes. Requires a source icon file and optionally a background image for PWA mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/app-icons-ssr.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# SSR only:\n$ icongenie generate -m ssr -i /path/to/source/icon.png\n\n# SSR + PWA:\n$ icongenie generate -m ssr,pwa -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: QToggle with Array Model in Vue\nDESCRIPTION: Illustrates the use of an array model for multiple QToggle components, using the val prop for selection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Array model\" file=\"ArrayValue\" />\n```\n\n----------------------------------------\n\nTITLE: Date Querying and Comparison\nDESCRIPTION: Demonstrates how to find min/max dates and check date ranges using Quasar's date utilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nlet min = date.getMinDate(new Date(2017, 6, 24), new Date(2017, 5, 20), new Date(2017, 6, 26))\n// `min` is 2017-5-20\nlet max = date.getMaxDate(new Date(2017, 6, 24), new Date(2017, 5, 20), new Date(2017, 6, 26))\n// `max` is 2017-6-26\n\n// Or use an array:\nconst dates = [ new Date(2017, 6, 24), new Date(2017, 5, 20), new Date(2017, 6, 26) ]\nlet min = date.getMinDate(...dates) // `min` is 2017-5-20\nlet max = date.getMaxDate(...dates) // `max` is 2017-6-26\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst dateTarget = new Date()\nconst dateFrom = new Date()\nconst dateTo = new Date()\n\n// **strictly** (i.e. exclusive range)\nif (date.isBetweenDates(dateTarget, dateFrom, dateTo)) {\n  // Do something with dateTarget\n}\n\n// including which margin you want\nif (date.isBetweenDates(dateTarget, dateFrom, dateTo, { inclusiveFrom: true, inclusiveTo: true })) {\n  // Do something with dateTarget\n}\n\n// if you only care about comparing dates (year/month/day, regardless of time)\n// then you could tip isBetweenDates() about it so it can perform best:\nif (date.isBetweenDates(dateTarget, dateFrom, dateTo, { onlyDate: true })) {\n  // Do something with dateTarget\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date()\nconst dateMin = new Date(2010, 2, 23)\nconst dateMax = new Date(2012, 4, 12)\nconst dateNormalized = date.getDateBetween(newDate, dateMin, dateMax)\n// Returns `newDate` if it's between 2010-2-23 and 2012-4-12; `dateMin` if it's lower; `dateMax` if it's greater\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dev Server Port Configuration\nDESCRIPTION: Configures different development server ports based on the build mode (SPA, PWA, or others).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  devServer: {\n    port: ctx.mode.spa\n      ? 8000\n      : (ctx.mode.pwa ? 9000 : 9090)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extract Date with Format in Quasar\nDESCRIPTION: Shows how to parse a string into a date object using a specific format with Quasar's extractDate function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\n// Example 1\nconst date = date.extractDate('2019-10-29 --- 23:12', 'YYYY-MM-DD --- HH:mm')\n// date is a new Date() object\n\n// Example 2\nconst date = date.extractDate('21/03/1985', 'DD/MM/YYYY')\n// date is a new Date() object\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Script in Manifest JSON\nDESCRIPTION: Configuration for registering background scripts in the manifest.json file for both Chrome and Firefox browsers. Chrome uses service_worker for Manifest v3, while Firefox uses the scripts array.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/background-script.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"chrome\": {\n  \"background\": {\n    \"service_worker\": \"background.js\"\n  }\n},\n\n\"firefox\": {\n  \"background\": {\n    \"scripts\": [ \"background.js\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Plugins using extendViteConf in Quasar Config\nDESCRIPTION: Demonstrates how to add Vite plugins using the extendViteConf method in the Quasar config file. This approach is useful for SSR mode where you might want to apply plugins only on the server-side or client-side.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport plugin1 from 'plugin1'\nimport plugin2 from 'plugin2'\n\nbuild: {\n  extendViteConf (viteConf, { isClient, isServer }) {\n    viteConf.plugins.push(\n      plugin1({ /* plugin1 options */ }),\n      plugin2({ /* plugin2 options */ })\n      // ...\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Timeline Layout\nDESCRIPTION: Demonstrates responsive timeline behavior using $q.screen to adapt layout based on window size\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/timeline.md#2025-04-16_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Practical Example of useInterval in Quasar Component\nDESCRIPTION: This example demonstrates how to use the useInterval composable in a Vue 3 component setup function. It shows how to register an interval that logs a parameter every 2 seconds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-interval.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useInterval } from 'quasar'\n\nsetup () {\n  const { registerInterval } = useInterval()\n\n  function onSomeEvent (param) {\n    registerInterval(() => {\n      console.log('param is', param)\n    }, 2000) // every 2 seconds\n  }\n\n  // ...\n\n  // You can call onSomeEvent() multiple\n  // times in a row and only the last\n  // registered Function will run when it\n  // is time for it\n\n  // Note that the interval is reset each\n  // time you register/override it\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Notification Configuration in a Boot File\nDESCRIPTION: Shows how to set default configurations for all notifications using a Quasar boot file, which runs before the app starts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Notify } from 'quasar'\n\nNotify.setDefaults({\n  position: 'top-right',\n  timeout: 2500,\n  textColor: 'white',\n  actions: [{ icon: 'close', color: 'white' }]\n})\n```\n\n----------------------------------------\n\nTITLE: Non-Linear Navigation Implementation\nDESCRIPTION: Example showing non-linear header navigation in stepper\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Non-linear header navigation\" file=\"NonLinearNavigation\" />\n```\n\n----------------------------------------\n\nTITLE: Styling with Screen Size Body Classes\nDESCRIPTION: Example of using Quasar's body classes for responsive styling. This approach requires enabling the Screen Plugin and allows targeting specific screen sizes using CSS class selectors.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/breakpoints.md#2025-04-16_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n.my-div\n  body.screen--xs &\n    color: #000\n  body.screen--sm &\n    color: #fff\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Autoprefixer Browser Support\nDESCRIPTION: Configuration for specifying browser compatibility ranges for CSS autoprefixer in postcss.config.js. Defines which browser versions should be supported for CSS features.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/browser-compatibility.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nautoprefixer({\n  overrideBrowserslist: [\n    'last 4 Chrome versions',\n    'last 4 Firefox versions',\n    'last 4 Edge versions',\n    'last 4 Safari versions',\n    'last 4 Android versions',\n    'last 4 ChromeAndroid versions',\n    'last 4 FirefoxAndroid versions',\n    'last 4 iOS versions'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: QResponsive with QCarousel\nDESCRIPTION: Example of QResponsive usage with QCarousel, noting that height prop should be omitted as QResponsive handles the sizing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Building Quasar Capacitor App for Android Release\nDESCRIPTION: Command to generate a release build for an Android app using Quasar CLI with Capacitor. This compiles web assets and optionally opens Android Studio for further build steps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T android\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Config for Capacitor in Quasar Config File\nDESCRIPTION: This snippet demonstrates how to extend the Vite configuration specifically for Capacitor builds in the quasar.config file. It allows customizing the Vite config when building for Capacitor mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf) {\n        if (ctx.mode.capacitor) {\n          // do something with viteConf\n          // or return an object to deeply merge with current viteConf\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Intersection Directive in JavaScript\nDESCRIPTION: Demonstrates how to configure the Intersection directive using an object with a handler function and optional configuration settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/intersection.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  handler: /* Function */,\n  cfg: {\n    // any options from \"Intersection observer options\"\n    // on https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n    root: null, // DOM Element\n    rootMargin: '0px',\n    threshold: 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of QTabs and QTab in Vue\nDESCRIPTION: Demonstrates the basic implementation of QTabs and QTab components for creating a tab-based interface.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tabs.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-tabs>\n  <q-tab icon=\"mail\" to=\"/mails\" exact />\n  <q-tab icon=\"alarm\" to=\"/alarms\" exact />\n</q-tabs>\n```\n\n----------------------------------------\n\nTITLE: Custom Page Style Function Implementation\nDESCRIPTION: Demonstrates how to customize page styling using the style-fn property, allowing for custom min-height calculations based on header and footer offset.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-page :style-fn=\"myTweak\">...</q-page>\n</template>\n\n<script>\nexport default {\n  // ...\n  methods: {\n    myTweak (offset) {\n      // \"offset\" is a Number (pixels) that refers to the total\n      // height of header + footer that occupies on screen,\n      // based on the QLayout \"view\" prop configuration\n\n      // this is actually what the default style-fn does in Quasar\n      return { minHeight: offset ? `calc(100vh - ${offset}px)` : '100vh' }\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Boot Files in Quasar Config\nDESCRIPTION: Configuration example showing how to specify boot files for server-side, client-side, or universal execution in quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/writing-universal-code.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  boot: [\n    'some-boot-file', // runs on both server & client\n    { path: 'some-other', server: false } // this boot file gets embedded only on client-side\n    { path: 'third', client: false } // this boot file gets embedded only on server-side\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Router Navigation with Composition and Options API\nDESCRIPTION: Examples of navigating back using Vue Router with both Composition API and Options API approaches.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Composition API variant\nimport { useRouter } from 'vue-router'\n\nsetup () {\n  const $router = useRouter()\n\n  // go back by one record, the same as $router.back()\n  $router.go(-1)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Options API variant inside your component\nthis.$router.go(-1)\n```\n\n----------------------------------------\n\nTITLE: QToggle with Keep Color Option in Vue\nDESCRIPTION: Illustrates the use of keep-color prop in QToggle to maintain color consistency.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Keep color\" file=\"KeepColor\" />\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Validator Structure\nDESCRIPTION: Shows the general structure for writing validation rules in QField using the condition or error message pattern\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/field.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvalue => condition || errorMessage\n```\n\n----------------------------------------\n\nTITLE: QImg with Custom Aspect Ratio\nDESCRIPTION: Shows how to implement custom aspect ratios for images using the QImg component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/img.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom aspect ratio\" file=\"Ratio\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling iOS Modern Build Configuration\nDESCRIPTION: Configuration in quasar.config file to enable Xcode modern build for iOS\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/build-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ncordova: {\n  noIosLegacyBuildFlag: true\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SSR Context in a Boot File\nDESCRIPTION: Example showing how to access and modify the SSR context in a boot file, which can then be referenced in the index.html template.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ app, ..., ssrContext }) => {\n  // You can add props to the ssrContext then use them in the /index.html.\n  // Example - let's say we ssrContext.someProp = 'some value', then in index template we can reference it:\n  // {{ someProp }}\n}\n```\n\n----------------------------------------\n\nTITLE: Date Difference Calculation in Quasar\nDESCRIPTION: Shows how to calculate the difference between two dates using Quasar's getDateDiff function. Supports different units of measurement like days, months, years etc.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst date1 = new Date(2017, 4, 12)\nconst date2 = new Date(2017, 3, 8)\nconst unit = 'days'\n\nconst diff = date.getDateDiff(date1, date2, unit)\n// `diff` is 34 (days)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scrolling Implementation\nDESCRIPTION: Demonstrates horizontal scrolling capabilities of QScrollArea\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Horizontal content\" file=\"Horizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Using Multiple useTick Instances in Quasar Component\nDESCRIPTION: This snippet shows how to use multiple instances of useTick in a single component by renaming the returned functions. This allows for managing multiple independent ticks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-tick.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  registerTick: registerFirstTick,\n  removeTick: removeFirstTick\n} = useTick()\n\nconst {\n  registerTick: registerSecondTick,\n  removeTick: removeSecondTick\n} = useTick()\n```\n\n----------------------------------------\n\nTITLE: Props Passthrough Implementation\nDESCRIPTION: Example showing how QPopupProxy passes through props from both QMenu and QDialog components, allowing for customization of offset, transitions, and other properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/popup-proxy.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Props from QMenu or QDialog\" file=\"Passthrough\" />\n```\n\n----------------------------------------\n\nTITLE: QBtn with RouterLink Scoped Slot\nDESCRIPTION: Example of using QBtn within Vue RouterLink component for more complex routing scenarios and state control based on current route.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Scoped slot of RouterLink\" file=\"RouterLinkExample\" no-edit />\n```\n\n----------------------------------------\n\nTITLE: Using Meta Plugin with Options API in Quasar v2\nDESCRIPTION: Demonstrates how to implement the Meta plugin using the Options API approach by creating a meta mixin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Options API variant\n// for some .vue file\nimport { createMetaMixin } from 'quasar'\n\nexport default {\n  mixins: [\n    createMetaMixin({ /* ...definition */})\n    // OR dynamic:\n    createMetaMixin(function () {\n      // \"this\" here refers to the vue component\n      return {\n        /* ...definition... */\n      }\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Import with Vue Composition API Setup\nDESCRIPTION: Script setup example showing how to import and use SVG icons with the Composition API and script setup syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport { matMenu } from '@quasar/extras/material-icons'\nimport { mdiAbTesting } from '@quasar/extras/mdi-v7'\nimport { fasFont } from '@quasar/extras/fontawesome-v5'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Capacitor Boot File Configuration\nDESCRIPTION: JavaScript boot file setup for initializing PWA elements in a Quasar application\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\n\nexport default () => {\n  defineCustomElements(window)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the Quasar development server using either the global CLI or package manager specific commands.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quick-start.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <project_folder_name>\n# then run:\n\n# if you have the global CLI:\n$ quasar dev\n# otherwise:\n$ yarn quasar dev # or: npx quasar dev\n```\n\n----------------------------------------\n\nTITLE: Checking Android SDK Requirements with Cordova CLI\nDESCRIPTION: This snippet shows the output of running 'cordova requirements' command to check Android SDK setup. It demonstrates how to verify if all necessary Android development components are installed and configured correctly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cordova requirements\n\nRequirements check results for android:\nJava JDK: installed 1.8.0\nAndroid SDK: installed true\nAndroid target: not installed\nAndroid SDK not found. Make sure that it is installed. If it is not at the default location, set the ANDROID_HOME (or ANDROID_SDK_ROOT) environment variable.\nGradle: not installed\nCould not find gradle wrapper within Android SDK. Might need to update your Android SDK.\nLooked here: /home/your_user/Android/Sdk/tools/templates/gradle/wrapper\nError: Some of requirements check failed\n```\n\n----------------------------------------\n\nTITLE: Flex Wrapping Behavior in Quasar Layout\nDESCRIPTION: Demonstrates how flex items wrap in a Quasar row when their total width exceeds 12 columns. This example shows how elements are placed on new lines based on available space.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div class=\"col-2\">...</div>\n\n  <!-- 2 + 6 < 12, so next element is placed on same line -->\n  <div class=\"col-6\">...</div>\n\n  <!-- 2 + 6 + 10 > 12, so next element wraps to next line -->\n  <div class=\"col-10\">...</div>\n\n  <!--\n    10 + 3 > 12, so next element wraps to next line.\n    Note that we take into consideration the current line only\n    (with col-10 only, since it was wrapped to its own line).\n  -->\n  <div class=\"col-3\">...</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: QSplitter with Custom Separator Content\nDESCRIPTION: Example demonstrating how to add custom content to the separator slot.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Adding to separator\" file=\"SeparatorSlot\" />\n```\n\n----------------------------------------\n\nTITLE: Conditional Platform-Specific Icon Selection in Vue\nDESCRIPTION: Example showing how to conditionally render different icons based on the iOS platform using Quasar's platform detection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-btn\n  :icon=\"$q.platform.is.ios ? 'settings' : 'ion-ios-gear-outline'\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Icons Radio Implementation\nDESCRIPTION: Implementation of radio buttons with custom icons, available from Quasar v2.5+\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/radio.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With icons\" file=\"WithIcons\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Header-Cell Slot for Custom Header Cell Rendering in QTable with Vue\nDESCRIPTION: Demonstrates how to use a header-cell slot to customize the rendering of each header cell in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Header-cell slot\" file=\"SlotHeaderCell\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest v2 for BEX in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the manifest.json file for a Browser Extension using manifest version 2, specifying pages for options, popup, and devtools.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifest_version\": 2,\n\n  \"options_page\": \"www/index.html#/options\",\n  \"browser_action\": {\n    \"default_popup\": \"www/index.html#/popup\"\n  },\n  \"devtools_page\": \"www/index.html#/devtools\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inhibiting Touch Pan in Nested Elements\nDESCRIPTION: Demonstrating how to stop propagation of touch and mouse events to prevent TouchPan from applying to nested elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-pan.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-pan.mouse=\"userHasHold\">\n  <!-- ...content -->\n  <div @touchstart.stop @mousedown.stop>\n    <!--\n      TouchPan will not apply here because\n      we are calling stopPropagation() on touchstart\n      and mousedown events\n    -->\n  </div>\n  <!-- ...content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Font Loading Configuration\nDESCRIPTION: Demonstrates how to conditionally load fonts based on the build mode, specifically loading Roboto font only for PWA builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  extras: [\n    ctx.mode.pwa // we're adding only if working on a PWA\n      ? 'roboto-font'\n      : null\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Config for Cordova in Quasar Config File\nDESCRIPTION: This snippet shows how to extend the Vite configuration specifically for Cordova mode in the quasar.config file. It allows for custom modifications to the Vite config when building for Cordova.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/configuring-cordova.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf) {\n        if (ctx.mode.cordova) {\n          // do something with viteConf\n          // or return an object to deeply merge with current viteConf\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: QResponsive in Flex Row Layout\nDESCRIPTION: Shows how to use QResponsive components in a flex row layout with custom vertical alignment using items-start instead of default stretch.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Basic Checkbox Form Example\nDESCRIPTION: Example showing native form submission with QCheckbox component. Demonstrates proper name attribute usage for form data handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript ESLint Configuration\nDESCRIPTION: Extended ESLint configuration for TypeScript-based Quasar projects with TypeScript-specific rules and checks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/linter.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfigWithVueTs(\n  {\n  },\n  pluginQuasar.configs.recommended(),\n  js.configs.recommended,\n  pluginVue.configs[ 'flat/essential' ],\n  {\n    files: ['**/*.ts', '**/*.vue'],\n    rules: {\n      '@typescript-eslint/consistent-type-imports': [\n        'error',\n        { prefer: 'type-imports' }\n      ],\n    }\n  },\n  vueTsConfigs.recommendedTypeChecked\n)\n```\n\n----------------------------------------\n\nTITLE: QToggle with Icons in Vue\nDESCRIPTION: Demonstrates how to incorporate icons into QToggle components for visual enhancement.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Icons\" file=\"Icons\" />\n```\n\n----------------------------------------\n\nTITLE: Adding PWA Mode to Quasar Project\nDESCRIPTION: Command to add PWA mode to an existing Quasar project using Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add pwa\n```\n\n----------------------------------------\n\nTITLE: Implementing No Data Slot in QTable with Vue\nDESCRIPTION: Shows how to use the no-data scoped slot to customize messages for when a filter returns no results or the table has no data to display.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"No Data Slot\" file=\"NoDataSlot\" />\n```\n\n----------------------------------------\n\nTITLE: Enhancing Performance with PM2 in package.json Start Script\nDESCRIPTION: Modified npm start script that uses PM2 process manager to run the SSR application across multiple CPU cores for improved performance.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/deploying.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"start\": \"pm2 start index.mjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Morphing a Button into a Card in Vue with Quasar\nDESCRIPTION: Shows how to use the Morph directive to transform a button into a card element in Quasar Framework.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/morph.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Morph a button into a card\" file=\"Card\" />\n```\n\n----------------------------------------\n\nTITLE: Firebase Cache Control Configuration\nDESCRIPTION: JSON configuration for Firebase hosting to prevent caching of Service Worker file\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/handling-service-worker.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"headers\": [\n      { \"source\":\"/sw.js\", \"headers\": [{\"key\": \"Cache-Control\", \"value\": \"no-cache\"}] }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Form Integration with QOptionGroup\nDESCRIPTION: Shows how to integrate QOptionGroup with native form submission, requiring the name property for proper formData handling. Values are converted to strings for native form compatibility.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/option-group.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Quasar Plugin Configuration\nDESCRIPTION: Configuration example for enabling Quasar plugins in quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nframework: {\n  plugins: [ 'Notify', 'BottomSheet' ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Icon QPullToRefresh Implementation\nDESCRIPTION: Example showing how to customize the pull-to-refresh icon in QPullToRefresh component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/pull-to-refresh.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom icon\" file=\"Icon\" />\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Quasar CLI Vite\nDESCRIPTION: Modifications to package.json to remove Webpack dependencies and add Vite-related packages. Also removes the browserslist property.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: {\n- core-js\n},\n\ndevDependencies: {\n- \"@quasar/app-webpack\": \"^4.0.0\"\n+ \"@quasar/app-vite\": \"^2.0.0\"\n\n+ \"postcss\": \"^8.4.14\"\n+ \"postcss-rtlcss\": \"^5.4.0\" // if using RTL support\n\n- eslint-webpack-plugin\n- ts-loader\n- workbox-webpack-plugin\n}\n\n- browserslist: {}\n```\n\n----------------------------------------\n\nTITLE: Battery Status Implementation in Vue Component\nDESCRIPTION: Vue component implementation showing how to monitor and display device battery status using the Cordova battery plugin\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    Battery status is: <strong>{{ batteryStatus }}</strong>\n  </div>\n</template>\n\n<script>\nimport { ref, onBeforeUnmount } from 'vue'\n\nexport default {\n  setup () {\n    const batteryStatus = ref('determining...')\n\n    function updateBatteryStatus (status) {\n      batteryStatus.value = `Level: ${status.level}, plugged: ${status.isPlugged}`\n    }\n\n    window.addEventListener('batterystatus', updateBatteryStatus, false)\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('batterystatus', updateBatteryStatus, false)\n    })\n\n    return {\n      batteryStatus\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing @electron/remote Dependency\nDESCRIPTION: Commands to install the @electron/remote package using different package managers\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @electron/remote\n$ npm install --save @electron/remote\n$ pnpm add @electron/remote\n$ bun add @electron/remote\n```\n\n----------------------------------------\n\nTITLE: Injecting SVG Icons in Vue Options API\nDESCRIPTION: Example showing how to properly inject SVG icons in a Vue component using the created() hook instead of data() to avoid making the icons reactive. Demonstrates imports from multiple icon libraries including Material Icons, MDI, and Font Awesome.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport { matMenu } from '@quasar/extras/material-icons'\nimport { mdiAbTesting } from '@quasar/extras/mdi-v7'\nimport { fasFont } from '@quasar/extras/fontawesome-v5'\n\nexport default {\n  // ...\n  created () {\n    this.matMenu = matMenu\n    this.mdiAbTesting = mdiAbTesting\n    this.fasFont = fasFont\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Aligning Android APK for Optimization\nDESCRIPTION: Command to zip align the APK file using the zipalign tool from Android SDK. This optimizes the APK for better performance on Android devices.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ zipalign -v 4 <path-to-same-apk-file> HelloWorld.apk\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Middleware for Error Handling in Quasar\nDESCRIPTION: This snippet demonstrates how to set up SSR middleware in Quasar to handle routing and error cases. It includes logic for rendering pages, managing redirects, and handling 404 and 500 errors differently in development and production environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrMiddleware } from '#q-app/wrappers'\n\n// This middleware should execute as last one\n// since it captures everything and tries to\n// render the page with Vue\n\nexport default defineSsrMiddleware(({ app, resolve, render, serve }) => {\n  // we capture any other Express route and hand it\n  // over to Vue and Vue Router to render our page\n  app.get(resolve.urlPath('*'), (req, res) => {\n    res.setHeader('Content-Type', 'text/html')\n\n    render(/* the ssrContext: */ { req, res })\n      .then(html => {\n        // now let's send the rendered html to the client\n        res.send(html)\n      })\n      .catch(err => {\n        // oops, we had an error while rendering the page\n\n        // we were told to redirect to another URL\n        if (err.url) {\n          if (err.code) {\n            res.redirect(err.code, err.url)\n          } else {\n            res.redirect(err.url)\n          }\n        } else if (err.code === 404) {\n          // hmm, Vue Router could not find the requested route\n\n          // Should reach here only if no \"catch-all\" route\n          // is defined in /src/routes\n          res.status(404).send('404 | Page Not Found')\n        } else if (process.env.DEV) {\n          // well, we treat any other code as error;\n          // if we're in dev mode, then we can use Quasar CLI\n          // to display a nice error page that contains the stack\n          // and other useful information\n\n          // serve.error is available on dev only\n          serve.error({ err, req, res })\n        } else {\n          // we're in production, so we should have another method\n          // to display something to the client when we encounter an error\n          // (for security reasons, it's not ok to display the same wealth\n          // of information as we do in development)\n\n          // Render Error Page on production or\n          // create a route (/src/routes) for an error page and redirect to it\n          res.status(500).send('500 | Internal Server Error')\n\n          if (process.env.DEBUGGING) {\n            console.error(err.stack)\n          }\n        }\n      })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of v-touch-hold Directive in Vue\nDESCRIPTION: Demonstrates the basic implementation of the v-touch-hold directive in a Vue component. This snippet shows how to attach the directive to an element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-hold.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-hold=\"userHasHold\">...</div>\n```\n\n----------------------------------------\n\nTITLE: QSplitter with Reverse Model\nDESCRIPTION: Example showing how to reverse the model to connect with the after slot instead of the default before slot.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Reverse model\" file=\"ReverseModel\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Environment Variables in Quasar Config\nDESCRIPTION: Demonstrates how to define custom environment variables in the quasar.config file that will be accessible in the application code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Accessing terminal variables\nconsole.log(process.env)\n\nexport default defineConfig((ctx) => {\n  return {\n    // ...\n\n    build: {\n      // passing down to UI code from the quasar.config file\n      env: {\n        API: ctx.dev\n          ? 'https://dev.api.com'\n          : 'https://prod.api.com'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Status Bar in Quasar Framework\nDESCRIPTION: Framework-level configuration for iOS status bar padding settings in Capacitor apps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      capacitor: {\n        iosStatusBarPadding: true/false, // add the dynamic top padding on iOS mobile devices\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QNoSsr with Tag Property\nDESCRIPTION: Demonstrates using the tag prop to specify the wrapper element type for client-side content\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr tag=\"blockquote\">\n  <div>This won't be rendered on server.</div>\n  <div>This won't either.</div>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: QIntersection with Root Viewport\nDESCRIPTION: Shows how to use QIntersection with a custom root viewport, useful for iframe implementations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/intersection.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Root viewport\" file=\"Root\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Vue CLI Version in Bash\nDESCRIPTION: Command to verify the installed version of Vue CLI before proceeding with installation of Quasar plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vue-cli-plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vue --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Animations in Quasar Config File (JavaScript)\nDESCRIPTION: This snippet shows how to configure animations in the Quasar config file. It demonstrates embedding all animations or specific ones.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/animations.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// embedding all animations\nanimations: 'all'\n\n// or embedding only specific animations\nanimations: [\n  'bounceInLeft',\n  'bounceOutRight'\n]\n```\n\n----------------------------------------\n\nTITLE: Expanded QPageSticky Usage in Vue\nDESCRIPTION: Illustrates advanced usage of QPageSticky with expanded functionality. This example demonstrates how to create a page-specific toolbar using QPageSticky.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page-sticky.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Expanded\" file=\"Expanded\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Favicon HTML Configuration\nDESCRIPTION: HTML code for configuring basic favicon icons of different sizes in the application's index.html file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/app-icons-ssr.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/ico\" href=\"favicon.ico\">\\n<link rel=\"icon\" type=\"image/png\" sizes=\"128x128\" href=\"icons/favicon-128x128.png\">\\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"icons/favicon-96x96.png\">\\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"icons/favicon-32x32.png\">\\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"icons/favicon-16x16.png\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch Repeat with Mouse Events in Vue\nDESCRIPTION: Shows how to enable the v-touch-repeat directive to handle mouse events in addition to touch events using the 'mouse' modifier.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-repeat.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-repeat.mouse=\"myHandler\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Quasar Projects in VS Code\nDESCRIPTION: VS Code settings to enable ESLint validation, auto-fixing on save, and format on save features for JavaScript, TypeScript, and Vue files in Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": [\n    \"source.fixAll.eslint\"\n  ],\n  \"eslint.validate\": [\"javascript\", \"javascriptreact\", \"typescript\", \"vue\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Breakpoint Implementation\nDESCRIPTION: QPopupProxy implementation with custom breakpoint set at 600px, demonstrated with an input icon trigger.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/popup-proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Breakpoint @600px\" file=\"Breakpoint\" />\n```\n\n----------------------------------------\n\nTITLE: Vercel Route Configuration\nDESCRIPTION: Configuration file for Vercel deployment to support SPA routing\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/deploying.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    { \"handle\": \"filesystem\" },\n    { \"src\": \"/.*\", \"dest\": \"/index.html\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest v3 for BEX in JSON\nDESCRIPTION: This JSON snippet shows the configuration for a Browser Extension manifest using version 3, specifying pages for popup, options, and devtools.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifest_version\": 3,\n\n  \"action\": {\n    \"default_popup\": \"www/index.html#/popup\"\n  },\n  \"options_page\": \"www/index.html#/options\",\n  \"devtools_page\": \"www/index.html#/devtools\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading All Cookies Inside a Vue Component\nDESCRIPTION: Demonstrates how to retrieve all cookies as an object inside a Vue component using the Composition API with useQuasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n  const allCookies = $q.cookies.getAll()\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Props Configuration in QOptionGroup\nDESCRIPTION: Demonstrates customization of label, value, and disable properties in QOptionGroup options array\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/option-group.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom Label, Value and Disable props\" file=\"CustomOptionProps\" />\n```\n\n----------------------------------------\n\nTITLE: Vuex 4 Store Configuration\nDESCRIPTION: Example of Vuex 4 store setup showing the new createStore usage and module configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore } from 'vuex'\n// import example from './module-example'\n\nexport default function (/* { ssrContext } */) {\n  const Store = createStore({\n    modules: {\n      // example\n    },\n\n    // enable strict mode (adds overhead!)\n    // for dev mode and --debug builds only\n    strict: process.env.DEBUGGING\n  })\n\n  return Store\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly and Disabled States\nDESCRIPTION: Example showing readonly and disabled states of the rating component\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Readonly and disable\" file=\"ReadonlyDisable\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Native Form Implementation with QTime\nDESCRIPTION: Shows how to implement QTime within a native HTML form that includes action and method attributes. The example demonstrates proper naming for form data submission.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/time.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<form\n  class=\"q-pa-md\"\n  action=\"https://some-url.com\"\n  method=\"post\"\n  @submit.prevent=\"onSubmit\"\n>\n  <div class=\"q-gutter-md row\">\n    <QTime\n      name=\"time\"\n      v-model=\"time\"\n    />\n\n    <div>\n      <QBtn\n        label=\"Submit\"\n        type=\"submit\"\n      />\n    </div>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Loader with extendWebpack\nDESCRIPTION: Example of adding a JSON loader to the Webpack configuration using the extendWebpack method in quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  extendWebpack (cfg) {\n    cfg.module.rules.push({\n      test: /\\.json$/,\n      loader: 'json-loader'\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration for Cordova in Quasar Config File\nDESCRIPTION: This snippet shows options for modifying the Webpack configuration for the UI in the /src directory when building Cordova apps with Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/configuring-cordova.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendWebpack(webpackCfg) { ... },\n  chainWebpack(webpackChain) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Brand Colors with JavaScript\nDESCRIPTION: Examples of setting Quasar brand colors using utility functions and vanilla JavaScript\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { setCssVar } from 'quasar'\n\nsetCssVar('light', '#DDD')\nsetCssVar('primary', '#33F')\nsetCssVar('primary', '#F33', document.getElementById('rebranded-section-id'))\n```\n\n----------------------------------------\n\nTITLE: Quasar Config ESLint Settings\nDESCRIPTION: Configuration options for ESLint in the quasar.config file including warnings and error handling settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/linter.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nreturn {\n  eslint: {\n    // fix: true,\n    // include: [],\n    // exclude: [],\n    // cache: false,\n    // rawEsbuildEslintOptions: {},\n    // rawWebpackEslintPluginOptions: {},\n    warnings: true,\n    errors: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v6 Dependencies\nDESCRIPTION: Required package dependencies for Capacitor v6 implementation in Quasar. Requires Xcode 15+ for iOS and Android Studio Jellyfish 2023.3.1+ for Android development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^6.0.0\",\n  \"@capacitor/cli\": \"^6.0.0\",\n  \"@capacitor/core\": \"^6.0.0\",\n  \"@capacitor/splash-screen\": \"^6.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building SPA for Production with Quasar CLI\nDESCRIPTION: Command to build a Quasar single page application for production. This creates optimized and minified assets ready for deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build\n```\n\n----------------------------------------\n\nTITLE: Linear Navigation Implementation\nDESCRIPTION: Example demonstrating linear header navigation in stepper\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Linear header navigation\" file=\"LinearNavigation\" />\n```\n\n----------------------------------------\n\nTITLE: Watching Dark Mode Status Changes\nDESCRIPTION: Shows how to watch for dark mode status changes using Vue's watch function with the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dark.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>...</template>\n\n<script>\nimport { useQuasar } from 'quasar'\nimport { watch } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    watch(() => $q.dark.isActive, val => {\n      console.log(val ? 'On dark mode' : 'On light mode')\n    })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building PWA for Production with Debugging Enabled\nDESCRIPTION: Commands for building a Progressive Web App for production with debugging enabled using Quasar CLI. This is useful when you need to troubleshoot issues in a production-like environment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m pwa -d\n\n# ..or the longer form\n$ quasar build -m pwa --debug\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn global bin directory to PATH\nDESCRIPTION: Bash command for adding the Yarn global installation location to the system PATH variable in the .bashrc file or equivalent. This ensures globally installed packages are accessible from the command line.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# in ~/.bashrc or equivalent\nexport PATH=\"$(yarn global bin):$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration Based on Build Mode in JavaScript\nDESCRIPTION: Shows how to conditionally configure aspects of the app based on the build mode, such as loading different fonts or CSS files for different modes (PWA, SPA, Cordova).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  extras: [\n    ctx.mode.pwa // we're adding only if working on a PWA\n      ? 'roboto-font'\n      : null\n  ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  css: [\n    ctx.mode.spa ? 'app-spa.sass' : null, // looks for /src/css/app-spa.sass\n    ctx.mode.cordova ? 'app-cordova.sass' : null  // looks for /src/css/app-cordova.sass\n  ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  devServer: {\n    port: ctx.mode.spa\n      ? 8000\n      : (ctx.mode.pwa ? 9000 : 9090)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apple Device Startup Images Configuration\nDESCRIPTION: HTML configuration for Apple device startup images, including specific media queries for different iPhone and iPad models with their respective resolutions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/app-icons-ssr.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- iPhone XR -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-828x1792.png\">\\n<!-- iPhone X, XS -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1125x2436.png\">\\n<!-- iPhone XS Max -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2688.png\">\\n<!-- iPhone 8, 7, 6s, 6 -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-750x1334.png\">\\n<!-- iPhone 8 Plus, 7 Plus, 6s Plus, 6 Plus -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2208.png\">\\n<!-- iPhone 5 -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-640x1136.png\">\\n<!-- iPad Mini, Air, 9.7\" -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1536x2048.png\">\\n<!-- iPad Pro 10.5\" -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2224.png\">\\n<!-- iPad Pro 11\" -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2388.png\">\\n<!-- iPad Pro 12.9\" -->\\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-2048x2732.png\">\n```\n\n----------------------------------------\n\nTITLE: Manual Post-Hydration Triggering with Options API\nDESCRIPTION: Example using Vue Options API to manually trigger post-hydration in a Quasar SSR application when the manualPostHydrationTrigger option is enabled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// App.vue\n\nexport default {\n  mounted () {\n    this.$q.onSSRHydrated()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rating with Tooltips\nDESCRIPTION: Example showing how to add tooltips to rating icons using QTooltip\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"With QTooltip\" file=\"SlotTip\" />\n```\n\n----------------------------------------\n\nTITLE: Get Scrollbar Width (JavaScript)\nDESCRIPTION: Method to compute the width of the scrollbar in pixels.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getScrollbarWidth } = scroll\n\nconsole.log(getScrollbarWidth()) // 16 (it's in pixels)\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack with ESLint Loader in Quasar Config\nDESCRIPTION: Example of adding ESLint loader to the Webpack configuration using the extendWebpack method in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  extendWebpack (cfg, { isServer, isClient }) {\n    cfg.module.rules.push({\n      enforce: 'pre',\n      test: /\\.(js|vue)$/,\n      loader: 'eslint-loader',\n      exclude: /(node_modules|quasar)/\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Step Error Handling\nDESCRIPTION: Example showing how to signal step errors in the stepper\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Signaling step error\" file=\"StepError\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Before/After Slots to QTable Header/Footer in Vue\nDESCRIPTION: Shows how to use before and after slots for customizing the header and footer of a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Before/After slots (header/footer)\" file=\"BeforeAfterHeaderFooter\" />\n```\n\n----------------------------------------\n\nTITLE: Filtering Environment Variables in Quasar Config\nDESCRIPTION: Demonstrates how to filter or modify environment variables using the envFilter function in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  // @quasar/app-webpack v4.0.3+\n  envFilter (originalEnv) {\n    const newEnv = {}\n    for (const key in originalEnv) {\n      if (/* ...decide if it goes in or not... */) {\n        newEnv[ key ] = originalEnv[ key ]\n      }\n    }\n\n    // remember to return your processed env\n    return newEnv\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Malicious JavaScript in Console\nDESCRIPTION: This snippet demonstrates a potential security risk where an attacker could redirect the application to a malicious site using the browser console. It emphasizes the importance of disabling developer tools in production.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-security-concerns.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.location='https://evilsite.com/looks-just-like-your-app'\n```\n\n----------------------------------------\n\nTITLE: Coloring QTabPanels in Vue\nDESCRIPTION: Demonstrates how to apply custom colors to QTabPanels, enhancing the visual appeal and allowing for better integration with the overall design.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Coloring\" file=\"Coloring\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for RTL Support in Vite\nDESCRIPTION: Basic PostCSS configuration file that imports and enables the rtlcss plugin for right-to-left support in a Vite project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport rtlcss from 'postcss-rtlcss'\n\nexport default {\n  plugins: [\n    rtlcss({ /* opts */ }) // <<<< in \"plugins\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating QRouteTab with Vue Router\nDESCRIPTION: Shows how to use QRouteTab component to connect tabs with Vue Router for navigation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tabs.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<q-tabs>\n  <q-route-tab\n    icon=\"mail\"\n    to=\"/mails\"\n    exact\n  />\n  <q-route-tab\n    icon=\"alarm\"\n    to=\"/alarms\"\n    exact\n  />\n</q-tabs>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Quasar App Extension via CLI\nDESCRIPTION: This command uses the Quasar CLI to remove the installed extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/app-extension/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nquasar ext remove <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Native Form Integration\nDESCRIPTION: Implementation showing how to use QRating within native form submissions\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Color Utilities Usage\nDESCRIPTION: Example of using Quasar color utilities for color manipulation\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { colors, setCssVar } from 'quasar'\n\nconst { lighten } = colors\n\nconst newPrimaryColor = '#933'\nsetCssVar('primary', newPrimaryColor)\nsetCssVar('primary-darkened', lighten(newPrimaryColor, -10))\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Loading Groups\nDESCRIPTION: Example showing how to manage multiple loading groups in parallel using different approaches\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * First way\n */\n\n// we spawn the group\nconst myLoadingGroup = Loading.show({\n  group: 'my-group',\n  message: 'Some message'\n})\n\n// with params, so we update this group\nmyLoadingGroup({ message: 'Second message' })\n\n// no params, so we instruct Quasar to hide the group\nmyLoadingGroup()\n\n/**\n * Second, equivalent way\n */\n\n// we spawn the group\nLoading.show({\n  group: 'my-group',\n  message: 'Some message'\n})\n\n// we update the group (in this case we need to specify the group name)\nLoading.show({\n  group: 'my-group'\n  message: 'Second message'\n})\n\n// we hide this specific group\nLoading.hide('my-group')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Sizes for q-col-gutter Classes in Quasar\nDESCRIPTION: Example showing different column gutter sizes available with the q-col-gutter-* classes in Quasar, specifically designed for use with elements that have col-* or offset-* classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Sizes for q-col-gutter\" file=\"ColGutterSize\" />\n```\n\n----------------------------------------\n\nTITLE: QImg with Captions\nDESCRIPTION: Demonstrates how to add captions to images using the QImg component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/img.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Captions\" file=\"Caption\" />\n```\n\n----------------------------------------\n\nTITLE: Proper Vue Render Function Caching Pattern\nDESCRIPTION: Example showing the correct way to cache properties in Vue render functions to avoid tampering with Vue's DOM diff algorithm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-render-cache.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// DON'T cache like this:\nh(\n  'div',\n  getCache(`node#${ i }`, () => {\n    return {\n      onClick () => { console.log(`clicked on node ${ i }`) }\n    }\n  })\n)\n\n// ..rather, do it like this:\nh(\n  'div',\n  { // new such object needs to be created on each\n    // render, even if the content is cached\n    ...getCache(`node#${ i }`, () => {\n      return {\n        onClick () => { console.log(`clicked on node ${ i }`) }\n      }\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for Quasar SPA\nDESCRIPTION: Example nginx configuration for serving a Quasar SPA with proper headers and routing setup.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/deploying.md#2025-04-16_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80 http2;\n    server_name quasar.myapp.com;\n\n    root /home/user/quasar.myapp.com/public;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    index index.html;\n\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/quasar.myapp.com-error.log error;\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Group Morphing in Vue with Quasar\nDESCRIPTION: Demonstrates morphing between multiple elements in a group using the Morph directive in Quasar Framework.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/morph.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Morph between multiple elements in a group\" file=\"BasicGroup\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useTick Composable in Quasar\nDESCRIPTION: This snippet demonstrates how to import and use the useTick composable in a Vue component's setup function. It returns registerTick and removeTick functions for managing ticks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-tick.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useTick } from 'quasar'\n\nsetup () {\n  const {\n    registerTick,\n    removeTick\n  } = useTick()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Week Number in Quasar\nDESCRIPTION: Demonstrates how to get the ISO week number in year for a given date using Quasar's getWeekOfYear function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date(2017, 0, 4)\nconst week = date.getWeekOfYear(newDate) // `week` is 1\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR Render Middleware\nDESCRIPTION: Core implementation of the SSR render middleware that handles page rendering with Vue, including error handling and response management. Handles various scenarios like redirects, 404 errors, and server errors differently in development and production environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ app, resolve, render, serve }) => {\n  // we capture any other Express route and hand it\n  // over to Vue and Vue Router to render our page\n  app.get(resolve.urlPath('*'), (req, res) => {\n    res.setHeader('Content-Type', 'text/html')\n\n    render({ req, res })\n      .then(html => {\n        // now let's send the rendered html to the client\n        res.send(html)\n      })\n      .catch(err => {\n        // oops, we had an error while rendering the page\n\n        // we were told to redirect to another URL\n        if (err.url) {\n          if (err.code) {\n            res.redirect(err.code, err.url)\n          }\n          else {\n            res.redirect(err.url)\n          }\n        }\n        // hmm, Vue Router could not find the requested route\n        else if (err.code === 404) {\n          // Should reach here only if no \"catch-all\" route\n          // is defined in /src/routes\n          res.status(404).send('404 | Page Not Found')\n        }\n        // well, we treat any other code as error;\n        // if we're in dev mode, then we can use Quasar CLI\n        // to display a nice error page that contains the stack\n        // and other useful information\n        else if (process.env.DEV) {\n          // serve.error is available on dev only\n          serve.error({ err, req, res })\n        }\n        // we're in production, so we should have another method\n        // to display something to the client when we encounter an error\n        // (for security reasons, it's not ok to display the same wealth\n        // of information as we do in development)\n        else {\n          // Render Error Page on production or\n          // create a route (/src/routes) for an error page and redirect to it\n          res.status(500).send('500 | Internal Server Error')\n\n          if (process.env.DEBUGGING) {\n            console.error(err.stack)\n          }\n        }\n      })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: QSplitter with Pixel Model\nDESCRIPTION: Implementation using pixels instead of percentage for the model unit.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Model in pixels\" file=\"PixelModel\" />\n```\n\n----------------------------------------\n\nTITLE: Using SCSS in Vue Components\nDESCRIPTION: Example of implementing SCSS syntax in a Vue component's style block using the lang=\"scss\" attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/css-preprocessors.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Notice lang=\"scss\" -->\n<style lang=\"scss\">\ndiv {\n  color: #444;\n  background-color: #dadada;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Migrating from Color Utils getBrand/setBrand to getCssVar/setCssVar\nDESCRIPTION: Shows the transition from the deprecated getBrand and setBrand color utility methods to the new getCssVar and setCssVar methods in Quasar v2.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// OLD, DEPRECATED v1 way:\nimport { colors } from 'quasar'\n\nconst { getBrand, setBrand } = colors\nconst primaryColor = getBrand('primary')\nsetBrand('primary', '#f3c')\n\n// NEW v2 way:\nimport { getCssVar, setCssVar } from 'quasar'\n\nconst primaryColor = getCssVar('primary')\nsetCssVar('primary', '#f3c')\n```\n\n----------------------------------------\n\nTITLE: Implementing Row/Column Break for Flexbox in Sass\nDESCRIPTION: CSS classes that force elements to create row or column breaks in flex layouts. These are particularly useful when you need to control the wrapping behavior in flex containers without using no-wrap.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flexbox-patterns.md#2025-04-16_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n.flex-break\n  flex: 1 0 100% !important\n.row\n  .flex-break\n    height: 0 !important\n.column\n  .flex-break\n    width: 0 !important\n```\n\n----------------------------------------\n\nTITLE: Starting SSR Development Server in Quasar\nDESCRIPTION: Commands to start the development server in SSR mode using Quasar CLI. Provides both short and long form syntax options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m ssr\n\n# ..or the longer form:\n$ quasar dev --mode ssr\n```\n\n----------------------------------------\n\nTITLE: Running Quasar Development Commands for PWA\nDESCRIPTION: Terminal commands for running Quasar in development mode, showing both PWA and SPA mode options. Use SPA mode when not working with Service Worker configurations to avoid caching issues.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/hmr-for-dev.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m spa\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m pwa\n```\n\n----------------------------------------\n\nTITLE: Defining PWA Environment Types in TypeScript\nDESCRIPTION: This snippet creates a TypeScript declaration file for PWA environment variables. It extends the NodeJS.ProcessEnv interface to include PWA-specific environment variables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/pwa-with-typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\n\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    SERVICE_WORKER_FILE: string;\n    PWA_FALLBACK_HTML: string;\n    PWA_SERVICE_WORKER_REGEX: string;\n    // ...and your own\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Quasar SPA for Production\nDESCRIPTION: Command to build a production-ready bundle of Quasar SPA application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/deploying.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build\n```\n\n----------------------------------------\n\nTITLE: Defining PWA Environment Types in TypeScript\nDESCRIPTION: TypeScript declaration file that defines process environment types for PWA configuration, including service worker file paths and fallback HTML settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/pwa-with-typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\n\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    SERVICE_WORKER_FILE: string;\n    PWA_FALLBACK_HTML: string;\n    PWA_SERVICE_WORKER_REGEX: string;\n    // ...and your own\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing useRenderCache in Vue Setup\nDESCRIPTION: Basic setup and import of useRenderCache composable, showing the available methods returned by the function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-render-cache.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRenderCache } from 'quasar'\n\nsetup () {\n  const {\n    getCache,\n    setCache,\n    hasCache,\n    clearCache\n  } = useRenderCache()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up RTL Support in Quasar UMD\nDESCRIPTION: HTML setup for enabling RTL support in Quasar UMD builds by including the RTL CSS file and an RTL language pack (Hebrew in this example), then configuring the language.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    ...\n    <!-- Replace \"2.0.0\" (below) with your Quasar version. -->\n    <link href=\"https://cdn.jsdelivr.net/npm/quasar@2/dist/quasar.rtl.prod.css\" rel=\"stylesheet\" type=\"text/css\">\n  </head>\n\n  <body>\n    ...\n\n    <!--\n      We also need an RTL Quasar language pack; let's take Hebrew as an example;\n      include this after Quasar JS tag;\n      Replace \"2.0.0\" (below) with your Quasar version.\n    -->\n    <script src=\"https://cdn.jsdelivr.net/npm/quasar@2/dist/lang/he.umd.prod.js\"></script>\n    <script>\n      Quasar.Lang.set(Quasar.Lang.he)\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Subdomain with Tunnelmole\nDESCRIPTION: Command to start Tunnelmole with a custom subdomain, useful when self-hosting or using an API key.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80 as mysubdomain.tunnelmole.com\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in Quasar Config\nDESCRIPTION: Example showing how to define environment variables in the quasar.config file and accessing them in the application code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  env: {\n    FOO: 'hello',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QToggle with Custom Toggle Order in Vue\nDESCRIPTION: Demonstrates how to customize the toggle order using the toggle-order prop in QToggle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Toggle order\" file=\"ToggleOrder\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Background Events in Quasar Component\nDESCRIPTION: Vue component setup that listens for background script events using Quasar's BEX API. Demonstrates proper event listener setup and cleanup using Vue lifecycle hooks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/background-script.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\nimport { onBeforeUnmount } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    // Our function which receives the URL sent by the background script.\n    function doOnTabOpened (url) {\n      console.log('New Browser Tab Openend: ', url)\n    }\n\n    // Add our listener\n    $q.bex.on('bex.tab.opened', doOnTabOpened)\n\n    // Don't forget to clean it up\n    onBeforeUnmount(() => {\n      $q.bex.off('bex.tab.opened', doOnTabOpened)\n    })\n\n    return {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QResponsive with Maximum Height\nDESCRIPTION: Demonstrates how to apply maximum height constraints to QResponsive component using CSS classes or inline styles.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Installing @intlify/unplugin-vue-i18n for SFC Support\nDESCRIPTION: Commands for installing the @intlify/unplugin-vue-i18n package using different package managers to enable <i18n> tags in Single File Components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/app-internationalization.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @intlify/unplugin-vue-i18n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev @intlify/unplugin-vue-i18n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -D @intlify/unplugin-vue-i18n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add --dev @intlify/unplugin-vue-i18n\n```\n\n----------------------------------------\n\nTITLE: Basic Material Ripple Usage in Vue\nDESCRIPTION: Demonstrates basic implementation of material ripple effect in Vue components. Requires CSS position:relative or relative-position class on the target element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/material-ripples.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Module Preload Polyfill in Quasar Config\nDESCRIPTION: Configuration for enabling/disabling the module preload polyfill in the quasar.config file. Controls whether the module preload polyfill is included in the build.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/browser-compatibility.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  polyfillModulePreload: false\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Cookie Inside a Vue Component\nDESCRIPTION: Shows how to set a cookie value inside a Vue component using the Composition API with useQuasar, with support for additional configuration options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.cookies.set('cookie_name', cookie_value)\n  // or pass in options also:\n  $q.cookies.set('cookie_name', cookie_value, options)\n}\n```\n\n----------------------------------------\n\nTITLE: Date Equality Comparison in Quasar\nDESCRIPTION: Demonstrates how to compare two dates for equality using Quasar's isSameDate function. Supports optional unit parameter for partial comparison of date components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst date1 = new Date(2017, 2, 5)\nconst date2 = new Date(2017, 3, 8)\nconst unit = 'year'\n\nif (date.isSameDate(date1, date2, /* optional */ unit)) {\n  // true because date1 and date2's year is the same\n}\n```\n\n----------------------------------------\n\nTITLE: QToggle with Indeterminate State in Vue\nDESCRIPTION: Explains the usage of indeterminate state in QToggle, including the toggle-indeterminate prop.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Indeterminate state\" file=\"IndeterminateState\" />\n```\n\n----------------------------------------\n\nTITLE: Developing with SSR Mode in Quasar\nDESCRIPTION: Command to start development with SSR mode. This will automatically add SSR mode if it doesn't exist in the project yet, then launch the development server.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m ssr\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Dev Server\nDESCRIPTION: Command to start the Quasar development server before creating a tunnel.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev\n```\n\n----------------------------------------\n\nTITLE: Scroll Position Management\nDESCRIPTION: Demonstrates scroll position handling functionality\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Scroll Position\" file=\"ScrollPosition\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Router Path Configuration Example\nDESCRIPTION: Example of defining a Vue Router route configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  path: '/one',\n  component: PageOne\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useHydration Composable in Quasar\nDESCRIPTION: This code snippet provides the TypeScript function signature for the useHydration composable. It returns an object with an isHydrated property of type Ref<boolean>.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-hydration.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useHydration(): {\n  isHydrated: Ref<boolean>;\n};\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Stepper\nDESCRIPTION: Example showing forced dark mode implementation\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Force dark mode\" file=\"Dark\" />\n```\n\n----------------------------------------\n\nTITLE: Generated Boot File Template\nDESCRIPTION: Default template created when generating a new boot file using Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\n// \"async\" is optional!\n// remove it if you don't need it\nexport default defineBoot(async ({ /* app, router, store */ }) => {\n  // something to do\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Listening in Quasar SSR\nDESCRIPTION: This code snippet demonstrates how to configure the Quasar SSR server to listen on a specific port. It uses the defineSsrListen function to set up the server and log the listening port in production mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-webserver.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  const server = devHttpsApp || app;\n  return server.listen(port, () => {\n    if (process.env.PROD) {\n      console.log('Server listening at port ' + port);\n    }\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Config for UI in quasar.config\nDESCRIPTION: Demonstrates how to extend or modify the Webpack configuration for the UI files in the /src directory of a Quasar BEX project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendWebpack(webpackCfg) { ... },\n  chainWebpack(webpackChain) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar Development Commands for Different Modes\nDESCRIPTION: Various development commands for different application modes including SPA, SSR, PWA, Mobile, and Electron apps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Developing a SPA\n$ quasar dev\n# ...or\n$ quasar dev -m spa\n\n# Developing for SSR\n$ quasar dev -m ssr\n\n# Developing a PWA\n$ quasar dev -m pwa\n\n# Developing a BEX for production\n$ quasar dev -m bex\n\n# Developing a Mobile App (through Cordova)\n$ quasar dev -m cordova -T [android|ios]\n# or the short form:\n$ quasar dev -m [android|ios]\n\n# Developing an Electron App\n$ quasar dev -m electron\n\n# Developing a Browser Extension (BEX)\n$ quasar dev -m bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: QExpansionItem Behavioral Modes\nDESCRIPTION: Shows different behavioral modes including icon-only toggle, accordion mode, and popup mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/expansion-item.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Toggle by expand icon only\" file=\"IconToggle\" />\n\n<DocExample title=\"Accordion mode\" file=\"Accordion\" />\n\n<DocExample title=\"Popup mode\" file=\"Popup\" />\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage Examples in Quasar\nDESCRIPTION: Shows correct and incorrect ways to access environment variables in a Quasar application, highlighting common mistakes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { FOO } = process.env // ❌ It doesn't allow destructuring or similar\nprocess.env.FOO             // ✅ It can only replace direct usage like this\n\nfunction getEnv(name) {\n  return process.env[name] // ❌ It can't analyze dynamic usage\n}\n\nconsole.log(process)     // ❌\nconsole.log(process.env) // ❌\n// If you want to see a list of available env variables,\n// you can log the object you are passing to `build > env` inside the `/quasar.config` file\n\nconsole.log(process.env.FOO) // ✅\nconsole.log(process.env.foo) // ❌ Case sensitive\nconsole.log(process.env.F0O) // ❌ Typo in the variable name (middle o is 0(zero))\n```\n\n----------------------------------------\n\nTITLE: Vue Router Redirect Examples in Quasar Boot Files\nDESCRIPTION: Examples of different ways to use the redirect() method with Vue Router locations as strings or objects, and with direct URLs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Examples for redirect() with a Vue Router location:\nredirect('/1') // Vue Router location as String\nredirect({ path: '/1' }) // Vue Router location as Object\n\n// Example for redirect() with a URL:\nredirect('https://quasar.dev')\n```\n\n----------------------------------------\n\nTITLE: Embedded QSplitter\nDESCRIPTION: Example showing how to embed one QSplitter within another QSplitter's slots.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Embedded\" file=\"Embedded\" />\n```\n\n----------------------------------------\n\nTITLE: Combined Vertical and Horizontal Scrolling\nDESCRIPTION: Shows how to implement both vertical and horizontal scrolling simultaneously\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Vertical and horizontal content\" file=\"VertHoriz\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing BEX Bridge in Background Script\nDESCRIPTION: This snippet shows how to import and create the BEX bridge in a background script. It's crucial to create the bridge only once in a single background script for proper functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/background'\n\nconst bridge = createBridge({ debug: false })\n```\n\n----------------------------------------\n\nTITLE: Developing Electron Apps with Quasar CLI\nDESCRIPTION: Commands for starting the development environment for Electron apps using Quasar CLI. Includes options for passing extra parameters to the Electron executable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m electron\n\n# ..or the longer form:\n$ quasar dev --mode electron\n\n# passing extra parameters and/or options to\n# underlying \"electron\" executable:\n$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n# when on Windows and using Powershell:\n$ quasar dev -m electron '--' --no-sandbox --disable-setuid-sandbox\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables for Windows\nDESCRIPTION: Commands to configure Android SDK environment variables and PATH on Windows systems. Sets ANDROID_HOME and ANDROID_SDK_ROOT paths and adds Android tools to system PATH.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsetx ANDROID_HOME \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx ANDROID_SDK_ROOT \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx path \"%path%;%ANDROID_SDK_ROOT%\\tools;%ANDROID_SDK_ROOT%\\platform-tools\"\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Quasar App Extension After Dependency Changes\nDESCRIPTION: These bash commands demonstrate the process of reinstalling a Quasar App Extension after making changes to its dependencies. It involves uninstalling and then re-invoking the extension in the test app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/app/extension/folder\n\n# run yarn/npm command (install/uninstall, etc)\n\n# then\n\n$ cd /path/to/quasar/testing/app/folder\n\n# Uninstall the app ext\n$ quasar ext uninvoke my-ext\n\n# Re-install the app ext\n$ quasar ext invoke my-ext\n```\n\n----------------------------------------\n\nTITLE: Installing Electron Mode in Quasar\nDESCRIPTION: Command to add Electron mode to a Quasar project. This installs necessary Electron packages and creates the /src-electron folder structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add electron\n```\n\n----------------------------------------\n\nTITLE: Building BEX for Production\nDESCRIPTION: Commands to build a Browser Extension for production using Quasar CLI. Creates a distribution package for either Chrome or Firefox based on the specified target.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m bex -T [chrome|firefox]\n\n# ..or the longer form:\n$ quasar build --mode bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: QToggle with Labels in Vue\nDESCRIPTION: Shows how to use QToggle component with labels for better user understanding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With labels\" file=\"Labels\" />\n```\n\n----------------------------------------\n\nTITLE: Building PWA for Production with Quasar CLI\nDESCRIPTION: Commands for creating a production build in PWA mode using Quasar CLI. Shows both short and long form syntax options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m pwa\n\n# ..or the longer form:\n$ quasar build --mode pwa\n```\n\n----------------------------------------\n\nTITLE: Displaying Quasar CLI Help and Command List\nDESCRIPTION: Shows the available Quasar CLI commands and options, including dev, build, prepare, clean, new, mode, inspect, ext, run, describe, info, and help. It also mentions additional commands supplied by global @quasar/cli installation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar -h\n\n  Example usage\n    $ quasar <command> <options>\n\n  Help for a command\n    $ quasar <command> --help\n    $ quasar <command> -h\n\n  Options\n    --version, -v Print Quasar App CLI version\n\n  Commands\n    dev, d        Start a dev server for your App\n    build, b      Build your app for production\n    prepare, p    Prepare the app for linting, type-checking, IDE integration, etc.\n    clean, c      Clean dev/build cache, /dist folder & entry points\n    new, n        Quickly scaffold page/layout/component/... vue file\n    mode, m       Add/remove Quasar Modes for your App\n    inspect       Inspect Vite/esbuild configs used under the hood\n                    - keeps into account your quasar.config file\n                      and your installed App Extensions\n    ext, e        Manage Quasar App Extensions\n    run, r        Run specific command provided by an installed\n                    Quasar App Extension\n    describe      Describe a Quasar API (component)\n    info, i       Display info about your machine and your App\n    help, h       Displays this message\n\n  If the specified command is not found, then \"quasar run\"\n  will be executed with the provided arguments.\n\n  Commands supplied by @quasar/cli global installation:\n\n    upgrade       Check (and optionally) upgrade Quasar packages\n                    from a Quasar project folder\n    serve         Create an ad-hoc server on App's distributables\n```\n\n----------------------------------------\n\nTITLE: Formatting Files in Quasar Project (Bash)\nDESCRIPTION: Commands to format the project files using either Yarn or npm, if Prettier is configured in the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-webpack-4/BASE/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n# or\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Registering Quasar UI Component via Boot File\nDESCRIPTION: Creates and registers a boot file to import and use the component globally in a Quasar CLI project. This approach makes the component available throughout the application without needing to import it in individual files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport Plugin from 'quasar-ui-<%= name %>'\nimport 'quasar-ui-<%= name %>/dist/index.css'\n\nVue.use(Plugin)\n```\n\n----------------------------------------\n\nTITLE: Skip Package Building in Capacitor\nDESCRIPTION: Command to skip the Gradle/xcodebuild step and only populate the /src-capacitor/www folder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android] --skip-pkg\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Plugin Inside Vue Component\nDESCRIPTION: Example showing how to configure the Screen plugin within a Vue component by changing window breakpoints using the setSizes method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.screen.setSizes({ sm: 300, md: 500, lg: 1000, xl: 2000 })\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal-only Column Gutters in Quasar\nDESCRIPTION: Example demonstrating horizontal-only column gutters using q-col-gutter-x-* classes, which apply horizontal spacing between column elements while maintaining no vertical spacing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Horizontal only q-col-gutter\" file=\"ColGutterHorizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Get Days in Month in Quasar\nDESCRIPTION: Shows how to get the number of days in the month for a specified date using Quasar's daysInMonth function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date()\nconst days = date.daysInMonth(newDate) // e.g. 30\n```\n\n----------------------------------------\n\nTITLE: Redirect Examples with Vue Router Locations\nDESCRIPTION: Examples showing different ways to use the redirect() method with Vue Router locations and URLs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Examples for redirect() with a Vue Router location:\nredirect('/1') // Vue Router location as String\nredirect({ path: '/1' }) // Vue Router location as Object\n\n// Example for redirect() with a URL:\nredirect('https://quasar.dev')\n```\n\n----------------------------------------\n\nTITLE: Swipeable and Infinite QTabPanels in Vue\nDESCRIPTION: Demonstrates how to create swipeable and infinite tab panels, allowing users to navigate through panels using swipe gestures or mouse actions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Swipeable and infinite\" file=\"Swipeable\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardcoded Language Pack in Quasar\nDESCRIPTION: Examples of setting up a hardcoded language pack in different Quasar environments including CLI, Vite Plugin, and UMD.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-language-packs.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nframework: {\n  lang: 'de'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Quasar } from 'quasar'\nimport langDe from 'quasar/lang/de'\napp.use(Quasar, {\n  lang: langDe\n})\n```\n\n----------------------------------------\n\nTITLE: QCheckbox with QOptionGroup\nDESCRIPTION: Demonstrates using QCheckbox within QOptionGroup for simplified group checkbox management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/checkbox.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Usage with QOptionGroup\" file=\"OptionGroup\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Row Break in HTML\nDESCRIPTION: HTML structure demonstrating how to implement row breaks in a flex container using the flex-break class. Shows how to create multiple rows within a single flex container.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flexbox-patterns.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div>Col 1 / Row 1</div>\n  <div>Col 2 / Row 1</div>\n  <div class=\"flex-break\"></div>\n  <div>Col 1 / Row 2</div>\n  <div class=\"flex-break q-py-md\"></div>\n  <div>Col 1 / Row 3</div>\n  <div>Col 2 / Row 3</div>\n  <div>Col 3 / Row 3</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic QKnob Example\nDESCRIPTION: Basic usage of the QKnob component showing core functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Binding with Static Assets\nDESCRIPTION: Example of binding an image source to a variable in a Vue component. When using dynamic binding, the referenced assets must come from the /public folder as Webpack cannot process them at compile time.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-assets.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- imageSrc MUST reference a file from /public -->\n  <img :src=\"imageSrc\">\n</template>\n\n<script>\nexport default {\n  setup () {\n    return {\n      /*\n        Referencing /public.\n        Notice string doesn't start with a slash. (/)\n      */\n      imageSrc: 'logo.png'\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using SCSS Variables in Vue Components\nDESCRIPTION: Example showing how to use Quasar's built-in SCSS variables like $red-1 and $grey-5 within a Vue component's style block using SCSS syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/sass-scss-variables/sass-scss-variables.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style lang=\"scss\">\ndiv {\n  color: $red-1;\n  background-color: $grey-5;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Formatting Files in Quasar Projects\nDESCRIPTION: Commands for running code formatters to ensure consistent code style in the Quasar project using various package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-webpack/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run format\nyarn format\npnpm format\nbun format\n```\n\n----------------------------------------\n\nTITLE: Standard Size Variations\nDESCRIPTION: Demonstration of different standard sizes available for the rating component\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Standard sizes\" file=\"StandardSizes\" />\n```\n\n----------------------------------------\n\nTITLE: Quasar Page Component Template\nDESCRIPTION: Basic template structure for Quasar page components\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <q-page>\n    ...page content...\n  </q-page>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Multiple Client Nodes with QNoSsr\nDESCRIPTION: Example showing how to prevent multiple elements from being rendered on the server side\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr>\n  <div>This won't be rendered on server.</div>\n  <div>This won't either.</div>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: Using rollup-plugin-copy in Quasar Config\nDESCRIPTION: Demonstrates how to use the rollup-plugin-copy plugin in a Quasar project to copy static or external files during the build process. This example shows copying a Firebase messaging service worker file to the SPA build destination.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-vite.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  vitePlugins: [\n    [\n      'rollup-plugin-copy', {\n        targets: [\n          {\n            src: 'config/firebase/firebase-messaging-sw.js',\n            dest: 'dest/spa'\n          }\n        ]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server for Cordova\nDESCRIPTION: Commands to start the Quasar development server for Cordova app development, including options for passing extra parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m cordova -T [android|ios]\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar dev -m ios -- some params --and options --here\n# when on Windows and using PowerShell:\n$ quasar dev -m ios '--' some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pinia Store with Quasar CLI\nDESCRIPTION: Command to generate a new Pinia store using Quasar CLI. The command creates the store folder structure and boilerplate code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/state-management-with-pinia.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new store <store_name> [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Quasar Dev Command Configuration\nDESCRIPTION: Detailed configuration for the development server including port and hostname settings in quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  host: '...',\n  port: ...\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar CLI Boot File Generation\nDESCRIPTION: Command to generate a new boot file using Quasar CLI with optional TypeScript support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new boot <name> [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Managing Persistent Configuration in Quasar App Extension Install Script\nDESCRIPTION: Methods for getting, setting, and merging the internal persistent configuration of the App Extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @return {object} cfg\n */\napi.getPersistentConf()\n\n/**\n * @param {object} cfg\n */\napi.setPersistentConf({\n  // ....\n})\n\n/**\n * @param {object} cfg\n */\napi.mergePersistentConf({\n  // ....\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Example of exportFile in Quasar\nDESCRIPTION: Shows a simple example of using exportFile to download a text file. The function returns a boolean indicating if the browser allowed the download or an error message if it failed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exportFile } from 'quasar'\n\nconst status = exportFile('important.txt', 'some content')\n\nif (status === true) {\n  // browser allowed it\n}\nelse {\n  // browser denied it\n  console.log('Error: ' + status)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Route in Vue Router\nDESCRIPTION: Example configuration for catching 404 errors using Vue Router's catch-all route pattern.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of route for catching 404 with Vue Router\n{ path: '/:catchAll(.*)*', component: () => import('pages/Error404.vue') }\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Component Usage\nDESCRIPTION: Demonstrates the basic implementation of QTimeline component showing chronological events with default layout\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/timeline.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Linking Quasar App Extension for Development\nDESCRIPTION: These bash commands show how to use yarn link to create a symbolic link for easier development of a Quasar App Extension. This allows for testing changes without repeatedly uninstalling and reinstalling the extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /path/to/app/extension/folder\n\n# we register the extension through yarn\n$ yarn link\n\n$ cd /path/to/quasar/testing/app/folder\n\n$ yarn link quasar-app-extension-<ext-id>\n# in our demo case, it's this:\n# $ yarn link quasar-app-extension-my-ext\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Components\nDESCRIPTION: Commands for generating new components, pages, layouts, and store modules with support for JavaScript and TypeScript.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new -h\n\n  Description\n    Quickly scaffold files.\n\n  Usage\n    $ quasar new <p|page> [-f <js|ts>] <page_file_name>\n    $ quasar new <l|layout> [-f <js|ts>] <layout_file_name>\n    $ quasar new <c|component> [-f <js|ts>] <component_file_name>\n    $ quasar new <b|boot> [-f <js|ts>] <boot_name>\n    $ quasar new <s|store> [-f <js|ts>] <store_module_name>\n    $ quasar new ssrmiddleware [-f <js|ts>] <middleware_name>\n```\n\n----------------------------------------\n\nTITLE: Creating a Quasar App Extension with Package Managers\nDESCRIPTION: Commands to initialize a new Quasar App Extension using different package managers including Yarn, NPM, PNPM, and Bun (experimental). Each command starts the Quasar creation wizard where you'll select the AppExtension option.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create quasar\n# then pick the AppExtension option\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init quasar@latest\n# then pick the AppExtension option\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create quasar@latest\n# then pick the AppExtension option\n```\n\nLANGUAGE: bash\nCODE:\n```\n# experimental support\n$ bun create quasar@latest\n# then pick the AppExtension option\n```\n\n----------------------------------------\n\nTITLE: Formatting File Sizes with humanStorageSize in Quasar\nDESCRIPTION: Demonstrates the humanStorageSize formatter which converts byte values to human-readable storage size strings. Shows how to use the optional decimals parameter introduced in Quasar v2.15.3.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format } from 'quasar'\nconst { humanStorageSize } = format\n\n// humanStorageSize(value, decimals = 1)\n// \"decimals\" param requires Quasar v2.15.3+\n\nconsole.log( humanStorageSize(13087) )\n// 12.8KB\n\nconsole.log( humanStorageSize(1024 * 1024 * 2.25, 3) )\n// 2.250MB\n```\n\n----------------------------------------\n\nTITLE: Starting Electron Development Server\nDESCRIPTION: Commands to start the Quasar development server in Electron mode, including examples of passing additional parameters to the Electron executable. Includes special syntax for Windows Powershell users.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m electron\n\n# passing extra parameters and/or options to\n# underlying \"electron\" executable:\n$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n# when on Windows and using Powershell:\n$ quasar dev -m electron '--' --no-sandbox --disable-setuid-sandbox\n```\n\n----------------------------------------\n\nTITLE: Generating Electron App Icons with Icon Genie CLI in Bash\nDESCRIPTION: This command uses the Icon Genie CLI to automatically generate and place the necessary app icons for an Electron-based Quasar application. It takes a source icon file as input and creates optimized versions for different platforms and sizes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/app-icons-electron.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m electron -i /path/to/source/icon.png\n```\n\n----------------------------------------\n\nTITLE: Basic QSplitter Implementation\nDESCRIPTION: Basic implementation of QSplitter component showing vertical splitting functionality. Contains the required before and after slots.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Starting BEX Development with Quasar CLI\nDESCRIPTION: Command to initiate Browser Extension development using Quasar CLI. It supports both Chrome and Firefox targets.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m bex -T [chrome|firefox]\n\n# ..or the longer form:\n$ quasar dev --mode bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: Programmatically Starting Tunnelmole in JavaScript\nDESCRIPTION: JavaScript code example showing how to programmatically start a Tunnelmole tunnel by specifying a port and optional custom domain.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst url = await tunnelmole({\n  port: 80\n  // Optionally, add \"domain: 'mysubdomain.tunnelmole.com'\" if using a custom subdomain\n})\n// url = https://idsq6j-ip-157-211-195-169.tunnelmole.com\n```\n\n----------------------------------------\n\nTITLE: Rendering DonatingButtons Component in Vue\nDESCRIPTION: Renders the DonatingButtons component that displays donation options for supporting Quasar Framework development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/sponsors-and-backers/sponsors-and-backers.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DonatingButtons />\n```\n\n----------------------------------------\n\nTITLE: Exporting QTable Data to CSV in Vue\nDESCRIPTION: Shows how to export QTable data to a CSV file using Quasar's exportFile utility, including a basic CSV encoding implementation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_24\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Export to csv\" file=\"ExportCsv\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transitions to QTooltip in Vue\nDESCRIPTION: Showcases how to apply custom transitions to the QTooltip component when it appears and disappears.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom transition\" file=\"CustomTransition\" />\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Storage Operations\nDESCRIPTION: Example of implementing error handling when setting values in storage to catch potential Web Storage API errors like quota exceeded.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/web-storage.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  $q.localStorage.set(key, value)\n} catch (e) {\n  // data wasn't successfully saved due to\n  // a Web Storage API error\n}\n```\n\n----------------------------------------\n\nTITLE: Border Related CSS Classes in Quasar\nDESCRIPTION: CSS classes for controlling border properties, including removal of borders, border radius, box shadows, and outlines.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/other-helper-classes.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.no-border\n.no-border-radius\n.no-box-shadow\n.no-outline\n.rounded-borders\n.border-radius-inherit\n```\n\n----------------------------------------\n\nTITLE: Spring Boot File Upload Controller\nDESCRIPTION: Spring Boot REST controller implementation for handling file uploads with MultipartFile.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@RestController\npublic class UploadRest {\n\t@PostMapping(\"/upload\")\n\tpublic void handleFileUpload(@RequestPart(value = \"file\") final MultipartFile uploadfile) throws IOException {\n\t\tsaveUploadedFiles(uploadfile);\n\t}\n\n\tprivate String saveUploadedFiles(final MultipartFile file) throws IOException {\n\t\tfinal byte[] bytes = file.getBytes();\n\t\tfinal Path path = Paths.get(\"YOUR_ABSOLUTE_PATH\" + file.getOriginalFilename());\n\t\tFiles.write(path, bytes);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: IDE Build Command for Capacitor\nDESCRIPTION: Command to prepare for manual building using IDE (Android Studio / Xcode) instead of terminal build.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android] --ide\n```\n\n----------------------------------------\n\nTITLE: Using Multiple useInterval Instances in Quasar Component\nDESCRIPTION: This snippet shows how to use multiple useInterval instances in a single component by renaming the returned functions to avoid naming conflicts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-interval.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  registerInterval: registerFirstInterval,\n  removeInterval: removeFirstInterval\n} = useInterval()\n\nconst {\n  registerInterval: registerSecondInterval,\n  removeInterval: removeSecondInterval\n} = useInterval()\n```\n\n----------------------------------------\n\nTITLE: QToggle in Native Form Submit\nDESCRIPTION: Illustrates the use of QToggle in native form submissions, emphasizing the importance of the name property.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Inhibiting Touch Repeat in Nested Elements in Vue\nDESCRIPTION: Illustrates how to prevent the v-touch-repeat directive from applying to inner content by stopping event propagation on touchstart, mousedown, and keydown events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-repeat.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-repeat.mouse.enter=\"userHasHold\">\n  <!-- ...content -->\n  <div @touchstart.stop @mousedown.stop @keydown.stop>\n    <!--\n      TouchRepeat will not apply here because\n      we are calling stopPropagation() on touchstart,\n      mousedown and keydown events\n    -->\n  </div>\n  <!-- ...content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Linear Progress Basic Examples and Usage\nDESCRIPTION: Core documentation structure for the QLinearProgress component, including related components and introduction text.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/linear-progress.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Linear Progress\ndesc: The QLinearProgress Vue component displays a colored loading bar. The bar can either have a determinate progress or an indeterminate animation.\nkeys: QLinearProgress\nexamples: QLinearProgress\nrelated:\n  - /vue-components/circular-progress\n  - /vue-components/inner-loading\n  - /vue-components/spinners\n  - /quasar-plugins/loading\n  - /quasar-plugins/loading-bar\n---\n```\n\n----------------------------------------\n\nTITLE: Disable and Readonly States\nDESCRIPTION: Shows how to implement disabled and readonly states in QBtnToggle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-toggle.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Disable and readonly\" file=\"DisableReadonly\" />\n```\n\n----------------------------------------\n\nTITLE: JSON with Removal and Addition Indicators\nDESCRIPTION: JSON example showing how to indicate changes with removal and addition markers. This demonstrates how documentation can visually represent changes to configuration files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min\": 0,\n  \"super\": false, [[! rem]]\n  \"super\": true, [[! add]]\n  \"max\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: QPopupEdit Component Usage - Old vs New Syntax\nDESCRIPTION: Comparison between old and new syntax for QPopupEdit component, showing the transition to using v-slot and scope.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<q-popup-edit\n  content-class=\"bg-primary text-white\"\n  buttons\n  color=\"white\"\n  v-model=\"myModel\"\n>\n  <q-input\n    type=\"textarea\"\n    dark\n    color=\"white\"\n    v-model=\"myModel\"\n    autofocus\n  />\n</q-popup-edit>\n```\n\nLANGUAGE: html\nCODE:\n```\n<q-popup-edit\n  class=\"bg-primary text-white\"\n  buttons\n  color=\"white\"\n  v-model=\"myModel\"\n  v-slot=\"scope\"\n>\n  <q-input\n    type=\"textarea\"\n    dark\n    color=\"white\"\n    v-model=\"scope.value\"\n    autofocus\n    @keyup.enter=\"scope.set\"\n  />\n</q-popup-edit>\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Delay Configuration\nDESCRIPTION: Example of implementing delay before scrollbar disappears\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Delay\" file=\"Delay\" />\n```\n\n----------------------------------------\n\nTITLE: Children Styling Approach with Quasar Gutter Classes\nDESCRIPTION: Example demonstrating the proper approach to styling child elements when using q-col-gutter-* classes, which require additional nested elements to apply styling correctly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Children styling\" file=\"ChildrenStyling\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Options in Quasar Config File\nDESCRIPTION: This snippet shows the structure of the 'cordova' object in the quasar.config file. It includes options for version, description, androidVersionCode, and functions for customizing Cordova build parameters and output folders.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/configuring-cordova.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncordova: {\n  /** If not present, will look for `package.json > version` */\n  version?: string;\n  /** If not present, will look for `package.json > description` */\n  description?: string;\n  androidVersionCode?: string;\n  /**\n   * Enable Xcode modern build even if after considering iOS-Cordova issues.\n   * You can enable it if you know what you are doing,\n   *  for example if you want to specify the build type in your \"build.json\".\n   *\n   * @default false\n   */\n  noIosLegacyBuildFlag?: boolean;\n\n  /**\n   * Function to return the Cordova build command parameters that\n   * will be executed after the UI has compiled.\n   *\n   * @param context.debug - True if in debug mode\n   * @param context.target - The target platform (ios/android)\n   * @returns Array of strings (command parameters)\n   *\n   * @default: [ 'build', '--debug'/'--release', '--device', 'ios'/'android' ]\n   * @example: ({ isDebug, target }) => [ 'build', `--${isDebug ? 'debug' : 'release'}`, '--device', 'target' ]\n   */\n  getCordovaBuildParams?: (context: { debug: boolean; target: 'ios' | 'android' }) => string[];\n\n  /**\n   * Function to return the Cordova output folder after the \"cordova build\"\n   * command is executed.\n   * The relative to /src-cordova path is used to copy the Cordova output\n   * to the /dist folder.\n   *\n   * @param context.debug - True if in debug mode\n   * @param context.target - The target platform (ios/android)\n   * @returns string | string[] | undefined - (relative path(s) from /src-cordova)\n   *\n   * @default ios: platforms/ios/build/... and android: platforms/android/app/build/outputs\n   * @example:\n   *    ({ isDebug, target }) => {\n   *       return target === 'ios'\n   *          ? `platforms/ios/build/${isDebug ? 'Debug' : 'Release'}-iphoneos\n   *          : 'platforms/android/app/build/outputs'\n   *    }\n   * @example: (when interested in only one platform, leaving the other to the default value)\n   *    ({ isDebug, target }) => {\n   *       if (target === 'ios') {\n   *          return `platforms/ios/build/${isDebug ? 'Debug' : 'Release'}-iphoneos`\n   *       }\n   *    }\n   * @example: ()\n   *    ({ isDebug, target }) => {\n   *       if (target === 'ios') {\n   *          // try these two folders\n   *          return [ 'platforms/ios/build/device', 'platforms/ios/build/emulator' ]\n   *       }\n   *    }\n   */\n  getCordovaBuildOutputFolder?: (context: { debug: boolean; target: 'ios' | 'android' }) => string | string[] | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: QResponsive with QCardSection\nDESCRIPTION: Demonstrates QResponsive implementation with QCardSection to maintain aspect ratio.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Implementing afterBuild Hook in Quasar\nDESCRIPTION: Hook that runs after Quasar builds the app for production. Executes after the distributables folder is created and supports async/await or Promise returns.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napi.afterBuild((api, { quasarConf }) => {\n  // do something\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing SSR Context in Vue Components\nDESCRIPTION: Shows how to access ssrContext in Vue components using both Composition API and Options API approaches.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-context.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSSRContext } from 'vue'\n\nexport default {\n  // ...\n  setup () {\n    // we need to guard it and call it only on SSR server-side:\n    const ssrContext = process.env.SERVER ? useSSRContext() : null\n    // ...do something with it\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  created () { // can be any other Vue component lifecycle hook\n    this.ssrContext\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Route Configuration in Vue Router\nDESCRIPTION: Example of configuring routes with eager loading in routes.js\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/routing-with-layouts-and-pages.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport LandingPage from 'pages/Landing'\n\nconst routes = [\n  {\n    path: '/',\n    component: LandingPage\n  }\n]\n\nexport default routes\n```\n\n----------------------------------------\n\nTITLE: Standard QSlider Basic Implementation\nDESCRIPTION: Basic example showing standard horizontal slider implementation in Quasar Framework.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/slider.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Standard\" file=\"Standard\" />\n```\n\n----------------------------------------\n\nTITLE: QToggle with QOptionGroup in Vue\nDESCRIPTION: Demonstrates the usage of QToggle within QOptionGroup for simplified group management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Usage with QOptionGroup\" file=\"OptionGroup\" />\n```\n\n----------------------------------------\n\nTITLE: Using SCSS in Vue Components\nDESCRIPTION: Example of implementing SCSS styles within a Vue component using the style tag with lang=\"scss\" attribute. Shows the CSS-like SCSS syntax with brackets and semicolons.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/css-preprocessors.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Notice lang=\"scss\" -->\n<style lang=\"scss\">\ndiv {\n  color: #444;\n  background-color: #dadada;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Back Button Behavior in Quasar\nDESCRIPTION: Configuration options for handling the back button behavior in Capacitor-based Quasar applications. Allows controlling app exit behavior and back button management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/dialog.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      capacitor: {\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Dependencies for JavaScript Projects\nDESCRIPTION: Commands to install required ESLint dependencies using different package managers (Yarn, NPM, PNPM, Bun).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/linter.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @eslint/js eslint@9 eslint-plugin-vue globals vite-plugin-checker\n```\n\n----------------------------------------\n\nTITLE: Get Day of Week in Quasar\nDESCRIPTION: Demonstrates how to get the day number in week for a given date using Quasar's getDayOfWeek function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date(2017, 1, 9)\nconst day = date.getDayOfWeek(newDate) // `day` is 4\n```\n\n----------------------------------------\n\nTITLE: Generating PWA Icons using Icon Genie CLI\nDESCRIPTION: Command to generate PWA icons using Icon Genie CLI tool. Takes a source icon path as input and optionally accepts a background image path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/app-icons-pwa.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m pwa -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Generating Icons with Icon Genie CLI\nDESCRIPTION: Command to generate properly sized icons for Cordova using Icon Genie CLI. Requires a source icon file and optionally a background image.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/app-icons-cordova.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m cordova -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Node Class Name in Quasar Framework\nDESCRIPTION: This code snippet demonstrates how to configure a custom class name for global nodes in the Quasar framework. It involves editing the quasar.config file to add a globalNode configuration with a custom className property.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/global-node.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nframework: {\n  config: {\n    globalNode: {\n      className: 'my-class'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Maps in Quasar Webpack Project\nDESCRIPTION: Configuration for the quasar.config file to enable source maps for improved debugging experience in VS Code. This sets the Webpack devtool option to 'source-map' for maximum accuracy.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  // ...\n\n  // this is a configuration passed on to the underlying Webpack.\n  // No need to set this if you are using vite.\n  devtool: 'source-map'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Electron Preload Script\nDESCRIPTION: Preload script that exposes window control functions to the renderer thread through contextBridge.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { contextBridge } from 'electron'\nimport { BrowserWindow } from '@electron/remote'\n\ncontextBridge.exposeInMainWorld('myWindowAPI', {\n  minimize () {\n    BrowserWindow.getFocusedWindow().minimize()\n  },\n\n  toggleMaximize () {\n    const win = BrowserWindow.getFocusedWindow()\n\n    if (win.isMaximized()) {\n      win.unmaximize()\n    } else {\n      win.maximize()\n    }\n  },\n\n  close () {\n    BrowserWindow.getFocusedWindow().close()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Titled Quasar Configuration Example\nDESCRIPTION: Quasar configuration function with a title. This demonstrates how to add a descriptive title to code blocks in documentation, making it easier for readers to understand the purpose of the code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoints in Sass with Media Queries\nDESCRIPTION: Example of using Quasar's predefined breakpoint variables in Sass media queries. This snippet demonstrates how to apply styles specifically for extra small screens.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/breakpoints.md#2025-04-16_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n@media (max-width: $breakpoint-xs-max)\n  font-size: 10px\n```\n\n----------------------------------------\n\nTITLE: Fontawesome Pro NPM Registry Configuration\nDESCRIPTION: Shows how to configure .npmrc file with Fontawesome Pro token to access the private registry.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/installing-icon-libraries.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n@fortawesome:registry=https://npm.fontawesome.com/\n//npm.fontawesome.com/:_authToken=TOKENID\n```\n\n----------------------------------------\n\nTITLE: Implementing Electron Preload Script for Window Control\nDESCRIPTION: Preload script to expose window control functions (minimize, maximize, close) to the renderer thread.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { contextBridge } from 'electron'\nimport { BrowserWindow } from '@electron/remote'\n\ncontextBridge.exposeInMainWorld('myWindowAPI', {\n  minimize () {\n    BrowserWindow.getFocusedWindow().minimize()\n  },\n\n  toggleMaximize () {\n    const win = BrowserWindow.getFocusedWindow()\n\n    if (win.isMaximized()) {\n      win.unmaximize()\n    } else {\n      win.maximize()\n    }\n  },\n\n  close () {\n    BrowserWindow.getFocusedWindow().close()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Quasar\nDESCRIPTION: Example of package.json script configuration for running Quasar commands without global installation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quasar-cli.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// package.json\n\"scripts\": {\n  \"dev\": \"quasar dev\",\n  \"build\": \"quasar build\",\n  \"build:pwa\": \"quasar build -m pwa\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Router 4 Routes Configuration\nDESCRIPTION: Default routes configuration file showing the basic route structure including the main layout, index page, and 404 error handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/',\n    component: () => import('layouts/MainLayout.vue'),\n    children: [\n      { path: '', component: () => import('pages/Index.vue') }\n    ]\n  },\n\n  // Always leave this as last one,\n  // but you can also remove it\n  {\n    path: '/:catchAll(.*)*',\n    component: () => import('pages/Error404.vue')\n  }\n]\n\nexport default routes\n```\n\n----------------------------------------\n\nTITLE: Electron File Structure Overview\nDESCRIPTION: Details the key file structure and components of an Electron app including the main process (/src-electron/electron-main.js), renderer process (/src), and preload script (/src-electron/electron-preload.js).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/src                               # UI code (renderer thread)\n/src-electron/electron-main.js     # Main process code\n/src-electron/electron-preload.js  # Preload script for bridging\n```\n\n----------------------------------------\n\nTITLE: Loading Plugin Configuration\nDESCRIPTION: Example of securing the Loading plugin by enabling sanitization.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/security/dos-and-donts.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsanitize: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Scripts for BEX in quasar.config\nDESCRIPTION: Shows how to add extra scripts to be compiled and used in a Browser Extension using the quasar.config file, allowing for dynamic script loading.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbex: {\n  /**\n   * The list of extra scripts (js/ts) not in your bex manifest that you want to\n   * compile and use in your browser extension. Maybe dynamic use them?\n   *\n   * Each entry in the list should be a relative filename to /src-bex/\n   *\n   * @example [ 'my-script.ts', 'sub-folder/my-other-script.js' ]\n   */\n  extraScripts?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating App Icons with Icon Genie CLI for Quasar SPA\nDESCRIPTION: Command to quickly generate and place app icons using Icon Genie CLI. It consumes a source icon and automatically creates, scales, and positions the icons in appropriate directories.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/app-icons-spa.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m spa -i /path/to/source/icon.png\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Router Route in Quasar\nDESCRIPTION: Example of defining a Vue Router route in Quasar with a path and component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  path: '/one',\n  component: PageOne\n}\n```\n\n----------------------------------------\n\nTITLE: Message Slot Implementation\nDESCRIPTION: Example showing message slot usage with fixed height steps\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Message slot with fixed height steps\" file=\"MessageSlot\" />\n```\n\n----------------------------------------\n\nTITLE: PWA Manifest File Path Reference\nDESCRIPTION: The standard path location for the PWA manifest file in a Quasar application, which contains app resources, display name, icons, and splash screen configurations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/src-pwa/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Infer Date Format in Quasar\nDESCRIPTION: Shows how to infer the format of a date value using Quasar's inferDateFormat function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\ndate.inferDateFormat(new Date()) // 'date'\ndate.inferDateFormat(35346363) // 'number'\ndate.inferDateFormat('Mon Feb 05 2018 23:05:29') // string\n```\n\n----------------------------------------\n\nTITLE: Importing FlexPlaygroundDemo Component in Vue\nDESCRIPTION: This snippet imports the FlexPlaygroundDemo Vue component that provides the interactive playground functionality for the Flex Grid.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flex-playground/flex-playground.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport FlexPlaygroundDemo from './FlexPlaygroundDemo.vue'\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining the component documentation metadata including title, description, keys, examples and related components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/slide-transition.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Slide Transition\ndesc: The QSlideTransition Vue component slides the encapsulated element up or down, based on its visibility. Works alongside v-show and v-if.\nkeys: QSlideTransition\nexamples: QSlideTransition\nrelated:\n  - /vue-components/expansion-item\n  - /options/transitions\n```\n\n----------------------------------------\n\nTITLE: Importing Platform Outside Vue Components\nDESCRIPTION: Shows how to import and use the Platform module outside of Vue components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/platform-detection.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Platform } from 'quasar'\n```\n\n----------------------------------------\n\nTITLE: Basic QNoSsr Usage\nDESCRIPTION: Simple example showing how to prevent content from being rendered on the server side\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr>\n  <div>This won't be rendered on server</div>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: Dark Mode QOptionGroup Configuration\nDESCRIPTION: Example of forcing dark mode on QOptionGroup component\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/option-group.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Force dark mode\" file=\"Dark\" />\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Usage Outside Vue Components\nDESCRIPTION: Demonstrates how to use the Dark plugin outside of Vue components. Note that this approach doesn't work with SSR builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dark.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Warning! This method will not\n// work on SSR builds.\n\nimport { Dark } from 'quasar'\n\n// get status\nconsole.log(Dark.isActive)\n\n// get configured status\nconsole.log(Dark.mode) // \"auto\", true, false\n\n// set status\nDark.set(true) // or false or \"auto\"\n\n// toggle\nDark.toggle()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Icon Mapping in Quasar\nDESCRIPTION: Implementation of iconMapFn to support custom icon prefixes in Quasar components. This example shows how to handle icons with 'app:' prefix by mapping them to custom CSS classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nconst $q = useQuasar()\n\n// Example of adding support for `<q-icon name=\"app:.....\" />`\n// This includes support for all \"icon\" props of Quasar components\n\n$q.iconMapFn = (iconName) => {\n  // iconName is the content of QIcon \"name\" prop (or related icon prop of other Quasar components)\n\n  // can be any logic you want, but for this example:\n  if (iconName.startsWith('app:') === true) {\n    // we strip the \"app:\" part\n    const name = iconName.substring(4)\n\n    return {\n      cls: 'my-app-icon ' + name\n    }\n  }\n\n  // when we don't return anything from our iconMapFn,\n  // the default Quasar icon mapping takes over\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Theme QSplitter\nDESCRIPTION: Implementation of QSplitter with dark theme and customized separator.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"On a dark background with customized separator\" file=\"CustomizedSeparator\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PWA Source Files in Quasar Config\nDESCRIPTION: JavaScript configuration in quasar.config file to specify custom filenames for PWA-related source files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/preparation.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nsourceFiles: {\n  pwaRegisterServiceWorker: 'src-pwa/register-service-worker',\n  pwaServiceWorker: 'src-pwa/custom-service-worker',\n  pwaManifestFile: 'src-pwa/manifest.json',\n}\n```\n\n----------------------------------------\n\nTITLE: QVideo Component with Aspect Ratio in Vue\nDESCRIPTION: Shows how to use the QVideo component with a specific aspect ratio. This example sets the aspect ratio to 16:9 for the embedded video.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/video.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <q-video\n    src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\"\n    :ratio=\"16/9\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Quasar Plugin Usage with Composition API\nDESCRIPTION: Demonstrates how to use Quasar plugins (Notify) within a Vue component using Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-btn\n      @click=\"$q.notify('My message')\"\n      color=\"primary\"\n      label=\"Show a notification\"\n    />\n\n    <q-btn\n      @click=\"showNotification\"\n      color=\"primary\"\n      label=\"Show another notification\"\n    />\n  </div>\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    function showNotification () {\n      $q.notify('Some other message')\n    }\n\n    return {\n      showNotification\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform and Cookies in SSR context with Quasar\nDESCRIPTION: Demonstrates how to properly use Quasar's Platform (same approach works for Cookies) in a server-side rendered app. The code shows how to handle platform detection by checking the environment and using the appropriate method based on whether the code is running on the server or client.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-frequently-asked-questions.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// example with Platform; same thing for Cookies\nimport { Platform } from 'quasar'\n\n// you need access to `ssrContext`\nfunction (ssrContext) {\n  const platform = process.env.SERVER\n    ? Platform.parseSSR(ssrContext)\n    : Platform // otherwise we're on client\n\n  // platform is equivalent to the global import as in non-SSR builds\n}\n```\n\n----------------------------------------\n\nTITLE: QLayout in QDialog Example in Vue\nDESCRIPTION: Shows how to use QLayout within a QDialog component, demonstrating the flexibility of QLayout in different contexts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/layout/layout.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"In a QDialog\" file=\"ContainerDialog\" />\n```\n\n----------------------------------------\n\nTITLE: QExpansionItem Basic Implementation\nDESCRIPTION: Demonstrates the basic usage of QExpansionItem component as an accordion element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/expansion-item.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: JavaScript ESLint Configuration\nDESCRIPTION: Complete ESLint configuration for JavaScript-based Quasar projects, including Vue.js specific rules and global variables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/linter.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport js from '@eslint/js'\nimport globals from 'globals'\nimport pluginVue from 'eslint-plugin-vue'\nimport pluginQuasar from '@quasar/app-vite/eslint'\n\nexport default [\n  {\n  },\n  ...pluginQuasar.configs.recommended(),\n  js.configs.recommended,\n  ...pluginVue.configs[ 'flat/essential' ],\n  {\n    languageOptions: {\n      ecmaVersion: 'latest',\n      sourceType: 'module',\n      globals: {\n        ...globals.browser,\n        ...globals.node,\n        process: 'readonly',\n        ga: 'readonly',\n        cordova: 'readonly',\n        Capacitor: 'readonly',\n        chrome: 'readonly',\n        browser: 'readonly'\n      }\n    },\n    rules: {\n      'prefer-promise-reject-errors': 'off',\n      'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Capacitor App for iOS Release\nDESCRIPTION: Command to generate a release build for an iOS app using Quasar CLI with Capacitor. This compiles web assets and optionally opens Xcode for further build steps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T ios\n```\n\n----------------------------------------\n\nTITLE: QSlider with Native Form Integration\nDESCRIPTION: Example showing how to integrate QSlider with native form submission, requiring the name property for proper formData inclusion.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/slider.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: PWA Type Declarations\nDESCRIPTION: TypeScript declarations for PWA-specific environment and service worker\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/supporting-ts.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    SERVICE_WORKER_FILE: string;\n    PWA_FALLBACK_HTML: string;\n    PWA_SERVICE_WORKER_REGEX: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Quasar Application\nDESCRIPTION: Shows how to correctly access environment variables defined in the quasar.config file or .env files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.FOO) // ✅\nconsole.log(process.env.BAR) // ❌ It's not defined in `build > env`\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Common Settings for Quasar Development\nDESCRIPTION: Basic VS Code settings that enable bracket pair colorization and guides for better code readability when working with Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.bracketPairColorization.enabled\": true,\n  \"editor.guides.bracketPairs\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Scroll Container in HTML\nDESCRIPTION: Example showing how to set up a scrollable container with QScrollObserver using CSS helper classes and proper height constraints.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-observer.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  Quasar CSS helper 'overflow-hidden' is\n  equivalent to style=\"overflow: hidden\"\n-->\n<div class=\"scroll overflow-hidden\" style=\"height: 100px\">\n  ...content expanding over the 100px height from container...\n  <q-scroll-observer @scroll=\"scrollHandler\" />\n\n  <!-- example with `v-scroll` directive -->\n  <div v-scroll=\"scrollHandler\">...</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring quasar.config.ts for TypeScript\nDESCRIPTION: Configuration options for TypeScript in the quasar.config.ts file, including strict mode and Vue shim generation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbuild: {\n  typescript: {\n    strict: true, // (recommended) enables strict settings for TypeScript\n    vueShim: true, // required when using ESLint with type-checked rules, will generate a shim file for `*.vue` files\n    extendTsConfig (tsConfig) {\n      // You can use this hook to extend tsConfig dynamically\n      // For basic use cases, you can still update the usual tsconfig.json file to override some settings\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coffeescript with Vue Components\nDESCRIPTION: Example of properly configuring a Vue component to use Coffeescript while avoiding ESLint warnings by specifying both lang and type attributes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  ...\n</template>\n<script lang=\"coffee\" type=\"text/coffeescript\">\n  ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserWindow for @electron/remote in Preload Script\nDESCRIPTION: JavaScript code snippet showing how to configure the BrowserWindow in the Electron main process to allow importing @electron/remote in the preload script.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmainWindow = new BrowserWindow({\n  // ...\n  webPreferences: {\n    // ...\n    sandbox: false // <-- to be able to import @electron/remote in preload script\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QSlideItem Component Properties\nDESCRIPTION: YAML frontmatter defining the core properties of the QSlideItem component documentation including title, description, key references and related components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/slide-item.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Slide Item\ndesc: The QSlideItem Vue component is essentially a QItem with two additional slots (left and right) which allows the user to drag it to one of the sides in order to apply a specific action.\nkeys: QSlideItem\nexamples: QSlideItem\nrelated:\n  - /vue-components/list-and-list-items\n  - /vue-components/expansion-item\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Observer in Vue with Quasar\nDESCRIPTION: This snippet demonstrates how to use the Mutation directive in a Vue component with Quasar Framework. It shows a basic setup to catch all DOM mutations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/mutation.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Catch everything\" file=\"CatchAll\" />\n```\n\n----------------------------------------\n\nTITLE: Date Object Validation in Quasar\nDESCRIPTION: Demonstrates how to check if a value is a Date object using is.date utility. Shows distinction between Date objects and timestamp numbers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/type-checking-utils.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { is } from 'quasar'\n\nconst date = new Date()\nconsole.log( is.date(date) ) // true\n\nconst now = Date.now()\nconsole.log( is.date(now) ) // false\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Analytics Tracking in JavaScript\nDESCRIPTION: Boot file implementation that hooks into Quasar router's afterEach navigation guard to automatically track page views in Google Analytics.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRouter } from '#q-app/wrappers'\nimport ga from 'analytics.js'\n\nexport default defineRouter(({ router }) => {\n  router.afterEach((to, from) => {\n    ga.logPage(to.path, to.name, sessionId)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Icon Set Configuration with @quasar/app-webpack\nDESCRIPTION: Example of dynamically configuring the Quasar Icon Set in a boot file for @quasar/app-webpack projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineBoot } from '#q-app/wrappers'\nimport { IconSet } from 'quasar'\n\nexport default defineBoot(async () => {\n  const iconSetName = 'mdi-v7' // ... some logic to determine it (use Cookies Plugin?)\n\n  try {\n    await import(\n      /* webpackInclude: /(mdi-v7|fontawesome-v6)\\.js$/ */\n      'quasar/icon-set/' + iconSetName\n    ).then(setDefinition => {\n      IconSet.set(setDefinition.default)\n    })\n  }\n  catch (err) {\n    // Requested Quasar Icon Set does not exist,\n    // let's not break the app, so catching error\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using TypeVertical Component in Vue\nDESCRIPTION: Example demonstrating vertical stepper layout implementation\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Vertical\" file=\"TypeVertical\" />\n```\n\n----------------------------------------\n\nTITLE: Example title placeholders for code samples\nDESCRIPTION: The document references multiple code examples but they are not directly included in the content. Examples are referenced through <DocExample> components with titles like 'NonExpandable', 'Expandable', 'InternalLabel', etc.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/floating-action-button.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"NonExpandable\" file=\"NonExpandable\" />\n<DocExample title=\"Expandable\" file=\"Expandable\" />\n<DocExample title=\"InternalLabel\" file=\"InternalLabel\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Ngrok Connection\nDESCRIPTION: Command to start Ngrok and create a tunnel to the local development server (port 8080 in this example).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ngrok http 8080\n# In case your development server doesn't run on port 8080 you need to change the number to the correct port\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Variables in Quasar Configuration (JavaScript)\nDESCRIPTION: This example shows how to define htmlVariables in the Quasar configuration file using the defineConfig wrapper.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '#q-app/wrappers'\n\nexport default defineConfig((ctx) => {\n  return {\n    htmlVariables: {\n      myVar: 'some-content'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering QuasarReleases Vue Component\nDESCRIPTION: Renders the imported QuasarReleases component on the page, which likely displays a formatted list of Quasar framework releases.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/release-notes/release-notes.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<QuasarReleases />\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Dependencies with Package Managers\nDESCRIPTION: Commands for updating Vue and Vue Router dependencies using different package managers (Yarn, NPM, PNPM, Bun).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ yarn add vue@3 vue-router@4\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ npm install --save vue@3 vue-router@4\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ pnpm add vue@3 vue-router@4\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ bun add vue@3 vue-router@4\n```\n\n----------------------------------------\n\nTITLE: Ordering Flex Items in Quasar Layout\nDESCRIPTION: Shows how to control the order of flex items using Quasar's order classes and inline styles. This example demonstrates reordering columns within a row.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div style=\"order: 2\">Second column</div>\n  <div class=\"order-last\">Third column</div>\n  <div class=\"order-first\">First column</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Mixed Horizontal and Vertical Gutters with q-gutter Classes in Quasar\nDESCRIPTION: Example demonstrating the use of mixed gutters with different sizes for horizontal and vertical spacing, using a combination of q-gutter-x-* and q-gutter-y-* classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Mixed horizontal and vertical q-gutter\" file=\"GutterMixed\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser Autocorrect in QEditor\nDESCRIPTION: Example showing how to disable browser autocorrect, autocomplete, autocapitalization and spell checking features in QEditor.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/editor.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form\n  autocorrect=\"off\"\n  autocapitalize=\"off\"\n  autocomplete=\"off\"\n  spellcheck=\"false\"\n>\n  <q-editor v-model=\"editor\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Electron Configuration Options in Quasar Config\nDESCRIPTION: Comprehensive configuration options for Electron including preload scripts, package.json extensions, Esbuild configs, bundler selection, and debugging settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/configuring-electron.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelectron: {\n  preloadScripts?: string[];\n\n  extendPackageJson?: (pkg: { [index in string]: any }) => void;\n\n  extendElectronMainConf?: (config: EsbuildConfiguration) => void;\n\n  extendElectronPreloadConf?: (config: EsbuildConfiguration) => void;\n\n  bundler?: \"packager\" | \"builder\";\n  packager?: ElectronPackager.Options;\n  builder?: ElectronBuilder.Configuration;\n\n  unPackagedInstallParams?: string[];\n\n  inspectPort?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @electron/remote Dependency\nDESCRIPTION: Commands to install the @electron/remote dependency using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @electron/remote\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @electron/remote\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add @electron/remote\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add @electron/remote\n```\n\n----------------------------------------\n\nTITLE: QSplitter with Custom Dragging Limits\nDESCRIPTION: Example showing how to implement QSplitter with custom dragging limits set between 50 and 100.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom dragging limits (50-100)\" file=\"Limits\" />\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Cordova App for iOS Release\nDESCRIPTION: Commands to generate a release build for an iOS app using Quasar CLI. This creates the necessary files for submission to the Apple App Store.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m cordova -T ios\n# or the short form:\n$ quasar build -m ios\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar build -m ios -- some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Custom Service Worker Implementation for InjectManifest Mode\nDESCRIPTION: Default implementation of a custom service worker for Quasar PWA using Workbox's InjectManifest mode, handling caching and routing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/configuring-pwa.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clientsClaim } from 'workbox-core'\nimport {\n  precacheAndRoute,\n  cleanupOutdatedCaches,\n  createHandlerBoundToURL,\n} from 'workbox-precaching'\nimport { registerRoute, NavigationRoute } from 'workbox-routing'\n\nself.skipWaiting();\nclientsClaim();\n\n// Use with precache injection\nprecacheAndRoute(self.__WB_MANIFEST)\n\ncleanupOutdatedCaches()\n\n// Non-SSR fallbacks to index.html\n// Production SSR fallbacks to offline.html (except for dev)\nif (process.env.MODE !== 'ssr' || process.env.PROD) {\n  registerRoute(\n    new NavigationRoute(\n      createHandlerBoundToURL(process.env.PWA_FALLBACK_HTML),\n      { denylist: [new RegExp(process.env.PWA_SERVICE_WORKER_REGEX), /workbox-(.)*\\.js$/] }\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Post-Hydration in Vue Component\nDESCRIPTION: These snippets show how to manually trigger post-hydration in a Vue component for both Composition API and Options API, when using SSR.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Composition API\nimport { onMounted } from 'vue'\nimport { useQuasar } from 'quasar'\n\nexport default {\n  // ....\n  setup () {\n    // ...\n    const $q = useQuasar()\n    onMounted(() => {\n      $q.onSSRHydrated()\n    })\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Options API\nexport default {\n  mounted () {\n    this.$q.onSSRHydrated()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic QResponsive Usage\nDESCRIPTION: Demonstrates the basic implementation of QResponsive component that maintains aspect ratio based on width. Must contain only one direct child element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: QInput with v-money Directive\nDESCRIPTION: Implementation example of QInput using v-money directive for currency formatting\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/input.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<q-field\n  filled\n  v-model=\"price\"\n  label=\"Price with v-money directive\"\n  hint=\"Mask: $ #,###.00 #\"\n>\n  <template v-slot:control=\"{ id, floatingLabel, modelValue, emitValue }\">\n    <input :id=\"id\" class=\"q-field__input text-right\" :value=\"modelValue\" @change=\"e => emitValue(e.target.value)\" v-money=\"moneyFormatForDirective\" v-show=\"floatingLabel\">\n  </template>\n</q-field>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoneyFormatForDirective: {\n  decimal: '.',\n  thousands: ',',\n  prefix: '$ ',\n  suffix: ' #',\n  precision: 2,\n  masked: false /* doesn't work with directive */\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor Mode to Quasar Project\nDESCRIPTION: Command to add Capacitor mode to a Quasar project, which generates a Capacitor project in the /src-capacitor folder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/preparation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add capacitor\n```\n\n----------------------------------------\n\nTITLE: IDE-based Capacitor Building\nDESCRIPTION: Command to prepare for manual building using IDE (Android Studio / Xcode) instead of terminal build.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android] --ide\n```\n\n----------------------------------------\n\nTITLE: QToggle with Various Sizes in Vue\nDESCRIPTION: Shows different standard sizes available for QToggle and how to define custom sizes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Standard sizes\" file=\"StandardSizes\" />\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: Commands for installing TypeScript using different package managers\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/supporting-ts.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev typescript@~5.5.3\n$ npm install --save-dev typescript@~5.5.3\n$ pnpm add -D typescript@~5.5.3\n$ bun add --dev typescript@~5.5.3\n```\n\n----------------------------------------\n\nTITLE: Building Cordova Apps with Debugging Enabled\nDESCRIPTION: Commands for building Cordova apps with debugging enabled for the UI code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m [ios|android] -d\n\n# ..or the longer form\n$ quasar build -m [ios|android] --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Framework Options in Quasar Config File\nDESCRIPTION: This snippet demonstrates how to configure Cordova-specific framework options in the quasar.config file. It includes settings for iOS status bar padding and back button behavior.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/configuring-cordova.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      cordova: {\n        // add the dynamic top padding on iOS mobile devices\n        iosStatusBarPadding: true/false,\n\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue DevTools in Quasar DevServer\nDESCRIPTION: Simple configuration to enable remote Vue DevTools in the development server.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndevServer: {\n  vueDevtools: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar with the Config Object in JavaScript\nDESCRIPTION: Configuration options for Quasar and its plugins using the config object, including brand colors and default settings for Quasar plugins.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\napp.use(Quasar, {\n  config: {\n    brand: {\n      primary: '#e46262',\n      // ... or all other brand colors\n    },\n    notify: {...}, // default set of options for Notify Quasar plugin\n    loading: {...}, // default set of options for Loading Quasar plugin\n    loadingBar: { ... }, // settings for LoadingBar Quasar plugin\n    // ..and many more\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Pagination for QTable in Vue\nDESCRIPTION: Demonstrates how to set up initial pagination for a QTable component, including sorting and rows per page configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Initial pagination\" file=\"PaginationInitial\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Icon References to HTML for Quasar SPA\nDESCRIPTION: HTML code snippet to be added to the /index.html file. It includes the necessary link tags to reference various favicon sizes for different devices and browsers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/app-icons-spa.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/ico\" href=\"favicon.ico\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"128x128\" href=\"icons/favicon-128x128.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"icons/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"icons/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"icons/favicon-16x16.png\">\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Quasar\nDESCRIPTION: Basic configuration for the tsconfig.json file at the root of a Quasar project to enable TypeScript support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./.quasar/tsconfig.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Developing with Capacitor in Quasar\nDESCRIPTION: Commands for starting development mode with Capacitor for iOS or Android platforms. Supports both short and long form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m capacitor -T [ios|android]\n\n# ..or the longer form:\n$ quasar dev --mode capacitor --target [ios|android]\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop with Mutation Observer in Vue\nDESCRIPTION: This example illustrates how to use the Mutation directive in a drag and drop scenario. It's designed for desktop use due to browser API support limitations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/mutation.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Drag and Drop (desktop only)\" file=\"DragDrop\" />\n```\n\n----------------------------------------\n\nTITLE: QKnob Native Form Integration\nDESCRIPTION: Example demonstrating how to integrate QKnob with native form submission using the name property.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin Checker in quasar.config\nDESCRIPTION: Configuration diff showing how to set up ESLint with vite-plugin-checker in the Quasar config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/linter.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nbuild: {\n  vitePlugins: [\n    ['vite-plugin-checker', {\n      eslint: {\n        lintCommand: 'eslint -c ./eslint.config.js \"./src*/**/*.{js,mjs,cjs,vue}\"',\n        useFlatConfig: true\n      }\n    }, { server: false }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic QIntersection Usage\nDESCRIPTION: Demonstrates basic usage of QIntersection component with scrollable content and viewport detection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/intersection.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" scrollable no-edit />\n```\n\n----------------------------------------\n\nTITLE: QExpansionItem Styling Options\nDESCRIPTION: Demonstrates different styling options including dense mode and dark mode forcing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/expansion-item.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Dense\" file=\"Dense\" />\n\n<DocExample title=\"Force dark mode\" file=\"Dark\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Mouse Events for v-touch-hold in Vue\nDESCRIPTION: Shows how to enable mouse event handling for the v-touch-hold directive using the 'mouse' modifier.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-hold.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-hold.mouse=\"userHasHold\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Capacitor Development Server\nDESCRIPTION: Command to start a development server with Hot Module Replacement (HMR) for Capacitor app development, targeting either Android or iOS platform.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/preparation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m capacitor -T [android|ios]\n```\n\n----------------------------------------\n\nTITLE: Customizing Electron Source Files in Quasar Config\nDESCRIPTION: This snippet demonstrates how to customize the location of the Electron main thread file in the Quasar configuration file. It allows developers to specify a custom path for the main Electron process script.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// should you wish to change default files\nsourceFiles: {\n  electronMain: 'src-electron/electron-main.js'\n}\n```\n\n----------------------------------------\n\nTITLE: Developing Cordova Apps with Quasar CLI\nDESCRIPTION: Various commands for developing Cordova apps using Quasar CLI, including options for specifying platforms, emulators, and passing additional parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m [ios|android]\n\n# ..or the explicit form:\n$ quasar dev -m cordova -T [ios|android]\n\n# ..or the longer form:\n$ quasar dev --mode cordova --target [ios|android]\n\n# using a specific emulator (--emulator, -e)\n$ quasar dev -m ios -e iPhone-7\n# or\n$ quasar dev -m ios -e iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar dev -m ios -- some params --and options --here\n# when on Windows and using Powershell:\n$ quasar dev -m ios '--' some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: HTML Markup Equivalent of QVideo Component\nDESCRIPTION: Provides the HTML markup equivalent of using the QVideo component. This snippet shows how to embed a video using standard HTML iframe, which is essentially what QVideo does under the hood.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/video.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">\n  <iframe\n    src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\"\n    style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n    frameborder=\"0\"\n    allowfullscreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Horizontal-only Gutters with q-gutter Classes in Quasar\nDESCRIPTION: Example demonstrating horizontal-only gutters using q-gutter-x-* classes, which apply spacing only between elements horizontally while maintaining no vertical spacing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Horizontal only q-gutter\" file=\"GutterHorizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH for Yarn Global Packages\nDESCRIPTION: Shell commands to add Yarn's global bin directory to PATH environment variable for bash and fish shells.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quasar-cli.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# in ~/.bashrc or equivalent\nexport PATH=\"$(yarn global bin):$PATH\"\n\n# for fish-shell:\nset -U fish_user_paths (yarn global bin) $fish_user_paths\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Masonry Layout\nDESCRIPTION: HTML structure for implementing a masonry-like layout with column breaks. Requires specific arrangement of flex-break elements at the beginning of the container to properly structure the columns.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flexbox-patterns.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"column\">\n  <div class=\"flex-break hidden\"></div>\n  <div class=\"flex-break\"></div>\n  <div class=\"flex-break\"></div>\n  <div class=\"flex-break\"></div>\n\n  <div>Cell 1</div>\n  <div>Cell 2</div>\n  ...\n  <div>Cell last</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Standard QPopupProxy Implementation\nDESCRIPTION: Basic implementation of QPopupProxy component that automatically switches between QMenu and QDialog based on screen size, with default breakpoint at 450px.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/popup-proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Standard\" file=\"Standard\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @electron/remote Dependency\nDESCRIPTION: Command-line instructions for installing the @electron/remote dependency using various package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @electron/remote\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @electron/remote\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add @electron/remote\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add @electron/remote\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Info API with Capacitor in Vue Component\nDESCRIPTION: Example showing how to use Capacitor's Device API to retrieve and display device information like model and manufacturer.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div>Model: {{ model }}</div>\n    <div>Manufacturer: {{ manufacturer }}</div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { Device } from '@capacitor/device'\n\nexport default {\n  setup () {\n    const model = ref('Please wait...')\n    const manufacturer = ref('Please wait...')\n\n    onMounted(() => {\n      Device.getInfo().then(info => {\n        model.value = info.model\n        manufacturer.value = info.manufacturer\n      })\n    })\n\n    return {\n      model,\n      manufacturer\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Electron Apps for Production with Quasar CLI\nDESCRIPTION: Commands for building Electron apps for production using Quasar CLI. Includes options for enabling debugging in production builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m electron\n\n# ..or the longer form:\n$ quasar build --mode electron\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m electron -d\n\n# ..or the longer form\n$ quasar build -m electron --debug\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Setup with Vue Composition API\nDESCRIPTION: Example showing how to set up SVG icons using the Vue Composition API without script setup syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nimport { matMenu } from '@quasar/extras/material-icons'\nimport { mdiAbTesting } from '@quasar/extras/mdi-v7'\nimport { fasFont } from '@quasar/extras/fontawesome-v5'\n\nexport default {\n  // ...\n  setup () {\n    return {\n      matMenu,\n      mdiAbTesting,\n      fasFont\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Color Customization in Rating\nDESCRIPTION: Implementation showing how to use different colors for rating values\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Different color for each rating\" file=\"Colors\" />\n```\n\n----------------------------------------\n\nTITLE: Using Static Assets in HTML Templates\nDESCRIPTION: Example of properly referencing static assets from the /public folder in HTML templates. Shows the recommended approach without using absolute paths to ensure compatibility across different build modes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-assets.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Good! -->\n<img src=\"logo.png\">\n\n<!--\n  BAD! Works until you change vue router\n  mode (hash/history) or your public path.\n  Don't!\n-->\n<img src=\"/logo.png\">\n```\n\n----------------------------------------\n\nTITLE: Handling Webpack v5 Compatibility Issues with Node Polyfills\nDESCRIPTION: Solution for Webpack v5 compatibility issues by adding node-polyfill-webpack-plugin to the Quasar configuration to support packages that rely on Node.js API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst nodePolyfillWebpackPlugin from 'node-polyfill-webpack-plugin'\n\nbuild: {\n  chainWebpack (chain) {\n    chain.plugin('node-polyfill').use(nodePolyfillWebpackPlugin)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Android SDK Environment Variables\nDESCRIPTION: Commands to check if the Android SDK environment variables are set correctly, which is crucial for the SDK to be found by the build tools.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $ANDROID_HOME\n\n# or\n\n$ echo $ANDROID_SDK_ROOT\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -la $ANDROID_HOME\n\n# or\n\n$ ls -la $ANDROID_SDK_ROOT\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $PATH\n```\n\n----------------------------------------\n\nTITLE: Building BEX for Production with Quasar CLI\nDESCRIPTION: Command to build a Browser Extension for production using Quasar CLI. It supports both Chrome and Firefox targets and generates a distribution-ready package.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m bex -T [chrome|firefox]\n\n# ..or the longer form:\n$ quasar build --mode bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: Adding SSR Mode to Quasar Project\nDESCRIPTION: Command to add SSR mode to an existing Quasar project. This creates the necessary files and folder structure for server-side rendering capabilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add ssr\n```\n\n----------------------------------------\n\nTITLE: Debug Build Command for Capacitor\nDESCRIPTION: Commands for creating production builds with debugging enabled for the UI code. Includes both short and long-form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android] -d\n\n# ..or the longer form\n$ quasar build -m capacitor -T [ios|android] --debug\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Config for SSR in quasar.config File\nDESCRIPTION: This code shows how to extend the Vite configuration specifically for SSR mode in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf, { isClient, isServer }) {\n        if (ctx.mode.ssr) {\n          // do something with viteConf\n          // or return an object to deeply merge with current viteConf\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Dependencies\nDESCRIPTION: Command to install Prettier formatter dependencies for code formatting in Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/linter.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev prettier@3 @vue/eslint-config-prettier\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Dependencies\nDESCRIPTION: Commands to install Prettier formatting dependencies for code styling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/linter.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev prettier@3 @vue/eslint-config-prettier\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar Icon Set in quasar.config\nDESCRIPTION: Example of configuring the Quasar Icon Set in the quasar.config file for a Quasar CLI project. It shows how to set both webfont-based and SVG-based icon sets.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nframework: {\n  // webfont-based example\n  iconSet: 'mdi-v7'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nframework: {\n  // svg-based example\n  iconSet: 'svg-mdi-v7'\n}\n```\n\n----------------------------------------\n\nTITLE: Mouse Related CSS Classes in Quasar\nDESCRIPTION: CSS classes that control mouse interaction behavior including selection, pointer events, and cursor appearance.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/other-helper-classes.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.non-selectable\n.no-pointer-events\n.all-pointer-events\n.cursor-pointer\n.cursor-not-allowed\n.cursor-inherit\n.cursor-none\n```\n\n----------------------------------------\n\nTITLE: Exporting Serverless Handler for SSR in Quasar Framework\nDESCRIPTION: This snippet shows how to configure the SSR listen function to export a handler for serverless environments while maintaining development server functionality. It uses the defineSsrListen wrapper to handle both development and production scenarios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-webserver.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrListen } from '#q-app/wrappers'\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  if (process.env.DEV) {\n    // for dev, start listening on the created server\n    const server = devHttpsApp || app;\n    return server.listen(port, () => {\n      // we're ready to serve clients\n    })\n  }\n  else { // in production\n    // return an object with a \"handler\" property\n    // that the server script will be named-export\n    return { handler: app }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic QPageScroller Usage in Vue\nDESCRIPTION: Demonstrates the basic usage of QPageScroller component within a QLayout. The component appears after a scroll offset is reached and allows quick navigation to the top of the page.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page-scroller.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Main Process\nDESCRIPTION: Setup for electron-main.js to enable remote module functionality and configure the main window\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app, BrowserWindow, nativeTheme } from 'electron'\nimport { initialize, enable } from '@electron/remote/main'\nimport path from 'path'\n\ninitialize()\n\nmainWindow = new BrowserWindow({\n  webPreferences: {\n    sandbox: false\n  }\n})\n\nenable(mainWindow.webContents)\n\nmainWindow.loadURL(process.env.APP_URL)\n```\n\n----------------------------------------\n\nTITLE: Single-Trigger QIntersection\nDESCRIPTION: Demonstrates QIntersection configured to trigger only once, maintaining DOM content after initial visibility.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/intersection.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Triggering only once\" file=\"Once\" scrollable no-edit />\n```\n\n----------------------------------------\n\nTITLE: EventBus Class Definition\nDESCRIPTION: Core EventBus class definition showing available methods for event handling including on, once, emit, and off operations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/event-bus-util.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass EventBus {\n  on (event: string, callback: Function, ctx?: any): this;\n  once (event: string, callback: Function, ctx?: any): this;\n  emit (event: string, ...args: any[]): this;\n  off (event: string, callback?: Function): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Masonry-Like Layouts with SCSS\nDESCRIPTION: SCSS formula for creating a masonry-like grid with a specified number of columns. Uses order property to arrange items in a horizontal flow across vertical columns.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flexbox-patterns.md#2025-04-16_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n$x: 3;\n\n@for $i from 1 through ($x - 1) {\n  .item:nth-child(#{$x}n + #{$i}) {\n    order: #{$i};\n  }\n}\n\n.item:nth-child(#{$x}n) {\n  order: #{$x};\n}\n```\n\n----------------------------------------\n\nTITLE: Context Menu Implementation\nDESCRIPTION: Implementation of QPopupProxy as a context menu, triggered by right click or long tap on mobile devices.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/popup-proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Context menu (right click / long tap)\" file=\"ContextMenu\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue.js DevTools for Electron in Quasar\nDESCRIPTION: Command to start Electron development mode with Vue.js DevTools enabled for the renderer thread.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m electron --devtools\n```\n\n----------------------------------------\n\nTITLE: Starting PWA Development Server\nDESCRIPTION: Command to start development server in PWA mode, which automatically adds PWA mode if missing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m pwa\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files in Quasar Framework (JavaScript)\nDESCRIPTION: This snippet shows the configuration for sourceFiles in Quasar, allowing customization of default file names and paths for various components of the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Use this property to change the default names of some files of your website/app if you have to.\n * All paths must be relative to the root folder of your project.\n *\n * @default\n * {\n *  rootComponent: 'src/App.vue',\n *  router: 'src/router/index',\n *  store: 'src/stores/index',\n *  indexHtmlTemplate: 'index.html',\n *  pwaRegisterServiceWorker: 'src-pwa/register-service-worker',\n *  pwaServiceWorker: 'src-pwa/custom-service-worker',\n *  pwaManifestFile: 'src-pwa/manifest.json',\n *  electronMain: 'src-electron/electron-main',\n *  bexManifestFile: 'src-bex/manifest.json'\n * }\n */\nsourceFiles: {\n  rootComponent?: string;\n  router?: string;\n  store?: string;\n  indexHtmlTemplate?: string;\n  pwaRegisterServiceWorker?: string;\n  pwaServiceWorker?: string;\n  pwaManifestFile?: string;\n  electronMain?: string;\n  bexManifestFile?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Developing PWA with Quasar CLI\nDESCRIPTION: Commands for starting a development server for a Progressive Web App using Quasar CLI. The development server uses a minimal Service Worker that only precaches the public folder, and offline functionality is not available.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m pwa\n\n# ..or the longer form:\n$ quasar dev --mode pwa\n```\n\n----------------------------------------\n\nTITLE: Configuring Screen Plugin Outside Vue Component\nDESCRIPTION: Example showing how to configure the Screen plugin outside of a Vue component by directly importing the Screen object and calling the setSizes method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Screen } from 'quasar'\nScreen.setSizes({ sm: 300, md: 500, lg: 1000, xl: 2000 })\n```\n\n----------------------------------------\n\nTITLE: Linear Progress Component Label Usage\nDESCRIPTION: Instructions for adding a label to the progress bar, including important considerations for size and text visibility.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/linear-progress.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo add a label to the progress bar you can use the default slot. Take care to:\n  - use a `size` big enough to allow showing the label\n  - set a text color for the label so that it is visible both on the filled and unfilled areas, or use text-shadow CSS, or use a QBadge as in the example below\n```\n\n----------------------------------------\n\nTITLE: Mini-mode with Mouse Events\nDESCRIPTION: Demonstrates QDrawer mini-mode functionality triggered by mouseover/mouseout events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Mini-mode with mouseover/mouseout trigger\" file=\"MiniMouseEvents\" />\n```\n\n----------------------------------------\n\nTITLE: Building PWA with Debug Mode\nDESCRIPTION: Commands for creating a production build with debugging enabled in PWA mode. Includes both short and long form syntax options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m pwa -d\n\n# ..or the longer form\n$ quasar build -m pwa --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Files in Quasar Config\nDESCRIPTION: Shows how to configure custom paths for loading environment files and filter environment variables in a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  /**\n   * Folder where Quasar CLI should look for .env* files.\n   * Can be an absolute path or a relative path to project root directory.\n   *\n   * @default project root directory\n   */\n  envFolder?: string;\n\n  /**\n   * Additional .env* files to be loaded.\n   * Each entry can be an absolute path or a relative path to quasar.config > build > envFolder.\n   *\n   * @example ['.env.somefile', '../.env.someotherfile']\n   */\n  envFiles?: string[];\n\n  /**\n   * Filter the env variables that are exposed to the client\n   * through the env files. This does not account also for the definitions\n   * assigned directly to quasar.config > build > env prop.\n   *\n   * Requires @quasar/app-webpack v4.0.3+\n   */\n  envFilter?:\n    (env: { [index: string]: string | boolean | undefined | null })\n      => { [index: string]: string | boolean | undefined | null };\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Icon References for PWA\nDESCRIPTION: HTML code required in index.html to reference various icon files for different devices and screen sizes. Includes favicon declarations and Apple-specific startup images for various iPhone and iPad models.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/app-icons-pwa.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/ico\" href=\"icons/favicon.ico\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"128x128\" href=\"icons/favicon-128x128.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"icons/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"icons/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"icons/favicon-16x16.png\">\n<!-- iPhone XR -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-828x1792.png\">\n<!-- iPhone X, XS -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1125x2436.png\">\n<!-- iPhone XS Max -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2688.png\">\n<!-- iPhone 8, 7, 6s, 6 -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-750x1334.png\">\n<!-- iPhone 8 Plus, 7 Plus, 6s Plus, 6 Plus -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2208.png\">\n<!-- iPhone 5 -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-640x1136.png\">\n<!-- iPad Mini, Air, 9.7\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1536x2048.png\">\n<!-- iPad Pro 10.5\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2224.png\">\n<!-- iPad Pro 11\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2388.png\">\n<!-- iPad Pro 12.9\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-2048x2732.png\">\n```\n\n----------------------------------------\n\nTITLE: Slots-Only Timeline Implementation\nDESCRIPTION: Demonstrates timeline creation using only QTimelineEntry slots for content organization\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/timeline.md#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Basic QTree Performance Enhancement\nDESCRIPTION: Code snippet showing how to improve QTree performance for large datasets by disabling transitions\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tree.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-tree no-transition ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading Quasar Packages\nDESCRIPTION: Demonstrates various options for checking and upgrading Quasar packages, including checking for non-breaking changes, pre-releases, major releases, and using custom npm registry.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# view all options:\n$ quasar upgrade -h\n\n# checks for non-breaking change upgrades and displays them,\n# but will not carry out the install\n$ quasar upgrade\n\n# checks for pre-releases (alpha/beta):\n$ quasar upgrade -p\n\n# checks for major new releases (includes breaking changes):\n$ quasar upgrade -m\n\n# use another npm registry url than what your machine is configured with:\n# (added in @quasar/cli v2.4)\n$ quasar upgrade -r https://registry.npmjs.org/\n\n# to perform the actual upgrade,\n# combine any of the params above and add \"-i\" (or \"--install\"):\n$ quasar upgrade -i\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Options in Quasar Config File\nDESCRIPTION: This snippet shows the structure of the 'cordova' object in the quasar.config file. It includes options for version, description, androidVersionCode, and functions for customizing Cordova build parameters and output folders.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/configuring-cordova.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncordova: {\n  /** If not present, will look for `package.json > version` */\n  version?: string;\n  /** If not present, will look for `package.json > description` */\n  description?: string;\n  androidVersionCode?: string;\n  /**\n   * Enable Xcode modern build even if after considering iOS-Cordova issues.\n   * You can enable it if you know what you are doing,\n   *  for example if you want to specify the build type in your \"build.json\".\n   *\n   * @default false\n   */\n  noIosLegacyBuildFlag?: boolean;\n\n  /**\n   * Function to return the Cordova build command parameters that\n   * will be executed after the UI has compiled.\n   *\n   * @param context.debug - True if in debug mode\n   * @param context.target - The target platform (ios/android)\n   * @returns Array of strings (command parameters)\n   *\n   * @default: [ 'build', '--debug'/'--release', '--device', 'ios'/'android' ]\n   * @example: ({ isDebug, target }) => [ 'build', `--${isDebug ? 'debug' : 'release'}`, '--device', 'target' ]\n   */\n  getCordovaBuildParams?: (context: { debug: boolean; target: 'ios' | 'android' }) => string[];\n\n  /**\n   * Function to return the Cordova output folder after the \"cordova build\"\n   * command is executed.\n   * The relative to /src-cordova path is used to copy the Cordova output\n   * to the /dist folder.\n   *\n   * @param context.debug - True if in debug mode\n   * @param context.target - The target platform (ios/android)\n   * @returns string | string[] | undefined - (relative path(s) from /src-cordova)\n   *\n   * @default ios: platforms/ios/build/... and android: platforms/android/app/build/outputs\n   * @example:\n   *    ({ isDebug, target }) => {\n   *       return target === 'ios'\n   *          ? `platforms/ios/build/${isDebug ? 'Debug' : 'Release'}-iphoneos\n   *          : 'platforms/android/app/build/outputs'\n   *    }\n   * @example: (when interested in only one platform, leaving the other to the default value)\n   *    ({ isDebug, target }) => {\n   *       if (target === 'ios') {\n   *          return `platforms/ios/build/${isDebug ? 'Debug' : 'Release'}-iphoneos`\n   *       }\n   *    }\n   * @example: ()\n   *    ({ isDebug, target }) => {\n   *       if (target === 'ios') {\n   *          // try these two folders\n   *          return [ 'platforms/ios/build/device', 'platforms/ios/build/emulator' ]\n   *       }\n   *    }\n   */\n  getCordovaBuildOutputFolder?: (context: { debug: boolean; target: 'ios' | 'android' }) => string | string[] | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing BEX Bridge Listeners\nDESCRIPTION: This snippet demonstrates how to remove listeners that are no longer needed during the lifetime of the BEX, which is important for proper cleanup and preventing memory leaks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbridge.off('some.event', this.someFunction)\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova Mode to Quasar\nDESCRIPTION: Command to add Cordova mode to a Quasar project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add cordova\n```\n\n----------------------------------------\n\nTITLE: Formatting Quasar Project Files in Bash\nDESCRIPTION: Commands to format the project files using either Yarn or npm scripts. This is conditionally included if Prettier is configured in the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-webpack-4/BASE/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n# or\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: QColor Native Form Implementation\nDESCRIPTION: Shows how to implement QColor within a native HTML form with proper name attribute for form submission.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/color-picker.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form\n  method=\"post\"\n  action=\"\"\n>\n  <q-color name=\"color\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Quasar App Extensions\nDESCRIPTION: Multiple commands to view what App Extensions are currently installed in your Quasar project, including viewing the extensions directly or through project information.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar ext\n$ quasar info\n$ cat quasar.extensions.json\n```\n\n----------------------------------------\n\nTITLE: Quasar Breakpoint Variable Naming Pattern\nDESCRIPTION: Shows the pattern for Quasar's breakpoint variables in Sass. These variables can be used in media queries to create responsive designs based on min and max width thresholds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/breakpoints.md#2025-04-16_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n$breakpoint-<breakpoint>-min\n$breakpoint-<breakpoint>-max\n```\n\n----------------------------------------\n\nTITLE: Using useQuasar in a Vue Component with Quasar\nDESCRIPTION: This example shows a complete Vue component using the useQuasar composable. It demonstrates how to access platform-specific information and Quasar version using the $q object in both the template and script sections.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-quasar.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"$q.platform.is.ios\">\n      Gets rendered only on iOS platform.\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    console.log($q.platform.is.ios)\n\n    // showing an example on a method, but\n    // can be any part of Vue script\n    function show () {\n      // prints out Quasar version\n      console.log($q.version)\n    }\n\n    return {\n      show\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Illustrating JSON Array Structure\nDESCRIPTION: Demonstrates the structure of a JSON array containing multiple string values.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[ \"first\", \"second\", \"third\" ]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Bold Command in QEditor\nDESCRIPTION: Example showing how to override the default bold command settings with custom label, icon and tooltip in QEditor.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/editor.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n:definitions=\"{\n  bold: {label: 'Bold', icon: null, tip: 'My bold tooltip'}\n}\"\n```\n\n----------------------------------------\n\nTITLE: localhost.run SSH Command with Example Output\nDESCRIPTION: Example of the localhost.run SSH command and its output showing the generated HTTP and HTTPS URLs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -R 80:localhost:8080 ssh.localhost.run\nConnect to http://fakeusername-random4chars.localhost.run or https://fakeusername-random4chars.localhost.run\nPress ctrl-c to quit.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for BEX Mode\nDESCRIPTION: TypeScript module declaration for BEX (Browser Extension) mode, defining custom event types for background and content scripts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@quasar/app-vite' {\n  interface BexEventMap {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    log: [{ message: string; data?: any[] }, never];\n    getTime: [never, number];\n\n    'storage.get': [{ key: string | null }, any];\n    'storage.set': [{ key: string; value: any }, any];\n    'storage.remove': [{ key: string }, any];\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@quasar/app-vite' {\n  interface BexEventMap {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    'some.event': [{ someProp: string }, void];\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Redirect Path Examples in Quasar\nDESCRIPTION: Examples showing correct and incorrect ways to call redirect() with different publicPath and vueRouterMode configurations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// publicPath: /wiki; vueRouterMode: history\nredirect('/one') // good way\nredirect({ path: '/one' }) // good way\nredirect('/wiki/one') // WRONG!\n\n// publicPath: /wiki; vueRouterMode: hash\nredirect('/one') // good way\nredirect({ path: '/one' }) // good way\nredirect('/wiki/#/one') // WRONG!\n\n// no publicPath; vueRouterMode: hash\nredirect('/one') // good way\nredirect({ path: '/one' }) // good way\nredirect('/#/one') // WRONG!\n```\n\n----------------------------------------\n\nTITLE: Importing Sass Files with Variables\nDESCRIPTION: Example showing how to enable Quasar Sass variables in imported files by adding a $ character comment to trigger Quasar's variable detection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/sass-scss-variables/sass-scss-variables.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style lang=\"sass\">\n// $\n\n@import 'some-file.sass'\n// now some-file.sass can benefit\n// from Quasar Sass variables too\n// due to comment above\n</style>\n```\n\n----------------------------------------\n\nTITLE: Static Component Registration in Vue Components\nDESCRIPTION: Demonstrates the traditional way of importing and registering components in Vue, which includes all components in the initial bundle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/lazy-loading.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport SomeComponent from 'components/SomeComponent'\n\nexport default {\n  components: {\n    SomeComponent,\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Examples of Spacing Classes\nDESCRIPTION: Demonstrates practical usage of spacing classes for adding padding and margin to elements. Shows how to combine multiple classes for different spacing needs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/spacing.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- small padding in all directions -->\n<div class=\"q-pa-sm\">...</div>\n\n<!-- medium margin to top, small margin to right -->\n<q-card class=\"q-mt-md q-mr-sm\">...</q-card>\n```\n\n----------------------------------------\n\nTITLE: Basic QIcon Component Usage - HTML\nDESCRIPTION: Basic syntax for using the QIcon component in Quasar Framework. The name prop specifies which icon to display based on the chosen icon set.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/extras/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<q-icon name=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Quasar and Dependencies with Package Managers\nDESCRIPTION: Commands for updating Quasar and @quasar/extras packages using different package managers (Yarn, NPM, PNPM, Bun).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn upgrade quasar\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ yarn add vue@3 @quasar/extras@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ npm install --save vue@3 @quasar/extras@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ pnpm add vue@3 @quasar/extras@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# optional, but recommended\n$ bun add vue@3 @quasar/extras@latest\n```\n\n----------------------------------------\n\nTITLE: Skip Package Build Command for Capacitor\nDESCRIPTION: Command to skip the Gradle/xcodebuild step and only populate the /src-capacitor/www folder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android] --skip-pkg\n```\n\n----------------------------------------\n\nTITLE: Notify Plugin HTML Configuration\nDESCRIPTION: Example of enabling HTML content in Notify plugin, which requires manual sanitization.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/security/dos-and-donts.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhtml: true\n```\n\n----------------------------------------\n\nTITLE: Building Quasar SSR for Production\nDESCRIPTION: Commands for creating a production build in SSR mode. Shows both short and long form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m ssr\n\n# ..or the longer form:\n$ quasar build --mode ssr\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration in Quasar App Extension\nDESCRIPTION: This function allows customization of the Vite configuration when the host application uses Vite as its build tool. It receives the Vite config object and context information.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction extendVite (viteConf, { isClient, isServer }, api) {\n  // viteConf is a Vite config object generated by Quasar CLI\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal QSplitter Implementation\nDESCRIPTION: Implementation of QSplitter component showing horizontal splitting functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Horizontal\" file=\"Horizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Using Sass in Vue Components\nDESCRIPTION: Example of implementing Sass syntax in a Vue component's style block using the lang=\"sass\" attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/css-preprocessors.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Notice lang=\"sass\" -->\n<style lang=\"sass\">\ndiv\n  color: #444\n  background-color: #dadada\n</style>\n```\n\n----------------------------------------\n\nTITLE: Native Form Integration\nDESCRIPTION: Example of integrating QBtnToggle with native form submission, including proper name property usage.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-toggle.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Typescript and Lint in Quasar App Extension Install Script\nDESCRIPTION: Methods to check if the host project has Typescript or ESLint active. These methods are available in @quasar/app-vite 1.6+ and @quasar/app-webpack 3.11+.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @return {Promise<boolean>} host project has Typescript active or not\n */\nawait api.hasTypescript()\n\n/**\n * @return {Promise<boolean>} host project has ESLint or not\n */\nawait api.hasLint()\n```\n\n----------------------------------------\n\nTITLE: Initializing Quasar App Extension for Webpack Chaining in JavaScript\nDESCRIPTION: This snippet exports a function that sets up compatibility checks and chains Webpack configuration. It uses the Quasar API to ensure compatibility with specific versions of Quasar and @quasar/app-webpack, and then calls a chainWebpack function to modify the Webpack configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/chain-webpack.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api) {\n  // (Optional!)\n  // Quasar compatibility check; you may need\n  // hard dependencies, as in a minimum version of the \"quasar\"\n  // package or a minimum version of Quasar App CLI\n  api.compatibleWith('quasar', '^2.0.0')\n  api.compatibleWith('@quasar/app-webpack', '^4.0.0')\n\n  // chain webpack\n  api.chainWebpack((chain) => chainWebpack(api.ctx, chain))\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Analytics Boot File in Quasar Config\nDESCRIPTION: Configuration snippet showing how to conditionally register the Google Analytics boot file only for Capacitor-wrapped applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nboot: [\n  ctx.mode.capacitor ? 'google-analytics' : ''\n]\n```\n\n----------------------------------------\n\nTITLE: Vertical-only Gutters with q-gutter Classes in Quasar\nDESCRIPTION: Example showing vertical-only gutters using q-gutter-y-* classes, which apply spacing only between elements vertically while maintaining no horizontal spacing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Vertical only q-gutter\" file=\"GutterVertical\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Delay for QTooltip in Vue\nDESCRIPTION: Demonstrates how to set a custom delay (1 second in this case) before the tooltip appears.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom delay (1 second)\" file=\"OneSecond\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Google Analytics Boot File in Quasar Config\nDESCRIPTION: This JavaScript snippet demonstrates how to conditionally register the Google Analytics boot file in the Quasar configuration, only for Cordova-wrapped apps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nboot: [\n  ctx.mode.cordova ? 'google-analytics' : ''\n]\n```\n\n----------------------------------------\n\nTITLE: String Input Prompt Configuration\nDESCRIPTION: Example of a string input prompt configuration with optional validation and dynamic default value based on previous answers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/prompts-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'description',\n  type: 'input',\n  required: false,\n  message: 'Project description',\n  default: 'A Quasar Framework app'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'source_build',\n  type: 'input',\n  required: true,\n  message: 'If you want a separate file to be the source image during production, please specify it here: ',\n  validate: (input) => {\n    // ...do something ...\n  },\n  default: (answers) => {\n    return answers.source_dev || defaultImg\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Column Wrapping in Quasar\nDESCRIPTION: Shows how columns wrap to the next line when their combined width exceeds 12 grid points in a Quasar row. This example uses two columns with 8 grid points each.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <!--\n    more than 12 grid points together,\n    so second <div> will wrap on next line\n  -->\n  <div class=\"col-8\">col</div>\n  <div class=\"col-8\">col</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Quasar Project for Testing App Extensions\nDESCRIPTION: Commands to create a new Quasar project for testing an App Extension during development. This creates a test environment where you can install and invoke your extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create quasar\n# or\n$ npm init quasar@latest\n\n# pick \"App with Quasar CLI\"\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar App in Development Mode (Bash)\nDESCRIPTION: Command to start the Quasar application in development mode, enabling features like hot-code reloading and error reporting.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-webpack-4/BASE/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables from Environment Files in Quasar\nDESCRIPTION: Demonstrates how to access environment variables defined in .env files from a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.FOO) // ✅ It's loaded correctly from the `.env` file\nconsole.log(process.env.BAR) // ❌ It's not defined in the `.env` file\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes\nDESCRIPTION: Command to merge changes from the upstream 'dev' branch into your local 'dev' branch. This synchronizes your fork with the main repository before you submit your pull request.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git merge upstream/dev\n```\n\n----------------------------------------\n\nTITLE: Express Server Setup for Heroku\nDESCRIPTION: Server configuration using Express.js for deploying Quasar SPA on Heroku.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/deploying.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport serveStatic from 'serve-static'\nimport history from 'connect-history-api-fallback'\n\nconst port = process.env.PORT || 5000\nconst app = express()\n\napp.use(history())\napp.use(serveStatic(__dirname + '/dist/spa'))\napp.listen(port)\n```\n\n----------------------------------------\n\nTITLE: Defining a Catch-All Route for 404 Errors in Vue Router\nDESCRIPTION: This code snippet shows how to define a catch-all route in Vue Router to handle 404 errors. This route will match any unhandled path and render a custom Error404 component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of route for catching 404 with Vue Router\n{ path: '/:catchAll(.*)*', component: () => import('pages/Error404.vue') }\n```\n\n----------------------------------------\n\nTITLE: Cleaning Quasar Build Assets\nDESCRIPTION: Demonstrates how to clean up all the build assets in a Quasar project. Note that this requires calling 'quasar prepare' again afterwards.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar clean\n# requires \"quasar prepare\" to be called again\n```\n\n----------------------------------------\n\nTITLE: QMenu with v-model Toggle\nDESCRIPTION: Shows how to control QMenu visibility using v-model binding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/menu/menu.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Toggle through v-model\" file=\"VModel\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Main Process for Preload Script\nDESCRIPTION: Configuration code for the main Electron process to set up the preload script path. Demonstrates how to properly resolve the preload script location using environment variables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Add this at the top:\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst currentDir = fileURLToPath(new URL('.', import.meta.url))\n// ...\n\nfunction createWindow () {\n  // ...\n  mainWindow = new BrowserWindow({\n    // ...\n    webPreferences: {\n      // HERE IS THE MAGIC:\n      preload: path.resolve(\n        currentDir,\n        path.join(process.env.QUASAR_ELECTRON_PRELOAD_FOLDER, 'electron-preload' + process.env.QUASAR_ELECTRON_PRELOAD_EXTENSION)\n      )\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Four-Column Masonry Layout in Sass\nDESCRIPTION: Sass example for a 4-column masonry layout using the order property. This defines the visual presentation order for items to create a horizontally flowing layout across vertical columns.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flexbox-patterns.md#2025-04-16_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n.item:nth-child(4n+1)\n  order: 1\n.item:nth-child(4n+2)\n  order: 2\n.item:nth-child(4n+3)\n  order: 3\n.item:nth-child(4n)\n  order: 4\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server for Different Modes\nDESCRIPTION: Demonstrates how to start the Quasar development server for various modes including SPA, SSR, PWA, Cordova, Electron, and BEX. It also shows how to pass extra parameters to underlying executables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Developing a SPA\n$ quasar dev\n# ...or\n$ quasar dev -m spa\n\n# Developing for SSR\n$ quasar dev -m ssr\n\n# Developing a PWA\n$ quasar dev -m pwa\n\n# Developing a BEX for production\n$ quasar dev -m bex\n\n# Developing a Mobile App (through Cordova)\n$ quasar dev -m cordova -T [android|ios]\n# or the short form:\n$ quasar dev -m [android|ios]\n\n# Developing an Electron App\n$ quasar dev -m electron\n\n# Developing a Browser Extension (BEX)\n$ quasar dev -m bex -T [chrome|firefox]\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" or \"electron\" executables:\n$ quasar dev -m ios -- some params --and options --here\n$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n# when on Windows and using Powershell:\n$ quasar dev -m ios '--' some params --and options --here\n$ quasar dev -m electron '--' --no-sandbox --disable-setuid-sandbox\n```\n\n----------------------------------------\n\nTITLE: Using Tunnelmole for HTTPS in Quasar PWA Development\nDESCRIPTION: This bash command demonstrates how to use tunnelmole to serve localhost over HTTPS during Quasar PWA development, which is necessary for service workers to function properly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/handling-service-worker.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80\nhttp://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\nhttps://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\n\n# ...and use the HTTPS url shown in the output\n```\n\n----------------------------------------\n\nTITLE: BEX Type Declaration Update\nDESCRIPTION: Updates to BEX-related type declarations for Webpack compatibility in background.js and content script files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/convert-to-quasar-cli-with-webpack.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- declare module '@quasar/app-vite' {\n+ declare module '@quasar/app-webpack' {\n  interface BexEventMap {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Flex Addon Syntax\nDESCRIPTION: Shows the syntax pattern for breakpoint-aware spacing classes when CSS addons are enabled through quasar.config file configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/spacing.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.q-(p|m)(t|r|b|l|a|x|y)-<bp>-(none|auto|xs|sm|md|lg|xl)\n```\n\n----------------------------------------\n\nTITLE: Forcing LTR Direction on HTML Elements in RTL Context\nDESCRIPTION: Example of using the dir=\"ltr\" HTML attribute to force LTR (left-to-right) mode on a specific DOM element and all its children, overriding any RTL settings from the language pack.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div dir=\"ltr\">\n  <!--\n    this DIV and all its content will use non-RTL mode\n    regardless of Quasar language pack RTL settings\n  -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar CLI Dependencies\nDESCRIPTION: Commands for installing the latest Quasar CLI globally using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add @quasar/cli@latest\n$ npm i -g @quasar/cli@latest\n$ pnpm add -g @quasar/cli@latest\n$ bun install -g @quasar/cli@latest\n```\n\n----------------------------------------\n\nTITLE: Handling IPC Messages in Electron Main Process\nDESCRIPTION: This code snippet shows how to handle IPC messages in the Electron main process that correspond to the exposed API in the preload script. It demonstrates setting up an IPC handler for a specific channel.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nipcMain.handle('myAPI:load-prefs', () => {\n  return {\n    // object that contains preferences\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: PWA Meta Tags Template for index.html\nDESCRIPTION: HTML template showing the default PWA meta tags that Quasar CLI injects into index.html for Progressive Web App functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/configuring-pwa.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n\n  <% if (ctx.mode.pwa) { %>\n    <meta name=\"theme-color\" content=\"<%= pwaManifest.theme_color %>\">\n    <link rel=\"mask-icon\" href=\"icons/safari-pinned-tab.svg\" color=\"<%= pwaManifest.theme_color %>\">\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\n    <meta name=\"msapplication-TileImage\" content=\"icons/ms-icon-144x144.png\">\n    <meta name=\"msapplication-TileColor\" content=\"#000000\">\n    <meta name=\"apple-mobile-web-app-title\" content=\"<%= pwaManifest.name %>\">\n    <link rel=\"apple-touch-icon\" href=\"icons/apple-icon-120x120.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"icons/apple-icon-152x152.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"icons/apple-icon-167x167.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"icons/apple-icon-180x180.png\">\n  <% } %>\n\n</head>\n```\n\n----------------------------------------\n\nTITLE: localhost.run Connection Output\nDESCRIPTION: Example output when connecting with localhost.run, showing the generated public URL.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -R 80:localhost:8080 ssh.localhost.run\n# Connect to http://fakeusername-random4chars.localhost.run or https://fakeusername-random4chars.localhost.run\n# Press ctrl-c to quit.\n```\n\n----------------------------------------\n\nTITLE: Removing BEX Bridge Listeners\nDESCRIPTION: This snippet shows how to remove listeners that are no longer needed during the lifetime of the BEX. It demonstrates the use of the 'off' method to clean up event listeners.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbridge.off('some.event', this.someFunction)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple useTimeout Instances in Quasar\nDESCRIPTION: This snippet shows how to use multiple instances of useTimeout in a single component by renaming the returned functions. This allows for managing multiple independent timeouts within the same component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-timeout.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  registerTimeout: registerFirstTimeout,\n  removeTimeout: removeFirstTimeout\n} = useTimeout()\n\nconst {\n  registerTimeout: registerSecondTimeout,\n  removeTimeout: removeSecondTimeout\n} = useTimeout()\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Config for BEX UI in quasar.config\nDESCRIPTION: Shows how to modify the Vite configuration specifically for BEX UI files in the /src directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf) {\n        if (ctx.mode.bex) {\n          // do something with viteConf\n          // or return an object to deeply merge with current viteConf\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar Icon Set with Vite Plugin\nDESCRIPTION: Example of configuring the Quasar Icon Set in the main.js file when using Quasar with Vite.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nimport { Quasar } from 'quasar'\n// ...\nimport iconSet from 'quasar/icon-set/fontawesome-v6'\nimport '@quasar/extras/fontawesome-v6/fontawesome-v6.css'\n// ...\napp.use(Quasar, {\n  // ...,\n  iconSet: iconSet\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cordova on iOS with Specific Emulator\nDESCRIPTION: These commands demonstrate how to run a Cordova-based Quasar app on iOS using a specific emulator version. It's useful when the default emulator is not found or you want to target a specific iOS version.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m cordova -T ios -e iPhone-X,12.2\n# or with older versions of Cordova CLI installed on your machine:\n$ quasar dev -m cordova -T ios -e iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2\n```\n\n----------------------------------------\n\nTITLE: Advanced HTML Variables Example in Quasar Configuration (JavaScript)\nDESCRIPTION: This example shows a more complex configuration of htmlVariables in the Quasar configuration file, including nested properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nhtmlVariables: {\n  title: 'test name',\n  some: {\n    prop: 'my-prop'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Analytics Boot File - JavaScript\nDESCRIPTION: Configuration snippet showing how to conditionally register the Google Analytics boot file only for Capacitor-wrapped applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nboot: [\n  ctx.mode.capacitor ? 'google-analytics' : ''\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Picker Component\nDESCRIPTION: Vue component implementation showing the ThemePicker usage with padding classes applied.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/theme-builder/theme-builder.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<ThemePicker class=\"q-py-lg\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing QTooltip Appearance in Vue\nDESCRIPTION: Illustrates how to customize the appearance of QTooltip, including colors and styles.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Customize\" file=\"Coloring\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Index Script for Quasar App Extension\nDESCRIPTION: The index.js script extends the Quasar configuration, registers hooks, and modifies the build configuration. It demonstrates compatibility checks and conditional logic based on whether the app uses Vite or Webpack.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api) {\n  // (Optional!)\n  // Quasar compatibility check; you may need\n  // hard dependencies, as in a minimum version of the \"quasar\"\n  // package or a minimum version of Quasar App CLI\n  api.compatibleWith('quasar', '^2.0.0')\n\n  if (api.hasVite === true) {\n    api.compatibleWith('@quasar/app-vite', '^2.0.0')\n  }\n  else { // api.hasWebpack === true\n    api.compatibleWith('@quasar/app-webpack', '^4.0.0')\n  }\n\n  // Here we extend the /quasar.config file;\n  // (extendQuasarConf() will be defined later in this tutorial, continue reading)\n  api.extendQuasarConf(extendQuasarConf)\n\n  // Here we register the onPublish hook,\n  // only if user answered that he wants the publishing service\n  if (api.prompts.publishService) {\n    // onPublish() will be defined later in this tutorial, continue reading\n    api.onPublish(onPublish)\n  }\n\n  if (api.hasVite === true) {\n    api.extendViteConf(extendVite)\n  }\n  else { // api.hasWebpack === true\n    // we add/change/remove something in the Webpack configuration\n    // (chainWebpack() will be defined later in this tutorial, continue reading)\n    api.chainWebpack(chainWebpack)\n  }\n\n  // there's lots more hooks that you can use...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Environment Variables\nDESCRIPTION: These commands demonstrate how to check and set the ANDROID_HOME or ANDROID_SDK_ROOT environment variables, which are crucial for Android development with Cordova.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $ANDROID_HOME\n\n# or\n\n$ echo $ANDROID_SDK_ROOT\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Scrollbar Implementation\nDESCRIPTION: Demonstrates forced dark mode styling for scrollbars\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Force dark mode\" file=\"Dark\" />\n```\n\n----------------------------------------\n\nTITLE: Updating quasar.config file\nDESCRIPTION: Changes to be made in the quasar.config file to align with Vite configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- eslint: {\n-   // fix: true,\n-   // include: [],\n-   // exclude: [],\n-   // cache: false,\n-   // rawEsbuildEslintOptions: {},\n-   // rawWebpackEslintPluginOptions: {},\n-   warnings: true,\n-   errors: true\n- },\n\nbuild: {\n- esbuildTarget: {\n+ target: {\n    browser: [ 'es2022', 'firefox115', 'chrome115', 'safari14' ],\n    node: 'node20'\n  },\n\n- webpackTranspile\n- webpackTranspileDependencies\n- webpackDevtool\n\n- htmlFilename\n- rtl\n- showProgress\n- gzip\n- vueCompiler\n\n- extendWebpack () {}\n- chainWebpack () {}\n+ extendViteConf (viteConf, { isServer, isClient }) {}\n\n+ viteVuePluginOptions\n+ vitePlugins\n\n+ useFilenameHashes\n+ polyfillModulePreload\n\n- uglifyOptions\n- scssLoaderOptions\n- sassLoaderOptions\n- stylusLoaderOptions\n- lessLoaderOptions\n- vueLoaderOptions\n- tsLoaderOptions\n},\n\ndevServer: {\n- server: {\n-  type: 'http'\n- }\n},\n\nsourceFiles: {\n- indexHtmlTemplate: 'index.html'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v4 Dependencies\nDESCRIPTION: Package.json dependencies configuration for Capacitor v4, including optional app and splash-screen packages for enhanced UI functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^4.0.0\",\n  \"@capacitor/cli\": \"^4.0.0\",\n  \"@capacitor/core\": \"^4.0.0\",\n  \"@capacitor/splash-screen\": \"^4.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: QSlider Vertical Orientation\nDESCRIPTION: Example demonstrating vertical orientation of the QSlider component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/slider.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Vertical orientation\" file=\"Vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server in Bash\nDESCRIPTION: Command to run the application in development mode with hot-code reloading and error reporting features.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-webpack-4/BASE/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: Using Body Classes with Sass\nDESCRIPTION: Alternative approach to styling based on screen size using Sass syntax, which offers a more concise way to target elements within specific screen size classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n.my-div\n  body.screen--xs &\n    color: #000\n  body.screen--sm &\n    color: #fff\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Template Implementation in Vue\nDESCRIPTION: Template example demonstrating how to use SVG icons with the QIcon component using variable binding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-icon :name=\"matMenu\" />\n    <q-icon :name=\"fasFont\" />\n    <q-btn :icon=\"mdiAbTesting\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Quasar Development Server Commands\nDESCRIPTION: Terminal commands for running Quasar development server in different modes (SPA vs PWA) to manage Service Worker behavior during development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/hmr-for-dev.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m spa\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m pwa\n```\n\n----------------------------------------\n\nTITLE: QRange with Markers and Labels\nDESCRIPTION: Demonstrates the use of markers and marker labels in QRange component, including custom marker label slots.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/range.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Marker labels\" file=\"MarkerLabels\" />\n```\n\n----------------------------------------\n\nTITLE: Quasar Upgrade Command Options\nDESCRIPTION: Demonstrates various options for upgrading Quasar packages including checking for non-breaking changes, pre-releases, and major releases.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# view all options:\n$ quasar upgrade -h\n\n# checks for non-breaking change upgrades and displays them,\n# but will not carry out the install\n$ quasar upgrade\n\n# checks for pre-releases (alpha/beta):\n$ quasar upgrade -p\n\n# checks for major new releases (includes breaking changes):\n$ quasar upgrade -m\n\n# use another npm registry url than what your machine is configured with:\n$ quasar upgrade -r https://registry.npmjs.org/\n\n# to perform the actual upgrade,\n# combine any of the params above and add \"-i\" (or \"--install\"):\n$ quasar upgrade -i\n```\n\n----------------------------------------\n\nTITLE: Using Sass in Vue Components\nDESCRIPTION: Example of implementing Sass styles within a Vue component using the style tag with lang=\"sass\" attribute. Demonstrates the indent-based Sass syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/css-preprocessors.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Notice lang=\"sass\" -->\n<style lang=\"sass\">\ndiv\n  color: #444\n  background-color: #dadada\n</style>\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore for App Signing\nDESCRIPTION: Command to generate a private key using the keytool utility for signing Android APKs. This creates a keystore file that should be kept secure for future app updates.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 20000\n```\n\n----------------------------------------\n\nTITLE: Initializing Quasar App Extension with Compatibility Checks\nDESCRIPTION: Main index.js file that handles compatibility checks with Quasar and app types (Vite/Webpack), and sets up the extension configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/provide-a-directive.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api) {\n  api.compatibleWith('quasar', '^2.0.0')\n\n  if (api.hasVite === true) {\n    api.compatibleWith('@quasar/app-vite', '^2.0.0')\n  }\n  else { // api.hasWebpack === true\n    api.compatibleWith('@quasar/app-webpack', '^4.0.0')\n  }\n\n  api.extendQuasarConf(extendConf)\n}\n```\n\n----------------------------------------\n\nTITLE: Scrollbar Visibility Control\nDESCRIPTION: Shows how to manually control scrollbar visibility using the visible prop\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Controlling scrollbar visibility\" file=\"ScrollbarVisibility\" />\n```\n\n----------------------------------------\n\nTITLE: Using HTML Variables in index.html (HTML)\nDESCRIPTION: This snippet demonstrates how to use the htmlVariables defined in the Quasar configuration file within the index.html file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<%= myVar %>\n<% if (myVar) { %>something<% } %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Cordova Object in Vue Files\nDESCRIPTION: Shows how to access the global Cordova object in Vue files while developing a Mobile App with Cordova Mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$q.cordova\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript ESLint Dependencies\nDESCRIPTION: Command to install required ESLint dependencies for TypeScript-based Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/linter.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev vue-tsc @vue/eslint-config-typescript @eslint/js eslint@9 eslint-plugin-vue globals eslint-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Starting PWA Development with Quasar CLI\nDESCRIPTION: Command to start development in PWA mode, which automatically adds PWA mode if missing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m pwa\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Icon Libraries in Quasar Config\nDESCRIPTION: Demonstrates how to add multiple icon libraries to a Quasar application by listing them in the extras array in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/installing-icon-libraries.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nextras: [\n  'material-icons',\n  'mdi-v7',\n  'ionicons-v4', // last webfont was available in v4.6.3\n  'eva-icons',\n  'fontawesome-v6',\n  'themify',\n  'line-awesome',\n  'bootstrap-icons'\n]\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Capacitor App for Android Release\nDESCRIPTION: Command to generate a release build for Android using Quasar CLI. This compiles web assets and optionally opens Android Studio for further build steps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T android\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Pan Directive in Vue\nDESCRIPTION: Basic usage of the v-touch-pan directive in a Vue component. This snippet demonstrates how to attach the directive to a div element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-pan.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-pan.mouse=\"userHasPanned\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Static Component Import in Vue\nDESCRIPTION: Example of importing and registering a component statically in a Vue component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\nimport SomeComponent from 'components/SomeComponent.vue'\n\nexport default {\n  components: {\n    SomeComponent,\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Package Compatibility in Quasar App Extension Install Script\nDESCRIPTION: Methods to ensure compatibility with installed packages and check for the presence of specific packages in the host app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} packageName\n * @param {string} semverCondition\n */\napi.compatibleWith(packageName, '1.x')\n\n/**\n * @param {string} packageName\n * @param {string} (optional) semverCondition\n * @return {boolean} package is installed and meets optional semver condition\n */\nif (api.hasPackage('vuelidate')) {\n  // hey, this app has it (any version of it)\n}\nif (api.hasPackage('quasar', '^2.0.0')) {\n  // hey, this app has Quasar UI v2 installed\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocApiExplorer Component in Vue\nDESCRIPTION: Imports the DocApiExplorer Vue component which renders the full API explorer interface. The component is imported inside a script tag with a 'doc' attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/api-explorer/api-explorer.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport DocApiExplorer from './DocApiExplorer.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration in Quasar\nDESCRIPTION: Hook for modifying the Vite configuration object generated by Quasar CLI. Provides context for client/server builds.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (api.hasVite === true) {\n  api.extendViteConf((viteConf, { isClient, isServer }, api) => {\n    // add/remove/change Quasar CLI generated Vite config object\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: SSR Context Object Structure\nDESCRIPTION: Details the structure and properties of the ssrContext object including Express.js objects, Quasar's $q Object, nonce attribute, and rendering callbacks.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-context.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nssrContext: {\n  req,        // Express.js object\n  res,        // Express.js object\n  $q,         // The Quasar's $q Object\n\n  nonce,      // (optional to set it yourself)\n              // The global \"nonce\" attribute to use\n\n  onRendered, // Registers a function to be executed server-side after\n              // app has been rendered with Vue. You might need this\n              // to access ssrContext again after it has been fully processed.\n              // Example: ssrContext.onRendered(() => { /* ... */ })\n\n  rendered    // (optional to set it yourself)\n              // Set this to a function which will be executed server-side\n              // after the app has been rendered with Vue.\n              // We recommend using the \"onRendered\" instead.\n              //\n              // Purpose: backward compatibility with Vue ecosystem packages\n              // (like @vue/apollo-ssr)\n              // Example: ssrContext.rendered = () => { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quasar Inspect Command for Webpack Config\nDESCRIPTION: Command-line usage of the quasar inspect tool to examine the generated Webpack/Esbuild configuration for different build scenarios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar inspect -h\n\n  Description\n    Inspect Quasar generated Webpack/Esbuild config\n\n  Usage\n    $ quasar inspect\n    $ quasar inspect -c build\n    $ quasar inspect -m electron -p 'build.outDir'\n\n  Options\n    --cmd, -c        Quasar command [dev|build] (default: dev)\n    --mode, -m       App mode [spa|ssr|pwa|bex|cordova|capacitor|electron] (default: spa)\n    --depth, -d      Number of levels deep (default: 2)\n    --path, -p       Path of config in dot notation\n                        Examples:\n                          -p module.rules\n                          -p plugins\n    --thread, -t     Display only one specific app mode config thread\n    --help, -h       Displays this message\n```\n\n----------------------------------------\n\nTITLE: Layout Scroll Event Handler\nDESCRIPTION: Example of using QLayout's built-in scroll event instead of QScrollObserver for layout scrolling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-observer.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<q-layout @scroll=\"scrollHandler\">...</q-layout>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with Julia Genie\nDESCRIPTION: This snippet demonstrates how to set up a file upload endpoint using Julia Genie framework. It includes CORS configuration and a route for handling file uploads.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nusing Genie, Genie.Requests, Genie.Renderer\n\nGenie.config.cors_headers[\"Access-Control-Allow-Origin\"]  =  \"*\"\nGenie.config.cors_headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\nGenie.config.cors_headers[\"Access-Control-Allow-Methods\"] = \"GET,POST,PUT,DELETE,OPTIONS\"\nGenie.config.cors_allowed_origins = [\"*\"]\n\n#== server ==#\n\nroute(\"/\") do\n  \"File Upload\"\nend\n\nroute(\"/upload\", method = POST) do\n  if infilespayload(:img)                 # :img is file-name\n    @info filename(filespayload(:img))    # file-name=\"img\"\n    @info filespayload(:img).data\n\n    open(\"upload/file.jpg\", \"w\") do io\n      write(io, filespayload(:img).data)\n    end\n  else\n    @info \"No image uploaded\"\n  end\n\n  Genie.Renderer.redirect(:get)\nend\n\nisrunning(:webserver) || up()\n```\n\n----------------------------------------\n\nTITLE: Native Form Integration\nDESCRIPTION: Example showing how to integrate radio buttons with native form submission, requiring name property specification\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/radio.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Native form\" file=\"NativeForm\" />\n```\n\n----------------------------------------\n\nTITLE: Accepting Android SDK Licenses\nDESCRIPTION: Commands to accept all Android SDK licenses on different operating systems to resolve build issues.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsdkmanager --licenses\n~/Library/Android/sdk/tools/bin/sdkmanager --licenses\n%ANDROID_SDK_ROOT%/tools/bin/sdkmanager --licenses\n```\n\n----------------------------------------\n\nTITLE: Using Standard CSS in Vue Components\nDESCRIPTION: Example of using standard CSS syntax in a Vue component's style block without any preprocessor.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/css-preprocessors.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\ndiv {\n  color: #444;\n  background-color: #dadada;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Debug Production Build for Capacitor\nDESCRIPTION: Commands for creating a production build with UI code debugging enabled. Supports both short and long form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android] -d\n\n# ..or the longer form\n$ quasar build -m capacitor -T [ios|android] --debug\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Configuration\nDESCRIPTION: Minimal tsconfig.json setup for Quasar projects\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/supporting-ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./.quasar/tsconfig.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Complex HTML Variables in index.html (HTML)\nDESCRIPTION: This snippet demonstrates how to use more complex htmlVariables, including nested properties, within the index.html file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<%= title %>\n<%= some.prop %>\n<% if (some.prop) { %><%= title %><% } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Scripts in Manifest JSON\nDESCRIPTION: This JSON snippet shows how to configure content scripts and CSS files in the manifest.json file for a Browser Extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"content_scripts\": [\n  {\n    \"matches\": [ \"<all_urls>\" ],\n    \"css\": [ \"assets/content.css\" ],\n    \"js\": [ \"my-content-script.js\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import for Quasar Integrations Page\nDESCRIPTION: Imports and renders a custom QuasarIntegrations component that displays framework integration documentation. Uses Vue's script setup syntax with doc attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/integrations/integrations.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport QuasarIntegrations from './QuasarIntegrations.vue'\n</script>\n\n<QuasarIntegrations />\n```\n\n----------------------------------------\n\nTITLE: QImg with Custom Styling\nDESCRIPTION: Example showing how to apply custom styles including blur effects and border radius to images.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/img.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom image style\" file=\"CustomImageStyle\" />\n```\n\n----------------------------------------\n\nTITLE: Complex API Compatibility Check\nDESCRIPTION: Example of checking compatibility with different Quasar CLI versions based on the environment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/prompts-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (api.hasVite === true) {\n  api.compatibleWith('@quasar/app-vite', '^2.0.0')\n}\nelse {\n  api.compatbileWith('@quasar/app-webpack', '^4.0.0')\n}\n```\n\n----------------------------------------\n\nTITLE: QKnob with Inner Min/Max\nDESCRIPTION: Example showing how to restrict the model value to an interval inside the track's length using inner-min and inner-max props.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Inner min/max\" file=\"InnerMinMax\" />\n```\n\n----------------------------------------\n\nTITLE: Using Body Classes with CSS\nDESCRIPTION: Example of styling elements based on screen size using the body classes applied by the Screen plugin, such as screen--xs and screen--sm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/screen-plugin.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nbody.screen--xs {\n  .my-div {\n    color: #000;\n  }\n}\n\nbody.screen--sm {\n  .my-div {\n    color: #fff;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QKnob with Offset Angle\nDESCRIPTION: Example showing how to customize the starting angle of the knob.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Offset angle\" file=\"Angle\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar for Custom Component\nDESCRIPTION: This function extends the Quasar configuration to include the boot file for the custom component, handle transpilation, and add the component's CSS file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/provide-a-ui-component.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction extendConf (conf, api) {\n  conf.boot.push('~quasar-app-extension-my-component/src/boot/register-my-component.js')\n\n  if (api.hasVite !== true) {\n    conf.build.transpileDependencies.push(/quasar-app-extension-my-component[\\/]src/)\n  }\n\n  conf.css.push('~quasar-app-extension-my-component/src/component/MyComponent.sass')\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SSR Webserver Configuration in quasar.config\nDESCRIPTION: Example showing how to extend the Esbuild configuration for the SSR webserver in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  ssr: {\n    // ...\n    extendSSRWebserverConf (esbuildConf) {\n      // tamper with esbuildConf here\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating QTabPanels with QTabs in Vue\nDESCRIPTION: Shows how to use QTabPanels in conjunction with QTabs component. This combination provides a complete tabbed interface solution.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With QTabs\" file=\"WithQTabs\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Insets for Mobile Headers and Footers with CSS\nDESCRIPTION: CSS code demonstrating how to handle safe areas for mobile device status bars and notches using iOS-specific environment variables. Includes both legacy (constant) and modern (env) syntax for iOS 11.0 and 11.2+ compatibility.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* for your app's header */\npadding-top: constant(safe-area-inset-top); // for iOS 11.0\npadding-top: env(safe-area-inset-top); // for iOS 11.2 +\n/* for your app's footer */\npadding-bottom: constant(safe-area-inset-bottom);\npadding-bottom: env(safe-area-inset-bottom);\n```\n\n----------------------------------------\n\nTITLE: Using Standard CSS in Vue Components\nDESCRIPTION: Example of using standard CSS within a Vue component using the default style tag without a lang attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/css-preprocessors.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\ndiv {\n  color: #444;\n  background-color: #dadada;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Generating PWA Icons with Icon Genie CLI in Bash\nDESCRIPTION: Command to generate PWA icons using Icon Genie CLI. It takes a source icon and optionally a background image to create all necessary icon sizes and formats.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/app-icons-pwa.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m pwa -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Representing Null in JSON\nDESCRIPTION: Shows how null values are represented in JSON.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Building Cordova Apps for Production\nDESCRIPTION: Commands for building Cordova apps for production using Quasar CLI, including options for skipping package creation and passing additional parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m [android|ios]\n\n# ..or the explicit form:\n$ quasar build -m cordova -T [ios|android]\n\n# ..or the longer form:\n$ quasar build --mode cordova --target [ios|android]\n\n# this skips .app or .apk creation and just fills in /src-cordova/www\n$ quasar build -m [ios|android] --skip-pkg\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar build -m ios -- some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Custom Scroll Target Examples\nDESCRIPTION: Demonstrations of using custom scroll targets with virtual scroll\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/virtual-scroll.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom scroll target by id\" file=\"ScrollTargetId\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom scroll target by ref\" file=\"ScrollTargetRef\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Using QScrollArea\" file=\"ScrollArea\" />\n```\n\n----------------------------------------\n\nTITLE: QInput with v-money Component\nDESCRIPTION: Implementation example of QInput using v-money component for currency formatting\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/input.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<q-field\n  filled\n  v-model=\"price\"\n  label=\"Price with v-money component\"\n  hint=\"Mask: $ #,###.00 #\"\n>\n  <template v-slot:control=\"{ id, floatingLabel, modelValue, emitValue }\">\n    <money :id=\"id\" class=\"q-field__input text-right\" :model-value=\"modelValue\" @update:model-value=\"emitValue\" v-bind=\"moneyFormatForComponent\" v-show=\"floatingLabel\" />\n  </template>\n</q-field>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmoneyFormatForComponent: {\n  decimal: '.',\n  thousands: ',',\n  prefix: '$ ',\n  suffix: ' #',\n  precision: 2,\n  masked: true\n}\n```\n\n----------------------------------------\n\nTITLE: Vue SFC with CSS Preprocessors\nDESCRIPTION: Shows how to use CSS preprocessors (Sass/SCSS) within Vue Single File Components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style lang=\"sass\">\n.some-div\n  font-size: 15px\n</style>\n\n<style lang=\"scss\">\n.some-div {\n  font-size: 15px;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Getting Store Package and Node Packager in Quasar App Extension Install Script\nDESCRIPTION: Methods to get the store package name and Node packager name used in the host project. Available in @quasar/app-vite 1.6+ and @quasar/app-webpack 3.11+.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @return {Promise<string|undefined>} 'pinia' | 'vuex' | undefined\n */\nawait api.getStorePackageName()\n\n/**\n * @return {Promise<'npm' | 'yarn' | 'pnpm' | 'bun'>}\n */\nawait api.getNodePackagerName()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bottom Layer Visibility in QTable with Vue\nDESCRIPTION: Demonstrates how to use properties to hide the bottom layer or specific parts of it in a QTable component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/table.md#2025-04-16_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Hiding bottom layer\" file=\"HideBottom\" />\n```\n\n----------------------------------------\n\nTITLE: Scroll Container Example (HTML)\nDESCRIPTION: Example of properly structured scrollable container using Quasar's scroll class.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scroll\" style=\"height: 100px\">\n  ...content expanding over the 100px height from container...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting LoadingBar Defaults in Vue Components\nDESCRIPTION: Example of setting default configuration for LoadingBar within Vue components using useQuasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading-bar.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.loadingBar.setDefaults({\n    color: 'purple',\n    size: '15px',\n    position: 'bottom'\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Package Dependencies for Loaders\nDESCRIPTION: Example commands for installing package dependencies using different package managers like Yarn, NPM, PNPM, and Bun.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev json-loader\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration for Electron\nDESCRIPTION: Options for customizing the Webpack configuration for the Renderer thread (UI) in Electron applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/configuring-electron.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendWebpack(webpackCfg) { ... },\n  chainWebpack(webpackChain) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Electron Apps with Quasar CLI\nDESCRIPTION: Commands for publishing Electron apps using Quasar CLI with electron-builder. Includes options for specifying publishing frequency.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m electron -P always\n\n# ..or the longer form:\n$ quasar build --mode electron --publish always\n```\n\n----------------------------------------\n\nTITLE: Unix Environment Setup\nDESCRIPTION: Setting up Android SDK environment variables and path configuration for Unix-based systems (macOS, Linux).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport ANDROID_SDK_ROOT=\"$HOME/Android/Sdk\"\nexport PATH=$PATH:$ANDROID_SDK_ROOT/tools; PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Initializing BEX Bridge in Background Script\nDESCRIPTION: This snippet shows how to create and initialize the BEX bridge in a background script. It imports the createBridge function and sets up the bridge with debug mode disabled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/background'\n\nconst bridge = createBridge({ debug: false })\n```\n\n----------------------------------------\n\nTITLE: Orientation Related CSS Classes in Quasar\nDESCRIPTION: CSS classes for rotating and flipping elements with predefined degree values.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/other-helper-classes.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.rotate-45\n.rotate-90\n.rotate-135\n.rotate-180\n.rotate-225\n.rotate-270\n.rotate-315\n.flip-horizontal\n.flip-vertical\n```\n\n----------------------------------------\n\nTITLE: Using Quasar Describe Command - Bash\nDESCRIPTION: Command line usage examples for the Quasar describe command which provides API information for Quasar components, directives, and plugins\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar describe -h\n\n  Description\n    Describes a component API for project's Quasar version being used\n\n  Usage\n    $ quasar describe <component/directive/Quasar plugin>\n\n    # list all available API entries:\n    $ quasar describe list\n    # list available API entries that contain a String (ex \"storage\"):\n    $ quasar describe list storage\n\n    # display everything:\n    $ quasar describe QIcon\n\n    # displaying only props:\n    $ quasar describe QIcon -p\n    # displaying props and methods only:\n    $ quasar describe QIcon -p -m\n    # filtering by \"si\":\n    $ quasar describe QIcon -f si\n    # filtering only props by \"co\":\n    $ quasar describe QIcon -p -f co\n\n    # Open docs URL:\n    $ quasar describe QIcon -d\n```\n\n----------------------------------------\n\nTITLE: Aligning Android APK\nDESCRIPTION: Command to zip align the Android APK file using the zipalign tool from the Android SDK. This optimizes the APK for the app store.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ zipalign -v 4 <path-to-same-apk-file> HelloWorld.apk\n```\n\n----------------------------------------\n\nTITLE: Children Size Comparison Between q-gutter and q-col-gutter in Quasar\nDESCRIPTION: Example comparing how q-gutter-* and q-col-gutter-* classes affect the dimensions of child elements differently, with important considerations for using col-* classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Children size compare\" file=\"ChildrenSizeCompare\" />\n```\n\n----------------------------------------\n\nTITLE: Updating postcss.config.js for RTL support\nDESCRIPTION: Modification to postcss.config.js to add RTL support using postcss-rtlcss plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ import rtlcss from 'postcss-rtlcss'\n\nexport default {\n  plugins: [\n+   rtlcss()\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onPublish Hook for Quasar App Extension\nDESCRIPTION: The onPublish function is called when running \"quasar build --publish\" command. It provides a hook for implementing custom publishing logic, with context awareness for different build modes like Cordova.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onPublish (api, { arg, distDir }) {\n  // this hook is called when \"quasar build --publish\" is called\n\n  // your publish logic here...\n  console.log('We should publish now. But maybe later? :)')\n\n  // are we trying to publish a Cordova app?\n  if (api.ctx.modeName === 'cordova') {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Child Integration - Composition API\nDESCRIPTION: Implementation of custom form component integration with QForm using the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/form.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFormChild } from 'quasar'\n\nsetup () {\n  useFormChild({\n    validate,\n    resetValidation,\n    requiresQForm: true\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fontawesome Pro Boot File Implementation\nDESCRIPTION: Shows how to import Fontawesome Pro CSS files in the boot file to make the icon library available to the application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/installing-icon-libraries.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// required\nimport '@fortawesome/fontawesome-pro/css/fontawesome.css'\nimport '@fortawesome/fontawesome-pro/css/light.css'\n// do you want these too?\n// import '@fortawesome/fontawesome-pro/css/thin.css'\n// import '@fortawesome/fontawesome-pro/css/duotone.css'\n// import '@fortawesome/fontawesome-pro/css/brands.css'\n// import '@fortawesome/fontawesome-pro/css/solid.css'\n// import '@fortawesome/fontawesome-pro/css/regular.css'\n```\n\n----------------------------------------\n\nTITLE: Image Icons in Rating Component\nDESCRIPTION: Example showing how to use custom image icons in QRating\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Image icons\" file=\"Images\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Android Keystore for App Signing\nDESCRIPTION: Command to create a private key using keytool for signing Android APKs. This generates a keystore file essential for app distribution.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 20000\n```\n\n----------------------------------------\n\nTITLE: Quasar CLI CSS Import Configuration\nDESCRIPTION: Configuration example for importing custom icon CSS file in Quasar CLI project using quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// quasar.config file\ncss: [\n  // ....\n  'my-app-icon.css'\n]\n```\n\n----------------------------------------\n\nTITLE: QKnob Disable and Readonly States\nDESCRIPTION: Implementation showing disabled and readonly states of the QKnob component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Disable and readonly\" file=\"DisableReadonly\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Capacitor Development Server\nDESCRIPTION: Command to start a development server with Hot Module Replacement (HMR) for Capacitor app development, targeting either Android or iOS platform.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/preparation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m capacitor -T [android|ios]\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Script in Manifest\nDESCRIPTION: Manifest configuration for registering background scripts in Chrome (using Service Worker for Manifest v3) and Firefox browsers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/background-script.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"chrome\": {\n  \"background\": {\n    \"service_worker\": \"background.js\"\n  }\n},\n\n\"firefox\": {\n  \"background\": {\n    \"scripts\": [ \"background.js\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PreFetch in quasar.config.js\nDESCRIPTION: Enables the PreFetch feature in a Quasar application by setting the preFetch property to true in the quasar.config.js file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  preFetch: true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling iOS Rubber Band Effect in Cordova Config\nDESCRIPTION: XML configuration for Cordova's config.xml file to disable the iOS rubber band scroll effect. This preference setting prevents the bouncing effect when scrolling past content boundaries.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<preference name=\"DisallowOverscroll\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Building SPA for Production with Debugging Enabled\nDESCRIPTION: Commands to build a Quasar single page application for production with debugging enabled. This is useful for troubleshooting issues in a production-like environment. Two equivalent forms are provided.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -d\n\n# ..or the longer form\n$ quasar build --debug\n```\n\n----------------------------------------\n\nTITLE: App Version Update Path References\nDESCRIPTION: File paths where the app version number needs to be updated before submitting a new app version. Version can be modified either in package.json or in the Cordova section of quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n/package.json\n/quasar.config file > cordova > version\n```\n\n----------------------------------------\n\nTITLE: Development Commands for Capacitor Mobile Apps\nDESCRIPTION: Commands for starting development mode for Capacitor apps targeting iOS or Android platforms. Includes both short and long-form command syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m capacitor -T [ios|android]\n\n# ..or the longer form:\n$ quasar dev --mode capacitor --target [ios|android]\n```\n\n----------------------------------------\n\nTITLE: Changing Specific Icon at Runtime (Composition API)\nDESCRIPTION: Example of changing a specific icon at runtime using the Composition API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  function changeQEditorHeaderIcon () {\n    $q.iconSet.editor.header1 = 'fas fa-font'\n  }\n\n  return { changeQEditorHeaderIcon }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Donation Buttons Component\nDESCRIPTION: Import statement for the DonatingButtons Vue component that handles donation interface elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/why-donate.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport DonatingButtons from './sponsors-and-backers/DonatingButtons.vue'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sourcemap in Quasar Framework (JavaScript)\nDESCRIPTION: This snippet demonstrates the configuration options for sourcemap in the Quasar framework. It allows setting the sourcemap to true, 'inline', or 'hidden', with a default value of false.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * If `true`, a separate sourcemap file will be created. If 'inline', the\n * sourcemap will be appended to the resulting output file as data URI.\n * 'hidden' works like `true` except that the corresponding sourcemap\n * comments in the bundled files are suppressed.\n * @default false\n */\nsourcemap?: boolean | 'inline' | 'hidden';\n```\n\n----------------------------------------\n\nTITLE: Custom Coloring QPullToRefresh Implementation\nDESCRIPTION: Example demonstrating how to customize the colors of the QPullToRefresh component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/pull-to-refresh.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom coloring\" file=\"CustomColoring\" />\n```\n\n----------------------------------------\n\nTITLE: Simplified Promisified Redirection in Quasar Boot Files\nDESCRIPTION: A simpler equivalent of the previous example, using Promise.reject directly to trigger a redirect.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/boot-files.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(() => {\n  // ...\n  const isAuthorized = // ...\n  if (!isAuthorized && !urlPath.startsWith('/login')) {\n    return Promise.reject({ url: '/login' })\n  }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: No Dimming Rating Example\nDESCRIPTION: Implementation showing rating without dimming effect\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"No dimming\" file=\"NoDimming\" />\n```\n\n----------------------------------------\n\nTITLE: QKnob with Custom Min/Max\nDESCRIPTION: Implementation showing how to set custom minimum and maximum values for the knob.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Custom min/max\" file=\"MinMax\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Filename Hashes in Quasar Config\nDESCRIPTION: Configuration snippet for disabling filename hashes in Quasar Framework's build process. Setting useFilenameHashes to false prevents Vite from adding hash suffixes to asset filenames, which can help optimize PWA asset updates and bandwidth usage.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/configuring-pwa.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  useFilenameHashes: false // true by default\n}\n```\n\n----------------------------------------\n\nTITLE: Cordova Config XML Icon Configuration\nDESCRIPTION: XML configuration for Android and iOS platform icons and splash screens in the Cordova config.xml file. Includes all necessary icon sizes and paths for both platforms.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/app-icons-cordova.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<platform name=\"android\">\n    <icon density=\"ldpi\" src=\"res/android/ldpi.png\" />\n    <icon density=\"mdpi\" src=\"res/android/mdpi.png\" />\n    <icon density=\"xxxhdpi\" src=\"res/android/xxxhdpi.png\" />\n    <splash density=\"land-ldpi\" src=\"res/screen/android/splash-land-ldpi.png\" />\n    <splash density=\"port-ldpi\" src=\"res/screen/android/splash-port-ldpi.png\" />\n    <splash density=\"land-mdpi\" src=\"res/screen/android/splash-land-mdpi.png\" />\n    <icon density=\"hdpi\" src=\"res/android/hdpi.png\" />\n    <icon density=\"xxhdpi\" src=\"res/android/xxhdpi.png\" />\n    <splash density=\"port-mdpi\" src=\"res/screen/android/splash-port-mdpi.png\" />\n    <splash density=\"land-hdpi\" src=\"res/screen/android/splash-land-hdpi.png\" />\n    <splash density=\"land-xxhdpi\" src=\"res/screen/android/splash-land-xxhdpi.png\" />\n    <splash density=\"port-xxhdpi\" src=\"res/screen/android/splash-port-xxhdpi.png\" />\n    <splash density=\"land-xxxhdpi\" src=\"res/screen/android/splash-land-xxxhdpi.png\" />\n    <splash density=\"port-xxxhdpi\" src=\"res/screen/android/splash-port-xxxhdpi.png\" />\n    <icon density=\"xhdpi\" src=\"res/android/xhdpi.png\" />\n    <splash density=\"port-hdpi\" src=\"res/screen/android/splash-port-hdpi.png\" />\n    <splash density=\"land-xhdpi\" src=\"res/screen/android/splash-land-xhdpi.png\" />\n    <splash density=\"port-xhdpi\" src=\"res/screen/android/splash-port-xhdpi.png\" />\n</platform>\n<platform name=\"ios\">\n    <icon height=\"57\" src=\"res/ios/icon.png\" width=\"57\" />\n    <icon height=\"114\" src=\"res/ios/icon@2x.png\" width=\"114\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comcom.png\" />\n    <icon height=\"60\" src=\"res/ios/icon-20@3x.png\" width=\"60\" />\n    <icon height=\"29\" src=\"res/ios/icon-29.png\" width=\"29\" />\n    <icon height=\"58\" src=\"res/ios/icon-29@2x.png\" width=\"58\" />\n    <icon height=\"87\" src=\"res/ios/icon-29@3x.png\" width=\"87\" />\n    <icon height=\"80\" src=\"res/ios/icon-40@2x.png\" width=\"80\" />\n    <icon height=\"120\" src=\"res/ios/icon-60@2x.png\" width=\"120\" />\n    <icon height=\"180\" src=\"res/ios/icon-60@3x.png\" width=\"180\" />\n    <icon height=\"20\" src=\"res/ios/icon-20.png\" width=\"20\" />\n    <icon height=\"40\" src=\"res/ios/icon-20@2x.png\" width=\"40\" />\n    <icon height=\"100\" src=\"res/ios/icon-50@2x.png\" width=\"100\" />\n    <icon height=\"72\" src=\"res/ios/icon-72.png\" width=\"72\" />\n    <icon height=\"144\" src=\"res/ios/icon-72@2x.png\" width=\"144\" />\n    <icon height=\"76\" src=\"res/ios/icon-76.png\" width=\"76\" />\n    <icon height=\"152\" src=\"res/ios/icon-76@2x.png\" width=\"152\" />\n    <icon height=\"167\" src=\"res/ios/icon-83.5@2x.png\" width=\"167\" />\n    <icon height=\"1024\" src=\"res/ios/icon-1024.png\" width=\"1024\" />\n    <icon height=\"48\" src=\"res/ios/icon-24@2x.png\" width=\"48\" />\n    <icon height=\"55\" src=\"res/ios/icon-27.5@2x.png\" width=\"55\" />\n    <icon height=\"88\" src=\"res/ios/icon-44@2x.png\" width=\"88\" />\n    <icon height=\"172\" src=\"res/ios/icon-86@2x.png\" width=\"172\" />\n    <icon height=\"196\" src=\"res/ios/icon-98@2x.png\" width=\"196\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anycom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~comany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~comany.png\" />\n    <icon height=\"40\" src=\"res/ios/icon-40.png\" width=\"40\" />\n    <icon height=\"50\" src=\"res/ios/icon-50.png\" width=\"50\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comany.png\" />\n    <splash src=\"res/screen/ios/Default-Landscape-2436h.png\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~anyany\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comany\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comcom\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anyany\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anycom\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~comany\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~anyany\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~comany\" />\n</platform>\n```\n\n----------------------------------------\n\nTITLE: Size Related CSS Classes in Quasar\nDESCRIPTION: CSS classes for controlling element dimensions, including full-width, full-height, and window-sized elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/other-helper-classes.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.fit\n.full-height\n.full-width\n.window-height\n.window-width\n.block\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Info API with Capacitor in Vue Component\nDESCRIPTION: Example of using Capacitor's Device API to retrieve device information such as model and manufacturer in a Vue component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div>Model: {{ model }}</div>\n    <div>Manufacturer: {{ manufacturer }}</div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { Device } from '@capacitor/device'\n\nexport default {\n  setup () {\n    const model = ref('Please wait...')\n    const manufacturer = ref('Please wait...')\n\n    onMounted(() => {\n      Device.getInfo().then(info => {\n        model.value = info.model\n        manufacturer.value = info.manufacturer\n      })\n    })\n\n    return {\n      model,\n      manufacturer\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Environment File Format Example for Quasar\nDESCRIPTION: Shows the correct format for defining environment variables in a .env file for a Quasar application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nFOO=hello\n```\n\n----------------------------------------\n\nTITLE: Generating Icons with Icon Genie CLI\nDESCRIPTION: Commands to generate required icons for SSR and PWA modes using Icon Genie CLI tool. Supports generating icons from a source image with optional background for PWA mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/app-icons-ssr.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# SSR only:\\n$ icongenie generate -m ssr -i /path/to/source/icon.png\\n\\n# SSR + PWA:\\n$ icongenie generate -m ssr,pwa -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Forcing RTL Direction on HTML Elements\nDESCRIPTION: Example of using the dir=\"rtl\" HTML attribute to force RTL mode on a specific DOM element and all its children, regardless of the current language setting.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div dir=\"rtl\">\n  <!--\n    this DIV and all its content will use RTL mode\n    regardless of Quasar language pack RTL settings\n  -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Alternative CSS Import Methods\nDESCRIPTION: Various methods for importing custom icon CSS file in non-Quasar CLI setups, including JavaScript imports and HTML link tags.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n// in your main.js/main.ts\nimport 'src/css/my-app-icon.css'\n\n// or in the main css file\n@import url('./my-app-icon.css');\n\n// or in your HTML file (UMD)\n<link rel=\"stylesheet\" href=\"/css/my-app-icon.css\">\n```\n\n----------------------------------------\n\nTITLE: Android USB Device Rules\nDESCRIPTION: USB device rules configuration for Android devices on Linux systems\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0e79\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0502\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0b05\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"413c\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0489\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"091e\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"18d1\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"12d1\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"24e3\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2116\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0482\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"17ef\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1004\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"22b8\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0409\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2080\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0955\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2257\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"10a9\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1d4d\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0471\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04da\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"05c6\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1f53\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04e8\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04dd\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fce\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0930\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"19d2\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1bbb\", MODE=\"0666\"\n```\n\n----------------------------------------\n\nTITLE: Parent Styling Workaround for Quasar Gutter Classes\nDESCRIPTION: Example showing how to properly style a parent element when using gutter classes by adding a container wrapper to avoid issues with negative margins applied by gutter classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Parent styling\" file=\"ParentStyling\" />\n```\n\n----------------------------------------\n\nTITLE: Content Script Styling\nDESCRIPTION: CSS styling for the browser extension content script that defines highlighting functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.bex-highlight {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test File Specs - Bash\nDESCRIPTION: Commands to generate test file specifications for components using the test:specs script\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/testing/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test:specs --target <target_file>\n# Examples:\n#   $ pnpm test:specs -t QBtn\n#   $ pnpm test:specs -t use-btn\n#   $ pnpm test:specs -t composable\n```\n\n----------------------------------------\n\nTITLE: Cordova Config XML Platform Configuration\nDESCRIPTION: XML configuration for defining icon and splash screen resources for Android and iOS platforms, including various device densities and sizes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/app-icons-cordova.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<platform name=\"android\">\n    <icon density=\"ldpi\" src=\"res/android/ldpi.png\" />\n    <icon density=\"mdpi\" src=\"res/android/mdpi.png\" />\n    <icon density=\"xxxhdpi\" src=\"res/android/xxxhdpi.png\" />\n    <splash density=\"land-ldpi\" src=\"res/screen/android/splash-land-ldpi.png\" />\n    <splash density=\"port-ldpi\" src=\"res/screen/android/splash-port-ldpi.png\" />\n    <splash density=\"land-mdpi\" src=\"res/screen/android/splash-land-mdpi.png\" />\n    <icon density=\"hdpi\" src=\"res/android/hdpi.png\" />\n    <icon density=\"xxhdpi\" src=\"res/android/xxhdpi.png\" />\n    <splash density=\"port-mdpi\" src=\"res/screen/android/splash-port-mdpi.png\" />\n    <splash density=\"land-hdpi\" src=\"res/screen/android/splash-land-hdpi.png\" />\n    <splash density=\"land-xxhdpi\" src=\"res/screen/android/splash-land-xxhdpi.png\" />\n    <splash density=\"port-xxhdpi\" src=\"res/screen/android/splash-port-xxhdpi.png\" />\n    <splash density=\"land-xxxhdpi\" src=\"res/screen/android/splash-land-xxxhdpi.png\" />\n    <splash density=\"port-xxxhdpi\" src=\"res/screen/android/splash-port-xxxhdpi.png\" />\n    <icon density=\"xhdpi\" src=\"res/android/xhdpi.png\" />\n    <splash density=\"port-hdpi\" src=\"res/screen/android/splash-port-hdpi.png\" />\n    <splash density=\"land-xhdpi\" src=\"res/screen/android/splash-land-xhdpi.png\" />\n    <splash density=\"port-xhdpi\" src=\"res/screen/android/splash-port-xhdpi.png\" />\n</platform>\n<platform name=\"ios\">\n    <icon height=\"57\" src=\"res/ios/icon.png\" width=\"57\" />\n    <icon height=\"114\" src=\"res/ios/icon@2x.png\" width=\"114\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comcom.png\" />\n    <icon height=\"60\" src=\"res/ios/icon-20@3x.png\" width=\"60\" />\n    <icon height=\"29\" src=\"res/ios/icon-29.png\" width=\"29\" />\n    <icon height=\"58\" src=\"res/ios/icon-29@2x.png\" width=\"58\" />\n    <icon height=\"87\" src=\"res/ios/icon-29@3x.png\" width=\"87\" />\n    <icon height=\"80\" src=\"res/ios/icon-40@2x.png\" width=\"80\" />\n    <icon height=\"120\" src=\"res/ios/icon-60@2x.png\" width=\"120\" />\n    <icon height=\"180\" src=\"res/ios/icon-60@3x.png\" width=\"180\" />\n    <icon height=\"20\" src=\"res/ios/icon-20.png\" width=\"20\" />\n    <icon height=\"40\" src=\"res/ios/icon-20@2x.png\" width=\"40\" />\n    <icon height=\"100\" src=\"res/ios/icon-50@2x.png\" width=\"100\" />\n    <icon height=\"72\" src=\"res/ios/icon-72.png\" width=\"72\" />\n    <icon height=\"144\" src=\"res/ios/icon-72@2x.png\" width=\"144\" />\n    <icon height=\"76\" src=\"res/ios/icon-76.png\" width=\"76\" />\n    <icon height=\"152\" src=\"res/ios/icon-76@2x.png\" width=\"152\" />\n    <icon height=\"167\" src=\"res/ios/icon-83.5@2x.png\" width=\"167\" />\n    <icon height=\"1024\" src=\"res/ios/icon-1024.png\" width=\"1024\" />\n    <icon height=\"48\" src=\"res/ios/icon-24@2x.png\" width=\"48\" />\n    <icon height=\"55\" src=\"res/ios/icon-27.5@2x.png\" width=\"55\" />\n    <icon height=\"88\" src=\"res/ios/icon-44@2x.png\" width=\"88\" />\n    <icon height=\"172\" src=\"res/ios/icon-86@2x.png\" width=\"172\" />\n    <icon height=\"196\" src=\"res/ios/icon-98@2x.png\" width=\"196\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anycom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~comany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~comany.png\" />\n    <icon height=\"40\" src=\"res/ios/icon-40.png\" width=\"40\" />\n    <icon height=\"50\" src=\"res/ios/icon-50.png\" width=\"50\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comany.png\" />\n    <splash src=\"res/screen/ios/Default-Landscape-2436h.png\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~anyany\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comany\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comcom\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anyany\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anycom\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~comany\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~anyany\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~comany\" />\n</platform>\n```\n\n----------------------------------------\n\nTITLE: Cordova-Specific Safe Area CSS Implementation\nDESCRIPTION: CSS selector targeting Cordova-built applications specifically using the .cordova body class. Implements safe area insets for iOS devices while maintaining compatibility across versions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nbody.cordova .my-selector {\n  padding-top: constant(safe-area-inset-top);\n  padding-top: env(safe-area-inset-top);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Paths in Quasar App Extension Uninstall Script\nDESCRIPTION: Shows how to use the api.removePath method to remove a file or folder from the app project folder that the App Extension has installed and is no longer needed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n  * @param {string} __path\n  */\napi.removePath('my-folder')\n```\n\n----------------------------------------\n\nTITLE: Distributing Column Sizes in Quasar Flex Layout\nDESCRIPTION: Illustrates how to use Quasar's column classes to distribute sizes within a flex row. It shows various column width options including fixed widths, auto-sizing, and filling remaining space.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\">\n  <div class=\"col-8\">two thirds</div>\n  <div class=\"col-2\">one sixth</div>\n  <div class=\"col-auto\">auto size based on content and available space</div>\n  <div class=\"col\">fills remaining available space</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hot Module Reload for App Extension Development\nDESCRIPTION: JavaScript configuration for the Quasar CLI with Webpack to enable Hot Module Reload while developing an App Extension. This setup watches for changes in the App Extension's files in the node_modules directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// quasar.config file for\n// Quasar CLI with Webpack (@quasar/app-webpack)\n\ndevServer: {\n  // be sure to change <myextid> below to\n  // your App Extension name:\n  watchFiles: [\n    '/node_modules/quasar-app-extension-<myextid>/*'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting BEX Development Environment\nDESCRIPTION: Commands to start developing a Browser Extension using Quasar CLI. Supports both Chrome and Firefox targets through short-form or long-form commands.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m bex -T [chrome|firefox]\n\n# ..or the longer form:\n$ quasar dev --mode bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Update\nDESCRIPTION: Updated ESLint configuration for Vue 3 compatibility, including parser and plugin changes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nparserOptions: {\n  parser: '@babel/eslint-parser'\n},\nextends: [\n  'plugin:vue/vue3-essential'\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Redirection Status Code in PreFetch\nDESCRIPTION: Shows how to specify a custom HTTP status code when performing a redirection in the preFetch hook.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nredirect({ path: '/moved-permanently' }, 301)\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser DevTools Access in Electron\nDESCRIPTION: Implementation of conditional browser devtools access based on debugging mode. Opens devtools automatically in dev mode and prevents access in production unless debugging is enabled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/troubleshooting-and-tips.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createWindow () {\n  mainWindow = new BrowserWindow({ ... })\n\n  if (process.env.DEBUGGING) {\n    // if on DEV or Production with debug enabled\n    mainWindow.webContents.openDevTools()\n  }\n  else {\n    // we're on production; no access to devtools pls\n    mainWindow.webContents.on('devtools-opened', () => {\n      mainWindow.webContents.closeDevTools()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Quasar App Extension\nDESCRIPTION: Command to invoke an installed App Extension in a Quasar project. This triggers the installation process of the extension, assuming the package is already installed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# we said our <ext-id> will be \"my-ext\", so:\n$ quasar ext invoke my-ext\n```\n\n----------------------------------------\n\nTITLE: Defining Props in Quasar JSON API\nDESCRIPTION: Demonstrates how to define props in the Quasar JSON API, including various property types, descriptions, and examples.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n  \"props\": {\n    \"value\": {\n      \"type\": \"Boolean\",\n      \"desc\": \"Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'input' event) OR use v-model directive\",\n      \"default\": true,\n      \"examples\": [\n        \"v-model=\\\"footerState\\\"\"\n      ],\n      \"category\": \"model\"\n    },\n    \"locale\": {\n      \"type\": \"Object\",\n      \"desc\": \"Locale formatting options\",\n      \"examples\": [ \":locale=\\\"{\\n monthsShort: ['Ian', 'Feb', 'Mar', '...'] }\\\"\" ],\n      \"definition\": {\n        \"days\": {\n          \"type\": \"Array\",\n          \"desc\": \"List of full day names (DDDD), starting with Sunday\",\n          \"examples\": [ \"['Duminica', 'Luni', 'Marti', '...']\" ]\n        },\n        \"daysShort\": {\n          \"type\": \"Array\",\n          \"desc\": \"List of short day names (DDD), starting with Sunday\",\n          \"examples\": [ \"['Dum', 'Lun', 'Mar', '...']\" ]\n        },\n        \"months\": {\n          \"type\": \"Array\",\n          \"desc\": \"List of full month names (MMMM), starting with January\",\n          \"examples\": [ \"['Ianuarie', 'Februarie', 'Martie', '...']\" ]\n        },\n        \"monthsShort\": {\n          \"type\": \"Array\",\n          \"desc\": \"List of short month names (MMM), starting with January\",\n          \"examples\": [ \"['Ian', 'Feb', 'Mar', '...']\" ]\n        }\n      },\n      \"category\": \"model\"\n    },\n    \"options\": {\n      \"type\": \"Function\",\n      \"desc\": \"Optionally configure what time is the user allowed to set; Overridden by 'hour-options', 'minute-options' and 'second-options' if those are set\",\n      \"params\": {\n        \"hr\": {\n          \"type\": \"Number\",\n          \"desc\": \"Hour\",\n          \"examples\": [ 15 ]\n        },\n        \"min\": {\n          \"type\": \"Number\",\n          \"desc\": \"Minutes\",\n          \"examples\": [ 38 ]\n        },\n        \"sec\": {\n          \"type\": \"Number\",\n          \"desc\": \"Seconds\",\n          \"examples\": [ 12 ]\n        }\n      },\n      \"returns\": null,\n      \"examples\": [\n        \":options=\\\"(hr, min, sec) => hr <= 6\\\"\"\n      ],\n      \"category\": \"behavior\"\n    },\n    \"events\": {\n      \"type\": [ \"Array\", \"Function\" ],\n      \"desc\": \"A list of events to highlight on the calendar; If using a function, it receives the date as a String and must return a Boolean (matches or not)\",\n      \"examples\": [\n        \":events=\\\"['2018/11/05', '2018/11/06', '2018/11/09', '2018/11/23']\\\"\",\n        \":events=\\\"date => date[9] % 3 === 0\\\"\"\n      ],\n      \"category\": \"model\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Changing Quasar Icon Set at Runtime (Options API)\nDESCRIPTION: Example of changing the Quasar Icon Set at runtime using the Options API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport mdiIconSet from 'quasar/icon-set/mdi-v7.js'\n\nmethods: {\n  changeIconSetToMdiIconSet () {\n    this.$q.iconSet.set(mdiIconSet)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using v-close-popup Directive in a Menu Tree in Vue\nDESCRIPTION: This example shows how to use the v-close-popup directive in a chained QMenu structure. Chained QMenus are considered as one level for the directive.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/close-popup.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Menu tree\" file=\"MenuTree\" />\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Webpack Migration\nDESCRIPTION: New babel.config.js configuration required for Webpack setup, including preset configuration for different target environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/convert-to-quasar-cli-with-webpack.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default api => {\n  return {\n    presets: [\n      [\n        '@quasar/babel-preset-app',\n        api.caller(caller => caller && caller.target === 'node')\n          ? { targets: { node: 'current' } }\n          : {}\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Android Signing Key\nDESCRIPTION: Command to generate a private key for signing Android APKs using the keytool utility. This creates a keystore file that should be kept secure for future app updates.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 20000\n```\n\n----------------------------------------\n\nTITLE: Setting LoadingBar Defaults Outside Vue Components\nDESCRIPTION: Shows how to set default configuration for LoadingBar outside Vue components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading-bar.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoadingBar } from 'quasar'\n\nLoadingBar.setDefaults({\n  color: 'purple',\n  size: '15px',\n  position: 'bottom'\n})\n```\n\n----------------------------------------\n\nTITLE: Quasar Development Server Command Options\nDESCRIPTION: Lists all available options for the Quasar development server command, including mode selection, port configuration, and target-specific options for Cordova, Capacitor, and BEX modes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -h\n\n  Description\n    Starts the app in development mode (hot-code reloading, error\n    reporting, etc)\n\n  Usage\n    $ quasar dev\n    $ quasar dev -p <port number>\n\n    $ quasar dev -m ssr\n\n    # alias for \"quasar dev -m capacitor -T ios\"\n    $ quasar dev -m ios\n\n    # alias for \"quasar dev -m capacitor -T android\"\n    $ quasar dev -m android\n\n    # passing extra parameters and/or options to\n    # underlying \"cordova\" or \"electron\" executables:\n    $ quasar dev -m cordova -T ios -- some params --and options --here\n    $ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n    # when on Windows and using Powershell:\n    $ quasar dev -m cordova -T ios '--' some params --and options --here\n    $ quasar dev -m electron '--' --no-sandbox --disable-setuid-sandbox\n\n  Options\n    --mode, -m       App mode [spa|ssr|pwa|cordova|capacitor|electron|bex] (default: spa)\n    --port, -p       A port number on which to start the application\n    --hostname, -H   A hostname to use for serving the application\n    --devtools, -d   Open remote Vue Devtools\n    --help, -h       Displays this message\n\n    Only for Cordova mode:\n    --target, -T     (required) App target [android|ios]\n    --emulator, -e   (optional) Emulator name\n                        Examples: iPhone-7, iPhone-X\n                        iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2\n    --ide, -i        Open IDE (Android Studio / XCode) instead of letting Cordova\n                       boot up the emulator / building in terminal, in which case\n                       the \"--emulator\" param will have no effect\n\n\n    Only for Capacitor mode:\n    --target, -T     (required) App target [android|ios]\n\n    Only for BEX mode:\n    --target, -T     (required) Browser family target [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: PWA Meta Tags Template\nDESCRIPTION: HTML template for PWA-specific meta tags that can be added to index.html when custom configuration is needed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/configuring-pwa.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n\n  <% if (ctx.mode.pwa) { %>\n    <meta name=\"theme-color\" content=\"<%= pwaManifest.theme_color %>\">\n    <link rel=\"mask-icon\" href=\"icons/safari-pinned-tab.svg\" color=\"<%= pwaManifest.theme_color %>\">\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\n    <meta name=\"msapplication-TileImage\" content=\"icons/ms-icon-144x144.png\">\n    <meta name=\"msapplication-TileColor\" content=\"#000000\">\n    <meta name=\"apple-mobile-web-app-title\" content=\"<%= pwaManifest.name %>\">\n    <link rel=\"apple-touch-icon\" href=\"icons/apple-icon-120x120.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"icons/apple-icon-152x152.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"icons/apple-icon-167x167.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"icons/apple-icon-180x180.png\">\n  <% } %>\n\n</head>\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Capacitor App for iOS Release\nDESCRIPTION: Command to generate a release build for iOS using Quasar CLI. This compiles web assets and optionally opens Xcode for further build steps.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T ios\n```\n\n----------------------------------------\n\nTITLE: Device Information Implementation in Vue Component\nDESCRIPTION: Vue component implementation showing how to access and display device information using the Cordova device plugin\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <q-page class=\"flex flex-center\">\n      <div>IMEI: {{ imei }}</div>\n    </q-page>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\n\nexport default {\n  setup () {\n    const imei = ref(\n      window.device === void 0\n        ? 'Run this on a mobile/tablet device'\n        : window.device\n    )\n\n    return {\n      imei\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Node Polyfill Webpack Configuration\nDESCRIPTION: Configuration for adding Node.js polyfills in Webpack 5 builds using node-polyfill-webpack-plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport nodePolyfillWebpackPlugin from 'node-polyfill-webpack-plugin'\n\nbuild: {\n  chainWebpack (chain) {\n    chain.plugin('node-polyfill').use(nodePolyfillWebpackPlugin)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing All DOM Utils in Quasar\nDESCRIPTION: Shows how to import all DOM utilities at once and access them through the dom object. Note that this approach includes unused methods in your bundle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\n\n// Offset on screen\nconsole.log(dom.offset(DomElement))\n// { top: 10, left: 100 }\n```\n\n----------------------------------------\n\nTITLE: Adding PWA Icon References to HTML\nDESCRIPTION: HTML code snippet for referencing various PWA icons in the index.html file. It includes favicon links and Apple touch startup images for different device sizes and resolutions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/app-icons-pwa.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/ico\" href=\"icons/favicon.ico\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"128x128\" href=\"icons/favicon-128x128.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"icons/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"icons/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"icons/favicon-16x16.png\">\n<!-- iPhone XR -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-828x1792.png\">\n<!-- iPhone X, XS -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1125x2436.png\">\n<!-- iPhone XS Max -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2688.png\">\n<!-- iPhone 8, 7, 6s, 6 -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-750x1334.png\">\n<!-- iPhone 8 Plus, 7 Plus, 6s Plus, 6 Plus -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2208.png\">\n<!-- iPhone 5 -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-640x1136.png\">\n<!-- iPad Mini, Air, 9.7\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1536x2048.png\">\n<!-- iPad Pro 10.5\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2224.png\">\n<!-- iPad Pro 11\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2388.png\">\n<!-- iPad Pro 12.9\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-2048x2732.png\">\n```\n\n----------------------------------------\n\nTITLE: Watching Fullscreen State Changes in Vue Components\nDESCRIPTION: Demonstrates how to watch for changes in the fullscreen state using Vue's watch function with the Quasar fullscreen API. This allows reacting to users entering or exiting fullscreen mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/app-fullscreen.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>...</template>\n\n<script>\nimport { useQuasar } from 'quasar'\nimport { watch } from 'vue'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n\n    watch(() => $q.fullscreen.isActive, val => {\n      console.log(val ? 'In fullscreen now' : 'Exited fullscreen')\n    })\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Cordova Requirements\nDESCRIPTION: Command to verify that all Cordova requirements are met for the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cordova requirements\n```\n\n----------------------------------------\n\nTITLE: Adding Offset to QTooltip in Vue\nDESCRIPTION: Shows how to add an offset to the QTooltip's position relative to its target element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With offset\" file=\"Offset\" />\n```\n\n----------------------------------------\n\nTITLE: Installing @electron/remote Package\nDESCRIPTION: Commands for installing the @electron/remote dependency using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add @electron/remote\n$ npm install --save @electron/remote\n$ pnpm add @electron/remote\n$ bun add @electron/remote\n```\n\n----------------------------------------\n\nTITLE: Absolute Position Classes\nDESCRIPTION: CSS classes for absolute positioning elements within their containing elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/positioning.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.absolute { position: absolute; }\n.absolute-center { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }\n```\n\n----------------------------------------\n\nTITLE: Creating a Testing Branch in Git\nDESCRIPTION: This snippet shows how to create a new Git branch for testing purposes using the command line.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b testing_branch\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova Mode to Quasar Project\nDESCRIPTION: Command to add Cordova mode to an existing Quasar project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add cordova\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Attributes on Notifications\nDESCRIPTION: Shows how to set custom HTML attributes on notifications and their action buttons for accessibility or other purposes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/notify.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n\n  $q.notify({\n    // ...\n\n    attrs: {\n      // for the notification itself:\n      role: 'alertdialog'\n    },\n\n    actions: [\n      {\n        icon: 'close',\n        // for individual action (button):\n        'aria-label': 'Dismiss'\n      }\n    ]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Main Process for File Access\nDESCRIPTION: JavaScript code for setting up the Electron main process to enable file access. It includes importing necessary modules, initializing @electron/remote, and configuring the BrowserWindow.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { app, BrowserWindow, nativeTheme } from 'electron'\nimport { initialize, enable } from '@electron/remote/main' // <-- add this\nimport path from 'path'\n\ninitialize() // <-- add this\n\n// ...\n\nmainWindow = new BrowserWindow({\n  // ...\n  webPreferences: {\n    sandbox: false // <-- to be able to import @electron/remote in preload script\n    // ...\n  }\n})\n\nenable(mainWindow.webContents) // <-- add this\n\nmainWindow.loadURL(process.env.APP_URL)\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Custom Color Definition\nDESCRIPTION: Example of adding custom colors to the Quasar palette using CSS\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.text-brand {\n  color: #a2aa33 !important;\n}\n.bg-brand {\n  background: #a2aa33 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useTick Composable\nDESCRIPTION: This code block provides the TypeScript definition for the useTick composable, showing its return type with registerTick and removeTick functions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-tick.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useTick(): {\n  registerTick(fn: () => void): void;\n  removeTick(): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating BEX Icons with Icon Genie CLI\nDESCRIPTION: Command to generate browser extension icons using Icon Genie CLI. Takes a source icon file and generates all required sizes for browser extensions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/app-icons-browser-extension.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m bex -i /path/to/source/icon.png\n```\n\n----------------------------------------\n\nTITLE: Header Class Customization\nDESCRIPTION: Example showing header class customization for styling\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Header Class\" file=\"HeaderClass\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Package.json in Quasar App Extension Install Script\nDESCRIPTION: Demonstrates how to extend the host app's package.json file with new properties or override existing ones using the api.extendPackageJson method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {object|string} extPkg - Object to extend with or relative path to a JSON file\n */\napi.extendPackageJson({\n  scripts: {\n    'electron': 'quasar dev -m electron'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Android SDK Environment Variables\nDESCRIPTION: Commands to verify Android SDK path configuration and environment setup\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $ANDROID_HOME\n\n# or\n\n$ echo $ANDROID_SDK_ROOT\n```\n\n----------------------------------------\n\nTITLE: Example Asset Definitions for Icon Genie Profile Files in JSON\nDESCRIPTION: Comprehensive examples of custom asset definitions that can be included in the assets array of an Icon Genie profile file, covering various generators like png, svg, splashscreen, icns, and ico for different platforms.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/profile-files.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"assets\": [\n  {\n    \"generator\": \"png\",\n    \"name\": \"icon-{size}x{size}.png\",\n    \"folder\": \"src-bex/icons\",\n    \"sizes\": [ 16, 48, 128 ]\n  },\n\n  {\n    \"generator\": \"svg\",\n    \"name\": \"safari-pinned-tab.svg\",\n    \"folder\": \"public/icons\"\n  },\n\n  {\n    \"generator\": \"splashscreen\",\n    \"name\": \"apple-launch-{size}.png\",\n    \"folder\": \"public/icons\",\n    \"sizes\": [\n      [ 1668, 2388 ]\n    ],\n    \"tag\": \"<link rel=\\\"apple-touch-startup-image\\\" media=\\\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)\\\" href=\\\"icons/{name}\\\">\" \n  },\n\n  {\n    \"generator\": \"icns\",\n    \"name\": \"icon.icns\",\n    \"folder\": \"src-electron/icons\"\n  },\n\n  {\n    \"generator\": \"ico\",\n    \"name\": \"icon.ico\",\n    \"folder\": \"src-electron/icons\"\n  },\n\n  {\n    \"generator\": \"splashscreen\",\n    \"name\": \"Default-Landscape-2436h.png\",\n    \"folder\": \"src-cordova/res/screen/ios\",\n    \"sizes\": [\n      [ 2436, 1125 ]\n    ]\n  },\n\n  {\n    \"generator\": \"png\",\n    \"name\": \"icon-29@2x.png\",\n    \"folder\": \"src-cordova/res/ios\",\n    \"sizes\": [ 58 ],\n    \"platform\": \"cordova-ios\",\n    \"background\": true\n  },\n\n  {\n    \"generator\": \"png\",\n    \"name\": \"icon-29@2x.png\",\n    \"folder\": \"src-cordova/res/ios\",\n    \"sizes\": [ 58 ],\n    \"platform\": \"cordova-ios\",\n    \"background\": true\n  },\n\n  {\n    \"generator\": \"png\",\n    \"name\": \"xxxhdpi.png\",\n    \"folder\": \"src-cordova/res/android\",\n    \"sizes\": [ 192 ],\n    \"platform\": \"cordova-android\",\n    \"density\": \"xxxhdpi\"\n  },\n\n  {\n    \"generator\": \"splashscreen\",\n    \"name\": \"Default@2x~ipad~comany.png\",\n    \"folder\": \"src-cordova/res/screen/ios\",\n    \"sizes\": [\n      [ 1278, 2732 ]\n    ],\n    \"platform\": \"cordova-ios\"\n  },\n\n  {\n    \"generator\": \"splashscreen\",\n    \"name\": \"splash-land-xxxhdpi.png\",\n    \"folder\": \"src-cordova/res/screen/android\",\n    \"sizes\": [\n      [ 1920, 1280 ]\n    ],\n    \"platform\": \"cordova-android\",\n    \"density\": \"land-xxxhdpi\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Script Logic in Quasar BEX\nDESCRIPTION: This JavaScript snippet shows the implementation of a content script for a Quasar Browser Extension. It sets up a bridge to communicate with the background script and handles the 'highlight.content' event to add a CSS class to selected elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Importing the file below initializes the content script.\n *\n * Warning:\n *   Do not remove the import statement below. It is required for the extension to work.\n *   If you don't need createBridge(), leave it as \"import '#q-app/bex/content'\".\n */\nimport { createBridge } from '#q-app/bex/content'\n\n// The use of the bridge is optional.\nconst bridge = createBridge({ debug: false })\n\nbridge.on('highlight.content', ({ payload }) => {\n  const el = document.querySelector(data.selector)\n  if (el !== null) {\n    el.classList.add('bex-highlight')\n  }\n})\n\nbridge.connectToBackground()\n  .then(() => {\n    console.log('Connected to background')\n  })\n  .catch(err => {\n    console.error('Failed to connect to background:', err)\n  })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useSplitAttrs\nDESCRIPTION: Type definition of the useSplitAttrs composable showing the return type structure with attributes and listeners as Vue refs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-split-attrs.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ref } from 'vue'\n\nfunction useSplitAttrs(): {\n  attributes: Ref<Record<string, string | null | undefined>>;\n  listeners: Ref<Record<string, (...args: any[]) => any>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Back Button Behavior in Capacitor\nDESCRIPTION: Configuration options for handling mobile device back button behavior, including exit handling and button management.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  framework: {\n    config: {\n      capacitor: {\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vertical Scrolling with QScrollArea\nDESCRIPTION: Example showing basic vertical scrolling functionality with QScrollArea component\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Vertical content\" file=\"Vertical\" />\n```\n\n----------------------------------------\n\nTITLE: SSR Preload Tag Update for Webpack\nDESCRIPTION: Changes required in the SSR server.js file to update the preload tag rendering for Webpack compatibility.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/convert-to-quasar-cli-with-webpack.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nexport const renderPreloadTag = defineSsrRenderPreloadTag((file/* , { ssrContext } */) => {\n  if (jsRE.test(file) === true) {\n-   return `<link rel=\"modulepreload\" href=\"${file}\" crossorigin>`;\n+   return `<script src=\"${file}\" defer crossorigin></script>`;\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova WkWebviewEngine Plugin\nDESCRIPTION: Command to install the Cordova WkWebviewEngine Plugin for iOS WkWebView support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cordova plugin add cordova-plugin-wkwebview-engine\n```\n\n----------------------------------------\n\nTITLE: Using QMarkupTable in UMD Environment\nDESCRIPTION: Example showing how to properly implement QMarkupTable in UMD version of Quasar. The content must be wrapped in a template tag to ensure proper browser parsing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/markup-table.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-markup-table>\n  <template>\n    <!-- your content -->\n  </template>\n</q-markup-table>\n```\n\n----------------------------------------\n\nTITLE: Conditional SSR Content in index.html\nDESCRIPTION: This HTML snippet demonstrates how to conditionally include content only for SSR builds in the index.html file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<% if (ctx.mode.ssr) { %>{{ someProp }} <% } %>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Fontawesome Pro Icons in Boot File\nDESCRIPTION: Shows how to override specific icons used by Quasar components with custom Fontawesome Pro variants in the boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/installing-icon-libraries.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@fortawesome/fontawesome-pro/css/fontawesome.min.css'\nimport '@fortawesome/fontawesome-pro/css/solid.min.css'\nimport '@fortawesome/fontawesome-pro/css/light.min.css'\n\n// example\nexport default ({ app }) => {\n  app.config.globalProperties.$q.iconSet.chip.remove = 'fas fa-times-circle'\n}\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Cordova App for Android Release\nDESCRIPTION: Commands to generate a release build for an Android app using Quasar CLI. This creates an unsigned APK file based on the settings in the config.xml file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m cordova -T android\n# or the short form:\n$ quasar build -m android\n```\n\n----------------------------------------\n\nTITLE: Referencing Asset Using Module Request Syntax\nDESCRIPTION: Illustrates how to reference an asset using the module request syntax with the '~' prefix. This leverages Vite's module resolving configurations and uses Quasar's 'assets' alias.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/handling-assets.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<img src=\"~assets/logo.png\">\n```\n\n----------------------------------------\n\nTITLE: Production Build Commands\nDESCRIPTION: Commands for building the app for production, including options for skipping package creation and IDE integration\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/build-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m [android|ios]\n\n# ..or the explicit form:\n$ quasar build -m cordova -T [ios|android]\n\n# ..or the longer form:\n$ quasar build --mode cordova --target [ios|android]\n\n# this skips .app or .apk creation and just fills in /src-cordova/www\n$ quasar build -m [ios|android] --skip-pkg\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar build -m ios -- some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Number Type Checking in Quasar\nDESCRIPTION: Demonstrates how to verify if a value is a number using is.number utility method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/type-checking-utils.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { is } from 'quasar'\n\nconst myNumber = 80\nconsole.log( is.number(myNumber) ) // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Window Bar in HTML\nDESCRIPTION: HTML example showing how to create a draggable window bar and add exceptions to certain elements.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<q-bar class=\"q-electron-drag\">\n  <q-icon name=\"map\" class=\"q-electron-drag--exception\" />\n\n  <div>My title</div>\n</q-bar>\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadingBar Ajax Filter\nDESCRIPTION: Demonstrates how to configure URL filtering for LoadingBar triggers using the hijackFilter property.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/loading-bar.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoadingBar } from 'quasar'\n\nLoadingBar.setDefaults({\n  // return a Boolean which has the meaning of\n  // \"does this URL should trigger LoadingBar?\"\n  hijackFilter (url) {\n    // example (only https://my-service.com/* should trigger)\n    return /^https:\\/\\/my-service\\.com/.test(url)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Quasar Repository as Remote Upstream\nDESCRIPTION: Command to add the main Quasar repository as a remote named 'upstream'. This allows you to sync your fork with the latest changes from the main repository.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream https://github.com/quasarframework/quasar.git\n```\n\n----------------------------------------\n\nTITLE: Enabling RTL in Quasar CLI with Webpack\nDESCRIPTION: Configuration for enabling RTL support in a Quasar project using Webpack by setting the rtl property to true in the build section of the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  rtl: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables - Unix\nDESCRIPTION: Configuration of Android SDK environment variables and PATH settings for Unix-based systems (macOS, Linux). Sets up ANDROID_HOME and ANDROID_SDK_ROOT paths.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport ANDROID_SDK_ROOT=\"$HOME/Android/Sdk\"\nPATH=$PATH:$ANDROID_SDK_ROOT/tools; PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Using Image URLs as Icons in Quasar\nDESCRIPTION: Explains how to use image URLs (including SVG, PNG, JPG) as icons in Quasar components using the 'img:' prefix.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<q-icon name=\"img:https://cdn.quasar.dev/logo-v2/svg/logo.svg\" />\n<q-btn icon=\"img:https://cdn.quasar.dev/logo-v2/svg/logo.svg\" ... />\n\n<!-- reference from /public: -->\n<q-icon name=\"img:my/path/to/some.svg\" />\n```\n\n----------------------------------------\n\nTITLE: Linux Device Permission Rules Configuration\nDESCRIPTION: Commands to set up Android device permissions on Linux systems\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# create the .rules file and insert the content\n# from below this example\nsudo vim /etc/udev/rules.d/51-android.rules\nsudo chmod 644   /etc/udev/rules.d/51-android.rules\nsudo chown root. /etc/udev/rules.d/51-android.rules\nsudo service udev restart\nsudo killall adb\n```\n\n----------------------------------------\n\nTITLE: Configuring QEditor Dropdowns\nDESCRIPTION: Demonstrates setting up different types of dropdowns in QEditor toolbar with various combinations of icons and labels.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/editor.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<q-editor\n  v-model=\"model\"\n  :toolbar=\"[\n    [\n      {\n        label: 'Icons & Label',\n        icon: 'filter_1',\n        fixedLabel: true,\n        fixedIcon: true,\n        options: ['bold', 'italic', 'strike', 'underline']\n      }\n    ],\n    [\n      {\n        label: 'Only label',\n        icon: 'filter_2',\n        fixedLabel: true,\n        fixedIcon: true,\n        list: 'no-icons',\n        options: ['bold', 'italic', 'strike', 'underline']\n      }\n    ],\n    [\n      {\n        label: 'Only icons',\n        icon: 'filter_3',\n        fixedLabel: true,\n        fixedIcon: true,\n        list: 'only-icons',\n        options: ['bold', 'italic', 'strike', 'underline']\n      }\n    ]\n  ]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Quasar Boot File for Analytics\nDESCRIPTION: Command to generate a new boot file for Google Analytics integration in a Quasar project. Supports optional TypeScript format.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new boot google-analytics [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Quasar JSON API Basic Structure\nDESCRIPTION: Presents the basic structure of the Quasar JSON API schema, including sections for props, events, slots, and methods.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"props\": {\n  },\n  \"events\": {\n  },\n  \"slots\": {\n  },\n  \"methods\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TypeScript and Linting in Quasar App Extension Uninstall Script\nDESCRIPTION: Demonstrates how to check if the host project has TypeScript or ESLint active using the api.hasTypescript and api.hasLint methods. These methods are available in @quasar/app-vite 1.6+ and @quasar/app-webpack 3.11+.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @return {Promise<boolean>} host project has Typescript active or not\n */\nawait api.hasTypescript()\n\n/**\n * @return {Promise<boolean>} host project has ESLint or not\n */\nawait api.hasLint()\n```\n\n----------------------------------------\n\nTITLE: Changing Specific Icon at Runtime (Options API)\nDESCRIPTION: Example of changing a specific icon at runtime using the Options API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmethods: {\n  changeQEditorHeaderIcon () {\n    this.$q.iconSet.editor.header1 = 'fas fa-font'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Design Customization for QBtnToggle\nDESCRIPTION: Shows how to customize the design of QBtnToggle using QBtn styling props.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-toggle.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Some design examples\" file=\"Design\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom 500 Error Route in Vue Router\nDESCRIPTION: This snippet demonstrates how to add a specific route for handling 500 errors in Vue Router. It defines a path that will render a custom Error500 component when accessed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ path: 'error500', component: () => import('pages/Error500.vue') }\n```\n\n----------------------------------------\n\nTITLE: Formatting Quasar Application Files\nDESCRIPTION: Commands to format project files using either yarn or npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-vite-2/BASE/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n# or\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Registering Content Scripts in manifest.json for Quasar BEX\nDESCRIPTION: This snippet shows how to register content scripts in the manifest.json file for a Quasar Browser Extension. It specifies the URLs to match, CSS and JavaScript files to inject.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"content_scripts\": [\n  {\n    \"matches\": [ \"<all_urls>\" ],\n    \"css\": [ \"assets/content.css\" ],\n    \"js\": [ \"my-content-script.ts\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Source Files in Quasar Config\nDESCRIPTION: Configuration for specifying custom Electron main process source files. Allows changing the default electron-main file location.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/configuring-electron.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsourceFiles: {\n  electronMain?: 'src-electron/electron-main',\n}\n```\n\n----------------------------------------\n\nTITLE: Flex and Display CSS Class Patterns\nDESCRIPTION: Defines the available responsive CSS class patterns for flex and display properties. These classes are breakpoint-aware and follow a consistent naming convention using the <bp> placeholder for breakpoints.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.flex-<bp>-(block|inline)\n.(row|column|flex)-<bp>(|-inline-<bp>)\n.reverse-<bp>\n.(wrap|no-wrap|reverse-wrap)-<bp>\n.order-<bp>-(first|last|none)\n.justify-<bp>-(start|end|center|between|around|evenly)\n.items-<bp>-(start|end|center|baseline|stretch)\n.content-<bp>-(start|end|center|between|around)\n.self-<bp>-(start|end|center|baseline|stretch)\n.flex-<bp>-center\n.q-gutter-<bp>(|-x|-y)-(xs|sm|md|lg|xl)\n.(col|offset)-<bp>-(|0..12)\n```\n\n----------------------------------------\n\nTITLE: Defining Methods in Quasar JSON API\nDESCRIPTION: Shows how to define methods in the Quasar JSON API, including method parameters, return values, and examples.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n  \"methods\": {\n    \"focus\": {\n      \"desc\": \"Focus on first focusable element/component in the form\"\n    },\n\n    \"validate\": {\n      \"desc\": \"Triggers a validation on all applicable inner Quasar components\",\n      \"params\": {\n        \"shouldFocus\": {\n          \"type\": \"Boolean\",\n          \"desc\": \"Tell if it should focus or not on component with error on submitting form; Overrides 'no-focus-error' prop if specified\"\n        }\n      },\n      \"returns\": {\n        \"type\": \"Promise<boolean>\",\n        \"desc\": \"Promise is always fulfilled and receives the outcome (true -> validation was a success, false -> invalid models detected)\",\n        \"examples\": [\n          \"validate().then(outcome => { ... })\"\n        ]\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Config for PWA\nDESCRIPTION: Example of extending Vite configuration specifically for PWA mode in Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/configuring-pwa.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig((ctx) => {\n  return {\n    build: {\n      extendViteConf (viteConf) {\n        if (ctx.mode.pwa) {\n          // do something with viteConf\n          // or return an object to deeply merge with current viteConf\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Android Device udev Rules Configuration\nDESCRIPTION: This snippet shows the content of the udev rules file that grants permissions for various Android devices on Linux systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0e79\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0502\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0b05\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"413c\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0489\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"091e\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"18d1\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"12d1\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"24e3\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2116\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0482\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"17ef\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1004\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"22b8\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0409\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2080\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0955\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2257\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"10a9\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1d4d\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0471\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04da\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"05c6\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1f53\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04e8\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04dd\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fce\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0930\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"19d2\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1bbb\", MODE=\"0666\"\n```\n\n----------------------------------------\n\nTITLE: Adding PWA Mode to Quasar Project\nDESCRIPTION: Command to add PWA mode to an existing Quasar project using Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-pwa/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add pwa\n```\n\n----------------------------------------\n\nTITLE: Vertical QRange Implementation\nDESCRIPTION: Shows how to implement QRange in vertical orientation rather than the default horizontal layout.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/range.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Vertical orientation\" file=\"Vertical\" />\n```\n\n----------------------------------------\n\nTITLE: RTL-Aware CSS Example with Direction Handling\nDESCRIPTION: Example of CSS rules that will be automatically transformed for RTL layouts, showing how direction-sensitive properties like margin-left and right are handled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.my-class {\n  margin-left: 10px;\n  right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Capacitor Apps for Production\nDESCRIPTION: Commands for building production-ready Capacitor apps for iOS or Android platforms. Supports both short and long form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android]\n\n# ..or the longer form:\n$ quasar build --mode capacitor --target [ios|android]\n```\n\n----------------------------------------\n\nTITLE: Stepper Color Customization\nDESCRIPTION: Example demonstrating color customization options for stepper\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Coloring\" file=\"Coloring\" />\n```\n\n----------------------------------------\n\nTITLE: Building SSR Production Bundle with Debug Mode\nDESCRIPTION: Commands to create a production build with debugging enabled for SSR mode. Demonstrates both short and long form command options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m ssr -d\n\n# ..or the longer form\n$ quasar build -m ssr --debug\n```\n\n----------------------------------------\n\nTITLE: Basic QBtnToggle Implementation\nDESCRIPTION: Demonstrates the basic usage of QBtnToggle component for user input selection.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/button-toggle.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic\" file=\"Basic\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Installation in Quasar App Extension Uninstall Script\nDESCRIPTION: Shows how to use the api.hasExtension method to check if another app extension is installed in the host app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Check if another app extension is installed\n *\n * @param {string} extId\n * @return {boolean} has the extension installed.\n */\nif (api.hasExtension(extId)) {\n  // hey, we have it\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Paths in Quasar App Extension Install Script\nDESCRIPTION: Demonstrates how to use the api.resolve method to resolve paths within the app where the App Extension is running. This eliminates the need to import the 'path' module and resolve paths manually.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// resolves to root of app\napi.resolve.app('src/my-file.js')\n\n// resolves to root/src of app\napi.resolve.src('my-file.js')\n\n// resolves to root/public of app\n// (@quasar/app-webpack v3.4+ or @quasar/app-vite v1+)\napi.resolve.public('my-image.png')\n\n// resolves to root/src-pwa of app\napi.resolve.pwa('some-file.js')\n\n// resolves to root/src-ssr of app\napi.resolve.ssr('some-file.js')\n\n// resolves to root/src-cordova of app\napi.resolve.cordova('config.xml')\n\n// resolves to root/src-electron of app\napi.resolve.electron('some-file.js')\n\n// resolves to root/src-bex of app\napi.resolve.bex('some-file.js')\n```\n\n----------------------------------------\n\nTITLE: Python Flask Upload Server\nDESCRIPTION: Flask server implementation for handling file uploads with CORS support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/uploader.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request\nfrom werkzeug import secure_filename\nfrom flask_cors import CORS\nimport os\n\napp = Flask(__name__)\n\ncors = CORS()\ncors.init_app(app, resource={r\"/api/*\": {\"origins\": \"*\"}})\n\n@app.route('/upload', methods=['POST'])\ndef upload():\n    for fname in request.files:\n        f = request.files.get(fname)\n        print(f)\n        f.save('./uploads/%s' % secure_filename(fname))\n\n    return 'Okay!'\n\nif __name__ == '__main__':\n    if not os.path.exists('./uploads'):\n        os.mkdir('./uploads')\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: RTL CSS Exception with Ignore Comment\nDESCRIPTION: Example of using the rtl:ignore comment to prevent a CSS rule from being transformed for RTL layouts, ensuring the same margin-left is used in both LTR and RTL modes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.my-class {\n  margin-left: 10px /* rtl:ignore */;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Classes in HTML\nDESCRIPTION: Demonstrates how to use Quasar's color classes for text and background colors in HTML templates\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- changing text color -->\n<p class=\"text-primary\">....</p>\n\n<!-- changing background color -->\n<p class=\"bg-positive\">...</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Camera Plugin\nDESCRIPTION: Command to install the Cordova camera plugin from the src-cordova directory\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# from /src-cordova:\n$ cordova plugin add cordova-plugin-camera\n```\n\n----------------------------------------\n\nTITLE: Verify Command Help with Options in Icon Genie CLI\nDESCRIPTION: Documentation for the 'verify' command, which checks that all required app icons and splash screens are present with correct resolutions. Shows options for mode selection, filtering, and using profile files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/command-list.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie -h\n\n  Description\n    Verifies your Quasar App's icons and splash screens\n    for all installed modes.\n\n  Usage\n    $ icongenie verify [options]\n\n    # verify all Quasar modes\n    $ icongenie verify\n\n    # verify specific mode\n    $ icongenie verify -m spa\n\n    # verify with specific filter\n    $ icongenie verify -f ico\n\n    # verify by using a profile file\n    $ icongenie verify -p ./icongenie-profile.json\n\n    # verify by using batch of profile files\n    $ icongenie verify -p ./folder-containing-profile-files\n\n  Options\n    --mode, -m      For which Quasar mode(s) to verify the assets;\n                    Default: all\n                      [all|spa|pwa|ssr|bex|cordova|capacitor|electron]\n                    Multiple can be specified, separated by \",\":\n                      spa,cordova,capacitor\n\n    --filter, -f    Filter the available generators; when used, it verifies\n                    only one type of asset instead of all\n                      [png|ico|icns|splashscreen|svg]\n\n    --profile       Use JSON profile file(s) to extract the asset list to verify:\n                      - path to folder (absolute or relative to current folder)\n                        that contains JSON profile files (icongenie-*.json)\n                      - path to a single *.json profile file (absolute or relative\n                        to current folder)\n                    Structure of a JSON profile file:\n                      {\n                        \"params\": {\n                          \"include\": [ ... ], /* optional */\n                          ...\n                        },\n                        \"assets\": [ /* list of custom assets */ ]\n                      }\n\n    --help, -h      Displays this message\n```\n\n----------------------------------------\n\nTITLE: Defining Slots in Quasar JSON API\nDESCRIPTION: Demonstrates how to define slots in the Quasar JSON API, including slot scopes and their properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n  \"slots\": {\n    \"default\": {\n      \"desc\": \"This is where Banner content goes\"\n    },\n\n    \"avatar\": {\n      \"desc\": \"Slot for displaying an avatar (suggestions: QIcon, QAvatar)\"\n    },\n\n    \"selected-item\": {\n      \"desc\": \"Override default selection slot; Suggestion: QChip\",\n      \"scope\": {\n        \"index\": {\n          \"type\": \"Number\",\n          \"desc\": \"Selection index\",\n          \"examples\": [ 0 ]\n        },\n        \"opt\": {\n          \"type\": \"Any\",\n          \"desc\": \"Selected option -- its value is taken from model\"\n        },\n        \"selected\": {\n          \"type\": \"Boolean\",\n          \"desc\": \"Always true -- passed down as prop to QItem (when using QItem)\"\n        },\n        \"removeAtIndex\": {\n          \"type\": \"Function\",\n          \"desc\": \"Remove selected option located at specific index\",\n          \"params\": {\n            \"index\": {\n              \"type\": \"Number\",\n              \"required\": true,\n              \"desc\": \"Index at which to remove selection\",\n              \"examples\": [ 0 ]\n            }\n          },\n          \"returns\": null\n        },\n        \"toggleOption\": {\n          \"type\": \"Function\",\n          \"desc\": \"Add/remove option from model\",\n          \"params\": {\n            \"opt\": {\n              \"type\": \"Any\",\n              \"required\": true,\n              \"desc\": \"Option to add to model\",\n              \"__exemption\": [ \"examples\" ]\n            }\n          },\n          \"returns\": null\n        },\n        \"tabindex\": {\n          \"type\": \"Number\",\n          \"desc\": \"Tabindex HTML attribute value associated with respective option\",\n          \"values\": [ 0, -1 ]\n        }\n      }\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Compatibility in package.json for Quasar Projects\nDESCRIPTION: This snippet shows the default 'browserslist' configuration in package.json for a Quasar project. It specifies the range of browsers that the project targets, which Babel and Autoprefixer use to determine JS transpilation and CSS vendor prefixes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/browser-compatibility.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"browserslist\": [\n  \"last 10 Chrome versions\",\n  \"last 10 Firefox versions\",\n  \"last 4 Edge versions\",\n  \"last 7 Safari versions\",\n  \"last 8 Android versions\",\n  \"last 8 ChromeAndroid versions\",\n  \"last 8 FirefoxAndroid versions\",\n  \"last 10 iOS versions\",\n  \"last 5 Opera versions\"\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Quasar Project Files\nDESCRIPTION: Commands to format project files using either yarn or npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-vite-2/BASE/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n# or\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Responsive Spacing Classes\nDESCRIPTION: Defines the pattern for responsive spacing classes that handle both padding and margin properties across different breakpoints.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/introduction-to-flexbox.md#2025-04-16_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.q-(p|m)(t|r|b|l|a|x|y)-<bp>-(none|auto|xs|sm|md|lg|xl)\n```\n\n----------------------------------------\n\nTITLE: Radio Button with Custom Colors\nDESCRIPTION: Implementation showing color customization options including the keep-color property\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/radio.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Coloring\" file=\"Coloring\" />\n```\n\n----------------------------------------\n\nTITLE: Updating a Quasar App Extension\nDESCRIPTION: Command to update an existing App Extension, which uses the same syntax as installation. This may overwrite customized files with updated versions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar ext add <ext-id>\n```\n\n----------------------------------------\n\nTITLE: Updating SSR preload tag rendering\nDESCRIPTION: Changes to the renderPreloadTag function in the SSR server.js file to use link rel=\"modulepreload\" instead of script tags.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nexport const renderPreloadTag = defineSsrRenderPreloadTag((file/* , { ssrContext } */) => {\n  if (jsRE.test(file) === true) {\n-   return `<script src=\"${file}\" defer crossorigin></script>`;\n+   return `<link rel=\"modulepreload\" href=\"${file}\" crossorigin>`;\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Test Watch Mode - Bash\nDESCRIPTION: Commands for running tests in watch mode with and without UI\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/testing/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# withOUT Vitest UI:\n$ pnpm test:watch\n\n# to watch only a specific file pattern\n$ pnpm test:watch \"QList\"\n\n# with Vitest UI:\n$ pnpm test:watch:ui\n```\n\n----------------------------------------\n\nTITLE: Registering Content Scripts in Manifest\nDESCRIPTION: Configuration in manifest.json to register content scripts for the browser extension, including CSS and JavaScript file mappings that should run in the context of web pages.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"content_scripts\": [\n  {\n    \"matches\": [ \"<all_urls>\" ],\n    \"css\": [ \"assets/content.css\" ],\n    \"js\": [ \"my-content-script.ts\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: BEX Content Script Implementation\nDESCRIPTION: Content script for injecting Quasar app into web pages via iFrame with dynamic height adjustment functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createBridge } from '#q-app/bex/content'\n\nconst bridge = createBridge({ debug: false });\n\nbridge.on('wb.drawer.toggle', ({ data, respond }) => {\n  if (data.open) {\n    setIFrameHeight('100%')\n  } else {\n    resetIFrameHeight()\n  }\n  respond()\n})\n\nconst iFrame = document.createElement('iframe')\nconst defaultFrameHeight = '62px'\n\nfunction setIFrameHeight (height) {\n  iFrame.height = height\n}\n\nfunction resetIFrameHeight () {\n  setIFrameHeight(defaultFrameHeight)\n}\n\niFrame.id = 'bex-app-iframe'\niFrame.width = '100%'\nresetIFrameHeight()\n\nObject.assign(iFrame.style, {\n  position: 'fixed',\n  top: '0',\n  right: '0',\n  bottom: '0',\n  left: '0',\n  border: '0',\n  zIndex: '9999999',\n  overflow: 'visible'\n})\n\n;(function () {\n  iFrame.src = chrome.runtime.getURL('www/index.html')\n  document.body.prepend(iFrame)\n})()\n```\n\n----------------------------------------\n\nTITLE: Processing Terminal Environment Variables in Quasar Config\nDESCRIPTION: Example of accessing terminal environment variables in the quasar.config file and using them to define application environment variables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-process-env.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// then we pick it up in the /quasar.config file\nbuild: {\n  env: {\n    API: ctx.dev\n      ? 'https://dev.' + process.env.MY_API\n      : 'https://prod.' + process.env.MY_API\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Step Prefix Implementation\nDESCRIPTION: Example showing use of prefix instead of icons in stepper\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Step prefix\" file=\"Prefix\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Roboto Font in Quasar Config\nDESCRIPTION: Configuration snippet showing how to include Roboto font in Quasar application through the extras configuration in quasar.config file\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/typography/typography.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nextras: [\n  'roboto-font'\n]\n```\n\n----------------------------------------\n\nTITLE: Using QScrollObserver with QScrollArea\nDESCRIPTION: Demonstrates integration of QScrollObserver within QScrollArea component with specific dimensions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-observer.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<q-scroll-area style=\"width: 400px; height: 500px;\" class=\"bg-yellow\">\n  ...content expanding over the 500px height from container...\n  <q-scroll-observer @scroll=\"scrollHandler\" />\n</q-scroll-area>\n```\n\n----------------------------------------\n\nTITLE: Example of openURL with Window Features\nDESCRIPTION: Shows how to use openURL with custom window features when opening URLs. The windowFeatures parameter allows controlling aspects of the new window like menubar, toolbar, and security settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nopenURL(\n  'http://...',\n  undefined, // in this example we don't care about the rejectFn()\n\n  // this is the windowFeatures Object param:\n  {\n    noopener: true, // this is set by default for security purposes\n                    // but it can be disabled if specified with a Boolean false value\n    menubar: true,\n    toolbar: true,\n    noreferrer: true,\n    // .....any other window features\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: New SSR Middleware Template\nDESCRIPTION: Default template generated when creating a new SSR middleware file using Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\n// \"async\" is optional!\n// remove it if you don't need it\nexport default async ({ app, port, resolveUrlPath, publicPath, folders, render, serve }) => {\n  // something to do with the server \"app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Core Team Members Display Template\nDESCRIPTION: Vue template section that renders the core team members using the TeamMember component in a responsive grid layout.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/meet-the-team/meet-the-team.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"row items-stretch q-gutter-sm\">\n  <TeamMember\n    v-for=\"m in scope.core\"\n    :key=\"m.name\"\n    :name=\"m.name\"\n    :role=\"m.role\"\n    :avatar=\"m.avatar\"\n    :email=\"m.email\"\n    :twitter=\"m.twitter\"\n    :github=\"m.github\"\n    :desc=\"m.desc\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Quasar Directives Usage\nDESCRIPTION: Examples of using Quasar's custom Vue directives for touch interactions and visual effects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-pan=\"handler\">...</div>\n<div v-touch-swipe=\"handler\">...</div>\n<div v-ripple>Click me. I got ripples.</div>\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Development Server\nDESCRIPTION: Commands to navigate to the docs directory and start the development server for the documentation. This allows you to preview changes to the documentation in real-time.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd docs\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building Electron Apps for Production with Quasar CLI\nDESCRIPTION: Commands for building Electron apps for production, including an option for debugging the UI code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m electron\n\n# ..or the longer form:\n$ quasar build --mode electron\n\n# If you want a production build with debugging enabled for the UI code:\n$ quasar build -m electron -d\n\n# ..or the longer form\n$ quasar build -m electron --debug\n```\n\n----------------------------------------\n\nTITLE: Alternative Labels Implementation\nDESCRIPTION: Example showing alternative label styling for stepper\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Alternative labels\" file=\"AlternativeLabels\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Button Component Implementation\nDESCRIPTION: A set of Quasar button components with custom styling and routing configuration for different installation methods.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/pick-quasar-flavour.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"q-mx-md row items-stretch q-gutter-xs\">\n  <q-btn no-caps color=\"purple\" push stack padding=\"sm lg\" to=\"/start/quasar-cli\">\n    <span class=\"text-bold\">Quasar CLI (with Vite or Webpack)</span>\n    <span style=\"font-size:0.8em\">Strongly recommended - the premium DX</span>\n  </q-btn>\n  <q-btn label=\"UMD/Standalone\" color=\"teal-6\" no-caps push to=\"/start/umd\" />\n  <q-btn label=\"Vite plugin\" color=\"teal-6\" no-caps push to=\"/start/vite-plugin\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling QTooltip with v-model in Vue\nDESCRIPTION: Shows how to toggle the QTooltip visibility using v-model binding in Vue.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tooltip/tooltip.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Toggle through v-model\" file=\"VModel\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Exit Log in Quasar App Extension Uninstall Script\nDESCRIPTION: Shows how to use the api.onExitLog method to add a message to be printed after the App CLI finishes uninstalling the App Extension and is about to exit.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} msg\n */\napi.onExitLog('Thanks for having used my extension')\n```\n\n----------------------------------------\n\nTITLE: Extending SSR Webserver Configuration in Quasar\nDESCRIPTION: Hook for modifying the esbuild configuration used for SSR webserver, including SSR middlewares.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nif (api.hasVite === true) {\n  api.extendSSRWebserverConf((esbuildConf, api) => {\n    // add/remove/change Quasar CLI generated esbuild config object\n    // that is used for the SSR webserver (includes SSR middlewares)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cordova Back Button in Quasar\nDESCRIPTION: Configuration options for handling back button behavior in Cordova applications using Quasar framework config.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/dialog.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// quasar.config file\nreturn {\n  framework: {\n    config: {\n      cordova: {\n        // Quasar handles app exit on mobile phone back button.\n        backButtonExit: true/false/'*'/['/login', '/home', '/my-page'],\n\n        // On the other hand, the following completely\n        // disables Quasar's back button management.\n        backButton: true/false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RTL Exception in SCSS with Indented Syntax\nDESCRIPTION: Example of using the rtl:ignore comment in SCSS with indented syntax to prevent a margin-left property from being transformed for RTL layouts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_7\n\nLANGUAGE: sass\nCODE:\n```\n.my-class\n  margin-left: 10px #{\"/* rtl:ignore */\"}\n```\n\n----------------------------------------\n\nTITLE: QResponsive with QCard Integration\nDESCRIPTION: Example of using QResponsive to maintain aspect ratio for QCard components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Tunnelmole HTTPS Setup Command\nDESCRIPTION: Command line example for setting up HTTPS tunneling using tunnelmole for local development\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-pwa/handling-service-worker.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80\nhttp://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\nhttps://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v2 Dependencies\nDESCRIPTION: Package.json dependencies configuration for Capacitor v2, including core CLI and runtime dependencies.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/cli\": \"^2.0.0\",\n  \"@capacitor/core\": \"^2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Example of exportFile with Character Encoding\nDESCRIPTION: Demonstrates using exportFile with custom character encoding and MIME type for exporting a CSV file with specific character set. Useful for handling international characters in exported files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exportFile } from 'quasar'\n\nconst status = exportFile('file.csv', 'éà; ça; 12\\nà@€; çï; 13', {\n  encoding: 'windows-1252',\n  mimeType: 'text/csv;charset=windows-1252;'\n})\n\nif (status === true) {\n  // browser allowed it\n}\nelse {\n  // browser denied it\n  console.error('Error: ' + status)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prettier as Default Formatter in VS Code for Quasar Projects\nDESCRIPTION: VS Code configuration to set Prettier as the default formatter when using Prettier with ESLint in Quasar projects.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vs-code-configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quasar Icon Set in UMD\nDESCRIPTION: Example of including and configuring a Quasar Icon Set in UMD/Standalone setup using CDN.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/quasar-icon-sets.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- include this after Quasar JS tag -->\n<script src=\"https://cdn.jsdelivr.net/npm/quasar@v2/dist/icon-set/fontawesome-v6.umd.prod.js\"></script>\n<script>\n  Quasar.IconSet.set(Quasar.IconSet.fontawesomeV6)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dense Radio Button Layout\nDESCRIPTION: Example showing how to implement dense radio buttons with compact spacing\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/radio.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Dense\" file=\"Dense\" />\n```\n\n----------------------------------------\n\nTITLE: Building Cordova Apps with IDE\nDESCRIPTION: Command to prepare Cordova app for manual building using the IDE (Android Studio / Xcode).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m [ios|android] --ide\n```\n\n----------------------------------------\n\nTITLE: Exploring the Quasar Global Object Structure in JavaScript\nDESCRIPTION: Overview of the Quasar global object that gets injected when using the UMD version, containing components, directives, plugins, utilities, and version information.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nQuasar = {\n  version, // Quasar version\n\n  ...components,\n  ...directives,\n  ...plugins, // Quasar plugins\n  ...utils, // Quasar utils\n\n  // if you want to change current icon set or Quasar Language pack\n  // (must include CDN links so they are available first!)\n  lang,\n  iconSet\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Highlighted Content in Quasar BEX\nDESCRIPTION: This CSS snippet defines the styling for highlighted content in a Quasar Browser Extension. It sets a red background color for elements with the 'bex-highlight' class.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.bex-highlight {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Content Script Implementation\nDESCRIPTION: Implementation of the content script that creates a bridge to the background script and handles highlight events from the Quasar app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/content-scripts.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Importing the file below initializes the content script.\n *\n * Warning:\n *   Do not remove the import statement below. It is required for the extension to work.\n *   If you don't need createBridge(), leave it as \"import '#q-app/bex/content'\".\n */\nimport { createBridge } from '#q-app/bex/content'\n\n// The use of the bridge is optional.\nconst bridge = createBridge({ debug: false })\n\nbridge.on('highlight.content', ({ payload }) => {\n  const el = document.querySelector(data.selector)\n  if (el !== null) {\n    el.classList.add('bex-highlight')\n  }\n})\n\nbridge.connectToBackground()\n  .then(() => {\n    console.log('Connected to background')\n  })\n  .catch(err => {\n    console.error('Failed to connect to background:', err)\n  })\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar AE Playground in Development Mode\nDESCRIPTION: Commands to start the Quasar AE playground app in development mode, enabling features like hot-code reloading and error reporting. The specific package manager command is dynamically inserted based on the project configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-vite/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run dev\nyarn dev\npnpm dev\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Disabling iOS Overscroll in Cordova Config\nDESCRIPTION: XML configuration for disabling the iOS rubber band (overscroll) effect in Cordova applications. This preference should be added to the src-cordova/config.xml file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<preference name=\"DisallowOverscroll\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Genie CLI with different package managers\nDESCRIPTION: Commands to install the Icon Genie CLI globally using different package managers (Yarn, NPM, PNPM, and Bun). Requires Node.js version 18 or higher.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Node.js >=18 is required.\n$ yarn global add @quasar/icongenie\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Node.js >=18 is required.\n$ npm i -g @quasar/icongenie\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Node.js >=18 is required.\n$ pnpm add -g @quasar/icongenie\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Node.js >=18 is required.\n$ bun install -g @quasar/icongenie\n```\n\n----------------------------------------\n\nTITLE: Quasar Drawer Logic Implementation\nDESCRIPTION: Vue component setup function implementing drawer toggle functionality with BEX messaging.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\nimport { ref } from 'vue'\n\nsetup () {\n  const $q = useQuasar()\n  const drawerIsOpen = ref(true)\n\n  async function drawerToggled () {\n    await $q.bex.send('wb.drawer.toggle', {\n      open: drawerIsOpen.value\n    })\n\n    drawerIsOpen.value = !drawerIsOpen.value\n  }\n\n  return { drawerToggled }\n}\n```\n\n----------------------------------------\n\nTITLE: Touch Swipe Event Inhibition\nDESCRIPTION: Example showing how to inhibit touch swipe events in specific areas by stopping event propagation. Uses stopPropagation() on touchstart and mousedown events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-swipe.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-swipe.mouse=\"userSwiped\">\n  <!-- ...content -->\n  <div @touchstart.stop @mousedown.stop>\n    <!--\n      TouchSwipe will not apply here because\n      we are calling stopPropagation() on touchstart\n      and mousedown events\n    -->\n  </div>\n  <!-- ...content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ComponentsListing in Vue\nDESCRIPTION: This snippet imports the ComponentsListing component and renders it in the template. It's part of a Vue single-file component structure used for documenting Quasar components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/components/components.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport ComponentsListing from './ComponentsListing.vue'\n</script>\n\n<ComponentsListing />\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Width (JavaScript)\nDESCRIPTION: Method to get the scrolling container's inner width in pixels.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getScrollWidth } = scroll\n\n// get scrolling container inner height\ngetScrollWidth(scrollTargetDomElement) // returns a Number\n\nconsole.log( getScrollWidth(el) )\n// 824 (it's in pixels always)\n```\n\n----------------------------------------\n\nTITLE: Implementing Webpack Chaining for Markdown Processing in JavaScript\nDESCRIPTION: This snippet defines a chainWebpack function that configures Webpack to process Markdown files. It uses vue-loader and ware-loader to transform Markdown content into Vue template syntax. The function sets up rules for handling .md files, configures vue-loader options, and uses markdown-it to render Markdown to HTML.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/chain-webpack.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkdownIt from 'markdown-it'\n\nconst md = new MarkdownIt()\n\nconst chainWebpack = (ctx, chain) => {\n  const rule = chain.module.rule('md')\n    .test(/\\.md$/)\n    .pre()\n\n  rule.use('v-loader')\n    .loader('vue-loader')\n    .options({\n      productionMode: ctx.prod,\n      transformAssetUrls: {\n        video: 'src',\n        source: 'src',\n        img: 'src',\n        image: 'xlink:href'\n      }\n    })\n\n  rule.use('ware-loader')\n    .loader('ware-loader')\n    .options({\n      raw: true,\n      middleware: function (source) {\n        // use markdown-it to render the markdown file to html, then\n        // surround the output of that that with Vue template syntax\n        // so it can be processed by the 'vue-loader'\n        return `<template><div>${md.render(source)}</div></template>`\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar Config Source Files Configuration\nDESCRIPTION: Configuration for customizing the location of Electron main and preload script files in quasar.config.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// should you wish to change default files\nsourceFiles: {\n  electronMain: 'src-electron/electron-main.js'\n}\n```\n\n----------------------------------------\n\nTITLE: QToggle with Dark Mode in Vue\nDESCRIPTION: Shows how to implement QToggle in dark mode for different visual styling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Force dark mode\" file=\"DarkBackground\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing SSR Context in Various Framework Components\nDESCRIPTION: Demonstrates how to access ssrContext in boot files, router configuration, store setup, and preFetch feature.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-context.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// a boot file\nexport default defineBoot(({ ..., ssrContext }) => { /* ... */ })\n\n// src/router/index.js\nexport default defineRouter(({ ..., ssrContext }) { /* ... */ })\n\n// src/store/index.js\nexport default defineStore(({ ..., ssrContext }) { /* ... */ })\n\n// with preFetch:\npreFetch: definePreFetch(({ ..., ssrContext }) { /* ... */ })\n```\n\n----------------------------------------\n\nTITLE: QSplitter Image Examples\nDESCRIPTION: Fun examples showing QSplitter implementation with images.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/splitter.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Image Fun\" file=\"ImageFun\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Reactive Images\" file=\"ReactiveImages\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnelmole CLI with Package Managers\nDESCRIPTION: Commands for installing the Tunnelmole CLI tool globally using different package managers (Yarn, NPM, PNPM, Bun).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add tunnelmole\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g tunnelmole\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -g tunnelmole\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add -g tunnelmole\n```\n\n----------------------------------------\n\nTITLE: Customizing v-touch-hold Sensitivity in Vue\nDESCRIPTION: Demonstrates how to adjust the sensitivity of the v-touch-hold directive for both touch and mouse events. The format is wait_time:touch_sensitivity:mouse_sensitivity.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-hold.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-hold:600:12:15=\"userHasHold\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Extract Date with Custom Locale in Quasar\nDESCRIPTION: Demonstrates how to parse a date string with custom locale settings using Quasar's extractDate function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst obj = date.extractDate('Month: Feb, Day: 11th, Year: 2018', '[Month: ]MMM[, Day: ]Do[, Year: ]YYYY', {\n  days: ['Duminica', 'Luni', /* and all the rest of days - remember starting with Sunday */],\n  daysShort: ['Dum', 'Lun', /* and all the rest of days - remember starting with Sunday */],\n  months: ['Ianuarie', 'Februarie', /* and all the rest of months */],\n  monthsShort: ['Ian', 'Feb', /* and all the rest of months */]\n})\n// obj is a new Date() object\n```\n\n----------------------------------------\n\nTITLE: Specifying iOS Emulator for Quasar Development\nDESCRIPTION: Commands to specify an iOS emulator when running Quasar development for Cordova.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev -m cordova -T ios -e iPhone-X,12.2\n# or with older versions of Cordova CLI installed on your machine:\nquasar dev -m cordova -T ios -e iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu QDrawer in Vue\nDESCRIPTION: Shows how to implement a navigation menu within QDrawer. Includes routing capabilities through QItems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"With navigation menu\" file=\"Menu\" />\n```\n\n----------------------------------------\n\nTITLE: Mini to Overlay Mode\nDESCRIPTION: Shows how to implement a mini-mode drawer that expands to overlay mode.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Mini to overlay\" file=\"MiniToOverlay\" />\n```\n\n----------------------------------------\n\nTITLE: Building Quasar SPA with Debug Mode\nDESCRIPTION: Commands to create a production build with debugging enabled, showing both short and long form syntax options.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -d\n\n# ..or the longer form\n$ quasar build --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Middleware in Quasar Config\nDESCRIPTION: Configuration setup for SSR middlewares in quasar.config file, demonstrating the proper ordering with render middleware as the last one.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nssr: {\n  middlewares: [\n    // ..... all other middlewares\n\n    'render' // references /src-ssr/middlewares/render.js;\n             // you can name the file however you want,\n             // just make sure that it runs as last middleware\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration\nDESCRIPTION: Configuration for extending the Quasar ESLint rules with base, Vue, and Node specific configurations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/utils/eslint-config/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nmodule.exports = {\n  extends: [\n    'quasar/base',\n    'quasar/vue',\n    'quasar/node',\n  ],\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse QPageScroller Implementation in Vue\nDESCRIPTION: Illustrates a reverse implementation of QPageScroller, possibly showing how the component behaves when scrolling in the opposite direction or with different positioning.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page-scroller.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Reverse\" file=\"Reverse\" />\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cordova Project Directory\nDESCRIPTION: Command to change directory to the Cordova project folder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src-cordova\n```\n\n----------------------------------------\n\nTITLE: Basic SSR Start Script Configuration\nDESCRIPTION: Default package.json script configuration for starting the SSR server using Node.js.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/deploying.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"start\": \"node index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component for Quasar Documentation\nDESCRIPTION: Imports the IntroductionVideo component to be used within the documentation page about Quasar. This demonstrates the component-based documentation approach used in the Quasar framework.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/introduction-to-quasar/introduction-to-quasar.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport IntroductionVideo from './IntroductionVideo.vue'\n```\n\n----------------------------------------\n\nTITLE: Accessing BEX Bridge in Quasar App Components\nDESCRIPTION: These snippets show how to access the BEX bridge ($q.bex) in different types of Vue components within a Quasar app, including Composition API with script setup, Composition API with script, and Options API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div />\n</template>\n\n<script setup>\nimport { useQuasar } from 'quasar'\nconst $q = useQuasar()\n\n// Use $q.bex (the bridge)\n// $q.bex.portName is \"app\"\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div />\n</template>\n\n<script>\nimport { useQuasar } from 'quasar'\n\nexport default {\n  setup () {\n    const $q = useQuasar()\n    // Use $q.bex (the bridge)\n    // $q.bex.portName is \"app\"\n  }\n}\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div />\n</template>\n\n<script>\nexport default {\n  // Use this.$q.bex (the bridge)\n  // this.$q.bex.portName is \"app\"\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Area Insets for Mobile Headers and Footers in CSS\nDESCRIPTION: CSS implementation for handling safe areas around mobile status bars and notches. Includes both iOS 11.0 and 11.2+ syntax for top and bottom padding adjustments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* for your app's header */\npadding-top: constant(safe-area-inset-top); // for iOS 11.0\npadding-top: env(safe-area-inset-top); // for iOS 11.2 +\n/* for your app's footer */\npadding-bottom: constant(safe-area-inset-bottom);\npadding-bottom: env(safe-area-inset-bottom);\n```\n\n----------------------------------------\n\nTITLE: Ripple Position Configuration\nDESCRIPTION: Demonstrates how to configure the ripple starting position, allowing it to start from center regardless of touch point.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/material-ripples.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Positioning\" file=\"Positioning\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v5 Dependencies\nDESCRIPTION: Package.json dependencies configuration for Capacitor v5. Requires Xcode 14.1+ for iOS and Android Studio Flamingo 2022.2.1+ for Android development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^5.0.0\",\n  \"@capacitor/cli\": \"^5.0.0\",\n  \"@capacitor/core\": \"^5.0.0\",\n  \"@capacitor/splash-screen\": \"^5.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tunnelmole in JavaScript\nDESCRIPTION: Code snippets showing how to import the Tunnelmole module in JavaScript, supporting both ES and CommonJS module systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// import as ESM:\nimport { tunnelmole } from 'tunnelmole'\n\n// or import as CommonJS module:\nconst tunnelmole = require('tunnelmole/cjs')\n```\n\n----------------------------------------\n\nTITLE: QScrollObserver Event Parameters\nDESCRIPTION: New structure of the scroll event parameters for QScrollObserver component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  position: {\n    top, left // Numbers (pixels)\n  },\n  direction, // String (\"top\", \"right\", \"bottom\" or \"left\")\n  directionChanged, // Boolean\n  inflectionPoint: { // last position when direction changed\n    top, left // Numbers (pixels)\n  },\n  delta: { // difference since last @scroll update\n    top, left // Numbers (pixels)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PWA Elements Integration for Capacitor\nDESCRIPTION: Setup instructions for integrating PWA elements to enable web-based UI for Capacitor plugins in browser environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @ionic/pwa-elements\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\n\nexport default () => {\n  defineCustomElements(window)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Icons with Icon Genie CLI\nDESCRIPTION: Command to generate all required icons for a Quasar SPA using Icon Genie CLI. Takes a source icon file and generates appropriately sized versions for different platforms.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/app-icons-spa.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m spa -i /path/to/source/icon.png\n```\n\n----------------------------------------\n\nTITLE: Virtual Scroll with Various Templates\nDESCRIPTION: Examples showing different item templates in both vertical and horizontal orientations\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/virtual-scroll.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Different templates for items\" file=\"VariousContent\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Different templates for horizontal items\" file=\"VariousContentHorizontal\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Store Package and Node Packager Name in Quasar App Extension Uninstall Script\nDESCRIPTION: Shows how to get the store package name and Node packager name using api.getStorePackageName and api.getNodePackagerName methods. These methods are available in @quasar/app-vite 1.6+ and @quasar/app-webpack 3.11+.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @return {Promise<string|undefined>} 'pinia' | 'vuex' | undefined\n */\nawait api.getStorePackageName()\n\n/**\n * @return {Promise<'npm' | 'yarn' | 'pnpm' | 'bun'>}\n */\nawait api.getNodePackagerName()\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR-Specific Boot Files in quasar.config\nDESCRIPTION: Configuration for specifying which boot files should run on server-side, client-side, or both in a Quasar SSR application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/configuring-ssr.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  boot: [\n    'some-boot-file', // runs on both server and client\n    { path: 'some-other', server: false }, // this boot file gets embedded only on client-side\n    { path: 'third', client: false } // this boot file gets embedded only on server-side\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transitions for QTabPanels in Vue\nDESCRIPTION: Illustrates how to implement custom transitions for QTabPanels, allowing for more engaging and interactive user experiences when switching between panels.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/tab-panels.md#2025-04-16_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Custom transition examples\" file=\"Transition\" />\n```\n\n----------------------------------------\n\nTITLE: Building Quasar SPA for Production\nDESCRIPTION: Command to create a production build of the Quasar single page application with optimizations enabled.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build\n```\n\n----------------------------------------\n\nTITLE: QResponsive with QTable\nDESCRIPTION: Shows how to implement QResponsive with QTable component for maintained aspect ratio.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/responsive.md#2025-04-16_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Apple Device Launch Icons HTML Configuration\nDESCRIPTION: HTML code for configuring launch icons for various Apple devices including iPhones and iPads with different resolutions and pixel ratios.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/app-icons-ssr.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- iPhone XR -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-828x1792.png\">\n<!-- iPhone X, XS -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1125x2436.png\">\n<!-- iPhone XS Max -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2688.png\">\n<!-- iPhone 8, 7, 6s, 6 -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-750x1334.png\">\n<!-- iPhone 8 Plus, 7 Plus, 6s Plus, 6 Plus -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3)\" href=\"icons/apple-launch-1242x2208.png\">\n<!-- iPhone 5 -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-640x1136.png\">\n<!-- iPad Mini, Air, 9.7\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1536x2048.png\">\n<!-- iPad Pro 10.5\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2224.png\">\n<!-- iPad Pro 11\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-1668x2388.png\">\n<!-- iPad Pro 12.9\" -->\n<link rel=\"apple-touch-startup-image\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)\" href=\"icons/apple-launch-2048x2732.png\">\n```\n\n----------------------------------------\n\nTITLE: Handling Key Events with Touch Repeat in Vue\nDESCRIPTION: Demonstrates how to configure the v-touch-repeat directive to respond to specific key events using keycodes as modifiers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-repeat.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-repeat.65.70=\"myHandler\">...</div>\n```\n\n----------------------------------------\n\nTITLE: QMenu Positioning Script\nDESCRIPTION: Script component for handling menu positioning logic.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/menu/menu.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport MenuPositioning from './MenuPositioning.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Electron Package Using Multiple Package Managers\nDESCRIPTION: Commands for upgrading Electron to the latest version using different package managers (Yarn, NPM, PNPM, and Bun). Each command should be run from the root of the Quasar project directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-upgrade-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ yarn upgrade electron@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ npm install electron@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ pnpm add electron@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n# from the root of your Quasar project\n$ bun add electron@latest\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Genie Profile Structure - JSON\nDESCRIPTION: Defines the basic structure of an Icon Genie profile file in JSON format, consisting of params and assets arrays.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/command-list.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": { },\n  \"assets\": [ ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Values in JSON\nDESCRIPTION: Demonstrates the use of boolean values (true and false) in JSON.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ntrue\nfalse\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Quasar Project (Bash)\nDESCRIPTION: Commands to install project dependencies using either Yarn or npm package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-webpack-4/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for BEX Bridge\nDESCRIPTION: This snippet shows how to enable debug mode for the BEX bridge, which helps in troubleshooting communication issues. It also demonstrates how to log messages and warnings using the bridge.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Dynamically set debug mode\nbridge.setDebug(true) // boolean\n\n// Log a message on the console (if debug is enabled)\nbridge.log('Hello world!')\nbridge.log('Hello', 'world!')\nbridge.log('Hello world!', { some: 'data' })\nbridge.log('Hello', 'world', '!', { some: 'object' })\n// Log a warning on the console (regardless of the debug setting)\nbridge.warn('Hello world!')\nbridge.warn('Hello', 'world!')\nbridge.warn('Hello world!', { some: 'data' })\nbridge.warn('Hello', 'world', '!', { some: 'object' })\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar CLI Globally\nDESCRIPTION: Commands for globally installing Quasar CLI using different package managers (Yarn, NPM, PNPM, and Bun).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quasar-cli.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add @quasar/cli\n$ yarn create quasar\n\n$ npm i -g @quasar/cli\n$ npm init quasar@latest\n\n$ pnpm add -g @quasar/cli\n$ pnpm create quasar@latest\n\n$ bun install -g @quasar/cli\n$ bun create quasar@latest\n```\n\n----------------------------------------\n\nTITLE: Registering Boot File Using Index API\nDESCRIPTION: Example of using the Quasar Index API to register a boot file in the application configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/app-extension/src/runtime/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport default function (api: IndexAPI) {\n  // ...\n  api.extendQuasarConf((conf, api) => {\n    conf.boot!.push('~<%= pkgName %>/boot/some-boot-file');\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Variables in Quasar Framework (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define htmlVariables in the Quasar configuration file, which can be used in the index.html file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/quasar-config-file.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/** Add variables that you can use in /index.html. */\nhtmlVariables?: Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server\nDESCRIPTION: Command to start the Quasar application in development mode with features like hot-code reloading and error reporting.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-vite-2/BASE/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Template in Markdown\nDESCRIPTION: Template for documenting the repository structure, including UI package directory and conditional app extension directory based on feature flags.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Structure\n* [/ui](ui) - standalone npm package\n<% if (features.ae) { %>\n* [/app-extension](app-extension) - Quasar app extension\n<% } %>\n```\n\n----------------------------------------\n\nTITLE: Building Quasar AE Playground for Production\nDESCRIPTION: Commands to build the Quasar AE playground app for production. The specific package manager command is dynamically inserted based on the project configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-vite/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run build\nyarn build\npnpm build\nbun build\n```\n\n----------------------------------------\n\nTITLE: BEX Manifest V2 Configuration\nDESCRIPTION: Manifest configuration for Browser Extension version 2, defining options, popup, and devtools page locations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifest_version\": 2,\n\n  \"options_page\": \"www/index.html#/options\",\n  \"browser_action\": {\n    \"default_popup\": \"www/index.html#/popup\"\n  },\n  \"devtools_page\": \"www/index.html#/devtools\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Camera Plugin\nDESCRIPTION: Command to install the Cordova camera plugin from within the src-cordova directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# from /src-cordova:\n$ cordova plugin add cordova-plugin-camera\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Electron Mode\nDESCRIPTION: TypeScript declaration for Electron-specific environment variables in a Quasar project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/supporting-ts.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace NodeJS {\n  interface ProcessEnv {\n    QUASAR_PUBLIC_FOLDER: string;\n    QUASAR_ELECTRON_PRELOAD_FOLDER: string;\n    QUASAR_ELECTRON_PRELOAD_EXTENSION: string;\n    APP_URL: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Quasar UI Component Locally in Vue Component\nDESCRIPTION: Demonstrates how to import and use the component locally within a Vue component file. This approach allows selective use of the component only where needed, with local registration in the components option.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style src=\"quasar-ui-<%= name %>/dist/index.css\"></style>\n\n<script>\nimport { <% if (features.component) { %>Component as <%= componentName %><% if (features.directive) { %>, <% } %><% } %><% if (features.directive) { %>Directive<% } %> } from 'quasar-ui-<%= name %>'\n\nexport default {\n  <% if (features.component) { %>\n  components: {\n    <%= componentName %>\n  }<% if (features.directive) { %>,<% } %>\n  <% } %>\n  <% if (features.directive) { %>\n  directives: {\n    Directive\n  }\n  <% } %>\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using SVG-use Method for Icons in Quasar\nDESCRIPTION: Demonstrates how to use the SVG-use method to reference external SVG files as icons in Quasar components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<q-icon name=\"svguse:icons.svg#icon-1\">\n<!-- or -->\n<q-btn-dropdown label=\"Custom Content\" dropdown-icon=\"svguse:icons.svg#icon-2\" />\n```\n\n----------------------------------------\n\nTITLE: PWA Elements Installation Command\nDESCRIPTION: Command to install Ionic PWA elements for web-based UI support in Capacitor plugins\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-api.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @ionic/pwa-elements\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of QVideo Component in Vue\nDESCRIPTION: Demonstrates the basic usage of the QVideo component for embedding a video. This snippet shows how to use QVideo in a Vue template.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/video.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <q-video\n    src=\"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disable Ripple Effect\nDESCRIPTION: Demonstrates how to conditionally disable ripple effects using boolean values with the v-ripple directive.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/material-ripples.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Disable\" file=\"Disable\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates with Install API in Quasar App Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Install API to render templates in a Quasar App Extension. It shows different ways to render templates, including with default scope, custom scope, and conditional rendering based on TypeScript presence.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/install-script/app-extension/src/templates/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napi.render('./templates/base');\n// Render with scope set to the prompts object\napi.render('./templates/base', api.prompts);\n// Render with a custom scope object\napi.render('./templates/base', { someVar: 'someValue', anotherVar: api.prompts.whatever === 'foo' });\n\n// Render a different template based on the host project having TypeScript or not\nconst type = await api.hasTypescript() ? 'typescript' : 'no-typescript';\napi.render(`./templates/${type}`);\n```\n\n----------------------------------------\n\nTITLE: Developing Quasar SSR Application\nDESCRIPTION: Commands for starting the development server in SSR mode. Includes both short and long form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/build-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m ssr\n\n# ..or the longer form:\n$ quasar dev --mode ssr\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration for App Extension Development\nDESCRIPTION: JavaScript configuration for extending Webpack in a Quasar project to improve development experience with App Extensions. This configuration modifies the snapshot settings to enhance module handling.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nchainWebpack (chain) {\n  chain.merge({\n    snapshot: {\n      managedPaths: []\n    }\n  })\n},\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Application for Production\nDESCRIPTION: Command to build the Quasar application for production deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-vite-2/BASE/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: QNoSsr with Multiple Placeholder Content\nDESCRIPTION: Shows how to include multiple elements in the placeholder slot for server-side rendering\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr>\n  <div>This won't be rendered on server</div>\n  <template v-slot:placeholder>\n    <div>Rendered on server (1/2)</div>\n    <div>Rendered on server (2/2)</div>\n  </template>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: Adding ScrollEnabled Preference to Config.xml\nDESCRIPTION: XML snippet to add the ScrollEnabled preference for iOS platform in the Cordova config.xml file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<platform name=\"ios\">\n  <preference name=\"ScrollEnabled\" value=\"true\" />\n</platform>\n```\n\n----------------------------------------\n\nTITLE: Standard Shadow Classes in CSS\nDESCRIPTION: Basic CSS classes for adding downward-pointing shadows with depths from 1-24, removing shadows, and adding inset shadows. Includes transition effects for smooth depth changes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/shadows.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.no-shadow\n.inset-shadow\n.inset-shadow-down\n.shadow-1\n.shadow-2\n.shadow-N /* N = 1 to 24 */\n.shadow-transition\n```\n\n----------------------------------------\n\nTITLE: Selected Icon Customization\nDESCRIPTION: Demonstration of using different icons for selected and unselected states\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Different icon when selected\" file=\"SelectedIcon\" />\n```\n\n----------------------------------------\n\nTITLE: Accepting Android SDK Licenses\nDESCRIPTION: Commands to accept all Android SDK licenses on different operating systems, which is necessary to resolve build failures due to unaccepted licenses.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsdkmanager --licenses\n```\n\nLANGUAGE: bash\nCODE:\n```\n~/Library/Android/sdk/tools/bin/sdkmanager --licenses\n```\n\nLANGUAGE: bash\nCODE:\n```\n%ANDROID_SDK_ROOT%/tools/bin/sdkmanager --licenses\n```\n\n----------------------------------------\n\nTITLE: Using Quasar Plugins and Utilities in JavaScript\nDESCRIPTION: Examples of invoking Quasar plugins and utility functions directly from the Quasar global object in JavaScript.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Quasar plugins\nQuasar.BottomSheet.create({...})\n\n// Quasar utils\nQuasar.openURL('https://quasar.dev')\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Support Table\nDESCRIPTION: A markdown table showing which versions of Quasar Framework are currently supported for security updates. Version 2.x.x is supported while versions 1.x.x, 0.17.x and earlier are no longer supported.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/SECURITY.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.x.x   | :white_check_mark: |\n| 1.x.x   | :x:                |\n| 0.17.x  | :x:                |\n| < 0.17  | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Quasar Development Commands for Mobile\nDESCRIPTION: Various command formats for starting development mode for iOS/Android, including options for specific emulators and passing additional parameters\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m [ios|android]\n\n# ..or the explicit form:\n$ quasar dev -m cordova -T [ios|android]\n\n# ..or the longer form:\n$ quasar dev --mode cordova --target [ios|android]\n\n# using a specific emulator (--emulator, -e)\n$ quasar dev -m ios -e iPhone-7\n# or\n$ quasar dev -m ios -e iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar dev -m ios -- some params --and options --here\n# when on Windows and using Powershell:\n$ quasar dev -m ios '--' some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Quasar App Extension using Quasar CLI\nDESCRIPTION: This command removes the Quasar App Extension from the user's project using the Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-js/BASE/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar ext remove <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Linting Files in Quasar Project (Bash)\nDESCRIPTION: Commands to run linting on the project files using either Yarn or npm, if ESLint is configured in the project preset.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-webpack-4/BASE/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: QNoSsr with Placeholder Property\nDESCRIPTION: Shows how to provide server-side placeholder content using the placeholder property\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr placeholder=\"Rendered on server\">\n  <div>This won't be rendered on server</div>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: Mixed Horizontal and Vertical Column Gutters in Quasar\nDESCRIPTION: Example demonstrating the use of mixed column gutters with different sizes for horizontal and vertical spacing, using a combination of q-col-gutter-x-* and q-col-gutter-y-* classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Mixed horizontal and vertical q-col-gutter\" file=\"ColGutterMixed\" />\n```\n\n----------------------------------------\n\nTITLE: Linting Quasar Application Files\nDESCRIPTION: Commands to run linting on project files using either yarn or npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-vite-2/BASE/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Registering Quasar UI Component in Vue CLI Project\nDESCRIPTION: Shows how to import and register the component globally in a Vue CLI project. This makes the component available throughout the application without needing to import it in individual components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport Plugin from 'quasar-ui-<%= name %>'\nimport 'quasar-ui-<%= name %>/dist/index.css'\n\nVue.use(Plugin)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Quasar App Extension for Testing\nDESCRIPTION: This bash command demonstrates how to uninvoke (uninstall for testing purposes) a Quasar App Extension. It removes the extension from the registered list without modifying package.json or node_modules.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar ext uninvoke my-ext\n```\n\n----------------------------------------\n\nTITLE: Updating Vue component imports\nDESCRIPTION: Example of explicitly specifying file extensions in import statements for Vue components.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD! Will not work:\nimport MyComponent from './MyComponent'\n\n// GOOD:\nimport MyComponent from './MyComponent.vue'\n```\n\n----------------------------------------\n\nTITLE: Android Device Rules Configuration\nDESCRIPTION: Content for the 51-android.rules file to set up proper permissions for Android devices on Linux.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0e79\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0502\", MODE=\"0666\"\n# ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Header Picture QDrawer\nDESCRIPTION: Shows implementation of QDrawer with a header picture component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Header Picture\" file=\"HeaderPicture\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocApiExplorer Component in Vue Template\nDESCRIPTION: Renders the DocApiExplorer component in the page template. This component provides the interactive UI for exploring all Quasar component, directive, and plugin APIs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/api-explorer/api-explorer.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocApiExplorer />\n```\n\n----------------------------------------\n\nTITLE: Platform Detection Object Example\nDESCRIPTION: Example of the Platform.is object structure when running Chrome on MacOS.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/platform-detection.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  chrome: true,\n  desktop: true,\n  mac: true,\n  name: \"chrome\",\n  platform: \"mac\",\n  version: \"70.0.3538.110\",\n  versionNumber: 70,\n  webkit: true\n}\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration for Routing\nDESCRIPTION: Vercel configuration file for handling SPA routing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/deploying.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    { \"handle\": \"filesystem\" },\n    { \"src\": \"/.*\", \"dest\": \"/\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Variables in Template\nDESCRIPTION: Demonstrates how to use variables defined in quasar.config within HTML templates using EJS syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/quasar-config-file.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<%= myVar %>\n<% if (myVar) { %>something<% } %>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers in Quasar Projects\nDESCRIPTION: Commands for installing project dependencies using various package managers (npm, yarn, pnpm, or bun). The template conditionally shows the appropriate command based on the configured package manager.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-webpack/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm install\nyarn install\npnpm install\nbun install\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern Build for iOS in Quasar Config\nDESCRIPTION: This JavaScript snippet shows how to enable the modern build flag for iOS in the Quasar configuration file. This is useful for experienced developers who want to use the latest Xcode build features.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ncordova: {\n  noIosLegacyBuildFlag: true\n}\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Projects for Production\nDESCRIPTION: Commands for building the Quasar application for production deployment using various package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-webpack/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run build\nyarn build\npnpm build\nbun build\n```\n\n----------------------------------------\n\nTITLE: Signing Android APK\nDESCRIPTION: Command to sign the Android APK file using the apksigner tool and the previously generated keystore. This prepares the APK for submission to the Google Play Store.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napksigner sign --ks my-release-key.keystore --ks-key-alias alias_name <path-to-unsigned-apk-file>\n```\n\n----------------------------------------\n\nTITLE: Using api.resolve in Quasar App Extension\nDESCRIPTION: Demonstrates how to use api.resolve to resolve paths within the app on which the App Extension is running. This eliminates the need to import 'path' and resolve paths manually.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// resolves to root of app\napi.resolve.app('src/my-file.js')\n\n// resolves to root/src of app\napi.resolve.src('my-file.js')\n\n// resolves to root/public of app\n// (@quasar/app-webpack v3.4+ or @quasar/app-vite v1+)\napi.resolve.public('my-image.png')\n\n// resolves to root/src-pwa of app\napi.resolve.pwa('some-file.js')\n\n// resolves to root/src-ssr of app\napi.resolve.ssr('some-file.js')\n\n// resolves to root/src-cordova of app\napi.resolve.cordova('config.xml')\n\n// resolves to root/src-electron of app\napi.resolve.electron('some-file.js')\n\n// resolves to root/src-electron of app\napi.resolve.electron('some-file.js')\n\n// resolves to root/src-bex of app\napi.resolve.bex('some-file.js')\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Genie CLI with Package Managers\nDESCRIPTION: Commands for installing the Icon Genie CLI tool globally using various package managers including Yarn, npm, pnpm, and Bun. Node.js version 10.0.0 or higher is required.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/icongenie/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add @quasar/icongenie\n# or\n$ npm install -g @quasar/icongenie\n# or\n$ pnpm add -g @quasar/icongenie\n# or\n$ bun add -g @quasar/icongenie\n```\n\n----------------------------------------\n\nTITLE: Overlay Mode Implementation\nDESCRIPTION: Demonstrates how to implement overlay mode for QDrawer which hovers over the page content.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Overlay mode\" file=\"OverlayMode\" />\n```\n\n----------------------------------------\n\nTITLE: Representing Numbers in JSON\nDESCRIPTION: Shows how numbers, including integers and floating-point values, are represented in JSON.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n42\n3.1415926\n```\n\n----------------------------------------\n\nTITLE: Fullscreen and Fixed Position Classes\nDESCRIPTION: CSS classes for fixed positioning elements across the viewport or at specific positions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/positioning.md#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.fullscreen { position: fixed; top: 0; right: 0; bottom: 0; left: 0; }\n.fixed { position: fixed; }\n.fixed-center { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); }\n```\n\n----------------------------------------\n\nTITLE: API Documentation References\nDESCRIPTION: References to QFab and QFabAction component API documentation\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/floating-action-button.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocApi file=\"QFab\" />\n<DocApi file=\"QFabAction\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables - Windows\nDESCRIPTION: Configuration of Android SDK environment variables and PATH settings for Windows systems. Sets up ANDROID_HOME and ANDROID_SDK_ROOT paths.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsetx ANDROID_HOME \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx ANDROID_SDK_ROOT \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx path \"%path%;%ANDROID_SDK_ROOT%\\tools;%ANDROID_SDK_ROOT%\\platform-tools\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom SVG Icon Format in Quasar\nDESCRIPTION: Explains the syntax for creating custom SVG icons as strings in Quasar. The format includes paths, optional styles, transforms, and custom viewBox definitions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSyntax: \"<path>&&<path>&&...|<viewBox>\"\n           P       P             V\n                (optional)   (optional)\n                             (default: 0 0 24 24)\n\nP is a path tag with following syntax (each are attributes):\n        \"<d>@@<style>@@<transform>\"\n        (required)\n            (optional)\n                     (optional)\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Colors with getPaletteColor in Quasar\nDESCRIPTION: Shows how to retrieve custom-defined color values using getPaletteColor function. This snippet demonstrates accessing user-defined colors that have been added to the palette.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/color-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(getPaletteColor('my-color')) // '#...'\n```\n\n----------------------------------------\n\nTITLE: Importing All Format Utils in JavaScript\nDESCRIPTION: Demonstrates how to import the entire format utility from Quasar and access individual methods. This approach includes all format methods in the bundle, even unused ones.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format } from 'quasar'\n\nconsole.log( format.capitalize('some text') )\nconsole.log( format.humanStorageSize(13087) )\n```\n\n----------------------------------------\n\nTITLE: Vertical-only Column Gutters in Quasar\nDESCRIPTION: Example showing vertical-only column gutters using q-col-gutter-y-* classes, which apply vertical spacing between column elements while maintaining no horizontal spacing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Vertical only q-col-gutter\" file=\"ColGutterVertical\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data Directory\nDESCRIPTION: Example of accessing files in the userData directory using electron/remote\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path'\nimport { app } from '@electron/remote'\n\nconst filePath = path.join(app.getPath('userData'), '/some.file')\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v5 Dependencies\nDESCRIPTION: Required package dependencies for Capacitor v5 implementation in Quasar. Requires Xcode 14.1+ for iOS and Android Studio Flamingo 2022.2.1+ for Android development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^5.0.0\",\n  \"@capacitor/cli\": \"^5.0.0\",\n  \"@capacitor/core\": \"^5.0.0\",\n  \"@capacitor/splash-screen\": \"^5.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for BEX in quasar.config\nDESCRIPTION: Specifies how to change default source files for BEX in the quasar.config file, particularly the manifest file location.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// should you wish to change default files\nsourceFiles: {\n  bexManifestFile?: 'src-bex/manifest.json',\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled QToggle in Vue\nDESCRIPTION: Demonstrates the disabled state of QToggle component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/toggle.md#2025-04-16_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Disabled state\" file=\"Disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Ngrok Connection Output\nDESCRIPTION: Example output when starting Ngrok, showing the generated public URLs and connection statistics.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nTunnel Status                 online\nVersion                       2.0/2.0\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    http://92832de0.ngrok.io -> localhost:8080\nForwarding                    https://92832de0.ngrok.io -> localhost:8080\n\nConnections                  ttl     opn     rt1     rt5     p50     p90\n                              0       0       0.00    0.00    0.00    0.00\n```\n\n----------------------------------------\n\nTITLE: Getting Package Version in Quasar App Extension Uninstall Script\nDESCRIPTION: Demonstrates how to use the api.getPackageVersion method to get the version of a package installed in the host app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} packageName\n * @return {string|undefined} version of app's package\n */\nconsole.log( api.getPackageVersion(packageName) )\n// output examples:\n//   1.1.3\n//   undefined (when package not found)\n```\n\n----------------------------------------\n\nTITLE: Updating BEX TypeScript declarations\nDESCRIPTION: Changes to the TypeScript declarations in BEX-related files to use @quasar/app-vite instead of @quasar/app-webpack.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md#2025-04-16_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- declare module '@quasar/app-webpack' {\n+ declare module '@quasar/app-vite' {\n  interface BexEventMap {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in a Vue Component\nDESCRIPTION: Demonstrates three different patterns for accessing and using a Pinia store in a Vue component: direct access, computed properties with functions, and destructuring with storeToRefs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/state-management-with-pinia.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <!-- Option 1 -->\n    <div>Direct store</div>\n    <!-- Read the state value directly -->\n    <div>{{ store.counter }}</div>\n    <!-- Use getter directly -->\n    <div>{{ store.doubleCount }}</div>\n\n    <!-- Manipulate state directly -->\n    <q-btn @click=\"store.counter--\">-</q-btn>\n    <!-- Use an action -->\n    <q-btn @click=\"store.increment()\">+</q-btn>\n  </div>\n\n  <div>\n    <!-- Option 2 -->\n    <div>Indirect store</div>\n    <!-- Use the computed state -->\n    <div>{{ count }}</div>\n    <!-- Use the computed getter -->\n    <div>{{ doubleCountValue }}</div>\n\n    <!-- Use the exposed function -->\n    <q-btn @click=\"decrementCount()\">-</q-btn>\n    <!-- Use the exposed function -->\n    <q-btn @click=\"incrementCount()\">+</q-btn>\n  </div>\n\n  <div>\n    <!-- Option 3 -->\n    <div>Destructured store</div>\n    <!-- Use the destructured state -->\n    <div>{{ counter }}</div>\n    <!-- Use the destructured getter -->\n    <div>{{ doubleCount }}</div>\n\n    <!-- Manipulate state directly-->\n    <q-btn @click=\"counter--\">-</q-btn>\n    <!-- Use an action -->\n    <q-btn @click=\"increment()\">+</q-btn>\n  </div>\n</template>\n\n<script>\nimport { computed } from 'vue';\nimport { useCounterStore } from 'stores/counter';\nimport { storeToRefs } from 'pinia';\n\nexport default {\n  setup() {\n    const store = useCounterStore();\n\n    // Option 2: use computed and functions to use the store\n    const count = computed(() => store.counter);\n    const doubleCountValue = computed(() => store.doubleCount);\n    const incrementCount = () => store.increment(); // use action\n    const decrementCount = () => store.counter--; // manipulate directly\n\n    // Option 3: use destructuring to use the store in the template\n    const { counter, doubleCount } = storeToRefs(store); // state and getters need \"storeToRefs\"\n    const { increment } = store; // actions can be destructured directly\n\n    return {\n      // Option 1: return the store directly and couple it in the template\n      store,\n\n      // Option 2: use the store in functions and compute the state to use in the template\n      count,\n      doubleCountValue,\n      incrementCount,\n      decrementCount,\n\n      // Option 3: pass the destructed state, getters and actions to the template\n      counter,\n      increment,\n      doubleCount,\n    };\n  },\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Splash Screen Plugin\nDESCRIPTION: Commands to add and save the Cordova splash screen plugin dependency in the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/app-icons-cordova.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src-cordova\n$ cordova plugin add cordova-plugin-splashscreen\n$ cordova plugin save\n```\n\n----------------------------------------\n\nTITLE: QKnob with Value Display\nDESCRIPTION: Example demonstrating how to show value with custom content using the default slot and font size customization.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Show value\" file=\"ShowValue\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Tunnelmole in JavaScript\nDESCRIPTION: Code examples showing how to import the Tunnelmole package in JavaScript using both ES modules and CommonJS syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// import as ESM:\nimport { tunnelmole } from 'tunnelmole'\n\n// or import as CommonJS module:\nconst tunnelmole = require('tunnelmole/cjs')\n```\n\n----------------------------------------\n\nTITLE: Changing Quasar Language Pack in JavaScript\nDESCRIPTION: How to switch to a different language pack after loading it via CDN, using the Quasar.Lang.set method with examples for German and Portuguese.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// example setting German language,\n// using ISO 2 letter code:\nQuasar.Lang.set(Quasar.Lang.de)\n\n// example setting Portuguese (Brazil) language:\nQuasar.Lang.set(Quasar.Lang.ptBR)\n```\n\n----------------------------------------\n\nTITLE: Starting BEX Development in Quasar\nDESCRIPTION: Command to start development in BEX mode for a specific browser (chrome or firefox). This automatically adds BEX mode if it's missing by creating the /src-bex folder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: Adding Pug Loader with chainWebpack\nDESCRIPTION: Equivalent configuration using the chainWebpack method to add a Pug loader to the Webpack configuration in a Quasar app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  chainWebpack (chain) {\n    chain.module.rule('pug')\n      .test(/\\.pug$/)\n      .use('pug-plain-loader')\n        .loader('pug-plain-loader')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Quasar CLI Command Structure\nDESCRIPTION: Shows the basic command structure and available commands in Quasar CLI including dev, build, prepare, clean, and other utility commands.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar -h\n\n  Example usage\n    $ quasar <command> <options>\n\n  Help for a command\n    $ quasar <command> --help\n    $ quasar <command> -h\n\n  Options\n    --version, -v Print Quasar App CLI version\n\n  Commands\n    dev, d        Start a dev server for your App\n    build, b      Build your app for production\n    prepare, p    Prepare the app for linting, type-checking, IDE integration, etc.\n    clean, c      Clean dev/build cache, /dist folder & entry points\n    new, n        Quickly scaffold page/layout/component/... vue file\n    mode, m       Add/remove Quasar Modes for your App\n    inspect       Inspect Webpack/Esbuild configs used under the hood\n    ext, e        Manage Quasar App Extensions\n    run, r        Run specific command provided by an installed\n    describe      Describe a Quasar API (component)\n    info, i       Display info about your machine and your App\n    help, h       Displays this message\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Control Functions\nDESCRIPTION: Vue component setup implementing window control functions using the exposed Electron API.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  setup () {\n    function minimize () {\n      if (process.env.MODE === 'electron') {\n        window.myWindowAPI.minimize()\n      }\n    }\n\n    function toggleMaximize () {\n      if (process.env.MODE === 'electron') {\n        window.myWindowAPI.toggleMaximize()\n      }\n    }\n\n    function closeApp () {\n      if (process.env.MODE === 'electron') {\n        window.myWindowAPI.close()\n      }\n    }\n\n    return { minimize, toggleMaximize, closeApp }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Quasar Project in Bash\nDESCRIPTION: Commands to install project dependencies using either Yarn or npm package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-webpack-4/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova CLI\nDESCRIPTION: Command to install the Cordova CLI globally using npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g cordova\n```\n\n----------------------------------------\n\nTITLE: Project Cleaning Commands\nDESCRIPTION: Commands for cleaning up build assets and requiring project preparation afterward.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar clean\n# requires \"quasar prepare\" to be called again\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Drag Functionality\nDESCRIPTION: HTML examples showing how to implement window dragging using Quasar CSS helper classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<q-bar class=\"q-electron-drag\">\n  ...\n</q-bar>\n```\n\nLANGUAGE: html\nCODE:\n```\n<q-bar class=\"q-electron-drag\">\n  <q-icon name=\"map\" class=\"q-electron-drag--exception\" />\n\n  <div>My title</div>\n</q-bar>\n```\n\n----------------------------------------\n\nTITLE: Installing Stylus Dependencies\nDESCRIPTION: Commands for installing Stylus-related packages when continuing to use Stylus without Quasar Stylus variables.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add stylus stylus-loader\n$ npm install --save stylus stylus-loader\n$ pnpm add stylus stylus-loader\n$ bun add stylus stylus-loader\n```\n\n----------------------------------------\n\nTITLE: iOS WKWebView Configuration\nDESCRIPTION: XML configuration for enabling scroll in iOS WKWebView.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<platform name=\"ios\">\n  <preference name=\"ScrollEnabled\" value=\"true\" />\n</platform>\n```\n\n----------------------------------------\n\nTITLE: Clone Date in Quasar\nDESCRIPTION: Demonstrates how to create a clone of a date object using Quasar's clone function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date()\nconst clonedDate = date.clone(newDate)\n\ndate.addToDate(newDate, { days: 1 })\n\nconsole.log(newDate.getDate() === clonedDate.getDate()) // false\n```\n\n----------------------------------------\n\nTITLE: Quasar App Drawer Template\nDESCRIPTION: Vue template for the Quasar drawer component with model binding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<q-drawer :model-value=\"drawerIsOpen\" @update:model-value=\"drawerToggled\">\n  Some Content\n</q-drawer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor Options in Quasar Config\nDESCRIPTION: Configuration options for Capacitor-specific features including splash screen handling, CLI preparation parameters, and app metadata settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  capacitor: {\n    /**\n     * Automatically hide the Capacitor Splashscreen when app is ready,\n     * (is using the Splashscreen Capacitor plugin).\n     *\n     * @default true\n     */\n    hideSplashscreen?: boolean;\n\n    /**\n     * Preparation params with which the Capacitor CLI is called\n     *\n     * @default [ 'sync', ctx.targetName ]\n     */\n    capacitorCliPreparationParams?: string[];\n\n    /** If not present, will look for `package.json > name` */\n    appName?: string;\n    /** If not present, will look for `package.json > version` */\n    version?: string;\n    /** If not present, will look for `package.json > description` */\n    description?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Events in Quasar JSON API\nDESCRIPTION: Shows how to define events in the Quasar JSON API, including event parameters and their descriptions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n  \"events\": {\n    \"show\": {\n      \"desc\": \"Emitted after component has triggered show()\",\n      \"params\": {\n        \"evt\": {\n          \"type\": \"Object\",\n          \"desc\": \"JS event object\",\n          \"required\": true\n        }\n      }\n    },\n    \"input\": {\n      \"params\": {\n        \"value\": {\n          \"type\": \"String\"\n        },\n        \"reason\": {\n          \"type\": \"String\",\n          \"desc\": \"Reason of the user interaction (what was picked)\",\n          \"values\": [ \"year\", \"month\", \"day\", \"today\", \"locale\", \"mask\" ]\n        },\n        \"details\": {\n          \"type\": \"Object\",\n          \"desc\": \"Object of properties on the new model\",\n          \"definition\": {\n            \"year\": {\n              \"type\": \"Number\"\n            },\n            \"month\": {\n              \"type\": \"Number\"\n            },\n            \"day\": {\n              \"type\": \"Number\"\n            }\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Inhibiting v-touch-hold in Vue\nDESCRIPTION: Demonstrates how to prevent v-touch-hold from triggering on specific child elements by stopping event propagation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-hold.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-hold.mouse=\"userHasHold\">\n  <!-- ...content -->\n  <div @touchstart.stop @mousedown.stop>\n    <!--\n      TouchHold will not apply here because\n      we are calling stopPropagation() on touchstart\n      and mousedown events\n    -->\n  </div>\n  <!-- ...content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking Out Local Development Branch\nDESCRIPTION: Command to switch to your local 'dev' branch. All development work should be done in this branch rather than on the master branch.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout dev\n> Switched to branch 'dev'\n```\n\n----------------------------------------\n\nTITLE: Basic QPage Layout Structure in HTML\nDESCRIPTION: Demonstrates the basic structure of a page layout using QLayout, QPageContainer, and QPage components. Shows the required component hierarchy.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<q-layout>\n  ...\n  <q-page-container>\n    <q-page>\n      <!-- page content -->\n    </q-page>\n  </q-page-container>\n  ...\n</q-layout>\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Electron Development\nDESCRIPTION: Commands to start the Electron development environment. Includes options for passing additional parameters to the Electron executable, with special syntax for Windows Powershell.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m electron\n\n# passing extra parameters and/or options to\n# underlying \"electron\" executable:\n$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox\n# when on Windows and using Powershell:\n$ quasar dev -m electron '--' --no-sandbox --disable-setuid-sandbox\n```\n\n----------------------------------------\n\nTITLE: Creating Google Analytics Boot File in Quasar CLI\nDESCRIPTION: This bash command creates a new boot file for Google Analytics in a Quasar project. It allows for optional TypeScript format.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new boot google-analytics [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Edge Position Classes\nDESCRIPTION: CSS classes for positioning elements at various edges of the viewport or container.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/positioning.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.fixed-top, .absolute-top { top: 0; }\n.fixed-right, .absolute-right { right: 0; }\n.fixed-bottom, .absolute-bottom { bottom: 0; }\n.fixed-left, .absolute-left { left: 0; }\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies Update for Webpack Migration\nDESCRIPTION: Differences in package.json showing required changes to dependencies and addition of browserslist configuration when migrating from Vite to Webpack.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/convert-to-quasar-cli-with-webpack.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndependencies: {\n+ \"core-js\": \"^3.6.5\",\n},\n\ndevDependencies: {\n- \"@quasar/app-vite\": \"^2.0.0\"\n+ \"@quasar/app-webpack\": \"^4.0.0\"\n\n+ \"eslint-webpack-plugin\": \"^4.0.1\",\n+ \"ts-loader\": \"^9.4.2\", // if using TS\n\n- \"postcss\"\n- \"postcss-rtlcss\"\n\n// if you have PWA mode:\n+ \"workbox-webpack-plugin\": \"^7.0.0\"\n- \"workbox-build\": \"^7.0.0\",\n- \"workbox-cacheable-response\": \"^7.0.0\",\n- \"workbox-core\": \"^7.0.0\",\n- \"workbox-expiration\": \"^7.0.0\",\n- \"workbox-precaching\": \"^7.0.0\",\n- \"workbox-routing\": \"^7.0.0\",\n- \"workbox-strategies\": \"^7.0.0\"\n}\n\n+ \"browserslist\": [\n+   \"last 10 Chrome versions\",\n+   \"last 10 Firefox versions\",\n+   \"last 4 Edge versions\",\n+   \"last 7 Safari versions\",\n+   \"last 8 Android versions\",\n+   \"last 8 ChromeAndroid versions\",\n+   \"last 8 FirefoxAndroid versions\",\n+   \"last 10 iOS versions\",\n+   \"last 5 Opera versions\"\n+ ],\n```\n\n----------------------------------------\n\nTITLE: Project Preparation Commands\nDESCRIPTION: Commands for preparing the project folder for IDE integration and cleaning build assets.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/commands-list.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar prepare\n```\n\n----------------------------------------\n\nTITLE: Android udev Rules for Device Recognition\nDESCRIPTION: Content for the 51-android.rules file, which sets up USB device permissions for various Android device vendors on Linux systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0e79\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0502\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0b05\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"413c\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0489\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"091e\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"18d1\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0bb4\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"12d1\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"24e3\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2116\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0482\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"17ef\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1004\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"22b8\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0409\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2080\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0955\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2257\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"10a9\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1d4d\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0471\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04da\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"05c6\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1f53\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04e8\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"04dd\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0fce\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0930\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"19d2\", MODE=\"0666\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"1bbb\", MODE=\"0666\"\n```\n\n----------------------------------------\n\nTITLE: Installing an App Extension from Local Directory\nDESCRIPTION: Commands to manually add an unpublished App Extension from a local directory to a Quasar project for testing purposes. Different linking methods are provided to accommodate various development environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev file://path/to/our/app/ext/app-extension\n# or\n$ yarn add --dev link://path/to/our/app/ext/app-extension\n# or\n$ npm add --save-dev file://path/to/our/app/ext/app-extension\n```\n\n----------------------------------------\n\nTITLE: QLayout Scroll Event Parameters\nDESCRIPTION: Updated structure of the scroll event parameters for QLayout component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  position, // Number (pixels from top)\n  direction, // String (\"top\", \"bottom\")\n  directionChanged, // Boolean\n  inflectionPoint, // last position (from the top) when direction changed - Number (pixels)\n  delta // difference since last @scroll update - Number (pixels)\n}\n```\n\n----------------------------------------\n\nTITLE: Seamless Menu Implementation\nDESCRIPTION: Demonstrates how to create a seamless menu style drawer without distinct boundaries.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Seamless menu\" file=\"MenuSeamless\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Tunnelmole Programmatically\nDESCRIPTION: JavaScript code to start Tunnelmole programmatically, specifying the port and optionally a custom domain.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst url = await tunnelmole({\n  port: 80\n  // Optionally, add \"domain: 'mysubdomain.tunnelmole.com'\" if using a custom subdomain\n})\n// url = https://idsq6j-ip-157-211-195-169.tunnelmole.com\n```\n\n----------------------------------------\n\nTITLE: Signing Android APK for Release\nDESCRIPTION: Command to sign the APK using the previously generated keystore. This step is required before submitting the app to the Google Play Store.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napksigner sign --ks my-release-key.keystore --ks-key-alias alias_name <path-to-unsigned-apk-file>\n```\n\n----------------------------------------\n\nTITLE: Starting BEX Development in Quasar\nDESCRIPTION: Command to start development for Browser Extension (BEX) mode in Quasar. This automatically adds BEX mode if missing and allows specifying the target browser (chrome or firefox).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m bex -T [chrome|firefox]\n```\n\n----------------------------------------\n\nTITLE: QExpansionItem Inset Levels\nDESCRIPTION: Demonstrates the usage of inset levels for header and content padding.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/expansion-item.md#2025-04-16_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Playing with inset levels\" file=\"InsetLevels\" />\n```\n\n----------------------------------------\n\nTITLE: Starting SSR Development Server\nDESCRIPTION: Command to start the development server in SSR mode. This will automatically add SSR mode if it's not already added to the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m ssr\n```\n\n----------------------------------------\n\nTITLE: File Selection with Counters\nDESCRIPTION: Demonstration of QFile component with basic counter functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/file.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Basic counter\" file=\"CounterBasic\" />\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Vue CLI 2.x in Bash\nDESCRIPTION: Commands to remove older versions of Vue CLI using either npm or yarn, required before installing the newer version.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vue-cli-plugin.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm uninstall -g vue-cli\n# or (depending with which you've installed it)\n$ yarn global remove vue-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying Quasar Project Information\nDESCRIPTION: Shows how to display information about the Quasar project, including versions of Node, Quasar CLI, Quasar, Vue, and other dependencies.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar info\n```\n\n----------------------------------------\n\nTITLE: Preparing Quasar Project for IDE\nDESCRIPTION: Shows how to prepare the Quasar project folder for IDE, enabling autocompletion and other IDE features to work correctly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar prepare\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message for Quasar Framework\nDESCRIPTION: Demonstrates a complete commit message with a fix type, UI scope, subject line, explanation body, and breaking change notice in the footer.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/commit-conventions.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfix(ui): Ensure Range headers adhere more closely to RFC 2616 #2310\n\nTo add new dependency use `range-parser`to compute the range.\nIt is more well-tested in the wild.\n\nBREAKING CHANGE:\nport-runner command line option has changed to runner-port.\nTo migrate your project, change all the commands,\nwhere you use --port-runner to --runner-port.\n```\n\n----------------------------------------\n\nTITLE: Customizing v-touch-hold Wait Time in Vue\nDESCRIPTION: Shows how to customize the wait time for the v-touch-hold directive. The default is 600ms, but this can be changed as needed.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-hold.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-hold:600=\"userHasHold\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Standard Radio Button Implementation in Vue\nDESCRIPTION: Basic usage example showing how to implement standard radio buttons.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/radio.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Standard\" file=\"Standard\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in Quasar App Extension Install Script\nDESCRIPTION: Shows how to use the api.render method to copy a folder from the App Extension templates into the root of the host app, maintaining the folder structure.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/install-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Render a folder from extension templates into devland\n * Needs a path (to a folder) relative to the path of the file where render() is called\n *\n * @param {string} templatePath (relative path to folder to render in app)\n * @param {object} scope (optional; rendering scope variables)\n */\napi.render('./path/to/a/template/folder')\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Picker Component in Vue\nDESCRIPTION: Script block importing the ThemePicker component to provide color selection functionality for the theme builder interface.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/theme-builder/theme-builder.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport ThemePicker from './ThemePicker.vue'\n```\n\n----------------------------------------\n\nTITLE: Overriding Dark Mode Background in CSS\nDESCRIPTION: CSS code to override the default dark mode background color for the entire application using the body class selector.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/dark-mode.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbody.body--dark {\n  background: #000\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Mapping in Quasar\nDESCRIPTION: Demonstrates how to create a custom icon mapping function to map icon names to specific icon definitions or classes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuasar } from 'quasar'\n\nconst myIcons = {\n  'app:icon1': 'img:/path/to/icon1.svg',\n  'app:icon2': 'img:/path/to/icon2.svg',\n  'app:copy': 'fas fa-copy',\n}\n\n// ...\nconst $q = useQuasar()\n\n$q.iconMapFn = (iconName) => {\n  const icon = myIcons[iconName]\n  if (icon !== undefined) {\n    return { icon }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Test File Sections - Bash\nDESCRIPTION: Commands to regenerate specific sections of test files for components and non-component files\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/testing/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm test:specs --target <target_file> --generate <json_root_prop>.<json_subprop>\n# Examples:\n#   $ pnpm test:specs -t QBtn -g props.label\n#   $ pnpm test:specs -t QBtn -g events.click\n#   $ pnpm test:specs -t QBtn -g \"events.update:model-value\"\n#   $ pnpm test:specs -t QBtn -g methods.click\n```\n\n----------------------------------------\n\nTITLE: PreFetch with Script Setup\nDESCRIPTION: Example of implementing PreFetch using Vue 3.3+ script setup syntax\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/prefetch-feature.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n/**\n * The defineOptions is a macro.\n * The options will be hoisted to module scope and cannot access local\n * variables in <script setup> that are not literal constants.\n */\ndefineOptions({\n  preFetch () {\n    console.log('running preFetch')\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Formatting Files in Quasar AE Playground\nDESCRIPTION: Commands to format the project files. The specific package manager command is dynamically inserted based on the project configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-vite/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run format\nyarn format\npnpm format\nbun format\n```\n\n----------------------------------------\n\nTITLE: Basic Commit Message Format for Quasar Framework\nDESCRIPTION: Defines the standard format for commit messages in Quasar repositories, including type, scope, subject, body, and footer sections.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/commit-conventions.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntype(<scope>): <Subject> #<github-ref-id>\n\n<body>\n\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Float and Alignment Classes\nDESCRIPTION: CSS classes for floating elements and vertical alignment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/positioning.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.float-left { float: left; }\n.float-right { float: right; }\n.vertical-top { vertical-align: top; }\n.vertical-middle { vertical-align: middle; }\n.vertical-bottom { vertical-align: bottom; }\n```\n\n----------------------------------------\n\nTITLE: Get Scroll Height (JavaScript)\nDESCRIPTION: Method to get the scrolling container's inner height in pixels.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/scrolling-utils.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { scroll } from 'quasar'\nconst { getScrollHeight } = scroll\n\n// get scrolling container inner height\ngetScrollHeight(scrollTargetDomElement) // returns a Number\n\nconsole.log( getScrollHeight(el) )\n// 824 (it's in pixels always)\n```\n\n----------------------------------------\n\nTITLE: Starting Development Mode in Quasar Projects\nDESCRIPTION: Commands for starting the Quasar application in development mode with hot-code reloading and error reporting using various package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-webpack/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run dev\nyarn dev\npnpm dev\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Removing a Quasar App Extension\nDESCRIPTION: Command to remove an App Extension from your Quasar project. Note that manual cleanup may be required depending on the extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar ext remove <ext-id>\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Quasar SPA\nDESCRIPTION: Example nginx server configuration for hosting a Quasar SPA with proper headers and routing setup\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/deploying.md#2025-04-16_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80 http2;\n    server_name quasar.myapp.com;\n\n    root /home/user/quasar.myapp.com/public;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    index index.html;\n\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/quasar.myapp.com-error.log error;\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue-i18n v9 Boot File Configuration\nDESCRIPTION: Setup configuration for Vue-i18n v9 in a Quasar boot file, showing how to create and configure the i18n instance.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createI18n } from 'vue-i18n'\nimport messages from 'src/i18n'\n// You'll need to create the src/i18n/index.js/.ts file too\n\nexport default ({ app }) => {\n  // Create I18n instance\n  const i18n = createI18n({\n    locale: 'en-US',\n    globalInjection: true,\n    messages\n  })\n\n  // Tell app to use the I18n instance\n  app.use(i18n)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Day of Year in Quasar\nDESCRIPTION: Shows how to get the day number in year for a given date using Quasar's getDayOfYear function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/date-utils.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { date } from 'quasar'\n\nconst newDate = new Date(2017, 1, 4)\nconst day = date.getDayOfYear(newDate) // `day` is 35\n```\n\n----------------------------------------\n\nTITLE: Confirm Prompt Configuration\nDESCRIPTION: Configuration for a yes/no confirmation prompt with an optional default value.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/prompts-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'featureX',\n  type: 'confirm',\n  message: 'Use Feature X?',\n  default: true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnelmole CLI Globally\nDESCRIPTION: Commands to install the Tunnelmole CLI tool globally using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn global add tunnelmole\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g tunnelmole\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -g tunnelmole\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add -g tunnelmole\n```\n\n----------------------------------------\n\nTITLE: Creating Analytics Boot File - Bash Command\nDESCRIPTION: Quasar CLI command to generate a new boot file for Google Analytics integration with optional TypeScript support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/managing-google-analytics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new boot google-analytics [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Reading All Cookies Outside of a Vue File\nDESCRIPTION: Shows how to retrieve all cookies as an object with key-value pairs outside of a Vue component by importing the Cookies utility directly.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-plugins/cookies.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Cookies } from 'quasar'\nconst cookies = Cookies.getAll()\n```\n\n----------------------------------------\n\nTITLE: Horizontal Scroll Observer Implementation\nDESCRIPTION: Shows how to implement horizontal scroll observation using the axis prop.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-observer.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<q-scroll-observer axis=\"horizontal\" @scroll=\"scrollHandler\" />\n```\n\n----------------------------------------\n\nTITLE: Timeline Layouts and Side Selection\nDESCRIPTION: Shows different timeline layouts (dense, comfortable, loose) and side selection options for entries\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/timeline.md#2025-04-16_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Non-Aborting Promise Sequence Example\nDESCRIPTION: Shows how to use runSequentialPromises with abortOnFail set to false, allowing the sequence to continue even when some promises fail.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/other-utils.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSequentialPromises } from 'quasar'\nimport axios from 'axios'\n\nrunSequentialPromises(\n  {\n    users: () => axios.get('https://some-url.com/users'),\n    phones: () => axios.get('https://some-other-url.com/items/phones'),\n    laptops: () => axios.get('https://some-other-url.com/items/laptops')\n  },\n  { abortOnFail: false }\n).then(resultAggregator => {\n  Object.values(resultAggregator).forEach(result => {\n    if (result.status === 'rejected') {\n      console.log(`Failed to fetch ${ result.key }:`, result.reason)\n    }\n    else {\n      console.log(`Succeeded to fetch ${ result.key }:`, result.value)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring BEX Routes in Quasar\nDESCRIPTION: Defines routes for different Browser Extension pages including options, popup, and devtools views.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  { path: '/options', component: () => import('pages/OptionsPage.vue') },\n  { path: '/popup', component: () => import('pages/PopupPage.vue') },\n  { path: '/devtools', component: () => import('pages/DevToolsPage.vue') }\n]\n```\n\n----------------------------------------\n\nTITLE: Colored Material Ripple Implementation\nDESCRIPTION: Shows how to customize the color of material ripple effects. The ripple inherits text color by default but can be configured.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/material-ripples.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Colored\" file=\"Colored\" />\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Documentation Example in Commit Messages\nDESCRIPTION: Shows how to document breaking changes in commit messages, including explanation, justification, and migration notes with before/after examples.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/commit-conventions.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nBREAKING CHANGE: isolate scope bindings definition has changed and\n    the inject option for the directive controller injection was removed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n      myBind: 'bind',\n      myExpression: 'expression',\n      myEval: 'evaluate',\n      myAccessor: 'accessor'\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n      myBind: '@',\n      myExpression: '&',\n      // myEval - usually not useful, but in cases where the expression is assignable, you can use '='\n      myAccessor: '=' // in directive's template change myAccessor() to myAccessor\n    }\n```\n\n----------------------------------------\n\nTITLE: Icon Genie CLI Command Help - Bash\nDESCRIPTION: Comprehensive CLI help output showing all available options for the 'icongenie profile' command, including parameters for icon generation, quality settings, and color configurations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/command-list.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie profile -h\n\n  Description\n    Helper command to easily bootstrap Icon Genie profile files.\n\n  Usage\n    $ icongenie profile -o <filename> [options]\n\n    # supplying params list\n    $ icongenie profile -o <filename> --include pwa,spa --quality 7\n\n    # supplying assets based on Icon Genie's internal list\n    $ icongenie profile -o <filename> --assets spa,bex\n\n  Options\n    --output, -o          Name of the new Icon Genie profile file\n\n    --assets, -a          Prefill the assets Array with Icon Genie's\n                          internal list, based on the modes that you indicate;\n                            [all|spa|pwa|ssr|bex|cordova|capacitor|electron]\n                          Multiple can be specified, separated by \",\":\n                            spa,cordova\n\n    --icon, -i            Path to source file for icons; must be:\n                            - a .png file\n                            - min resolution: 64x64 px (the higher the better!!)\n                            - with transparency\n                          Best results are with a square image (height = width)\n                          Image will be trimmed automatically\n                            (also see \"skip-trim\" and \"padding\" param)\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --background, -b      Path to optional background source file (for splash screens);\n                          must be:\n                            - a .png file\n                            - min resolution: 128x128 px (the higher the better!!)\n                            - transparency is optional (but recommended if you\n                              combine with the splashscreen-color param)\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --include             Prefill the params.include property;\n                            [all|spa|pwa|ssr|bex|cordova|capacitor|electron]\n                          Multiple can be specified, separated by \",\":\n                            spa,cordova\n\n    --filter, -f          Prefill the params.filter property;\n                            [png|ico|icns|splashscreen|svg]\n\n    --quality             Prefill in the params.quality property;\n                          Quality of the files [1 - 12] (default: 5)\n                            - higher quality --> bigger filesize & slower to create\n                            - lower quality  --> smaller filesize & faster to create\n\n    --skip-trim           Do not trim the icon source file\n\n    --padding             Apply fixed padding to the icon after trimming it;\n                          Syntax: <horiz: number>,<vert: number>\n                          Default: 0,0\n                          Example: \"--padding 10,5\" means apply 10px padding to top\n                            10px to bottom, 5px to left side and 5px to rightside\n\n    --theme-color         Prefill the params.themeColor property;\n                          Theme color to use for all generators requiring a color;\n                          It gets overridden if any generator color is also specified;\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --svg-color           Prefill the params.svgColor property;\n                          Color to use for the generated monochrome svgs\n                          Default (if no theme-color is specified): 1976D2\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --png-color           Prefill the params.pngColor property;\n                          Background color to use for the png generator, when\n                          \"background: true\" in the asset definition (like for\n                          the Cordova/Capacitor iOS icons);\n                          Default (if no theme-color is specified): fff\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-color  Prefill the params.splashscreenColor property;\n                          Background color to use for the splashscreen generator;\n                          Default (if no theme-color is specified): fff\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-icon-ratio  Prefill the params.splashscreenIconRatio property;\n                               Ratio of icon size in respect to the width or height\n                               (whichever is smaller) of the resulting splashscreen;\n                               Represents percentages; Valid values: 0 - 100\n                               If 0 then it doesn't add the icon of top of background\n                               Default: 40\n```\n\n----------------------------------------\n\nTITLE: QNoSsr with Only Placeholder\nDESCRIPTION: Example showing usage of QNoSsr with only server-side content defined in the placeholder slot\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr>\n  <template v-slot:placeholder>\n    <div>Rendered on server</div>\n  </template>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: Using Vue Component in Quasar Documentation\nDESCRIPTION: Demonstrates how to use a Vue component within Quasar's documentation pages. Self-closing tag format is used to render the IntroductionVideo component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/introduction-to-quasar/introduction-to-quasar.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<IntroductionVideo />\n```\n\n----------------------------------------\n\nTITLE: Corner Position Classes\nDESCRIPTION: CSS classes for positioning elements at corners of the viewport or container.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/positioning.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.fixed-top-left, .absolute-top-left { top: 0; left: 0; }\n.fixed-top-right, .absolute-top-right { top: 0; right: 0; }\n.fixed-bottom-left, .absolute-bottom-left { bottom: 0; left: 0; }\n.fixed-bottom-right, .absolute-bottom-right { bottom: 0; right: 0; }\n```\n\n----------------------------------------\n\nTITLE: Preventing Scroll with Touch Pan in Vue\nDESCRIPTION: Using the prevent modifier with v-touch-pan directive to prevent page scrolling during pan events.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-directives/touch-pan.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-touch-pan.prevent=\"userHasPanned\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Updated App.vue Template Structure\nDESCRIPTION: Modified App.vue template structure removing unnecessary wrapper div for Vue 3 compatibility.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <router-view />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Analytics Boot File in Quasar Config\nDESCRIPTION: Configuration snippet showing how to conditionally load the Google Analytics boot file only for Cordova-wrapped applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nboot: [\n  ctx.mode.cordova ? 'google-analytics' : ''\n]\n```\n\n----------------------------------------\n\nTITLE: Adding BEX Mode to Quasar Project\nDESCRIPTION: Command to add Browser Extension (BEX) mode to an existing Quasar project. This creates the necessary /src-bex folder and files for BEX development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add bex\n```\n\n----------------------------------------\n\nTITLE: Development Commands for Quasar UI Component\nDESCRIPTION: A collection of commands to start development in various modes including SPA, UMD, SSR, Cordova iOS/Android, and Electron. These commands facilitate testing the component in different environments.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# start dev in SPA mode\n$ yarn dev\n\n# start dev in UMD mode\n$ yarn dev:umd\n\n# start dev in SSR mode\n$ yarn dev:ssr\n\n# start dev in Cordova iOS mode\n$ yarn dev:ios\n\n# start dev in Cordova Android mode\n$ yarn dev:android\n\n# start dev in Electron mode\n$ yarn dev:electron\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar App Extension using Quasar CLI\nDESCRIPTION: This command installs the Quasar App Extension using the Quasar CLI. It retrieves the extension from the NPM registry and installs it to the user's project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-js/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nquasar ext add <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Insecure IPC Implementation Example\nDESCRIPTION: Example of unsafe IPC implementation in preload script that should be avoided for security reasons.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD code; DON'T!!\ncontextBridge.exposeInMainWorld('myAPI', {\n  send: ipcRenderer.send\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Electron Main Process Configuration\nDESCRIPTION: Hook for modifying the esbuild configuration for Electron's main process.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nif (api.hasVite === true) {\n  api.extendElectronMainConf((esbuildConf, api) => {\n    // add/remove/change Quasar CLI generated esbuild config object\n    // that is used for the SSR webserver (includes SSR middlewares)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DonatingButtons Component in Vue\nDESCRIPTION: Imports the DonatingButtons Vue component to display donation options on the page.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/sponsors-and-backers/sponsors-and-backers.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport DonatingButtons from './DonatingButtons.vue'\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova CLI\nDESCRIPTION: Global installation of Cordova Command Line Interface using npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g cordova\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar App in Development Mode (Bash)\nDESCRIPTION: This command starts the Quasar app in development mode, enabling features like hot-code reloading and error reporting.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/playground/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Repository and Pulling Changes in Git\nDESCRIPTION: This code demonstrates how to add a remote repository and pull changes from a specific branch in Git. It uses an example of pulling from a user's forked repository.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add JohnSmith https://github.com/JohnSmith/quasar.git\n$ git pull JohnSmith orange\n```\n\n----------------------------------------\n\nTITLE: Importing Format Utils with ES6 Destructuring in JavaScript\nDESCRIPTION: Shows how to import specific formatter methods from Quasar using ES6 destructuring to optimize tree-shaking. Only the explicitly imported methods will be included in the final bundle.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// we import all of `format`\nimport { format } from 'quasar'\n// destructuring to keep only what is needed\nconst { capitalize, humanStorageSize } = format\n\nconsole.log( capitalize('some text') )\n// Some text\nconsole.log( humanStorageSize(13087) )\n// 12.8kB\n```\n\n----------------------------------------\n\nTITLE: Adding Capacitor Mode to Quasar Project\nDESCRIPTION: Command to add Capacitor mode to a Quasar project, which generates a Capacitor project in the /src-capacitor folder.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/preparation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar mode add capacitor\n```\n\n----------------------------------------\n\nTITLE: Tunnelmole CLI Output Example\nDESCRIPTION: Example output when running Tunnelmole CLI, showing the generated public URLs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80\nhttp://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\nhttps://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI 4.5.11+ in Bash\nDESCRIPTION: Command to install the required version of Vue CLI globally using npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vue-cli-plugin.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @vue/cli\n```\n\n----------------------------------------\n\nTITLE: Aligning Android APK for Optimization\nDESCRIPTION: Command to zip align the APK file, which optimizes it for the app store. This step is performed using the zipalign tool from the Android SDK.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ zipalign -v 4 <path-to-same-apk-file> HelloWorld.apk\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Quasar Application\nDESCRIPTION: Commands to install project dependencies using either yarn or npm package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-vite-2/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Package Installation in Quasar App Extension Uninstall Script\nDESCRIPTION: Demonstrates how to use the api.hasPackage method to check if a package is installed in the host app and optionally verify its version using a semver condition.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {string} packageName\n * @param {string} (optional) semverCondition\n * @return {boolean} package is installed and meets optional semver condition\n */\nif (api.hasPackage('vuelidate')) {\n  // hey, this app has it (any version of it)\n}\nif (api.hasPackage('quasar', '^2.0.0')) {\n  // hey, this app has Quasar UI v2 installed\n}\n```\n\n----------------------------------------\n\nTITLE: String Padding with pad Method in Quasar\nDESCRIPTION: Shows how to use the pad formatter which pads a string to a specified length with a padding character. By default, it pads to length 2 with '0' characters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/formatter-utils.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { format } from 'quasar'\nconst { pad } = format\n\n// (String) pad(String toPad, Number length, String paddingCharacter)\n// length is default 2\n// paddingCharacter is default '0'\nconsole.log( pad('2', 4) )\n// '0002'\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS RTL CSS with Package Managers\nDESCRIPTION: Commands for installing the postcss-rtlcss package using different package managers (Yarn, NPM, PNPM, and Bun) to enable RTL support in a Vite project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev postcss-rtlcss\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev postcss-rtlcss\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -D postcss-rtlcss\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add --dev postcss-rtlcss\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration for Capacitor\nDESCRIPTION: Options for customizing the Webpack configuration for UI components in the /src directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/configuring-capacitor.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbuild: {\n  extendWebpack(webpackCfg) { ... },\n  chainWebpack(webpackChain) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Project for Production in Bash\nDESCRIPTION: Command to build the application for production deployment, creating optimized assets.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-webpack-4/BASE/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Accessing Command-Specific Help in Icon Genie CLI\nDESCRIPTION: Shows how to access help documentation for any specific Icon Genie command using the --help flag.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/command-list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie [command_name] --help\n```\n\n----------------------------------------\n\nTITLE: Mini-mode with Custom Slot\nDESCRIPTION: Shows how to use custom slot content for mini-mode drawer state.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/drawer.md#2025-04-16_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Mini-mode with slot\" file=\"MiniSlot\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Quasar Documentation Homepage\nDESCRIPTION: Sets up the YAML frontmatter configuration for the documentation homepage, defining title, description, and other page properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/docs/docs.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Documentation\ndesc: Welcome to Quasar documentation website!\nheading: false\neditLink: false\nkeys: Welcome,Quasar\n---\n```\n\n----------------------------------------\n\nTITLE: CSS Spacing Class Pattern Syntax\nDESCRIPTION: Defines the naming pattern for Quasar's spacing utility classes. Shows the structure with type (padding/margin), direction (top/right/bottom/left/all/x/y), and size (none/auto/xs/sm/md/lg/xl).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/spacing.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nq-[p|m][t|r|b|l|a|x|y]-[none|auto|xs|sm|md|lg|xl]\n    T       D                   S\n```\n\n----------------------------------------\n\nTITLE: Accessing Public Folder\nDESCRIPTION: Code to access files in the public folder using proper path resolution\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst currentDir = fileURLToPath(new URL('.', import.meta.url))\n\nconst publicFolder = path.resolve(currentDir, process.env.QUASAR_PUBLIC_FOLDER)\n```\n\n----------------------------------------\n\nTITLE: Handling Vue Component Events with Event Listeners\nDESCRIPTION: Example of handling Quasar component events using event listeners in the template and corresponding methods in the Composition API setup function.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/how-to-use-vue.md#2025-04-16_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <q-bogus @show=\"doSomething\" @hide=\"doSomethingElse\" />\n</template>\n\n<script>\nexport default {\n  setup () {\n    function doSomething () {\n      // this method has been called (in this case)\n      // because @show event was triggered by QBogus component\n    }\n\n    function doSomethingElse () {\n      // this method has been called (in this case)\n      // because @hide event was triggered by QBogus component\n    }\n\n    return {\n      doSomething,\n      doSomethingElse\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Component Files - Bash\nDESCRIPTION: Commands for testing various types of non-component exports including functions, variables, and classes\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/testing/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# target the default exporting function\n$ pnpm test:specs -t set-css-var -g functions.default\n\n# target the default exporting object:\n$ pnpm test:specs -t set-css-var -g variables.default\n\n# target the default exporting class:\n$ pnpm test:specs -t EventBus -g classes.default\n\n# target a named exported variable\n$ pnpm test:specs -t set-css-var -g variables.useSizeDefaults\n\n# target a named exported class\n$ pnpm test:specs -t set-css-var -g classes.myClassName\n\n# target a named exported function\n$ pnpm test:specs -t global-nodes -g functions.createGlobalNode\n```\n\n----------------------------------------\n\nTITLE: QSlider Inner Min/Max Implementation\nDESCRIPTION: Example showing how to use inner-min and inner-max props to restrict the model value within a specific interval.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/slider.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Inner min/max\" file=\"InnerMinMax\" />\n```\n\n----------------------------------------\n\nTITLE: Upward Shadow Classes in CSS\nDESCRIPTION: CSS classes for adding upward-pointing shadows with configurable depths from 1-24, allowing elevation effects to appear above the element.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/shadows.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.shadow-up-1\n.shadow-up-2\n.shadow-up-N /* N = 1 to 24 */\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Environment Variables on Unix\nDESCRIPTION: Bash commands to set up environment variables for Android SDK on Unix-based systems (macOS, Linux).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport ANDROID_SDK_ROOT=\"$HOME/Android/Sdk\"\nexport PATH=$PATH:$ANDROID_SDK_ROOT/tools; PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Generating BEX Icons with Icon Genie CLI\nDESCRIPTION: Command to generate browser extension icons using Icon Genie CLI tool. The command takes a source icon file and generates all required icon sizes for browser extensions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/app-icons-browser-extension.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m bex -i /path/to/source/icon.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v4 Dependencies\nDESCRIPTION: Required package dependencies for Capacitor v4 implementation in Quasar, including optional UI functionality packages.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^4.0.0\",\n  \"@capacitor/cli\": \"^4.0.0\",\n  \"@capacitor/core\": \"^4.0.0\",\n  \"@capacitor/splash-screen\": \"^4.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Loader with chainWebpack\nDESCRIPTION: Equivalent configuration using the chainWebpack method to add a JSON loader to the Webpack configuration in a Quasar app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nbuild: {\n  chainWebpack (chain) {\n    chain.module.rule('json')\n      .test(/\\.json$/)\n      .use('json-loader')\n        .loader('json-loader')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Paths in Quasar App Extension Uninstall Script\nDESCRIPTION: Shows how to use the api.resolve method to resolve paths within the app where the App Extension is running. It provides examples for resolving paths to different directories of the app.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// resolves to root of app\napi.resolve.app('src/my-file.js')\n\n// resolves to root/src of app\napi.resolve.src('my-file.js')\n\n// resolves to root/public of app\n// (@quasar/app-webpack v3.4+ or @quasar/app-vite v1+)\napi.resolve.public('my-image.png')\n\n// resolves to root/src-pwa of app\napi.resolve.pwa('some-file.js')\n\n// resolves to root/src-ssr of app\napi.resolve.ssr('some-file.js')\n\n// resolves to root/src-cordova of app\napi.resolve.cordova('config.xml')\n\n// resolves to root/src-electron of app\napi.resolve.electron('some-file.js')\n\n// resolves to root/src-bex of app\napi.resolve.bex('some-file.js')\n```\n\n----------------------------------------\n\nTITLE: Adding Quasar Plugin to Vue CLI Project in Bash\nDESCRIPTION: Commands to navigate to the project directory and add the Quasar plugin to an existing Vue CLI project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vue-cli-plugin.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-app\n$ vue add quasar\n```\n\n----------------------------------------\n\nTITLE: Defining Strings in JSON\nDESCRIPTION: Illustrates how strings are defined in JSON, enclosed in double quotes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"This is a string\"\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar Testing Extensions\nDESCRIPTION: Commands to add testing extensions to an existing Quasar project. Supports adding end-to-end testing with Cypress or unit testing with Jest or Vitest through the Quasar CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/testing-and-auditing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd your-quasar-project\n\n$ quasar ext add @quasar/testing-e2e-cypress\n# or\n$ quasar ext add @quasar/testing-unit-jest\n# or\n$ quasar ext add @quasar/testing-unit-vitest\n```\n\n----------------------------------------\n\nTITLE: Changing Quasar Icon Set in JavaScript\nDESCRIPTION: How to switch to a different icon set after loading it via CDN, using the Quasar.IconSet.set method.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/umd/umd.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nQuasar.IconSet.set(Quasar.IconSet.fontawesomeV6)\n```\n\n----------------------------------------\n\nTITLE: Expanded QPageScroller Example in Vue\nDESCRIPTION: Shows an expanded example of QPageScroller usage, likely demonstrating more complex configurations or additional features of the component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/page-scroller.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Expanded\" file=\"Expanded\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v3 Dependencies\nDESCRIPTION: Required package dependencies for Capacitor v3 implementation in Quasar. Note: HTTPS devserver is not supported in this version.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^1.0.0\",\n  \"@capacitor/cli\": \"^3.0.0\",\n  \"@capacitor/core\": \"^3.0.0\",\n  \"@capacitor/splash-screen\": \"^1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Opening IDE for Cordova Development\nDESCRIPTION: Command to open the IDE (Android Studio / Xcode) for manual emulator selection or device testing.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m [ios|android] --ide\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component Globally\nDESCRIPTION: This boot file imports the custom component and registers it globally with Vue, making it available throughout the application.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/provide-a-ui-component.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport MyComponent from '../component/MyComponent.vue'\n\nexport default ({ app }) => {\n  app.component('my-component', MyComponent)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Specific Quasar Commands\nDESCRIPTION: Shows how to get help for any specific Quasar command by using the --help or -h option.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar [command-name] --help\n```\n\n----------------------------------------\n\nTITLE: Getting Element Offset in Quasar\nDESCRIPTION: Demonstrates how to get an element's offset position (top and left coordinates) relative to the screen viewport.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-utils/dom-utils.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dom } from 'quasar'\nconst { offset } = dom\n\n// Offset on screen\nconsole.log(offset(DomElement))\n// { top: 10, left: 100 }\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Splash Screen Plugin - Bash Commands\nDESCRIPTION: Commands to navigate to Cordova directory, install the splash screen plugin, and save the configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/app-icons-cordova.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src-cordova\n$ cordova plugin add cordova-plugin-splashscreen\n$ cordova plugin save\n```\n\n----------------------------------------\n\nTITLE: Including RTL CSS Variant for Quasar UI Component\nDESCRIPTION: Shows how to include the Right-to-Left (RTL) variant of the component's CSS for applications that require RTL language support. This replaces the standard CSS import with the RTL version.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://cdn.jsdelivr.net/npm/quasar-ui-<%= name %>/dist/index.rtl.min.css\" rel=\"stylesheet\" type=\"text/css\">\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server\nDESCRIPTION: Command to start the Quasar application in development mode with features like hot-code reloading and error reporting.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/playground/app-vite-ts/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: BrowserWindow Sandbox Configuration\nDESCRIPTION: Configuration for BrowserWindow to allow @electron/remote in preload script\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-accessing-files.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmainWindow = new BrowserWindow({\n  webPreferences: {\n    sandbox: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Quasar Configuration in App Extension\nDESCRIPTION: This snippet shows how to set up the main index.js file for a Quasar App Extension. It performs compatibility checks and extends the Quasar configuration to include the new component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/provide-a-ui-component.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (api) {\n  api.compatibleWith('quasar', '^2.0.0')\n\n  if (api.hasVite === true) {\n    api.compatibleWith('@quasar/app-vite', '^2.0.0')\n  }\n  else { // api.hasWebpack === true\n    api.compatibleWith('@quasar/app-webpack', '^4.0.0')\n  }\n\n  api.extendQuasarConf(extendConf)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Breakpoint Values via $sizes Object\nDESCRIPTION: Alternative syntax for accessing breakpoint values in Sass using the $sizes object. This provides access to breakpoint values for xs, sm, md, lg, and xl screen sizes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/breakpoints.md#2025-04-16_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n$sizes.<breakpoint>\n// replace <breakpoint> with xs, sm, md, lg or xl\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Layout Gallery Component in Vue\nDESCRIPTION: This snippet imports the LayoutGallery Vue component and renders it with a top margin class. The component presents various ready-made layouts that users can implement in their Quasar applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/gallery/gallery.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport LayoutGallery from './LayoutGallery.vue'\n</script>\n\n<LayoutGallery class=\"q-mt-md\" />\n```\n\n----------------------------------------\n\nTITLE: QExpansionItem State Control\nDESCRIPTION: Shows how to control the expansion state of the QExpansionItem component programmatically.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/expansion-item.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Controlling expansion state\" file=\"ControlExpansionState\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Quasar Documentation Page in Markdown\nDESCRIPTION: This code snippet defines the frontmatter for a Quasar documentation page. It specifies the title and description of the page using YAML syntax within Markdown.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/project-maintainer.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: The Role of the Project Maintainer\ndesc: The role of a Quasar project manager\n---\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Cordova App for Android Release\nDESCRIPTION: Commands to generate a release build for Android using Quasar CLI. This creates an unsigned APK file based on the settings in the Cordova config.xml file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m cordova -T android\n# or the short form:\n$ quasar build -m android\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v2 Dependencies\nDESCRIPTION: Core package dependencies required for Capacitor v2 implementation in Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/cli\": \"^2.0.0\",\n  \"@capacitor/core\": \"^2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Environment Setup\nDESCRIPTION: Setting environment variables for Windows systems using setx commands.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsetx ANDROID_HOME \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx ANDROID_SDK_ROOT \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx path \"%path%;%ANDROID_SDK_ROOT%\\tools;%ANDROID_SDK_ROOT%\\platform-tools;<gradle_path>\\bin;\"\n```\n\n----------------------------------------\n\nTITLE: Generating Electron App Icons with Icon Genie CLI in Bash\nDESCRIPTION: This command uses the Icon Genie CLI to automatically generate and place app icons for an Electron-based Quasar application. It requires specifying the mode as 'electron' and providing the path to the source icon file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/app-icons-electron.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m electron -i /path/to/source/icon.png\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic JSON Object Structure\nDESCRIPTION: Shows the structure of a simple JSON object with key-value pairs.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/json-api.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"key1\": \"value1\", \"key2\": \"value2\" }\n```\n\n----------------------------------------\n\nTITLE: Verifying Android SDK Installation\nDESCRIPTION: Commands to verify Android SDK directory contents and PATH configuration\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -la $ANDROID_HOME\n\n# or\n\n$ ls -la $ANDROID_SDK_ROOT\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Port with Tunnelmole CLI\nDESCRIPTION: Command to expose a local port (80) to the internet using the Tunnelmole CLI.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Format Specification\nDESCRIPTION: SVG icon format specification showing the syntax for defining SVG icons as strings. Includes path and optional viewBox parameters, with examples of both formats.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/extras/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSyntax: \"<path>|<viewBox>\" or \"<path>\" (with implicit viewBox of '0 0 24 24')\nExamples:\n  M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z|0 0 24 24\n  M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Dependencies for JavaScript Projects\nDESCRIPTION: Command to install required ESLint dependencies for JavaScript-based Quasar projects using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/linter.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev @eslint/js eslint@9 eslint-plugin-vue globals eslint-webpack-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Module Resolution\nDESCRIPTION: Setup for enabling modern module resolution in ESLint using @rushstack/eslint-patch package.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/utils/eslint-config/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@rushstack/eslint-patch/modern-module-resolution'); // 👈 Add this line\n\nmodule.exports = {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Colors in Sass\nDESCRIPTION: Shows how to use Quasar color variables in Sass styling\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/color-palette/color-palette.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Notice lang=\"sass\" -->\n<style lang=\"sass\">\ndiv\n  color: $red-1\n  background-color: $grey-5\n</style>\n```\n\n----------------------------------------\n\nTITLE: Production Build Commands for Capacitor\nDESCRIPTION: Commands for creating production builds of Capacitor apps for iOS or Android platforms. Includes both short and long-form command syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m capacitor -T [ios|android]\n\n# ..or the longer form:\n$ quasar build --mode capacitor --target [ios|android]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, specifying title, description, and display settings.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/integrations/integrations.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Quasar Integrations\ndesc: Quasar Integrations\nheading: false\neditLink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Using Vue Transition Group with Multiple Elements (HTML)\nDESCRIPTION: This example shows how to use Vue's transition-group component to apply animations to multiple DOM elements simultaneously, including a paragraph and a Quasar button.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/animations.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<transition-group\n  appear\n  enter-active-class=\"animated fadeIn\"\n  leave-active-class=\"animated fadeOut\"\n>\n  <!-- We wrap a \"p\" tag and a QBtn -->\n  <p key=\"text\">\n     Lorem Ipsum\n  </p>\n  <q-btn\n    key=\"email-button\"\n    color=\"secondary\"\n    icon=\"mail\"\n    label=\"Email\"\n  />\n</transition-group>\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Timeline Implementation\nDESCRIPTION: Example of QTimeline component with forced dark mode styling\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/timeline.md#2025-04-16_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Building SSR Production Bundle in Quasar\nDESCRIPTION: Commands to create a production build for SSR mode using Quasar CLI. Shows both abbreviated and full command syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/build-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m ssr\n\n# ..or the longer form:\n$ quasar build --mode ssr\n```\n\n----------------------------------------\n\nTITLE: Development Server Commands\nDESCRIPTION: Commands for starting the development server with Cordova mode and passing additional parameters.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m cordova -T [android|ios]\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar dev -m ios -- some params --and options --here\n# when on Windows and using PowerShell:\n$ quasar dev -m ios '--' some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: Including Quasar UI Component via UMD\nDESCRIPTION: Demonstrates how to include the component via UMD in an HTML file. This method exposes the component globally through a window object, making it usable in environments without a build system.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- AFTER the Quasar stylesheet tags: -->\n  <link href=\"https://cdn.jsdelivr.net/npm/quasar-ui-<%= name %>/dist/index.min.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n<body>\n  <!-- at end of body, AFTER Quasar script(s): -->\n  <script src=\"https://cdn.jsdelivr.net/npm/quasar-ui-<%= name %>/dist/index.umd.min.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: XML Tag Reference in Quasar Applications\nDESCRIPTION: An example of XML syntax that may be required in a Quasar application's index.html file for icon declarations. Icon Genie CLI will generate instructions for adding appropriate XML tags to your project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xml>\n```\n\n----------------------------------------\n\nTITLE: Importing Runtime Code from Package\nDESCRIPTION: Demonstrates how to import runtime code exported from the app extension's index.ts file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/app-extension/src/runtime/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { someFunction } from '<%= pkgName %>'\n```\n\n----------------------------------------\n\nTITLE: Simple JSON Configuration Example\nDESCRIPTION: A basic JSON configuration object with min, max, and super properties. This illustrates a simple configuration structure that might be used in Quasar applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min\": 0,\n  \"super\": false,\n  \"max\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SponsorList Component in Vue\nDESCRIPTION: Renders the SponsorList component that displays the Platinum, Gold, and Silver sponsors contributing to Quasar Framework development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/sponsors-and-backers/sponsors-and-backers.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<SponsorList />\n```\n\n----------------------------------------\n\nTITLE: Building Quasar App for Production (Bash)\nDESCRIPTION: This command builds the Quasar app for production deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/playground/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Complex Tabbed Code Interface with Multiple Languages\nDESCRIPTION: A comprehensive tabbed interface example with JavaScript and diff code snippets. Shows how to create a more complex documentation component with tabs for different code variations and languages.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_13\n\nLANGUAGE: tabs\nCODE:\n```\n<<| js One |>>\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n<<| js [numbered] Two (numbered) |>>\nconst x = {\n  dev: true,\n  prod: false\n}\n<<| diff Three (with diff) |>>\n{\n  min: 0\n- super: false\n+ super: true\n  max: 100\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v1 Dependencies\nDESCRIPTION: Package.json dependencies configuration for Capacitor v1, including basic CLI and core dependencies.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/cli\": \"^1.0.0\",\n  \"@capacitor/core\": \"^1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linting Files in Quasar AE Playground\nDESCRIPTION: Commands to run the linter on the project files. The specific package manager command is dynamically inserted based on the project configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-vite/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run lint\nyarn lint\npnpm lint\nbun lint\n```\n\n----------------------------------------\n\nTITLE: Using Custom Subdomain with Tunnelmole\nDESCRIPTION: Command to use a custom subdomain with Tunnelmole when self-hosting or using an API key with the official service.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ tmole 80 as mysubdomain.tunnelmole.com\n```\n\n----------------------------------------\n\nTITLE: Tabbed Code Interface with JavaScript Examples\nDESCRIPTION: Demonstrates a tabbed interface for code examples with numbered and non-numbered JavaScript configuration files. This provides a way to organize multiple related code examples into a single interactive component.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_12\n\nLANGUAGE: tabs\nCODE:\n```\n<<| js [numbered] Config file |>>\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n<<| js Other file |>>\nconst x = {\n  dev: true,\n  prod: false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Android Device Permissions on Linux\nDESCRIPTION: These commands create and configure udev rules to allow access to Android devices for development without root permissions on Linux systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# create the .rules file and insert the content\n# from below this example\nsudo vim /etc/udev/rules.d/51-android.rules\nsudo chmod 644   /etc/udev/rules.d/51-android.rules\nsudo chown root. /etc/udev/rules.d/51-android.rules\nsudo service udev restart\nsudo killall adb\n```\n\n----------------------------------------\n\nTITLE: Quasar Development NPM Scripts\nDESCRIPTION: Common NPM scripts used during Quasar development. These include commands for starting the dev server, building distribution files, and linting the source code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Start dev server with a demo app. This app has Quasar source code linked directly so any change will trigger HMR (Hot Module Reload) on the dev server.\n# There's a section for each feature where tests are made.\n$ pnpm dev\n\n# build all dist files, including npm packages\n$ pnpm build\n# build only js dist files\n$ pnpm build js\n# build only type related files\n$ pnpm build js types\n# build only css dist files\n$ pnpm build css\n\n# lint sources\n$ pnpm lint\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component for Documentation Homepage\nDESCRIPTION: Imports the DocsHomepage Vue component to be used in the page. The script tag includes the 'doc' attribute which is likely a custom directive for the documentation system.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/docs/docs.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport DocsHomepage from './DocsHomepage.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: QKnob with Custom Step\nDESCRIPTION: Demonstration of QKnob with custom step values for incremental changes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/knob.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<DocExample title=\"Custom step\" file=\"Step\" />\n```\n\n----------------------------------------\n\nTITLE: Path Environment Variable Example in Bash\nDESCRIPTION: Shows a typical PATH environment variable on Linux systems, including Android SDK paths. This illustrates how environment paths are structured and can be referenced in Quasar development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/home/your_user/bin:/home/your_user/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/your_user/Android/Sdk/tools:/home/your_user/Android/Sdk/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Importing QuasarReleases Vue Component\nDESCRIPTION: Imports a Vue component called QuasarReleases that likely displays release information for Quasar framework. This is enclosed in a script tag with a 'doc' attribute.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/release-notes/release-notes.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport QuasarReleases from './QuasarReleases.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Quasar App for Production\nDESCRIPTION: Command to build the Quasar application for production deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/playground/app-vite-ts/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Installing Pug Dependencies\nDESCRIPTION: Commands to install Pug and its Webpack loader dependencies using different package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/handling-webpack.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add --dev pug pug-plain-loader\n```\n\n----------------------------------------\n\nTITLE: Dialog Plugin HTML Configuration\nDESCRIPTION: Example of enabling HTML content in Dialog plugin, which requires manual sanitization of title and message.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/security/dos-and-donts.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhtml: true\n```\n\n----------------------------------------\n\nTITLE: Building Quasar SSR with Debug Mode\nDESCRIPTION: Commands for creating a production build with debugging enabled in SSR mode. Demonstrates both short and long form syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m ssr -d\n\n# ..or the longer form\n$ quasar build -m ssr --debug\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Config Dependencies in package.json\nDESCRIPTION: Configuration for adding the eslint-config-quasar package as a workspace dependency in package.json file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/utils/eslint-config/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"eslint-config-quasar\": \"workspace:*\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening IDE for Development\nDESCRIPTION: Command to open Android Studio or Xcode for manual emulator selection and device testing\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/build-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev -m [ios|android] --ide\n```\n\n----------------------------------------\n\nTITLE: Using localhost.run with SSH\nDESCRIPTION: Command to create a tunnel using localhost.run and SSH, forwarding a remote port 80 to local port 8080.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -R 80:localhost:8080 ssh.localhost.run\n# In case your development server doesn't run on port 8080 you need to change the number to the correct port\n```\n\n----------------------------------------\n\nTITLE: Cordova-Specific Safe Area CSS Implementation\nDESCRIPTION: CSS implementation that targets Cordova builds specifically using the .cordova body class. Demonstrates safe area inset usage for top padding on mobile devices.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nbody.cordova .my-selector {\n  padding-top: constant(safe-area-inset-top);\n  padding-top: env(safe-area-inset-top);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Quasar UI Component Package\nDESCRIPTION: Command to build the Quasar UI component package for distribution. This creates optimized production files in the dist directory that can be published to npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Custom Node Server Implementation - JavaScript\nDESCRIPTION: Examples of implementing custom Node.js servers for serving SPA/PWA builds with different Vue Router modes and API proxy configuration\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport serveStatic from 'serve-static'\n\nconst port = process.env.PORT || 5000\nconst app = express()\n\napp.use(serveStatic(...path-to-dist...))\napp.listen(port)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\nimport serveStatic from 'serve-static'\nimport history from 'connect-history-api-fallback'\n\nconst port = process.env.PORT || 5000\nconst app = express()\n\napp.use(history())\napp.use(serveStatic(...path-to-dist...))\napp.listen(port)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createProxyMiddleware } from 'http-proxy-middleware'\n\n// ...\napp.use('/api', createProxyMiddleware({\n  target: `http://my-api.com:5050`,\n  pathRewrite: {\"^/api\" : \"\"}\n}))\n\n// then app.listen(...)\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Font CSS Configuration\nDESCRIPTION: CSS configuration for custom webfont implementation including font-face declaration and base class styling. Demonstrates setup for 'My App Icon' custom font with woff and woff2 formats.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/icon.md#2025-04-16_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/*\n  For this example, we are creating:\n  /src/css/my-app-icon.css\n*/\n\n.my-app-icon {\n  font-family: 'My App Icon';\n  font-weight: 400;\n}\n\n@font-face {\n  font-family: 'My App Icon';\n  font-style: normal; /* whatever is required for your */\n  font-weight: 400;   /* webfont.... */\n  src: url(\"./my-app-icon.woff2\") format(\"woff2\"), url(\"./my-app-icon.woff\") format(\"woff\");\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Button to Quasar Flex Playground\nDESCRIPTION: A navigation button component that links to the Flex Playground page, allowing users to interactively learn more about Quasar's flex system.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/gutter.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<q-btn icon-right=\"launch\" label=\"Flex Playground\" to=\"/layout/grid/flex-playground\" />\n```\n\n----------------------------------------\n\nTITLE: Inline Code Example in Markdown\nDESCRIPTION: Example of using inline code formatting in Markdown with the backtick syntax.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`fugiat nulla`\n```\n\n----------------------------------------\n\nTITLE: Diff Example of Code Changes\nDESCRIPTION: A diff representation showing changes to a language list with added comments. This demonstrates how to document code changes in a readable format, showing specific line additions and context.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n@@ -13,6 +13,8 @@ const langList = [\n   { name: 'xml' },\n   { name: 'nginx' },\n   { name: 'html' },\n+\n+  // special grammars:\n   { name: 'diff' }\n ]\n\n@@ -20,6 +22,12 @@ loadLanguages(langList.map(l => l.name))\n\n const langMatch = langList.map(l => l.aliases || l.name).join('|')\n\n+/**\n+ * lang -> one of the supported languages (langList)\n+ * attrs -> optional attributes:\n+ *    * numbered - lines are numbered\n+ * title -> optional card title\n+ */\n const definitionLineRE = new RegExp(\n   '^' +\n   `(?<lang>(tabs|${ langMatch }))` + // then a language name\n@@ -28,6 +36,10 @@ const definitionLineRE = new RegExp(\n   '$'\n )\n\n+/**\n+ * <<| lang [attrs] [title] |>>\n+ * ...content...\n+ */\n const tabsLineRE = new RegExp(\n   '^<<\\\\|\\\\s+' + // starts with \"<<|\" + at least one space char\n   `(?<lang>${ langMatch })` + // then a language name\n@@ -72,29 +84,65 @@ function extractTabs (content) {\n       const props = tabMap[ tabName ]\n       return (\n         `<q-tab-panel class=\"q-pa-none\" name=\"${ tabName }\">` +\n-        `<pre v-pre class=\"doc-code\">${ highlight(props.content.join('\\n'), props.attrs) }</pre>` +\n-        '<copy-button />' +\n+        highlight(props.content.join('\\n'), props.attrs) +\n         '</q-tab-panel>'\n       )\n     }).join('\\n')\n   }\n }\n\n-function highlight (content, attrs) {\n-  const { lang, numbered } = attrs\n-  const highlightedText = prism.highlight(content, prism.languages[ lang ], lang)\n+const magicCommentRE = / *\\/\\/\\[! (?<klass>[\\w-]+)\\] */\n+const magicCommentGlobalRE = new RegExp(magicCommentRE, 'g')\n\n-  if (numbered === true) {\n-    const lines = highlightedText.split('\\n')\n-    const lineCount = ('' + highlightedText.length).length\n+function getLineClasses (content, highlightedLines) {\n+  const lines = content.split('\\n')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Structure for Vue Template Hydration\nDESCRIPTION: This code snippet shows an HTML table structure that may cause hydration mismatches due to browser auto-injection of <tbody> tags. It illustrates a common pitfall in client-side hydration of server-rendered content.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/client-side-hydration.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr><td>hi</td></tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Visibility Class Example\nDESCRIPTION: Example showing how to combine visibility classes with inline display\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/visibility.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"gt-sm inline\">...</span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v3 Dependencies\nDESCRIPTION: Package.json dependencies configuration for Capacitor v3. Note: HTTPS devserver is not supported in this version.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^1.0.0\",\n  \"@capacitor/cli\": \"^3.0.0\",\n  \"@capacitor/core\": \"^3.0.0\",\n  \"@capacitor/splash-screen\": \"^1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Windows PATH Environment\nDESCRIPTION: Commands to add Yarn or NPM global package paths to Windows PATH environment variable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/quasar-cli.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# If you're using Yarn:\nsetx path \"%path%;%LocalAppData%\\yarn\\bin\"\n\n# Or if you're using NPM:\nsetx path \"%path%;%AppData%\\npm\"\n```\n\n----------------------------------------\n\nTITLE: RTL Exception in Standard SCSS Syntax\nDESCRIPTION: Example of using the rtl:ignore comment in standard SCSS syntax to prevent a margin-left property from being transformed for RTL layouts.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/rtl-support.md#2025-04-16_snippet_8\n\nLANGUAGE: sass\nCODE:\n```\n.my-class {\n  margin-left: 10px #{\"/* rtl:ignore */\"};\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Android Device on Linux\nDESCRIPTION: Commands to set up permissions for Android devices on Linux systems, allowing the development environment to access connected Android devices.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# create the .rules file and insert the content\n# from below this example\nsudo vim /etc/udev/rules.d/51-android.rules\nsudo chmod 644   /etc/udev/rules.d/51-android.rules\nsudo chown root. /etc/udev/rules.d/51-android.rules\nsudo service udev restart\nsudo killall adb\n```\n\n----------------------------------------\n\nTITLE: Verifying Android SDK Installation\nDESCRIPTION: This command lists the contents of the Android SDK directory to ensure all necessary components are present.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -la $ANDROID_HOME\n\n# or\n\n$ ls -la $ANDROID_SDK_ROOT\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Dev Server\nDESCRIPTION: Command to start the Quasar development server before using Ngrok.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar dev\n```\n\n----------------------------------------\n\nTITLE: Async SSR Middleware Implementation\nDESCRIPTION: Example of an async SSR middleware implementation showing how to handle asynchronous operations within the middleware.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// import something here\n\nexport default defineSsrMiddleware(async ({ app, port, resolve, publicPath, folders, render, serve }) => {\n  // something to do with the server \"app\"\n  await something()\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Content for BEX Injection in CSS\nDESCRIPTION: This CSS snippet adds a top margin to the page content to accommodate the Quasar toolbar when injecting the BEX into a web page.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.target-some-header-class {\n  margin-top: 62px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar App Extension via CLI\nDESCRIPTION: This command uses the Quasar CLI to add and install the extension from NPM.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/app-extension/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nquasar ext add <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Basic SSR Middleware Structure\nDESCRIPTION: Basic structure of an SSR middleware file using defineSsrMiddleware. Shows the standard parameter destructuring and basic implementation pattern.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-middleware.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrMiddleware } from '#q-app/wrappers'\n\nexport default defineSsrMiddleware(({\n  app,\n  port,\n  resolve,\n  publicPath,\n  folders,\n  render,\n  serve\n}) => {\n  // something to do with the server \"app\"\n})\n```\n\n----------------------------------------\n\nTITLE: Generating App Icons with Icon Genie CLI for Capacitor\nDESCRIPTION: Command to generate all necessary app icons for Capacitor using Icon Genie CLI. The command requires a source icon path and optionally accepts a background image path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/app-icons-capacitor.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m capacitor -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Quasar Configuration with Highlighted Lines\nDESCRIPTION: Same configuration function with specific lines highlighted (lines 2 and 5) to draw attention to key parts of the code. This demonstrates how to use the highlight feature in Quasar documentation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar QIcon Component API Description - Bash\nDESCRIPTION: Detailed API description of the QIcon component showing its properties, slots, events, and methods\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/commands-list.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar describe QIcon\n\n Describing QIcon component API\n Description is based on your project's Quasar version\n\n Properties\n\n   name (String)\n     Description: Name of the icon, following Quasar convention\n     Examples:\n       map\n       ion-add\n\n   color (String)\n     Description: Color name for component from the Quasar Color Palette\n     Examples:\n       primary\n       teal-10\n\n   size (String)\n     Description: Size in CSS units, including unit name\n     Examples:\n       16px\n       2rem\n\n   left (Boolean)\n     Description: Apply a standard margin on the left side. Useful if icon is on the right side of something.\n\n   right (Boolean)\n     Description: Apply a standard margin on the right side. Useful if icon is on the left side of something.\n\n Slots\n\n   default\n     Suggestions: QTooltip or QMenu\n\n Scoped Slots\n\n   *No scoped slots*\n\n Events\n\n   *No events*\n\n Methods\n\n   *No methods*\n```\n\n----------------------------------------\n\nTITLE: Formatting Quasar Application Files\nDESCRIPTION: Commands to format project files using either Yarn or NPM.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/playground/app-vite-ts/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n# or\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Quasar Project\nDESCRIPTION: Commands to install project dependencies using either yarn or npm package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-vite-2/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Google Analytics Boot File in Quasar CLI\nDESCRIPTION: Command to generate a new boot file for Google Analytics integration using Quasar CLI, with optional TypeScript support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/managing-google-analytics.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar new boot google-analytics [--format ts]\n```\n\n----------------------------------------\n\nTITLE: Contracted Stepper Implementation\nDESCRIPTION: Example showing contracted stepper layout\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/stepper.md#2025-04-16_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Contracted\" file=\"Contracted\" />\n```\n\n----------------------------------------\n\nTITLE: Scroll Related CSS Classes in Quasar\nDESCRIPTION: CSS classes for controlling scroll behavior and overflow properties across different platforms.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/style/other-helper-classes.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.scroll\n.no-scroll\n.overflow-auto\n.overflow-hidden\n.overflow-hidden-y\n.hide-scrollbar\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Battery Status Plugin\nDESCRIPTION: Command to install the Cordova battery status plugin from within the src-cordova directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# from /src-cordova:\n$ cordova plugin add cordova-plugin-battery-status\n```\n\n----------------------------------------\n\nTITLE: Basic Favicon HTML Configuration\nDESCRIPTION: HTML code for referencing basic favicon files in different sizes for the application's index.html file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/app-icons-ssr.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/ico\" href=\"favicon.ico\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"128x128\" href=\"icons/favicon-128x128.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"icons/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"icons/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"icons/favicon-16x16.png\">\n```\n\n----------------------------------------\n\nTITLE: Generating Icons with Icon Genie CLI - Bash Command\nDESCRIPTION: Command to automatically generate and place app icons for Cordova using Icon Genie CLI tool. Requires source icon path and optional background image path.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/app-icons-cordova.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -m cordova -i /path/to/source/icon.png [-b /path/to/background.png]\n```\n\n----------------------------------------\n\nTITLE: Efficient Cache Value Generation\nDESCRIPTION: Example showing how to efficiently cache values by using a function as the default value generator, which only runs when the cache key doesn't exist.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-render-cache.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getCache } = useRenderCache()\n\ngetCache('my-key', () => {\n  // some computation which is only run\n  // when the cache does NOT have \"my-key\" set\n  return { some: 'object' }\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Icon References for SPA\nDESCRIPTION: HTML code required in index.html to reference different icon sizes for various devices and browsers. Includes references to favicon.ico and multiple PNG versions of different dimensions (128x128, 96x96, 32x32, 16x16).\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-spa/app-icons-spa.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" type=\"image/ico\" href=\"favicon.ico\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"128x128\" href=\"icons/favicon-128x128.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"icons/favicon-96x96.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"icons/favicon-32x32.png\">\n<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"icons/favicon-16x16.png\">\n```\n\n----------------------------------------\n\nTITLE: Adding Cordova Platform\nDESCRIPTION: Command to manually add Android or iOS platform to the Cordova project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cordova platform add [android|ios]\n```\n\n----------------------------------------\n\nTITLE: Displaying Platinum Sponsors Table in HTML\nDESCRIPTION: HTML table structure for displaying Platinum level sponsors with their logos and links\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/backers.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a>\n          <img width=\"200px\" src=\"https://cdn.quasar.dev/sponsors/think-health-data.png\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://truelogic.com\" target=\"_blank\">\n          <img width=\"200px\" src=\"https://cdn.quasar.dev/sponsors/truelogic.png\">\n        </a>\n      </td>\n    </tr>\n    <tr></tr>\n    <tr>\n      <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://www.tayloredtechnology.net\" target=\"_blank\">\n          <img width=\"200px\" src=\"https://cdn.quasar.dev/sponsors/taylored-technology-big.jpeg\">\n        </a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Battery Status Plugin\nDESCRIPTION: Command to install the Cordova battery status plugin from the src-cordova directory\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# from /src-cordova:\n$ cordova plugin add cordova-plugin-battery-status\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern Build for iOS in Quasar Config\nDESCRIPTION: Configuration to enable Xcode modern build for iOS in the Quasar config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncordova: {\n  noIosLegacyBuildFlag: true\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Dependencies Update\nDESCRIPTION: Updated package versions for ESLint and related plugins compatible with Vue 3 and Webpack 5.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"@babel/eslint-parser\": \"^7.13.14\",\n\"eslint\": \"^8.11.0\",\n\"eslint-plugin-vue\": \"^9.0.0\",\n\"eslint-webpack-plugin\": \"^3.1.1\",\n\"eslint-config-standard\": \"^17.0.0\",\n\"eslint-plugin-import\": \"^2.19.1\",\n\"eslint-plugin-n\": \"^15.0.0\",\n\"eslint-plugin-promise\": \"^6.0.0\",\n\"eslint-plugin-quasar\": \"^1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Custom Number of Rating Choices\nDESCRIPTION: Implementation showing how to customize the number of rating options\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/rating.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<DocExample title=\"Custom number of choices\" file=\"Max\" />\n```\n\n----------------------------------------\n\nTITLE: Honorable Mentions Display Template\nDESCRIPTION: Vue template section that renders the honorable mentions team members using the same TeamMember component in a responsive grid layout.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/meet-the-team/meet-the-team.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"row items-stretch q-gutter-sm\">\n  <TeamMember\n    v-for=\"m in scope.others\"\n    :key=\"m.name\"\n    :name=\"m.name\"\n    :role=\"m.role\"\n    :avatar=\"m.avatar\"\n    :email=\"m.email\"\n    :twitter=\"m.twitter\"\n    :github=\"m.github\"\n    :desc=\"m.desc\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Remote Debugger Connection Information\nDESCRIPTION: Example output showing the remote debugger connection details for the Electron main process, including the WebSocket URL and port information.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/troubleshooting-and-tips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDebugger listening on ws://127.0.0.1:5858/b285586a-6091-4c41-b6ea-0d389e6f9c93\nFor help, see: https://nodejs.org/en/docs/inspector\n```\n\n----------------------------------------\n\nTITLE: Getting Persistent Configuration in Quasar App Extension Uninstall Script\nDESCRIPTION: Demonstrates how to use the api.getPersistentConf method to get the internal persistent config of the extension.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/uninstall-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @return {object} cfg\n */\napi.getPersistentConf()\n```\n\n----------------------------------------\n\nTITLE: Building Quasar App for Production (Bash)\nDESCRIPTION: Command to build the Quasar application for production deployment.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/ts-webpack-4/BASE/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Genie CLI Commands Overview in Bash\nDESCRIPTION: Lists the main commands available in Icon Genie CLI, including generate, verify, profile, and help. Shows the basic usage pattern and how to access help for each command.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/command-list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie\n\n  Example usage\n    $ icongenie <command> <options>\n\n  Help for a command\n    $ icongenie <command> --help\n    $ icongenie <command> -h\n\n  Options\n    --version, -v Print Quasar Icon Genie CLI version\n\n  Commands\n    generate, g   Generate App icons & splash screens\n    verify, v     Verify your Quasar app's icons &\n                    splash screens\n    profile, p    Create Icon Genie profile files\n    help, h       Display this message\n```\n\n----------------------------------------\n\nTITLE: Quasar Configuration with Advanced Highlighting and Line Numbers\nDESCRIPTION: Configuration example with multiple highlighting features including numbered lines and line addition indicators. This showcases advanced code formatting options in Quasar documentation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git\nDESCRIPTION: Command to commit your changes to Git. This will open your default editor to write a commit message for the changes you've made to the documentation or code.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -a\n```\n\n----------------------------------------\n\nTITLE: Linting Quasar App Files (Bash)\nDESCRIPTION: These commands run the linter on the project files using either Yarn or npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/playground/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Implementing Uninstall Script for Quasar App Extension\nDESCRIPTION: The uninstall.js script safely removes files and folders that were added by the App Extension during installation. It uses rimraf for file deletion and checks user prompts to determine what to remove.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/tips-and-tricks/starter-kit-equivalent.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// we yarn added it to our App Extension,\n// so we can import the following:\nimport rimraf from 'rimraf'\n\nexport default function (api) {\n  // Careful when you remove folders!\n  // You don't want to delete files that are still needed by the Project,\n  // or files that are not owned by this app extension.\n\n  // Here, we could also remove the /src/services folder altogether,\n  // but what if the user has added other files into this folder?\n\n  if (api.prompts.serviceA) {\n    // we added it on install, so we remove it\n    rimraf.sync(api.resolve.src('services/serviceA.js'))\n  }\n\n  if (api.prompts.serviceB) {\n    // we added it on install, so we remove it\n    rimraf.sync(api.resolve.src('services/serviceB.js'))\n  }\n\n  // we added it on install, so we remove it\n  rimraf.sync(api.resolve.app('some-folder'))\n  // warning... we've added this folder, but what if the\n  // developer added more files into this folder???\n}\n```\n\n----------------------------------------\n\nTITLE: Props-Only Timeline Implementation\nDESCRIPTION: Shows how to create a timeline using only QTimelineEntry properties without utilizing the default slot\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/timeline.md#2025-04-16_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Displaying $250 Tier Sponsors Table in HTML\nDESCRIPTION: HTML table structure for displaying $250 tier sponsors with their logos and links\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/backers.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://www.jugglestreet.com\" target=\"_blank\">\n          <img width=\"222px\" src=\"https://cdn.quasar.dev/sponsors/juggle-street.png\">\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://debricked.com/\" target=\"_blank\">\n          <img width=\"222px\" height=\"35px\" src=\"https://cdn.quasar.dev/sponsors/debricked.png\">\n        </a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Badge Component Documentation Structure\nDESCRIPTION: Markdown frontmatter defining the documentation structure for the QBadge component, including title, description, and related keys/examples.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/badge.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Badge\ndesc: The QBadge Vue component allows you to display information like contextual data that needs to stand out and get noticed.\nkeys: QBadge\nexamples: QBadge\n---\n```\n\n----------------------------------------\n\nTITLE: JSON with Line Numbers and Change Indicators\nDESCRIPTION: JSON configuration with line numbers and change indicators (removal and addition). This combines multiple documentation features to clearly show what changes are being made to the configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min\": 0,\n  \"super\": false, [[! rem]]\n  \"super\": true, [[! add]]\n  \"max\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Management Commands\nDESCRIPTION: Commands for adding platforms and checking requirements in a Cordova project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/preparation.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src-cordova\n$ cordova platform add [android|ios]\n$ cordova requirements\n```\n\n----------------------------------------\n\nTITLE: Creating Ngrok HTTP Tunnel\nDESCRIPTION: Command to create an Ngrok HTTP tunnel to a local development server running on port 8080.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ngrok http 8080\n# In case your development server doesn't run on port 8080 you need to change the number to the correct port\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Quasar AE Playground\nDESCRIPTION: Commands to install project dependencies using various package managers. The specific package manager command is dynamically inserted based on the project configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-vite/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm install\nyarn install\npnpm install\nbun install\n```\n\n----------------------------------------\n\nTITLE: useId Function Type Definition\nDESCRIPTION: Shows the TypeScript type definition for the useId function, including optional parameters for getValue and required flag.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-id.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useId(\n  opts?: {\n    getValue?: () => string | null | undefined;\n    required?: boolean; // default: true\n  }\n): Ref<string | null>;\n```\n\n----------------------------------------\n\nTITLE: Linting Quasar Project Files\nDESCRIPTION: Commands to run linting checks on project files using either yarn or npm.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-vite-2/BASE/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Rendering Tutorial Page Components\nDESCRIPTION: Template structure showing how the tutorial components are rendered, including the introduction video and separate listings for Quasar v2 and Vue 3 tutorials.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/video-tutorials/video-tutorials.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<IntroductionVideo />\n\n<tutorial-listing which=\"quasar-v2\" />\n\n<tutorial-listing which=\"vue-v3\" />\n```\n\n----------------------------------------\n\nTITLE: Checking PATH for Android SDK Tools\nDESCRIPTION: This command displays the PATH environment variable to verify that Android SDK tools and platform-tools directories are included.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $PATH\n```\n\n----------------------------------------\n\nTITLE: Generate Command Help with Options in Icon Genie CLI\nDESCRIPTION: Detailed documentation for the 'generate' command, which creates app icons and splash screens. Shows all available parameters including icon source, background, mode selection, quality settings, and theme colors.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/command-list.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ icongenie generate -h\n\n  Description\n    Generate App icons & splash screens\n\n  Usage\n    $ icongenie generate [options]\n\n    # generate icons for all installed Quasar modes\n    $ icongenie generate -i /path/to/icon.png\n    $ icongenie g -i /path/to/icon.png\n\n    # generate for (as example) PWA mode only\n    $ icongenie generate -m pwa --icon /path/to/icon.png\n\n    # generate for (as example) Cordova & Capacitor mode only\n    $ icongenie g -m cordova,capacitor -i\n         /path/to/icon.png -b /path/to/background.png\n\n    # generate by using a profile file\n    $ icongenie generate -p ./icongenie-profile.json\n\n    # generate by using batch of profile files\n    $ icongenie generate -p ./folder-containing-profile-files\n\n  Options\n    --icon, -i            Required;\n                          Path to source file for icon; must be:\n                            - a .png file\n                            - min resolution: 64x64 px (the higher the better!!)\n                            - with transparency\n                          Best results are with a square image (height = width)\n                          Image will be trimmed automatically\n                            (also see \"skip-trim\" and \"padding\" param)\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --background, -b      Path to optional background source file (for splash screens);\n                          must be:\n                            - a .png file\n                            - min resolution: 128x128 px (the higher the better!!)\n                            - transparency is optional (but recommended if you\n                              combine with the splashscreen-color param)\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --mode, -m            For which Quasar mode(s) to generate the assets;\n                          Default: all\n                            [all|spa|pwa|ssr|bex|cordova|capacitor|electron]\n                          Multiple can be specified, separated by \",\":\n                            spa,cordova\n\n    --filter, -f          Filter the available generators; when used, it can\n                          generate only one type of asset instead of all\n                            [png|ico|icns|splashscreen|svg]\n\n    --quality             Quality of the files [1 - 12] (default: 5)\n                            - higher quality --> bigger filesize & slower to create\n                            - lower quality  --> smaller filesize & faster to create\n\n    --skip-trim           Do not trim the icon source file\n\n    --padding             Apply fixed padding to the icon after trimming it;\n                          Syntax: <horiz: number>,<vert: number>\n                          Default: 0,0\n                          Example: \"--padding 10,5\" means apply 10px padding to top\n                            10px to bottom, 5px to left side and 5px to rightside\n\n    --theme-color         Theme color to use for all generators requiring a color;\n                          It gets overridden if any generator color is also specified;\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --svg-color           Color to use for the generated monochrome svgs\n                          Default (if no theme-color is specified): 1976D2\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --png-color           Background color to use for the png generator, when\n                          \"background: true\" in the asset definition (like for\n                          the cordova/capacitor iOS icons);\n                          Default (if no theme-color is specified): fff\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-color  Background color to use for the splashscreen generator;\n                          Default (if no theme-color is specified): fff\n                          The color must be in hex format (NOT hexa) without the leading\n                          '#' character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-icon-ratio  Ratio of icon size in respect to the width or height\n                               (whichever is smaller) of the resulting splashscreen;\n                               Represents percentages; Valid values: 0 - 100\n                               If 0 then it doesn't add the icon of top of background\n                               Default: 40\n\n    --profile, -p         Use JSON profile file(s):\n                            - path to folder (absolute or relative to current folder)\n                              that contains JSON profile files (icongenie-*.json)\n                            - path to a single *.json profile file (absolute or relative\n                              to current folder)\n                          Structure of a JSON profile file:\n                            {\n                              \"params\": {\n                                \"include\": [ ... ], /* optional */\n                                ...\n                              },\n                              \"assets\": [ /* list of custom assets */ ]\n                            }\n\n    --help, -h            Displays this message\n```\n\n----------------------------------------\n\nTITLE: Implementing onPublish Hook in Quasar\nDESCRIPTION: Hook that runs when publishing is requested with -P flag, after production build and afterBuild hook execution. Accepts additional options including publish argument and distribution directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/development-guide/index-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napi.onPublish((api, opts) => {\n  // do something\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying $500 Tier Sponsors Table in HTML\nDESCRIPTION: HTML table structure for displaying $500 tier sponsors with their logos and links\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/backers.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"http://campuscloudservices.com\" target=\"_blank\">\n          <img width=\"222px\" src=\"https://cdn.quasar.dev/sponsors/campus-cloud-services.png\">\n        </a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Styled Scrollbar Implementation\nDESCRIPTION: Examples of custom styling for scrollbar thumb and track\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/scroll-area.md#2025-04-16_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Styled thumb and bar\" file=\"StyledBar\" />\n```\n\nLANGUAGE: vue\nCODE:\n```\n<DocExample title=\"Styled\" file=\"Styled\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Function for SSR in Quasar Framework\nDESCRIPTION: This snippet shows how to set up SSR for Firebase Functions. It uses the Firebase functions SDK to create an HTTPS callable function in production, while maintaining the development server functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/ssr-webserver.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineSsrListen } from '#q-app/wrappers'\nimport * as functions from 'firebase-functions'\n\nexport const listen = defineSsrListen(({ app, devHttpsApp, port }) => {\n  if (process.env.DEV) {\n    // for dev, start listening on the created server\n    const server = devHttpsApp || app;\n    return server.listen(port, () => {\n      // we're ready to serve clients\n    })\n  }\n  else { // in production\n    return {\n      handler: functions.https.onRequest(app)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JSON with Line Numbers and Highlighting\nDESCRIPTION: JSON configuration with line numbers and a highlighted line to draw attention to a specific property. This illustrates how to emphasize important configuration details in documentation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min\": 0,\n  \"super\": false, [[! highlight]]\n  \"max\": 100\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Icon Genie v1\nDESCRIPTION: Command to remove the older version (v1) of Icon Genie, which was installed as a Quasar App Extension. This step is necessary when upgrading to Icon Genie v2.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# from your Quasar CLI project folder:\n$ quasar ext remove @quasar/icon-genie\n```\n\n----------------------------------------\n\nTITLE: Rendering FlexPlaygroundDemo Component with Styling\nDESCRIPTION: This snippet renders the FlexPlaygroundDemo component with specific CSS classes for margin-top and scroll behavior. The component is assigned an ID for reference.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/layout/grid/flex-playground/flex-playground.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<FlexPlaygroundDemo class=\"q-mt-md scroll\" id=\"flex-playground\" />\n```\n\n----------------------------------------\n\nTITLE: Ngrok Command Output Example\nDESCRIPTION: Example output of the Ngrok command showing tunnel status, connection URLs, and statistics dashboard location.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/opening-dev-server-to-public.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nTunnel Status                 online\nVersion                       2.0/2.0\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    http://92832de0.ngrok.io -> localhost:8080\nForwarding                    https://92832de0.ngrok.io -> localhost:8080\n\nConnections                  ttl     opn     rt1     rt5     p50     p90\n                              0       0       0.00    0.00    0.00    0.00\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Quasar UI Component\nDESCRIPTION: Command to install dependencies for developing the Quasar UI component. Uses Yarn package manager to install all required packages defined in package.json.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/ui/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Rendering Button for Extension Search in Markdown\nDESCRIPTION: This snippet creates a button using Quasar's q-btn component that links to the npm search results for Quasar app extensions. It opens in a new tab and includes security attributes.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/app-extensions/discover.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<q-btn icon-right=\"search\" label=\"Look up extensions\" href=\"https://www.npmjs.com/search?q=quasar-app-extension\" target=\"_blank\" rel=\"noopener noreferrer\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Icon Genie Profile File in JSON\nDESCRIPTION: The generic form of a JSON profile file containing the params object for configuration and assets array for custom definitions.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/profile-files.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": { },\n  \"assets\": [ ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Quasar App Extension via CLI\nDESCRIPTION: Command to install the Quasar App Extension using the Quasar CLI. The extension name is represented by a template variable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/ae/app-extension/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nquasar ext add <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Linting Quasar Project Files in Bash\nDESCRIPTION: Commands to run linting on the project files using either Yarn or npm scripts. This is conditionally included if ESLint is configured in the project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app/quasar-v2/js-webpack-4/BASE/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Node Version Management Commands\nDESCRIPTION: Commands for upgrading Node.js version using nvm on both Linux and Windows systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm list\n$ nvm install 12.22.1 && nvm alias default lts/erbium && nvm use default\n$ nvm install 12.22.1 && nvm use 12.22.1\nnvm uninstall 12.14.0\n```\n\n----------------------------------------\n\nTITLE: Vue HTML Interpolation Warning\nDESCRIPTION: Demonstrates the v-html directive security warning from Vue.js documentation regarding XSS vulnerabilities.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/security/dos-and-donts.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> \"Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v1 Dependencies\nDESCRIPTION: Core package dependencies required for Capacitor v1 implementation in Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/cli\": \"^1.0.0\",\n  \"@capacitor/core\": \"^1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Safe Area CSS\nDESCRIPTION: CSS rules for handling safe areas on iOS devices with notches and status bars\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/troubleshooting-and-tips.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n// for your app's header\npadding-top: constant(safe-area-inset-top) // for iOS 11.0\npadding-top: env(safe-area-inset-top) // for iOS 11.2 +\n// for your app's footer\npadding-bottom: constant(safe-area-inset-bottom)\npadding-bottom: env(safe-area-inset-bottom)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import Statement\nDESCRIPTION: Imports the TeamMember component that will be used to display individual team member information.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/meet-the-team/meet-the-team.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nimport TeamMember from './TeamMember.vue'\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Homepage Component\nDESCRIPTION: Uses the imported DocsHomepage component to render the documentation homepage.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/docs/docs.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<DocsHomepage />\n```\n\n----------------------------------------\n\nTITLE: Adding Animate.css CDN Link to HTML (HTML)\nDESCRIPTION: This snippet demonstrates how to include Animate.css via a CDN link in the HTML file, as an alternative to bundling animations with Quasar.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/options/animations.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  ...\n\n  <!-- CDN example for Animate.css -->\n  <link\n    rel=\"stylesheet\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\n  >\n</head>\n```\n\n----------------------------------------\n\nTITLE: Linting Quasar Application Files\nDESCRIPTION: Commands to run the linter on project files using either Yarn or NPM.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/playground/app-vite-ts/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Aligning Android APK for Optimization\nDESCRIPTION: Command to zip align the APK file, which optimizes it for Android devices. This step is crucial before signing the APK.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ zipalign -v 4 <path-to-same-apk-file> HelloWorld.apk\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Main Process\nDESCRIPTION: Configuration of the main Electron process to enable frameless window support and remote module functionality.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app, BrowserWindow, nativeTheme } from 'electron'\nimport { initialize, enable } from '@electron/remote/main'\nimport path from 'path'\n\ninitialize()\n\nmainWindow = new BrowserWindow({\n  width: 1000,\n  height: 600,\n  useContentSize: true,\n  frame: false\n  webPreferences: {\n    sandbox: false\n  }\n})\n\nenable(mainWindow.webContents)\n\nmainWindow.loadURL(process.env.APP_URL)\n```\n\n----------------------------------------\n\nTITLE: Building Quasar Cordova App for iOS Release\nDESCRIPTION: Commands to generate a release build for iOS using Quasar CLI. This creates an Xcode project that can be used to archive and upload the app to the App Store.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m cordova -T ios\n# or the short form:\n$ quasar build -m ios\n\n# passing extra parameters and/or options to\n# underlying \"cordova\" executable:\n$ quasar build -m ios -- some params --and options --here\n```\n\n----------------------------------------\n\nTITLE: License Template in Markdown\nDESCRIPTION: Template for displaying license information with placeholders for license type and author name to be populated during project generation.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# License\n<%= license %> (c) <%= author %>\n```\n\n----------------------------------------\n\nTITLE: Using localhost.run via SSH\nDESCRIPTION: Command to create a tunnel using localhost.run through SSH, exposing a local port (8080 in this example) to the internet.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/opening-dev-server-to-public.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -R 80:localhost:8080 ssh.localhost.run\n# In case your development server doesn't run on port 8080 you need to change the number to the correct port\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Branches\nDESCRIPTION: Command to fetch all branches from the remote repositories. This ensures you have the latest reference to all branches in the Quasar repository.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/how-to-contribute/contribution-guide.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Quasar App Playground (Bash)\nDESCRIPTION: This snippet shows how to install the project dependencies using either Yarn or npm package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/playground/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Migrating from Meta Plugin v1 to v2 (Deprecated Pattern)\nDESCRIPTION: Demonstrates the old, deprecated way of using the Meta plugin in Quasar v1 versus the new approaches in v2.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/upgrade-guide/upgrade-guide.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// v1 way (OLD, DEPRECATED)\n// some .vue file\nexport default {\n  meta: {\n    // ...definition\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Components for Tutorial Page\nDESCRIPTION: Script block importing required Vue components for the tutorial page - IntroductionVideo component for the main intro and TutorialListing component for displaying tutorial lists.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/video-tutorials/video-tutorials.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script doc>\nimport IntroductionVideo from '../introduction-to-quasar/IntroductionVideo.vue'\nimport TutorialListing from './TutorialListing.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Quasar App Icons Mode Matrix\nDESCRIPTION: A markdown table showing the mapping between different Quasar modes and their corresponding app icons documentation for both Vite and Webpack implementations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/icongenie/app-icons-list.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Quasar Mode | @quasar/app-vite | @quasar/app-webpack |\n| --- | --- | --- |\n| App icons for SPA mode | [SPA mode](/quasar-cli-vite/developing-spa/app-icons-spa) | [SPA mode](/quasar-cli-webpack/developing-spa/app-icons-spa) |\n| App icons for PWA mode | [PWA mode](/quasar-cli-vite/developing-pwa/app-icons-pwa) | [PWA mode](/quasar-cli-webpack/developing-pwa/app-icons-pwa) |\n| App icons for SSR mode | [SSR mode](/quasar-cli-vite/developing-ssr/app-icons-ssr) | [SSR mode](/quasar-cli-webpack/developing-ssr/app-icons-ssr) |\n| App icons for Capacitor mode | [Capacitor mode](/quasar-cli-vite/developing-capacitor-apps/app-icons-capacitor) | [Capacitor mode](/quasar-cli-webpack/developing-capacitor-apps/app-icons-capacitor) |\n| App icons for Cordova mode | [Cordova mode](/quasar-cli-vite/developing-cordova-apps/app-icons-cordova) | [Cordova mode](/quasar-cli-webpack/developing-cordova-apps/app-icons-cordova) |\n| App icons for Electron mode | [Electron mode](/quasar-cli-vite/developing-electron-apps/app-icons-electron) | [Electron mode](/quasar-cli-webpack/developing-electron-apps/app-icons-electron) |\n| App icons for BEX mode | [BEX mode](/quasar-cli-vite/developing-browser-extensions/app-icons-browser-extension) | [BEX mode](/quasar-cli-webpack/developing-browser-extensions/app-icons-browser-extension) |\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Version Badge Template in Markdown\nDESCRIPTION: Template code for displaying NPM version badges for Quasar UI components and optional app extensions using shield.io.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/BASE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"https://img.shields.io/npm/v/quasar-ui-<%= name %>.svg?label=quasar-ui-<%= name %>\">\n<% if (features.ae) { %><img src=\"https://img.shields.io/npm/v/quasar-app-extension-<%= name %>.svg?label=quasar-app-extension-<%= name %>\"><% } %>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running QUploader Test Server\nDESCRIPTION: Commands to install dependencies and start the development web server for testing QUploader uploads.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/playground/upload-server/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Vue Project in Bash\nDESCRIPTION: Command to initialize a new Vue project using Vue CLI. User should select Vue 3 when prompted and ensure Babel is selected from the feature list.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/start/vue-cli-plugin.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# make sure to pick Vue 3 when asked:\n$ vue create my-app\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Quasar App Extension via CLI\nDESCRIPTION: Command to remove the Quasar App Extension using the Quasar CLI. The extension name is represented by a template variable.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/ui-kit/quasar-v2/ae/app-extension/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar ext remove <%= name %>\n```\n\n----------------------------------------\n\nTITLE: Building UI Components for Testing - Bash\nDESCRIPTION: Command to build the UI components before running tests\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/ui/testing/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Electron Main Process Debug Output\nDESCRIPTION: Example of the debug listening message shown when running the Electron app in development mode. Shows the WebSocket connection details for remote debugging on port 5858.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/troubleshooting-and-tips.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDebugger listening on ws://127.0.0.1:5858/b285586a-6091-4c41-b6ea-0d389e6f9c93\nFor help, see: https://nodejs.org/en/docs/inspector\n```\n\n----------------------------------------\n\nTITLE: Configuring manifest.json for BEX\nDESCRIPTION: Illustrates the structure of the manifest.json file for a Browser Extension, including configurations for different browser targets (Chrome and Firefox) and various extension features.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/configuring-bex.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": {\n    \"manifest_version\": 3,\n\n    \"icons\": {\n      \"16\": \"icons/icon-16x16.png\",\n      \"48\": \"icons/icon-48x48.png\",\n      \"128\": \"icons/icon-128x128.png\"\n    },\n\n    \"permissions\": [\n      \"storage\",\n      \"tabs\"\n    ],\n\n    \"host_permissions\": [ \"*://*/*\" ],\n    \"content_security_policy\": {\n      \"extension_pages\": \"script-src 'self'; object-src 'self';\"\n    },\n    \"web_accessible_resources\": [\n      {\n        \"resources\": [ \"*\" ],\n        \"matches\": [ \"*://*/*\" ]\n      }\n    ],\n\n    \"action\": {\n      \"default_popup\": \"www/index.html\"\n    },\n\n    \"content_scripts\": [\n      {\n        \"matches\": [ \"<all_urls>\" ],\n        \"css\": [ \"assets/content.css\" ],\n        \"js\": [ \"my-content-script.ts\" ]\n      }\n    ]\n  },\n\n  \"chrome\": {\n    \"background\": {\n      \"service_worker\": \"background.ts\"\n    }\n  },\n\n  \"firefox\": {\n    \"background\": {\n      \"scripts\": [ \"background.ts\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BEX Manifest V3 Configuration\nDESCRIPTION: Manifest configuration for Browser Extension version 3, defining options, popup, and devtools page locations.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifest_version\": 3,\n\n  \"action\": {\n    \"default_popup\": \"www/index.html#/popup\"\n  },\n  \"options_page\": \"www/index.html#/options\",\n  \"devtools_page\": \"www/index.html#/devtools\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SponsorList Component in Vue\nDESCRIPTION: Imports the SponsorList Vue component to display Platinum, Gold, and Silver sponsors of the Quasar Framework project.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/sponsors-and-backers/sponsors-and-backers.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\nimport SponsorList from './SponsorList.vue'\n```\n\n----------------------------------------\n\nTITLE: SSR Middleware Object Parameter Structure\nDESCRIPTION: Detailed breakdown of the object parameter received by the SSR middleware function, including app, port, resolve, publicPath, folders, render, and serve properties.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/ssr-middleware.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  app, // Expressjs app or whatever is returned from src-ssr/server -> create()\n  port, // on dev: devServer port; on prod: process.env.PORT or quasar.config > ssr > prodPort\n  resolve: {\n    urlPath, // (url) => path string with publicPath ensured to be included,\n    root, // (pathPart1, ...pathPartN) => path string (joins to the root folder),\n    public // (pathPart1, ...pathPartN) => path string (joins to the public folder)\n  },\n  publicPath, // string\n  folders: {\n    root, // path string of the root folder\n    public // path string of the public folder\n  },\n  render, // (ssrContext) => html string\n  serve: {\n    static, // ({ urlPath = '/', pathToServe = '.', opts = {} }) => void (OR whatever returned by src-ssr/server -> serveStaticContent())\n    error // DEV only; ({ err, req, res }) => void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Quasar Context Object with Line Numbers\nDESCRIPTION: Extended example of the Quasar context object showing additional properties like mode, modeName, target, etc. with line numbers. This provides a more comprehensive view of the context object structure for developers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/__elements.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function (ctx) { // can be async too\n  console.log(ctx)\n\n  // Example output on console:\n  {\n    dev: true,\n    prod: false,\n    mode: { spa: true },\n    modeName: 'spa',\n    target: {},\n    targetName: undefined,\n    arch: {},\n    archName: undefined,\n    debug: undefined\n  }\n\n  const { FOO } = process.env // ❌ It doesn't allow destructuring or similar\n  process.env.FOO             // ✅ It can only replace direct usage like this\n\n  // context gets generated based on the parameters\n  // with which you run \"quasar dev\" or \"quasar build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for BEX Bridge\nDESCRIPTION: This snippet demonstrates how to enable debug mode for the BEX bridge and use logging functions. It shows setting debug mode dynamically and using log and warn methods for debugging.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/bex-bridge.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Dynamically set debug mode\nbridge.setDebug(true) // boolean\n\n// Log a message on the console (if debug is enabled)\nbridge.log('Hello world!')\nbridge.log('Hello', 'world!')\nbridge.log('Hello world!', { some: 'data' })\nbridge.log('Hello', 'world', '!', { some: 'object' })\n// Log a warning on the console (regardless of the debug setting)\nbridge.warn('Hello world!')\nbridge.warn('Hello', 'world!')\nbridge.warn('Hello world!', { some: 'data' })\nbridge.warn('Hello', 'world', '!', { some: 'object' })\n```\n\n----------------------------------------\n\nTITLE: Using Axios in Vue Component with Error Handling\nDESCRIPTION: Demonstrates how to use the configured Axios instance within a Vue component's setup function, including error handling with Quasar's Notify plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/ajax-requests.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\nimport { api } from 'boot/axios'\nimport { useQuasar } from 'quasar'\n\nsetup () {\n  const $q = useQuasar()\n  const data = ref(null)\n\n  function loadData () {\n    api.get('/api/backend')\n      .then((response) => {\n        data.value = response.data\n      })\n      .catch(() => {\n        $q.notify({\n          color: 'negative',\n          position: 'top',\n          message: 'Loading failed',\n          icon: 'report_problem'\n        })\n      })\n  }\n\n  return { data, loadData }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Quasar App\nDESCRIPTION: Commands to install project dependencies using either Yarn or NPM package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/playground/app-vite-ts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: License Terms in Markdown\nDESCRIPTION: Markdown formatted documentation specifying the permitted and prohibited uses of the icon pack under the Good Boy License.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/extras/line-awesome/LICENSE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Good Boy License\n\nWe've released the icon pack under either MIT or the [Good Boy License](http://icons8.com/good-boy-license/). We invented it. Please do _whatever your mom would approve of:_\n\n## Permitted Use\n\n* Download in any format\n* Change\n* Fork\n\n## Prohibited Use\n\n* No tattoos\n* No touching with unwashed hands\n* No exchanging for drugs.\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Custom 500 Error Page in SSR Middleware\nDESCRIPTION: This code shows how to modify the SSR middleware to redirect to a custom 500 error page when encountering server errors. It assumes a route for 'error500' has been defined in the Vue Router configuration.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/handling-404-and-500-errors.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.url) { ... }\nelse if (err.code === 404) { ... }\nelse {\n  // We got a 500 error here;\n  // We redirect to our \"error500\" route newly defined at step #1.\n  res.redirect(resolve.urlPath('error500')) // keep account of publicPath though!\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Valid HTML for Vue Templates in SSR\nDESCRIPTION: Example demonstrating how browsers can alter HTML structure, causing hydration mismatches. The browser automatically injects <tbody> inside <table> elements, which Vue's virtual DOM doesn't account for.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-ssr/client-side-hydration.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr><td>hi</td></tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Checksum for Application Build\nDESCRIPTION: This bash command generates a SHA256 checksum for a macOS application build. Publishing these checksums helps users verify the integrity of downloaded application files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/electron-security-concerns.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ shasum -a 256 myApp-v1.0.0_darwin-x64.dmg\n40ed03e0fb3c422e554c7e75d41ba71405a4a49d560b1bf92a00ea6f5cbd8daa myApp-v1.0.0_darwin-x64.dmg\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Checksum (Bash)\nDESCRIPTION: A command to generate a SHA256 checksum for a distributable app file. Publishing these checksums helps users verify the integrity of downloaded files.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-security-concerns.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ shasum -a 256 myApp-v1.0.0_darwin-x64.dmg\n40ed03e0fb3c422e554c7e75d41ba71405a4a49d560b1bf92a00ea6f5cbd8daa myApp-v1.0.0_darwin-x64.dmg\n```\n\n----------------------------------------\n\nTITLE: Battery Status Plugin Implementation in Vue\nDESCRIPTION: Vue component implementation showing how to monitor and display battery status using the Cordova battery plugin.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    Battery status is: <strong>{{ batteryStatus }}</strong>\n  </div>\n</template>\n\n<script>\nimport { ref, onBeforeUnmount } from 'vue'\n\nexport default {\n  setup () {\n    const batteryStatus = ref('determining...')\n\n    function updateBatteryStatus (status) {\n      batteryStatus.value = `Level: ${status.level}, plugged: ${status.isPlugged}`\n    }\n\n    window.addEventListener('batterystatus', updateBatteryStatus, false)\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('batterystatus', updateBatteryStatus, false)\n    })\n\n    return {\n      batteryStatus\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Android Environment Variables for Unix Systems\nDESCRIPTION: Commands to configure Android SDK environment variables and PATH on Unix-based systems (macOS and Linux). Sets ANDROID_HOME and ANDROID_SDK_ROOT paths and adds Android tools to system PATH.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-capacitor-apps/preparation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport ANDROID_SDK_ROOT=\"$HOME/Android/Sdk\"\nPATH=$PATH:$ANDROID_SDK_ROOT/tools; PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools\n```\n\n----------------------------------------\n\nTITLE: File Path Reference for App Version Update\nDESCRIPTION: Reference to configuration files where the app version needs to be updated before submitting a new version. Developers can update the version either in package.json or in the Cordova section of quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n/package.json\n/quasar.config file > cordova > version\n```\n\n----------------------------------------\n\nTITLE: Configuring Frameless Window in Electron Main Process\nDESCRIPTION: Modifications to the main Electron process file to enable frameless window and initialize remote module.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/frameless-electron-window.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { app, BrowserWindow, nativeTheme } from 'electron'\nimport { initialize, enable } from '@electron/remote/main' // <-- add this\nimport path from 'path'\n\ninitialize() // <-- add this\n\n// ...\n\nmainWindow = new BrowserWindow({\n  width: 1000,\n  height: 600,\n  useContentSize: true,\n  frame: false // <-- add this\n  webPreferences: {\n    sandbox: false // <-- to be able to import @electron/remote in preload script\n    // ...\n  }\n})\n\nenable(mainWindow.webContents) // <-- add this\n\nmainWindow.loadURL(process.env.APP_URL)\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration\nDESCRIPTION: Configuration for Firebase hosting with proper cache control headers for different file types.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-spa/deploying.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"headers\": [\n      {\n        \"source\": \"/**\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"no-cache, no-store, must-revalidate\"\n          }\n        ]\n      },\n      {\n        \"source\": \"**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"max-age=604800\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Android APK for Release\nDESCRIPTION: Command to sign the APK using the apksigner tool and the previously generated keystore. This prepares the APK for submission to the Google Play Store.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/publishing-to-store.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napksigner sign --ks my-release-key.keystore --ks-key-alias alias_name <path-to-unsigned-apk-file>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deviceready Event Handler in Vue\nDESCRIPTION: Example showing how to properly handle the Cordova deviceready event in a Vue component, demonstrating the correct event listener placement.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  ... we are sure 'deviceready' has been triggered here ...\n</template>\n\n<script>\n// outside of the default export,\n// we need to listen to the event for ourselves:\ndocument.addEventListener('deviceready', () => {\n  // it's only now that we are sure\n  // the event has triggered\n}, false)\n\nexport default {\n  // we are sure 'deviceready' has been triggered here\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Executing Malicious Code in Console (JavaScript)\nDESCRIPTION: An example of a potential security threat where malicious code is executed in the browser console to redirect the user to a malicious site. This emphasizes the importance of disabling developer tools in production.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-security-concerns.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.location='https://evilsite.com/looks-just-like-your-app'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useTimeout Composable in Quasar\nDESCRIPTION: This snippet provides the TypeScript function signature for the useTimeout composable. It returns an object with two methods: registerTimeout for scheduling a function execution, and removeTimeout for cancelling the timeout.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-composables/use-timeout.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useTimeout(): {\n  registerTimeout(fn: () => void, delay?: string | number): void;\n  removeTimeout(): void;\n};\n```\n\n----------------------------------------\n\nTITLE: Signing Android APK for Release\nDESCRIPTION: Command to sign the APK using the previously generated keystore. This is the final step in preparing the APK for Google Play Store submission.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/publishing-to-store.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napksigner sign --ks my-release-key.keystore --ks-key-alias alias_name <path-to-unsigned-apk-file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Capacitor v6 Dependencies\nDESCRIPTION: Package.json dependencies configuration for Capacitor v6. Requires Xcode 15+ for iOS and Android Studio Jellyfish 2023.3.1+ for Android development.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-capacitor-apps/capacitor-version-support.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndependencies: {\n  \"@capacitor/app\": \"^6.0.0\",\n  \"@capacitor/cli\": \"^6.0.0\",\n  \"@capacitor/core\": \"^6.0.0\",\n  \"@capacitor/splash-screen\": \"^6.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinia in PreFetch for SSR Apps\nDESCRIPTION: Example showing how to initialize a Pinia store in the preFetch hook specifically for SSR applications.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/prefetch-feature.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// App.vue - handling Pinia stores\n// example with a store named \"myStore\"\n// placed in /src/stores/myStore.js|ts\n\nimport { useMyStore } from 'stores/myStore'\n\nexport default {\n  // ...\n  preFetch ({ store }) {\n    const myStore = useMyStore(store)\n    // do something with myStore\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Android Device on Linux\nDESCRIPTION: Steps to fix permission issues when running an Android app directly on a phone/tablet on Linux systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/troubleshooting-and-tips.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo vim /etc/udev/rules.d/51-android.rules\nsudo chmod 644   /etc/udev/rules.d/51-android.rules\nsudo chown root. /etc/udev/rules.d/51-android.rules\nsudo service udev restart\nsudo killall adb\n```\n\n----------------------------------------\n\nTITLE: Promise-based Redirection in Boot File\nDESCRIPTION: Shows how to implement redirection using Promise rejection with a URL parameter in a Quasar boot file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/boot-files.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineBoot(({ urlPath }) => {\n  return new Promise((resolve, reject) => {\n    // ...\n    const isAuthorized = // ...\n    if (!isAuthorized && !urlPath.startsWith('/login')) {\n      // the \"url\" param here is of the same type\n      // as for \"redirect\" above\n      reject({ url: '/login' })\n      return\n    }\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Boot File Exports in package.json\nDESCRIPTION: Shows how to configure package.json exports to expose boot files with proper TypeScript typing support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/app-extension/src/runtime/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./boot/some-boot-file\": {\n      \"types\": \"./dist/runtime/boot/some-boot-file.d.ts\",\n      \"import\": \"./dist/runtime/boot/some-boot-file.js\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Route Definition in Vue Router\nDESCRIPTION: Example of defining a static route in Vue Router, which loads the component immediately.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/lazy-loading.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SomePage from 'pages/SomePage.vue'\n\nconst routes = [\n  {\n    path: '/some-page',\n    component: SomePage\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Extending SSR Webserver Configuration in quasar.config File\nDESCRIPTION: This code demonstrates how to extend the SSR webserver Esbuild configuration in the quasar.config file.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/configuring-ssr.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn {\n  // ...\n  ssr: {\n    // ...\n    extendSSRWebserverConf (esbuildConf) {\n      // tamper with esbuildConf here\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android SDK Environment Variables on Windows\nDESCRIPTION: Commands to set environment variables for Android SDK on Windows systems.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsetx ANDROID_HOME \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx ANDROID_SDK_ROOT \"%USERPROFILE%\\AppData\\Local\\Android\\Sdk\"\nsetx path \"%path%;%ANDROID_SDK_ROOT%\\tools;%ANDROID_SDK_ROOT%\\platform-tools;<gradle_path>\\bin;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Electron in Quasar\nDESCRIPTION: Configuration for specifying custom source file locations for the Electron main process. Allows changing the default electron-main file location.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/configuring-electron.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsourceFiles: {\n  electronMain?: 'src-electron/electron-main',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global Component Typings in TypeScript\nDESCRIPTION: This code snippet shows how to add global component typings to the src/quasar.d.ts file for TypeScript support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/app-extension/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Load global component typings\n/// <reference types=\"<%= pkgName %>\" />\n```\n\n----------------------------------------\n\nTITLE: Linting Files in Quasar Projects\nDESCRIPTION: Commands for running linting tools to check code quality in the Quasar project using various package managers.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/create-quasar/templates/app-extension/ae-ts/BASE/playground/quasar-cli-webpack/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# One of the following, depending on your package manager\nnpm run lint\nyarn lint\npnpm lint\nbun lint\n```\n\n----------------------------------------\n\nTITLE: PM2 Enhanced Start Script Configuration\nDESCRIPTION: Modified package.json script configuration using PM2 process manager for improved performance across multiple CPU cores.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-ssr/deploying.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n  \"start\": \"pm2 start index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Electron Preload Script Implementation\nDESCRIPTION: Example of a basic preload script that exposes a custom API to the renderer process using contextBridge.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-electron-apps/electron-preload-script.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  doAThing: () => {}\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing Electron Apps with Quasar CLI\nDESCRIPTION: Commands for publishing Electron apps using electron-builder, with options for different publishing destinations and strategies.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-electron-apps/build-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ quasar build -m electron -P always\n\n# ..or the longer form:\n$ quasar build --mode electron --publish always\n```\n\n----------------------------------------\n\nTITLE: Installing Ionic Webview Plugin\nDESCRIPTION: Command to install the Ionic Webview Plugin for iOS WkWebView support.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/preparation.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cordova plugin add cordova-plugin-ionic-webview\n```\n\n----------------------------------------\n\nTITLE: QNoSsr with Placeholder Slot\nDESCRIPTION: Demonstrates using a named slot for server-side placeholder content\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/vue-components/no-ssr.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<q-no-ssr>\n  <div>This won't be rendered on server</div>\n  <template v-slot:placeholder>\n    <div>Rendered on server</div>\n  </template>\n</q-no-ssr>\n```\n\n----------------------------------------\n\nTITLE: BEX Content Styling\nDESCRIPTION: CSS styling for the browser extension content to ensure proper spacing with the page content.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-browser-extensions/types-of-bex.md#2025-04-16_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.target-some-header-class {\n  margin-top: 62px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Device Plugin\nDESCRIPTION: Command to install the Cordova device plugin from the src-cordova directory\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-webpack/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# from /src-cordova:\n$ cordova plugin add cordova-plugin-device\n```\n\n----------------------------------------\n\nTITLE: Installing Cordova Device Plugin\nDESCRIPTION: Command to install the Cordova device plugin from within the src-cordova directory.\nSOURCE: https://github.com/quasarframework/quasar.git/blob/dev/docs/src/pages/quasar-cli-vite/developing-cordova-apps/cordova-plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# from /src-cordova:\n$ cordova plugin add cordova-plugin-device\n```"
  }
]