[
  {
    "owner": "iamkun",
    "repo": "dayjs",
    "content": "TITLE: Using Core Day.js API Features in JavaScript\nDESCRIPTION: Illustrates five fundamental Day.js operations: parsing a date string, formatting, setting and retrieving values (like month), adding intervals, and comparing dates. Requires Day.js installed and imported. Inputs include date strings and manipulation parameters; outputs are formatted strings, numbers, or boolean results depending on the method used.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ndayjs('2018-08-08') // parse\n\ndayjs().format('{YYYY} MM-DDTHH:mm:ss SSS [Z] A') // display\n\ndayjs().set('month', 3).month() // get & set\n\ndayjs().add(1, 'year') // manipulate\n\ndayjs().isBefore(dayjs()) // query\n```\n\n----------------------------------------\n\nTITLE: Chaining Date Manipulations with Day.js in JavaScript\nDESCRIPTION: Demonstrates how to chain multiple date operations using Day.js, including starting at the beginning of a month, adding days, setting the year, and formatting the output. This utilizes Day.js's Moment.js-compatible APIs, which support chaining and immutability. Requires the Day.js library installed; input is via method chaining and output is a formatted date string.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndayjs().startOf('month').add(1, 'day').set('year', 2018).format('YYYY-MM-DD HH:mm:ss');\n```\n\n----------------------------------------\n\nTITLE: Extending Day.js with Plugins in JavaScript\nDESCRIPTION: Describes importing and enabling a Day.js plugin (e.g., advancedFormat) to provide additional formatting options, and using extended formatting methods. Dependencies include the core Day.js library and the specific plugin package. The code demonstrates on-demand loading and chainable extension of functionality; inputs are format strings and outputs are formatted date strings with additional tokens.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // load on demand\n\ndayjs.extend(advancedFormat) // use plugin\n\ndayjs().format('Q Do k kk X x') // more available formats\n```\n\n----------------------------------------\n\nTITLE: Internationalization (I18n) Setup with Day.js Locales in JavaScript\nDESCRIPTION: Explains how to import additional locale data for Day.js, set global and instance-level locales, and format dates accordingly. Requires Day.js and locale packages installed via npm. Key parameters include locale codes; outputs are locale-specific formatted date strings. Locale modules must be loaded explicitly; none are included by default.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'dayjs/locale/es' // load on demand\n\ndayjs.locale('es') // use Spanish locale globally\n\ndayjs('2018-05-05').locale('zh-cn').format() // use Chinese Simplified locale in a specific instance\n```\n\n----------------------------------------\n\nTITLE: Installing Day.js via NPM in Console\nDESCRIPTION: Shows the command for installing the Day.js library using npm for integration into a JavaScript project. This is required before any API usage. The command should be run in the terminal; no inputs other than the command itself, and the expected result is Day.js being added as a dependency.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/README.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\nnpm install dayjs --save\n```\n\n----------------------------------------\n\nTITLE: Importing Day.js ES Module Build in JavaScript\nDESCRIPTION: Demonstrates how to import the `dayjs` library using its ES Module (ESM) entry point, introduced around version 1.8.6. This specific import path (`dayjs/esm`) was added to provide direct access to the ESM build, resolving potential module compatibility issues with tools like webpack 4 and CommonJS environments.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport dayjs from 'dayjs/esm'\n```\n\n----------------------------------------\n\nTITLE: Running ESLint Check with npm (Bash)\nDESCRIPTION: This command executes the ESLint linter script defined in the project's `package.json` file. It is used to check the codebase for style consistency and potential errors according to the project's ESLint configuration. Contributors should run this before submitting pull requests.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests with npm (Bash)\nDESCRIPTION: This command executes the test suite script defined in the project's `package.json` file. It runs all the defined tests (typically found in `test/*.test.js` files) to ensure code changes haven't introduced regressions. Contributors should run this before submitting pull requests to maintain test coverage.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Deprecated/Reverted Day.js Default Import in JavaScript/TypeScript\nDESCRIPTION: Shows a previously suggested, but later deprecated or reverted (as indicated by the strikethrough), method for importing `dayjs` around version 1.8.1, particularly noted in the context of TypeScript projects. Changes related to default exports, ES module support, and subsequent reversions (like in v1.8.4) led to updates in the recommended import syntax.\nSOURCE: https://github.com/iamkun/dayjs/blob/dev/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<del>import from dayjs from 'dayjs'</del>\n```"
  }
]