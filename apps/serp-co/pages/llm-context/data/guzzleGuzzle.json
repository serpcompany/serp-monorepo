[
  {
    "owner": "guzzle",
    "repo": "guzzle",
    "content": "TITLE: Basic Guzzle HTTP Client Usage in PHP\nDESCRIPTION: Demonstrates how to create a Guzzle client, send synchronous and asynchronous HTTP requests, and handle responses. Shows basic operations like checking status codes, reading headers, and accessing response body content.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/README.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new \\GuzzleHttp\\Client();\n$response = $client->request('GET', 'https://api.github.com/repos/guzzle/guzzle');\n\necho $response->getStatusCode(); // 200\necho $response->getHeaderLine('content-type'); // 'application/json; charset=utf8'\necho $response->getBody(); // '{\"id\": 1420053, \"name\": \"guzzle\", ...}'\n\n// Send an asynchronous request.\n$request = new \\GuzzleHttp\\Psr7\\Request('GET', 'http://httpbin.org');\n$promise = $client->sendAsync($request)->then(function ($response) {\n    echo 'I completed! ' . $response->getBody();\n});\n\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Creating a Guzzle Client in PHP\nDESCRIPTION: Demonstrates how to create a new Guzzle client with a base URI and default request options. The client is immutable and uses an associative array for configuration.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\n\n$client = new Client([\n    // Base URI is used with relative requests\n    'base_uri' => 'http://httpbin.org',\n    // You can set any number of default request options.\n    'timeout'  => 2.0,\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Guzzle HTTP Client Usage in PHP\nDESCRIPTION: Demonstrates how to use Guzzle to make HTTP requests in PHP. The example shows making a synchronous GET request with basic authentication, retrieving response details, and executing an asynchronous request with a promise-based callback.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new GuzzleHttp\\Client();\n$res = $client->request('GET', 'https://api.github.com/user', [\n    'auth' => ['user', 'pass']\n]);\necho $res->getStatusCode();\n// \"200\"\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\necho $res->getBody();\n// {\"type\":\"User\"...';\n\n// Send an asynchronous request.\n$request = new \\GuzzleHttp\\Psr7\\Request('GET', 'http://httpbin.org');\n$promise = $client->sendAsync($request)->then(function ($response) {\n    echo 'I completed! ' . $response->getBody();\n});\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle via Composer\nDESCRIPTION: Shows how to install Guzzle using Composer, which is the recommended installation method for the library.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require guzzlehttp/guzzle\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Requests with Guzzle in PHP\nDESCRIPTION: Demonstrates how to send asynchronous requests using Guzzle's magic methods and the sendAsync() and requestAsync() methods. These return promises that can be chained or waited on.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$promise = $client->getAsync('http://httpbin.org/get');\n$promise = $client->deleteAsync('http://httpbin.org/delete');\n$promise = $client->headAsync('http://httpbin.org/get');\n$promise = $client->optionsAsync('http://httpbin.org/get');\n$promise = $client->patchAsync('http://httpbin.org/patch');\n$promise = $client->postAsync('http://httpbin.org/post');\n$promise = $client->putAsync('http://httpbin.org/put');\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Requests with Guzzle in PHP\nDESCRIPTION: Shows how to send various types of synchronous HTTP requests using Guzzle's magic methods. These methods provide a simple way to make GET, DELETE, HEAD, OPTIONS, PATCH, POST, and PUT requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->get('http://httpbin.org/get');\n$response = $client->delete('http://httpbin.org/delete');\n$response = $client->head('http://httpbin.org/get');\n$response = $client->options('http://httpbin.org/get');\n$response = $client->patch('http://httpbin.org/patch');\n$response = $client->post('http://httpbin.org/post');\n$response = $client->put('http://httpbin.org/put');\n```\n\n----------------------------------------\n\nTITLE: Custom Headers Configuration in Guzzle\nDESCRIPTION: Examples of setting custom HTTP headers for requests, including default headers when creating the client and request-specific headers.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Set various headers on a request\n$client->request('GET', '/get', [\n    'headers' => [\n        'User-Agent' => 'testing/1.0',\n        'Accept'     => 'application/json',\n        'X-Foo'      => ['Bar', 'Baz']\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Request Promises with Guzzle in PHP\nDESCRIPTION: Shows how to work with the promises returned by asynchronous requests in Guzzle. The example demonstrates chaining then() calls to handle successful responses and exceptions.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse GuzzleHttp\\Exception\\RequestException;\n\n$promise = $client->requestAsync('GET', 'http://httpbin.org/get');\n$promise->then(\n    function (ResponseInterface $res) {\n        echo $res->getStatusCode() . \"\\n\";\n    },\n    function (RequestException $e) {\n        echo $e->getMessage() . \"\\n\";\n        echo $e->getRequest()->getMethod();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Requests with Guzzle in PHP\nDESCRIPTION: Demonstrates how to send asynchronous HTTP requests using Guzzle's requestAsync method and handle responses with promise chains. Shows how to attach a callback function to process the response once it's received.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$promise = $client->requestAsync('GET', 'http://httpbin.org/get');\n$promise->then(function ($response) {\n    echo 'Got a response! ' . $response->getStatusCode();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Guzzle\nDESCRIPTION: Shows how to catch and process client exceptions in Guzzle, accessing both the request and response objects to get detailed error information.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\nuse GuzzleHttp\\Exception\\ClientException;\n\ntry {\n    $client->request('GET', 'https://github.com/_abc_123_404');\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e->getRequest());\n    echo Psr7\\Message::toString($e->getResponse());\n}\n```\n\n----------------------------------------\n\nTITLE: Using Guzzle Pool for Multiple Requests in PHP\nDESCRIPTION: Illustrates how to use the GuzzleHttp\\Pool object to send an indeterminate number of requests concurrently. The example shows creating a pool with a generator function and handling successful and failed requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Pool;\nuse GuzzleHttp\\Psr7\\Request;\nuse GuzzleHttp\\Psr7\\Response;\n\n$client = new Client();\n\n$requests = function ($total) {\n    $uri = 'http://127.0.0.1:8126/guzzle-server/perf';\n    for ($i = 0; $i < $total; $i++) {\n        yield new Request('GET', $uri);\n    }\n};\n\n$pool = new Pool($client, $requests(100), [\n    'concurrency' => 5,\n    'fulfilled' => function (Response $response, $index) {\n        // this is delivered each successful response\n    },\n    'rejected' => function (RequestException $reason, $index) {\n        // this is delivered each failed request\n    },\n]);\n\n// Initiate the transfers and create a promise\n$promise = $pool->promise();\n\n// Force the pool of requests to complete.\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Sending Concurrent Requests with Guzzle in PHP\nDESCRIPTION: Demonstrates how to send multiple requests concurrently using Guzzle's promise functionality. The example shows initiating multiple requests and waiting for all of them to complete.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Promise;\n\n$client = new Client(['base_uri' => 'http://httpbin.org/']);\n\n// Initiate each request but do not block\n$promises = [\n    'image' => $client->getAsync('/image'),\n    'png'   => $client->getAsync('/image/png'),\n    'jpeg'  => $client->getAsync('/image/jpeg'),\n    'webp'  => $client->getAsync('/image/webp')\n];\n\n// Wait for the requests to complete; throws a ConnectException\n// if any of the requests fail\n$responses = Promise\\Utils::unwrap($promises);\n\n// You can access each response using the key of the promise\necho $responses['image']->getHeader('Content-Length')[0];\necho $responses['png']->getHeader('Content-Length')[0];\n\n// Wait for the requests to complete, even if some of them fail\n$responses = Promise\\Utils::settle($promises)->wait();\n\n// Values returned above are wrapped in an array with 2 keys: \"state\" (either fulfilled or rejected) and \"value\" (contains the response)\necho $responses['image']['state']; // returns \"fulfilled\"\necho $responses['image']['value']->getHeader('Content-Length')[0];\necho $responses['png']['value']->getHeader('Content-Length')[0];\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Guzzle Client in PHP\nDESCRIPTION: This code demonstrates how to add a custom middleware to a Guzzle client by wrapping the handler with HandlerStack and pushing the middleware onto the stack.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Handler\\CurlHandler;\nuse GuzzleHttp\\Client;\n\n$stack = new HandlerStack();\n$stack->setHandler(new CurlHandler());\n$stack->push(add_header('X-Foo', 'bar'));\n$client = new Client(['handler' => $stack]);\n```\n\n----------------------------------------\n\nTITLE: Saving Response Content to Files or Streams in Guzzle\nDESCRIPTION: Demonstrates different ways to save the body of a response in Guzzle using the sink option. This allows saving responses directly to a file, PHP stream, or PSR-7 StreamInterface.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/stream/20', ['sink' => '/path/to/file']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$resource = \\GuzzleHttp\\Psr7\\Utils::tryFopen('/path/to/file', 'w');\n$client->request('GET', '/stream/20', ['sink' => $resource]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$resource = \\GuzzleHttp\\Psr7\\Utils::tryFopen('/path/to/file', 'w');\n$stream = \\GuzzleHttp\\Psr7\\Utils::streamFor($resource);\n$client->request('GET', '/stream/20', ['save_to' => $stream]);\n```\n\n----------------------------------------\n\nTITLE: Handling Guzzle Response Objects in PHP\nDESCRIPTION: Shows how to work with the PSR-7 response objects returned by Guzzle requests. The example demonstrates accessing status codes, headers, and the response body.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$code = $response->getStatusCode(); // 200\n$reason = $response->getReasonPhrase(); // OK\n\n// Check if a header exists.\nif ($response->hasHeader('Content-Length')) {\n    echo \"It exists\";\n}\n\n// Get a header from the response.\necho $response->getHeader('Content-Length')[0];\n\n// Get all of the response headers.\nforeach ($response->getHeaders() as $name => $values) {\n    echo $name . ': ' . implode(', ', $values) . \"\\r\\n\";\n}\n\n$body = $response->getBody();\n```\n\n----------------------------------------\n\nTITLE: Adding Response Header Middleware in Guzzle PHP\nDESCRIPTION: This snippet shows how to create a middleware that modifies the response by adding a header. It demonstrates working with the promise returned by the handler to modify the response.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Handler\\CurlHandler;\nuse GuzzleHttp\\Client;\n\nfunction add_response_header($header, $value)\n{\n    return function (callable $handler) use ($header, $value) {\n        return function (\n            RequestInterface $request,\n            array $options\n        ) use ($handler, $header, $value) {\n            $promise = $handler($request, $options);\n            return $promise->then(\n                function (ResponseInterface $response) use ($header, $value) {\n                    return $response->withHeader($header, $value);\n                }\n            );\n        };\n    };\n}\n\n$stack = new HandlerStack();\n$stack->setHandler(new CurlHandler());\n$stack->push(add_response_header('X-Foo', 'bar'));\n$client = new Client(['handler' => $stack]);\n```\n\n----------------------------------------\n\nTITLE: Uploading JSON Data in Guzzle\nDESCRIPTION: Shows how to upload JSON data with Guzzle using the json request option, which automatically sets the appropriate Content-Type header.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$r = $client->request('PUT', 'http://httpbin.org/put', [\n    'json' => ['foo' => 'bar']\n]);\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP Responses with Guzzle Mock Handler in PHP\nDESCRIPTION: Demonstrates how to use Guzzle's MockHandler to queue predefined responses for testing HTTP clients without making actual network requests. It shows creating mock responses, handling exceptions, and resetting the queue.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/testing.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Handler\\MockHandler;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Psr7\\Response;\nuse GuzzleHttp\\Psr7\\Request;\nuse GuzzleHttp\\Exception\\RequestException;\n\n// Create a mock and queue two responses.\n$mock = new MockHandler([\n    new Response(200, ['X-Foo' => 'Bar'], 'Hello, World'),\n    new Response(202, ['Content-Length' => 0]),\n    new RequestException('Error Communicating with Server', new Request('GET', 'test'))\n]);\n\n$handlerStack = HandlerStack::create($mock);\n$client = new Client(['handler' => $handlerStack]);\n\n// The first request is intercepted with the first response.\n$response = $client->request('GET', '/');\necho $response->getStatusCode();\n//> 200\necho $response->getBody();\n//> Hello, World\n// The second request is intercepted with the second response.\necho $client->request('GET', '/')->getStatusCode();\n//> 202\n\n// Reset the queue and queue up a new response\n$mock->reset();\n$mock->append(new Response(201));\n\n// As the mock was reset, the new response is the 201 CREATED,\n// instead of the previously queued RequestException\necho $client->request('GET', '/')->getStatusCode();\n//> 201\n```\n\n----------------------------------------\n\nTITLE: Waiting for Asynchronous Request Completion in Guzzle\nDESCRIPTION: Shows how to force an asynchronous request to complete by using the wait() method on the returned promise object, which will block execution until the request is finished and a response is available.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$promise = $client->requestAsync('GET', 'http://httpbin.org/get');\n$response = $promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart Form Data with Guzzle\nDESCRIPTION: Shows how to send multipart/form-data POST requests with Guzzle, including both form fields and file uploads with optional headers and filenames.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$response = $client->request('POST', 'http://httpbin.org/post', [\n    'multipart' => [\n        [\n            'name'     => 'field_name',\n            'contents' => 'abc'\n        ],\n        [\n            'name'     => 'file_name',\n            'contents' => Psr7\\Utils::tryFopen('/path/to/file', 'r')\n        ],\n        [\n            'name'     => 'other_file',\n            'contents' => 'hello',\n            'filename' => 'filename.txt',\n            'headers'  => [\n                'X-Foo' => 'this is an extra header to include'\n            ]\n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Working with Response Bodies in Guzzle\nDESCRIPTION: This code demonstrates different ways to handle and read from response bodies in Guzzle, including implicit and explicit string casting, reading specific byte amounts, and accessing remaining content.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Implicitly cast the body to a string and echo it\necho $body;\n// Explicitly cast the body to a string\n$stringBody = (string) $body;\n// Read 10 bytes from the body\n$tenBytes = $body->read(10);\n// Read the remaining contents of the body as a string\n$remainingBytes = $body->getContents();\n```\n\n----------------------------------------\n\nTITLE: Using Middleware::mapResponse in Guzzle PHP\nDESCRIPTION: This snippet demonstrates using the Middleware::mapResponse helper to create a middleware that modifies the response. It shows adding a header to each response using this method.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Handler\\CurlHandler;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Middleware;\n\n$stack = new HandlerStack();\n$stack->setHandler(new CurlHandler());\n\n$stack->push(Middleware::mapResponse(function (ResponseInterface $response) {\n    return $response->withHeader('X-Foo', 'bar');\n}));\n\n$client = new Client(['handler' => $stack]);\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Verification in Guzzle PHP\nDESCRIPTION: Shows different ways to configure SSL certificate verification using the verify option, including using system CA bundle, custom certificate, or disabling verification.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// Use the system's CA bundle (this is the default setting)\n$client->request('GET', '/', ['verify' => true]);\n\n// Use a custom SSL certificate on disk.\n$client->request('GET', '/', ['verify' => '/path/to/cert.pem']);\n\n// Disable validation entirely (don't do this!).\n$client->request('GET', '/', ['verify' => false]);\n```\n\n----------------------------------------\n\nTITLE: Uploading Data with Guzzle\nDESCRIPTION: Demonstrates various methods for uploading data with Guzzle, including using string data, file streams, and PSR-7 streams as request body content.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n// Provide the body as a string.\n$r = $client->request('POST', 'http://httpbin.org/post', [\n    'body' => 'raw data'\n]);\n\n// Provide an fopen resource.\n$body = Psr7\\Utils::tryFopen('/path/to/file', 'r');\n$r = $client->request('POST', 'http://httpbin.org/post', ['body' => $body]);\n\n// Use the Utils::streamFor method to create a PSR-7 stream.\n$body = Psr7\\Utils::streamFor('hello!');\n$r = $client->request('POST', 'http://httpbin.org/post', ['body' => $body]);\n```\n\n----------------------------------------\n\nTITLE: Named Middleware Management in Guzzle PHP\nDESCRIPTION: This snippet demonstrates how to add, position, and remove named middleware in a HandlerStack. It shows adding middleware before and after named middleware, and removing middleware by name.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse GuzzleHttp\\Middleware;\n\n// Add a middleware with a name\n$stack->push(Middleware::mapRequest(function (RequestInterface $r) {\n    return $r->withHeader('X-Foo', 'Bar');\n}, 'add_foo'));\n\n// Add a middleware before a named middleware (unshift before).\n$stack->before('add_foo', Middleware::mapRequest(function (RequestInterface $r) {\n    return $r->withHeader('X-Baz', 'Qux');\n}, 'add_baz'));\n\n// Add a middleware after a named middleware (pushed after).\n$stack->after('add_baz', Middleware::mapRequest(function (RequestInterface $r) {\n    return $r->withHeader('X-Lorem', 'Ipsum');\n}));\n\n// Remove a middleware by name\n$stack->remove('add_foo');\n```\n\n----------------------------------------\n\nTITLE: Request Timeout Configuration in Guzzle PHP\nDESCRIPTION: Example showing how to set a timeout for HTTP requests. The request will throw an exception if the server does not respond within the specified timeout period.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// Timeout if a server does not return a response in 3.14 seconds.\n$client->request('GET', '/delay/5', ['timeout' => 3.14]);\n// PHP Fatal error:  Uncaught exception 'GuzzleHttp\\Exception\\TransferException'\n```\n\n----------------------------------------\n\nTITLE: Sending Form Fields with Guzzle\nDESCRIPTION: Demonstrates how to send application/x-www-form-urlencoded POST requests using the form_params option to specify form fields as an array.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('POST', 'http://httpbin.org/post', [\n    'form_params' => [\n        'field_name' => 'abc',\n        'other_field' => '123',\n        'nested_field' => [\n            'nested' => 'hello'\n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring cURL Multi Handler Options in Guzzle\nDESCRIPTION: Shows how to create a Guzzle client with a customized CurlMultiHandler for managing multiple concurrent requests. This example configures maximum connection limits for improved performance.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Handler\\CurlMultiHandler;\n\n$client = new Client(['handler' => HandlerStack::create(new CurlMultiHandler([\n    'options' => [\n        CURLMOPT_MAX_TOTAL_CONNECTIONS => 50,\n        CURLMOPT_MAX_HOST_CONNECTIONS => 5,\n    ]\n]))]);\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in Guzzle\nDESCRIPTION: Demonstrates how to customize redirect behavior in Guzzle requests using the allow_redirects option, including enabling, disabling, or setting maximum redirects.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('GET', 'http://github.com');\necho $response->getStatusCode();\n// 200\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('GET', 'http://github.com', [\n    'allow_redirects' => false\n]);\necho $response->getStatusCode();\n// 301\n```\n\n----------------------------------------\n\nTITLE: Creating Multipart Form Data Requests in Guzzle\nDESCRIPTION: Shows how to configure multipart form data requests in Guzzle using the multipart option. This approach is used for file uploads and complex form submissions that require the multipart/form-data Content-Type header.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$client->request('POST', '/post', [\n    'multipart' => [\n        [\n            'name'     => 'foo',\n            'contents' => 'data',\n            'headers'  => ['X-Baz' => 'bar']\n        ],\n        [\n            'name'     => 'baz',\n            'contents' => Psr7\\Utils::tryFopen('/path/to/file', 'r')\n        ],\n        [\n            'name'     => 'qux',\n            'contents' => Psr7\\Utils::tryFopen('/path/to/file', 'r'),\n            'filename' => 'custom_filename.txt'\n        ],\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Handler for Guzzle Client in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom handler for a Guzzle client using CurlHandler and HandlerStack. It shows how to wrap the handler with middleware and create a new client instance.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Handler\\CurlHandler;\n\n$handler = new CurlHandler();\n$stack = HandlerStack::create($handler); // Wrap w/ middleware\n$client = new Client(['handler' => $stack]);\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a Custom Request with Guzzle in PHP\nDESCRIPTION: Illustrates how to create a custom PSR-7 request object and send it using the Guzzle client. This method allows for more control over the request details.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7\\Request;\n\n$request = new Request('PUT', 'http://httpbin.org/put');\n$response = $client->send($request, ['timeout' => 2]);\n```\n\n----------------------------------------\n\nTITLE: Request Body Configuration in Guzzle - PHP\nDESCRIPTION: Different ways to set request body including string, file stream, and PSR-7 stream interface.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// You can send requests that use a string as the message body.\n$client->request('PUT', '/put', ['body' => 'foo']);\n```\n\nLANGUAGE: php\nCODE:\n```\n// You can send requests that use a stream resource as the body.\n$resource = \\GuzzleHttp\\Psr7\\Utils::tryFopen('http://httpbin.org', 'r');\n$client->request('PUT', '/put', ['body' => $resource]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// You can send requests that use a Guzzle stream object as the body\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor('contents...');\n$client->request('POST', '/post', ['body' => $stream]);\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware Function for Guzzle in PHP\nDESCRIPTION: This code defines a middleware function that can be used to augment the functionality of Guzzle handlers. It shows the basic structure of a middleware function that can modify requests or responses.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\nfunction my_middleware()\n{\n    return function (callable $handler) {\n        return function (RequestInterface $request, array $options) use ($handler) {\n            return $handler($request, $options);\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxies in Guzzle\nDESCRIPTION: Shows how to configure HTTP proxies in Guzzle requests, including both simple proxy strings and protocol-specific proxy configurations with exclusion lists.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/', ['proxy' => 'http://localhost:8125']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/', [\n    'proxy' => [\n        'http'  => 'http://localhost:8125', // Use this proxy with \"http\"\n        'https' => 'http://localhost:9124', // Use this proxy with \"https\",\n        'no' => ['.mit.edu', 'foo.com']    // Don't use a proxy with these\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Authentication in Guzzle - PHP\nDESCRIPTION: Examples of different authentication methods including basic, digest, and NTLM authentication.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/get', ['auth' => ['username', 'password']]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/get', [\n    'auth' => ['username', 'password', 'digest']\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/get', [\n    'auth' => ['username', 'password', 'ntlm']\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Header to Requests using Middleware in Guzzle PHP\nDESCRIPTION: This snippet shows how to create a middleware function that adds a header to each request. It demonstrates modifying the request before passing it to the handler.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\n\nfunction add_header($header, $value)\n{\n    return function (callable $handler) use ($header, $value) {\n        return function (\n            RequestInterface $request,\n            array $options\n        ) use ($handler, $header, $value) {\n            $request = $request->withHeader($header, $value);\n            return $handler($request, $options);\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Response with Guzzle in PHP\nDESCRIPTION: Demonstrates how to stream a response using the stream option. The example shows reading bytes from the response body in chunks until the end of stream is reached.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('GET', '/stream/20', ['stream' => true]);\n// Read bytes off of the stream until the end of the stream is reached\n$body = $response->getBody();\nwhile (!$body->eof()) {\n    echo $body->read(1024);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body in Guzzle\nDESCRIPTION: Example of sending JSON-encoded data in the request body with automatic application/json Content-Type header.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('PUT', '/put', ['json' => ['foo' => 'bar']]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Guzzle HTTP Client - PHP\nDESCRIPTION: Creates a new Guzzle HTTP client instance with a base URI configuration.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new GuzzleHttp\\Client(['base_uri' => 'http://httpbin.org']);\n```\n\n----------------------------------------\n\nTITLE: Setting Query String Parameters in Guzzle Requests\nDESCRIPTION: Shows three different ways to provide query string parameters in Guzzle HTTP requests: directly in the URI, as an array using the query option, or as a string query parameter.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('GET', 'http://httpbin.org?foo=bar');\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', 'http://httpbin.org', [\n    'query' => ['foo' => 'bar']\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', 'http://httpbin.org', ['query' => 'foo=bar']);\n```\n\n----------------------------------------\n\nTITLE: Creating PSR-7 Request Objects in PHP\nDESCRIPTION: Shows how to create a new PSR-7 Request object using GuzzleHttp\\Psr7\\Request class. Includes examples of creating simple GET requests and more complex requests with headers and body content.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7\\Request;\n\n$request = new Request('GET', 'http://httpbin.org/get');\n\n// You can provide other optional constructor arguments.\n$headers = ['X-Foo' => 'Bar'];\n$body = 'hello!';\n$request = new Request('PUT', 'http://httpbin.org/put', $headers, $body);\n```\n\n----------------------------------------\n\nTITLE: Tracking Request Progress in Guzzle\nDESCRIPTION: Demonstrates how to track upload and download progress in Guzzle using the progress callback option. This function receives the total expected bytes and current bytes for both upload and download operations.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// Send a GET request to /get?foo=bar\n$result = $client->request(\n    'GET',\n    '/',\n    [\n        'progress' => function(\n            $downloadTotal,\n            $downloadedBytes,\n            $uploadTotal,\n            $uploadedBytes\n        ) {\n            //do something\n        },\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Capturing Transfer Statistics with on_stats in Guzzle\nDESCRIPTION: Shows how to use the on_stats option to capture detailed transfer statistics after a request has completed. This provides access to timing, handler-specific data, and the response or error information.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\TransferStats;\n\n$client = new GuzzleHttp\\Client();\n\n$client->request('GET', 'http://httpbin.org/stream/1024', [\n    'on_stats' => function (TransferStats $stats) {\n        echo $stats->getEffectiveUri() . \"\\n\";\n        echo $stats->getTransferTime() . \"\\n\";\n        var_dump($stats->getHandlerStats());\n\n        // You must check if a response was received before using the\n        // response object.\n        if ($stats->hasResponse()) {\n            echo $stats->getResponse()->getStatusCode();\n        } else {\n            // Error data is handler specific. You will need to know what\n            // type of error data your handler uses before using this\n            // value.\n            var_dump($stats->getHandlerErrorData());\n        }\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Working with Response Bodies\nDESCRIPTION: Shows how to retrieve the body of a response message using getBody() and how to use the returned StreamInterface object to read from the body stream.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = GuzzleHttp\\get('http://httpbin.org/get');\necho $response->getBody();\n// JSON string: { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom cURL Options to Guzzle Requests\nDESCRIPTION: Demonstrates how to pass custom cURL options to a Guzzle request using the 'curl' key in the request options array. This example shows setting a specific network interface for the outgoing connection.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/', [\n    'curl' => [\n        CURLOPT_INTERFACE => 'xxx.xxx.xxx.xxx'\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Using on_headers Callback in Guzzle for Response Validation\nDESCRIPTION: Demonstrates how to use the on_headers option to examine HTTP headers of a response before the body is downloaded. This can be used to conditionally reject large responses based on content length or other header criteria.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// Reject responses that are greater than 1024 bytes.\n$client->request('GET', 'http://httpbin.org/stream/1024', [\n    'on_headers' => function (ResponseInterface $response) {\n        if ($response->getHeaderLine('Content-Length') > 1024) {\n            throw new \\Exception('The file is too big!');\n        }\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to Guzzle Requests\nDESCRIPTION: Demonstrates how to add query string parameters to Guzzle requests using the query option. Query parameters can be specified as an associative array and will override any existing query parameters in the URL.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// Send a GET request to /get?foo=bar\n$client->request('GET', '/get', ['query' => ['foo' => 'bar']]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Send a GET request to /get?foo=bar\n$client->request('GET', '/get?abc=123', ['query' => ['foo' => 'bar']]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Stream Context Options to Guzzle Requests\nDESCRIPTION: Demonstrates how to add custom PHP stream context options to a Guzzle request using the 'stream_context' key. This example shows allowing self-signed SSL certificates and binding to a specific network interface.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/', [\n    'stream' => true,\n    'stream_context' => [\n        'ssl' => [\n            'allow_self_signed' => true\n        ],\n        'socket' => [\n            'bindto' => 'xxx.xxx.xxx.xxx'\n        ]\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Handling Configuration in Guzzle\nDESCRIPTION: Example showing how to disable automatic exception throwing for HTTP error responses (4xx and 5xx).\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/status/500');\n// Throws a GuzzleHttp\\Exception\\ServerException\n\n$res = $client->request('GET', '/status/500', ['http_errors' => false]);\necho $res->getStatusCode();\n// 500\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in Guzzle - PHP\nDESCRIPTION: Examples of handling HTTP redirects with different configurations including disable redirects, default redirects, and custom redirect settings.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$res = $client->request('GET', '/redirect/3', ['allow_redirects' => false]);\necho $res->getStatusCode();\n// 302\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $client->request('GET', '/redirect/3');\necho $res->getStatusCode();\n// 200\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\UriInterface;\n\n$onRedirect = function(\n    RequestInterface $request,\n    ResponseInterface $response,\n    UriInterface $uri\n) {\n    echo 'Redirecting! ' . $request->getUri() . ' to ' . $uri . \"\\n\";\n};\n\n$res = $client->request('GET', '/redirect/3', [\n    'allow_redirects' => [\n        'max'             => 10,        // allow at most 10 redirects.\n        'strict'          => true,      // use \"strict\" RFC compliant redirects.\n        'referer'         => true,      // add a Referer header\n        'protocols'       => ['https'], // only allow https URLs\n        'on_redirect'     => $onRedirect,\n        'track_redirects' => true\n    ]\n]);\n\necho $res->getStatusCode();\n// 200\n\necho $res->getHeaderLine('X-Guzzle-Redirect-History');\n// http://first-redirect, http://second-redirect, etc...\n\necho $res->getHeaderLine('X-Guzzle-Redirect-Status-History');\n// 301, 302, etc...\n```\n\n----------------------------------------\n\nTITLE: Managing Middleware Stack Order in Guzzle PHP\nDESCRIPTION: This code shows how to manage the order of middleware in a HandlerStack. It demonstrates pushing and unshifting middleware onto the stack and how it affects the execution order.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Middleware;\nuse GuzzleHttp\\Utils;\nuse Psr\\Http\\Message\\RequestInterface;\n\n$stack = new HandlerStack();\n$stack->setHandler(Utils::chooseHandler());\n\n$stack->push(Middleware::mapRequest(function (RequestInterface $r) {\n    echo 'A';\n    return $r;\n}));\n\n$stack->push(Middleware::mapRequest(function (RequestInterface $r) {\n    echo 'B';\n    return $r;\n}));\n\n$stack->push(Middleware::mapRequest(function (RequestInterface $r) {\n    echo 'C';\n    return $r;\n}));\n\n$client->request('GET', 'http://httpbin.org/');\n// echoes 'ABC';\n\n$stack->unshift(Middleware::mapRequest(function (RequestInterface $r) {\n    echo '0';\n    return $r;\n}));\n\n$client = new Client(['handler' => $stack]);\n$client->request('GET', 'http://httpbin.org/');\n// echoes '0ABC';\n```\n\n----------------------------------------\n\nTITLE: Certificate Configuration in Guzzle - PHP\nDESCRIPTION: Setting client-side SSL/TLS certificates with optional password protection.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/', ['cert' => ['/path/server.pem', 'password']]);\n```\n\n----------------------------------------\n\nTITLE: Using Cookies with Guzzle\nDESCRIPTION: Demonstrates how to handle cookies in Guzzle requests using a specific cookie jar instance or a shared client-level cookie jar.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Use a specific cookie jar\n$jar = new \\GuzzleHttp\\Cookie\\CookieJar;\n$r = $client->request('GET', 'http://httpbin.org/cookies', [\n    'cookies' => $jar\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use a shared client cookie jar\n$client = new \\GuzzleHttp\\Client(['cookies' => true]);\n$r = $client->request('GET', 'http://httpbin.org/cookies');\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Method Shortcuts with Guzzle Client\nDESCRIPTION: Demonstrates the convenience methods available on Guzzle client for different HTTP methods (GET, POST, HEAD, etc.) that create and send requests with a single method call.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->patch('http://httpbin.org/patch', ['body' => 'content']);\n```\n\n----------------------------------------\n\nTITLE: Content Decoding Configuration in Guzzle\nDESCRIPTION: Examples of controlling content encoding behavior. Shows how to disable automatic decoding of compressed responses and how to specify custom Accept-Encoding headers.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Request gzipped data, but do not decode it while downloading\n$client->request('GET', '/foo.js', [\n    'headers'        => ['Accept-Encoding' => 'gzip'],\n    'decode_content' => false\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Pass \"gzip\" as the Accept-Encoding header.\n$client->request('GET', '/foo.js', ['decode_content' => 'gzip']);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Delegate choosing compression method to curl\n$client->request('GET', '/foo.js', [\n    'curl' => [\n        \\CURLOPT_ENCODING => '',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Middleware::mapRequest in Guzzle PHP\nDESCRIPTION: This code demonstrates how to use the Middleware::mapRequest helper to create a simpler middleware for modifying requests. It shows adding a header to each request using this method.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\RequestInterface;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Handler\\CurlHandler;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Middleware;\n\n$stack = new HandlerStack();\n$stack->setHandler(new CurlHandler());\n\n$stack->push(Middleware::mapRequest(function (RequestInterface $request) {\n    return $request->withHeader('X-Foo', 'bar');\n}));\n\n$client = new Client(['handler' => $stack]);\n```\n\n----------------------------------------\n\nTITLE: Using the batch Function in Guzzle 4.0.0\nDESCRIPTION: The GuzzleHttp\\batch() function allows sending requests in parallel without writing asynchronous code. This was added in version 4.0.0 as a convenience method for handling parallel requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nGuzzleHttp\\batch()\n```\n\n----------------------------------------\n\nTITLE: Setting Read Timeout for Streamed Responses in Guzzle\nDESCRIPTION: Shows how to configure a read timeout for streamed responses in Guzzle. This timeout applies to individual read operations on a streamed body, preventing reads from blocking indefinitely.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('GET', '/stream', [\n    'stream' => true,\n    'read_timeout' => 10,\n]);\n\n$body = $response->getBody();\n\n// Returns false on timeout\n$data = $body->read(1024);\n\n// Returns false on timeout\n$line = fgets($body->detach());\n```\n\n----------------------------------------\n\nTITLE: Using Tap Middleware to Monitor Requests in Guzzle\nDESCRIPTION: Demonstrates how to use Guzzle's tap middleware to inspect and echo parts of an HTTP request before it's sent. This is useful for debugging and monitoring purposes when you need to see the exact content being sent over the wire.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Middleware;\n\n// Create a middleware that echoes parts of the request.\n$tapMiddleware = Middleware::tap(function ($request) {\n    echo $request->getHeaderLine('Content-Type');\n    // application/json\n    echo $request->getBody();\n    // {\"foo\":\"bar\"}\n});\n\n// The $handler variable is the handler passed in the\n// options to the client constructor.\n$response = $client->request('PUT', '/put', [\n    'json'    => ['foo' => 'bar'],\n    'handler' => $tapMiddleware($handler)\n]);\n```\n\n----------------------------------------\n\nTITLE: Serializing JSON Payloads in Guzzle 4.1.0\nDESCRIPTION: The 'json' request option allows for easy serialization of JSON payloads in HTTP requests. This option was added in version 4.1.0.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Example usage of the json request option\n$client->request('POST', '/api', [\n    'json' => ['foo' => 'bar']\n]);\n```\n\n----------------------------------------\n\nTITLE: Tracking HTTP Requests with Guzzle History Middleware in PHP\nDESCRIPTION: Shows how to use Guzzle's History Middleware to track and analyze HTTP requests made by a client. It demonstrates setting up the middleware, making requests, and iterating over the recorded transactions.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/testing.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Middleware;\n\n$container = [];\n$history = Middleware::history($container);\n\n$handlerStack = HandlerStack::create();\n// or $handlerStack = HandlerStack::create($mock); if using the Mock handler.\n\n// Add the history middleware to the handler stack.\n$handlerStack->push($history);\n\n$client = new Client(['handler' => $handlerStack]);\n\n$client->request('GET', 'http://httpbin.org/get');\n$client->request('HEAD', 'http://httpbin.org/get');\n\n// Count the number of transactions\necho count($container);\n//> 2\n\n// Iterate over the requests and responses\nforeach ($container as $transaction) {\n    echo $transaction['request']->getMethod();\n    //> GET, HEAD\n    if ($transaction['response']) {\n        echo $transaction['response']->getStatusCode();\n        //> 200, 200\n    } elseif ($transaction['error']) {\n        echo $transaction['error'];\n        //> exception\n    }\n    var_dump($transaction['options']);\n    //> dumps the request options of the sent request.\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging HTTP Requests with Guzzle\nDESCRIPTION: Example of enabling debug output for HTTP requests. When enabled, outputs detailed cURL or stream wrapper information to STDOUT or a specified stream.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/get', ['debug' => true]);\n```\n\n----------------------------------------\n\nTITLE: Safely Parsing JSON with Guzzle's Wrapper Function\nDESCRIPTION: The GuzzleHttp\\json_decode() wrapper function provides safe JSON parsing functionality. This was added in version 4.1.0 as a utility function.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nGuzzleHttp\\json_decode()\n```\n\n----------------------------------------\n\nTITLE: TLS Protocol Configuration in Guzzle - PHP\nDESCRIPTION: Setting minimum TLS protocol version for requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/foo', ['crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT]);\n```\n\n----------------------------------------\n\nTITLE: Form Parameters in Guzzle POST Requests\nDESCRIPTION: Example of sending form parameters in a POST request with application/x-www-form-urlencoded content type.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$client->request('POST', '/post', [\n    'form_params' => [\n        'foo' => 'bar',\n        'baz' => ['hi', 'there!']\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating PSR-7 Response Objects in PHP\nDESCRIPTION: Demonstrates how to create a PSR-7 Response object using GuzzleHttp\\Psr7\\Response class. Shows both creating a basic response with default values and customizing status, headers, body, and protocol version.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7\\Response;\n\n// The constructor requires no arguments.\n$response = new Response();\necho $response->getStatusCode(); // 200\necho $response->getProtocolVersion(); // 1.1\n\n// You can supply any number of optional arguments.\n$status = 200;\n$headers = ['X-Foo' => 'Bar'];\n$body = 'hello!';\n$protocol = '1.1';\n$response = new Response($status, $headers, $body, $protocol);\n```\n\n----------------------------------------\n\nTITLE: Creating Streams with GuzzleHttp\\Psr7\\Utils::streamFor in PHP\nDESCRIPTION: Demonstrates how to create a stream from a string using GuzzleHttp\\Psr7\\Utils::streamFor method. The example shows reading from the stream, getting contents, checking if the stream has reached the end, and getting the current position.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$stream = Psr7\\Utils::streamFor('string data');\necho $stream;\n// string data\necho $stream->read(3);\n// str\necho $stream->getContents();\n// ing data\nvar_export($stream->eof());\n// true\nvar_export($stream->tell());\n// 11\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Cookies in a Guzzle Cookie Jar\nDESCRIPTION: Shows how to manually set cookies into a Guzzle cookie jar using the fromArray method, and how to retrieve cookie values and properties.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$jar = \\GuzzleHttp\\Cookie\\CookieJar::fromArray(\n    [\n        'some_cookie' => 'foo',\n        'other_cookie' => 'barbaz1234'\n    ],\n    'example.org'\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$cookie = $jar->getCookieByName('some_cookie');\n\n$cookie->getValue(); // 'foo'\n$cookie->getDomain(); // 'example.org'\n$cookie->getExpires(); // expiration date as a Unix timestamp\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Header Values from PSR-7 Messages\nDESCRIPTION: Demonstrates how to retrieve values for a specific header using getHeader() method, which returns an array of values. Also shows that retrieving a non-existent header returns an empty array.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request->getHeader('X-Foo'); // ['bar']\n\n// Retrieving a missing header returns an empty array.\n$request->getHeader('X-Bar'); // []\n```\n\n----------------------------------------\n\nTITLE: Creating Streams from Iterators in PHP using GuzzleHttp\\Psr7\nDESCRIPTION: Shows how to create a stream from an iterator using GuzzleHttp\\Psr7\\Utils::streamFor. The example uses a generator function that yields a specified number of dots, then creates a stream from this iterator and reads from it.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$generator = function ($bytes) {\n    for ($i = 0; $i < $bytes; $i++) {\n        yield '.';\n    }\n};\n\n$iter = $generator(1024);\n$stream = Psr7\\Utils::streamFor($iter);\necho $stream->read(3); // ...\n```\n\n----------------------------------------\n\nTITLE: Working with Response Bodies\nDESCRIPTION: Shows different ways to work with response bodies including casting to a string, rewinding the body stream, and reading portions of the body.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$body = $response->getBody();\necho $body;\n// Cast to a string: { ... }\n$body->seek(0);\n// Rewind the body\n$body->read(1024);\n// Read bytes of the body\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex HTTP Headers with Guzzle\nDESCRIPTION: Demonstrates how to parse complex HTTP headers that contain key-value pairs (like Link headers) using Guzzle's Header::parse utility function.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$request = new Psr7\\Request('GET', '/', [\n    'Link' => '<http:/.../front.jpeg>; rel=\"front\"; type=\"image/jpeg\"'\n]);\n\n$parsed = Psr7\\Header::parse($request->getHeader('Link'));\nvar_export($parsed);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Metadata in PHP using GuzzleHttp\\Psr7\nDESCRIPTION: Demonstrates how to retrieve metadata from a stream using the getMetadata() method. The example shows creating a stream from a file resource, then accessing various metadata such as the URI, and checking if the stream is readable, writable, and seekable.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$resource = Psr7\\Utils::tryFopen('/path/to/file', 'r');\n$stream = Psr7\\Utils::streamFor($resource);\necho $stream->getMetadata('uri');\n// /path/to/file\nvar_export($stream->isReadable());\n// true\nvar_export($stream->isWritable());\n// false\nvar_export($stream->isSeekable());\n// true\n```\n\n----------------------------------------\n\nTITLE: Reading Data from PSR-7 Stream Bodies\nDESCRIPTION: Demonstrates how to read data incrementally from a PSR-7 stream using read() method and how to check if the end of the stream has been reached with eof().\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Stream\\Stream;\n$response = $client->request('GET', 'http://httpbin.org/get');\n\necho $response->getBody()->read(4);\necho $response->getBody()->read(4);\necho $response->getBody()->read(1024);\nvar_export($response->eof());\n```\n\n----------------------------------------\n\nTITLE: Guzzle 6.0 Middleware-Based Request Modification\nDESCRIPTION: Example showing the new middleware approach in Guzzle 6.0 for modifying requests. Uses handler stacks and PSR-7 immutable messages instead of event listeners.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Middleware;\n// Create a handler stack that has all of the default middlewares attached\n$handler = GuzzleHttp\\HandlerStack::create();\n// Push the handler onto the handler stack\n$handler->push(Middleware::mapRequest(function (RequestInterface $request) {\n    // Notice that we have to return a request object\n    return $request->withHeader('X-Foo', 'Bar');\n}));\n// Inject the handler into the client\n$client = new GuzzleHttp\\Client(['handler' => $handler]);\n```\n\n----------------------------------------\n\nTITLE: Using Guzzle Test Server for Integration Testing in PHP\nDESCRIPTION: Demonstrates how to use the Guzzle test server for integration testing of HTTP handlers. It shows enqueueing responses, making requests, and inspecting received requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/testing.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Psr7\\Response;\nuse GuzzleHttp\\Tests\\Server;\n\n// Start the server and queue a response\nServer::enqueue([\n    new Response(200, ['Content-Length' => 0])\n]);\n\n$client = new Client(['base_uri' => Server::$url]);\necho $client->request('GET', '/foo')->getStatusCode();\n// 200\n\nforeach (Server::received() as $response) {\n    echo $response->getStatusCode();\n}\n\nServer::flush();\necho count(Server::received());\n// 0\n```\n\n----------------------------------------\n\nTITLE: Tracking Redirects in Guzzle Requests\nDESCRIPTION: Demonstrates how to track redirect history in Guzzle by enabling the 'track_redirects' option. The example shows how to configure the client, make a request, and process the redirect history from response headers.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// First you configure Guzzle with redirect tracking and make a request\n$client = new Client([\n    RequestOptions::ALLOW_REDIRECTS => [\n        'max'             => 10,        // allow at most 10 redirects.\n        'strict'          => true,      // use \"strict\" RFC compliant redirects.\n        'referer'         => true,      // add a Referer header\n        'track_redirects' => true,\n    ],\n]);\n$initialRequest = '/redirect/3'; // Store the request URI for later use\n$response = $client->request('GET', $initialRequest); // Make your request\n\n// Retrieve both Redirect History headers\n$redirectUriHistory = $response->getHeader('X-Guzzle-Redirect-History')[0]; // retrieve Redirect URI history\n$redirectCodeHistory = $response->getHeader('X-Guzzle-Redirect-Status-History')[0]; // retrieve Redirect HTTP Status history\n\n// Add the initial URI requested to the (beginning of) URI history\narray_unshift($redirectUriHistory, $initialRequest);\n\n// Add the final HTTP status code to the end of HTTP response history\narray_push($redirectCodeHistory, $response->getStatusCode());\n\n// (Optional) Combine the items of each array into a single result set\n$fullRedirectReport = [];\nforeach ($redirectUriHistory as $key => $value) {\n    $fullRedirectReport[$key] = ['location' => $value, 'code' => $redirectCodeHistory[$key]];\n}\necho json_encode($fullRedirectReport);\n```\n\n----------------------------------------\n\nTITLE: Setting POST Fields and Files in Guzzle 4.0 (PHP)\nDESCRIPTION: Demonstrates how to set POST fields and add files to a request body using the new PostBody interface in Guzzle 4.0. This replaces the previous methods on the request object.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$request = $client->createRequest('POST', '/');\n$request->getBody()->setField('foo', 'bar');\n$request->getBody()->addFile(new PostFile('file_key', fopen('/path/to/content', 'r')));\n```\n\n----------------------------------------\n\nTITLE: Accessing the Host Component of Request URIs\nDESCRIPTION: Demonstrates how to access the host component of a request URI using the getHost() method of the UriInterface or via the Host header.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$request = new Request('GET', 'http://httpbin.org');\necho $request->getUri()->getHost(); // httpbin.org\necho $request->getHeader('Host'); // httpbin.org\n```\n\n----------------------------------------\n\nTITLE: Disabling Expect Header in Guzzle Requests\nDESCRIPTION: Shows how to disable the Expect: 100-Continue header in Guzzle requests to avoid 417 errors with servers that don't support this header. Demonstrates both per-request and client-wide configuration.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/faq.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$client = new GuzzleHttp\\Client();\n\n// Disable the expect header on a single request\n$response = $client->request('PUT', '/', ['expect' => false]);\n\n// Disable the expect header on all client requests\n$client = new GuzzleHttp\\Client(['expect' => false]);\n```\n\n----------------------------------------\n\nTITLE: Updated Client Request Handling in Guzzle 4.x\nDESCRIPTION: Demonstrates the changes in how HTTP requests are created and sent in Guzzle 4.x compared to 3.x. Shows both direct response retrieval and request object creation patterns.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// 3.0\n$request = $client->get('/');\n$response = $request->send();\n\n// 4.0\n$response = $client->get('/');\n\n// or, to mirror the previous behavior\n$request = $client->createRequest('GET', '/');\n$response = $client->send($request);\n```\n\n----------------------------------------\n\nTITLE: Connection Timeout in Guzzle - PHP\nDESCRIPTION: Setting connection timeout for requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Timeout if the client fails to connect to the server in 3.14 seconds.\n$client->request('GET', '/delay/5', ['connect_timeout' => 3.14]);\n```\n\n----------------------------------------\n\nTITLE: Creating Streaming Responses in Guzzle 4.0 (PHP)\nDESCRIPTION: Shows how to create a streaming response directly from a client in Guzzle 4.0, which returns a ResponseInterface object with a body stream referencing an open PHP HTTP stream.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $client->get('/', ['stream' => true]);\n// Read some data off of the stream in the response body\n$data = $response->getBody()->read(1024);\n```\n\n----------------------------------------\n\nTITLE: Cookie Handling in Guzzle - PHP\nDESCRIPTION: Configuring cookie behavior using the CookieJar interface.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$jar = new \\GuzzleHttp\\Cookie\\CookieJar();\n$client->request('GET', '/get', ['cookies' => $jar]);\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Options in Guzzle PHP\nDESCRIPTION: Demonstrates the new way to configure authentication in Guzzle, replacing the deprecated CurlAuthPlugin with configuration options.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$client->getConfig()->setPath('request.options/auth', array('user', 'pass', 'Basic|Digest|NTLM|Any'));\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->setDefaultOption('auth', array('user', 'pass', 'Basic|Digest|NTLM|Any'));\n```\n\n----------------------------------------\n\nTITLE: Examining HTTP Response Components\nDESCRIPTION: Demonstrates how to access various components of an HTTP response including status code, reason phrase, and protocol version using PSR-7 methods.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$client = new \\GuzzleHttp\\Client();\n$response = $client->request('GET', 'http://httpbin.org/get');\n\necho $response->getStatusCode(); // 200\necho $response->getReasonPhrase(); // OK\necho $response->getProtocolVersion(); // 1.1\n```\n\n----------------------------------------\n\nTITLE: Native Function Calls Change in Guzzle 7.0\nDESCRIPTION: Example showing how native function calls have been prefixed with a backslash in Guzzle 7.0 to prevent method overloading by other libraries.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Before:\ncurl_version();\n\n// After:\n\\curl_version();\n```\n\n----------------------------------------\n\nTITLE: Checking for HTTP Headers in PSR-7 Messages\nDESCRIPTION: Shows how to check if a request or response has a specific header using the hasHeader() method provided by PSR-7 message interfaces.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$request = new Psr7\\Request('GET', '/', ['X-Foo' => 'bar']);\n\nif ($request->hasHeader('X-Foo')) {\n    echo 'It is there';\n}\n```\n\n----------------------------------------\n\nTITLE: Guzzle 5.0 Event-Based Request Modification\nDESCRIPTION: Example of how request modification was performed in Guzzle 5.0 using the event system, where listeners could modify requests through event callbacks.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Event\\BeforeEvent;\n$client = new GuzzleHttp\\Client();\n// Get the emitter and listen to the before event.\n$client->getEmitter()->on('before', function (BeforeEvent $e) {\n    // Guzzle v5 events relied on mutation\n    $e->getRequest()->setHeader('X-Foo', 'Bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Headers in PSR-7 Messages\nDESCRIPTION: Shows how to iterate through all headers in a PSR-7 message using the getHeaders() method, which returns an associative array of header names to arrays of values.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nforeach ($request->getHeaders() as $name => $values) {\n    echo $name . ': ' . implode(', ', $values) . \"\\r\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Event Listener Functions in Guzzle\nDESCRIPTION: Shows the transition from addListener() to on() method for adding event listeners in Guzzle 4.x. Includes signature changes for event handling functions.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// 3.x\n$request->getEventDispatcher()->addListener('foo', function (Event $event) { /* ... */ } );\n// 4.x\n$request->getEmitter()->on('foo', function (Event $event, $name) { /* ... */ } );\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle via Composer Command\nDESCRIPTION: Command to install Guzzle as a project dependency using Composer.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/overview.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require guzzlehttp/guzzle:^7.0\n```\n\n----------------------------------------\n\nTITLE: HTTP Protocol Version Selection in Guzzle PHP\nDESCRIPTION: Shows how to specify the HTTP protocol version to use for the request using the version option.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// Force HTTP/1.0\n$request = $client->request('GET', '/get', ['version' => 1.0]);\n```\n\n----------------------------------------\n\nTITLE: IP Protocol Version Control in Guzzle\nDESCRIPTION: Examples showing how to force IPv4 or IPv6 protocol usage for HTTP requests.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Force ipv4 protocol\n$client->request('GET', '/foo', ['force_ip_resolve' => 'v4']);\n\n// Force ipv6 protocol\n$client->request('GET', '/foo', ['force_ip_resolve' => 'v6']);\n```\n\n----------------------------------------\n\nTITLE: Declaring Guzzle as Composer Dependency\nDESCRIPTION: JSON configuration to specify Guzzle as a project dependency in composer.json file.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/overview.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n     \"guzzlehttp/guzzle\": \"^7.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate Authority File in PHP ini for Guzzle HTTPS Requests\nDESCRIPTION: The openssl.cafile ini setting specifies the path to a CA (Certificate Authority) file in PEM format. Guzzle uses this setting when making HTTPS requests to verify the authenticity of remote servers.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/quickstart.rst#2025-04-22_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nopenssl.cafile\n```\n\n----------------------------------------\n\nTITLE: Installing Composer for Guzzle\nDESCRIPTION: Command to install the Composer dependency management tool, which is required to install Guzzle.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/overview.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n```\n\n----------------------------------------\n\nTITLE: Creating and Examining Request URIs\nDESCRIPTION: Shows how to create requests with URIs provided as strings, and how to access the scheme component of the URI using the PSR-7 UriInterface methods.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->request('GET', 'http://httpbin.org/get?q=foo');\n\n$request = new Request('GET', 'http://httpbin.org');\necho $request->getUri()->getScheme(); // http\necho $request->getUri(); // http://httpbin.org\n```\n\n----------------------------------------\n\nTITLE: Including Guzzle Autoloader\nDESCRIPTION: PHP code to include Composer's autoloader after installing Guzzle.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/overview.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Requests with Custom Methods\nDESCRIPTION: Shows how to create requests with custom HTTP methods beyond the standard ones defined in RFC 7231, such as a MOVE request.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Create a request using a completely custom HTTP method\n$request = new \\GuzzleHttp\\Psr7\\Request('MOVE', 'http://httpbin.org/move');\n\necho $request->getMethod();\n// MOVE\n```\n\n----------------------------------------\n\nTITLE: Manipulating Port Settings on Request Objects\nDESCRIPTION: The setPort() and getPort() methods on RequestInterface allow manipulating the port used for HTTP requests. These methods were added in version 4.1.0.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nGuzzleHttp\\Message\\RequestInterface::setPort()\nGuzzleHttp\\Message\\RequestInterface::getPort()\n```\n\n----------------------------------------\n\nTITLE: Working with Query Strings in Request URIs\nDESCRIPTION: Shows how to access the query string component of a request URI using the getQuery() method of the UriInterface, including automatic filtering of query characters.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$request = new Request('GET', 'http://httpbin.org/?foo=bar');\necho $request->getUri()->getQuery(); // foo=bar\n```\n\n----------------------------------------\n\nTITLE: Migrating Command Configuration in Guzzle PHP\nDESCRIPTION: Shows how to update deprecated command configuration options to the new request options format in Guzzle.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$command = $client->getCommand('foo', array(\n    'command.headers' => array('Test' => '123'),\n    'command.response_body' => '/path/to/file'\n));\n\n// Should be changed to:\n\n$command = $client->getCommand('foo', array(\n    'command.request_options' => array(\n        'headers' => array('Test' => '123'),\n        'save_as' => '/path/to/file'\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Working with Ports in Request URIs\nDESCRIPTION: Shows how to access the port component of a request URI when using non-standard ports with the getPort() method of the UriInterface.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request = new Request('GET', 'http://httpbin.org:8080');\necho $request->getUri()->getPort(); // 8080\necho $request->getUri(); // http://httpbin.org:8080\n```\n\n----------------------------------------\n\nTITLE: Migrating ServiceDescription Command Methods\nDESCRIPTION: Shows the migration from using 'Command' terminology to 'Operation' terminology in the ServiceDescription class. Methods for getting, checking, and adding operations have been renamed.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$sd = new ServiceDescription();\n$sd->getCommands();     // @returns ApiCommandInterface[]\n$sd->hasCommand($name);\n$sd->getCommand($name); // @returns ApiCommandInterface|null\n$sd->addCommand($command); // @param ApiCommandInterface $command\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$sd = new ServiceDescription();\n$sd->getOperations();           // @returns OperationInterface[]\n$sd->hasOperation($name);\n$sd->getOperation($name);       // @returns OperationInterface|null\n$sd->addOperation($operation);  // @param OperationInterface $operation\n```\n\n----------------------------------------\n\nTITLE: IDN Conversion in Guzzle\nDESCRIPTION: Examples of handling Internationalized Domain Names (IDN) in requests, showing how to enable/disable automatic IDN conversion.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/request-options.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', 'https://яндекс.рф');\n// яндекс.рф is translated to xn--d1acpjx3f.xn--p1ai before passing it to the handler\n\n$res = $client->request('GET', 'https://яндекс.рф', ['idn_conversion' => false]);\n// The domain part (яндекс.рф) stays unmodified\n```\n\n----------------------------------------\n\nTITLE: Migrating LogPlugin Usage\nDESCRIPTION: Demonstrates changes in logging implementation, moving from verbosity levels to message formatting. Shows updated namespace and configuration approach for the LogPlugin.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Log\\ClosureLogAdapter;\nuse Guzzle\\Http\\Plugin\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $verbosity is an integer indicating desired message verbosity level\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $verbosity = LogPlugin::LOG_VERBOSE);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Log\\ClosureLogAdapter;\nuse Guzzle\\Log\\MessageFormatter;\nuse Guzzle\\Plugin\\Log\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $format is a string indicating desired message format -- @see MessageFormatter\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $format = MessageFormatter::DEBUG_FORMAT);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects in Guzzle 4.0 (PHP)\nDESCRIPTION: Demonstrates how to configure redirects using the new 'allow_redirects' request option in Guzzle 4.0, replacing the previous configureRedirects() method.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// Standard redirects with a default of a max of 5 redirects\n$request = $client->createRequest('GET', '/', ['allow_redirects' => true]);\n\n// Strict redirects with a custom number of redirects\n$request = $client->createRequest('GET', '/', [\n    'allow_redirects' => ['max' => 5, 'strict' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings in Guzzle PHP\nDESCRIPTION: This snippet shows how to enable E_USER_DEPRECATED warnings to detect usage of deprecated methods in Guzzle 3.6 to 3.7.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\\Guzzle\\Common\\Version::$emitWarnings = true;\n```\n\n----------------------------------------\n\nTITLE: Updating Event Listener Attachment in Guzzle 4.x\nDESCRIPTION: Example showing how to migrate event listener attachment from Guzzle 3.x to 4.x syntax. Demonstrates the change from EventDispatcher to Emitter pattern.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$mock = new Mock();\n// 3.x\n$request->getEventDispatcher()->addSubscriber($mock);\n$request->getEventDispatcher()->removeSubscriber($mock);\n// 4.x\n$request->getEmitter()->attach($mock);\n$request->getEmitter()->detach($mock);\n```\n\n----------------------------------------\n\nTITLE: Using Inspector for Configuration Validation Before Guzzle 3.x in PHP\nDESCRIPTION: Example showing how to use Guzzle\\Service\\Inspector to validate client configuration before Guzzle 3.x.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Inspector;\n\nclass YourClient extends \\Guzzle\\Service\\Client\n{\n    public static function factory($config = array())\n    {\n        $default = array();\n        $required = array('base_url', 'username', 'api_key');\n        $config = Inspector::fromConfig($config, $default, $required);\n\n        $client = new self(\n            $config->get('base_url'),\n            $config->get('username'),\n            $config->get('api_key')\n        );\n        $client->setConfig($config);\n\n        $client->setDescription(ServiceDescription::factory(__DIR__ . DIRECTORY_SEPARATOR . 'client.json'));\n\n        return $client;\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle Test Server via Composer\nDESCRIPTION: Provides instructions for installing the Guzzle test server as a development dependency using Composer. This server is used for integration testing of HTTP handlers.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/testing.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev guzzlehttp/test-server:^0.1\n```\n\n----------------------------------------\n\nTITLE: Using Collection for Configuration Validation in Guzzle 3.x in PHP\nDESCRIPTION: Example showing how to use Guzzle\\Common\\Collection to validate client configuration in Guzzle 3.x and later.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Collection;\n\nclass YourClient extends \\Guzzle\\Service\\Client\n{\n    public static function factory($config = array())\n    {\n        $default = array();\n        $required = array('base_url', 'username', 'api_key');\n        $config = Collection::fromConfig($config, $default, $required);\n\n        $client = new self(\n            $config->get('base_url'),\n            $config->get('username'),\n            $config->get('api_key')\n        );\n        $client->setConfig($config);\n\n        $client->setDescription(ServiceDescription::factory(__DIR__ . DIRECTORY_SEPARATOR . 'client.json'));\n\n        return $client;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Guzzle Test Server as a Dev Dependency in composer.json\nDESCRIPTION: Shows how to include the Guzzle test server as a development dependency in a project's composer.json file.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/testing.rst#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require-dev\": {\n        \"guzzlehttp/test-server\": \"^0.1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Path Changes in Guzzle 3.2 - Before Example in PHP\nDESCRIPTION: Example showing how URLs had a default path value of '/' in versions prior to 3.2 if no path was specified.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get('http://www.foo.com');\necho $request->getUrl();\n// >> http://www.foo.com/\n```\n\n----------------------------------------\n\nTITLE: Migrating ExponentialBackoffPlugin Usage\nDESCRIPTION: Shows changes in the backoff plugin implementation, moving from direct instantiation to factory method usage. Includes updated namespace and configuration options.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Plugin\\ExponentialBackoffPlugin;\n\n$backoffPlugin = new ExponentialBackoffPlugin($maxRetries, array_merge(\n        ExponentialBackoffPlugin::getDefaultFailureCodes(), array(429)\n    ));\n\n$client->addSubscriber($backoffPlugin);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\Backoff\\BackoffPlugin;\nuse Guzzle\\Plugin\\Backoff\\HttpBackoffStrategy;\n\n// Use convenient factory method instead -- see implementation for ideas of what\n// you can do with chaining backoff strategies\n$backoffPlugin = BackoffPlugin::getExponentialBackoff($maxRetries, array_merge(\n        HttpBackoffStrategy::getDefaultFailureCodes(), array(429)\n    ));\n$client->addSubscriber($backoffPlugin);\n```\n\n----------------------------------------\n\nTITLE: Converting XML Service Description to JSON Format\nDESCRIPTION: Shows the transformation of a Zendesk API service description from XML format to JSON format. The XML defines API endpoints for group operations while the JSON provides a more structured representation with additional metadata.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<client>\n    <commands>\n        <!-- Groups -->\n        <command name=\"list_groups\" method=\"GET\" uri=\"groups.json\">\n            <doc>Get a list of groups</doc>\n        </command>\n        <command name=\"search_groups\" method=\"GET\" uri='search.json?query=\"{{query}} type:group\"'>\n            <doc>Uses a search query to get a list of groups</doc>\n            <param name=\"query\" type=\"string\" required=\"true\" />\n        </command>\n        <command name=\"create_group\" method=\"POST\" uri=\"groups.json\">\n            <doc>Create a group</doc>\n            <param name=\"data\" type=\"array\" location=\"body\" filters=\"json_encode\" doc=\"Group JSON\"/>\n            <param name=\"Content-Type\" location=\"header\" static=\"application/json\"/>\n        </command>\n        <command name=\"delete_group\" method=\"DELETE\" uri=\"groups/{{id}}.json\">\n            <doc>Delete a group by ID</doc>\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n        </command>\n        <command name=\"get_group\" method=\"GET\" uri=\"groups/{{id}}.json\">\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n        </command>\n        <command name=\"update_group\" method=\"PUT\" uri=\"groups/{{id}}.json\">\n            <doc>Update a group</doc>\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n            <param name=\"data\" type=\"array\" location=\"body\" filters=\"json_encode\" doc=\"Group JSON\"/>\n            <param name=\"Content-Type\" location=\"header\" static=\"application/json\"/>\n        </command>\n    </commands>\n</client>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\":       \"Zendesk REST API v2\",\n    \"apiVersion\": \"2012-12-31\",\n    \"description\":\"Provides access to Zendesk views, groups, tickets, ticket fields, and users\",\n    \"operations\": {\n        \"list_groups\":  {\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"groups.json\",\n            \"summary\":   \"Get a list of groups\"\n        },\n        \"search_groups\":{\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"search.json?query=\\\"{query} type:group\\\"\",\n            \"summary\":   \"Uses a search query to get a list of groups\",\n            \"parameters\":{\n                \"query\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Zendesk Search Query\",\n                    \"type\":       \"string\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"create_group\": {\n            \"httpMethod\":\"POST\",\n            \"uri\":       \"groups.json\",\n            \"summary\":   \"Create a group\",\n            \"parameters\":{\n                \"data\":        {\n                    \"type\":       \"array\",\n                    \"location\":   \"body\",\n                    \"description\":\"Group JSON\",\n                    \"filters\":    \"json_encode\",\n                    \"required\":   true\n                },\n                \"Content-Type\":{\n                    \"type\":    \"string\",\n                    \"location\":\"header\",\n                    \"static\":  \"application/json\"\n                }\n            }\n        },\n        \"delete_group\": {\n            \"httpMethod\":\"DELETE\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Delete a group\",\n            \"parameters\":{\n                \"id\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to delete by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"get_group\":    {\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Get a ticket\",\n            \"parameters\":{\n                \"id\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to get by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"update_group\": {\n            \"httpMethod\":\"PUT\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Update a group\",\n            \"parameters\":{\n                \"id\":          {\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to update by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                },\n                \"data\":        {\n                    \"type\":       \"array\",\n                    \"location\":   \"body\",\n                    \"description\":\"Group JSON\",\n                    \"filters\":    \"json_encode\",\n                    \"required\":   true\n                },\n                \"Content-Type\":{\n                    \"type\":    \"string\",\n                    \"location\":\"header\",\n                    \"static\":  \"application/json\"\n                }\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bleeding Edge Version\nDESCRIPTION: JSON configuration to use the latest development version of Guzzle from the master branch.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/overview.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"require\": {\n      \"guzzlehttp/guzzle\": \"^7.0@dev\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Guzzle Configuration Options with reStructuredText\nDESCRIPTION: A list of reStructuredText cross-references to various Guzzle HTTP client configuration options documentation. These references likely point to sections explaining how to configure request parameters like sink (for response storage), timeout settings, SSL key configuration, streaming options, and SSL verification settings.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/handlers-and-middleware.rst#2025-04-22_snippet_9\n\nLANGUAGE: markup\nCODE:\n```\n- :ref:`sink-option`\n- :ref:`timeout-option`\n- :ref:`ssl_key-option`\n- :ref:`stream-option`\n- :ref:`verify-option`\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom CurlMulti Object Into Clients Using Event Listener in PHP\nDESCRIPTION: Code example showing how to reuse the same CurlMulti object across multiple clients by adding a listener to the ServiceBuilder's service_builder.create_client event.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$multi = new Guzzle\\Http\\Curl\\CurlMulti();\n$builder = Guzzle\\Service\\Builder\\ServiceBuilder::factory('/path/to/config.json');\n$builder->addListener('service_builder.create_client', function ($event) use ($multi) {\n    $event['client']->setCurlMulti($multi);\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Running Guzzle Tests\nDESCRIPTION: Commands to clone the Guzzle repository and run its test suite using Composer and Make.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/overview.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/guzzle/guzzle.git\ncd guzzle && composer install\nmake test\n```\n\n----------------------------------------\n\nTITLE: URL Path Changes in Guzzle 3.2 - After Example in PHP\nDESCRIPTION: Example showing how URLs no longer have a default path value of '/' in Guzzle 3.2+ if no path was specified.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/UPGRADING.md#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get('http://www.foo.com');\necho $request->getUrl();\n// >> http://www.foo.com\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Dependencies with Version Constraints\nDESCRIPTION: This requirements file specifies the exact version ranges for packages needed to build Guzzle's documentation. It pins Sphinx to v1.3.x, the Guzzle Sphinx theme to v0.7.x, and sets upper version limits for Jinja2 and MarkupSafe to prevent compatibility issues.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSphinx>=1.3.0,<1.4.0\nguzzle_sphinx_theme>=0.7.0,<0.8.0\njinja2<3\nmarkupsafe<2.1\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Headers Output Example\nDESCRIPTION: Shows the structure of the output when parsing a complex Link header, demonstrating how the parser organizes the link URL and its associated attributes.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\narray (\n  0 =>\n  array (\n    0 => '<http:/.../front.jpeg>',\n    'rel' => 'front',\n    'type' => 'image/jpeg',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Path Component of Request URIs\nDESCRIPTION: Demonstrates how to access the path component of a request URI using the getPath() method of the UriInterface, showing automatic filtering of path characters.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/docs/psr7.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request = new Request('GET', 'http://httpbin.org/get');\necho $request->getUri()->getPath(); // /get\n```\n\n----------------------------------------\n\nTITLE: Documenting Template Syntax Change\nDESCRIPTION: Breaking change notification showing the transition from double curly braces to single curly braces for command and UriTemplates injection syntax.\nSOURCE: https://github.com/guzzle/guzzle/blob/7.9/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n\"{{ }}\" -> \"{}\"\n```"
  }
]