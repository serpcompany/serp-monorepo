[
  {
    "owner": "yarnpkg",
    "repo": "website",
    "content": "TITLE: Installing All Dependencies with Yarn\nDESCRIPTION: This command installs all dependencies for a project as specified in the package.json file. It's typically used after checking out code or when another developer has added new dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/installing-dependencies.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Name in package.json\nDESCRIPTION: Defines the 'name' field in package.json, which is used in URLs, command line arguments, and as the directory name inside node_modules. The name must follow specific rules and should be descriptive.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Yarn Package with Git\nDESCRIPTION: Commands to create a new git repository and initialize a Yarn package. This creates a project directory, enters it, and runs the Yarn init command to start the interactive setup process.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/creating-a-package.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit init my-new-project\ncd my-new-project\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Yarn Project\nDESCRIPTION: Starts a new project by creating a package.json file with basic project information. This command will prompt you for project details such as name, version, description, and entry point.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/usage.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Initializing Yarn Project\nDESCRIPTION: Command to start the interactive Yarn project creation process. This opens a form to configure basic project settings.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/creating-a-project.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts in package.json\nDESCRIPTION: Uses the 'scripts' field to define runnable scripts for automating tasks related to the package, which can be executed using 'yarn run <script>'.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build-project\": \"node build-project.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependencies with Yarn\nDESCRIPTION: Basic command for adding a new package dependency to a project using Yarn. Updates both package.json and yarn.lock files.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add [package]\n```\n\n----------------------------------------\n\nTITLE: Package Configuration File Reference - JSON\nDESCRIPTION: Reference to the package.json file that contains package metadata and configuration. This file is essential for describing a package's properties and dependencies in the Yarn ecosystem.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\npackage.json\n```\n\n----------------------------------------\n\nTITLE: Basic package.json Structure\nDESCRIPTION: Shows a basic package.json file generated by yarn init. This includes fundamental fields like name, version, description, main entry point, repository information, author, and license.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/creating-a-package.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-new-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My New Project description.\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"url\": \"https://example.com/your-username/my-new-project\",\n    \"type\": \"git\"\n  },\n  \"author\": \"Your Name <you@example.com>\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Version Ranges in package.json\nDESCRIPTION: Demonstrates how to specify dependency version ranges in a package.json file using different operators including range comparators (>=, <), caret (^), and tilde (~) operators. Each syntax indicates different acceptable version constraints for dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/dependency-versions.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"package-1\": \">=2.0.0 <3.1.4\",\n    \"package-2\": \"^0.4.2\",\n    \"package-3\": \"~2.7.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Structure of a yarn.lock File in YAML\nDESCRIPTION: This snippet shows the typical structure of a yarn.lock file. It includes package versions, resolved URLs, and nested dependencies. The file is auto-generated and should not be edited manually.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarn-lock.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\npackage-1@^1.0.0:\n  version \"1.0.3\"\n  resolved \"https://registry.npmjs.org/package-1/-/package-1-1.0.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\"\npackage-2@^2.0.0:\n  version \"2.0.1\"\n  resolved \"https://registry.npmjs.org/package-2/-/package-2-2.0.1.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\"\n  dependencies:\n    package-4 \"^4.0.0\"\npackage-3@^3.0.0:\n  version \"3.1.9\"\n  resolved \"https://registry.npmjs.org/package-3/-/package-3-3.1.9.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\"\n  dependencies:\n    package-4 \"^4.5.0\"\npackage-4@^4.0.0, package-4@^4.5.0:\n  version \"4.6.3\"\n  resolved \"https://registry.npmjs.org/package-4/-/package-4-2.6.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\"\n```\n\n----------------------------------------\n\nTITLE: Marking Package as Private in package.json for Yarn\nDESCRIPTION: Sets the 'private' flag to true, preventing the package from being published to a package manager. This is useful for internal or non-distributable packages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Essential Files for Yarn Package Version Control\nDESCRIPTION: List of required files that must be checked into source control for a Yarn package to be manageable by others. These include package.json for dependency definitions, yarn.lock for exact version locking, and the package source code.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/version-control.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `package.json`: This has all the current dependencies for your package.\n- `yarn.lock`: This stores the exact versions of each dependency for your package.\n- The actual source code that provides the functionality for your package.\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Yarn in JavaScript\nDESCRIPTION: Example configuration for a package.json file in a Yarn project. It includes basic package information such as name, version, main entry point, and dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"pet-kitten\",\n  \"version\": \"0.1.0\",\n  \"main\": \"pet.js\",\n  \"dependencies\": {\n    \"hand\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Yarn\nDESCRIPTION: Adds a package to your dependencies in package.json and installs it. Supports specifying exact versions or version tags, allowing for precise dependency management.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/usage.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add [package]\nyarn add [package]@[version]\nyarn add [package]@[tag]\n```\n\n----------------------------------------\n\nTITLE: Publishing a Package with Yarn\nDESCRIPTION: Command to publish a package to the npm registry using Yarn. This will prompt for a new version and npm password during the publishing process.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/publishing-a-package.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn publish\n```\n\n----------------------------------------\n\nTITLE: Example Package.json Configuration\nDESCRIPTION: Sample package.json file generated after running yarn init. Contains basic project metadata including name, version, description, entry point, repository information, author, and license.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/creating-a-project.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-new-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My New Project description.\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"url\": \"https://example.com/your-username/my-new-project\",\n    \"type\": \"git\"\n  },\n  \"author\": \"Your Name <you@example.com>\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package Resolution Configuration in JSON\nDESCRIPTION: Example of the resolutions field in package.json that specifies exact versions for packages when using yarn install --flat. This configuration ensures only one version of each listed package is installed.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/install.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"package-a\": \"2.0.0\",\n  \"package-b\": \"5.0.0\",\n  \"package-c\": \"1.5.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into npm with Yarn\nDESCRIPTION: Command to log into npm using Yarn. This will prompt for username and email but not password, as Yarn doesn't store passwords or sessions.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/publishing-a-package.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn login\n```\n\n----------------------------------------\n\nTITLE: Specifying Production Dependencies\nDESCRIPTION: Uses the 'dependencies' field to list packages required for both development and production, specifying version constraints.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"package-1\": \"^3.1.4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Security Audit\nDESCRIPTION: Shows how to use the '--audit' flag with 'yarn add' to check for known security issues with the installed packages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/add.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn add <package...> --audit\n```\n\n----------------------------------------\n\nTITLE: Extended package.json with Additional Fields\nDESCRIPTION: Demonstrates additional useful fields for a more comprehensive package.json. Includes keywords, homepage, bugs reporting URL, contributors list, files to include, and binary command configuration.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/creating-a-package.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-new-project\",\n  \"...\": \"...\",\n  \"keywords\": [\"cool\", \"useful\", \"stuff\"],\n  \"homepage\": \"https://my-new-project-website.com\",\n  \"bugs\": \"https://github.com/you/my-new-project/issues\",\n  \"contributors\": [\n    \"Your Friend <their-email@example.com> (https://their-website.com)\",\n    \"Another Friend <another-email@example.com> (https://another-website.org)\"\n  ],\n  \"files\": [\"index.js\", \"lib/*.js\", \"bin/*.js\"],\n  \"bin\": {\n    \"my-new-project-cli\": \"bin/my-new-project-cli.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Linked Package Example\nDESCRIPTION: Shows how to consume a previously linked React package in the React-Relay project by creating a symlink in its node_modules directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/link.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cd ../react-relay\n$ yarn link react\nyarn link vx.x.x\nsuccess Registered \"react\".\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies\nDESCRIPTION: Uses the 'devDependencies' field to specify packages only required during development, which won't be installed in production.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"package-2\": \"^0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Dependency Tree with Yarn\nDESCRIPTION: The '--verify-tree' option recursively checks that dependencies listed in package.json are present in node_modules with the correct versions. This check does not consider the yarn.lock file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/check.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n##### `yarn check --verify-tree`\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Information in package.json\nDESCRIPTION: Shows how to configure the repository, homepage, and bugs URLs in package.json for code sharing. This helps users find the source code, report issues, and learn more about the project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/creating-a-package.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"https://github.com/username/my-new-project\",\n  \"bugs\": \"https://github.com/username/my-new-project/issues\",\n  \"repository\": {\n    \"url\": \"https://github.com/username/my-new-project\",\n    \"type\": \"git\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependency Configuration for a React Plugin\nDESCRIPTION: An example of incorrect package.json configuration for a React plugin that uses regular dependencies instead of peer dependencies, which can lead to duplicate React instances in the dependency tree.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-04-18-dependencies-done-right.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-plugin\",\n  \"dependencies\": {\n    \"react\": \"^16.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Peer Dependencies\nDESCRIPTION: Uses the 'peerDependencies' field to state compatibility of the package with specific versions of other packages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"package-3\": \"^2.7.18\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Executable Files for Package\nDESCRIPTION: Uses the 'bin' field in package.json to specify executable files that should be installed with the package, either as a single file or multiple commands.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bin\": \"bin.js\",\n  \"bin\": {\n    \"command-name\": \"bin/command-name.js\",\n    \"other-command\": \"bin/other-command\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Version in package.json\nDESCRIPTION: Sets the 'version' field in package.json, which specifies the current version of the package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Root package.json with nohoist Configuration\nDESCRIPTION: This example shows a complete package.json file for a monorepo root project, including the workspaces configuration with nohoist rules for react-native.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-02-15-nohoist.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// monorepo's package.json\n{\n  \"name\": \"monorepo\",\n  \"private\": true,\n  \"workspaces\": {\n    \"packages\": [\"packages/*\"],\n    \"nohoist\": [\"**/react-native\", \"**/react-native/**\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Different Dependency Types in package.json\nDESCRIPTION: An example package.json file showing how to define different types of dependencies including normal dependencies, development dependencies, peer dependencies, and optional dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/dependency-types.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"dependencies\": {\n    \"package-a\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"package-b\": \"^1.2.1\"\n  },\n  \"peerDependencies\": {\n    \"package-c\": \"^2.5.4\"\n  },\n  \"optionalDependencies\": {\n    \"package-d\": \"^3.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Existing package.json Example\nDESCRIPTION: This JSON snippet demonstrates an existing package.json file that can be used as a basis for the 'yarn init' command. It shows how existing values are used as defaults in the interactive session.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-existing-package\",\n  \"version\": \"0.1\",\n  \"description\": \"I exist therefore I am.\",\n  \"repository\": {\n    \"url\": \"https://github.com/yarnpkg/example-yarn-package\",\n    \"type\": \"git\"\n  },\n  \"license\": \"BSD-2-Clause\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Yarn Create Command for Project Initialization\nDESCRIPTION: Examples of using the new 'yarn create' command to initialize projects for React, React Native, and Next.js. The command automatically installs or updates the required package and runs its executable.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-05-12-introducing-yarn.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create react-app my-app\nyarn create react-native-app my-app\nyarn create next-app my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn Lockfile Generation\nDESCRIPTION: Demonstrates that running yarn install automatically generates the lockfile without needing a separate lockfile command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/lockfile.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Basic Yarn Upgrade Commands for Package Dependencies\nDESCRIPTION: Examples of basic upgrade commands including upgrading all dependencies, specific packages, packages with version constraints, and scoped packages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/upgrade.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade\nyarn upgrade left-pad\nyarn upgrade left-pad@^1.0.0\nyarn upgrade left-pad grunt\nyarn upgrade @angular\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Dependency Tree Resolution in JavaScript\nDESCRIPTION: This function recursively resolves package dependencies, creating a tree structure where each package is a node containing its own dependencies. It uses async/await for asynchronous operations.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getPackageDependencyTree({ name, reference, dependencies }) {\n  return {\n    name,\n    reference,\n    dependencies: await Promise.all(\n      dependencies.map(async volatileDependency => {\n        let pinnedDependency = await getPinnedReference(volatileDependency);\n        let subDependencies = await getPackageDependencies(pinnedDependency);\n\n        return await getPackageDependencyTree(\n          Object.assign({}, pinnedDependency, { dependencies: subDependencies })\n        );\n      })\n    ),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initial package.json example for version command\nDESCRIPTION: A basic package.json file showing the starting version that will be updated with the yarn version command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"example-yarn-package\",\n  \"version\": \"1.0.1\",\n  \"description\": \"An example package to demonstrate Yarn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Folder in .yarnrc\nDESCRIPTION: Configures a custom location for Yarn's cache folder, which affects where yarn stores cached packages. This example demonstrates the syntax and shows the output of checking the cache directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n--cache-folder /tmp/yarn-cache/\n```\n\n----------------------------------------\n\nTITLE: Installing a Global Package with Yarn\nDESCRIPTION: This snippet demonstrates how to install a package (nodemon) globally using Yarn and specifies a custom prefix for the installation location. It also shows how to verify the installation and run the globally installed package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/global.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn global add nodemon --prefix /usr/local\n# the `nodemon` command is now available globally:\n$ which nodemon\n$ /usr/local/bin/nodemon\n$ nodemon\n```\n\n----------------------------------------\n\nTITLE: Removing Packages with Yarn CLI\nDESCRIPTION: Command to remove one or more packages from project dependencies. This will update both package.json and yarn.lock files, and the changes can be synchronized across team members using yarn install.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/remove.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove <package...>\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove foo\n```\n\n----------------------------------------\n\nTITLE: Defining Main Entry Point for Package\nDESCRIPTION: Sets the 'main' field in package.json to specify the primary entry point for the package's functionality.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"filename.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Yarn Init Command\nDESCRIPTION: This snippet demonstrates how to run the 'yarn init' command in a directory named 'testdir'. It shows the interactive prompts and user inputs for creating a package.json file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn init\n```\n\nLANGUAGE: sh\nCODE:\n```\nquestion name (testdir): my-awesome-package\nquestion version (1.0.0):\nquestion description: The best package you will ever find.\nquestion entry point (index.js):\nquestion git repository: https://github.com/yarnpkg/example-yarn-package\nquestion author: Yarn Contributor\nquestion license (MIT):\nquestion private:\nsuccess Saved package.json\n✨  Done in 87.70s.\n```\n\n----------------------------------------\n\nTITLE: Executing yarn import command in Shell\nDESCRIPTION: This command runs 'yarn import' to generate a yarn.lock file from an existing npm package-lock.json or node_modules folder. It helps in migrating projects from npm to Yarn.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/import.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn import\n```\n\n----------------------------------------\n\nTITLE: Running Yarn on an existing npm project\nDESCRIPTION: The basic command to initialize Yarn on an existing npm project. This command will install all dependencies listed in the package.json file and generate a yarn.lock file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/migrating-from-npm.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Specifying Files to Include in Package\nDESCRIPTION: Uses the 'files' field in package.json to list files and directories that should be included when the package is published, supporting wildcards.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\"filename.js\", \"directory/\", \"glob/*.{js,json}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Tree Optimization Algorithm\nDESCRIPTION: Implementation of a Divide & Conquer algorithm to optimize the package dependency tree by reducing duplicates while maintaining Node's resolution algorithm compatibility.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction optimizePackageTree({ name, reference, dependencies }) {\n  dependencies = dependencies.map(dependency => {\n    return optimizePackageTree(dependency);\n  });\n\n  for (let hardDependency of dependencies.slice()) {\n    for (let subDependency of hardDependency.dependencies.slice()) {\n      let availableDependency = dependencies.find(dependency => {\n        return dependency.name === subDependency.name;\n      });\n\n      if (!availableDependency.length) dependencies.push(subDependency);\n\n      if (\n        !availableDependency ||\n        availableDependency.reference === subDependency.reference\n      ) {\n        hardDependency.dependencies.splice(\n          hardDependency.dependencies.findIndex(dependency => {\n            return dependency.name === subDependency.name;\n          })\n        );\n      }\n    }\n  }\n\n  return { name, reference, dependencies };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Package Information Query with Yarn\nDESCRIPTION: Demonstrates how to use the basic 'yarn info' command to get information about a package (React in this example). This returns comprehensive package information in a tree format without requiring local installation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react\n```\n\n----------------------------------------\n\nTITLE: Upgrading Package Dependencies\nDESCRIPTION: Commands for upgrading existing package dependencies to newer versions.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn upgrade [package]\nyarn upgrade [package]@[version]\nyarn upgrade [package]@[tag]\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Author Information\nDESCRIPTION: Demonstrates how to add author information to package.json, either as an object with name, email, and URL, or as a single string.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"you@example.com\",\n    \"url\": \"http://your-website.com\"\n  },\n  \"author\": \"Your Name <you@example.com> (http://your-website.com)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Package.json Configuration\nDESCRIPTION: Example package.json file showing dependency declarations with version ranges.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"dependencies\": {\n        \"react\": \"^15.5.4\",\n        \"babel-core\": \"6.25.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example package.json Dependencies Definition in JavaScript\nDESCRIPTION: A sample package.json file showing how dependencies are defined with version constraints. It includes 'underscore' as a regular dependency with a flexible version range and 'lodash' as a development dependency with a fixed version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/outdated.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"dependencies\": {\n    \"underscore\": \"~1.6.0\"\n  },\n  \"devDependencies\": {\n    \"lodash\": \"4.15.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Yarn Versions Command in Shell\nDESCRIPTION: This command displays version information for Yarn, Node.js, and its dependencies. It provides a comprehensive overview of the installed versions of various components in the development environment.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/versions.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn versions\n```\n\n----------------------------------------\n\nTITLE: Specifying Engine Requirements in package.json for Yarn\nDESCRIPTION: Defines the versions of Node.js, Yarn, and other engines required for the package. This ensures compatibility with specific client versions.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engines\": {\n    \"node\": \">=4.4.7 <7.0.0\",\n    \"zlib\": \"^1.2.8\",\n    \"yarn\": \"^0.14.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated package.json after version change\nDESCRIPTION: The package.json file after running the yarn version command, showing the updated version number.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"example-yarn-package\",\n  \"version\": \"1.0.2\",\n  \"description\": \"An example package to demonstrate Yarn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using yarn upgrade-interactive Command\nDESCRIPTION: This snippet demonstrates the output of the 'yarn upgrade-interactive' command. It shows a list of outdated packages, allowing the user to select which ones to upgrade. The command respects version ranges in package.json unless the --latest flag is used.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/upgrade-interactive.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[1/? Choose which packages to update. (Press <space> to select, <a> to toggle all, <i> to inverse selection)\n devDependencies\n❯◯ autoprefixer      6.7.7  ❯  7.0.0          https://github.com/postcss/autoprefixer#readme\n ◯ webpack           2.4.1  ❯  2.5.1          https://github.com/webpack/webpack\n\n dependencies\n ◯ bull              2.2.6  ❯  3.0.0-alpha.3  https://github.com/OptimalBits/bull#readme\n ◯ fs-extra          3.0.0  ❯  3.0.1          https://github.com/jprichardson/node-fs-extra\n ◯ socket.io         1.7.3  ❯  1.7.4          https://github.com/socketio/socket.io#readme\n ◯ socket.io-client  1.7.3  ❯  1.7.4          https://github.com/Automattic/socket.io-client#readme\n```\n\n----------------------------------------\n\nTITLE: Listing Yarn Cache with Pattern Matching\nDESCRIPTION: Examples of using yarn cache list command with different pattern matching options to filter cached packages. Supports basic patterns and regex-like expressions.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/cache.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn cache list --pattern gulp\nyarn cache list --pattern \"gulp|grunt\"\nyarn cache list --pattern \"gulp-(match|newer)\"\n```\n\n----------------------------------------\n\nTITLE: Defining OS Compatibility in package.json for Yarn\nDESCRIPTION: Specifies the operating systems compatible with the package. It can include or exclude specific platforms based on process.platform.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"os\": [\"darwin\", \"linux\"],\n  \"os\": [\"!win32\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Directory Structures in package.json\nDESCRIPTION: Uses the 'directories' field to indicate the structure of the package, specifying locations for various types of files.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directories\": {\n    \"lib\": \"path/to/lib/\",\n    \"bin\": \"path/to/bin/\",\n    \"man\": \"path/to/man/\",\n    \"doc\": \"path/to/doc/\",\n    \"example\": \"path/to/example/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Package Integrity with Yarn\nDESCRIPTION: The '--integrity' option verifies that both versions and hashed values of package contents in package.json match those in the yarn lock file. This helps ensure package dependencies haven't been altered.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/check.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n##### `yarn check --integrity`\n```\n\n----------------------------------------\n\nTITLE: Yarn Why Command Output Example\nDESCRIPTION: Sample output showing dependency information, disk usage, and relationship details for a queried package\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/why.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn why vx.x.x\n[1/4] 🤔  Why do we have the module \"jest\"...?\n[2/4] 🚚  Initializing dependency graph...\n[3/4] 🔍  Finding dependency...\n[4/4] 🚡  Calculating file sizes...\ninfo Has been hoisted to \"jest\"\ninfo This module exists because it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"1.29kB\"\ninfo Disk size with unique dependencies: \"101.31kB\"\ninfo Disk size with transitive dependencies: \"20.35MB\"\ninfo Amount of shared dependencies: 125\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundled Dependencies in package.json for Yarn\nDESCRIPTION: Specifies an array of package names that will be bundled together when publishing the package. This is useful for including dependencies directly in the published package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundledDependencies\": [\"package-4\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Yarn via Curl on Unix Systems\nDESCRIPTION: Updates Yarn using the official installation script through curl on Unix-based systems. This method downloads and executes the installation script directly from the Yarn website.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/self-update.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --compressed -o- -L https://yarnpkg.com/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Getting Yarn Configuration Value\nDESCRIPTION: Retrieves the value of a specific configuration key using the 'yarn config get' command. This example gets the value of the 'init-license' key.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/config.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn config get init-license\nBSD-2-Clause\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Object Fields\nDESCRIPTION: Demonstrates how to query a field that is itself a nested object, returning the entire child tree for that field.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react time\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts in package.json\nDESCRIPTION: Example of defining scripts in a package.json file. This snippet shows how to specify build and test scripts that can be executed using yarn run.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/run.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"scripts\": {\n    \"build\": \"babel src -d lib\",\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reinitializing the project with offline mirror\nDESCRIPTION: Commands to remove existing node_modules and lockfile, then reinstall dependencies which will now use and populate the offline mirror.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf node_modules/ yarn.lock\n$ yarn install\nyarn install v0.17.8\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 📃  Building fresh packages...\nsuccess Saved lockfile.\n✨  Done in 0.57s.\n```\n\n----------------------------------------\n\nTITLE: Listing Yarn Configuration\nDESCRIPTION: Displays the current Yarn configuration using the 'yarn config list' command. This command shows both Yarn-specific and npm configurations.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/config.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn config list\nyarn config vx.x.x\ninfo yarn config\n{ 'version-tag-prefix': 'v',\n  'version-git-tag': true,\n  'version-git-sign': false,\n  'version-git-message': 'v%s',\n  'init-version': '1.0.0',\n  'init-license': 'MIT',\n  'save-prefix': '^',\n  'ignore-scripts': false,\n  'ignore-optional': true,\n  registry: 'https://registry.yarnpkg.com',\n  'user-agent': 'yarn/0.15.0 npm/? node/v6.2.1 darwin x64' }\ninfo npm config\n{ registry: 'https://registry.npmjs.org/',\n  '//localhost:4873/:_authToken': 'some-auth-token' }\n✨  Done in 0.05s.\n```\n\n----------------------------------------\n\nTITLE: Basic Yarn List Command\nDESCRIPTION: Shows the basic usage of yarn list command to display all installed packages and their dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/list.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn list\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Script with Yarn\nDESCRIPTION: Example of running a specific script defined in package.json using the yarn run command. This snippet demonstrates how to execute the 'test' script.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/run.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Installing and Running React App Starter Kit with Yarn Create\nDESCRIPTION: Example showing how the yarn create react-app command is equivalent to globally installing create-react-app and then running it to create a new application.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/create.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn global add create-react-app\n$ create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Tilde Version Range\nDESCRIPTION: Demonstrates using the '--tilde' or '-T' flag with 'yarn add' to install packages with a tilde version range, allowing minor version updates.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/add.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add foo@1.2.3 --tilde\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Scripts with Yarn\nDESCRIPTION: Example of passing additional arguments to a script when using yarn run. This snippet shows how to run the 'test' script with additional options.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/run.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn run test -o --watch\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Package Information Query\nDESCRIPTION: Shows how to request information about a specific version of a package by appending '@[version]' to the package name argument.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react@15.3.0\n```\n\n----------------------------------------\n\nTITLE: Yarn Install Command Example\nDESCRIPTION: Example showing the yarn install command that handles deduplication automatically.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/dedupe.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`yarn install`\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Yarn Versions Command\nDESCRIPTION: This snippet shows the typical output of the 'yarn versions' command. It includes the Yarn version and a JSON object containing version information for various system components and dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/versions.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn versions v0.24.5\n{ http_parser: '2.7.0',\n  node: '7.10.0',\n  v8: '5.5.372.43',\n  uv: '1.11.0',\n  zlib: '1.2.11',\n  ares: '1.10.1-DEV',\n  modules: '51',\n  openssl: '1.0.2k',\n  icu: '58.2',\n  unicode: '9.0',\n  cldr: '30.0.3',\n  tz: '2016j' }\n✨  Done in 0.04s.\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Script Execution with Yarn\nDESCRIPTION: Example of using the shorthand syntax to run a script without the 'run' keyword. This snippet demonstrates running the 'test' script with additional options using the shorthand method.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/run.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn test -o --watch\n```\n\n----------------------------------------\n\nTITLE: Specifying Bug Reporting URL\nDESCRIPTION: Sets the 'bugs' field in package.json to provide users with a way to report issues, typically linking to the project's issue tracker.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bugs\": \"https://github.com/user/repo/issues\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Yarn CLI Help Information\nDESCRIPTION: The 'yarn help' command shows a list of available commands and flags in the Yarn CLI, each with a brief explanation of its functionality.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/help.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### `yarn help` <a class=\"toc\" id=\"toc-yarn-help\" href=\"#toc-yarn-help\"></a>\n```\n\n----------------------------------------\n\nTITLE: Installing Packages at Workspace Root\nDESCRIPTION: Shows how to use the '--ignore-workspace-root-check' or '-W' flag to install packages at the workspace root, which is typically not recommended.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/add.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add lerna --ignore-workspace-root-check --dev\n```\n\n----------------------------------------\n\nTITLE: Installing All Project Dependencies with Yarn\nDESCRIPTION: Installs all dependencies listed in package.json according to the yarn.lock file (or creates one if it doesn't exist). Both commands perform the same function, with the shorter version being a convenience alias.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/usage.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Creating Yarn Alias in Bash and Zsh\nDESCRIPTION: This snippet shows how to create a simple alias for the 'yarn info' command with specific flags in Bash and Zsh shells. It also demonstrates how to create a function for more complex aliases that accept additional parameters.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-19-adding-command-line-aliases-for-yarn.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nalias ynf=\"yarn info --verbose --no-emoji\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nfunction ynftag { yarn info --verbose --no-emoji \"$@\" dist-tags; }\n```\n\n----------------------------------------\n\nTITLE: Yarn Init with Existing package.json\nDESCRIPTION: This snippet shows the interactive session of 'yarn init' when an existing package.json is present. It demonstrates how existing values are used as defaults in the prompts.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn init\n```\n\nLANGUAGE: sh\nCODE:\n```\nquestion name (my-existing-package):\nquestion version (0.1):\nquestion description (I exist therefore I am.):\nquestion entry point (index.js):\nquestion git repository (https://github.com/yarnpkg/example-yarn-package):\nquestion author: Yarn Contributor\nquestion license (BSD-2-Clause):\nquestion private:\nsuccess Saved package.json\n✨  Done in 121.53s.\n```\n\n----------------------------------------\n\nTITLE: Nested Object Field Output\nDESCRIPTION: Shows both the standard and JSON output formats when querying a nested object field from package information.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn info vx.x.x\n{ modified: '2016-10-06T22:09:27.397Z',\n  created: '2011-10-26T17:46:21.942Z', ... }\n\nyarn info react time --json\n{\"type\":\"inspect\",\"data\":{\"modified\":\"2016-10-06T22:09:27.397Z\",\"created\":...}}\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Custom Alias\nDESCRIPTION: Demonstrates how to install a package under a custom alias using the '@npm:' syntax, allowing multiple versions of the same package to be installed.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/add.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add my-foo@npm:foo\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Executable Path\nDESCRIPTION: Demonstrates using yarn bin with a specific executable name to show the full path to that executable file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/bin.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn bin gettext-compile\n/home/emillumine/Code/Funkwhale/funkwhale/front/node_modules/.bin/gettext-compile\n```\n\n----------------------------------------\n\nTITLE: Executing Yarn Init with --private Flag\nDESCRIPTION: This snippet demonstrates using the 'yarn init' command with the --private flag, which automatically adds 'private: true' to the package.json file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn init --private\n```\n\nLANGUAGE: sh\nCODE:\n```\nquestion name (testdir): my-awesome-package\nquestion version (1.0.0):\nquestion description: The best package you will ever find.\nquestion entry point (index.js):\nquestion git repository: https://github.com/yarnpkg/example-yarn-package\nquestion author: Yarn Contributor\nquestion license (MIT):\nsuccess Saved package.json\n✨  Done in 87.70s.\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn globally using npm\nDESCRIPTION: This command installs Yarn package manager globally on your system using npm. It can be used for both initial installation and upgrading to the latest version of Yarn.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/npm.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global yarn\n```\n\n----------------------------------------\n\nTITLE: Installing Packages as Exact Versions\nDESCRIPTION: Shows how to use the '--exact' or '-E' flag with 'yarn add' to install packages as exact versions, rather than using the default semver range.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/add.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add foo@1.2.3 --exact\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with Yarn Exec\nDESCRIPTION: This example demonstrates how to use the 'yarn exec' command to execute a simple shell command. The command runs 'echo test message' and outputs the result directly to the console.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/exec.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn exec echo test message\ntest message\n```\n\n----------------------------------------\n\nTITLE: Generated package.json from Yarn Init with --private Flag\nDESCRIPTION: This JSON snippet shows the resulting package.json file created by the 'yarn init --private' command. It includes the 'private: true' field in addition to other metadata.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The best package you will ever find.\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"url\": \"https://github.com/yarnpkg/example-yarn-package\",\n    \"type\": \"git\"\n  },\n  \"author\": \"Yarn Contributor\",\n  \"license\": \"MIT\",\n  \"private\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies from Workspace Package\nDESCRIPTION: Example demonstrating how to remove a package dependency from a specific workspace package named web-project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/workspace.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspace web-project remove some-package\n```\n\n----------------------------------------\n\nTITLE: Adding Versioned Package Dependencies\nDESCRIPTION: Examples of adding packages with specific versions or tags.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add [package]@[version]\nyarn add [package]@[tag]\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add package-1@1.2.3\nyarn add package-2@^1.0.0\nyarn add package-3@beta\n```\n\n----------------------------------------\n\nTITLE: Using the Basic Yarn Pack Command\nDESCRIPTION: Creates a standard compressed gzip archive of the package dependencies without specifying a custom filename.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/pack.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn pack\n```\n\n----------------------------------------\n\nTITLE: Executing Yarn Init with Both --yes and --private Flags\nDESCRIPTION: This snippet demonstrates using the 'yarn init' command with both --yes and --private flags, which generates a package.json with default values and sets it as private.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn init -yp\n```\n\nLANGUAGE: sh\nCODE:\n```\nwarning The yes flag has been set. This will automatically answer yes to all questions which may have security implications.\nsuccess Saved package.json\n✨  Done in 0.05s.\n```\n\n----------------------------------------\n\nTITLE: Installing Global Packages with Yarn\nDESCRIPTION: Demonstrates how to use the 'yarn global add' command to install packages globally. This is generally not recommended for most packages, as local dependencies are preferred.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/add.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn global add <package...>\n```\n\n----------------------------------------\n\nTITLE: Installing Only Production Dependencies with Yarn\nDESCRIPTION: This command installs only the dependencies needed for production, excluding development dependencies. It's typically used when deploying to a production environment.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/installing-dependencies.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn install --production\n```\n\n----------------------------------------\n\nTITLE: Listing Package Licenses with Yarn CLI\nDESCRIPTION: Command to list all installed packages with their associated licenses and source code URLs in alphabetical order. The output shows each package with its version, license type, and repository URL.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/licenses.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn licenses list\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn licenses v0.14.0\n├─ abab@1.0.3\n│  ├─ License: ISC\n│  └─ URL: git+https://github.com/jsdom/abab.git\n├─ abbrev@1.0.9\n│  ├─ License: ISC\n│  └─ URL: http://github.com/isaacs/abbrev-js\n├─ acorn-globals@1.0.9\n│  ├─ License: MIT\n│  └─ URL: https://github.com/ForbesLindesay/acorn-globals.git\n├─ acorn@2.7.0\n│  ├─ License: MIT\n│  └─ URL: https://github.com/ternjs/acorn.git\n├─ align-text@0.1.4\n│  ├─ License: MIT\n│  └─ URL: git://github.com/jonschlinkert/align-text.git\n├─ amdefine@1.0.0\n│  ├─ License: BSD-3-Clause AND MIT\n│  └─ URL: https://github.com/jrburke/amdefine.git\n├─ ansi-escapes@1.4.0\n│  ├─ License: MIT\n│  └─ URL: https://github.com/sindresorhus/ansi-escapes.git\n├─ ansi-regex@2.0.0\n│  ├─ License: MIT\n│  └─ URL: https://github.com/sindresorhus/ansi-regex.git\n...\n```\n\n----------------------------------------\n\nTITLE: Example Package Information Output\nDESCRIPTION: An example of the JSON output returned when querying package information using 'yarn info'. Shows metadata including version, maintainers, keywords, repository details, and distribution information.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/publishing-a-package.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{ name: 'my-new-project',\n  description: 'My New Project description.',\n  'dist-tags': { latest: '1.0.0' },\n  versions: [ '1.0.0' ],\n  maintainers: [ { name: 'Your Name', email: 'you@example.com' } ],\n  time:\n  { modified: '{{ site.time | date_to_xmlschema }}',\n    created: '{{ site.time | date_to_xmlschema }}',\n    '1.0.0': '{{ site.time | date_to_xmlschema }}' },\n  homepage: 'https://my-new-project-website.com/',\n  keywords: [ 'cool', 'useful', 'stuff' ],\n  repository:\n   { url: 'https://example.com/your-username/my-new-project',\n     type: 'git' },\n  contributors:\n   [ { name: 'Your Friend',\n       email: 'their-email@example.com',\n       url: 'http://their-website.com' },\n     { name: 'Another Friend',\n       email: 'another-email@example.com',\n       url: 'https://another-website.org' } ],\n  author: { name: 'Your Name', email: 'you@example.com' },\n  bugs: { url: 'https://github.com/you/my-new-project/issues' },\n  license: 'MIT',\n  readmeFilename: 'README.md',\n  version: '1.0.0',\n  main: 'index.js',\n  files: [ 'index.js', 'lib/*.js', 'bin/*.js' ],\n  bin: { 'my-new-project-cli': 'bin/my-new-project-cli.js' },\n  dist:\n   { shasum: '908bc9a06fa4421e96ceda243c1ee1789b0dc763',\n     tarball: 'https://registry.npmjs.org/my-new-project/-/my-new-project-1.0.0.tgz' },\n  directories: {} }\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Package Versions with Yarn\nDESCRIPTION: Examples of using the --latest flag to ignore version constraints in package.json and upgrade to the most recent versions, with options for controlling the version range specifier.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/upgrade.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade --latest\nyarn upgrade left-pad --latest\nyarn upgrade left-pad grunt --latest --tilde\n```\n\n----------------------------------------\n\nTITLE: Yarn List with Pattern Filtering\nDESCRIPTION: Examples of using the --pattern flag to filter dependencies by name, including single pattern and multiple patterns with depth limitation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/list.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn list --pattern gulp\nyarn list --pattern \"gulp|grunt\"\nyarn list --pattern \"gulp|grunt\" --depth=1\n```\n\n----------------------------------------\n\nTITLE: Using Yarn Pack with Custom Filename\nDESCRIPTION: Creates a compressed gzip archive of package dependencies with a custom filename specified by the user.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/pack.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn pack --filename <filename>\n```\n\n----------------------------------------\n\nTITLE: Sample output of yarn import command\nDESCRIPTION: This snippet shows the expected output of running 'yarn import'. It includes success messages, warnings about version discrepancies, and completion status. The output helps users understand the migration process and any potential issues.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/import.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn import vx.x.x\nsuccess Folder in sync.\nwarning Using version \"2.2.4\" of \"lru-cache\" instead of \"2.7.3\" for \"ngstorage > grunt > minimatch\"\nwarning Using version \"2.0.6\" of \"readable-stream\" instead of \"2.2.9\" for \"ngstorage > karma > chokidar > readdirp\"\n[...]\nsuccess Saved lockfile.\n✨  Done in 11.96s.\n```\n\n----------------------------------------\n\nTITLE: Watch Mode for Development\nDESCRIPTION: Command to automatically rebuild Yarn as changes are made during development.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/contributing.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Using Yarn Logout Command\nDESCRIPTION: The yarn logout command removes stored npm registry credentials (username and email) previously set up using yarn login. Note that running this command is not required for de-authentication as registry actions are authenticated individually.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/logout.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn logout\n```\n\n----------------------------------------\n\nTITLE: Basic Yarn Login Command\nDESCRIPTION: Simple example of the yarn login command without any arguments.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/login.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn login\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Yarn Info Command\nDESCRIPTION: Shows how to use the '--json' flag with 'yarn info' to get the output in valid JSON format instead of the default single-quoted serialization.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react --json\n```\n\n----------------------------------------\n\nTITLE: Yarn Outdated Command Output\nDESCRIPTION: The console output from running 'yarn outdated', displaying version information for all dependencies including current, wanted, and latest available versions along with package type and repository URL.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/outdated.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPackage    Current Wanted Latest Package Type    URL\nlodash     4.15.0  4.15.0 4.16.4 devDependencies https://github.com/lodash/lodash#readme\nunderscore 1.6.0   1.6.0  1.8.3  dependencies    https://github.com/jashkenas/underscore#readme\n✨  Done in 0.72s.\n```\n\n----------------------------------------\n\nTITLE: Displaying Yarn Bin Folder Location\nDESCRIPTION: Shows how to use yarn bin command to display the location of the .bin folder where yarn installs executable files for your package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/bin.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn bin\n/home/emillumine/Code/Funkwhale/funkwhale/front/node_modules/.bin\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format Example\nDESCRIPTION: Demonstrates the output format when using the '--json' flag with the 'yarn info' command, which produces valid JSON lines.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n{\"type\":\"inspect\",\"data\":{\"name\":\"react\",\"time\":{...}}}\n{\"type\":\"finished\",\"data\":417}\n```\n\n----------------------------------------\n\nTITLE: Yarn Outdated Command Output for a Specific Package\nDESCRIPTION: The console output from running 'yarn outdated' for a specific package, showing version information for only the requested dependency.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/outdated.md#2025-04-09_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nPackage Current Wanted Latest Package Type    URL\nlodash  4.15.0  4.15.0 4.16.4 devDependencies https://github.com/lodash/lodash#readme\n✨  Done in 1.04s.\n```\n\n----------------------------------------\n\nTITLE: Installing a Published Package with Yarn\nDESCRIPTION: Command to install a published package from the npm registry using Yarn.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/publishing-a-package.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add my-new-project\n```\n\n----------------------------------------\n\nTITLE: Specific Field Query Output\nDESCRIPTION: Shows the output when querying a specific field from package information, which returns only the requested field's value.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn info vx.x.x\nReact is a JavaScript library for building user interfaces.\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Website on Windows\nDESCRIPTION: Commands for Windows environments where make is not available, using bundle and jekyll commands directly.\nSOURCE: https://github.com/yarnpkg/website/blob/master/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbundle install\nbundle exec jekyll serve --incremental\n```\n\n----------------------------------------\n\nTITLE: Defining Pre and Post Scripts in package.json\nDESCRIPTION: Example of defining pre and post scripts in package.json. This snippet shows how to specify a 'prebuild' script that will automatically run before the 'build' script when using yarn run build.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/run.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"scripts\": {\n    \"build\": \"babel src -d lib\",\n    \"prebuild\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Package Information with Yarn\nDESCRIPTION: Command to view detailed information about a published package in the npm registry using Yarn.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/publishing-a-package.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn info my-new-project\n```\n\n----------------------------------------\n\nTITLE: Listing Available Package Versions\nDESCRIPTION: Shows how to list all available versions of a package by querying the 'versions' field with the 'yarn info' command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react versions\n```\n\n----------------------------------------\n\nTITLE: Running yarn test command output\nDESCRIPTION: Example output when running the yarn test command, showing how Yarn executes the defined test script and displays the results along with execution time.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/test.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn test\nyarn test v0.15.1\n$ \"./scripts/test\"\nHello, world!\n✨ Done in 0.17s.\n```\n\n----------------------------------------\n\nTITLE: Adding Package Owner in Yarn\nDESCRIPTION: Command to add a new owner to a package. Requires existing owner permissions to execute. Takes user and package name as arguments.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/owner.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn owner add <user> <package>\n```\n\n----------------------------------------\n\nTITLE: Readme Field Output Example\nDESCRIPTION: Shows the output when explicitly requesting the 'readme' field from package information, displaying the package's documentation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nyarn info vx.x.x\n## react\n\nAn npm package to get you immediate access to\n[React](https://facebook.github.io/react/).\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning the Yarn Website Repository\nDESCRIPTION: Commands to clone the Yarn website repository and navigate into the project directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone git@github.com:yarnpkg/website.git yarn-website\n$ cd yarn-website\n```\n\n----------------------------------------\n\nTITLE: Unlinking a Package from its Source Directory\nDESCRIPTION: This snippet demonstrates how to unlink a package from its source directory, using the React package as an example. It shows the command output when unlinking.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/unlink.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd react\n$ yarn unlink\nyarn link vx.x.x\nsuccess Unregistered \"react\".\n```\n\n----------------------------------------\n\nTITLE: Generated package.json from Yarn Init\nDESCRIPTION: This JSON snippet shows the resulting package.json file created by the 'yarn init' command. It includes basic metadata about the package such as name, version, description, and repository.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"The best package you will ever find.\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"url\": \"https://github.com/yarnpkg/example-yarn-package\",\n    \"type\": \"git\"\n  },\n  \"author\": \"Yarn Contributor\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Packages Using Tags in Yarn\nDESCRIPTION: Examples showing how to install packages using stable and canary tags with Yarn's add command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/tag.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add your-package-name@stable\nyarn add your-package-name@canary\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching with Yarn Upgrade\nDESCRIPTION: Examples of using the --pattern flag to upgrade packages matching specific patterns, which allows for more flexible package selection through regex-like patterns.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/upgrade.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade --pattern gulp\nyarn upgrade left-pad --pattern \"gulp|grunt\"\nyarn upgrade --latest --pattern \"gulp-(match|newer)\"\n```\n\n----------------------------------------\n\nTITLE: Executing Yarn Init with --yes Flag\nDESCRIPTION: This snippet demonstrates using the 'yarn init' command with the --yes flag, which skips the interactive session and generates a package.json based on defaults.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn init --yes\n```\n\nLANGUAGE: sh\nCODE:\n```\nwarning The yes flag has been set. This will automatically answer yes to all questions which may have security implications.\nsuccess Saved package.json\n✨  Done in 0.09s.\n```\n\n----------------------------------------\n\nTITLE: Invalid Tag Usage in Yarn\nDESCRIPTION: Demonstrates the syntax for installing packages with version numbers or tags, highlighting why version-like tags are not allowed.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/tag.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add your-package-name@<version>\nyarn add your-package-name@<tag>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Scoped Packages with Yarn\nDESCRIPTION: Examples of using the --scope flag to upgrade packages within a specific scope, which is useful for managing related packages like those from a specific organization.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/upgrade.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn upgrade --scope @angular\nyarn upgrade -S @angular\n```\n\n----------------------------------------\n\nTITLE: Generated package.json from Yarn Init with --yes Flag\nDESCRIPTION: This JSON snippet shows the resulting package.json file created by the 'yarn init --yes' command. It includes basic metadata with default values.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"yarn-example\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: yarn version command output\nDESCRIPTION: Terminal output showing the interactive prompts and results of running the yarn version command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ninfo Current version: 1.0.1\nquestion New version: 1.0.2\ninfo New version: 1.0.2\n✨  Done in 9.42s.\n```\n\n----------------------------------------\n\nTITLE: Running yarn version command\nDESCRIPTION: Example of executing the yarn version command in the terminal, which prompts the user for a new version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn version\n```\n\n----------------------------------------\n\nTITLE: Generated package.json from Yarn Init with --yes and --private Flags\nDESCRIPTION: This JSON snippet shows the resulting package.json file created by the 'yarn init -yp' command. It includes basic metadata with default values and the 'private: true' field.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/init.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"yarn-example\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"private\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git tag message format\nDESCRIPTION: Command to customize the Git commit message format when creating version tags, where %s represents the version string.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn config set version-git-message \"v%s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git tag prefix\nDESCRIPTION: Command to set a custom prefix for Git tags created during version updates using yarn config.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn config set version-tag-prefix \"v\"\n```\n\n----------------------------------------\n\nTITLE: Creating Package Link Example\nDESCRIPTION: Demonstrates creating a link for the React package that can be consumed by other projects. Shows the command output including success message and next steps.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/link.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd react\n$ yarn link\nyarn link vx.x.x\nsuccess Registered \"react\".\ninfo You can now run `yarn link \"react\"` in the projects where you want to use this module and it will be used instead.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git tag signing\nDESCRIPTION: Command to enable or disable Git tag signing when creating version tags.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn config set version-sign-git-tag false\n```\n\n----------------------------------------\n\nTITLE: Package.json with version lifecycle scripts\nDESCRIPTION: Example package.json demonstrating version lifecycle scripts (preversion, postversion) to automate testing, pushing tags, and publishing.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"example-yarn-package\",\n  \"version\": \"1.0.2\",\n  \"description\": \"An example package to demonstrate Yarn\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Running tests for version $npm_package_version...\\\"\",\n    \"preversion\": \"yarn test\",\n    \"postversion\":\n      \"git push --tags && yarn publish . --tag $npm_package_version && git push && echo \\\"Successfully released version $npm_package_version!\\\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Yarn Outdated Command\nDESCRIPTION: A shell command example showing how to run 'yarn outdated' to check all dependencies for newer versions.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/outdated.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn outdated\n```\n\n----------------------------------------\n\nTITLE: Enabling/disabling Git tagging\nDESCRIPTION: Command to completely enable or disable Git tagging behavior when running yarn version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn config set version-git-tag true\n```\n\n----------------------------------------\n\nTITLE: Displaying Workspace Dependency Tree with Yarn CLI\nDESCRIPTION: This command displays the workspace dependency tree of the current project. It shows the location of each workspace, its dependencies, and any mismatched dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/workspaces.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspaces info\n```\n\n----------------------------------------\n\nTITLE: Enforcing Yarn Version with CLI Command in Shell\nDESCRIPTION: Examples of using the 'yarn policies set-version' command to set and enforce specific Yarn versions within a project. This command can download the latest stable release, the latest rc release, a specific version, or the latest minor version based on a semver range.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/policies.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn policies set-version\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn policies set-version --rc\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn policies set-version 1.13.0\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn policies set-version '^1.12.0'\n```\n\n----------------------------------------\n\nTITLE: Listing Package Owners in Yarn\nDESCRIPTION: Command to list all owners of a specified package in the registry. Requires the package name as an argument.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/owner.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn owner list <package>\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Package Information Output\nDESCRIPTION: Shows the output when querying information for a specific version of a package, displaying metadata for that particular version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn info vx.x.x\n{ name: 'react',\n  version: '15.3.0',\n  description: 'React is a JavaScript library for building user interfaces.',\n  time: { modified: '2016-10-06T22:09:27.397Z', ... } ... }\n```\n\n----------------------------------------\n\nTITLE: Creating a test bash script example\nDESCRIPTION: Example of a simple bash test script that prints \"Hello, world!\" to the console. This script would typically be placed in a scripts directory within the project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/test.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\n\necho \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Removing Package Owner in Yarn\nDESCRIPTION: Command to remove an owner from a package. Requires existing owner permissions to execute. Takes user and package name as arguments.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/owner.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn owner remove <user> <package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Yarn Installation Page in Markdown\nDESCRIPTION: This YAML frontmatter sets up the page configuration for a Yarn installation guide. It defines the document ID as 'docs_install', specifies that it belongs to the 'docs_getting_started' guide, and sets the page layout to 'pages/install'.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/install.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: docs_install\nguide: docs_getting_started\nlayout: pages/install\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Field from Package Information\nDESCRIPTION: Demonstrates how to request only a specific field from the package information by providing a field name as the second argument to 'yarn info'.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react description\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json with a test script\nDESCRIPTION: Example package.json configuration that defines a test script that runs the bash script from the previous example. The script is referenced as \"scripts/test\" in the scripts section.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/test.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-tribute-package\",\n  \"version\": \"1.0.0\",\n  \"description\":\n    \"This is not the best package in the world, this is just a tribute.\",\n  \"main\": \"index.js\",\n  \"author\": \"Yarn Contributor\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"test\": \"scripts/test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Yarn Login Command Output Example\nDESCRIPTION: Example showing the interactive prompts and output when running the yarn login command, including version number, username and email collection, and completion message.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/login.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn login vx.x.x\nquestion npm username: my-username\nquestion npm email: my-username@example.com\n✨  Done in 6.03s.\n```\n\n----------------------------------------\n\nTITLE: Available Versions Output\nDESCRIPTION: Shows the output when querying the 'versions' field, which displays an array of all available versions for the package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn info v1.1.0\n[ '0.0.1',\n  '0.0.2',\n  '0.0.3',\n(etc)\n```\n\n----------------------------------------\n\nTITLE: Disabling Git commit hooks\nDESCRIPTION: Command to disable Git commit hooks from running during version updates.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/version.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn config set version-commit-hooks false\n```\n\n----------------------------------------\n\nTITLE: Unlinking a Package from a Project\nDESCRIPTION: This snippet shows how to unlink a previously linked package from a project, using React and React Relay as examples. It demonstrates the command and its output when unlinking React from the React Relay project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/unlink.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../react-relay\n$ yarn unlink react\nyarn link vx.x.x\nsuccess Unregistered \"react\".\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Readme Content\nDESCRIPTION: Shows how to explicitly request the 'readme' field which is omitted by default due to its typically long content.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/info.md#2025-04-09_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nyarn info react readme\n```\n\n----------------------------------------\n\nTITLE: Adding Package Description in package.json\nDESCRIPTION: Includes a 'description' field in package.json to provide a brief explanation of the package's purpose, which is useful for package managers and searches.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"My short description of my awesome package\"\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Yarn 3+ Projects with Older Versions\nDESCRIPTION: Shows how to link a Yarn 3+ project into a project using older Yarn versions by using the YARN_IGNORE_PATH environment variable.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/link.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ YARN_IGNORE_PATH=1 yarn link\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces in package.json\nDESCRIPTION: This snippet shows how to set up the root package.json file to enable workspaces. It defines the 'private' flag and lists the workspace directories.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/workspaces.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"workspaces\": [\"workspace-a\", \"workspace-b\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Package Homepage URL\nDESCRIPTION: Defines the 'homepage' field in package.json, which should point to the landing page or documentation for the package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"homepage\": \"https://your-package.org\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Yarn Why Command Usage\nDESCRIPTION: Example of using yarn why command to check why jest package is installed\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/why.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn why jest\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace B package.json\nDESCRIPTION: This snippet shows the package.json configuration for workspace-b, including its dependencies on both an external package and workspace-a.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/workspaces.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"workspace-b\",\n  \"version\": \"1.0.0\",\n\n  \"dependencies\": {\n    \"cross-env\": \"5.0.5\",\n    \"workspace-a\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Repository Information\nDESCRIPTION: Shows various ways to specify the 'repository' field in package.json, including full URLs and shorthand notations for different repository hosts.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/user/repo.git\" },\n  \"repository\": \"github:user/repo\",\n  \"repository\": \"gitlab:user/repo\",\n  \"repository\": \"bitbucket:user/repo\",\n  \"repository\": \"gist:a1b2c3d4e5f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Yarn List Output Example\nDESCRIPTION: Example output of the yarn list command showing package dependencies in a tree structure with version numbers.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/list.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn list vx.x.x\n├─ package-1@1.3.3\n├─ package-2@5.0.9\n│  └─ package-3@^2.1.0\n└─ package-3@2.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Offline Mirror in .yarnrc\nDESCRIPTION: Specifies a directory for Yarn to store offline copies of packages for more reliable builds. The path must be relative, or set to false to disable the mirror (which is the default).\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn-offline-mirror \"./packages-cache\"\n```\n\n----------------------------------------\n\nTITLE: Including Man Pages for Package\nDESCRIPTION: Specifies man pages associated with the package using the 'man' field in package.json, either as a single file or an array of files.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"man\": \"./man/doc.1\",\n  \"man\": [\"./man/doc.1\", \"./man/doc.2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Yarn List with Depth Parameter\nDESCRIPTION: Demonstrates using the --depth flag to limit the dependency tree depth level shown in the output.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/list.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn list --depth=0\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Yarn Governance Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the governance documentation page, including ID, guide category, and layout type.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/governance.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: governance\nguide: yarn_organization\nlayout: guide\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Pruning of Yarn Offline Mirror\nDESCRIPTION: Controls whether Yarn automatically prunes the offline mirror to remove unnecessary package versions. Value must be a boolean, with the default being false.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn-offline-mirror-pruning true\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies\nDESCRIPTION: Uses the 'optionalDependencies' field to list dependencies that are not required but can be used with the package if available.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"optionalDependencies\": {\n    \"package-5\": \"^1.6.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Yarn Outdated for a Specific Package\nDESCRIPTION: A shell command example showing how to check version information for a specific package dependency using 'yarn outdated [package]'.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/outdated.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn outdated lodash\n```\n\n----------------------------------------\n\nTITLE: Disabling Integrity Migration for Yarn Lock Files\nDESCRIPTION: Controls the yarn.lock checksum migration (for sha512 support). Setting to false enables the migration, which causes a lockfile format change. Will be the default starting from version 2.0.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nunsafe-disable-integrity-migration false\n```\n\n----------------------------------------\n\nTITLE: Enabling Flat Installation in package.json for Yarn\nDESCRIPTION: Sets the 'flat' option to true, enforcing that only one version of a given dependency is allowed. This mimics the behavior of 'yarn install --flat' command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flat\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Yarn Check Command\nDESCRIPTION: The basic 'yarn check' command verifies that package dependency versions in package.json match those in the yarn lock file. Note that this command is deprecated and will be removed in Yarn 2.0.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/check.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n##### `yarn check`\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Yarn Version on Debian/Ubuntu Systems\nDESCRIPTION: Command to install a specific version of Yarn package manager using apt-get on Debian-based systems. This approach locks the Yarn version to ensure build consistency and allows for controlled updates.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/deb-specific-version.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y -qq yarn={{site.latest_version}}-1\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Architecture Compatibility in package.json for Yarn\nDESCRIPTION: Defines the CPU architectures compatible with the package. It can include or exclude specific architectures based on process.arch.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cpu\": [\"x64\", \"ia32\"],\n  \"cpu\": [\"!arm\", \"!mips\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating License Disclaimers with Yarn CLI\nDESCRIPTION: Command to generate a comprehensive disclaimer containing all license texts from installed packages. The output includes sorted license information and full license text for each package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/licenses.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn licenses generate-disclaimer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nThe following software may be included in this product: package-1. This software contains the following license and notice below:\n\n[[LICENSE TEXT]]\n\n-----\n\nThe following software may be included in this product: package-2. This software contains the following license and notice below:\n\n[[LICENSE TEXT]]\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Manually in GitLab CI Pipeline\nDESCRIPTION: Demonstrates how to install Yarn in a Docker container that doesn't have it pre-installed, using the official installation script and updating PATH.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/gitlab.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# .gitlab-ci.yml\nimage: does-not-have-yarn\n\nbefore_script:\n  # Install yarn as outlined in (https://yarnpkg.com/lang/en/docs/install/#alternatives-stable)\n  - curl -o- -L https://yarnpkg.com/install.sh | bash\n  # Make available in the current terminal\n  - export PATH=\"$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Yarn Plug'n'Play in package.json\nDESCRIPTION: This JSON snippet shows how to enable Yarn's Plug'n'Play feature by setting the 'installConfig.pnp' property to true in the package.json file. This configuration tells Yarn to use PnP instead of the traditional node_modules folder.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/pnp/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"installConfig\": {\n    \"pnp\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Yarn via NPM\nDESCRIPTION: Updates Yarn to the latest version using npm's global install command. This is the recommended method for updating Yarn when it was initially installed through npm.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/self-update.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global yarn\n```\n\n----------------------------------------\n\nTITLE: Implementing Yarn Cache in GitLab CI\nDESCRIPTION: Configuration for caching the .yarn folder to improve build performance in GitLab CI pipelines.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/gitlab.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# .gitlab-ci.yml\ncache:\n  paths:\n    - .yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Offline Mirror Pruning\nDESCRIPTION: Command to enable automatic pruning of Yarn's offline mirror. When enabled, Yarn will remove tarballs that are no longer referenced in the yarn.lock file, keeping the offline mirror in sync with your project's dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/prune-offline-mirror.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn config set yarn-offline-mirror-pruning true\n```\n\n----------------------------------------\n\nTITLE: Template Variable Inclusion\nDESCRIPTION: Jekyll/Liquid template syntax for including variables from an external file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/dedupe.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% include vars.html %}\n```\n\n----------------------------------------\n\nTITLE: Complete GitLab CI Configuration with Yarn Testing\nDESCRIPTION: Full example of a GitLab CI configuration file that uses Yarn for dependency installation and includes test stage with caching for both node_modules and .yarn directories.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/gitlab.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# .gitlab-ci.yml\nimage: node:9.11.1\n\nbefore_script:\n  - yarn install --cache-folder .yarn\n\ntest:\n  stage: test\n  cache:\n    paths:\n    - node_modules/\n    - .yarn\n```\n\n----------------------------------------\n\nTITLE: Disabling Yarn Self-Update Check\nDESCRIPTION: Prevents Yarn from providing upgrade instructions when the CLI installation is outdated. Value must be a boolean, with the default being false.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndisable-self-update-check true\n```\n\n----------------------------------------\n\nTITLE: Example Yarn Clean Configuration\nDESCRIPTION: Example .yarnclean file configuration that specifies patterns for files to be deleted from node_modules. This configuration will remove all YAML and Markdown files from dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/autoclean.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n*.yaml\n*.md\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn on Semaphore CI\nDESCRIPTION: Shell commands to add Yarn package repository, install GPG key, and install a specific version of Yarn using Semaphore's install-package tool. The commands ensure proper cache handling and version control.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/semaphore.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb http://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n# install-package is a tool for caching APT installations in Semaphore\n# defining a package version is optional\ninstall-package --update-new yarn=<version>\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Arguments in .yarnrc (Check Files Example)\nDESCRIPTION: Demonstrates how to set CLI flags in .yarnrc, equivalent to running yarn with the same flags. This example enables checking files during installation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--install.check-files true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Yarn Cache Directory\nDESCRIPTION: Command to configure a custom cache directory location using Yarn's config system.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/cache.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn config set cache-folder <path>\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn on Alpine Linux using apk\nDESCRIPTION: This command installs the stable version of Yarn package manager on Alpine Linux 3.6 or later using the apk package manager.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/alpine.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\napk add yarn\n```\n\n----------------------------------------\n\nTITLE: Signing GPG Artifacts for Yarn Release\nDESCRIPTION: Command to GPG sign the .tar.gz and .js artifacts for a Yarn release using key 9D41F3C3, generating .asc signature files.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/release-process.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg -u 9D41F3C3 --armor --detach-sign yarn-0.xx.xx.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Directory via Environment Variable\nDESCRIPTION: Example of setting the Yarn cache directory using the YARN_CACHE_FOLDER environment variable.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/cache.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nYARN_CACHE_FOLDER=<path> yarn <command>\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeSource Repository for Node.js Installation\nDESCRIPTION: This command adds the NodeSource repository for Node.js version 12.x to your system. This step is required if Node.js is not already installed.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/centos.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn manually in Travis CI configuration\nDESCRIPTION: This configuration snippet shows how to manually install Yarn on Travis CI when the default install phase is overridden. It adds the Yarn repository, installs Yarn, and enables caching for faster builds.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/travis.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbefore_install: # if \"install\" is overridden\n  # Repo for Yarn\n  - sudo apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg\n  - echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n  - sudo apt-get update -qq\n  - sudo apt-get install -y -qq yarn\ncache:\n  yarn: true\n```\n\n----------------------------------------\n\nTITLE: Deleting Yarn Configuration Key\nDESCRIPTION: Removes a specific configuration key using the 'yarn config delete' command. This example deletes the 'test-key' from the configuration.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/config.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn config delete test-key\nyarn config vx.x.x\nsuccess Deleted \"test-key\".\n✨  Done in 0.06s.\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn Repository for Nightly Build on Debian/Ubuntu\nDESCRIPTION: These commands add the Yarn package repository for the nightly build version to the system. It imports the GPG key and adds the repository to the sources list.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/debian.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://nightly.yarnpkg.com/debian/ nightly main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n----------------------------------------\n\nTITLE: Using Node Docker Image with Pre-installed Yarn in GitLab CI\nDESCRIPTION: Specifies a Node.js Docker image that comes with Yarn pre-installed for GitLab CI pipeline.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/gitlab.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .gitlab-ci.yml\nimage: node:9.4.0\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Workspace Package\nDESCRIPTION: Example showing how to add React dependencies as devDependencies to a specific workspace package named awesome-package.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/workspace.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspace awesome-package add react react-dom --dev\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Homebrew on macOS\nDESCRIPTION: This command uses the Homebrew package manager to install Yarn. It will also install Node.js if not already present. Ensure that your PATH lists nvm's shims before Homebrew's Node.js version if using nvm.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/mac.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Codefresh Pipeline with Yarn for React Application\nDESCRIPTION: This YAML configuration defines a Codefresh pipeline that clones a repository, runs unit tests, and builds a React application using Yarn. It demonstrates the use of different Node.js versions for testing and building stages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/codefresh.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '1.0'\nstages:\n  - prepare\n  - test\n  - build\nsteps:\n  main_clone:\n    title: Cloning main repository...\n    stage: prepare\n    type: git-clone\n    repo: 'codefresh-contrib/react-sample-app'\n    revision: master\n    git: github\n  MyUnitTests:\n    title: Unit test\n    stage: test\n    image: node:11.0\n    commands:\n      - yarn install\n      - yarn test\n    environment:\n      - CI=true\n  MyReactBuild:\n    title: Packaging application\n    stage: build\n    image: node:8.16\n    commands:\n      - yarn build\n```\n\n----------------------------------------\n\nTITLE: Running Commands Across All Workspaces with Yarn CLI\nDESCRIPTION: This command runs a specified Yarn command in each workspace. It can be used to execute scripts like tests across all workspaces and supports passing additional flags.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/workspaces.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspaces run test\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn workspaces run test --ci\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Nightly Build on Ubuntu/Debian\nDESCRIPTION: Series of commands to add the Yarn nightly repository to apt sources, update package list, and install Yarn on Ubuntu/Debian systems.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/nightly.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg\necho \"deb http://nightly.yarnpkg.com/debian/ nightly main\" | sudo tee /etc/apt/sources.list.d/yarn-nightly.list\nsudo apt update && sudo apt install yarn\n```\n\n----------------------------------------\n\nTITLE: Caching Yarn's Cache Folder in AppVeyor Configuration\nDESCRIPTION: This YAML configuration snippet for AppVeyor CI specifies caching for Yarn's local cache folder. By caching this directory, subsequent builds can reuse downloaded packages, potentially speeding up the build process.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_ci/appveyor.md#2025-04-09_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\ncache:\n - \"%LOCALAPPDATA%\\\\Yarn\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace A package.json\nDESCRIPTION: This snippet demonstrates the package.json configuration for workspace-a, including its name, version, and dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/workspaces.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"workspace-a\",\n  \"version\": \"1.0.0\",\n\n  \"dependencies\": {\n    \"cross-env\": \"5.0.5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Shell Script - Release Candidate\nDESCRIPTION: Downloads and executes the Yarn installation script for the RC version using the --rc flag.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash -s -- --rc\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Chocolatey Package Manager on Windows\nDESCRIPTION: Command to install Yarn using the Chocolatey package manager. This installation method automatically ensures Node.js is installed as a dependency.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/windows.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchoco install yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Package.json for Yarn Workspaces\nDESCRIPTION: Example of a root package.json file that enables Workspaces for a project. It sets the private flag to true, defines dev dependencies, and specifies the Workspaces pattern to include all packages in the packages directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-26-introducing-workspaces.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"jest\",\n  \"devDependencies\": {\n    \"chalk\": \"^2.0.1\"\n  },\n  \"workspaces\": [\n    \"packages/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Yarn Installation via Tarball - Nightly Version\nDESCRIPTION: Downloads and extracts the nightly version of Yarn tarball to the /opt directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt\nwget https://nightly.yarnpkg.com/latest.tar.gz\ntar zvxf latest.tar.gz\n# Yarn is now in /opt/yarn-[version]/\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Scoop Command-line Installer on Windows\nDESCRIPTION: Command to install Yarn using the Scoop command-line installer. Requires separate Node.js installation if not already present.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/windows.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nscoop install yarn\n```\n\n----------------------------------------\n\nTITLE: Jest-Matcher-Utils Workspace Package.json Configuration\nDESCRIPTION: Example package.json for a Workspace package named 'jest-matcher-utils'. It defines package metadata and dependencies that will be managed by Yarn Workspaces.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-26-introducing-workspaces.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"jest-matcher-utils\",\n  \"description\": \"...\",\n  \"version\": \"20.0.3\",\n  \"license\": \"...\",\n  \"main\": \"...\",\n  \"browser\": \"...\",\n  \"dependencies\": {\n    \"chalk\": \"^1.1.3\",\n    \"pretty-format\": \"^20.0.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Yarn Tarball GPG Signature\nDESCRIPTION: Imports Yarn's public GPG key and verifies the authenticity of the downloaded tarball.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nwget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import\nwget https://yarnpkg.com/latest.tar.gz.asc\ngpg --verify latest.tar.gz.asc\n# Look for \"Good signature from 'Yarn Packaging'\" in the output\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows PATH for Yarn Binary Access\nDESCRIPTION: Command to add Yarn's binary directory to the Windows PATH environment variable. This enables global access to Yarn commands from any terminal location.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/windows_path_setup.md#2025-04-09_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset PATH=%PATH%;C:\\.yarn\\bin\n```\n\n----------------------------------------\n\nTITLE: Jest-Diff Workspace Package.json with Internal Dependency\nDESCRIPTION: Example package.json for a Workspace package named 'jest-diff' that depends on another Workspace package 'jest-matcher-utils'. Yarn Workspaces will create the appropriate symlinks between these packages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-26-introducing-workspaces.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"jest-diff\",\n  \"version\": \"20.0.3\",\n  \"license\": \"...\",\n  \"main\": \"...\",\n  \"browser\": \"...\",\n  \"dependencies\": {\n    \"chalk\": \"^1.1.3\",\n    \"diff\": \"^3.2.0\",\n    \"jest-matcher-utils\": \"^20.0.3\",\n    \"pretty-format\": \"^20.0.3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Blog Post Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for a Jekyll blog post announcing the Yarn package manager. Defines metadata like layout, title, author information, publication date, and sharing details.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-10-11-introducing-yarn.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout     : post\ntitle      : \"Yarn: A new package manager for JavaScript\"\nauthor     : Sebastian McKenzie, Christoph Pojer, James Kyle\nauthor_url : \"https://twitter.com/yarnpkg\"\ndate       : 2016-10-11 8:00:00\ncategories : announcements\nshare_text : \"Yarn: A new package manager for JavaScript\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Global Bin in Fish Shell\nDESCRIPTION: Sets up Yarn's global binary directory in Fish shell's user paths for persistent access to globally installed package executables.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/unix_path_setup.md#2025-04-09_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nset -U fish_user_paths (yarn global bin) $fish_user_paths\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Workspace Packages\nDESCRIPTION: Commands showing how to add a dependency to an individual Workspace package. Changes will affect both the Workspace's package.json and the root yarn.lock file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-26-introducing-workspaces.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd packages/jest-matcher-utils/\n$ yarn add left-pad\n✨ Done in 1.77s.\n$ git status\nmodified: package.json\nmodified: ../../yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Setting up Yarn Offline Mirror configuration\nDESCRIPTION: Bash commands to configure Yarn to use an offline mirror directory for storing downloaded dependency tarballs locally and enabling pruning of unused packages.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn config set yarn-offline-mirror ./npm-packages-offline-cache\nyarn config v0.23.2\nsuccess Set \"yarn-offline-mirror\" to \"./npm-packages-offline-cache\".\n✨  Done in 0.06s.\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Shell Script - Nightly Build\nDESCRIPTION: Downloads and executes the Yarn installation script for the nightly version using the --nightly flag.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash -s -- --nightly\n```\n\n----------------------------------------\n\nTITLE: Configuring nohoist in Child Project package.json\nDESCRIPTION: This snippet illustrates how to configure nohoist rules in a child project's package.json file, preventing react-native and its dependencies from being hoisted.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-02-15-nohoist.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workspaces\": {\n  \"nohoist\": [\"react-native\", \"react-native/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pruning for Yarn Offline Mirror cache\nDESCRIPTION: A Yarn configuration command that enables automatic pruning of the offline mirror to remove tarballs that are no longer needed by the project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn config set yarn-offline-mirror-pruning true\nyarn config v0.23.2\nsuccess Set \"yarn-offline-mirror-pruning\" to \"true\".\n✨  Done in 0.06s.\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Yarn Version\nDESCRIPTION: Downloads and executes the Yarn installation script for a specific version using the --version flag.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version [version]\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Nohoist in Yarn Workspaces\nDESCRIPTION: Commands to disable the nohoist feature in Yarn workspaces by setting the workspaces-nohoist-experimental configuration flag to false using either .yarnrc file or the yarn config command.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-02-15-nohoist.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn config set workspaces-nohoist-experimental false\n```\n\n----------------------------------------\n\nTITLE: Moving Yarn configuration to project level\nDESCRIPTION: Bash command to move the Yarn configuration file from the user's home directory to the project root, making the offline mirror settings project-specific.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mv ~/.yarnrc ./\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn on Solus using eopkg\nDESCRIPTION: This command installs the stable version of Yarn package manager on Solus using the eopkg package manager. It requires sudo privileges to execute.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/solus.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo eopkg install yarn\n```\n\n----------------------------------------\n\nTITLE: Displaying Monorepo Structure with Version Conflicts (Focused Install)\nDESCRIPTION: Illustrates the directory structure of a monorepo with version conflicts after running 'yarn install --focus', showing how it handles conflicting dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-05-18-focused-workspaces.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n| my_project/\n|      package.json\n|      node_modules/\n|          A/ (symlink to packages/A)\n|          B/ (symlink to packages/B)\n|          External/ (v2)\n|      packages/\n|          A/\n|              node_modules/\n|                  External (v1)\n|                  B/\n|                      node_modules/\n|                          External/ (v2)\n|          B/\n|              node_modules/ (empty)\n```\n\n----------------------------------------\n\nTITLE: Verifying the lockfile with offline mirror\nDESCRIPTION: The regenerated yarn.lock file that still has the same dependencies and resolutions as before, but now works with the offline mirror cache.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\nis-array@^1.0.1:\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/is-array/-/is-array-1.0.1.tgz#e9850cc2cc860c3bc0977e84ccf0dd464584279a\"\n\nleft-pad@^1.1.3:\n  version \"1.1.3\"\n  resolved \"https://registry.yarnpkg.com/left-pad/-/left-pad-1.1.3.tgz#612f61c033f3a9e08e939f1caebeea41b6f3199a\"\n\nmime-db@~1.25.0:\n  version \"1.25.0\"\n  resolved \"https://registry.yarnpkg.com/mime-db/-/mime-db-1.25.0.tgz#c18dbd7c73a5dbf6f44a024dc0d165a1e7b1c392\"\n\nmime-types@^2.1.13:\n  version \"2.1.13\"\n  resolved \"https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.13.tgz#e07aaa9c6c6b9a7ca3012c69003ad25a39e92a88\"\n  dependencies:\n    mime-db \"~1.25.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via RPM Repository on openSUSE\nDESCRIPTION: Commands to add the Yarn RPM repository, import GPG key, and install Yarn package on openSUSE Linux. This process uses zypper package manager to handle the installation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/opensuse.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg\nsudo zypper ar -f https://dl.yarnpkg.com/rpm/ Yarn\nsudo zypper in yarn\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Yarn Path for Execution\nDESCRIPTION: Instructs Yarn to use a specific binary for execution, useful for ensuring consistency across a team. Requires Yarn >= 1.0 for all developers. Value must be a relative file path, or false to disable.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn-path \"./bin/yarn\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VSTS Package Feed URL Structure\nDESCRIPTION: Shows the URL format for a private package feed in Visual Studio Team Services. This URL is used to access the registry.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-16-supporting-more-registries.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// Package feed URL\nhttps://$ACCOUNT_NAME.pkgs.visualstudio.com/_packaging/$FEED_NAME/npm/registry\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Nightly Build via Shell Script\nDESCRIPTION: A curl command to download and execute the Yarn installation script with the nightly build flag.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/nightly.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash -s -- --nightly\n```\n\n----------------------------------------\n\nTITLE: Setting Child Process Concurrency for Node Module Building\nDESCRIPTION: Controls how many child processes run in parallel to build node modules. Setting to 1 causes sequential building, which can avoid linker errors on Windows with node-gyp.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/yarnrc.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nchild-concurrency #number#\n```\n\n----------------------------------------\n\nTITLE: Configuring custom-host-suffix in .npmrc for VSTS\nDESCRIPTION: Demonstrates how to set the 'custom-host-suffix' option in the .npmrc file to allow Yarn to recognize VSTS URLs as belonging to the same registry.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-16-supporting-more-registries.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncustom-host-suffix='pkgs.visualstudio.com'\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via MacPorts on macOS\nDESCRIPTION: This command uses MacPorts to install Yarn. It will also install Node.js if not already present. Requires sudo privileges to execute.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/mac.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo port install yarn\n```\n\n----------------------------------------\n\nTITLE: Extracting Package Dependencies in JavaScript\nDESCRIPTION: This function retrieves the dependencies of a specified package by fetching the package archive, extracting its package.json file, and converting dependency information into a standardized {name, reference} format. It handles cases where packages might not have dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// This function reads a file stored within an archive\nimport { readPackageJsonFromArchive } from './utilities';\n\nasync function getPackageDependencies({ name, reference }) {\n  let packageBuffer = await fetchPackage({ name, reference });\n  let packageJson = JSON.parse(await readPackageJsonFromArchive(packageBuffer));\n\n  // Some packages have no dependency field\n  let dependencies = packageJson.dependencies || {};\n\n  // It's much easier for us to just keep using the same {name, reference}\n  // data structure across all of our code, so we convert it there.\n  return Object.keys(dependencies).map(name => {\n    return { name, reference: dependencies[name] };\n  });\n}\n\n// getPackageDependencies({name: \"react\", reference: \"15.6.1\"})\n//     → [{name: \"create-react-class\", reference: \"^15.6.0\"},\n//        {name: \"prop-types\", reference: \"^15.5.10\"}]\n```\n\n----------------------------------------\n\nTITLE: Creating Yarn Alias in Windows PowerShell\nDESCRIPTION: This snippet shows how to create a function and alias for a Yarn command in Windows PowerShell. It also includes an example of modifying the 'yarn' command to re-add the 'ls' functionality.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-19-adding-command-line-aliases-for-yarn.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-NpmPackageDistributionTags { yarn info --verbose --no-emoji @Args dist-tags }\nNew-Alias ynftag Get-NpmPackageDistributionTags\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# yarn broke 'ls'\n# Scope private do we don't call yarn recursively!\nfunction Private:yarn() {\n\t$modifiedArgs = @()\n\tforeach ( $arg in $args ) {\n\t\tif ( $arg -cmatch '^ls$' ) {\n\t\t\t$arg = 'list'\n\t\t}\n\t\t$modifiedArgs += $arg\n\t}\n\t& yarn $modifiedArgs\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Yarn via Homebrew on macOS\nDESCRIPTION: This command upgrades an existing Yarn installation to the latest version using Homebrew. Yarn will warn you if a new version is available.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/mac.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew upgrade yarn\n```\n\n----------------------------------------\n\nTITLE: Reading Package.json and Executing Dependency Tree Resolution in JavaScript\nDESCRIPTION: This script reads a package.json file, converts its dependencies to the required format, and then executes the getPackageDependencyTree function to generate a complete dependency tree.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolve } from 'path';\nimport util from 'util';\n\nlet cwd = process.argv[2] || process.cwd();\nlet packageJson = require(resolve(cwd, `package.json`));\n\npackageJson.dependencies = Object.keys(packageJson.dependencies || {}).map(\n  name => {\n    return { name, reference: packageJson.dependencies[name] };\n  }\n);\n\ngetPackageDependencyTree(packageJson).then(tree => {\n  console.log(util.inspect(tree, { depth: Infinity }));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Package Download in JavaScript\nDESCRIPTION: Basic function to download packages using node-fetch. Handles HTTP requests and returns buffer data for package downloads.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from 'node-fetch';\n\nasync function fetchPackage(reference) {\n  let response = await fetch(reference);\n\n  if (!response.ok) throw new Error(`Couldn't fetch package \"${reference}\"`);\n\n  return await response.buffer();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn Repository to RPM-based Linux Systems\nDESCRIPTION: This command adds the Yarn package repository to your system by downloading the repository configuration file and saving it to /etc/yum.repos.d/yarn.repo.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/centos.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n```\n\n----------------------------------------\n\nTITLE: Sample Package.json for Testing Circular Dependencies\nDESCRIPTION: A package.json file used to test the circular dependency handling in the enhanced algorithm. It includes a single dependency on babel-core with a wildcard version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"dependencies\": {\n        \"babel-core\": \"*\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Range Resolution Implementation\nDESCRIPTION: Function to resolve semver ranges to specific versions by querying the npm registry.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport semver from 'semver';\n\nasync function getPinnedReference({ name, reference }) {\n  if (semver.validRange(reference) && !semver.valid(reference)) {\n    let response = await fetch(`https://registry.yarnpkg.com/${name}`);\n    let info = await response.json();\n\n    let versions = Object.keys(info.versions);\n    let maxSatisfying = semver.maxSatisfying(versions, reference);\n\n    if (maxSatisfying === null)\n      throw new Error(\n        `Couldn't find a version matching \"${reference}\" for package \"${name}\"`\n      );\n\n    reference = maxSatisfying;\n  }\n\n  return { name, reference };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn with Yum or DNF Package Manager\nDESCRIPTION: These commands install Yarn using either yum or dnf package manager after the repositories have been configured. Choose the appropriate command based on your system's package manager.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/centos.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum install yarn\n## OR ##\nsudo dnf install yarn\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Package Linking in JavaScript\nDESCRIPTION: Core function to extract and link package dependencies recursively. Downloads package tarballs and extracts them to the correct locations in the node_modules directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function linkPackages({ name, reference, dependencies }, cwd) {\n  let dependencyTree = await getPackageDependencyTree({\n    name,\n    reference,\n    dependencies,\n  });\n\n  if (reference) {\n    let packageBuffer = await fetchPackage({ name, reference });\n    await extractNpmArchiveTo(packageBuffer, cwd);\n  }\n\n  await Promise.all(\n    dependencies.map(async dependency => {\n      await linkPackages(dependency, `${cwd}/node_modules/${dependency.name}`);\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Linking Implementation for NPM Packages\nDESCRIPTION: Enhanced version of the linker that handles package binaries by creating symlinks in the .bin directory. Processes bin entries from package.json and creates appropriate symlinks.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function linkPackages({ name, reference, dependencies }, cwd) {\n  await Promise.all(\n    dependencies.map(async ({ name, reference, dependencies }) => {\n      let target = `${cwd}/node_modules/${name}`;\n      let binTarget = `${cwd}/node_modules/.bin`;\n\n      await linkPackages({ name, reference, dependencies }, target);\n\n      let dependencyPackageJson = require(`${target}/package.json`);\n      let bin = dependencyPackageJson.bin || {};\n\n      if (typeof bin === `string`) bin = { [name]: bin };\n\n      for (let binName of Object.keys(bin)) {\n        let source = resolve(target, bin[binName]);\n        let dest = `${binTarget}/${binName}`;\n\n        await fs.mkdirp(`${cwd}/node_modules/.bin`);\n        await fs.symlink(relative(binTarget, source), dest);\n      }\n    })\n  );\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn on Arch Linux using pacman\nDESCRIPTION: This command installs Yarn package manager through Arch Linux's official package manager pacman. It requires administrative privileges to run.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/arch.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npacman -S yarn\n```\n\n----------------------------------------\n\nTITLE: Correct Peer Dependency Configuration for a React Plugin\nDESCRIPTION: The proper way to configure package.json for a React plugin using peer dependencies, ensuring that the plugin uses the same React instance as the parent application and preventing duplication in the dependency tree.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-04-18-dependencies-done-right.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-plugin\",\n  \"peerDependencies\": {\n    \"react\": \"^16.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Yarn Workspaces with Config Command\nDESCRIPTION: Command to enable the experimental Workspaces feature in Yarn prior to version 1.0. This adds a configuration setting to the .yarnrc file in the user's home directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-26-introducing-workspaces.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn config set workspaces-experimental true\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter that defines the page's metadata including ID, guide type, and layout settings for the documentation site.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: organization\nguide: yarn_organization\nlayout: guide\n---\n```\n\n----------------------------------------\n\nTITLE: Example npm package-lock.json Structure\nDESCRIPTION: A simplified example of npm's package-lock.json format showing a dependency tree with nuanced version resolution where packages 'a' and 'b' require the same semver range of package 'c' but receive different versions.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-06-04-yarn-import-package-lock.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package-lock.json (slightly simplified for clarity)\n{\n  \"name\": \"nuanced-dependency-tree\",\n  \"dependencies\": {\n    \"a\": {\n      \"version\": \"9.9.9\",\n      \"requires\": {\n        \"c\": \"^1.0.0\"\n      },\n      \"dependencies\": {\n        \"c\": {\n          \"version\": \"1.0.1\"\n        }\n      }\n    },\n    \"b\": {\n      \"version\": \"8.8.8\",\n      \"requires\": {\n        \"c\": \"^1.0.0\"\n      }\n    },\n    \"c\": {\n      \"version\": \"1.0.5\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workspaces Configuration with nohoist in package.json\nDESCRIPTION: This snippet shows the TypeScript flow type definition for the WorkspacesConfig object, which includes the new nohoist property for specifying packages that should not be hoisted.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-02-15-nohoist.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// flow type definition:\nexport type WorkspacesConfig = {\n  packages?: Array<string>,\n  nohoist?: Array<string>,\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Lead Paragraph Formatting\nDESCRIPTION: HTML markup for the lead paragraph that introduces the purpose of the organization documentation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"lead\">\n  Rules, guidelines, and documentation on Yarn contribution, processes, and\n  community.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency with Yarn's Offline Mirror\nDESCRIPTION: This example demonstrates adding the shelljs package as a dev dependency using Yarn, showing the command execution and the minimal changes made to package.json, yarn.lock, and the new files added to the offline mirror.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add shelljs@0.7.0 --dev\nyarn add v0.23.2\n[1/4] 🔍  Resolving packages...\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\n[4/4] 📃  Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 4 new dependencies.\n├─ interpret@1.0.1\n├─ rechoir@0.6.2\n└─ shelljs@0.7.0\n│  └─ glob@7.1.1\n✨  Done in 8.15s.\n\n$ git diff\ndiff --git a/package.json b/package.json\nindex 4619f16..7acb42f 100644\n--- a/package.json\n+++ b/package.json\n@@ -220,7 +220,7 @@\n     \"mock-fs\": \"^3.11.0\",\n     \"portfinder\": \"0.4.0\",\n     \"react\": \"~15.3.1\",\n-    \"shelljs\": \"0.6.0\",\n+    \"shelljs\": \"0.7.0\",\n     \"sinon\": \"^2.0.0-pre.2\"\n   }\n }\ndiff --git a/yarn.lock b/yarn.lock\nindex 11ce116..f5d81ba 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -1,1 +1,1 @@\n...\n-shelljs@0.6.0:\n-  version \"0.6.0\"\n-  resolved https://registry.yarnpkg.com/shelljs/-/shelljs-0.6.0.tgz#ce1ed837b4b0e55b5ec3dab84251ab9dbdc0c7ec\n+shelljs@0.7.0:\n+  version \"0.7.0\"\n+  resolved https://registry.yarnpkg.com/shelljs/-/shelljs-0.7.0.tgz#3f6f2e4965cec565f65ff3861d644f879281a576\n+  dependencies:\n+    glob \"^7.0.0\"\n+    interpret \"^1.0.0\"\n+    rechoir \"^0.6.2\"\n\n shellwords@^0.1.0:\n   version \"0.1.0\"\n\n$ git status\nOn branch testing-yarn\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   package.json\n    modified:   yarn.lock\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    yarn-offline-mirror/interpret-1.0.1.tgz\n    yarn-offline-mirror/rechoir-0.6.2.tgz\n    yarn-offline-mirror/shelljs-0.7.0.tgz\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces with nohoist in Root package.json\nDESCRIPTION: This example demonstrates how to configure workspaces with nohoist rules in the root package.json file of a monorepo project. It prevents react-native and its dependencies from being hoisted.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-02-15-nohoist.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"workspaces\": {\n  \"packages\": [\"packages/*\"],\n  \"nohoist\": [\"**/react-native\", \"**/react-native/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Variables in Markdown\nDESCRIPTION: This snippet demonstrates the use of a custom Markdown include directive to import variables, likely used for templating in the documentation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/pnp.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include vars.html %}\n```\n\n----------------------------------------\n\nTITLE: Running Yarn from a Standalone JS Bundle in CI Environments\nDESCRIPTION: This snippet shows how to use a standalone Yarn JavaScript bundle (distributed with releases) in CI systems without internet access, which allows for consistent dependency management across different operating systems.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnode ./yarn-0.23.2.js install\n```\n\n----------------------------------------\n\nTITLE: Displaying Monorepo Structure with Focused Yarn Install\nDESCRIPTION: Demonstrates the directory structure after running 'yarn install --focus' in package A, showing how it shallowly installs sibling dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-05-18-focused-workspaces.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n| my_project/\n|      package.json\n|      node_modules/\n|          A/ (symlink to packages/A)\n|          B/ (symlink to packages/B)\n|          External/\n|      packages/\n|          A/\n|              node_modules/\n|                  B/ (not a symlink. Pulled from registry. No need to build.)\n|          B/\n|              node_modules/ (empty)\n```\n\n----------------------------------------\n\nTITLE: Setting Child Process Concurrency in Yarn\nDESCRIPTION: Controls the number of parallel child processes used to build node modules. Setting this to 1 forces sequential module building, which can help avoid linker errors on Windows with node-gyp.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/envvars.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.CHILD_CONCURRENCY=#number#\n```\n\n----------------------------------------\n\nTITLE: Example SemVer Version Structure\nDESCRIPTION: Demonstrates the structure of semantic versioning using v1.2.3 as an example, breaking down the major, minor, and patch version components.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-12-01-lockfiles-for-all.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nv1.2.3\\n- Major (1.x.x) – Changes that may cause user code to break\\n- Minor (x.2.x) – Changes that add new features\\n- Patch (x.x.3) – Changes that are fixing bugs\n```\n\n----------------------------------------\n\nTITLE: Displaying Monorepo Structure with Version Conflicts (Regular Install)\nDESCRIPTION: Shows the directory structure of a monorepo with version conflicts between packages after a regular Yarn install.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-05-18-focused-workspaces.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n| my_project/\n|      package.json\n|      node_modules/\n|          A/ (symlink to packages/A)\n|          B/ (symlink to packages/B)\n|          External/ (v2)\n|      packages/\n|          A/\n|              node_modules/\n|                  External (v1)\n|          B/\n|              node_modules/ (empty)\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Dedupe Documentation\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining the ID, guide reference, and layout settings.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/dedupe.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: docs_cli_dedupe\nguide: docs_cli\nlayout: guide\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Yarn Alias in Fish Shell\nDESCRIPTION: This snippet demonstrates how to create an abbreviation and a function for Yarn commands in the Fish shell. It also shows how to persist the function definition.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-19-adding-command-line-aliases-for-yarn.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nabbr --add ynf yarn info --verbose --no-emoji\n```\n\nLANGUAGE: sh\nCODE:\n```\nfunction ynftag --wraps yarn --description \"yarn info --verbose --no-emoji <package> dist-tags\"\n  yarn info --verbose --no-emoji $argv dist-tags\nend\n```\n\nLANGUAGE: sh\nCODE:\n```\nfuncsave ynftag\n```\n\n----------------------------------------\n\nTITLE: Updating Yarn Lockfile Protocol References\nDESCRIPTION: Shell command to replace all HTTP protocol references with HTTPS in the yarn.lock file. This is a security mitigation step to prevent potential exposure of authentication data over unencrypted connections.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2019-07-12-recommended-security-update.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sed -i '' 's/http:/https:/g' yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Setting Yarn Configuration Value\nDESCRIPTION: Sets a configuration key to a specific value using the 'yarn config set' command. This example sets the 'init-license' key to 'BSD-2-Clause'.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/config.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn config set init-license BSD-2-Clause\nyarn config vx.x.x\nsuccess Set \"init-license\" to \"BSD-2-Clause\".\n✨  Done in 0.05s.\n```\n\n----------------------------------------\n\nTITLE: Creating Yarn Alias in Command Prompt\nDESCRIPTION: This snippet demonstrates how to create an alias for a Yarn command in the Windows Command Prompt. It also shows how to persist the alias by creating a custom configuration file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-19-adding-command-line-aliases-for-yarn.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndoskey ynftag=yarn info --verbose --no-emoji $* dist-tags\n```\n\nLANGUAGE: sh\nCODE:\n```\n@echo off\ndoskey ynftag=yarn info --verbose --no-emoji $* dist-tags\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler for Ruby Dependencies\nDESCRIPTION: Command to install Bundler, which is required to manage the Ruby dependencies for the Jekyll-based website.\nSOURCE: https://github.com/yarnpkg/website/blob/master/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ gem install bundler\n```\n\n----------------------------------------\n\nTITLE: Using Cache Folder Command Flag\nDESCRIPTION: Example of specifying a custom cache directory using the --cache-folder command line flag.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/cli/cache.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn <command> --cache-folder <path>\n```\n\n----------------------------------------\n\nTITLE: Illustrating VSTS Package Archive URL Structure\nDESCRIPTION: Displays the URL format for downloading a specific package archive from VSTS. This URL differs from the feed URL by using a GUID instead of the feed name.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-06-16-supporting-more-registries.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Package archive URL\nhttps://$ACCOUNT_NAME.pkgs.visualstudio.com/_packaging/da6e033f-20ad-4ee1-a784-8995dd6836b72/npm/registry/@scope/package-name/-/package-name-0.0.1.tgz\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Website with Make (Option 1)\nDESCRIPTION: Single make command that handles both installation of dependencies and serving the website locally.\nSOURCE: https://github.com/yarnpkg/website/blob/master/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ make\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt Rules and Sitemap\nDESCRIPTION: Defines crawler access rules for the Yarn website, blocking access to debug pages, paginated results, and package directories. Also specifies the location of the XML sitemap for search engine crawlers.\nSOURCE: https://github.com/yarnpkg/website/blob/master/robots.txt#2025-04-09_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /-debug/\nDisallow: /page*/\nDisallow: /*/packages/\n\nSitemap: http://sitemap.yarnpkg.com/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: Resolving Jest Environment in JavaScript\nDESCRIPTION: Demonstrates different approaches to resolve Jest environment modules dynamically. It shows unsafe and recommended methods for requiring modules based on configuration.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/pnp/troubleshooting.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(`jest-environment-${config.environment}`)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.resolve(`jest-environment-jsdom`)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(require.resolve(`jest-environment-${config.environment}`, {paths:[config.projectPath]}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Yarn Documentation Index Page in YAML\nDESCRIPTION: This YAML frontmatter configures the documentation index page for the Yarn package manager website. It defines the page ID as 'docs_index', specifies the layout as 'pages/docs', and includes the docsearch.js CSS for search functionality.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: docs_index\nlayout: pages/docs\nstylesheets: https://cdn.jsdelivr.net/docsearch.js/2/docsearch.min.css\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn Repository for Stable Version on Debian/Ubuntu\nDESCRIPTION: These commands add the Yarn package repository for the stable version to the system. It imports the GPG key and adds the repository to the sources list.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/debian.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n----------------------------------------\n\nTITLE: Installing Single Version of Package with Yarn\nDESCRIPTION: This command installs only one version of a package and its dependencies, even if multiple versions are specified. It's useful for ensuring consistency across the project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/installing-dependencies.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install --flat\n```\n\n----------------------------------------\n\nTITLE: Equivalent Converted yarn.lock Format\nDESCRIPTION: The simplified representation of how Yarn would import the above package-lock.json, demonstrating Yarn's limitation in expressing duplicate dependency resolutions where it chooses a single version (1.0.5) for all compatible ranges.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-06-04-yarn-import-package-lock.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n// yarn.lock (slightly simplified for clarity)\na@9.9.9\n  version \"9.9.9\"\n  dependencies:\n    c \"^1.0.0\"\n\nb@8.8.8\n  version \"8.8.8\"\n  dependencies:\n    c \"^1.0.0\"\n\nc@^1.0.0\n  version \"1.0.5\"\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn Repository for Release Candidate on Debian/Ubuntu\nDESCRIPTION: These commands add the Yarn package repository for the release candidate version to the system. It imports the GPG key and adds the repository to the sources list.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/debian.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ rc main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n```\n\n----------------------------------------\n\nTITLE: Force Re-downloading All Packages with Yarn\nDESCRIPTION: This command forces Yarn to re-download all packages, ignoring the cache. It's useful when you suspect cached packages might be corrupted or outdated.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/installing-dependencies.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install --force\n```\n\n----------------------------------------\n\nTITLE: Displaying Monorepo Structure with Regular Yarn Install\nDESCRIPTION: Shows the directory structure of a monorepo after a regular Yarn install, illustrating how packages are symlinked in the root node_modules folder.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-05-18-focused-workspaces.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n| my_project/\n|      package.json\n|      node_modules/\n|          A/ (symlink to packages/A)\n|          B/ (symlink to packages/B)\n|          External/\n|      packages/\n|          A/\n|              node_modules/ (empty)\n|          B/\n|              node_modules/ (empty)\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn on Debian/Ubuntu\nDESCRIPTION: This command updates the package list and installs Yarn on the system. It should be run after adding the Yarn repository.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/debian.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update && sudo apt install yarn\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependency Update Example\nDESCRIPTION: Shows how package.json is automatically updated when adding a new dependency.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  {\n    \"name\": \"my-package\",\n    \"dependencies\": {\n+     \"package-1\": \"^1.0.0\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Focused Install in .yarnrc\nDESCRIPTION: Shows how to configure a workspace to always use focused install by default using the .yarnrc file.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-05-18-focused-workspaces.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--install.focus true\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn without Node.js on Debian/Ubuntu\nDESCRIPTION: This command installs Yarn without the recommended Node.js package. It's useful when using nvm or when Node.js is already installed.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/debian.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update && sudo apt install --no-install-recommends yarn\n```\n\n----------------------------------------\n\nTITLE: Package.json Version Specification Example\nDESCRIPTION: Shows how different version specifications appear in package.json.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"package-1\": \"1.2.3\",\n    \"package-2\": \"^1.0.0\",\n    \"package-3\": \"beta\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces without nohoist in Root package.json\nDESCRIPTION: This example shows the configuration for workspaces without using nohoist, maintaining compatibility with the old workspaces format.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2018-02-15-nohoist.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"workspaces\": {\n  \"packages\": [\"packages/*\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js via Scoop on Windows\nDESCRIPTION: Command to install Node.js using Scoop when required as a prerequisite for Yarn installation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/windows.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nscoop install nodejs\n```\n\n----------------------------------------\n\nTITLE: Package.json Upgrade Example\nDESCRIPTION: Shows how package.json is updated when upgrading a dependency version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  {\n    \"name\": \"my-package\",\n    \"dependencies\": {\n-     \"package-1\": \"^1.0.0\"\n+     \"package-1\": \"^2.0.0\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Lerna to use Yarn Workspaces in a monorepo\nDESCRIPTION: This JSON configuration for Lerna specifies that it should use Yarn as the npm client and enable the useWorkspaces flag to utilize Yarn's workspace feature instead of Lerna's own package discovery.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-26-introducing-workspaces.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lerna\": \"2.0.0\",\n  \"npmClient\": \"yarn\",\n  \"useWorkspaces\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Portage on Gentoo Linux\nDESCRIPTION: This command installs the stable version of Yarn package manager using Gentoo's portage system. The '--ask' flag prompts for confirmation before proceeding with the installation.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/gentoo.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo emerge --ask sys-apps/yarn\n```\n\n----------------------------------------\n\nTITLE: Removing Package Dependencies\nDESCRIPTION: Command for removing a package dependency from the project.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/managing-dependencies.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn remove [package]\n```\n\n----------------------------------------\n\nTITLE: Enhanced Package Fetcher with Version Support\nDESCRIPTION: Extended package fetcher that supports semver versions and converts them to registry URLs.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport semver from 'semver';\n\nasync function fetchPackage({ name, reference }) {\n  if (semver.valid(reference))\n    return await fetchPackage({\n      name,\n      reference: `https://registry.yarnpkg.com/${name}/-/${name}-${reference}.tgz`,\n    });\n\n  // ... same code as before\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn via Shell Script - Stable Version\nDESCRIPTION: Downloads and executes the Yarn installation script for the stable version. The script includes GPG signature verification.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- -L https://yarnpkg.com/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Using Package Name in Yarn Command\nDESCRIPTION: Demonstrates how the package name is used in a Yarn command to add the package as a dependency.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add [name]\n```\n\n----------------------------------------\n\nTITLE: File System Support for Package Fetcher\nDESCRIPTION: Added filesystem path support to the package fetcher function using fs-extra.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'fs-extra';\n\nasync function fetchPackage({ name, reference }) {\n  // In a pure JS fashion, if it looks like a path, it must be a path.\n  if ([`/`, `./`, `../`].some(prefix => reference.startsWith(prefix)))\n    return await fs.readFile(reference);\n\n  // ... same code as before\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Yarn Installation via Tarball - Stable Version\nDESCRIPTION: Downloads and extracts the stable version of Yarn tarball to the /opt directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt\nwget https://yarnpkg.com/latest.tar.gz\ntar zvxf latest.tar.gz\n# Yarn is now in /opt/yarn-[version]/\n```\n\n----------------------------------------\n\nTITLE: Specifying Keywords for Package Search\nDESCRIPTION: Adds 'keywords' to package.json as an array of strings, which are used when searching for packages in package managers.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keywords\": [\"short\", \"relevant\", \"keywords\", \"for\", \"searching\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Package.json for Dependency Resolution Testing\nDESCRIPTION: A minimal package.json file used to test the dependency resolution algorithm. It includes a single dependency on tar-stream with a wildcard version.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-awesome-package\",\n  \"dependencies\": {\n    \"tar-stream\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Yarn Installation via Tarball - RC Version\nDESCRIPTION: Downloads and extracts the release candidate version of Yarn tarball to the /opt directory.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/tarball.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt\nwget https://yarnpkg.com/latest-rc.tar.gz\ntar zvxf latest-rc.tar.gz\n# Yarn is now in /opt/yarn-[version]/\n```\n\n----------------------------------------\n\nTITLE: Declaring Package License in package.json\nDESCRIPTION: Shows various ways to specify the 'license' field in package.json, including using SPDX license identifiers, custom license files, or declaring it as unlicensed.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"license\": \"MIT\",\n  \"license\": \"(MIT or GPL-3.0)\",\n  \"license\": \"SEE LICENSE IN LICENSE_FILENAME.txt\",\n  \"license\": \"UNLICENSED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Circular Dependency Handling in JavaScript\nDESCRIPTION: This enhanced version of the getPackageDependencyTree function includes a filtering mechanism to handle circular dependencies. It checks if a dependency is already available in the parent modules before resolving it.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-07-11-lets-dev-a-package-manager.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getPackageDependencyTree(\n  { name, reference, dependencies },\n  available = new Map()\n) {\n  return {\n    name,\n    reference,\n    dependencies: await Promise.all(\n      dependencies\n        .filter(volatileDependency => {\n          let availableReference = available.get(volatileDependency.name);\n\n          if (volatileDependency.reference === availableReference) return false;\n\n          if (\n            semver.validRange(volatileDependency.reference) &&\n            semver.satisfies(availableReference, volatileDependency.reference)\n          )\n            return false;\n\n          return true;\n        })\n        .map(async volatileDependency => {\n          let pinnedDependency = await getPinnedReference(volatileDependency);\n          let subDependencies = await getPackageDependencies(pinnedDependency);\n\n          let subAvailable = new Map(available);\n          subAvailable.set(pinnedDependency.name, pinnedDependency.reference);\n\n          return await getPackageDependencyTree(\n            Object.assign({}, pinnedDependency, {\n              dependencies: subDependencies,\n            }),\n            subAvailable\n          );\n        })\n    ),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Yarn PATH in Bash/ZSH\nDESCRIPTION: Adds Yarn installation directory to system PATH to enable global access. This configuration can be added to various profile files like .profile, .bash_profile, .bashrc, or .zshrc.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/unix_path_setup.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:/opt/yarn-[version]/bin\"\n```\n\n----------------------------------------\n\nTITLE: Adding Contributors to package.json\nDESCRIPTION: Shows how to specify multiple contributors in package.json, either as an array of objects or as an array of strings.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contributors\": [\n    { \"name\": \"Your Friend\", \"email\": \"friend@example.com\", \"url\": \"http://friends-website.com\" }\n    { \"name\": \"Other Friend\", \"email\": \"other@example.com\", \"url\": \"http://other-website.com\" }\n  ],\n  \"contributors\": [\n    \"Your Friend <friend@example.com> (http://friends-website.com)\",\n    \"Other Friend <other@example.com> (http://other-website.com)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining blog post metadata including layout, title, author information, and sharing details.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-05-31-determinism.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout     : post\ntitle      : \"Yarn determinism\"\nauthor     : Sebastian McKenzie\nauthor_url : \"https://twitter.com/sebmck\"\ndate       : 2017-05-31 09:00:00\ncategories : announcements\nshare_text : \"What does Yarn determinism actually mean?\"\n```\n\n----------------------------------------\n\nTITLE: Adding Yarn Global Bin to PATH in Bash/ZSH\nDESCRIPTION: Configures PATH to include Yarn's global binary directory, allowing access to globally installed package executables.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/_installations/unix_path_setup.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:`yarn global bin`\"\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options in package.json\nDESCRIPTION: Uses the 'config' field to specify configuration options or parameters that can be used in package scripts.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"port\": \"8080\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Yarn Lockfile Structure\nDESCRIPTION: Demonstrates the format of yarn.lock file showing how dependencies and their versions are tracked, including both direct and sub-dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-05-31-determinism.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhas-flag@^1.0.0:\n  version \"1.0.0\"\n  resolved \"https://registry.yarnpkg.com/has-flag/-/has-flag-1.0.0.tgz#9d9e793165ce017a00f00418c43f942a7b1d11fa\"\n\nsupports-color@^3.2.3:\n  version \"3.2.3\"\n  resolved \"https://registry.yarnpkg.com/supports-color/-/supports-color-3.2.3.tgz#65ac0504b3954171d8a64946b2ae3cbb8a5f54f6\"\n  dependencies:\n    has-flag \"^1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Signing Windows MSI Installer\nDESCRIPTION: Commands to Authenticode sign the Windows MSI installer with SHA1 and SHA2 signatures using a certificate and timestamp server.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/release-process.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nosslsigncode sign -t http://timestamp.digicert.com -n \"Yarn Installer\" -i https://yarnpkg.com/ -pkcs12 yarn-20161122.pfx -readpass yarn-20161122.key -h sha1 -in yarn-0.xx.xx-unsigned.msi -out yarn-0.xx.xx.msi\nosslsigncode sign -t http://timestamp.digicert.com -n \"Yarn Installer\" -i https://yarnpkg.com/ -pkcs12 yarn-20161122.pfx -readpass yarn-20161122.key -nest -h sha2 -in yarn-0.xx.xx.msi -out yarn-0.xx.xx.msi\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Peer Dependencies\nDESCRIPTION: Uses the 'peerDependenciesMeta' field to add metadata to peer dependencies, such as marking them as optional.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependenciesMeta\": {\n    \"package-3\": {\n      \"optional\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NPM 5 Package Lock Structure\nDESCRIPTION: Shows the JSON structure of npm 5's package-lock.json file, illustrating how it tracks dependencies and their metadata including integrity hashes.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2017-05-31-determinism.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"react-example\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1,\n  \"dependencies\": {\n    \"has-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-1.0.0.tgz\",\n      \"integrity\": \"sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo=\"\n    },\n    \"supports-color\": {\n      \"version\": \"3.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-3.2.3.tgz\",\n      \"integrity\": \"sha1-ZawFBLOVQXHYpklGsq48u4pfVPY=\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Nightly Builds Documentation Page in YAML\nDESCRIPTION: This YAML snippet defines the metadata for a documentation page about Yarn nightly builds. It specifies the page ID as 'docs_nightly', categorizes it under the 'docs_getting_started' guide, and sets the layout template to 'pages/nightly'.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/nightly.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: docs_nightly\nguide: docs_getting_started\nlayout: pages/nightly\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Resolutions in package.json for Yarn\nDESCRIPTION: Allows overriding versions of nested dependencies. This is useful for resolving version conflicts or specifying custom versions for transitive dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"transitive-package-1\": \"0.0.29\",\n    \"transitive-package-2\": \"file:./local-forks/transitive-package-2\",\n    \"dependencies-package-1/transitive-package-3\": \"^2.1.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a basic JavaScript project with dependencies in package.json\nDESCRIPTION: A simple package.json file that defines a JavaScript project named 'yarn-offline' with three dependencies: is-array, left-pad, and mime-types.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"yarn-offline\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"is-array\": \"^1.0.1\",\n    \"left-pad\": \"^1.1.3\",\n    \"mime-types\": \"^2.1.13\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Users Page Frontmatter in YAML\nDESCRIPTION: This YAML frontmatter configuration sets up the Yarn users page. It specifies the page ID as 'users' and designates the layout template as 'pages/users' for rendering the page content.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/users.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: users\nlayout: pages/users\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Publishing Options in package.json for Yarn\nDESCRIPTION: Specifies additional configuration options to be used when publishing the package. This can include settings like tags or registry information.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/package-json.md#2025-04-09_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"publishConfig\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining a Yarn lockfile with remote dependencies\nDESCRIPTION: The generated yarn.lock file that specifies exact versions, resolved URLs, and dependency relationships for the project's dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\nis-array@^1.0.1:\n  version \"1.0.1\"\n  resolved \"https://registry.yarnpkg.com/is-array/-/is-array-1.0.1.tgz#e9850cc2cc860c3bc0977e84ccf0dd464584279a\"\n\nleft-pad@^1.1.3:\n  version \"1.1.3\"\n  resolved \"https://registry.yarnpkg.com/left-pad/-/left-pad-1.1.3.tgz#612f61c033f3a9e08e939f1caebeea41b6f3199a\"\n\nmime-db@~1.25.0:\n  version \"1.25.0\"\n  resolved \"https://registry.yarnpkg.com/mime-db/-/mime-db-1.25.0.tgz#c18dbd7c73a5dbf6f44a024dc0d165a1e7b1c392\"\n\nmime-types@^2.1.13:\n  version \"2.1.13\"\n  resolved \"https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.13.tgz#e07aaa9c6c6b9a7ca3012c69003ad25a39e92a88\"\n  dependencies:\n    mime-db \"~1.25.0\"\n```\n\n----------------------------------------\n\nTITLE: Building Yarn from Source\nDESCRIPTION: Command to perform a one-off build of the Yarn package manager from source code.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/contributing.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Version Resolutions in package.json\nDESCRIPTION: This snippet demonstrates how to set up selective version resolutions in a package.json file. It shows the structure of the resolutions field and how to specify version overrides for specific packages and nested dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/docs/selective-version-resolutions.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"project\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"left-pad\": \"1.0.0\",\n    \"c\": \"file:../c-1\",\n    \"d2\": \"file:../d2-1\"\n  },\n  \"resolutions\": {\n    \"d2/left-pad\": \"1.1.1\",\n    \"c/**/left-pad\": \"^1.1.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining the offline mirror cache directory\nDESCRIPTION: A Bash command showing the contents of the offline mirror cache directory, which now contains the tarballs for all the project dependencies.\nSOURCE: https://github.com/yarnpkg/website/blob/master/_posts/2016-11-24-offline-mirror.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ls npm-packages-offline-cache/\nis-array-1.0.1.tgz    left-pad-1.1.3.tgz    mime-db-1.25.0.tgz    mime-types-2.1.13.tgz\n```\n\n----------------------------------------\n\nTITLE: Running All Tests and Linters\nDESCRIPTION: Command to execute both linting and test suites for the Yarn codebase.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/contributing.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Running Linter Only\nDESCRIPTION: Command to run just the linting checks on the Yarn codebase.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/contributing.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running Tests Only\nDESCRIPTION: Command to run just the test suite without linting checks.\nSOURCE: https://github.com/yarnpkg/website/blob/master/lang/en/org/contributing.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn test-only\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Website with Make (Option 2)\nDESCRIPTION: Two-step process using make commands to first install dependencies and then serve the website locally.\nSOURCE: https://github.com/yarnpkg/website/blob/master/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ make install\n$ make serve\n```"
  }
]