[
  {
    "owner": "vmagamedov",
    "repo": "grpclib",
    "content": "TITLE: Implementing Asynchronous gRPC Client in Python\nDESCRIPTION: This snippet demonstrates how to create an asynchronous gRPC client using grpclib. It establishes a channel connection, creates a stub, and makes a remote procedure call.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom grpclib.client import Channel\n\n# generated by protoc\nfrom .helloworld_pb2 import HelloRequest, HelloReply\nfrom .helloworld_grpc import GreeterStub\n\n\nasync def main():\n    async with Channel('127.0.0.1', 50051) as channel:\n        greeter = GreeterStub(channel)\n\n        reply = await greeter.SayHello(HelloRequest(name='Dr. Strange'))\n        print(reply.message)\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous gRPC Server in Python\nDESCRIPTION: This snippet shows how to create an asynchronous gRPC server using grpclib. It defines a service implementation, sets up a server, and starts it with graceful shutdown handling.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom grpclib.utils import graceful_exit\nfrom grpclib.server import Server\n\n# generated by protoc\nfrom .helloworld_pb2 import HelloReply\nfrom .helloworld_grpc import GreeterBase\n\n\nclass Greeter(GreeterBase):\n\n    async def SayHello(self, stream):\n        request = await stream.recv_message()\n        message = f'Hello, {request.name}!'\n        await stream.send_message(HelloReply(message=message))\n\n\nasync def main(*, host='127.0.0.1', port=50051):\n    server = Server([Greeter()])\n    # Note: graceful_exit isn't supported in Windows\n    with graceful_exit([server]):\n        await server.start(host, port)\n        print(f'Serving on {host}:{port}')\n        await server.wait_closed()\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Channel in Python\nDESCRIPTION: Creates a basic gRPC channel connection to a server using an async context manager.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with Channel(host, port) as channel:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Server Shutdown\nDESCRIPTION: Demonstrates proper server lifecycle management using graceful_exit context manager to handle SIGINT and SIGTERM signals. Includes server startup and wait for completion.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/server.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith graceful_exit([server]):\n    await server.start(host, port)\n    print(f'Serving on {host}:{port}')\n    await server.wait_closed()\n```\n\n----------------------------------------\n\nTITLE: Advanced Streaming RPC Call\nDESCRIPTION: Demonstrates a bidirectional streaming RPC call implementation with task queue processing and result handling.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync with stub.BiDiMethod.open() as stream:\n    await stream.send_request()  # needed to initiate a call\n    while True:\n        task = await task_queue.get()\n        if task is None:\n            await stream.end()\n            break\n        else:\n            await stream.send_message(task)\n            result = await stream.recv_message()\n            await result_queue.add(task)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Handling Best Practice\nDESCRIPTION: Example showing the recommended way to handle GRPCError outside the stream context manager.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    async with stub.SomeMethod.open() as stream:\n        await stream.send_message(Request(...))\n        reply = await stream.recv_message()\nexcept GRPCError as error:\n    print(error.status, error.message)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Details Handling\nDESCRIPTION: Example demonstrating how to catch and process GRPCError with error details on the client side.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.rpc.error_details_pb2 import BadRequest\n\ntry:\n    reply = await stub.Method(Request(...))\nexcept GRPCError as err:\n    if err.details:\n        for detail in err.details:\n            if isinstance(detail, BadRequest):\n                for violation in detail.field_violations:\n                    print(f'{violation.field}: {violation.description}')\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Event Listener in Python gRPC\nDESCRIPTION: Example shows how to listen for SendRequest events on a gRPC channel and modify request metadata. Uses the grpclib.events.listen function to attach an event handler to a Channel instance.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/events.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.events import SendRequest\n\nchannel = Channel()\n\nasync def send_request(event: SendRequest):\n    event.metadata['injected'] = 'successfully'\n\nlisten(channel, SendRequest, send_request)\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Server with Multiple Services\nDESCRIPTION: Creates a new Server instance with multiple service implementations registered. Shows how to combine multiple service handlers into a single server instance.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/server.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nserver = Server([foo_svc, bar_svc, baz_svc])\n```\n\n----------------------------------------\n\nTITLE: Server-Side Metadata Handling\nDESCRIPTION: Example of receiving and sending metadata in a gRPC service implementation\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Service(ServiceBase):\n\n    async def Method(self, stream):\n        print(stream.metadata)  # request metadata\n\n        await stream.send_initial_metadata(metadata={\n            'begin-time': current_time(),\n        })\n\n        request = await stream.recv_message()\n        ...\n        await stream.send_message(Reply())\n\n        await stream.send_trailing_metadata(metadata={\n            'end-time': current_time(),\n        })\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Event Listener in Python gRPC\nDESCRIPTION: Demonstrates how to listen for RecvRequest events on a gRPC server and access request metadata. Shows implementation of a server-side event handler using grpclib.events.listen.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/events.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.events import RecvRequest\n\nserver = Server([service])\n\nasync def recv_request(event: RecvRequest):\n    print(event.metadata.get('injected'))\n\nlisten(server, RecvRequest, recv_request)\n```\n\n----------------------------------------\n\nTITLE: Server-Side Error Details Implementation\nDESCRIPTION: Example showing how to raise a GRPCError with detailed error information using BadRequest from google.rpc.error_details_pb2.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google.rpc.error_details_pb2 import BadRequest\n\nasync def Method(self, stream):\n    ...\n    raise GRPCError(\n        Status.INVALID_ARGUMENT,\n        'Request validation failed',\n        [\n            BadRequest(\n                field_violations=[\n                    BadRequest.FieldViolation(\n                        field='title',\n                        description='This field is required',\n                    ),\n                ],\n            ),\n        ],\n    )\n```\n\n----------------------------------------\n\nTITLE: Managing Server Lifecycle with AsyncExitStack\nDESCRIPTION: Advanced server lifecycle management using AsyncExitStack for handling multiple async resources including database connections and graceful shutdown.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/server.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with AsyncExitStack() as stack:\n    db = await stack.enter_async_context(setup_db())\n    foo_svc = FooService(db)\n\n    server = Server([foo_svc])\n    stack.enter_context(graceful_exit([server]))\n    await server.start(host, port)\n    print(f'Serving on {host}:{port}')\n    await server.wait_closed()\n```\n\n----------------------------------------\n\nTITLE: Creating Secure gRPC Channel\nDESCRIPTION: Shows how to create a secure channel connection using SSL.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchannel = Channel(host, port, ssl=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Service-Specific Health Checks in Python\nDESCRIPTION: Setup of service-specific health checks with different check functions for different services.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/health.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfoo = FooService()\nbar = BarService()\n\nhealth = Health({\n    foo: [a_check, b_check],\n    bar: [b_check, c_check],\n})\n```\n\n----------------------------------------\n\nTITLE: Server-Side Request Cancellation Handling\nDESCRIPTION: Example showing how to handle request cancellation in a server implementation with proper cleanup.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Greeter(GreeterBase):\n    async def SayHello(self, stream):\n        try:\n            ...\n            await asyncio.sleep(1)  # cancel happens here\n            ...\n        finally:\n            pass  # cleanup\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Server with Custom Codec\nDESCRIPTION: Server-side implementation example showing how to create a PingService handler with custom JSON codec. Demonstrates handler mapping and service setup.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/encoding.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.const import Cardinality, Handler\nfrom grpclib.server import Server\n\nclass PingServiceHandler:\n\n    async def Ping(self, stream):\n        request = await stream.recv_message()\n        ...\n        await stream.send_message({'value': 'pong'})\n\n    def __mapping__(self):\n        return {\n            '/ping.PingService/Ping': Handler(\n                self.UnaryUnary,\n                Cardinality.UNARY_UNARY,\n                None,\n                None,\n            ),\n        }\n\nserver = Server([PingServiceHandler()], codec=JSONCodec())\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Client with Custom Codec\nDESCRIPTION: Client-side implementation example showing how to create a PingService stub with custom JSON codec. Demonstrates channel setup and method definition.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/encoding.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.client import Channel, UnaryUnaryMethod\n\nclass PingServiceStub:\n\n    def __init__(self, channel):\n        self.Ping = UnaryUnaryMethod(\n            channel,\n            '/ping.PingService/Ping',\n            None,\n            None,\n        )\n\nchannel = Channel(codec=JSONCodec())\nping_stub = PingServiceStub(channel)\n...\nawait ping_stub.Ping({'value': 'ping'})\n```\n\n----------------------------------------\n\nTITLE: Customizing SSL Certificate Path\nDESCRIPTION: Shows how to customize the SSL certificate file path using _replace method.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nssl.get_default_verify_paths()._replace(cafile=YOUR_CA_FILE)\n```\n\n----------------------------------------\n\nTITLE: Client-Side Stream Metadata Handling\nDESCRIPTION: Example of sending and receiving metadata in a streaming gRPC call from the client side\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync with stub.Method.open(metadata={'auth-token': auth_token}) as stream:\n    await stream.recv_initial_metadata()\n    print(stream.initial_metadata)\n\n    await stream.send_message(Request())\n    reply = await stream.recv_message()\n\n    await stream.recv_trailing_metadata()\n    print(stream.trailing_metadata)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Checks in Python\nDESCRIPTION: Implementation of health checks with custom check functions for overall server health monitoring.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/health.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.health.service import Health, OVERALL\n\nhealth = Health({OVERALL: [db_check, cache_check]})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Service Stubs with Single Channel\nDESCRIPTION: Demonstrates how to reuse a single channel for multiple service stubs when connecting to a server implementing multiple services.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfoo_svc = FooServiceStub(channel)\nbar_svc = BarServiceStub(channel)\nbaz_svc = BazServiceStub(channel)\n```\n\n----------------------------------------\n\nTITLE: Simple Unary RPC Call\nDESCRIPTION: Shows how to make a simple unary-unary RPC call using the stub method.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreply = await stub.Method(Request())\n```\n\n----------------------------------------\n\nTITLE: Calculating Deadline from Timeout in Python\nDESCRIPTION: Demonstrates how to convert a gRPC timeout value into a deadline using monotonic time. This is used to track remaining time for request processing.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndeadline = time.monotonic() + grpc_timeout\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Codec for gRPC\nDESCRIPTION: Implementation of a custom JSON codec by extending the CodecBase class. This codec handles encoding and decoding of messages using JSON format with UTF-8 encoding.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/encoding.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.encoding.base import CodecBase\n\nclass JSONCodec(CodecBase):\n    __content_subtype__ = 'json'\n\n    def encode(self, message, message_type):\n        return json.dumps(message, ensure_ascii=False).encode('utf-8')\n\n    def decode(self, data: bytes, message_type):\n        return json.loads(data.decode('utf-8'))\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Propagation Example\nDESCRIPTION: Demonstration of error handling in a streaming gRPC method call.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync with stub.SomeMethod.open() as stream:\n    await stream.send_message(Request(...))\n    reply = await stream.recv_message()  # gRPC error received during this call\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Server Health Check in Python\nDESCRIPTION: Basic setup of a gRPC health check service with no specific checks. This creates a health service that always returns SERVING status.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/health.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.health.service import Health\n\nhealth = Health()\n\nserver = Server(handlers + [health])\n```\n\n----------------------------------------\n\nTITLE: Configuring grpclib Channel with Custom HTTP/2 Window Size in Python\nDESCRIPTION: This snippet demonstrates how to create a Configuration object with a custom HTTP/2 connection window size and use it to initialize a grpclib Channel. It sets the window size to 1 MiB (2^20 bytes) and creates a Channel connected to localhost on port 50051.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/config.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib.config import Configuration\n\nconfig = Configuration(\n    http2_connection_window_size=2**20,  # 1 MiB\n)\nchannel = Channel('localhost', 50051, config=config)\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Health Check with grpc_health_probe\nDESCRIPTION: Command line example showing how to test the basic health check implementation using grpc_health_probe tool.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/health.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ grpc_health_probe -addr=localhost:50051\nhealthy: SERVING\n```\n\n----------------------------------------\n\nTITLE: Listing Service Methods\nDESCRIPTION: Demonstrates how to list all methods available in a specific gRPC service with detailed information including the proto file source.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/reflection.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ grpc_cli ls localhost:50051 helloworld.Greeter -l\nfilename: helloworld/helloworld.proto\npackage: helloworld;\nservice Greeter {\n  rpc SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Simple Metadata Sending\nDESCRIPTION: Example of sending metadata with a simple gRPC method call from the client side\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreply = await stub.Method(Request(), metadata={'auth-token': auth_token})\n```\n\n----------------------------------------\n\nTITLE: Describing Message Types\nDESCRIPTION: Shows how to inspect message type definitions in a gRPC service using the reflection API.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/reflection.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ grpc_cli type localhost:50051 helloworld.HelloRequest\nmessage HelloRequest {\n  string name = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SSL Verification Paths\nDESCRIPTION: Demonstrates how to configure SSL verification using default verify paths from the ssl module.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/client.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchannel = Channel(host, port, ssl=ssl.get_default_verify_paths())\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Stubs with protoc Plugin\nDESCRIPTION: This snippet demonstrates how to use the protoc compiler with the grpclib plugin to generate Python stub files from a .proto file. It generates both the protobuf and grpc stub files.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 -m grpc_tools.protoc -I. --python_out=. --grpclib_python_out=. helloworld/helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Interruption in Python gRPC\nDESCRIPTION: Shows how to interrupt event handling sequence and provide custom RPC handlers for authentication. Demonstrates using event.interrupt() to stop event propagation and handle authentication errors.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/events.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def authn_error(stream):\n    raise GRPCError(Status.UNAUTHENTICATED)\n\nasync def recv_request(event: RecvRequest):\n    if event.metadata.get('auth-token') != SECRET:\n        # provide custom RPC handler\n        event.method_func = authn_error\n        event.interrupt()\n\nlisten(server, RecvRequest, recv_request)\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC Testing Module (Python)\nDESCRIPTION: Shows the module reference for grpclib testing functionality that enables in-memory testing of gRPC services using ChannelFor.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: grpclib.testing\n    :members: ChannelFor\n```\n\n----------------------------------------\n\nTITLE: Listing Available gRPC Services\nDESCRIPTION: Shows how to list all available services on a gRPC server using grpc_cli command line tool.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/reflection.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ grpc_cli ls localhost:50051\nhelloworld.Greeter\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Overall Health Check with Service-Specific Checks\nDESCRIPTION: Example showing how to override overall health checks while maintaining service-specific checks.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/health.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfoo = FooService()\nbar = BarService()\n\nhealth = Health({\n    foo: [a_check, b_check],\n    bar: [b_check, c_check],\n    OVERALL: [a_check, c_check],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Error Details\nDESCRIPTION: Command to install the googleapis-common-protos package needed for rich error details support.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip3 install googleapis-common-protos\n```\n\n----------------------------------------\n\nTITLE: Basic Text Metadata Format Example\nDESCRIPTION: Example showing how regular text metadata is formatted in HTTP headers\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nauth-token: 0d16ad85-6ce4-4773-a1be-9f62b2e886a3\n```\n\n----------------------------------------\n\nTITLE: Text Metadata Python Dictionary Format\nDESCRIPTION: Example showing how text metadata is represented in Python as strings\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\"auth-token\": \"0d16ad85-6ce4-4773-a1be-9f62b2e886a3\"}\n```\n\n----------------------------------------\n\nTITLE: Binary Metadata Format Example\nDESCRIPTION: Example showing how binary metadata is formatted with -bin suffix and base64 encoding\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nauth-token-bin: DRathWzkR3Ohvp9isuiGow\n```\n\n----------------------------------------\n\nTITLE: Binary Metadata Python Dictionary Format\nDESCRIPTION: Example showing how binary metadata is represented in Python as bytes\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/metadata.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\"auth-token-bin\": b\"\\r\\x16\\xad\\x85l\\xe4Gs\\xa1\\xbe\\x9fb\\xb2\\xe8\\x86\\xa3\"}\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Methods\nDESCRIPTION: Demonstrates how to make a direct call to a gRPC method using grpc_cli with a formatted request message.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/reflection.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ grpc_cli call localhost:50051 helloworld.Greeter.SayHello \"name: 'Dr. Strange'\"\nconnecting to localhost:50051\nmessage: \"Hello, Dr. Strange!\"\n\nRpc succeeded with OK status\n```\n\n----------------------------------------\n\nTITLE: Testing Service-Specific Health Checks with grpc_health_probe\nDESCRIPTION: Commands demonstrating how to test service-specific health checks using grpc_health_probe tool.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/health.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ grpc_health_probe -addr=localhost:50051 -service acme.FooService\nhealthy: SERVING\n$ grpc_health_probe -addr=localhost:50051 -service acme.BarService\nhealthy: NOT_SERVING\n$ grpc_health_probe -addr=localhost:50051\nhealthy: NOT_SERVING\n```\n\n----------------------------------------\n\nTITLE: Installing grpclib and Dependencies\nDESCRIPTION: This snippet provides commands for installing grpclib with protobuf support, as well as the protoc compiler for code generation. It includes options for both pip installation and system package installation.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pip3 install \"grpclib[protobuf]\"\n\n$ brew install protobuf  # example for macOS users\n$ protoc --version\nlibprotoc ...\n\n$ pip3 install grpcio-tools\n$ python3 -m grpc_tools.protoc --version\nlibprotoc ...\n```\n\n----------------------------------------\n\nTITLE: Computing Remaining Timeout for Chained Service Calls\nDESCRIPTION: Shows how to calculate remaining timeout duration for downstream service calls by comparing current time against the deadline. Ensures timeout propagation across service chains.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnew_timeout = max(deadline - time.monotonic(), 0)  # == 80ms\n```\n\n----------------------------------------\n\nTITLE: Unknown Error Details Format\nDESCRIPTION: Example showing how unimported error detail messages appear in the error details list.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/errors.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUnknown('google.rpc.QuotaFailure')\n```\n\n----------------------------------------\n\nTITLE: Visualizing gRPC Client-Server Communication Flow\nDESCRIPTION: A text-based diagram showing the sequence of operations in a gRPC interaction, including message sending, receiving, and metadata transmission between client and server. The diagram highlights automatic operations and explains the options for ending a client stream.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/diagram.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGO: https://swimlanes.io\n\nNote Client: `send_request` *[auto]*\nClient -> Server: `HEADERS` frame\nNote Server: request accepted\n\nNote Client: `send_message`\nClient -> Server: `DATA` ... `DATA` frames\nNote Server:\n`recv_message`\n\nNote Client Server:\nNow you have to end stream from the client-side, and you can do this in two\nways:\n1. `send_message(message, end=True)` - last `DATA` frame will contain\n   `END_STREAM` flag\n2. `end()` - one extra frame will be sent, as shown below. It is better to\n   avoid this way if possible.\n\nNote Client: `end` *(optional, read note above)*\nClient -> Server: `HEADERS[END_STREAM]` frame\n\nNote Server: `send_initial_metadata` *[auto]* You can send initial metadata\neven before receiving messages from the client. RPC success or failure in gRPC\nprotocol is indicated in trailers.\nClient <- Server: `HEADERS` frame\nNote Client: `recv_initial_metadata` *[auto]*\n\nNote Server: `send_message`\nClient <- Server: `DATA` ... `DATA` frames\nNote Client: `recv_message`\n\nNote Server: `send_trailing_metadata` *[auto]*\nClient <- Server: `HEADERS` frame as trailers\nNote Client: `recv_trailing_metadata` *[auto]*\n```\n\n----------------------------------------\n\nTITLE: Importing Status and GRPCError in Python\nDESCRIPTION: Example of how to import the Status and GRPCError classes from grpclib after they were exposed in new import locations in version 0.3.2.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/changelog/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom grpclib import Status, GRPCError\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for grpclib Project\nDESCRIPTION: This snippet specifies the exact versions of Python packages required for the grpclib project. It includes h2, hpack, hyperframe, and multidict, along with their respective versions and the reason for their inclusion.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/setup.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nh2==4.1.0                 # via grpclib (setup.py)\nhpack==4.0.0              # via h2\nhyperframe==6.0.1         # via h2\nmultidict==6.0.5          # via grpclib (setup.py)\n```\n\n----------------------------------------\n\nTITLE: Pip Requirements Configuration for grpclib Runtime Dependencies\nDESCRIPTION: Specifies exact versions of Python packages required for the grpclib project runtime. Generated via pip-compile from requirements/runtime.in file. Includes essential packages like certifi, googleapis-common-protos, h2, and protobuf.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/requirements/runtime.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncertifi==2024.2.2         # via -r requirements/runtime.in\ngoogleapis-common-protos==1.63.0  # via -r requirements/runtime.in\nh2==4.1.0                 # via -r requirements/../setup.txt\nhpack==4.0.0              # via -r requirements/../setup.txt, h2\nhyperframe==6.0.1         # via -r requirements/../setup.txt, h2\nmultidict==6.0.5          # via -r requirements/../setup.txt\nprotobuf==4.25.3          # via -r requirements/runtime.in, googleapis-common-protos\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Documentation Structure in RST\nDESCRIPTION: Creates a hidden toctree for changelog and overview pages.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :hidden:\n\n  changelog/index\n  overview\n```\n\n----------------------------------------\n\nTITLE: Organizing Usage Documentation in RST\nDESCRIPTION: Defines a toctree for usage-related documentation pages, including client, server, metadata, testing, and errors.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :caption: Usage\n  :hidden:\n\n  client\n  server\n  metadata\n  testing\n  errors\n```\n\n----------------------------------------\n\nTITLE: Structuring Advanced Topics in RST Documentation\nDESCRIPTION: Creates a toctree for advanced documentation topics, including configuration, events, encoding, health, and reflection.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :caption: Advanced\n  :hidden:\n\n  config\n  events\n  encoding\n  health\n  reflection\n```\n\n----------------------------------------\n\nTITLE: Python Requirements File With Package Dependencies\nDESCRIPTION: Comprehensive list of Python package dependencies automatically generated by pip-compile. Includes direct dependencies and their transitive requirements with pinned versions. Contains packages needed for release builds of the project.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/requirements/release.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.8\n# by the following command:\n#\n#    pip-compile --annotation-style=line requirements/release.in\n#\nbackports-tarfile==1.1.0  # via jaraco-context\ncertifi==2024.2.2         # via requests\ncffi==1.16.0              # via cryptography\ncharset-normalizer==3.3.2  # via requests\ncryptography==42.0.5      # via secretstorage\ndocutils==0.20.1          # via readme-renderer\ngrpcio==1.62.1            # via grpcio-tools\ngrpcio-tools==1.62.1      # via -r requirements/release.in\nh2==4.1.0                 # via -r requirements/../setup.txt\nhpack==4.0.0              # via -r requirements/../setup.txt, h2\nhyperframe==6.0.1         # via -r requirements/../setup.txt, h2\nidna==3.7                 # via requests\nimportlib-metadata==7.1.0  # via keyring, twine\nimportlib-resources==6.4.0  # via keyring\njaraco-classes==3.4.0     # via keyring\njaraco-context==5.3.0     # via keyring\njaraco-functools==4.0.0   # via keyring\njeepney==0.8.0            # via keyring, secretstorage\nkeyring==25.1.0           # via twine\nmarkdown-it-py==3.0.0     # via rich\nmdurl==0.1.2              # via markdown-it-py\nmore-itertools==10.2.0    # via jaraco-classes, jaraco-functools\nmultidict==6.0.5          # via -r requirements/../setup.txt\nmypy-protobuf==3.6.0      # via -r requirements/release.in\nnh3==0.2.17               # via readme-renderer\npkginfo==1.10.0           # via twine\nprotobuf==4.25.3          # via grpcio-tools, mypy-protobuf\npycparser==2.22           # via cffi\npygments==2.17.2          # via readme-renderer, rich\nreadme-renderer==43.0     # via twine\nrequests==2.31.0          # via requests-toolbelt, twine\nrequests-toolbelt==1.0.0  # via twine\nrfc3986==2.0.0            # via twine\nrich==13.7.1              # via twine\nsecretstorage==3.3.3      # via keyring\ntwine==5.0.0              # via -r requirements/release.in\ntypes-protobuf==4.25.0.20240417  # via mypy-protobuf\ntyping-extensions==4.11.0  # via rich\nurllib3==2.2.1            # via requests, twine\nwheel==0.43.0             # via -r requirements/release.in\nzipp==3.18.1              # via importlib-metadata, importlib-resources\n\n# The following packages are considered to be unsafe in a requirements file:\n# setuptools\n```\n\n----------------------------------------\n\nTITLE: Pip Requirements Listing for Python gRPC Project\nDESCRIPTION: Auto-generated requirements file listing Python package dependencies with pinned versions. Includes test dependencies and their sub-dependencies, generated using pip-compile from requirements/test.in.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/requirements/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.8\n# by the following command:\n#\n#    pip-compile --annotation-style=line requirements/test.in\n#\nasync-timeout==4.0.3      # via -r requirements/test.in\ncertifi==2024.2.2         # via -r requirements/runtime.in\ncoverage[toml]==7.4.4     # via pytest-cov\nexceptiongroup==1.2.0     # via pytest\nfaker==24.11.0            # via -r requirements/test.in\ngoogleapis-common-protos==1.63.0  # via -r requirements/runtime.in\nh2==4.1.0                 # via -r requirements/../setup.txt\nhpack==4.0.0              # via -r requirements/../setup.txt, h2\nhyperframe==6.0.1         # via -r requirements/../setup.txt, h2\niniconfig==2.0.0          # via pytest\nmultidict==6.0.5          # via -r requirements/../setup.txt\npackaging==24.0           # via pytest\npluggy==1.4.0             # via pytest\nprotobuf==4.25.3          # via -r requirements/runtime.in, googleapis-common-protos\npytest==8.1.1             # via -r requirements/test.in, pytest-asyncio, pytest-cov\npytest-asyncio==0.23.6    # via -r requirements/test.in\npytest-cov==5.0.0         # via -r requirements/test.in\npython-dateutil==2.9.0.post0  # via faker\nsix==1.16.0               # via python-dateutil\ntomli==2.0.1              # via coverage, pytest\ntyping-extensions==4.11.0  # via faker\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Specifications\nDESCRIPTION: A pip requirements file generated via pip-compile specifying exact versions of project dependencies including gRPC tools, protocol buffers, HTTP/2 libraries, and development tools like mypy and flake8. The file combines runtime and check requirements with specific version pins.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/requirements/check.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncertifi==2024.2.2         # via -r requirements/runtime.in\nflake8==7.0.0             # via -r requirements/check.in\ngoogleapis-common-protos==1.63.0  # via -r requirements/runtime.in\ngrpcio==1.62.1            # via grpcio-tools\ngrpcio-tools==1.62.1      # via -r requirements/check.in\nh2==4.1.0                 # via -r requirements/../setup.txt\nhpack==4.0.0              # via -r requirements/../setup.txt, h2\nhyperframe==6.0.1         # via -r requirements/../setup.txt, h2\nmccabe==0.7.0             # via flake8\nmultidict==6.0.5          # via -r requirements/../setup.txt\nmypy==1.9.0               # via -r requirements/check.in\nmypy-extensions==1.0.0    # via mypy\nmypy-protobuf==3.6.0      # via -r requirements/check.in\nprotobuf==4.25.3          # via -r requirements/runtime.in, googleapis-common-protos, grpcio-tools, mypy-protobuf\npycodestyle==2.11.1       # via flake8\npyflakes==3.2.0           # via flake8\ntomli==2.0.1              # via mypy\ntypes-certifi==2021.10.8.3  # via -r requirements/check.in\ntypes-protobuf==4.25.0.20240417  # via mypy-protobuf\ntyping-extensions==4.11.0  # via mypy\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: Auto-generated pip requirements file that specifies exact versions of Python packages needed for documentation. Includes core dependencies for Sphinx documentation system, HTTP/2 implementation (h2, hpack, hyperframe), and various support libraries.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.8\n# by the following command:\n#\n#    pip-compile --annotation-style=line requirements/docs.in\n#\nalabaster==0.7.13         # via sphinx\nbabel==2.14.0             # via sphinx\ncertifi==2024.2.2         # via -r requirements/runtime.in, requests\ncharset-normalizer==3.3.2  # via requests\ndocutils==0.20.1          # via sphinx, sphinx-rtd-theme\ngoogleapis-common-protos==1.63.0  # via -r requirements/runtime.in\nh2==4.1.0                 # via -r requirements/../setup.txt\nhpack==4.0.0              # via -r requirements/../setup.txt, h2\nhyperframe==6.0.1         # via -r requirements/../setup.txt, h2\nidna==3.7                 # via requests\nimagesize==1.4.1          # via sphinx\nimportlib-metadata==7.1.0  # via sphinx\njinja2==3.1.3             # via sphinx\nmarkupsafe==2.1.5         # via jinja2\nmultidict==6.0.5          # via -r requirements/../setup.txt\npackaging==24.0           # via sphinx\nprotobuf==4.25.3          # via -r requirements/runtime.in, googleapis-common-protos\npygments==2.17.2          # via sphinx\npytz==2024.1              # via babel\nrequests==2.31.0          # via sphinx\nsnowballstemmer==2.2.0    # via sphinx\nsphinx==7.1.2             # via -r requirements/docs.in, sphinx-rtd-theme, sphinxcontrib-jquery\nsphinx-rtd-theme==2.0.0   # via -r requirements/docs.in\nsphinxcontrib-applehelp==1.0.4  # via sphinx\nsphinxcontrib-devhelp==1.0.2  # via sphinx\nsphinxcontrib-htmlhelp==2.0.1  # via sphinx\nsphinxcontrib-jquery==4.1  # via sphinx-rtd-theme\nsphinxcontrib-jsmath==1.0.1  # via sphinx\nsphinxcontrib-qthelp==1.0.3  # via sphinx\nsphinxcontrib-serializinghtml==1.1.5  # via sphinx\nurllib3==2.2.1            # via requests\nzipp==3.18.1              # via importlib-metadata\n```\n\n----------------------------------------\n\nTITLE: Including README in RST Documentation\nDESCRIPTION: Includes the project's README file into the documentation.\nSOURCE: https://github.com/vmagamedov/grpclib/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../README.rst\n```"
  }
]