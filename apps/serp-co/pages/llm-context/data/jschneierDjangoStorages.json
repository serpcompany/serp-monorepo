[
  {
    "owner": "jschneier",
    "repo": "django-storages",
    "content": "TITLE: IAM Policy Definition for S3 Access in JSON\nDESCRIPTION: This JSON snippet represents an IAM policy that grants an IAM user permissions to perform various actions on an S3 bucket, including putting objects, getting object ACLs, getting objects, listing the bucket, deleting objects, and putting object ACLs. The policy specifies the AWS account ID and user name, as well as the resource ARN for the S3 bucket and its contents.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/amazon-S3.rst#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObjectAcl\",\n                \"s3:GetObject\",\n                \"s3:ListBucket\",\n                \"s3:DeleteObject\",\n                \"s3:PutObjectAcl\"\n            ],\n            \"Principal\": {\n                \"AWS\": \"arn:aws:iam::example-AWS-account-ID:user/example-user-name\"\n            },\n            \"Resource\": [\n                \"arn:aws:s3:::example-bucket-name/*\",\n                \"arn:aws:s3:::example-bucket-name\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage with Azurite\nDESCRIPTION: This snippet illustrates how to configure Django Storages to use Azurite, the Azure Storage Emulator, for local development. It uses a connection string that points to the local Azurite instance.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.azure_storage.AzureStorage\",\n        \"OPTIONS\": {\n            \"connection_string\": \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;\",\n            \"azure_container\": \"media\",\n        },\n    },\n    \"staticfiles\": {\n        \"BACKEND\": \"storages.backends.azure_storage.AzureStorage\",\n        \"OPTIONS\": {\n            \"connection_string\": \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;\",\n            \"azure_container\": \"static\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Libcloud Providers in Django settings\nDESCRIPTION: This code snippet demonstrates how to configure multiple Libcloud providers within the Django settings file. Each provider definition includes the provider type, user credentials, key, and bucket name.  The type argument specifies the libcloud.storage.types.Provider value representing the cloud provider.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLIBCLOUD_PROVIDERS = {\n    'amazon_1': {\n        'type': 'libcloud.storage.types.Provider.S3_US_STANDARD_HOST',\n        'user': '<your username here>',\n        'key': '<your key here>',\n        'bucket': 'bucket-1',\n    },\n    'amazon_2': {\n        'type': 'libcloud.storage.types.Provider.S3_US_STANDARD_HOST',\n        'user': '<your username here>',\n        'key': '<your key here>',\n        'bucket': 'bucket-2',\n    },\n    'google': {\n        'type': 'libcloud.storage.types.Provider.GOOGLE_STORAGE',\n        'user': '<Your Google APIv1 username>',\n        'key': '<Your Google APIv1 Key>',\n        'bucket': 'bucket-3',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Storage URL with Parameters in Python\nDESCRIPTION: This code snippet shows how to generate an Azure Storage URL using the AzureStorage class and specify parameters like 'content_type'. The parameters are passed as a dictionary to the url() method, which handles adding them as query parameters in the generated URL, and are incorporated into the shared access signature (SAS) token if using a private URL.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\naz_storage = AzureStorage()\naz_url = az_storage.url(blob_name, parameters={'content_type': 'text/html;'})\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Storage in Django >= 4.2\nDESCRIPTION: This code snippet demonstrates how to configure FTP storage for media files in Django 4.2 and later. It uses the `STORAGES` setting to define a storage backend with the `storages.backends.ftp.FTPStorage` backend and specifies configuration options in the `OPTIONS` dictionary. Replace `...your_options_here` with the actual FTP settings.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/ftp.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.ftp.FTPStorage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Static Files Storage Configuration for Django >= 4.2\nDESCRIPTION: This snippet demonstrates how to configure Django to store static files on S3 when using Django version 4.2 or higher. It uses the `STORAGES` setting and includes the `staticfiles` key to define the S3 backend for static files and its options.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/amazon-S3.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.s3.S3Storage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n    \"staticfiles\": {\n        \"BACKEND\": \"storages.backends.s3.S3Storage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Create a bucket using LibCloudStorage\nDESCRIPTION: This code snippet demonstrates how to create a storage bucket using the LibCloudStorage backend.  It initializes the storage backend with a specific provider configuration ('amazon_1' in this case) and then utilizes the driver to create a container (bucket). It requires the storages package and a configured Libcloud provider.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from storages.backends.apache_libcloud import LibCloudStorage\n>>> store = LibCloudStorage('amazon_1')\n>>> store.driver.create_container('bucket-1')\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage with Managed Identity\nDESCRIPTION: This code demonstrates how to configure Django Storages to use Azure Managed Identity for authentication, importing `DefaultAzureCredential` and configuring the storage backend with account name and container information.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom azure.identity import DefaultAzureCredential\n\n...\n\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.azure_storage.AzureStorage\",\n        \"OPTIONS\": {\n            \"token_credential\": DefaultAzureCredential(),\n            \"account_name\": \"mystorageaccountname\",\n            \"azure_container\": \"media\",\n        },\n    },\n    \"staticfiles\": {\n        \"BACKEND\": \"storages.backends.azure_storage.AzureStorage\",\n        \"OPTIONS\": {\n            \"token_credential\": DefaultAzureCredential(),\n            \"account_name\": \"mystorageaccountname\",\n            \"azure_container\": \"static\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure SFTP storage in Django >= 4.2\nDESCRIPTION: This snippet shows how to configure SFTP storage using the STORAGES setting introduced in Django 4.2. The BACKEND is set to the SFTPStorage class, and connection options are passed through the OPTIONS dictionary. Replace ...your_options_here with your actual configuration.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/sftp.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.sftpstorage.SFTPStorage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Storage in Django < 4.2 (Media Files)\nDESCRIPTION: This code snippet shows how to configure FTP storage for media files in Django versions prior to 4.2. It uses the `DEFAULT_FILE_STORAGE` setting to specify the `storages.backends.ftp.FTPStorage` backend. Configuration options for the storage backend would need to be handled through subclassing.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/ftp.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_FILE_STORAGE = \"storages.backends.ftp.FTPStorage\"\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Configuration for Django >= 4.2\nDESCRIPTION: This snippet shows how to configure Django to use S3 for storing media files when using Django version 4.2 or higher. It uses the `STORAGES` setting with the 'default' key to define the S3 backend and its associated options.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/amazon-S3.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.s3.S3Storage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Define a default Libcloud provider named 'default'\nDESCRIPTION: This snippet demonstrates how to configure a Libcloud provider with the key 'default'. If DEFAULT_LIBCLOUD_PROVIDER is not explicitly set, the Libcloud backend will assume a provider named 'default' exists. This approach simplifies configuration by avoiding the need to set an explicit default provider.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLIBCLOUD_PROVIDERS = {\n    'default': {\n        'type': ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FTP Storage in Django < 4.2 (Static Files)\nDESCRIPTION: This code snippet demonstrates how to configure FTP storage for static files in Django versions prior to 4.2. It uses the `STATICFILES_STORAGE` setting to specify the `storages.backends.ftp.FTPStorage` backend. This configuration is used when running the `collectstatic` command.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/ftp.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSTATICFILES_STORAGE = \"storages.backends.ftp.FTPStorage\"\n```\n\n----------------------------------------\n\nTITLE: Set Libcloud as the default file storage backend (Django >= 4.2)\nDESCRIPTION: This snippet configures the STORAGES setting in Django 4.2 or later to use LibCloudStorage as the default backend. It uses a dictionary structure where the key \"default\" maps to a dictionary containing the \"BACKEND\" key set to the LibCloudStorage class path.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\"default\": {\"BACKEND\": \"storages.backends.apache_libcloud.LibCloudStorage\"}}\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Storages from Source using pip\nDESCRIPTION: This command installs the django-storages package directly from the GitHub repository. This is useful for installing bugfixes or features that have not yet been released to PyPI. The `-e` flag installs the package in editable mode.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/README.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -e 'git+https://github.com/jschneier/django-storages.git#egg=django-storages'\n```\n\n----------------------------------------\n\nTITLE: Configure CA certificate path in settings.py\nDESCRIPTION: This snippet shows how to add a custom path to the CA_CERTS_PATH used by Libcloud. This is necessary when the system's default certificate store doesn't contain the required certificates.  The libcloud.security module needs to be imported.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport libcloud.security\nlibcloud.security.CA_CERTS_PATH.append(\"/path/to/your/cacerts.pem\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage for Media Files (Django >= 4.2)\nDESCRIPTION: This configuration snippet demonstrates how to define a storage backend for media files in Django 4.2 or later, using the `storages.backends.azure_storage.AzureStorage` backend and passing options such as account name and container name.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.azure_storage.AzureStorage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone SFTP storage usage with context manager\nDESCRIPTION: This code snippet demonstrates how to use SFTPStorage directly (outside Django's settings) as a context manager, ensuring the SSH connection is properly closed after use. This is important for releasing resources.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/sftp.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom storages.backends.sftpstorage import SFTPStorage\n\nwith SFTPStorage(...) as sftp:\n    sftp.listdir(\"\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud Credentials using service_account.Credentials\nDESCRIPTION: This code initializes Google Cloud credentials using a service account key file. It imports the necessary module from the google.oauth2 library and then uses the from_service_account_file method to load the credentials.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/gcloud.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom google.oauth2 import service_account\n\nGS_CREDENTIALS = service_account.Credentials.from_service_account_file(\n    \"path/to/credentials.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set default Libcloud provider in Django settings\nDESCRIPTION: This snippet shows how to define the default Libcloud provider using the DEFAULT_LIBCLOUD_PROVIDER setting. Setting this value to the key of a configured provider in LIBCLOUD_PROVIDERS makes it the default for storage operations. It simplifies using Libcloud as the primary storage backend.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_LIBCLOUD_PROVIDER = 'amazon-1'\n```\n\n----------------------------------------\n\nTITLE: Obtaining a refresh token from Dropbox using curl\nDESCRIPTION: This curl command is used to exchange an authorization code for a refresh token, which is required for authenticating with the Dropbox API using an app key and secret.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/dropbox.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -u APP_KEY:APP_SECRET \\\n-d \"code=AUTHORIZATION_CODE&grant_type=authorization_code\" \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-X POST \"https://api.dropboxapi.com/oauth2/token\"\n```\n\n----------------------------------------\n\nTITLE: Set Libcloud as the default file storage backend (Django < 4.2)\nDESCRIPTION: This code sets the DEFAULT_FILE_STORAGE setting to use the LibCloudStorage backend.  This setting configures Django to use Libcloud for all default file storage operations.  This approach is applicable to Django versions prior to 4.2.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_FILE_STORAGE = 'storages.backends.apache_libcloud.LibCloudStorage'\n```\n\n----------------------------------------\n\nTITLE: Check for missing CA Certificates\nDESCRIPTION: This Python snippet shows how to test if CA certificates are properly configured for Libcloud. If certificates are missing, a traceback is raised indicating a CA_CERTS_PATH error.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from storages.backends.apache_libcloud import LibCloudStorage\n>>> store = LibCloudStorage('amazon_1')\nTraceback (most recent call last):\n...\nImproperlyConfigured: Unable to create libcloud driver type libcloud.storage.types.Provider.S3_US_STANDARD_HOST: No CA Certificates were found in CA_CERTS_PATH.\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Configuration for Django < 4.2 (DEFAULT_FILE_STORAGE)\nDESCRIPTION: This snippet shows how to configure Django to use S3 for storing media files when using Django versions lower than 4.2. It uses the `DEFAULT_FILE_STORAGE` setting to point to the S3 storage backend.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/amazon-S3.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_FILE_STORAGE = \"storages.backends.s3.S3Storage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring STORAGES for Google Cloud on Django >= 4.2\nDESCRIPTION: This snippet demonstrates how to configure the STORAGES setting in Django 4.2 or later to use Google Cloud Storage as the default file storage backend. It includes setting the BACKEND to the appropriate class and configuring OPTIONS.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/gcloud.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.gcloud.GoogleCloudStorage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring STATICFILES_STORAGE for Google Cloud on Django < 4.2\nDESCRIPTION: This code configures Django's STATICFILES_STORAGE to utilize Google Cloud Storage for storing static files in Django versions before 4.2. This facilitates the use of collectstatic command for uploading static assets to GCS.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/gcloud.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSTATICFILES_STORAGE = \"storages.backends.gcloud.GoogleCloudStorage\"\n```\n\n----------------------------------------\n\nTITLE: Example Dropbox refresh token response\nDESCRIPTION: Example JSON response from the Dropbox API after exchanging an authorization code for a refresh token.  The refresh_token field contains the token needed for configuring django-storages.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/dropbox.rst#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"access_token\": \"sl.************************\",\n   \"token_type\": \"bearer\",\n   \"expires_in\": 14400,\n   \"refresh_token\": \"************************\",\n   \"scope\": <SCOPES>,\n   \"uid\": \"************************\",\n   \"account_id\": \"dbid:************************\"\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Static Files Storage Configuration for Django < 4.2\nDESCRIPTION: This snippet shows how to configure Django to store static files on S3 when using Django versions lower than 4.2. It uses the `STATICFILES_STORAGE` setting to point to the S3 storage backend for static files.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/amazon-S3.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSTATICFILES_STORAGE = \"storages.backends.s3.S3Storage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DEFAULT_FILE_STORAGE for Google Cloud on Django < 4.2\nDESCRIPTION: This snippet shows how to set the DEFAULT_FILE_STORAGE setting in older Django versions (prior to 4.2) to use the Google Cloud Storage backend. It directly assigns the backend class to the setting.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/gcloud.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nDEFAULT_FILE_STORAGE = \"storages.backends.gcloud.GoogleCloudStorage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage for Media Files (Django < 4.2)\nDESCRIPTION: This configuration snippet shows how to define the default file storage backend for media files in Django versions prior to 4.2, utilizing the `storages.backends.azure_storage.AzureStorage` backend.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_FILE_STORAGE = \"storages.backends.azure_storage.AzureStorage\"\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration for S3 Connections in Python\nDESCRIPTION: This snippet demonstrates how to configure proxy settings for connecting to S3 using a dictionary format. It shows how to specify proxy servers for different protocols and hostnames.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/amazon-S3.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox storage for Django >= 4.2\nDESCRIPTION: Example configuration for storing media files on Dropbox in Django versions 4.2 and above, using the STORAGES setting to define the storage backend and its options.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/dropbox.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"storages.backends.dropbox.DropboxStorage\",\n        \"OPTIONS\": {\n          ...your_options_here\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage for Static Files (Django < 4.2)\nDESCRIPTION: This snippet demonstrates how to configure the storage backend for static files in Django versions before 4.2, using the `storages.backends.azure_storage.AzureStorage` backend for use with `collectstatic`.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSTATICFILES_STORAGE = \"storages.backends.azure_storage.AzureStorage\"\n```\n\n----------------------------------------\n\nTITLE: Installing django-storages with Google Cloud Support using pip\nDESCRIPTION: This command installs the django-storages package from PyPI along with the google extra, which includes necessary dependencies for Google Cloud Storage integration.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/gcloud.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install django-storages[google]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox storage for Django < 4.2 (default file storage)\nDESCRIPTION: Example configuration for storing media files on Dropbox in Django versions prior to 4.2, using the DEFAULT_FILE_STORAGE setting to specify the storage backend.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/dropbox.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nDEFAULT_FILE_STORAGE = \"storages.backends.dropbox.DropboxStorage\"\n```\n\n----------------------------------------\n\nTITLE: Installing Django-Storages from PyPI using pip\nDESCRIPTION: This command installs the django-storages package from the Python Package Index (PyPI) using the pip package installer. This is the recommended method for installing the library in most cases.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/README.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-storages\n```\n\n----------------------------------------\n\nTITLE: Installing django-storages with pip\nDESCRIPTION: This command installs the django-storages package from PyPI using pip, the Python package installer. It is a prerequisite for using any of the custom storage backends provided by django-storages.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-storages\n```\n\n----------------------------------------\n\nTITLE: Configure SFTP storage in Django < 4.2\nDESCRIPTION: This snippet shows how to configure SFTP storage in older Django versions prior to 4.2. It uses the DEFAULT_FILE_STORAGE setting to point to the SFTPStorage backend.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/sftp.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDEFAULT_FILE_STORAGE = \"storages.backends.sftpstorage.SFTPStorage\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox storage for Django < 4.2 (static files)\nDESCRIPTION: Example configuration for storing static files on Dropbox in Django versions prior to 4.2, using the STATICFILES_STORAGE setting.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/dropbox.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSTATICFILES_STORAGE = \"storages.backends.dropbox.DropboxStorage\"\n```\n\n----------------------------------------\n\nTITLE: Install Apache Libcloud using pip\nDESCRIPTION: This command installs the Apache Libcloud package from PyPI using pip, a package installer for Python. This is a prerequisite for using Libcloud with Django Storages.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/apache_libcloud.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install apache-libcloud\n```\n\n----------------------------------------\n\nTITLE: Configure staticfiles storage for SFTP in Django < 4.2\nDESCRIPTION: This shows how to configure static files storage to SFTP in Django versions before 4.2, using the STATICFILES_STORAGE setting.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/sftp.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nSTATICFILES_STORAGE = \"storages.backends.sftpstorage.SFTPStorage\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control HTTP Response Header\nDESCRIPTION: This code shows how to set the Cache-Control HTTP response header for files stored in Azure Blob Storage.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncache_control: \"public,max-age=31536000,immutable\"\n```\n\n----------------------------------------\n\nTITLE: Installing django-storages with Dropbox support\nDESCRIPTION: This command installs the django-storages library along with the necessary dependencies for Dropbox integration using pip.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/dropbox.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install django-storages[dropbox]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SDK for Django Storages\nDESCRIPTION: This command installs the Azure SDK along with the necessary dependencies for Django Storages, enabling integration with Azure Blob Storage.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install django-storages[azure]\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity Package\nDESCRIPTION: This command installs the Azure Identity package, which is required for using Managed Identity authentication with Azure Storage.\nSOURCE: https://github.com/jschneier/django-storages/blob/master/docs/backends/azure.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install azure-identity\n```"
  }
]