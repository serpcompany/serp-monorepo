[
  {
    "owner": "meltano",
    "repo": "sdk",
    "content": "TITLE: Implementing a REST Stream with Custom JSONPath\nDESCRIPTION: Python code example showing how to override the default records_jsonpath in a RESTStream class to handle custom JSON response structures.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass EntityStream(RESTStream):\n    \"\"\"Entity stream from a generic REST API.\"\"\"\n    records_jsonpath = \"$.data.records[*]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Schema for a Singer SDK Tap in Python\nDESCRIPTION: This example demonstrates how to define a configuration schema for a Singer SDK tap using the typing helpers. It shows defining required and optional properties with different data types, default values, and descriptive titles.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/config-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk import Tap\nfrom singer_sdk import typing as th\n\n\nclass MyTap(Tap):\n    name = \"my-tap\"\n\n    config_jsonschema = th.PropertiesList(\n        th.Property(\"api_key\", th.StringType(nullable=False), required=True, title=\"API Key\"),\n        th.Property(\"base_url\", th.StringType(nullable=True), default=\"https://api.example.com\", title=\"Base URL\"),\n        th.Property(\"start_date\", th.DateTimeType(nullable=True), title=\"Start Date\"),\n    ).to_dict()\n```\n\n----------------------------------------\n\nTITLE: Registering SQL Datatype Handlers for x-sql-datatype Extension\nDESCRIPTION: Shows how to register type handlers for the x-sql-datatype JSON Schema extension. This approach allows direct mapping of specific JSON Schema properties to SQL column types using annotations.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-target.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom my_sqlalchemy_dialect import URI\n\n\nclass MyConnector(SQLConnector):\n    @functools.cached_property\n    def jsonschema_to_sql(self):\n        to_sql = JSONSchemaToSQL()\n        to_sql.register_sql_datatype_handler(\"smallint\", sa.types.SMALLINT)\n        return to_sql\n```\n\n----------------------------------------\n\nTITLE: Basic Singer State Structure Example in JavaScript\nDESCRIPTION: Demonstrates the basic structure of Singer state objects with bookmarks for multiple streams. Shows how state is tracked separately for different streams like 'orders' and 'customers'.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/state.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"bookmarks\": {\n    \"orders\": {\n      // 'orders' state stored here\n    },\n    \"customers\": {\n      // 'customers' state stored here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Array Type Mapping in SQLConnector\nDESCRIPTION: Shows how to override the jsonschema_to_sql property to register a custom type handler for arrays of numbers that maps to a VectorType. This approach enables support for specialized SQL types not covered by the default JSONSchemaToSQL implementation.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-target.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\nimport sqlalchemy as sa\nfrom singer_sdk import typing as th\nfrom singer_sdk.connectors import JSONSchemaToSQL, SQLConnector\n\nfrom my_sqlalchemy_dialect import VectorType\n\n\ndef custom_array_to_sql(jsonschema: dict) -> VectorType | sa.types.VARCHAR:\n    \"\"\"Custom mapping for arrays of numbers.\"\"\"\n    if items := jsonschema.get(\"items\"):\n        if items.get(\"type\") == \"number\":\n            return VectorType()\n\n    return sa.types.VARCHAR()\n\n\nclass MyConnector(SQLConnector):\n    @functools.cached_property\n    def jsonschema_to_sql(self):\n        to_sql = JSONSchemaToSQL.from_config(\n            self.config,\n            max_varchar_length=self.max_varchar_length,\n        )\n        to_sql.register_type_handler(\"array\", custom_array_to_sql)\n        return to_sql\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL-based Stream with Schema from File in Python\nDESCRIPTION: This example shows how to define a GraphQL-based stream for a Continents API. It includes stream configuration, schema loading from a file, and GraphQL query definition.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ContinentsStream(GraphQLStream):\n    \"\"\"Continents stream from the Countries API.\"\"\"\n\n    name = \"continents\"\n    primary_keys = [\"code\"]\n    replication_key = None  # Incremental bookmarks not needed\n\n    # Read JSON Schema definition from a text file:\n    schema_filepath = SCHEMAS_DIR / \"continents.json\"\n\n    # GraphQL API endpoint and query text:\n    url_base = \"https://countries.trevorblades.com/\"\n    query = \"\"\"\n        continents {\n            code\n            name\n        }\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Backoff using Response Headers in Python with Singer SDK\nDESCRIPTION: This example demonstrates how to use a response header to determine the wait time for retries. It overrides the backoff_wait_generator method to extract the 'Retry-After' header and use it as the wait value.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef backoff_wait_generator() -> Callable[..., Generator[int, Any, None]]:\n    def _backoff_from_headers(retriable_api_error):\n        response_headers = retriable_api_error.response.headers\n        return int(response_headers.get(\"Retry-After\", 0))\n\n    return self.backoff_runtime(value=_backoff_from_headers)\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent-Child Streams in Python using Meltano Tap SDK\nDESCRIPTION: This code snippet demonstrates how to implement parent-child streams using the Meltano Tap SDK. It shows the base GitlabStream class, the parent EpicsStream class with a get_child_context method, and the child EpicIssuesStream class with parent stream configuration.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/parent_streams.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GitlabStream(RESTStream):\n    # Base stream definition with auth and pagination logic\n    # This logic works for other base classes as well, including Stream, GraphQLStream, etc.\n\n\nclass EpicsStream(GitlabStream):\n\n    name = \"epics\"\n\n    # ...\n\n    def get_child_context(self, record: dict, context: Optional[dict]) -> dict:\n        \"\"\"Return a context dictionary for child streams.\"\"\"\n        return {\n            \"group_id\": record[\"group_id\"],\n            \"epic_id\": record[\"id\"],\n            \"epic_iid\": record[\"iid\"],\n        }\n\n\nclass EpicIssuesStream(GitlabStream):\n    # Note that this class inherits from the GitlabStream base class, and not from\n    # the EpicsStream class.\n\n    name = \"epic_issues\"\n\n    # EpicIssues streams should be invoked once per parent epic:\n    parent_stream_type = EpicsStream\n\n    # Assume epics don't have `updated_at` incremented when issues are changed:\n    ignore_parent_replication_keys = True\n\n    # Path is auto-populated using parent context keys:\n    path = \"/groups/{group_id}/epics/{epic_iid}/issues\"\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Response Validation in Python using Singer SDK\nDESCRIPTION: This snippet demonstrates how to override the validate_response() method in a RESTStream to handle non-conventional API error responses. It shows how to raise FatalAPIError for unrecoverable errors and RetriableAPIError for transient errors.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nfrom singer_sdk.exceptions import FatalAPIError, RetriableAPIError\nfrom singer_sdk.streams.rest import RESTStream\n\nclass CustomResponseValidationStream(RESTStream):\n    \"\"\"Stream with non-conventional error response.\"\"\"\n\n    url_base = \"https://badapi.test\"\n    name = \"non_conventional\"\n    schema = {\"type\": \"object\", \"properties\": {}}\n    path = \"/dummy\n\n    class StatusMessage(str, Enum):\n        \"\"\"Possible status messages.\"\"\"\n\n        OK = \"OK\"\n        ERROR = \"ERROR\"\n        UNAVAILABLE = \"UNAVAILABLE\"\n\n    def validate_response(self, response):\n        # Still catch error status codes\n        super().validate_response(response)\n\n        data = response.json()\n        if data[\"status\"] == self.StatusMessage.ERROR:\n            raise FatalAPIError(\"Error message found :(\") \n        if data[\"status\"] == self.StatusMessage.UNAVAILABLE:\n            raise RetriableAPIError(\"API is unavailable\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp-Based Incremental Replication in Python\nDESCRIPTION: Example implementation of a REST stream class that supports incremental replication using a timestamp field. The code demonstrates setting up replication keys, schema definition, and parameter handling for incremental syncs.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/incremental_replication.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CommentsStream(RESTStream):\n\n    replication_key = \"date_gmt\"\n    is_sorted = True\n\n    schema = th.PropertiesList(\n        th.Property(\"date_gmt\", th.DateTimeType(nullable=True), description=\"Date\"),\n    ).to_dict()\n\n    def get_url_params(self, context, next_page_token):\n        params = {}\n\n        starting_date = self.get_starting_timestamp(context)\n        if starting_date:\n            params[\"after\"] = starting_date.isoformat()\n\n        if next_page_token is not None:\n            params[\"page\"] = next_page_token\n\n        self.logger.info(\"QUERY PARAMS: %s\", params)\n        return params\n```\n\n----------------------------------------\n\nTITLE: Implementing Constant Retry Backoff in Python using Singer SDK\nDESCRIPTION: This snippet shows how to implement a constant retry backoff strategy by overriding the backoff_wait_generator method. It uses the backoff library to set a constant interval of 10 seconds between retries.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef backoff_wait_generator() -> Callable[..., Generator[int, Any, None]]:\n    return backoff.constant(interval=10)\n```\n\n----------------------------------------\n\nTITLE: Defining BATCH Message Structure for AWS S3 in JSON\nDESCRIPTION: This snippet demonstrates the structure of a BATCH message for AWS S3 storage, including the stream name, encoding format, and S3 file paths.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/batch.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"BATCH\",\n  \"stream\": \"users\",\n  \"encoding\": {\n    \"format\": \"jsonl\",\n    \"compression\": \"gzip\"\n  },\n  \"manifest\": [\n    \"s3://path/to/batch/file/1\",\n    \"s3://path/to/batch/file/2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Discovering Stream Schema from Parquet File in Python\nDESCRIPTION: This example shows how to dynamically detect the JSON schema for a stream by reading a Parquet file. It uses custom type conversion for Parquet to JSON Schema.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ParquetStream(Stream):\n    \"\"\"Stream class for Parquet streams.\"\"\"\n\n    #...\n\n    @property\n    def schema(self) -> dict:\n        \"\"\"Dynamically detect the json schema for the stream.\n        This is evaluated prior to any records being retrieved.\n        \"\"\"\n        properties: List[th.Property] = []\n        # Get a schema object using the parquet and pyarrow libraries\n        parquet_schema = pq.ParquetFile(self.filepath).schema_arrow\n\n        # Loop through each column in the schema object\n        for i in range(len(parquet_schema.names)):\n            # Get the column name\n            name = parquet_schema.names[i]\n            # Translate from the Parquet type to a JSON Schema type\n            dtype = get_jsonschema_type(str(parquet_schema.types[i]))\n\n            # Add the new property to our list\n            properties.append(th.Property(name, dtype))\n\n        # Return the list as a JSON Schema dictionary object\n        return th.PropertiesList(*properties).to_dict()\n```\n\n----------------------------------------\n\nTITLE: Creating a REST-based Stream with JSONPath in Python\nDESCRIPTION: This snippet demonstrates how to implement a REST-based stream for a Lord of the Rings API. It includes API configuration, authentication, and JSONPath for record extraction.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass LOTRCharactersStream(RESTStream):\n    \"\"\"Characters stream from the Lord of the Rings 'The One' API.\"\"\"\n\n    # Base REST API configuration\n    url_base = \"https://the-one-api.dev/v2\"\n    primary_keys = [\"_id\"]\n\n    # Endpoint configuration\n    path = \"/character\"\n    name = \"characters\"\n    records_jsonpath = \"$.docs[*]\"\n\n    @property\n    def authenticator(self):\n        return SimpleAuthenticator(\n            stream=self,\n            auth_headers={\n                \"Authorization\": f\"Bearer {self.config.get('api_key')}\",\n            },\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining Partitions for a Regionally Partitioned Stream in Python\nDESCRIPTION: This code snippet demonstrates how to override the Stream.partitions property to define partitions for a regionally partitioned stream. Each dictionary in the list represents a unique partition with a 'region' key.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/partitioning.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[{\"region\": \"us-east\"}, {\"region\": \"us-west\"}, ...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SQL to JSON Schema Type Mapping in Python\nDESCRIPTION: Demonstrates how to create a custom SQLToJSONSchema class that extends the default type mapping functionality. Includes examples for handling numeric types and custom vector types.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-tap.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\nfrom sqlalchemy import Numeric\nfrom singer_sdk import typing as th\nfrom singer_sdk.connectors import SQLConnector\nfrom singer_sdk.connectors.sql import SQLToJSONSchema\n\nfrom my_sqlalchemy_dialect import VectorType\n\n\nclass CustomSQLToJSONSchema(SQLToJSONSchema):\n    @functools.singledispatchmethod\n    def to_jsonschema(self, column_type):\n        return super().to_jsonschema(column_type)\n\n    @to_jsonschema.register\n    def custom_number_to_jsonschema(self, column_type: Numeric):\n        \"\"\"Override the default mapping for NUMERIC columns.\n\n        For example, a scale of 4 translates to a multipleOf 0.0001.\n        \"\"\"\n        return {\"type\": [\"number\"], \"multipleOf\": 10**-column_type.scale}\n\n    @to_jsonschema.register(VectorType)\n    def vector_to_json_schema(self, column_type):\n        \"\"\"Custom vector to JSON schema.\"\"\"\n        return th.ArrayType(th.NumberType()).to_dict()\n```\n\n----------------------------------------\n\nTITLE: Testing Incremental Import with State File\nDESCRIPTION: Shell commands demonstrating how to manually test incremental import by creating a state file and running the tap with specific configuration and state parameters.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/incremental_replication.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ echo '{\"bookmarks\": {\"documents\": {\"replication_key\": \"date_gmt\", \"replication_key_value\": \"2023-01-15T12:00:00.120000\"}}}' > state_test.json\n\n$ tap-my-example --config tap_config_test.json --state state_test.json\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Tap Class with Two Streams in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Tap class with two streams for a Countries GraphQL API. It includes the tap configuration and stream discovery method.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TapCountries(Tap):\n    \"\"\"\nSample tap for Countries GraphQL API. This tap has no\n    config options and does not require authentication.\n    \"\"\"\n    name = \"tap-countries\"\n    config_jsonschema = th.PropertiesList([]).to_dict()\n\n    def discover_streams(self) -> List[Stream]:\n        \"\"\"Return a list containing the two stream types.\"\"\"\n        return [\n            CountriesStream(tap=self),\n            ContinentsStream(tap=self),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Partitioned State Example in JSON\nDESCRIPTION: Shows how state is managed for partitioned streams, with separate bookmarks for different store IDs. Demonstrates tracking different replication key values for each partition with unique context objects.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/state.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bookmarks\": {\n    \"orders\": {\n      \"partitions\": [\n        {\n          \"context\": {\n            \"storeId\": 1\n          },\n          \"replication_key\": \"updatedAt\",\n          \"replication_key_value\": \"2021-01-02T0:00:00Z\"\n        },\n        {\n          \"context\": {\n            \"storeId\": 2\n          },\n          \"replication_key\": \"updatedAt\",\n          \"replication_key_value\": \"2021-01-01T00:00:00Z\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Singer Targets with Meltano SDK\nDESCRIPTION: Example of implementing standard tests for a Singer Target, including setup of test configuration and resource fixtures.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom typing import Dict, Any\n\nfrom singer_sdk.testing import get_target_test_class\n\nfrom example.target import TargetExample\n\nSAMPLE_CONFIG: Dict[str, Any] = {\n    # TODO: Initialize minimal target config\n}\n\n# Run standard built-in target tests from the SDK:\nStandardTargetTests = get_target_test_class(\n    target_class=TargetExample,\n    config=SAMPLE_CONFIG\n)\n\n\nclass TestTargetExample(StandardTargetTests):\n    \"\"\"Standard Target Tests.\"\"\"\n\n    @pytest.fixture()\n    def resource(self):\n        \"\"\"Generic external resource.\n\n        This fixture is useful for setup and teardown of external resources,\n        such output folders, tables, buckets etc. for use during testing.\n\n        Example usage can be found in the SDK samples test suite:\n        https://github.com/meltano/sdk/tree/main/tests/samples\n        \"\"\"\n        yield \"resource\"\n```\n\n----------------------------------------\n\nTITLE: Caching Authenticator Instance for Stream Requests in Python\nDESCRIPTION: This example shows how to make a stream reuse the same authenticator instance for all requests using Python's functools.cached_property decorator.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import cached_property\n\nfrom singer_sdk.authenticators import APIAuthenticatorBase\nfrom singer_sdk.streams import RESTStream\n\nclass CachedAuthStream(RESTStream):\n    \"\"\"A stream with singleton authenticator.\"\"\"\n\n    @cached_property\n    def authenticator(self) -> APIAuthenticatorBase:\n        \"\"\"Stream authenticator.\"\"\"\n        return APIAuthenticatorBase(stream=self)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Discovering Stream Schema from CSV in Python\nDESCRIPTION: This snippet demonstrates how to dynamically discover the schema for a stream by parsing a CSV file. It creates properties based on CSV headers.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nFAKECSV = \"\"\"\nHeader1,Header2,Header3\nval1,val2,val3\nval1,val2,val3\nval1,val2,val3\n\"\"\"\n\nclass ParquetStream(Stream):\n\n    @property\n    def schema(self):\n        \"\"\"Dynamically detect the json schema for the stream.\n        This is evaluated prior to any records being retrieved.\n        \"\"\"\n        properties: List[th.Property] = []\n        for header in FAKECSV.split(\"\\n\")[0].split(\",\"):\n            # Assume string type for all fields\n            properties.append(th.Property(header, th.StringType(nullable=True)))\n        return th.PropertiesList(*properties).to_dict()\n```\n\n----------------------------------------\n\nTITLE: Consistent Data Masking with Faker\nDESCRIPTION: Configuration for generating consistent masked values using seed instances to preserve relationships between tables and rows.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    # will always generate the same value for the same seed\n    first_name: fake.seed_instance(_['first_name']) or fake.first_name()\nfaker_config:\n  # IMPORTANT: `fake` is only available if the `faker` extra is installed\n  locale: en_US\n```\n\n----------------------------------------\n\nTITLE: Stream Mapping Configuration in YAML\nDESCRIPTION: Illustrates a complex stream mapping configuration in YAML. It includes transformations for the 'customers' stream, such as obfuscating phone numbers, removing email references, and adding new properties like email domain and hash.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  # Apply these transforms to the stream called 'customers'\n  customers:\n    # drop the PII field from RECORD and SCHEMA messages\n    email: __NULL__\n    # capture just the email domain\n    email_domain: owner_email.split('@')[-1]\n    # for uniqueness checks\n    email_hash: md5(config['hash_seed'] + owner_email)\n    # generate a fake phone number\n    phone_number: fake.phone_number()\nstream_map_config:\n  # hash outputs are not able to be replicated without the original seed:\n  hash_seed: 01AWZh7A6DzGm6iJZZ2T\nfaker_config:\n  # set specific seed\n  seed: 0\n  # set specific locales\n  locale:\n  - en_US\n  - en_GB\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Authenticator for All Streams in Python\nDESCRIPTION: This snippet demonstrates how to create a singleton authenticator that can be reused across all streams in a tap. It uses a custom SingletonAuthenticator class and a SingletonAuthStream.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk.authenticators import OAuthAuthenticator, SingletonMeta\nfrom singer_sdk.streams import RESTStream\n\nclass SingletonAuthenticator(OAuthAuthenticator, metaclass=SingletonMeta):\n    \"\"\"A singleton authenticator.\"\"\"\n\nclass SingletonAuthStream(RESTStream):\n    \"\"\"A stream with singleton authenticator.\"\"\"\n\n    @property\n    def authenticator(self) -> SingletonAuthenticator:\n        \"\"\"Stream authenticator.\"\"\"\n        return SingletonAuthenticator(stream=self)\n```\n\n----------------------------------------\n\nTITLE: Testing Singer Taps with Meltano SDK\nDESCRIPTION: Example of setting up standard tests for a Singer Tap using the SDK's test framework. Demonstrates configuration setup and test class generation.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom singer_sdk.testing import get_tap_test_class\n\nfrom example.tap import TapExample\n\nSAMPLE_CONFIG = {\n    \"start_date\": datetime.datetime.now(datetime.timezone.utc).strftime(\"%Y-%m-%d\")\n}\n\n\n# Run standard built-in tap tests from the SDK:\nTestTapExample = get_tap_test_class(\n    tap_class=TapExample,\n    config=SAMPLE_CONFIG\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Batch File Processing in Python\nDESCRIPTION: This snippet shows how to customize batch file processing in a target by implementing the process_batch_files method in a Sink class.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/batch.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MySink(Sink):\n    def process_batch_files(self, encoding, storage, files):\n        # process the batch files\n```\n\n----------------------------------------\n\nTITLE: Modifying stream's primary key in Meltano YAML configuration\nDESCRIPTION: YAML configuration example for modifying the primary key of the 'customers' stream, removing the original key and adding a new hashed key.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    # Remove the original Customer ID column\n    customer_id: __NULL__\n    # Add a new (and still unique) ID column\n    customer_id_hashed: md5(customer_id)\n    # Updated key to reflect the new name\n    __key_properties__:\n    - customer_id_hashed\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Properties in Python Stream Class\nDESCRIPTION: Demonstrates how to dynamically define primary keys and replication key in a Python Stream class using the @property decorator. This approach is used when these values need to be calculated or can change at runtime.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/python_tips.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DynamicSampleStream(Stream):\n    @property\n    def primary_keys(self):\n        \"\"\"Return primary key dynamically based on user inputs.\"\"\"\n        return self.config[\"primary_key\"]\n\n    @property\n    def replication_key(self):\n        \"\"\"Return replication key dynamically based on user inputs.\"\"\"\n        result = self.config.get(\"replication_key\")\n        if not result:\n            self.logger.warning(\"Danger: could not find replication key!\")\n        return result\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Stream Types in Python\nDESCRIPTION: This snippet demonstrates two ways to initialize a collection of tap streams with different types: directly in the discover_streams method and using a predefined list of stream types.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass TapCountries(Tap):\n    # ...\n    def discover_streams(self) -> List[Stream]:\n        \"\"\"Return a list containing one each of the two stream types.\"\"\"\n        return [\n            CountriesStream(tap=self),\n            ContinentsStream(tap=self),\n        ]\n```\n\nLANGUAGE: python\nCODE:\n```\n# Declare list of types here at the top of the file\nSTREAM_TYPES = [\n    CountriesStream,\n    ContinentsStream,\n]\n\nclass TapCountries(Tap):\n    # ...\n    def discover_streams(self) -> List[Stream]:\n        \"\"\"Return a list with one each of all defined stream types.\"\"\"\n        return [\n            stream_type(tap=self)\n            for stream_type in STREAM_TYPES\n        ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CLI Command in a Singer SDK Tap\nDESCRIPTION: Example of implementing a custom CLI command in a Singer tap class using the plugin_cli decorator. This specific example creates an 'update_schema' command that downloads and saves an OpenAPI schema from Shortcut's API.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/custom-clis.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# tap_shortcut/tap.py\n\nclass ShortcutTap(Tap):\n    \"\"\"Shortcut tap class.\"\"\"\n\n    @plugin_cli\n    def update_schema(cls) -> click.Command:\n        \"\"\"Update the OpenAPI schema for this tap.\"\"\"\n        @click.command()\n        def update():\n            response = requests.get(\n                \"https://developer.shortcut.com/api/rest/v3/shortcut.swagger.json\",\n                timeout=5,\n            )\n            with Path(\"tap_shortcut/openapi.json\").open(\"w\") as f:\n                f.write(response.text)\n\n        return update\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Properties Example in YAML\nDESCRIPTION: Demonstrates how to enable flattening of nested properties in a YAML configuration file. It sets the flattening_enabled flag to true and specifies a max depth of 1 to flatten only top-level properties.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflattening_enabled: true\nflattening_max_depth: 1   # flatten only top-level properties\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tests in Meltano SDK\nDESCRIPTION: Example of creating custom test cases by extending the base test templates and creating custom test suites.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TapCLIPrintsTest(TapTestTemplate):\n    \"Test that the tap is able to print standard metadata.\"\n    name = \"cli_prints\"\n\n    def test(self):\n        self.tap.print_version()\n        self.tap.print_about()\n        self.tap.print_about(format=\"json\")\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_custom_tap_tests = TestSuite(\n    kind=\"tap\", tests=[TapCLIPrintsTest]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Stream as Sorted for Resumable Progress in Python\nDESCRIPTION: Shows how to mark a stream as sorted by setting the is_sorted attribute to True. This indicates that records are monotonically increasing, allowing for resumable syncs if interrupted and proper state file updates.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyStream(Stream):\n    is_sorted = True\n```\n\n----------------------------------------\n\nTITLE: Running Singer Tap in Sync Mode with Auto-Discovery\nDESCRIPTION: Demonstrates how to run a tap in sync mode with automatic schema discovery by providing a config file. Shows syntax for both Poetry and uv package managers.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry install && \\\npoetry run tap-mysource \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv sync && \\\nuv run tap-mysource \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n```\n\n----------------------------------------\n\nTITLE: Removing all fields except one from a stream in Meltano YAML configuration\nDESCRIPTION: YAML configuration example for removing all fields from the 'customers' stream except 'customer_id' using the __else__ instruction.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    customer_id: customer_id\n    __else__: __NULL__\n```\n\n----------------------------------------\n\nTITLE: HATEOAS Pagination - New Implementation\nDESCRIPTION: Updated implementation using BaseHATEOASPaginator class for handling HATEOAS-style pagination, demonstrating the new approach with dedicated paginator class.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/pagination-classes.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# New implementation\n\nfrom singer_sdk.pagination import BaseHATEOASPaginator\n\nclass MyPaginator(BaseHATEOASPaginator):\n    def get_next_url(self, response):\n        data = response.json()\n        return data.get(\"next\")\n\n\nclass MyStream(RESTStream):\n    def get_new_paginator(self):\n        return MyPaginator()\n\n    def get_url_params(self, context, next_page_token):\n        params = {}\n\n        # Next page token is a URL, so we can to parse it to extract the query string\n        if next_page_token:\n            params.update(parse_qsl(next_page_token.query))\n\n        return params\n```\n\n----------------------------------------\n\nTITLE: Registering Custom String Format Handlers in SQLConnector\nDESCRIPTION: Demonstrates how to register a custom format handler for string formats like 'uri'. This approach allows mapping specific string formats to specialized SQL column types.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-target.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom my_sqlalchemy_dialect import URI\n\n\nclass MyConnector(SQLConnector):\n    @functools.cached_property\n    def jsonschema_to_sql(self):\n        to_sql = JSONSchemaToSQL.from_config(\n            self.config,\n            max_varchar_length=self.max_varchar_length,\n        )\n        to_sql.register_format_handler(\"uri\", URI)\n        return to_sql\n```\n\n----------------------------------------\n\nTITLE: Implementing Record Deduplication with dbt and SQL Window Functions\nDESCRIPTION: This SQL snippet demonstrates how to deduplicate records in a dbt model using window functions. It creates two ranking columns: 'recency_rank' to identify the most recent version of each record, and 'dedupe_rank' to eliminate exact duplicates. This approach works well for streams that lack primary keys or are in append-only mode.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/at_least_once.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    widget_id,\n    widget_name,\n    widget_desc,\n    updated_date,\n    ROW_NUMBER() OVER (\n        PARTITION BY widget_id, widget_name, widget_desc\n        ORDER BY updated_date DESC\n    ) AS recency_rank, /* filter `recency_rank = 1` to get only latest records */\n    ROW_NUMBER() OVER (\n        PARTITION BY widget_id, widget_name, widget_desc, updated_date\n        ORDER BY updated_date DESC\n    ) AS dedupe_rank /* filter `dedupe_rank = 1` to get only unique records */\nFROM {{ source('tap_widgets', 'widgets') }} AS raw\n```\n\n----------------------------------------\n\nTITLE: Running Singer Tap in Sync Mode with Catalog File\nDESCRIPTION: Shows how to run a tap in sync mode using both a config file and a predefined catalog file. This approach allows for more control over which streams and fields are selected.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry install && \\\npoetry run tap-mysource \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n   --catalog singer_sdk/samples/sample_tap_parquet/parquet-catalog.sample.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv sync && \\\nuv run tap-mysource \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n   --catalog singer_sdk/samples/sample_tap_parquet/parquet-catalog.sample.json\n```\n\n----------------------------------------\n\nTITLE: Removing a stream in Meltano YAML configuration\nDESCRIPTION: YAML configuration example for removing a stream named 'addresses' using the stream_maps config.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  # don't sync the stream called 'addresses'\n  addresses: __NULL__\n```\n\n----------------------------------------\n\nTITLE: Configuration-based SQL to JSON Schema Mapping\nDESCRIPTION: Demonstrates how to create a configurable type mapping class that can adapt based on user-defined settings.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-tap.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ConfiguredSQLToJSONSchema(SQLToJSONSchema):\n    def __init__(self, *, my_custom_setting: str, **kwargs):\n        super().__init__(**kwargs)\n        self.my_custom_setting = my_custom_setting\n\n    @classmethod\n    def from_config(cls, config: dict):\n        return cls(my_custom_setting=config.get(\"my_custom_setting\", \"default_value\"))\n```\n\n----------------------------------------\n\nTITLE: Running Singer Tap in Discovery Mode\nDESCRIPTION: Demonstrates how to run a tap in discovery mode to output the schema of available streams without extracting data. This is useful for inspecting available data streams.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry install && \\\npoetry run tap-mysource --discover \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv sync && \\\nuv run tap-mysource --discover \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n```\n\n----------------------------------------\n\nTITLE: Sink Mapping Patterns Documentation\nDESCRIPTION: Comprehensive documentation describing three different sink mapping patterns: 1:1 (default pattern with one sink per stream), 1:many (multiple sinks per stream), and many:1 (single sink for all streams). Includes example scenarios for database targets, SaaS endpoints, data lake ingestion, and JSON file writing.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/sinks.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# How to design a Sink\n\nWhile the default implementation will create one `Sink` per stream, this behavior can be\ncustomized or overridden in a number of ways:\n\n## `1:1` Mapping\n\nThis is the default, where only one sink is active for each incoming stream name:\n\n- The exception to this rule is when a new STATE message is received for an\n  already-active stream. In this case, the existing sink will be marked to be drained\n  and a new sink will be initialized to receive the next incoming records.\n- In the case that a sink is archived because of a superseding STATE message, all\n  prior version(s) of the stream's sink are guaranteed to be drained in creation order.\n\n### Database sink example\n\nA database-type target where each stream will land in a dedicated table. Each sink is of the same class, with a different target table based on stream_name.\n\n### SaaS sink example\n\nA SaaS-type target where each stream will be uploaded to a different REST endpoint based on stream name. Each sink class is specialized based on the requirements of the target API endpoint.\n\n## `1:many` Mapping\n\nIn this scenario, the target intentionally creates multiple sinks per stream:\n\n- The developer may override `Target.get_sink()` and use details within the record (or a\n  randomization algorithm) to send records to multiple sinks all corresponding to the same stream.\n\n### Data lake ingestion example\n\nA `1:many` relationship may be used for a data lake target where output files should be pre-partitioned according to\none or more attributes within the record. Importing multiple smaller files, named according to\ntheir partition key values are more efficient than loading fewer larger files.\n\n## `many:1` Mapping\n\nIn this scenario, the target intentionally sends all records to the same sink regardless of\nstream name:\n\n- The stream name will likely be made an attribute of the\n  final output, but records do not need to be segregated by the stream name.\n\n### JSON file writer example\n\nA json file writer where the desired output is a single combined json file with all records from all streams.\n```\n\n----------------------------------------\n\nTITLE: Adding a property with string literal in Meltano JSON configuration\nDESCRIPTION: JSON configuration example for adding a new field with a hardcoded string literal value to the 'customers' stream.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"a_new_field\": \"\\\"client-123\\\"\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites in Meltano SDK\nDESCRIPTION: Shows how to configure test suite behavior using SuiteConfig, including stream-specific configurations.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk.testing import SuiteConfig, get_tap_test_class\n\nfrom tap_stackexchange.tap import TapStackExchange\n\nSAMPLE_CONFIG = {\n    \"site\": \"stackoverflow\",\n    \"tags\": [\n        \"meltano\",\n        \"singer-io\",\n    ],\n    \"metrics_log_level\": \"debug\",\n}\n\nTEST_SUITE_CONFIG = SuiteConfig(\n    ignore_no_records_for_streams=[\"tag_synonyms\"]\n)\n\nTestTapStackExchange = get_tap_test_class(\n    tap_class=TapStackExchange, config=SAMPLE_CONFIG, suite_config=TEST_SUITE_CONFIG\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Singer Tap in Meltano YAML\nDESCRIPTION: Shows how to configure a Singer tap in a Meltano project using meltano.yml. This example defines the tap's namespace, executable path, capabilities, and settings with their types.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: my-tap\n    namespace: my_tap\n    executable: -e .\n    capabilities:\n    - state\n    - catalog\n    - discover\n    settings:\n    - name: base_url\n      kind: string\n    - name: api_key\n      kind: password\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgSpecWriter for Taps in Python\nDESCRIPTION: This snippet demonstrates how to update a tap to use a message writer based on the msgspec serialization library. It improves performance by using a more efficient serialization method.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk.contrib.msgspec import MsgSpecWriter\n\n\nclass MyTap(Tap):\n    message_writer_class = MsgSpecWriter\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Processing in JSON\nDESCRIPTION: This snippet shows how to configure batch processing in the config.json file, including encoding settings and storage options.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/batch.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"batch_config\": {\n    \"encoding\": {\n      \"format\": \"jsonl\",\n      \"compression\": \"gzip\"\n    },\n    \"storage\": {\n      \"root\": \"file://tests/core/resources\",\n      \"prefix\": \"test-batch-\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Essential Developer Inputs for Catalog Discovery\nDESCRIPTION: Lists the critical developer-provided components needed for automatic catalog generation: discover_streams() method, schema definition, primary keys, and replication key.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/discovery.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Tap.discover_streams()` - Should return a list of available \"discovered\" streams.\n- `Stream.schema` or `Stream.schema_filepath` - The JSON Schema definition of each stream,\nprovided either directly as a Python `dict` or indirectly as a `.json` filepath.\n- `Stream.primary_keys` - a list of strings indicating the primary key(s) of the stream.\n- `Stream.replication_key` - a single string indicating the name of the stream's replication\nkey (if applicable).\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Requests Authenticator in Python\nDESCRIPTION: This snippet demonstrates how to use one of the built-in authenticators from the requests library, specifically HTTPDigestAuth, in a custom stream class.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom requests.auth import HTTPDigestAuth\nfrom singer_sdk.streams import RESTStream\n\nclass DigestAuthStream(RESTStream):\n    \"\"\"A stream with digest authentication.\"\"\"\n\n    @property\n    def authenticator(self) -> HTTPDigestAuth:\n        \"\"\"Stream authenticator.\"\"\"\n        return HTTPDigestAuth(\n            username=self.config[\"username\"],\n            password=self.config[\"password\"],\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing MsgSpecReader for Targets in Python\nDESCRIPTION: This code shows how to update a target to use a message reader based on the msgspec serialization library. It enhances performance by using a more efficient deserialization method.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk.contrib.msgspec import MsgSpecReader\n\n\nclass MyTarget(Target):\n    message_reader_class = MsgSpecReader\n```\n\n----------------------------------------\n\nTITLE: Defining BATCH Message Structure for Local Storage in JSON\nDESCRIPTION: This snippet shows the structure of a BATCH message for local storage, including the stream name, encoding format, and file manifest.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/batch.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"BATCH\",\n  \"stream\": \"users\",\n  \"encoding\": {\n    \"format\": \"jsonl\",\n    \"compression\": \"gzip\"\n  },\n  \"manifest\": [\n    \"file://path/to/batch/file/1\",\n    \"file://path/to/batch/file/2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Record Filtering Configuration\nDESCRIPTION: Examples of filtering stream records using boolean expressions in both YAML and JSON formats.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    __filter__: email.endswith('@example.com')\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"__filter__\": \"email.endswith('@example.com')\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Tap Project with Cookiecutter\nDESCRIPTION: Command to create a new Singer tap project using the Meltano SDK cookiecutter template.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter https://github.com/meltano/sdk --directory=\"cookiecutter/tap-template\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Class with Super Method in Python\nDESCRIPTION: Demonstrates how to properly initialize a custom stream class by inheriting methods from the base class using super(). This ensures that all inherited methods and properties are available in the child class.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyStream(Stream):\n    \"\"\"Mystream stream class.\"\"\"\n    def __init__(self, tap: Tap):\n        super().__init__(tap)\n        self.conn...\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools with UV\nDESCRIPTION: Commands for installing cookiecutter and tox using the UV package manager to set up the development environment for building Singer taps and targets.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install cookiecutter\n\n# Optional: Install Tox if you want to use it to run auto-formatters, linters, tests, etc.\nuv tool install tox\n```\n\n----------------------------------------\n\nTITLE: Running viztracer for Taps and Targets using Poetry\nDESCRIPTION: These console commands demonstrate how to run viztracer for both taps and targets using Poetry. It generates a result.json file for performance analysis.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ poetry run viztracer my-tap\n$ poetry run viztracer -- my-target --config=config.json --input=messages.json\n```\n\n----------------------------------------\n\nTITLE: Stream Duplication and Splitting\nDESCRIPTION: Configuration for creating copies of streams and filtering specific properties, demonstrated in both YAML and JSON.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    # Exclude these since we're capturing them in the pii stream\n    email: __NULL__\n    full_name: __NULL__\n  customers_pii:\n    __source__: customers\n    # include just the PII and the customer_id\n    customer_id: customer_id\n    email: email\n    full_name: full_name\n    # exclude anything not declared\n    __else__: __NULL__\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"email\": null,\n            \"full_name\": null\n        },\n        \"customers_pii\": {\n            \"__source__\": \"customers\",\n            \"customer_id\": \"customer_id\",\n            \"email\": \"email\",\n            \"full_name\": \"full_name\",\n            \"__else__\": null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Batch File Creation in Python\nDESCRIPTION: This snippet demonstrates how to customize batch file creation in a tap by implementing the get_batches method in a Stream class.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/batch.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyStream(Stream):\n    def get_batches(self, records):\n        return (\n            ParquetEncoding(compression=\"snappy\"),\n            [\n                \"s3://my-bucket/my-batch-file-1.parquet\",\n                \"s3://my-bucket/my-batch-file-2.parquet\",\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SQL Connector with Type Mapping\nDESCRIPTION: Shows how to implement a custom SQL connector that uses the custom type mapping class.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-tap.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyConnector(SQLConnector):\n    sql_to_jsonschema_converter = CustomSQLToJSONSchema\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Target Project with Cookiecutter\nDESCRIPTION: Command to create a new Singer target project using the Meltano SDK cookiecutter template.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter https://github.com/meltano/sdk --directory=\"cookiecutter/target-template\"\n```\n\n----------------------------------------\n\nTITLE: Stream Mapping Configuration in JSON\nDESCRIPTION: Provides the JSON equivalent of the complex stream mapping configuration. It includes the same transformations for the 'customers' stream as in the YAML example, along with stream_map_config and faker_config settings.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"email\": null,\n            \"email_domain\": \"owner_email.split('@')[-1]\",\n            \"email_hash\": \"md5(config['hash_seed'] + owner_email)\",\n            \"phone_number\": \"fake.phone_number()\"\n        }\n    },\n    \"stream_map_config\": {\n        \"hash_seed\": \"01AWZh7A6DzGm6iJZZ2T\"\n    },\n    \"faker_config\": {\n        \"seed\": 0,\n        \"locale\": [\n            \"en_US\",\n            \"en_GB\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Next Page URL with JSONPath in Python\nDESCRIPTION: This example shows how to use a JSONPath expression to extract the next page URL from a HATEOAS response in a custom stream.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyStream(RESTStream):\n    \"\"\"A custom stream.\"\"\"\n\n    # Gets the href property from the links item where rel=\"next\"\n    next_page_token_jsonpath = \"$.links[?(@.rel=='next')].href\"\n```\n\n----------------------------------------\n\nTITLE: Offset Pagination Implementation\nDESCRIPTION: Example showing how to implement offset-based pagination using the BaseOffsetPaginator class, with configuration for start value and page size.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/pagination-classes.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# New implementation\n\nfrom singer_sdk.pagination import BaseOffsetPaginator\n\n\nclass MyStream(RESTStream):\n    def get_new_paginator(self):\n        return BaseOffsetPaginator(start_value=0, page_size=250)\n\n    def get_url_params(self, context, next_page_token):\n        params = {}\n\n        # Next page token is an offset\n        if next_page_token:\n            params[\"offset\"] = next_page_token\n\n        return params\n```\n\n----------------------------------------\n\nTITLE: Installing cookiecutter prerequisites with pipx\nDESCRIPTION: Commands to install pipx and ensure it's in the system path before installing cookiecutter.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install pipx\npipx ensurepath\n# You may need to reopen your shell at this point\npipx install cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Running Standard SDK Tap Tests in Python\nDESCRIPTION: This example shows how to run the standard built-in tap tests provided by the Singer SDK. It imports the necessary test functions and the tap class, then executes the tests.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/code_samples.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Import the tests\nfrom singer_sdk.testing import get_standard_tap_tests\n\n# Import our tap class\nfrom tap_parquet.tap import TapParquet\n\nSAMPLE_CONFIG = {\n    # ...\n}\n\ndef test_sdk_standard_tap_tests():\n    \"\"\"Run the built-in tap tests from the SDK.\"\"\"\n    tests = get_standard_tap_tests(TapParquet, config=SAMPLE_CONFIG)\n    for test in tests:\n        test()\n```\n\n----------------------------------------\n\nTITLE: Running Singer Tap in Discovery Mode with Catalog\nDESCRIPTION: Shows how to run a tap in discovery mode while also providing a catalog file. This can be used to validate or transform an existing catalog file.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry install && \\\npoetry run tap-mysource --discover \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json \\\n   --catalog singer_sdk/samples/sample_tap_parquet/parquet-catalog.sample.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv sync && \\\nuv run tap-mysource --discover \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json \\\n   --catalog singer_sdk/samples/sample_tap_parquet/parquet-catalog.sample.json\n```\n\n----------------------------------------\n\nTITLE: Defining Static Properties in Python Stream Class\nDESCRIPTION: Shows how to statically define primary keys and replication key in a Python Stream class. This approach is used when these values are known during development and won't change.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/python_tips.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SimpleSampleStream(Stream):\n    primary_keys = [\"id\"]\n    replication_key = None\n```\n\n----------------------------------------\n\nTITLE: Installing Required Tools for SDK Target Template\nDESCRIPTION: Commands to install pipx and cookiecutter, which are prerequisites for using the SDK Target Template. The installation may require reopening the shell after ensuring pipx is in the path.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/target-template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install pipx\npipx ensurepath\n# You may need to reopen your shell at this point\npipx install cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Main Method for CLI Execution\nDESCRIPTION: Python code snippet to add to tap.py or target.py for enabling command-line execution and debugging.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    TapSnowflake.cli()\n```\n\n----------------------------------------\n\nTITLE: Testing Connectivity of Singer Tap\nDESCRIPTION: Shows how to test the connectivity of a tap using the --test flag. This validates the tap's configuration and connection to the source system without extracting data.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry install && \\\npoetry run tap-mysource --test \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv sync && \\\nuv run tap-mysource --test \\\n   --config singer_sdk/samples/sample_tap_parquet/parquet-config.sample.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Maps in Meltano YAML Configuration\nDESCRIPTION: Example showing how to define stream map settings in a Meltano plugin configuration file, including custom fields for email transformation, domain extraction, and hashing functionality.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  extractors:\n  - name: tap-csv\n    variant: meltanolabs\n    pip_url: git+https://github.com/MeltanoLabs/tap-csv.git\n    settings:\n    - name: stream_maps.customers.email\n    - name: stream_maps.customers.email_domain\n    - name: stream_maps.customers.email_hash\n    - name: stream_maps.customers.__else__\n    - name: stream_maps.stream_map_config\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK Target Template from Git Repository\nDESCRIPTION: Command to initialize a new target project directly from the Meltano SDK GitHub repository using cookiecutter.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/target-template/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter https://github.com/meltano/sdk --directory=\"cookiecutter/target-template\"\n```\n\n----------------------------------------\n\nTITLE: Default Log Output Format Example\nDESCRIPTION: Example showing the default logging output format with timestamps, log levels, logger names, and messages including metrics and sync information.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2022-12-05 19:46:46,744 | INFO     | my_tap               | Added 'child' as child stream to 'my_stream'\n2022-12-05 19:46:46,744 | INFO     | my_tap               | Beginning incremental sync of 'my_stream'...\n2022-12-05 19:46:46,744 | INFO     | my_tap               | Tap has custom mapper. Using 1 provided map(s).\n2022-12-05 19:46:46,745 | INFO     | my_tap               | Beginning full_table sync of 'child' with context: {'parent_id': 1}...\n2022-12-05 19:46:46,745 | INFO     | my_tap               | Tap has custom mapper. Using 1 provided map(s).\n2022-12-05 19:46:46,746 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"sync_duration\", \"value\": 0.0005319118499755859, \"tags\": {\"stream\": \"child\", \"context\": {\"parent_id\": 1}, \"status\": \"succeeded\"}}\n2022-12-05 19:46:46,747 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"record_count\", \"value\": 3, \"tags\": {\"stream\": \"child\", \"context\": {\"parent_id\": 1}}}\n2022-12-05 19:46:46,747 | INFO     | my_tap               | Beginning full_table sync of 'child' with context: {'parent_id': 2}...\n2022-12-05 19:46:46,748 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"sync_duration\", \"value\": 0.0004410743713378906, \"tags\": {\"stream\": \"child\", \"context\": {\"parent_id\": 2}, \"status\": \"succeeded\"}}\n2022-12-05 19:46:46,748 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"record_count\", \"value\": 3, \"tags\": {\"stream\": \"child\", \"context\": {\"parent_id\": 2}}}\n2022-12-05 19:46:46,749 | INFO     | my_tap               | Beginning full_table sync of 'child' with context: {'parent_id': 3}...\n2022-12-05 19:46:46,749 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"sync_duration\", \"value\": 0.0004508495330810547, \"tags\": {\"stream\": \"child\", \"context\": {\"parent_id\": 3}, \"status\": \"succeeded\"}}\n2022-12-05 19:46:46,750 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"record_count\", \"value\": 3, \"tags\": {\"stream\": \"child\", \"context\": {\"parent_id\": 3}}}\n2022-12-05 19:46:46,750 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"sync_duration\", \"value\": 0.0052759647369384766, \"tags\": {\"stream\": \"my_stream\", \"context\": {}, \"status\": \"succeeded\"}}\n2022-12-05 19:46:46,750 | INFO     | singer_sdk.metrics   | INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"record_count\", \"value\": 3, \"tags\": {\"stream\": \"my_stream\", \"context\": {}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring x-sql-datatype in JSON Catalog\nDESCRIPTION: Demonstrates how to annotate a tap's catalog in JSON format to specify SQL data types using the x-sql-datatype extension. This allows direct customization of SQL types in the JSON catalog that Singer taps produce.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-target.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"streams\": [\n    {\n      \"stream\": \"addresses\",\n      \"tap_stream_id\": \"addresses\",\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"number\": {\n            \"type\": \"integer\",\n            \"x-sql-datatype\": \"smallint\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing all streams except one in Meltano YAML configuration\nDESCRIPTION: YAML configuration example for removing all streams except the 'customers' stream using the __else__ instruction.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers: {}\n  __else__: __NULL__\n```\n\n----------------------------------------\n\nTITLE: Setting Meltano Environment Variables for Stream Maps\nDESCRIPTION: Example showing how to set environment variables that configure stream map transformations including email domain extraction and email hashing with a configurable seed value.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nTAP_CSV_STREAM_MAPS_CUSTOMERS_EMAIL_DOMAIN='email.split(\"@\")[-1]'\nTAP_CSV_STREAM_MAPS_CUSTOMERS_EMAIL_HASH='md5(config[\"hash_seed\"] + email)'\nTAP_CSV_STREAM_MAP_CONFIG_HASH_SEED='01AWZh7A6DzGm6iJZZ2T'\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK Target Template from Local Clone\nDESCRIPTION: Command to initialize a new target project from a locally cloned SDK repository using cookiecutter.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/target-template/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter ./sdk/cookiecutter/target-template\n```\n\n----------------------------------------\n\nTITLE: Configuring x-sql-datatype in Meltano YAML Configuration\nDESCRIPTION: Shows how to annotate a tap's catalog in meltano.yml to specify SQL data types using the x-sql-datatype extension. This approach allows for customizing SQL types directly in the Meltano configuration.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-target.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# https://docs.meltano.com/concepts/plugins/#schema-extra\nplugins:\n  extractors:\n  - name: tap-example\n    schema:\n      addresses:\n        number:\n          x-sql-datatype: smallint\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Nested Array\nDESCRIPTION: Example JSON structure showing a common API response pattern with records in a nested array, along with the corresponding JSONPath expression.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"records\": [\n      { \"id\": 1, \"value\": \"abc\" },\n      { \"id\": 2, \"value\": \"def\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Launch Configuration for Debugging\nDESCRIPTION: Example launch.json configuration for debugging a Singer tap using VSCode's built-in debugger.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  // launch.json\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"tap-snowflake discovery\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"module\": \"tap_snowflake.tap\",\n      \"args\": [\"--config\", \"config.json\", \"--discover\"],\n      \"python\": \"${command:python.interpreterPath}\",\n      // Set to true to debug third-party library code\n      \"justMyCode\": false,\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing template from local SDK repository\nDESCRIPTION: Command to initialize the cookiecutter template from a locally cloned SDK repository.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter ./sdk/cookiecutter/tap-template\n```\n\n----------------------------------------\n\nTITLE: Running viztracer for Taps and Targets using uv\nDESCRIPTION: These console commands show how to run viztracer for both taps and targets using uv. It generates a result.json file for performance analysis.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uv run viztracer my-tap\n$ uv run viztracer -- my-target --config=config.json --input=messages.json\n```\n\n----------------------------------------\n\nTITLE: HATEOAS Pagination - Original Implementation\nDESCRIPTION: Original implementation using get_next_page_token method for handling HATEOAS-style pagination with 'next' links in the response.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/pagination-classes.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Original implementation\nfrom urllib.parse import parse_qsl\n\nclass MyStream(RESTStream):\n    def get_next_page_token(self, response, previous_token):\n        data = response.json()\n        return data.get(\"next\")\n\n    def get_url_params(self, context, next_page_token):\n        params = {}\n\n        if next_page_token:\n            params.update(parse_qsl(next_page_token.query))\n\n        return params\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Nested Object Values\nDESCRIPTION: Example JSON structure showing an API response with records as values in a nested object, along with the corresponding JSONPath expression.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"1\": {\n      \"id\": 1,\n      \"value\": \"abc\"\n    },\n    \"2\": {\n      \"id\": 2,\n      \"value\": \"def\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Meltano\nDESCRIPTION: Commands for testing tap-dummyjson invocation and running an ELT pipeline using Meltano.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmeltano invoke tap-dummyjson --version\nmeltano run tap-dummyjson target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SDK Plugin\nDESCRIPTION: Example showing environment variable format for a tap named 'tap-my-example' with username and access key settings. Values are automatically cast to appropriate Python types including integers, booleans, and JSON structures.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTAP_MY_EXAMPLE_USERNAME=myuser\nTAP_MY_EXAMPLE_ACCESS_KEY=secretkey\nTAP_MY_EXAMPLE_PORT=5432\nTAP_MY_EXAMPLE_DEBUG=true\nTAP_MY_EXAMPLE_ARRAY='[\"a\", \"b\", \"c\"]'\nTAP_MY_EXAMPLE_OBJECT='{\"key\": \"value\"}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Information with --about Flag\nDESCRIPTION: Shows how to display metadata about a Singer tap package using the --about flag. This outputs information such as the tap name, description, version, capabilities, and available settings.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ poetry run sdk-tap-countries-sample --about\nName: sample-tap-countries\nDescription: Sample tap for Countries GraphQL API.\nVersion: [could not be detected]\nSDK Version: 0.44.2\nCapabilities:\n  - catalog\n  - state\n  - discover\n  - about\n  - stream-maps\n  - schema-flattening\n  - batch\nSettings:\n  - Name: stream_maps\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_STREAM_MAPS\n  - Name: stream_map_config\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_STREAM_MAP_CONFIG\n  - Name: faker_config\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_FAKER_CONFIG\n  - Name: flattening_enabled\n    Type: ['boolean', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_FLATTENING_ENABLED\n  - Name: flattening_max_depth\n    Type: ['integer', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_FLATTENING_MAX_DEPTH\n  - Name: batch_config\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_BATCH_CONFIG\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run sdk-tap-countries-sample --about\nName: sample-tap-countries\nDescription: Sample tap for Countries GraphQL API.\nVersion: [could not be detected]\nSDK Version: 0.44.2\nCapabilities:\n  - catalog\n  - state\n  - discover\n  - about\n  - stream-maps\n  - schema-flattening\n  - batch\nSettings:\n  - Name: stream_maps\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_STREAM_MAPS\n  - Name: stream_map_config\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_STREAM_MAP_CONFIG\n  - Name: faker_config\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_FAKER_CONFIG\n  - Name: flattening_enabled\n    Type: ['boolean', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_FLATTENING_ENABLED\n  - Name: flattening_max_depth\n    Type: ['integer', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_FLATTENING_MAX_DEPTH\n  - Name: batch_config\n    Type: ['object', 'null']\n    Environment Variable: SAMPLE_TAP_COUNTRIES_BATCH_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Entry Points in Poetry/uv Project Files\nDESCRIPTION: Shows how to define command line entry points in pyproject.toml for both Poetry and uv build systems. This configuration maps the command 'tap-mysource' to the appropriate Python function.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.scripts]\ntap-mysource = 'singer_sdk.tests.sample_tap_parquet.parquet_tap:cli'\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project.scripts]\ntap-mysource = 'singer_sdk.tests.sample_tap_parquet.parquet_tap:cli'\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment\nDESCRIPTION: Command to synchronize development dependencies using uv package manager.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Multi-Stream Mapping Configuration\nDESCRIPTION: Configuration for applying mappings across multiple streams using glob expressions in both YAML and JSON.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  \"*\":\n    name: first_name\n    first_name: __NULL__\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"*\": {\n            \"name\": \"first_name\",\n            \"first_name\": \"__NULL__\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Information in JSON Format\nDESCRIPTION: Demonstrates how to output tap metadata in JSON format for programmatic consumption by using the --about flag with --format json option.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ poetry run sdk-tap-countries-sample --about --format json\n{\n  \"name\": \"sample-tap-countries\",\n  \"description\": \"Sample tap for Countries GraphQL API.\",\n  \"version\": \"[could not be detected]\",\n  \"sdk_version\": \"0.44.2\",\n  \"capabilities\": [\n    \"sync\",\n    \"catalog\",\n    \"state\",\n    \"discover\"\n  ],\n  \"settings\": {\n    \"type\": \"object\",\n    \"properties\": {}\n  }\n}\n```\n\nLANGUAGE: console\nCODE:\n```\n$ uv run sdk-tap-countries-sample --about --format json\n{\n  \"name\": \"sample-tap-countries\",\n  \"description\": \"Sample tap for Countries GraphQL API.\",\n  \"version\": \"[could not be detected]\",\n  \"sdk_version\": \"0.44.2\",\n  \"capabilities\": [\n    \"sync\",\n    \"catalog\",\n    \"state\",\n    \"discover\"\n  ],\n  \"settings\": {\n    \"type\": \"object\",\n    \"properties\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Faker Data Masking in YAML\nDESCRIPTION: Configuration for masking PII/PHI data using Faker library with random name generation and locale settings.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    # IMPORTANT: the `fake` variable name will only be available if faker_config is defined\n    first_name: fake.first_name() # generates a new random name each time\nfaker_config:\n  # set specific seed\n  seed: 0\n  # set specific locales\n  locale:\n    - en_US\n    - en_GB\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment\nDESCRIPTION: Command to synchronize the development environment using uv.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Using importlib.resources.abc.Traversable for Stream Schema Loading in Python\nDESCRIPTION: Allow loading stream schemas from importlib.resources.abc.Traversable types for more flexible resource handling.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom importlib.resources.abc import Traversable\n\ndef load_schema(resource: Traversable):\n    # Implementation for loading schema from resource\n```\n\n----------------------------------------\n\nTITLE: Multi-Stream Aliasing Configuration\nDESCRIPTION: Configuration for renaming multiple streams using expressions and glob patterns in both YAML and JSON.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  \"*\":\n    __alias__: \"__stream_name__ + '_v2'\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"*\": {\n            \"__alias__\": \"__stream_name__ + '_v2'\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Help Command with Poetry and uv\nDESCRIPTION: Shows how to display the help menu for a Singer tap using both Poetry and uv package managers. First installs the package and then runs the tap with the --help flag.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/cli_commands.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install && \\\npoetry run tap-mysource --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv sync && \\\nuv run tap-mysource --help\n```\n\n----------------------------------------\n\nTITLE: Property Aliasing Configuration\nDESCRIPTION: Configuration for renaming fields using a copy-and-delete approach in both YAML and JSON formats.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    new_field: old_field\n    old_field: __NULL__\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"new_field\": \"old_field\",\n            \"old_field\": \"__NULL__\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run pytest for the tap's test suite.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Stream Aliasing Configuration\nDESCRIPTION: Examples of stream aliasing in both YAML and JSON formats to rename streams.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    __alias__: customers_v2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"__alias__\": \"customers_v2\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Nox\nDESCRIPTION: Commands for running core tests and external tests using Nox test runner\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run just the core and cookiecutter tests (no external creds required):\nnox -rs tests\n\n# Run all tests (external creds required):\nnox -rs tests -- -m \"external\"\n```\n\n----------------------------------------\n\nTITLE: Singer SDK v0.3.0 Release Notes\nDESCRIPTION: Release notes documenting the new Stream Map feature for transformations and Target SDK components, along with breaking changes related to deprecated methods.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### New\n\n- Added Stream Map feature for inline transformation and filtering capabilities (#63, !4, !92, !103)\n- Added Target SDK, components and templates for building Singer targets (#96, !4)\n\n### Breaks\n\n- Removed methods deprecated in v0.2.0: `get_partition_state()` and `get_stream_or_partition_state()`. Affected developers should replace these with references to `get_context_state()`. (#152, !107)\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Interface\nDESCRIPTION: Command to test the tap's CLI interface using uv run.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuv run {{cookiecutter.tap_id}} --help\n```\n\n----------------------------------------\n\nTITLE: Modifying stream's primary key in Meltano JSON configuration\nDESCRIPTION: JSON configuration example for modifying the primary key of the 'customers' stream, removing the original key and adding a new hashed key.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"customer_id\": null,\n            \"customer_id_hashed\": \"md5(customer_id)\",\n            \"__key_properties__\": [\"customer_id_hashed\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Code Coverage Report\nDESCRIPTION: Command to generate and view HTML code coverage report\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnox -rs coverage -- html && open ./htmlcov/index.html\n```\n\n----------------------------------------\n\nTITLE: Using functools.lru_cache for Memoization in Python\nDESCRIPTION: Replace the deprecated 'memoization' library with Python's built-in functools.lru_cache for more efficient caching.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef cached_function():\n    # Function implementation\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running tests using pytest and testing CLI interface.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\nuv run {{cookiecutter.mapper_id}} --help\n```\n\n----------------------------------------\n\nTITLE: Removing all fields except one from a stream in Meltano JSON configuration\nDESCRIPTION: JSON configuration example for removing all fields from the 'customers' stream except 'customer_id' using the __else__ instruction.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"customer_id\": \"customer_id\",\n            \"__else__\": null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing Example\nDESCRIPTION: Example of implementing snapshot tests using pytest-snapshot\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.snapshot\ndef test_snapshot(snapshot, snapshot_dir):\n    # Configure the snapshot directory\n    snapshot.snapshot_dir = snapshot_dir.joinpath(\"test_snapshot_subdir\")\n\n    snapshot_name = \"test_snapshot\"\n    expected_content = \"Hello, World!\"\n    snapshot.assert_match(expected_content, snapshot_name)\n```\n\n----------------------------------------\n\nTITLE: Using datetime.timezone.utc Instead of pytz.UTC in Python\nDESCRIPTION: Replace the pytz dependency with Python's built-in datetime.timezone.utc for UTC timezone handling.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import datetime, timezone\n\nutc_time = datetime.now(timezone.utc)\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup\nDESCRIPTION: Command to initialize the development environment using uv package manager.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Meltano Setup and Testing\nDESCRIPTION: Commands for installing Meltano and running test pipeline.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npipx install meltano\ncd {{ cookiecutter.mapper_id }}\nmeltano install\nmeltano run tap-smoke-test {{ cookiecutter.mapper_id }} target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Removing a property from a stream in Meltano JSON configuration\nDESCRIPTION: JSON configuration example for removing the 'email' property from the 'customers' stream using the stream_maps config.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {\n            \"email\": null\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing viztracer for Performance Measurement using Poetry\nDESCRIPTION: This console command installs the viztracer library using Poetry package manager. viztracer is used for creating flame graphs to identify performance bottlenecks.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ poetry add --group dev viztracer\n```\n\n----------------------------------------\n\nTITLE: Using CursorResult.mappings() in SQL Streams with Python\nDESCRIPTION: Utilize CursorResult.mappings() method in SQL streams for more efficient result processing.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nresult = connection.execute(query)\nfor row in result.mappings():\n    # Process each row as a mapping\n```\n\n----------------------------------------\n\nTITLE: Installing {{ cookiecutter.tap_id }} from GitHub\nDESCRIPTION: Command to install the tap directly from the GitHub repository using pipx.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install git+https://github.com/ORG_NAME/{{ cookiecutter.tap_id }}.git@main\n```\n\n----------------------------------------\n\nTITLE: Compound Expression Example in JSON\nDESCRIPTION: Shows the JSON equivalent of the compound expression example. It uses a list comprehension to filter out the 'age' field from the 'fields' list in the 'users' stream.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stream_maps\": {\n    \"users\": {\n      \"id\": \"id\",\n      \"fields\": \"[f for f in fields if f['key'] != 'age']\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing viztracer Results with vizviewer using uv\nDESCRIPTION: This console command shows how to use the vizviewer tool to explore the performance analysis results generated by viztracer using uv.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ uv run vizviewer result.json\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Configuration YAML Example\nDESCRIPTION: YAML configuration example for customizing logging output, specifically for sending metrics to a separate log file using Python's logging dict format.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\ndisable_existing_loggers: false\nformatters:\n  metrics:\n    format: \"{asctime} {levelname} {message}\"\n    style: \"{\"\nhandlers:\n  metrics:\n    class: logging.FileHandler\n    formatter: metrics\n    filename: metrics.log\nloggers:\n  singer_sdk.metrics:\n    level: INFO\n    handlers: [ metrics ]\n    propagate: yes\n```\n\n----------------------------------------\n\nTITLE: Installing {{ cookiecutter.tap_id }} from PyPI\nDESCRIPTION: Command to install the tap from PyPI using pipx.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install {{ cookiecutter.tap_id }}\n```\n\n----------------------------------------\n\nTITLE: Compound Expression Example in YAML\nDESCRIPTION: Demonstrates the use of a compound expression in YAML configuration. It filters out an 'age' field from a list of fields in the 'users' stream using a list comprehension.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  users:\n    id: id\n    fields: \"[f for f in fields if f['key'] != 'age']\"\n```\n\n----------------------------------------\n\nTITLE: Tracing Sample Tap Execution\nDESCRIPTION: Commands to trace the tap execution using viztracer and visualize the results with vizviewer.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/aapl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuv run viztracer samples/aapl/__main__.py\n```\n\nLANGUAGE: shell\nCODE:\n```\nuv run vizviewer result.json\n```\n\n----------------------------------------\n\nTITLE: Installing Python Programs with uv Package Manager\nDESCRIPTION: Demonstrates how to use the uv package manager to install Python programs. uv automatically creates a virtual environment and adds executables to the path.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/python_tips.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install \n```\n\n----------------------------------------\n\nTITLE: Executing {{ cookiecutter.tap_id }} Directly\nDESCRIPTION: Commands to run the tap directly, including checking the version, displaying help, and performing discovery.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{ cookiecutter.tap_id }} --version\n{{ cookiecutter.tap_id }} --help\n{{ cookiecutter.tap_id }} --config CONFIG --discover > ./catalog.json\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Properties Example in JSON\nDESCRIPTION: Shows the JSON equivalent of the flattening configuration. It enables flattening and sets the maximum depth to 1 for top-level property flattening only.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flattening_enabled\": true,\n  \"flattening_max_depth\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mapper from PyPI\nDESCRIPTION: Command to install the mapper package using pipx from PyPI repository.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install {{ cookiecutter.mapper_id }}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom CLI Commands in Poetry Configuration\nDESCRIPTION: Configuration snippet for Poetry's pyproject.toml showing how to register both the default Singer CLI command and a custom command. This makes the commands available as executable entry points in the installed package.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/custom-clis.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# pyproject.toml\n\n[tool.poetry.scripts]\ntap-shortcut = \"tap_shortcut.tap:ShortcutTap.cli\"\ntap-shortcut-update-schema = \"tap_shortcut.tap:ShortcutTap.update_schema\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Built-in Tap Capabilities in Python\nDESCRIPTION: This snippet demonstrates how to access built-in tap capabilities in the Singer SDK. These capabilities are supported by default and include DISCOVER, CATALOG, STATE, and TEST.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/capabilities.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTapCapabilities.DISCOVER\nTapCapabilities.CATALOG\nTapCapabilities.STATE\nTapCapabilities.TEST\n```\n\n----------------------------------------\n\nTITLE: Listing SDC Metadata Properties in Markdown\nDESCRIPTION: This snippet enumerates the SDC metadata properties that can be automatically added to each record when 'add_record_metadata' is enabled. It includes timestamps for extraction, receipt, and batching, as well as deletion tracking, sequence numbering, and table versioning.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/record_metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `_sdc_extracted_at` - Timestamp indicating when the record was extracted the record from the source.\n- `_sdc_received_at` - Timestamp indicating when the record was received by the target for loading.\n- `_sdc_batched_at` - Timestamp indicating when the record's batch was initiated.\n- `_sdc_deleted_at` - Passed from a Singer tap if DELETE events are able to be tracked. In general, this is populated when the tap is synced LOG_BASED replication. If not sent from the tap, this field will be null.\n- `_sdc_sequence` - The epoch (milliseconds) that indicates the order in which the record was queued for loading.\n- `_sdc_table_version` - Indicates the version of the table. This column is used to determine when to issue TRUNCATE commands during loading, where applicable.\n```\n\n----------------------------------------\n\nTITLE: Installing Mapper from GitHub\nDESCRIPTION: Command to install the mapper directly from GitHub repository using pipx.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install git+https://github.com/ORG_NAME/{{ cookiecutter.mapper_id }}.git@main\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Cookiecutter Values\nDESCRIPTION: Example YAML configuration for setting default values in the .cookiecutterrc file to avoid repetitive input during project creation.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/dev_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ~/.cookiecutterrc\ndefault_context:\n  admin_name: Johnny B. Goode\n  admin_email: jbg@example.com\n  stream_type: REST\n  auth_method: Bearer Token\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Target Capabilities in Python\nDESCRIPTION: This snippet demonstrates the custom target capabilities that need to be implemented in the target. These include SOFT_DELETE, HARD_DELETE, DATATYPE_FAILSAFE, and TARGET_SCHEMA.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/capabilities.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTargetCapabilities.SOFT_DELETE\nTargetCapabilities.HARD_DELETE\nTargetCapabilities.DATATYPE_FAILSAFE\nTargetCapabilities.TARGET_SCHEMA\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Output Example\nDESCRIPTION: Example output from the custom logging configuration showing metrics data written to metrics.log file.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2022-09-29 00:48:52,746 INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"http_request_duration\", \"value\": 0.501743, \"tags\": {\"stream\": \"continents\", \"endpoint\": \"\", \"http_status_code\": 200, \"status\": \"succeeded\"}}\n2022-09-29 00:48:52,775 INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"http_request_count\", \"value\": 1, \"tags\": {\"stream\": \"continents\", \"endpoint\": \"\"}}\n2022-09-29 00:48:52,776 INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"sync_duration\", \"value\": 0.7397160530090332, \"tags\": {\"stream\": \"continents\", \"context\": {}, \"status\": \"succeeded\"}}\n2022-09-29 00:48:52,776 INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"record_count\", \"value\": 7, \"tags\": {\"stream\": \"continents\", \"context\": {}}}\n2022-09-29 00:48:53,225 INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"http_request_duration\", \"value\": 0.392148, \"tags\": {\"stream\": \"countries\", \"endpoint\": \"\", \"http_status_code\": 200, \"status\": \"succeeded\"}}\n2022-09-29 00:48:53,302 INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"http_request_count\", \"value\": 1, \"tags\": {\"stream\": \"countries\", \"endpoint\": \"\"}}\n2022-09-29 00:48:53,302 INFO METRIC: {\"metric_type\": \"timer\", \"metric\": \"sync_duration\", \"value\": 0.5258760452270508, \"tags\": {\"stream\": \"countries\", \"context\": {}, \"status\": \"succeeded\"}}\n2022-09-29 00:48:53,303 INFO METRIC: {\"metric_type\": \"counter\", \"metric\": \"record_count\", \"value\": 250, \"tags\": {\"stream\": \"countries\", \"context\": {}}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Mapper Information\nDESCRIPTION: Command to display mapper configuration and capabilities information.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{ cookiecutter.mapper_id }} --about\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tap Capabilities in Python\nDESCRIPTION: This snippet shows the custom tap capabilities LOG_BASED and PROPERTIES that need to be implemented in the tap.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/capabilities.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTapCapabilities.LOG_BASED\nTapCapabilities.PROPERTIES\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Base Capability in Python\nDESCRIPTION: This snippet shows the custom base capability ACTIVATE_VERSION that needs to be implemented in the plugin.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/capabilities.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPluginCapabilities.ACTIVATE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Updating build-system in pyproject.toml\nDESCRIPTION: This TOML configuration updates the build-system section in pyproject.toml to use hatchling as the build backend. It specifies the required version of hatchling.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/migrate-to-uv.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nbuild-backend = \"hatchling.build\"\nrequires = [\"hatchling>=1,<2\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Mapper Commands\nDESCRIPTION: Basic commands to check mapper version and help information.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/mapper-template/{{cookiecutter.mapper_id}}/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{{ cookiecutter.mapper_id }} --version\n{{ cookiecutter.mapper_id }} --help\n```\n\n----------------------------------------\n\nTITLE: Installing viztracer for Performance Measurement using uv\nDESCRIPTION: This console command installs the viztracer library using the uv package manager. viztracer is used for creating flame graphs to identify performance bottlenecks.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uv add --group dev viztracer\n```\n\n----------------------------------------\n\nTITLE: Accessing Built-in Base Capabilities in Python\nDESCRIPTION: This snippet demonstrates how to access built-in base capabilities in the Singer SDK. These capabilities are supported by default and include ABOUT, BATCH, STREAM_MAPS, and FLATTENING.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/capabilities.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPluginCapabilities.ABOUT\nPluginCapabilities.BATCH\nPluginCapabilities.STREAM_MAPS\nPluginCapabilities.FLATTENING\n```\n\n----------------------------------------\n\nTITLE: Running migrate-to-uv Tool in Bash\nDESCRIPTION: This command uses the migrate-to-uv tool to automatically migrate a project from Poetry to uv. It should be run in the project directory.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/migrate-to-uv.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx migrate-to-uv\n```\n\n----------------------------------------\n\nTITLE: Installing tap-dummyjson from GitHub\nDESCRIPTION: Command to install the tap-dummyjson package directly from GitHub repository.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install git+https://github.com/ORG_NAME/tap-dummyjson.git@main\n```\n\n----------------------------------------\n\nTITLE: Using json.dumps() with default argument in Python\nDESCRIPTION: Example of using json.dumps() with a default argument to handle non-serializable objects like datetime or decimal.Decimal instances.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\njson.dumps(obj, default=str)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom CLI Commands in uv Configuration\nDESCRIPTION: Configuration snippet for uv's pyproject.toml showing how to register both the default Singer CLI command and a custom command using the project.scripts section.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/custom-clis.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# pyproject.toml\n\n[project.scripts]\ntap-shortcut = \"tap_shortcut.tap:ShortcutTap.cli\"\ntap-shortcut-update-schema = \"tap_shortcut.tap:ShortcutTap.update_schema\"\n```\n\n----------------------------------------\n\nTITLE: Referencing RESTStream.get_new_paginator Method in Markdown\nDESCRIPTION: Reference to the new pagination method that will replace get_next_page_token in version 1.0. This is part of a deprecation notice indicating the API change.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/deprecation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`RESTStream.get_new_paginator`](singer_sdk.RESTStream.get_new_paginator)\n```\n\n----------------------------------------\n\nTITLE: Displaying Tap-Example Settings in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the configuration settings for the tap-example Singer tap. It includes information on whether each setting is required, its default value, and a brief description.\nSOURCE: https://github.com/meltano/sdk/blob/main/tests/snapshots/about_format/markdown.snap.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Required | Default | Description |\n|:--------|:--------:|:-------:|:------------|\n| start_date | False    | None    | Start date for the tap to extract data from. |\n| api_key | True     | None    | API key for the tap to use. |\n| complex_setting | False    | None    | A complex setting, with sub-settings. |\n| complex_setting.sub_setting | False    | None    | A sub-setting. |\n```\n\n----------------------------------------\n\nTITLE: Adding Release Highlights to Changelog in Markdown\nDESCRIPTION: Example of how to add a section with release highlights to the changelog. This includes a brief description of the most important changes in the release.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/release_process.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## v0.41.0 (2024-10-02)\n\n### Highlights\n\n- It's easier now for SQL tap developers to customize the mapping from SQL column types to JSON schema. See [the guide](https://sdk.meltano.com/en/v0.41.0/guides/sql-tap.html#custom-type-mapping) for details.\n```\n\n----------------------------------------\n\nTITLE: Defining tap-example Configuration in YAML\nDESCRIPTION: This YAML configuration defines the tap-example project, including its name, version, supported Python versions, capabilities, and settings. It specifies environment variables for settings like start date and API key.\nSOURCE: https://github.com/meltano/sdk/blob/main/tests/snapshots/about_format/text.snap.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName: tap-example\nDescription: Example tap for Singer SDK\nVersion: 0.1.1\nSDK Version: 1.0.0\nSupported Python Versions:\n  - 3.8\n  - 3.9\n  - 3.10\n  - 3.11\n  - 3.12\n  - 3.13\nCapabilities:\n  - catalog\n  - discover\n  - state\nSettings:\n  - Name: start_date\n    Type: string\n    Environment Variable: TAP_EXAMPLE_START_DATE\n  - Name: api_key\n    Type: string\n    Environment Variable: TAP_EXAMPLE_API_KEY\n  - Name: complex_setting\n    Type: object\n    Environment Variable: TAP_EXAMPLE_COMPLEX_SETTING\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for StreamMapConfigError Class\nDESCRIPTION: ReStructuredText documentation configuration for generating documentation of the StreamMapConfigError class, including all members and special methods __init__ and __call__.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.exceptions.StreamMapConfigError.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk.exceptions\n\n.. autoclass:: StreamMapConfigError\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Removing a stream in Meltano JSON configuration\nDESCRIPTION: JSON configuration example for removing a stream named 'addresses' using the stream_maps config.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"addresses\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Dependencies in Markdown\nDESCRIPTION: Installation command for the JWT extra package required if using OAuthJWTAuthenticator after PyJWT and cryptography are removed from default dependencies.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/deprecation.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`singer-sdk[jwt]`](./dev_guide.md#extra-features)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Meltano Environment\nDESCRIPTION: Commands for installing Meltano and initializing it within the project directory.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npipx install meltano\ncd tap-dummyjson\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for LegacyStreamPaginator Class\nDESCRIPTION: ReStructuredText documentation configuration for the LegacyStreamPaginator class, specifying class members and special methods to be included in the documentation\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.pagination.LegacyStreamPaginator.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk.pagination\n\n.. autoclass:: LegacyStreamPaginator\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Removing a property from a stream in Meltano YAML configuration\nDESCRIPTION: YAML configuration example for removing the 'email' property from the 'customers' stream using the stream_maps config.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    # don't sync the 'email' stream property\n    email: __NULL__\n```\n\n----------------------------------------\n\nTITLE: Using functools.cached_property for Auth Caching in Python\nDESCRIPTION: Update authentication caching example to use functools.cached_property for more efficient and Pythonic caching of properties.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import cached_property\n\nclass Auth:\n    @cached_property\n    def token(self):\n        # Implementation to get and cache token\n```\n\n----------------------------------------\n\nTITLE: Viewing tap-dummyjson Information\nDESCRIPTION: Commands to display tap-dummyjson version, help information, and generate a catalog file using the discover mode.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntap-dummyjson --version\ntap-dummyjson --help\ntap-dummyjson --config CONFIG --discover > ./catalog.json\n```\n\n----------------------------------------\n\nTITLE: Importing BaseHATEOASPaginator from singer_sdk.pagination\nDESCRIPTION: This snippet shows how to import the BaseHATEOASPaginator class from the singer_sdk.pagination module. It's a crucial step for using the paginator in your code.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.pagination.BaseHATEOASPaginator.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.pagination import BaseHATEOASPaginator\n```\n\n----------------------------------------\n\nTITLE: Viewing viztracer Results with vizviewer using Poetry\nDESCRIPTION: This console command demonstrates how to use the vizviewer tool to explore the performance analysis results generated by viztracer using Poetry.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/performance.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ poetry run vizviewer result.json\n```\n\n----------------------------------------\n\nTITLE: Using datetime.fromisoformat for Date Parsing in Python\nDESCRIPTION: Parse dates using datetime.fromisoformat or backports.datetime_fromisoformat for improved performance and compatibility.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import datetime\n\ndate = datetime.fromisoformat('2023-12-05T12:00:00')\n```\n\n----------------------------------------\n\nTITLE: Running Sample Tap with UV\nDESCRIPTION: Basic command to execute the sample tap using UV package runner.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/aapl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv run python samples/aapl\n```\n\n----------------------------------------\n\nTITLE: Importing BearerTokenAuthenticator in Python\nDESCRIPTION: This snippet shows how to import the BearerTokenAuthenticator class from the singer_sdk.authenticators module. It's a crucial step for using this authenticator in your Singer SDK projects.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.authenticators.BearerTokenAuthenticator.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.authenticators import BearerTokenAuthenticator\n```\n\n----------------------------------------\n\nTITLE: Installing Meltano and Plugins\nDESCRIPTION: Commands to install Meltano and initialize it within the project directory.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install meltano\npipx install meltano\n# Initialize meltano within this directory\ncd {{ cookiecutter.tap_id }}\nmeltano install\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in Markdown for Singer SDK Documentation\nDESCRIPTION: This code block defines a table of contents (toctree) directive in Markdown to organize links to various in-depth guides for Singer SDK developers. The toctree is set to display content with a maximum depth of 2 levels.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\nporting\npagination-classes\ncustom-clis\nconfig-schema\nperformance\nsql-tap\nsql-target\n\nmigrate-to-uv\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a property with string literal in Meltano YAML configuration\nDESCRIPTION: YAML configuration example for adding a new field with a hardcoded string literal value to the 'customers' stream.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nstream_maps:\n  customers:\n    a_new_field: '\\\"client-123\\\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation for ArrayType Class in Singer SDK\nDESCRIPTION: Sphinx documentation configuration for the ArrayType class in the Singer SDK typing module. The configuration specifies the current module and uses the autoclass directive to document the ArrayType class, including all members and special methods like __init__ and __call__.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.ArrayType.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk.typing\n\n.. autoclass:: ArrayType\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with UV\nDESCRIPTION: Commands to install pre-commit, nox and project dependencies using the UV package manager\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv tool install pre-commit\nuv tool install nox\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Install package and dependencies:\nuv sync --all-groups --all-extras\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test Example\nDESCRIPTION: Example of writing platform-specific tests using pytest markers\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.mark.windows\ndef test_windows_only():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Structuring RST Documentation with Toctree Directives\nDESCRIPTION: Multiple toctree directives organizing the documentation into sections for Developer Resources, Reference, Advanced Concepts, and SDK Development. Each toctree specifies documentation pages and their hierarchy.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :caption: Developer Resources\n   :maxdepth: 2\n   :hidden:\n\n   dev_guide\n   guides/index\n   Python Tips <python_tips>\n   Code Samples <code_samples>\n   cli_commands\n   faq\n\n.. toctree::\n   :caption: Reference\n   :maxdepth: 2\n   :hidden:\n\n   reference\n   implementation/index\n   typing\n   capabilities\n\n.. toctree::\n   :caption: Advanced Concepts\n   :maxdepth: 2\n   :hidden:\n\n   incremental_replication\n   parent_streams\n   partitioning\n   context_object\n   stream_maps\n   batch\n   sinks\n   testing\n\n.. toctree::\n   :caption: SDK Development\n   :maxdepth: 1\n   :hidden:\n\n   CONTRIBUTING\n   release_process\n   deprecation\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for SQLTarget Class\nDESCRIPTION: Sphinx documentation configuration for the SQLTarget class showing inherited members, special methods, and class hierarchy.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.SQLTarget.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nsinger_sdk.SQLTarget\n====================\n\n.. currentmodule:: singer_sdk\n\n.. autoclass:: SQLTarget\n    :members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __init__\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build and serve documentation locally with live reload\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnox -rs docs-serve\n```\n\n----------------------------------------\n\nTITLE: Importing OAuthAuthenticator in Python\nDESCRIPTION: This snippet shows how to import the OAuthAuthenticator class from the singer_sdk.authenticators module. It's a crucial step for using OAuth authentication in Singer SDK projects.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.authenticators.OAuthAuthenticator.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk.authenticators import OAuthAuthenticator\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Singer Implementation Details in Markdown\nDESCRIPTION: This code snippet creates a table of contents using the toctree directive in Markdown. It lists various implementation details topics related to the Singer specification in the Meltano SDK.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/implementation/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:caption: Implementation Details\n\ncli\ndiscovery\ncatalog_metadata\nrecord_metadata\nmetrics\nlogging\nstate\nat_least_once\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting SinglePagePaginator Class in Python\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the SinglePagePaginator class. It includes all members and special methods like __init__ and __call__.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.pagination.SinglePagePaginator.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: singer_sdk.pagination\n\n.. autoclass:: SinglePagePaginator\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running pytest and testing the CLI interface using uv run.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Importing SimpleAuthenticator from singer_sdk.authenticators\nDESCRIPTION: This code snippet shows how to import the SimpleAuthenticator class from the singer_sdk.authenticators module. It's typically used in Singer tap or target implementations for basic authentication.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.authenticators.SimpleAuthenticator.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.authenticators import SimpleAuthenticator\n```\n\n----------------------------------------\n\nTITLE: Documenting JSON Schema Helpers in singer_sdk.typing Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the singer_sdk.typing module. It includes all members of the module while avoiding index generation.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/typing.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: singer_sdk.typing\n    :noindex:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing URITemplateType from singer_sdk.typing\nDESCRIPTION: This snippet shows how to import the URITemplateType class from the singer_sdk.typing module. It's a prerequisite for using the URITemplateType in your code.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.URITemplateType.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.typing import URITemplateType\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for MapExpressionError Class\nDESCRIPTION: ReStructuredText markup for generating API documentation of the MapExpressionError class from the singer_sdk.exceptions module. It includes directives to document all members, as well as the __init__ and __call__ special methods.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.exceptions.MapExpressionError.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n﻿singer_sdk.exceptions.MapExpressionError\n========================================\n\n.. currentmodule:: singer_sdk.exceptions\n\n.. autoclass:: MapExpressionError\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Interface\nDESCRIPTION: Command to test the tap-dummyjson CLI interface directly.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run tap-dummyjson --help\n```\n\n----------------------------------------\n\nTITLE: Importing BaseAPIPaginator Class from singer_sdk.pagination Module in Python\nDESCRIPTION: This code snippet shows how to import the BaseAPIPaginator class from the singer_sdk.pagination module. It is used to set up the documentation for the class and its members.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.pagination.BaseAPIPaginator.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.pagination import BaseAPIPaginator\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for PropertiesList Class\nDESCRIPTION: ReStructuredText documentation template defining the structure for PropertiesList class documentation, including module reference and class members.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.PropertiesList.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nsinger_sdk.typing.PropertiesList\n================================\n\n.. currentmodule:: singer_sdk.typing\n\n.. autoclass:: PropertiesList\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Directive\nDESCRIPTION: Sphinx documentation directive for the URIType class, including its members and special methods (__init__ and __call__).\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.URIType.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk.typing\n\n.. autoclass:: URIType\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Displaying Tap Information\nDESCRIPTION: Command to display information about the tap's supported settings and capabilities.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{ cookiecutter.tap_id }} --about\n```\n\n----------------------------------------\n\nTITLE: Using singer_sdk.typing.IntegerType class documentation reference\nDESCRIPTION: This is not a code snippet but a reStructuredText (rst) documentation directive for generating API documentation for the IntegerType class in the singer_sdk.typing module.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.IntegerType.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n﻿singer_sdk.typing.IntegerType\n=============================\n\n.. currentmodule:: singer_sdk.typing\n\n.. autoclass:: IntegerType\n    :members:\n    :special-members: __init__, __call__\n    :inherited-members: JSONTypeHelper\n```\n\n----------------------------------------\n\nTITLE: Importing SQLConnector from singer_sdk\nDESCRIPTION: This code snippet shows how to import the SQLConnector class from the singer_sdk module. It is used to set up the context for the class documentation.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.SQLConnector.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk import SQLConnector\n```\n\n----------------------------------------\n\nTITLE: Defining SQLTap Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the SQLTap class in the singer_sdk module using reStructuredText format. It specifies the current module, instructs the documentation generator to include all members, show inheritance hierarchy, document inherited members, and include the __init__ special method.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.SQLTap.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n﻿singer_sdk.SQLTap\n=================\n\n.. currentmodule:: singer_sdk\n\n.. autoclass:: SQLTap\n    :members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __init__\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-release Tags in Git for Singer SDK\nDESCRIPTION: Commands to create and push a pre-release tag for the Singer SDK. This is used to test new features before a stable release.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/release_process.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.42.0a3\ngit push origin v0.42.0a3\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Directive for RecordSink\nDESCRIPTION: Sphinx documentation directive that configures the documentation generation for the RecordSink class, including initialization and call methods.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.RecordSink.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: singer_sdk\n\n.. autoclass:: RecordSink\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Importing HeaderLinkPaginator in Python\nDESCRIPTION: This snippet shows how to import the HeaderLinkPaginator class from the singer_sdk.pagination module. It's a core component for handling pagination in Singer SDK.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.pagination.HeaderLinkPaginator.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.pagination import HeaderLinkPaginator\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass documentation template with Jinja2 variables\nDESCRIPTION: This template defines how class documentation should be structured in Sphinx. It creates a header with the class name, sets the current module context, and configures the autoclass directive with specific options for member visibility and inheritance.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/_templates/stream_class.rst#2025-04-22_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n{{ fullname }}\n{{ \"=\" * fullname|length }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ name }}\n    :members:\n    :show-inheritance:\n    :inherited-members: Stream\n    :special-members: __init__\n```\n\n----------------------------------------\n\nTITLE: Initializing template from GitHub repository\nDESCRIPTION: Command to initialize the cookiecutter template directly from the Meltano SDK GitHub repository.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncookiecutter https://github.com/meltano/sdk --directory=\"cookiecutter/tap-template\"\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Class Documentation with Jinja2 Template\nDESCRIPTION: This template creates a Sphinx documentation page for a Python class. It displays the class name as a header, sets the current module, and uses autoclass directive to show class members, inheritance, and special methods.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/_templates/plugin_class.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n{{ fullname }}\n{{ \"=\" * fullname|length }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ name }}\n    :members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __init__\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Deprecation Warnings as Errors\nDESCRIPTION: Command to run pytest with SingerSDKDeprecationWarning raised as errors. This helps users ensure they are not using any deprecated features in their tests.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/release_process.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest -W error::singer_sdk.helpers._compat.SingerSDKDeprecationWarning\n```\n\n----------------------------------------\n\nTITLE: Nested Property Example in JavaScript\nDESCRIPTION: Illustrates a nested property structure in JavaScript. This example shows a 'user' object with nested properties like first_name, last_name, and id.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // ...\n    \"user\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Carter\",\n        \"id\": \"jcarter\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing tap-dummyjson from PyPI\nDESCRIPTION: Command to install the tap-dummyjson package using pipx from PyPI repository.\nSOURCE: https://github.com/meltano/sdk/blob/main/samples/sample_tap_dummy_json/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npipx install tap-dummyjson\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation Template for Python Classes\nDESCRIPTION: This template creates a documentation page for a Python class using Sphinx and reStructuredText. It includes the class name as a title, sets the current module, and uses autoclass to generate documentation for class members and special methods. For specific classes, it also includes inherited members.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/_templates/class.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n{{ fullname }}\n{{ \"=\" * fullname|length }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ name }}\n    :members:\n    :special-members: __init__, __call__\n    {%- if name in ('IntegerType', 'NumberType') %}\n    :inherited-members: JSONTypeHelper\n    {%- endif %}\n```\n\n----------------------------------------\n\nTITLE: Alternative Vector Type Mapping Implementation\nDESCRIPTION: Shows an alternative way to register type mapping using type annotations in Python.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/guides/sql-tap.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@to_jsonschema.register\ndef vector_to_json_schema(self, column_type: VectorType):\n    return th.ArrayType(th.NumberType()).to_dict()\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for DiscriminatedUnion Class\nDESCRIPTION: ReStructuredText documentation layout defining the API reference for the DiscriminatedUnion class, including module context setting, class definition and member specifications.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.DiscriminatedUnion.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nsinger_sdk.typing.DiscriminatedUnion\n====================================\n\n.. currentmodule:: singer_sdk.typing\n\n.. autoclass:: DiscriminatedUnion\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineMapper Class in Python using Sphinx\nDESCRIPTION: This code snippet uses Sphinx documentation directives to generate documentation for the InlineMapper class from the singer_sdk module. It includes all members, inherited members, and the __init__ special method.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.InlineMapper.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: singer_sdk\n\n.. autoclass:: InlineMapper\n    :members:\n    :show-inheritance:\n    :inherited-members:\n    :special-members: __init__\n```\n\n----------------------------------------\n\nTITLE: Running Cookiecutter Tests with Shell Script\nDESCRIPTION: Commands to execute test_cookiecutter.sh script against tap and target templates using replay files. The script tests both tap-template with tap-rest-api_key-github.json and target-template with target-per_record.json.\nSOURCE: https://github.com/meltano/sdk/blob/main/e2e-tests/cookiecutters/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash test_cookiecutter.sh ../../cookiecutter/tap-template ./tap-rest-api_key-github.json\nbash test_cookiecutter.sh ../../cookiecutter/target-template ./target-per_record.json\n```\n\n----------------------------------------\n\nTITLE: Singer SDK v0.2.0 Key Changes\nDESCRIPTION: Release notes covering addition of parent-child streams, metrics logging, state partitioning improvements and method deprecations.\nSOURCE: https://github.com/meltano/sdk/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### New\n\n- Added support for parent-child streams (#97, !79)\n- Added support for configurable metrics logging (#91, !79)\n- Added ability to use fewer state bookmarks by setting `Stream.state_partitioning_keys` to a\n  subset of available context keys (!79)\n\n### Changes\n\n- Renamed the optional `partition` dictionary arg in method signatures to the more generic `context` (!79)\n\n### Deprecates\n\n- The methods `Stream.get_partition_state()` and `Stream.get_stream_or_partition_state()`\n  have been deprecated in favor of the new and simpler `get_context_state()` (!79)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for SQLStream Class\nDESCRIPTION: ReStructuredText documentation directive specifying the auto-documentation parameters for the SQLStream class within the singer_sdk module.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.SQLStream.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk\n\n.. autoclass:: SQLStream\n    :members:\n    :show-inheritance:\n    :inherited-members: Stream\n    :special-members: __init__\n```\n\n----------------------------------------\n\nTITLE: Documenting MaxRecordsLimitException Class in Python\nDESCRIPTION: This snippet shows the documentation structure for the MaxRecordsLimitException class. It includes the module path, class name, and directives for documenting members and special methods.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.exceptions.MaxRecordsLimitException.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nsinger_sdk.exceptions.MaxRecordsLimitException\n==============================================\n\n.. currentmodule:: singer_sdk.exceptions\n\n.. autoclass:: MaxRecordsLimitException\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Importing ConfigValidationError from Singer SDK Exceptions\nDESCRIPTION: This snippet shows how to import the ConfigValidationError class from the singer_sdk.exceptions module. This exception is likely used to handle configuration validation errors in Singer SDK implementations.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.exceptions.ConfigValidationError.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.exceptions import ConfigValidationError\n```\n\n----------------------------------------\n\nTITLE: Importing JSONPathPaginator from singer_sdk.pagination\nDESCRIPTION: This snippet shows how to import the JSONPathPaginator class from the singer_sdk.pagination module. It's a crucial step for using the pagination functionality in Singer SDK.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.pagination.JSONPathPaginator.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom singer_sdk.pagination import JSONPathPaginator\n```\n\n----------------------------------------\n\nTITLE: Testing with Meltano\nDESCRIPTION: Commands to test the tap's invocation and run a test ELT pipeline using Meltano.\nSOURCE: https://github.com/meltano/sdk/blob/main/cookiecutter/tap-template/{{cookiecutter.tap_id}}/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Test invocation:\nmeltano invoke {{ cookiecutter.tap_id }} --version\n\n# OR run a test ELT pipeline:\nmeltano run {{ cookiecutter.tap_id }} target-jsonl\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for InvalidStreamSortException\nDESCRIPTION: ReStructuredText documentation configuration for the InvalidStreamSortException class, including module definition and class documentation directives with members and special methods.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.exceptions.InvalidStreamSortException.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk.exceptions\n\n.. autoclass:: InvalidStreamSortException\n    :members:\n    :special-members: __init__, __call__\n```\n\n----------------------------------------\n\nTITLE: Removing all streams except one in Meltano JSON configuration\nDESCRIPTION: JSON configuration example for removing all streams except the 'customers' stream using the __else__ instruction.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/stream_maps.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"stream_maps\": {\n        \"customers\": {},\n        \"__else__\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StringType from singer_sdk.typing\nDESCRIPTION: This code snippet shows how to import the StringType class from the singer_sdk.typing module. It is inferred from the module path provided in the documentation.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/typing/singer_sdk.typing.StringType.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom singer_sdk.typing import StringType\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for TooManyRecordsException\nDESCRIPTION: ReStructuredText documentation configuration for the TooManyRecordsException class, including module reference and class documentation directives.\nSOURCE: https://github.com/meltano/sdk/blob/main/docs/classes/singer_sdk.exceptions.TooManyRecordsException.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: singer_sdk.exceptions\n\n.. autoclass:: TooManyRecordsException\n    :members:\n    :special-members: __init__, __call__\n```"
  }
]