[
  {
    "owner": "overturemaps",
    "repo": "docs",
    "content": "TITLE: Querying Pizza Restaurants in NYC\nDESCRIPTION: Downloads all pizza restaurants in New York City and saves them as GeoJSON. Uses the places theme and filters by amenity type.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/duckdb.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCOPY(\n  SELECT\n    *\n  FROM read_parquet('s3://overturemaps-us-west-2/release/2024-08-20.0/theme=places/type=place/*', filename=true, hive_partitioning=1)\n  WHERE updatetime = '2024-08-20 00:00:00'\n    AND type = 'place'\n    AND confidence >= 0.75\n    AND names.common[1] IS NOT NULL\n    AND bbox[1] >= 40.4774 AND bbox[1] <= 40.9176\n    AND bbox[0] >= -74.2590 AND bbox[0] <= -73.7004\n    AND categories.main = 'restaurant'\n    AND categories.alternate LIKE '%pizza%'\n) TO 'new_york_pizza.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n```\n\n----------------------------------------\n\nTITLE: Querying Paris Roads\nDESCRIPTION: Downloads roads around the Arc de Triomphe in Paris and saves as GeoJSON. Filters by location and specific road categories.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/duckdb.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCOPY(\n  SELECT *\n  FROM read_parquet('s3://overturemaps-us-west-2/release/2024-08-20.0/theme=transportation/type=connector/*', filename=true, hive_partitioning=1)\n  WHERE bbox[1] >= 48.8738 AND bbox[1] <= 48.8748\n    AND bbox[0] >= 2.2950 AND bbox[0] <= 2.2960\n    AND subtype IN ('road', 'path')\n) TO 'paris_roads.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n```\n\n----------------------------------------\n\nTITLE: Building Schema Definition Table in Markdown\nDESCRIPTION: Defines the complete schema for the building table in GeoParquet format, including field names, data types, and descriptions for all building-related attributes.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/buildings.mdx#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| column                 | type    | description |\n| ---------------------- | ------- | ------------ |\n| id                     | varchar | A feature ID that may be associated with the Global Entity Reference System (GERS) if—and-only-if the feature represents an entity that is part of GERS. |\n| geometry               | blob    | A building's geometry is defined as its footprint or roofprint (if traced from aerial/satellite imagery). MUST be a Polygon as defined by GeoJSON schema. |\n| bbox                   | struct  | Area defined by two longitudes and two latitudes: latitude is a decimal number between -90.0 and 90.0; longitude is a decimal number between -180.0 and 180.0. |\n| version                | integer | Version number of the feature, incremented in each Overture release where the geometry or attributes of this feature changed.\n| sources                | struct  | The array of source information for the properties of a given feature. Each source object lists the property in JSON Pointer notation and the dataset from which that specific value originated. |\n| subtype                | varchar | A broad category of the building type and purpose. |\n| names                  | struct  | The name associated with the feature. The first entry in the array of names must have a \"local\" language. |\n| class                  | varchar | Further delineation of the building's built purpose. |\n| level                  | integer | The building feature's Z-order, i.e., stacking order. A Z-order of 0 is ground level. |\n| has_parts              | boolean | Flag indicating whether the building has parts. |\n| is_underground         | boolean | Whether the entire building or part is completely below ground. |\n| height                 | double  | Height of the building or part in meters. |\n| num_floors             | integer | Number of above-ground floors of the building or part. |\n| num_floors_underground | integer | Number of below-ground floors of the building or part.\n| min_height             | double  | The height of the bottom part of building in meters. |\n| min_floor              | integer | The \"start\" floor of a building or building part. |\n| facade_color           | varchar | The color of the facade of a building or building part in hexadecimal. |\n| facade_material        | varchar | The outer surface material of building facade. |\n| roof_material          | varchar | The outermost material of the roof. |\n| roof_shape             | varchar | The shape of the roof. |\n| roof_direction         | double  | Bearing of the roof ridge line. |\n| roof_orientation       | varchar | Orientation of the roof shape relative to the footprint shape. Either \"along\" or \"across.\" |\n| roof_color             | varchar | The color of the roof of a building or building part in hexadecimal. |\n```\n\n----------------------------------------\n\nTITLE: Downloading Overture Maps Data from Amazon S3 using AWS CLI\nDESCRIPTION: This command uses the AWS CLI to download Overture Maps data from Amazon S3. It allows recursive copying of files from the specified S3 bucket to a local destination or another S3 bucket.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naws s3 cp --region us-west-2 --no-sign-request --recursive s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/ <DESTINATION>\n```\n\n----------------------------------------\n\nTITLE: Rendering Map Layer Styles using Maplibre Style Spec in JSON\nDESCRIPTION: This code snippet demonstrates the structure for rendering different map layer styles using the Maplibre Style Specification. It uses a tabbed interface to display JSON styles for various map elements such as Places, Placenames, Buildings, Roads, Land, Landuse, and Water.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/build-a-map.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Places, null, 2) }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Admins, null, 2) }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Buildings, null, 2) }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Transportation, null, 2) }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Land, null, 2) }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Landuse, null, 2) }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ JSON.stringify(Water, null, 2) }\n```\n\n----------------------------------------\n\nTITLE: DuckDB Queries for Places Data\nDESCRIPTION: Collection of DuckDB SQL queries for filtering and analyzing places data using various properties like address, categories, and confidence scores.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/places.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM places WHERE confidence >= 0.9 LIMIT 5\n```\n\n----------------------------------------\n\nTITLE: Downloading Building Footprints with Overture Maps CLI\nDESCRIPTION: Example command to download building footprints for a specific bounding box around Boston and save them as GeoJSON. The command specifies coordinates, output format, data type, and output file.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/overturemaps-py.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ overturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geojson --type=building -o boston.geojson\n```\n\n----------------------------------------\n\nTITLE: GeoParquet Divisions Schema Table\nDESCRIPTION: Markdown table defining the schema properties for divisions theme GeoParquet files, including field names, data types, and detailed descriptions of each property.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Property Name | Type | Description |\n| -------- | -------- | ------- |\n| **id** |string | A feature ID. This may be an ID associated with the Global Entity Reference System (GERS) if—and-only-if the feature represents an entity that is part of GERS.|\n| **geometry** | blob | A WKB representation of the entity's geometry - a Point, Polygon, MultiPolygon, or LineString.|\n| **bbox** | array | The bounding box of an entity's geometry, represented with float values, in a `xmin, xmax, ymin, ymax` format.|\n| **version** | integer | Version number of the feature, incremented in each Overture release where the geometry or attributes of this feature changed.|\n| **sources** | array | The array of source information for the properties of a given feature, with each entry being a source object which lists the property in JSON Pointer notation and the dataset that specific value came from. All features must have a root level source which is the default source if a specific property's source is not specified.|\n| **subtype** | string | Category of the division from a finite, hierarchical, ordered list of categories (e.g. country, region, locality, etc.) similar to a Who's on First placetype.|\n| **wikidata** | string | A wikidata ID if available, as found on https://www.wikidata.org/.|\n| **population** | integer | Population of the division.|\n| **names** | array | A primary name of the entity, and a set of optional name translations. Name translations are represented in key, value pairs, where the key is an ISO language code and the value is the translated name.|\n| **class** | string | A value to represent whether an entity represents a `maritime` or `land` feature.|\n| **division_ids** | list | A list of the two division IDs that share this division boundary.|\n| **is_disputed** | boolean | Indicator if there are entities disputing this division boundary. Information about entities disputing this boundary should be included in perspectives property. This property should also be true if boundary between two entities is unclear and this is \"best guess\". So having it true and no perspectives gives map creators reason not to fully trust the boundary, but use it if they have no other.|\n| **perspectives** | array | Political perspectives from which this division boundary is considered to be an accurate representation. If this property is absent, then this boundary is not known to be disputed from any political perspective. Consequently, there is only one boundary feature representing the entire real world entity. If this property is present, it means the boundary represents one of several alternative perspectives on the same real-world entity.|\n| **local_type** | string | Local name for the subtype property, optionally localized. This property is localized using a standard Overture names structure.|\n| **country** | string | ISO 3166-1 alpha-2 country code of the country or country-like entity, that this division represents or belongs to. If the entity this division represents has a country code, the country property contains it. If it does not, the country property contains the country code of the first division encountered by traversing the parent_division_id chain to the root.|\n| **region** | string | ISO 3166-2 principal subdivision code of the subdivision-like entity this division represents or belongs to. If the entity this division represents has a principal subdivision code, the region property contains it. If it does not, the region property contains the principal subdivision code of the first division encountered by traversing the parent_division_id chain to the root.|\n| **hierarchies** | Array | Hierarchies in which this division participates.|\n| **parent_division_id** | string | Division ID of this division's parent division. Not allowed for top-level divisions (countries) and required for all other divisions. The default parent division is the parent division as seen from the default political perspective, if there is one, and is otherwise chosen somewhat arbitrarily. The hierarchies property can be used to inspect the exhaustive list of parent divisions.|\n| **norms** | list | Collects information about local norms and rules within the division that are generally useful for mapping and map-related use cases. If the norms property or a desired sub-property of the norms property is missing on a division, but at least one of its ancestor divisions has the norms property and the desired sub-property, then the value from the nearest ancestor division may be assumed.|\n| **capital_division_ids** | array | Division IDs of this division's capital divisions. If present, this property will refer to the division IDs of the capital cities, county seats, etc. of a division.|\n| **capital_of_divisions** | list | Division ID of the division that this feature is the capital of. If present, this property will refer to the division IDs of a parent county, region, country, etc.|\n| **division_id** | string | Division ID of the division this area belongs to.|\n| **cartography** | array | Contains a prominence property, which offers a suggestion for displaying Overture features at specific zoom levels based on it's importance and significance.|\n| **is_land** | boolean | Indicates whether or not the feature geometry represents the non-maritime \"land\" boundary, which can be used for map rendering, cartographic display, and similar purposes.|\n| **is_territorial** | boolean | Indicates whether or not the feature geometry represents the full territorial boundary or claim of a feature.|\n| **filename** | string | Name of the S3 file being queried.|\n| **theme** | string | Name of the Overture theme being queried.|\n| **type** |  string | Name of the Overture feature type being queried.|\n```\n\n----------------------------------------\n\nTITLE: Installing and Loading DuckDB Extensions for Spatial Data\nDESCRIPTION: Sets up DuckDB extensions for working with spatial data and AWS S3. Installs and loads the spatial extension for handling geographic data and the httpfs extension for accessing remote files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n%sql INSTALL spatial;\n%sql INSTALL httpfs;\n%sql LOAD spatial;\n%sql LOAD httpfs;\n%sql SET s3_region='us-west-2'\n```\n\n----------------------------------------\n\nTITLE: Mapping Overture Data Types to Themes in JSON\nDESCRIPTION: JSON object mapping that defines the relationship between feature types and their corresponding data themes in the Overture Maps system. Shows how different geographical features are organized into themed categories like addresses, buildings, divisions, places, transportation, and base.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ntype_theme_map = {\n    \"address\": \"addresses\",\n    \"building\": \"buildings\",\n    \"building_part\": \"buildings\",\n    \"division\": \"divisions\",\n    \"division_area\": \"divisions\",\n    \"division_boundary\": \"divisions\",\n    \"place\": \"places\",\n    \"segment\": \"transportation\",\n    \"connector\": \"transportation\",\n    \"bathymetry\": \"base\",\n    \"infrastructure\": \"base\",\n    \"land\": \"base\",\n    \"land_cover\": \"base\",\n    \"land_use\": \"base\",\n    \"water\": \"base\"\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing In-Memory DuckDB Connection\nDESCRIPTION: Creates an in-memory DuckDB database connection for executing SQL queries within the notebook. This sets up a temporary database that will be used to query the Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# connection string\n%sql duckdb:///:memory:\n```\n\n----------------------------------------\n\nTITLE: Running Customized Places Tileset Generation\nDESCRIPTION: Command to generate a customized places tileset for the Boston area using the modified script.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/2024-07-22/places.sh boston boston_places.pmtiles\n```\n\n----------------------------------------\n\nTITLE: Querying Overture Map Data from S3 with DuckDB\nDESCRIPTION: Executes a SQL query to extract water features from Overture Maps GeoParquet files stored in AWS S3. The query filters data based on bounding box coordinates and stores the result in a Pandas DataFrame named 'gulf_water'.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n%%sql gulf_water <<\nSELECT \n    id, \n    names.primary AS primary_name,\n    ST_AsText(geometry) as geometry\nFROM \n    read_parquet('s3://overturemaps-us-west-2/release/2024-09-18.0/theme=base/type=water/*', filename=true, hive_partitioning=1)\nWHERE \n    bbox.xmin >= -91.3994\n        and bbox.xmax <= -89.3864\n        and bbox.ymin >= 29.152\n        and bbox.ymax <= 30.5161\n```\n\n----------------------------------------\n\nTITLE: Querying Detroit Buildings\nDESCRIPTION: Downloads named buildings around Detroit, Michigan and saves as newline-delimited GeoJSON. Uses the buildings theme and filters by location.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/duckdb.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCOPY(\n  SELECT *\n  FROM read_parquet('abfs://microsoft-buildings@overtureblobpublic.blob.core.windows.net/2024-02-15.0/theme=buildings/*', filename=true, hive_partitioning=1)\n  WHERE bbox[1] >= 42.1 AND bbox[1] <= 42.5\n    AND bbox[0] >= -83.3 AND bbox[0] <= -82.8\n    AND names.common[1] IS NOT NULL\n) TO 'detroit_buildings.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n```\n\n----------------------------------------\n\nTITLE: Querying Transportation Segment Data Within a Bounding Box\nDESCRIPTION: This SQL query retrieves transportation segment data within a specified geographic bounding box. It uses the bbox struct to filter segments by location and selects various attributes including id, geometry, subtype, class, and subclass.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nimport SegmentBBOX from '!!raw-loader!@site/src/queries/duckdb/segment_bbox.sql';\n```\n\n----------------------------------------\n\nTITLE: Creating a Lonboard PolygonLayer for Buildings\nDESCRIPTION: Configures a PolygonLayer from the GeoDataFrame to visualize buildings with specified fill and outline colors. Sets view state parameters for the interactive map display, including 3D perspective with pitch.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlayer = PolygonLayer.from_geopandas(\n    gdf= gdf[['id', 'geometry', 'names']].reset_index(drop=True),\n    get_fill_color=[93, 103, 157],\n    get_line_color=[0, 128, 128],\n)\n\nview_state = {\n    \"longitude\": 9.18831,\n    \"latitude\": 45.464336,\n    \"zoom\": 13,\n    \"pitch\": 45,\n}\nm = Map(layer, view_state=view_state)\nm\n```\n\n----------------------------------------\n\nTITLE: Exporting Places Data for Philadelphia Using DuckDB\nDESCRIPTION: This SQL query extracts Places theme data for locations within Philadelphia locality. It shows how to join divisions data with other Overture Maps themes for location-based filtering.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nPhillyPlaces\n```\n\n----------------------------------------\n\nTITLE: Downloading Overture Maps Data with Python Package\nDESCRIPTION: Python command-line instructions to install and use the overturemaps Python package to download building data for Boston as a GeoParquet file.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/QGIS.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install overturemaps\n\n$ overturemaps download --bbox=-71.068,42.353,-71.058,42.363 \\\n    -f geoparquet --type=building --output=boston.geoparquet\n```\n\n----------------------------------------\n\nTITLE: Finding Connecting Transportation Segments Using Athena\nDESCRIPTION: This SQL query uses Amazon Athena to identify and analyze connecting segments in the transportation network. It explores the connector relationships between segments, which is essential for routing and network analysis.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nimport ConnectingSegments from '!!raw-loader!@site/src/queries/athena/transportation_connecting_segments.sql';\n```\n\n----------------------------------------\n\nTITLE: Querying Denmark Locality and Neighborhood in DuckDB\nDESCRIPTION: This SQL query retrieves locality and neighborhood divisions for Denmark from the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM read_parquet('divisions/*.parquet')\nWHERE type = 'division'\n  AND subtype IN ('locality', 'neighborhood')\n  AND iso_country_code = 'DK'\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Downloading Places Data with Python CLI\nDESCRIPTION: Downloads place data in GeoParquet format using the Overture Python command-line tool.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/places.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\noverturemaps download -f geoparquet --type=place -o places.geoparquet\n```\n\n----------------------------------------\n\nTITLE: Exporting Denmark Locality and Neighborhood Data Using DuckDB\nDESCRIPTION: This SQL query extracts locality and neighborhood division entities in Denmark with selected fields and geometries. It demonstrates filtering by administrative level and geographic area.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nDenmarkLocalityNeighborhood\n```\n\n----------------------------------------\n\nTITLE: Importing SQL Queries for Address Data Processing in DuckDB\nDESCRIPTION: Imports various SQL queries for processing address data using DuckDB. These queries include operations like converting to Parquet format, filtering addresses for specific regions, and counting addresses.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/addresses.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ToParquet from '!!raw-loader!@site/src/queries/duckdb/addresses_to_parquet.sql';\nimport AddressesCalgary from '!!raw-loader!@site/src/queries/duckdb/addresses_calgary.sql';\nimport AddressCounts from '!!raw-loader!@site/src/queries/duckdb/addresses_counts.sql';\nimport AddressesNZExport from '!!raw-loader!@site/src/queries/duckdb/addresses_nz_export.sql';\nimport UtahAddresses from '!!raw-loader!@site/src/queries/duckdb/addresses_utah.sql';\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Building Data with Fused UDF\nDESCRIPTION: Executes the Fused Overture UDF to load building data for the specified bounding box area. The UDF pulls data from GeoParquet files hosted on Source Cooperative.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='building') \n```\n\n----------------------------------------\n\nTITLE: Querying US-Mexico Border Using DuckDB\nDESCRIPTION: This SQL query retrieves divisions data for the country boundary between the US and Mexico using DuckDB. It demonstrates how to query geographic data within a specific bounding box area.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nBorderUSMX\n```\n\n----------------------------------------\n\nTITLE: Creating a Lonboard PathLayer for Road Segments\nDESCRIPTION: Configures a PathLayer to visualize road segments with specific styling options. Selects relevant columns from the table and sets visual properties like color and line width for the map display.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlayer = PathLayer(\n    table=table.select([\"id\", \"geometry\", \"subtype\", \"class\", \"names\"]),\n    get_color=[200, 0, 200],\n    width_min_pixels=0.4,\n)\n\nview_state = {\n    \"longitude\": 9.18831,\n    \"latitude\": 45.464336,\n    \"zoom\": 12,\n}\nm = Map(layer, view_state=view_state)\nm\n```\n\n----------------------------------------\n\nTITLE: Loading JupySQL Extension for SQL in Jupyter\nDESCRIPTION: Reloads the jupysql extension to enable SQL cells in the Jupyter notebook. This allows running SQL queries directly within notebook cells without explicitly importing the DuckDB engine.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# load (or reload) jupysql to create SQL cells\n# no need to import duckdb_engine, JupySQL will auto-detect driver \n# load (or reload) jupysql Jupyter extension to create SQL cells\n%reload_ext sql\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Transportation Data with Fused UDF\nDESCRIPTION: Executes the Fused Overture UDF to load transportation network data for the specified bounding box area. This example loads both segments (roads) and connectors (intersections, junctions).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='segment')\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='connector')\n```\n\n----------------------------------------\n\nTITLE: Counting Division Areas by Subtype in DuckDB\nDESCRIPTION: This SQL query counts the number of division areas by subtype in the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT subtype, COUNT(*) AS count\nFROM read_parquet('divisions/*.parquet')\nWHERE type = 'division_area'\nGROUP BY subtype\nORDER BY count DESC;\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Administrative Divisions Data with Fused UDF\nDESCRIPTION: Executes the Fused Overture UDF to load administrative division data for the specified bounding box area. This example loads three related division datasets: boundaries, divisions, and division areas.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='division_boundary')\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='division')\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='division_area')\n```\n\n----------------------------------------\n\nTITLE: Finding Places Near Space Needle Using Distance Query\nDESCRIPTION: Python code to query places within 1km of the Space Needle using Sedona's ST_DistanceSpheroid function.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nplaces.filter(\"\"\"ST_DistanceSpheroid(\n    ST_GeomFromWKT('POINT(-122.3493 47.6204)'),\n    geometry) < 1000\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fused UDF for Joining Overture and NSI Data in Python\nDESCRIPTION: This code defines a custom User Defined Function (UDF) using Fused. It encapsulates the process of loading Overture Buildings data, fetching NSI data, and joining them. The UDF can be reused with different bounding boxes.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport fused\n\n@fused.udf\ndef udf(bbox):\n    import json\n    import geopandas as gpd\n    import requests\n\n    # 1. Load Overture Buildings\n    gdf_overture = fused.run(\"UDF_Overture_Maps_Example\", bbox=bbox, overture_type='building')\n\n    # 2. Load NSI from API\n    bbox_geojson = json.loads(bbox.to_json())\n    response = requests.post(\n        url=\"https://nsi.sec.usace.army.mil/nsiapi/structures?fmt=fc\",\n        json=bbox_geojson,\n    )\n\n    # 3. Create NSI gdf\n    gdf_nsi = gpd.GeoDataFrame.from_features(response.json()[\"features\"])\n\n    # 4. Join Overture and NSI\n    return gdf_overture.sjoin(gdf_nsi, how='inner', predicate='intersects')\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Water Data with Fused UDF\nDESCRIPTION: Executes the Fused Overture UDF to load water feature data for the specified bounding box area.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='water')\n```\n\n----------------------------------------\n\nTITLE: Downloading Bounded Area with Python CLI\nDESCRIPTION: Downloads place data for a specific bounding box area in GeoJSON format using the Overture Python command-line tool.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/places.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noverturemaps download --bbox=12.46,41.89,12.48,41.91 -f geojson --type=place -o rome.geojson\n```\n\n----------------------------------------\n\nTITLE: Querying Seattle Places Data with Azure Synapse SQL\nDESCRIPTION: This SQL query retrieves places data for Seattle from Overture Maps using Azure Synapse. It selects various attributes such as ID, name, categories, and geographic coordinates, filtering for places located in Seattle.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/synapse-azure.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TOP 100\n    id\n    ,type\n    ,updatetime\n    ,version\n    ,names\n    ,JSON_VALUE(JSON_QUERY(categories, '$[0]'), '$.main') AS category\n    ,confidence\n    ,bbox\n    ,websites\n    ,socials\n    ,emails\n    ,phones\n    ,brand\n    ,addresses\n    ,sources\n    ,JSON_VALUE(geometry, '$.coordinates[0]') AS longitude\n    ,JSON_VALUE(geometry, '$.coordinates[1]') AS latitude\nFROM\n    OPENROWSET(\n        BULK 'https://overturemapswestus2.blob.core.windows.net/release/2023-07-26-alpha.0/theme=places/type=place/*',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE JSON_VALUE(addresses, '$[0].locality') = 'Seattle'\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for GeoArrow-based Visualization with Lonboard\nDESCRIPTION: Imports the required libraries to fetch Overture data using overturemaps-py and visualize it with Lonboard's mapping components.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport overturemaps\nfrom lonboard import Map, PathLayer\n```\n\n----------------------------------------\n\nTITLE: Building Part Schema Definition Table in Markdown\nDESCRIPTION: Defines the complete schema for the building_part table in GeoParquet format, including field names, data types, and descriptions for all building part attributes.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/buildings.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| column                 | type    | description |\n| ---------------------- | ------- | ------------ |\n| id                     | varchar | A feature ID that may be associated with the Global Entity Reference System (GERS) if—and-only-if the feature represents an entity that is part of GERS. |\n| geometry               | blob    | A building's geometry is defined as its footprint or roofprint (if traced from aerial/satellite imagery). MUST be a Polygon as defined by GeoJSON schema. |\n| bbox                   | struct  | Area defined by two longitudes and two latitudes: latitude is a decimal number between -90.0 and 90.0; longitude is a decimal number between -180.0 and 180.0. |\n| version                | integer | Version number of the feature, incremented in each Overture release where the geometry or attributes of this feature changed.\n| sources                | struct  | The array of source information for the properties of a given feature. Each source object lists the property in JSON Pointer notation and the dataset from which that specific value originated. |\n| names                  | struct  | The name associated with the feature. The first entry in the array of names must have a \"local\" language. |\n| level                  | integer | The building feature's Z-order, i.e., stacking order. A Z-order of 0 is ground level. |\n| is_underground         | boolean | Whether the entire building or part is completely below ground. |\n| height                 | double  | Height of the building or part in meters. |\n| num_floors             | integer | Number of above-ground floors of the building or part. |\n| num_floors_underground | integer | Number of below-ground floors of the building or part. |\n| min_height             | double  | The height of the bottom part of building in meters. |\n| min_floor              | integer | The \"start\" floor of a building or building part. |\n| facade_color           | varchar | The color of the facade of a building or building part in hexadecimal. |\n| facade_material        | varchar | The outer surface material of building facade. |\n| roof_material          | varchar | The outermost material of the roof. |\n| roof_shape             | varchar | The shape of the roof. |\n| roof_direction         | double  | Bearing of the roof ridge line. |\n| roof_orientation       | varchar | Orientation of the roof shape relative to the footprint shape. Either \"along\" or \"across.\" |\n| roof_color             | varchar | The color of the roof of a building or building part in hexadecimal. |\n| building_id            | varchar | The building ID to which this part belongs.|\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Buildings Data with Fused in Python\nDESCRIPTION: This snippet demonstrates how to use Fused's run function to load Overture Buildings data for a specified bounding box. It allows specifying the Overture theme and columns to fetch.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngdf_overture = fused.run(\n    \"UDF_Overture_Maps_Example\", \n    bbox=bbox, \n    overture_type='building', \n    use_columns=['geometry', 'names', 'sources']\n)\n```\n\n----------------------------------------\n\nTITLE: Joining Overture and NSI Data with Spatial Join in Python\nDESCRIPTION: This snippet shows how to perform a spatial join between the Overture Buildings data and the NSI data using GeoPandas' sjoin method.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngdf_overture.sjoin(gdf_nsi, how='inner', predicate='intersects')\n```\n\n----------------------------------------\n\nTITLE: Querying Amazon S3 for Water Data in Overture Maps\nDESCRIPTION: This snippet demonstrates how to construct a query to access water data from Overture Maps stored in Amazon S3. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=water/*\n```\n\n----------------------------------------\n\nTITLE: Loading Transportation Data from S3 using Sedona\nDESCRIPTION: Python code to load transportation (roads) data from Overture Maps S3 bucket using Sedona's GeoParquet reader.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nroads = sedona.read.format(\"geoparquet\").load(\n    \"s3a://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=transportation/type=segment/\")\n```\n\n----------------------------------------\n\nTITLE: Loading Buildings Data from S3 using Sedona\nDESCRIPTION: Python code to load buildings data from Overture Maps S3 bucket using Sedona's GeoParquet reader.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbuildings = sedona.read.format(\"geoparquet\").load(\n    \"s3a://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=buildings/type=building/\")\n```\n\n----------------------------------------\n\nTITLE: Downloading Address Data Using Python CLI\nDESCRIPTION: Command line utility to download Overture address data for a specific geographic region (Boston, MA) using bounding box coordinates and converting to GeoJSON format\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/addresses.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noverturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geojson --type=address -o boston.geojson\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Blob Storage for Land Use Data in Overture Maps\nDESCRIPTION: This snippet shows how to construct a query to access land use data from Overture Maps stored in Azure Blob Storage. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=base/type=land_use/*\n```\n\n----------------------------------------\n\nTITLE: Importing Python Libraries for Geospatial Data Processing\nDESCRIPTION: Imports the necessary Python libraries for working with geospatial data, including pandas for data manipulation, geopandas for geospatial operations, duckdb for database functionality, and shapely for working with geometric objects.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# import our toolkit\nimport pandas as pd\nimport geopandas as gpd\nimport duckdb\nfrom shapely import wkt\n```\n\n----------------------------------------\n\nTITLE: Downloading Riyadh Province Transportation Data with Overture Python CLI\nDESCRIPTION: Command to download segment-type transportation data for the Riyadh Province in Saudi Arabia in geoparquet format using the Overture Maps Python CLI. The command specifies bounding box coordinates and saves the output to a file.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-12-18-transportation-to-ga.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noverturemaps download --bbox=38.97,21.33,48.66,25.98 -f geoparquet --type=segment -o overture-segments-riyadh.geoparquet\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Land Use Data with Fused UDF\nDESCRIPTION: Executes the Fused Overture UDF to load land use data for the specified bounding box area, showing how different areas are utilized (commercial, residential, parks, etc.).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfused.run('UDF_Overture_Maps_Example', bbox=bbox, overture_type='land_use')\n```\n\n----------------------------------------\n\nTITLE: Creating a GeoDataFrame with CRS Definition\nDESCRIPTION: Converts the pandas DataFrame to a GeoPandas GeoDataFrame and sets the coordinate reference system (CRS) to EPSG:4326 (WGS84), which is the standard for geographic coordinates.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# dataframe to geodataframe, set crs\ngulf_water_gdf = gpd.GeoDataFrame(\n    gulf_water\n    , geometry='geometry', crs=\"EPSG:4326\"\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Road Data with Tippecanoe\nDESCRIPTION: Command to generate PMTiles archive for road data with zoom levels 10-13 and layer name 'roads'\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/build-a-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntippecanoe -fo roads.pmtiles -Z10 -B10 -z13 -l roads -P seattle_roads.geojsonseq\n```\n\n----------------------------------------\n\nTITLE: Finding building addresses using Overture Places data\nDESCRIPTION: This query intersects Overture Places point features with building polygons to attach address data to buildings. Useful when the dedicated address theme doesn't cover an area of interest, this spatial join leverages the wide coverage of the places theme.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/places.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlacesInBuildingsQuery\n```\n\n----------------------------------------\n\nTITLE: Downloading Philadelphia Transportation Data with Overture Python CLI\nDESCRIPTION: Command to download segment-type transportation data for the Philadelphia area in geoparquet format using the Overture Maps Python CLI. The command specifies a bounding box coordinates for Philadelphia and saves the output to a file.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-12-18-transportation-to-ga.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\noverturemaps download --bbox=-75.8264,39.7032,-74.5213,40.444 -f geoparquet --type=segment -o overture-segments-philadelphia.geoparquet\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Division Feature in DuckDB\nDESCRIPTION: This SQL query retrieves a specific division feature by its ID from the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM read_parquet('divisions/*.parquet')\nWHERE id = 'OM_D_10113004'\nLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Processing Base Map Data with Tippecanoe\nDESCRIPTION: Command to combine land, land use, and water data into a single PMTiles archive with multiple layers and zoom levels 8-13\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/build-a-map.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntippecanoe -fo base.pmtiles -Z8 -z13 -P \\\n    --named-layer=land:seattle_land.geojsonseq \\\n    --named-layer=landuse:seattle_land_use.geojsonseq \\\n    --named-layer=water:seattle_water.geojsonseq\n```\n\n----------------------------------------\n\nTITLE: Querying Division Counts by Type in DuckDB\nDESCRIPTION: This SQL query counts the number of divisions by type in the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT type, COUNT(*) AS count\nFROM read_parquet('divisions/*.parquet')\nWHERE type IN ('division', 'division_area', 'division_boundary')\nGROUP BY type\nORDER BY count DESC;\n```\n\n----------------------------------------\n\nTITLE: Fetching NSI Data via API and Converting to GeoDataFrame in Python\nDESCRIPTION: This code fetches data from the National Structures Inventory (NSI) API using a GeoJSON derived from the bounding box. It then converts the response into a GeoDataFrame for further processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\n# Convert to GeoJSON\nbbox_geojson = json.loads(bbox.to_json())\n\n# Make a request to the NSI API\nresponse = requests.post(\n    url=\"https://nsi.sec.usace.army.mil/nsiapi/structures?fmt=fc\",\n    json=bbox_geojson,\n)\n\n# Create a GeoDataFrame from the response\ngdf_nsi = gpd.GeoDataFrame.from_features(response.json()[\"features\"])\n```\n\n----------------------------------------\n\nTITLE: Loading Place Data Directly into GeoDataFrame\nDESCRIPTION: Uses the geodataframe method from overturemaps-py to fetch place data and load it directly into a GeoPandas GeoDataFrame, simplifying the workflow by handling all conversions internally.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# read in Overture place feature type, direct to geodataframe\ngdf = core.geodataframe(\"place\", bbox=bbox)\n```\n\n----------------------------------------\n\nTITLE: Creating a Lonboard ScatterplotLayer for Places\nDESCRIPTION: Configures a ScatterplotLayer to visualize place points from the GeoDataFrame with teal color and minimum pixel radius. Creates an interactive map with 3D perspective for displaying the point data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# create map layer\nlayer = ScatterplotLayer.from_geopandas(\n    gdf,\n    get_fill_color=[0, 128, 128],\n    radius_min_pixels = 1.5,\n)\n\nview_state = {\n    \"longitude\": 9.18831,\n    \"latitude\": 45.464336,\n    \"zoom\": 13,\n    \"pitch\": 45,\n}\nm = Map(layer)\nm\n```\n\n----------------------------------------\n\nTITLE: Conflating Overture Places with OpenStreetMap data\nDESCRIPTION: This code demonstrates how to merge Overture Places data with OpenStreetMap POIs to enhance existing data with missing attributes like addresses or phone numbers. The query uses basic matching logic to join datasets and includes GERS ID for future synchronization.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/places.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nConflateOSMQuery\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Fused UDF with a Bounding Box in Python\nDESCRIPTION: This snippet demonstrates how to run the custom UDF created for joining Overture and NSI data. It uses the Fused run function and passes a bounding box as a parameter.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfused.run(udf, bbox=bbox) \n```\n\n----------------------------------------\n\nTITLE: Rendering Final Map\nDESCRIPTION: Sets up view state parameters and renders the final map visualization with the configured layer.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nview_state = {\n    \"longitude\": -76.2,\n    \"latitude\": 39.6,\n    \"zoom\": 8,\n    \"pitch\": 65,\n    \"bearing\": 5,\n}\nm = Map(layer, view_state=view_state)\nm\n```\n\n----------------------------------------\n\nTITLE: Filtering High-Resolution Land Cover Features in Python\nDESCRIPTION: This code filters the DataFrame to include only high-resolution land cover features, specifically those with a minimum zoom level of 8 in their cartography attributes.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# filter for higher resolution land_cover features\ndf_h = df[df.cartography.apply(lambda x: x['min_zoom'] == 8)]\n```\n\n----------------------------------------\n\nTITLE: Querying Places in Seattle Using Spatial Filter\nDESCRIPTION: Python code demonstrating a spatial query to find places within a bounding box of Seattle using Sedona's ST_Contains function.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplaces.filter(\"\"\"ST_Contains(\n    ST_GeomFromWKT('POLYGON((-122.459681 47.734124, -122.224433 47.734124, -122.224433 47.481002, -122.459681 47.481002, -122.459681 47.734124))'),\n    geometry)\"\"\").limit(100).show()\n```\n\n----------------------------------------\n\nTITLE: Loading Building Data into PyArrow Table\nDESCRIPTION: Fetches building data for Milan using record_batch_reader and combines the chunks into a single PyArrow table for further processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# need feature type and bounding box as arguments\ntable = overturemaps.record_batch_reader(\"building\", bbox).read_all()\ntable = table.combine_chunks()\n```\n\n----------------------------------------\n\nTITLE: Loading Places Data from S3 using Sedona\nDESCRIPTION: Python code to load places data from Overture Maps S3 bucket using Sedona's GeoParquet reader.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplaces = sedona.read.format(\"geoparquet\").load(\n    \"s3a://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/type=place/\")\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing GeoParquet\nDESCRIPTION: Demonstrates how to read and write GeoParquet files directly using DuckDB v1.1.0, which includes support for geometry types and appropriate metadata.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/duckdb.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCOPY(\n  SELECT\n    *\n  FROM read_parquet('s3://overturemaps-us-west-2/release/2024-08-20.0/theme=places/type=place/*', filename=true, hive_partitioning=1)\n  LIMIT 100000\n) TO 'places.parquet';\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Overture Maps Processing\nDESCRIPTION: Imports necessary Python libraries for working with Overture Maps data, including pandas, geopandas, overturemaps, shapely and lonboard visualization tools.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport geopandas as gpd\nimport overturemaps \nfrom shapely import wkb\nfrom lonboard import Map, PolygonLayer\nfrom lonboard.colormap import apply_categorical_cmap\n```\n\n----------------------------------------\n\nTITLE: Querying Philadelphia Places in DuckDB\nDESCRIPTION: This SQL query retrieves division features for Philadelphia from the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM read_parquet('divisions/*.parquet')\nWHERE type = 'division'\n  AND names_json->'common'->'en' LIKE '%Philadelphia%'\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Querying DuckDB for Philadelphia Buildings (April 2024 Beta Release)\nDESCRIPTION: SQL query to retrieve buildings in Philadelphia from the April 2024 beta release, showing improved performance (approximately 25 seconds for 852,487 buildings) with updated field names.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-04-22-beta-release.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n*\nFROM   \n    read_parquet('s3://overturemaps-us-west-2/release/2024-04-16-beta.0/theme=buildings/type=building/*', filename=true, hive_partitioning=1)\nWHERE \n    bbox.xmin > -75.60154\n    AND bbox.xmax < -74.955763\n    AND bbox.ymin > 39.867004\n    AND bbox.ymax < 40.137992\n```\n\n----------------------------------------\n\nTITLE: Filtering GeoPandas GeoDataFrame by Geometry Type\nDESCRIPTION: Filters the GeoDataFrame to exclude point geometries, keeping only polygon and line geometries. This is done using a lambda function to check the geometry type of each feature.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Apply a lambda to remove point geometries\ngulf_water_gdf = gulf_water_gdf[gulf_water_gdf['geometry'].apply(lambda x : x.geom_type!='Point' )]\n```\n\n----------------------------------------\n\nTITLE: Displaying Gulf Water Data Preview\nDESCRIPTION: Shows the first few rows of the extracted water feature dataset to inspect the data structure before further processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngulf_water.head()\n```\n\n----------------------------------------\n\nTITLE: Counting Divisions by Subtype in DuckDB\nDESCRIPTION: This SQL query counts the number of divisions by subtype in the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT subtype, COUNT(*) AS count\nFROM read_parquet('divisions/*.parquet')\nWHERE type = 'division'\nGROUP BY subtype\nORDER BY count DESC;\n```\n\n----------------------------------------\n\nTITLE: Creating a Bounding Box GeoDataFrame in Python\nDESCRIPTION: This code creates a GeoDataFrame with a bounding box for an area of interest. It uses Fused, GeoPandas, and Shapely to define the geographical area for data loading.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport fused\nimport geopandas as gpd\nimport shapely\n\nbbox = gpd.GeoDataFrame(\n    geometry=[shapely.box(-73.9847, 40.7666, -73.9810, 40.7694)], \n    crs=4326\n)\n```\n\n----------------------------------------\n\nTITLE: Counting Divisions Features by Type Using DuckDB\nDESCRIPTION: This SQL query counts the total number of features for each type in the divisions theme. It provides a statistical overview of the dataset's composition.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCountsPerType\n```\n\n----------------------------------------\n\nTITLE: Importing Python Libraries for Geospatial Data Processing\nDESCRIPTION: Imports the necessary Python libraries for working with geospatial data including pandas for data manipulation, geopandas for geospatial operations, shapely for geometry handling, and duckdb for database operations.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# import our toolkit\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely import wkt\nimport duckdb\n```\n\n----------------------------------------\n\nTITLE: Converting WKT Geometry to Shapely Objects\nDESCRIPTION: Transforms the Well-Known Text (WKT) geometry strings into Shapely geometry objects that can be used with GeoPandas. This is necessary for spatial operations and visualization.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngulf_water['geometry'] = gulf_water['geometry'].apply(wkt.loads)\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Sources with PMTiles\nDESCRIPTION: JavaScript configuration for adding PMTiles vector sources to a Maplibre map style\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/build-a-map.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  style: {\n    sources: {\n      roads: {\n        type: \"vector\",\n        url: \"pmtiles://../example-map/tiles/roads.pmtiles\"\n      },\n      places: {\n        type: \"vector\",\n        url: \"pmtiles://../example-map/tiles/places.pmtiles\"\n      },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Building Data from Azure Blob Storage\nDESCRIPTION: Azure Blob Storage URL for accessing the building data from Overture Maps release. This query pattern allows retrieving building footprint information from Microsoft Azure storage.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/buildings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=buildings/type=building/*\n```\n\n----------------------------------------\n\nTITLE: Converting DataFrame to GeoDataFrame in Python\nDESCRIPTION: This code converts the pandas DataFrame to a GeoDataFrame, which includes spatial information. It sets the coordinate reference system (CRS) to EPSG:4326 and converts the geometry column from Well-Known Binary (WKB) format.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# dataframe to geodataframe, set crs\ngdf = gpd.GeoDataFrame(\n    df_h, \n    geometry=df_h['geometry'].apply(wkb.loads), \n    crs=\"EPSG:4326\"\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Out Point Geometries\nDESCRIPTION: Removes point geometries from the dataset to focus only on water polygons and lines. This filtering is done by applying a lambda function that checks each geometry's type.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#Apply a lambda to remove point geometries\ngulf_water_gdf = gulf_water_gdf[gulf_water_gdf['geometry'].apply(lambda x : x.geom_type!='Point' )]\n```\n\n----------------------------------------\n\nTITLE: Querying Gulf Coast Water Features from Overture Maps\nDESCRIPTION: Extracts water feature data from Overture Maps for the Gulf Coast region. The query filters geographic data by bounding box coordinates and converts WKB geometry to WKT format for easier processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%%sql gulf_water <<\nSELECT \n    id, \n    names.primary AS primary_name,\n    ST_AsText(ST_GeomFromWKB(geometry)) as geometry\nFROM \n    read_parquet('s3://overturemaps-us-west-2/release/2024-07-22.0/theme=base/type=water/*', filename=true, hive_partitioning=1)\nWHERE \n    bbox.xmin >= -91.3994\n\t\tand bbox.xmax <= -89.3864\n\t\tand bbox.ymin >= 29.152\n\t\tand bbox.ymax <= 30.5161\n\n \n```\n\n----------------------------------------\n\nTITLE: Accessing Building Part Data from Azure Blob Storage\nDESCRIPTION: Azure Blob Storage URL for accessing the building part data from Overture Maps release. This query pattern allows retrieving information about building parts from Microsoft Azure storage.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/buildings.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=buildings/type=building_part/*\n```\n\n----------------------------------------\n\nTITLE: Defining Land Cover Color Map\nDESCRIPTION: Creates a color mapping dictionary for different land cover subtypes using RGB values based on a natural-color palette.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncolor_map = {\n    \"urban\": [167, 162, 186],\n    \"forest\": [134, 178, 137],\n    \"barren\": [245, 237, 213],\n    \"shrub\": [239, 218, 182],\n    \"grass\": [254, 239, 173],\n    \"crop\": [222, 223, 154],\n    \"wetland\": [158, 207, 195], \n    \"mangrove\": [83, 171, 128],\n    \"moss\": [250, 230, 160],\n    \"snow\": [255, 255, 255],  \n}\n```\n\n----------------------------------------\n\nTITLE: Exploring Overture Transportation Schema\nDESCRIPTION: Examines the schema of the PyArrow table to understand the structure and attributes of the Overture transportation data, including field names and data types.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable.schema\n```\n\n----------------------------------------\n\nTITLE: Installing and Loading DuckDB Extensions\nDESCRIPTION: Sets up DuckDB with necessary extensions for working with spatial data and accessing cloud storage. The spatial extension adds geospatial functionality, while httpfs enables connectivity to remote data sources.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n%sql INSTALL spatial;\n%sql INSTALL httpfs;\n%sql LOAD spatial;\n%sql LOAD httpfs;\n%sql SET s3_region='us-west-2'\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Area of Interest for Overture Data\nDESCRIPTION: Creates a GeoDataFrame with a bounding box to specify the geographic area for which to retrieve Overture Maps data. The example uses coordinates for a small area in New York City with the WGS84 coordinate reference system (EPSG:4326).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport fused\nimport geopandas as gpd\nimport shapely\n\nbbox = gpd.GeoDataFrame(\n    geometry=[shapely.box(-73.9847, 40.7666, -73.9810, 40.7694)], \n    crs=4326\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Amazon S3 for Bathymetry Data in Overture Maps\nDESCRIPTION: This snippet demonstrates how to construct a query to access bathymetry data from Overture Maps stored in Amazon S3. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=bathymetry/*\n```\n\n----------------------------------------\n\nTITLE: Direct URL for Opening Rapid with Places Data Preloaded\nDESCRIPTION: URL format that automatically opens Rapid editor with Overture Places data loaded. This format eliminates the need to manually add the data layer through the Custom Data dialog.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/rapid-id.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://rapideditor.org/edit#data=https://overturemaps-tiles-us-west-2-beta.s3.amazonaws.com/__PMTILES_OVERTURE_RELEASE/places.pmtiles\n```\n\n----------------------------------------\n\nTITLE: Starting Sedona Docker Container\nDESCRIPTION: Commands to pull and run the Apache Sedona Docker image, which provides a Jupyter Lab environment for working with spatial data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull apache/sedona\ndocker run -p 8888:8888 apache/sedona:latest\n```\n\n----------------------------------------\n\nTITLE: Downloading Campobasso Transportation Data with Overture Python CLI\nDESCRIPTION: Command to download segment-type transportation data for Campobasso, Italy in geoparquet format using the Overture Maps Python CLI. The command specifies bounding box coordinates for the Campobasso region and saves the output to a file.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-12-18-transportation-to-ga.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\noverturemaps download --bbox=13.8152,40.8473,15.6336,42.0773 -f geoparquet --type=segment -o overture-segments-campobasso.geoparquet\n```\n\n----------------------------------------\n\nTITLE: Querying Amazon S3 for Land Cover Data in Overture Maps\nDESCRIPTION: This snippet demonstrates how to construct a query to access land cover data from Overture Maps stored in Amazon S3. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=land_cover/*\n```\n\n----------------------------------------\n\nTITLE: Querying by Overture ID Using DuckDB\nDESCRIPTION: This SQL query demonstrates how to retrieve a specific feature using its Overture ID. It shows the direct lookup capability for individual features.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSpecificFeature\n```\n\n----------------------------------------\n\nTITLE: Loading Road Segment Data with record_batch_reader\nDESCRIPTION: Uses the record_batch_reader method from overturemaps-py to retrieve road segment data for the specified bounding box and load it into a PyArrow table. The read_all() method loads all matching data into memory.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# need feature type and bounding box as arguments\ntable = overturemaps.record_batch_reader(\"segment\", bbox).read_all()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Overture Maps\nDESCRIPTION: Command to set AWS credentials as environment variables for the Overture Maps container. This allows the container to access AWS S3 resources where Overture Maps data is stored.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-geodataframe-long.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n  -e AWS_ACCESS_KEY_ID=your-access-key \\\n  -e AWS_SECRET_ACCESS_KEY=your-secret-key \\\n  overture-maps\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Layer for Map Visualization in Python\nDESCRIPTION: This snippet creates a PolygonLayer using the GeoDataFrame for map visualization. It sets the fill and line colors based on the previously applied color map.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# create map layer \nlayer = PolygonLayer.from_geopandas(\n    gdf= gdf[['id','subtype', 'cartography', 'geometry']].reset_index(drop=True),\n    get_fill_color=colors,\n    get_line_color=colors,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for GeoPandas-based Visualization\nDESCRIPTION: Imports additional libraries needed for the GeoPandas workflow, including pandas for data manipulation, geopandas for geospatial operations, and shapely for geometry handling.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport overturemaps\nimport pandas\nimport geopandas as gpd\nfrom shapely import wkb\nfrom lonboard import Map, PolygonLayer\n```\n\n----------------------------------------\n\nTITLE: Querying Amazon S3 for Land Data in Overture Maps\nDESCRIPTION: This snippet demonstrates how to construct a query to access land data from Overture Maps stored in Amazon S3. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=land/*\n```\n\n----------------------------------------\n\nTITLE: Installing Overture Maps Python CLI Tool\nDESCRIPTION: Command to install the Overture Maps Python package using pip package manager.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/overturemaps-py.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install overturemaps\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Direct GeoDataFrame Method\nDESCRIPTION: Imports the necessary libraries for the simplified approach using the geodataframe method from overturemaps-py along with Lonboard's ScatterplotLayer for point data visualization.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nfrom overturemaps import core\nfrom lonboard import Map, ScatterplotLayer\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Maps Land Cover Data\nDESCRIPTION: Reads land cover data from Overture Maps within the specified bounding box and combines chunks into a single table.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable = overturemaps.record_batch_reader(\"land_cover\", bbox).read_all()\ntable = table.combine_chunks()\n```\n\n----------------------------------------\n\nTITLE: Modifying Buildings Profile for Lower Zoom Level Detail\nDESCRIPTION: Java code snippet showing how to modify the Buildings.java profile to include full property details at zoom level 12 instead of the default 13.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nOvertureProfile.addFullTags(source, polygon, 12);\n```\n\n----------------------------------------\n\nTITLE: Converting GeoParquet to Other Formats\nDESCRIPTION: Example commands for converting Overture data to different geospatial formats including Shapefile and GeoPackage using DuckDB's GDAL support.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/duckdb.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n) TO 'overture_data.shp' WITH (FORMAT GDAL, DRIVER 'ESRI Shapefile');\n```\n\nLANGUAGE: sql\nCODE:\n```\n) TO 'overture_data.gpkg' WITH (FORMAT GDAL, DRIVER 'GPKG');\n```\n\n----------------------------------------\n\nTITLE: Downloading Overture Maps Data from Azure Blob Storage using AzCopy\nDESCRIPTION: This command uses AzCopy to download Overture Maps data from Azure Blob Storage. It recursively copies files from the specified Azure storage account to a local directory.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nazcopy copy \"https://overturemapswestus2.dfs.core.windows.net/release/__OVERTURE_RELEASE/\" \"<<local directory path>>\"  --recursive\n```\n\n----------------------------------------\n\nTITLE: Querying Speed Limits with Athena\nDESCRIPTION: Athena query to extract roads with specific speed limit values using linear referencing and the any_match function.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n{SpeedLimits}\n```\n\n----------------------------------------\n\nTITLE: Initializing PMTiles Protocol with Maplibre\nDESCRIPTION: JavaScript code to set up PMTiles protocol integration with Maplibre GL JS in a React environment\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/build-a-map.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport maplibregl from 'maplibre-gl';\nimport { Protocol } from 'pmtiles';\n\nuseEffect(() => {\n  let protocol = new Protocol();\n  maplibregl.addProtocol(\"pmtiles\",protocol.tile);\n\n  ... initialize your map here ...\n\n  return () => {\n    maplibregl.removeProtocol(\"pmtiles\");\n  }\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Querying Amazon S3 for Infrastructure Data in Overture Maps\nDESCRIPTION: This snippet demonstrates how to construct a query to access infrastructure data from Overture Maps stored in Amazon S3. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=infrastructure/*\n```\n\n----------------------------------------\n\nTITLE: Installing QGIS via Flatpak on Linux\nDESCRIPTION: Command to install a Flatpak QGIS package that includes support for Parquet files on Linux systems.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/QGIS.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflatpak install --user https://dl.flathub.org/build-repo/94031/org.qgis.qgis.flatpakref\n```\n\n----------------------------------------\n\nTITLE: Querying US-Mexico Border in DuckDB\nDESCRIPTION: This SQL query retrieves the US-Mexico border from the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM read_parquet('divisions/*.parquet')\nWHERE type = 'division_boundary'\n  AND subtype = 'country'\n  AND (names_json->'common'->'en' LIKE '%United States%'\n    OR names_json->'common'->'en' LIKE '%Mexico%')\nLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Magic Output Settings\nDESCRIPTION: Configures the JupySQL Magic settings to automatically convert query results to pandas DataFrames, hide feedback messages, and not display connection information for cleaner notebook output.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# configure cell output -> query to Pandas\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = False\n%config SqlMagic.displaycon = False\n```\n\n----------------------------------------\n\nTITLE: Accessing Building Data from Amazon S3\nDESCRIPTION: S3 path for accessing the building data from Overture Maps release. This query pattern allows retrieving building footprint information from Amazon S3 storage.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/buildings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=buildings/type=building/*\n```\n\n----------------------------------------\n\nTITLE: Generating Base Theme Tiles with Java Planetiler\nDESCRIPTION: Command to run the Java-based Planetiler tool to generate base theme tileset from Overture data, outputting a PMTiles file.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -cp planetiler.jar profiles/Base.java --data=overture\n```\n\n----------------------------------------\n\nTITLE: Counting Division Boundaries in DuckDB\nDESCRIPTION: This SQL query counts the number of division boundaries by maritime status in the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT maritime, COUNT(*) AS count\nFROM read_parquet('divisions/*.parquet')\nWHERE type = 'division_boundary'\nGROUP BY maritime\nORDER BY count DESC;\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to GeoPandas GeoDataFrame\nDESCRIPTION: Transforms the Pandas DataFrame containing WKT geometry strings into a GeoPandas GeoDataFrame with proper Shapely geometry objects. Sets the coordinate reference system to EPSG:4326 (WGS84).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# dataframe to geodataframe, set crs\ngulf_water_gdf = gpd.GeoDataFrame(\n    gulf_water,\n    geometry=gulf_water['geometry'].apply(wkt.loads),\n    crs=\"EPSG:4326\"\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Overture Maps Data to Pandas DataFrame in Python\nDESCRIPTION: This code converts the Overture Maps data table into a pandas DataFrame for easier manipulation and analysis.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# convert to dataframe\ndf = table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Querying Parking Aisles with DuckDB\nDESCRIPTION: DuckDB query to extract parking_aisle features within a specific bounding box from the transportation data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n{ParkingAisles}\n```\n\n----------------------------------------\n\nTITLE: Counting Division Area Features Using DuckDB\nDESCRIPTION: This SQL query counts the number of division_area features in the dataset. It quantifies the administrative area polygons available in the data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDivAreaCounts\n```\n\n----------------------------------------\n\nTITLE: Applying Color Map to Land Cover Subtypes in Python\nDESCRIPTION: This snippet applies the defined color map to the land cover subtypes in the filtered DataFrame, assigning colors to each feature based on its subtype.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# apply color map to land_cover subtypes\ncolors = apply_categorical_cmap(df_h.subtype, color_map)\n```\n\n----------------------------------------\n\nTITLE: Defining Bounding Box for Overture Maps Data Retrieval in Python\nDESCRIPTION: This code snippet specifies the bounding box coordinates for the area of interest. These coordinates will be used to fetch the relevant land cover data from Overture Maps.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# specify bounding box\nbbox =  -78.6429, 39.463, -73.7806, 41.6242\n```\n\n----------------------------------------\n\nTITLE: Defining a Bounding Box for Milan\nDESCRIPTION: Specifies a geographical bounding box for Milan, Italy as the area of interest for data fetching. The coordinates represent the southwest and northeast corners of the rectangle.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# specify bounding box in Milan\nbbox = 9.125034,45.433352,9.245223,45.507116\n```\n\n----------------------------------------\n\nTITLE: Customizing Places Properties in SQL\nDESCRIPTION: SQL snippet used in the places.sh script to customize which properties are included in the places tileset, reducing tile size by including only essential fields.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\njson_object(\n    'id', id,\n    '@name', json_extract_string(names, '$.primary')\n) AS properties,\n```\n\n----------------------------------------\n\nTITLE: Converting to GeoDataFrame\nDESCRIPTION: Converts the DataFrame to a GeoDataFrame with proper geometry and coordinate reference system.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngdf = gpd.GeoDataFrame(\n    df_h, \n    geometry=df_h['geometry'].apply(wkb.loads), \n    crs=\"EPSG:4326\"\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting Water Features with GeoPandas\nDESCRIPTION: Creates a simple visualization of the water features using GeoPandas' plotting functionality. Sets custom colors for the water polygons (face color) and their outlines (edge color).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngulf_water_gdf.plot(facecolor=\"#628290\", edgecolor=\"#006064\", lw=0.05)\n```\n\n----------------------------------------\n\nTITLE: Inspecting PyArrow Table Shape\nDESCRIPTION: Displays the dimensions of the PyArrow table containing the road segment data, showing the number of rows and columns in the dataset.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntable.shape\n```\n\n----------------------------------------\n\nTITLE: Querying DuckDB for Philadelphia Buildings (Feb 2024 Alpha Release)\nDESCRIPTION: SQL query to retrieve buildings in Philadelphia from the February 2024 alpha release, demonstrating the slower query performance (approximately 120 seconds for 820,915 buildings).\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-04-22-beta-release.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n*\nFROM \n    read_parquet('s3://overturemaps-us-west-2/release/2024-02-15-alpha.0/theme=buildings/type=building/*', filename=true, hive_partitioning=1)\nWHERE \n    bbox.minx > -75.60154\n    AND bbox.maxx < -74.955763\n    AND bbox.miny > 39.867004\n    AND bbox.maxy < 40.137992;\n```\n\n----------------------------------------\n\nTITLE: Importing Fused in Python\nDESCRIPTION: This snippet shows how to import the Fused library, which is used to call predefined UDFs for loading and processing Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/fused.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fused\n```\n\n----------------------------------------\n\nTITLE: Initializing Sedona Context in Python\nDESCRIPTION: Python code to set up the Sedona context with anonymous AWS credentials, enabling access to S3 data without authentication.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sedona.spark import *\n\nconfig = SedonaContext.builder().config(\n    \"fs.s3a.aws.credentials.provider\",\n    \"org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider\"\n    ).getOrCreate()\nsedona = SedonaContext.create(config)\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Amazon S3 (Bash)\nDESCRIPTION: Command to access the Overture Maps data release 2025-03-19.1 on Amazon S3. This path was updated due to a patch release addressing an issue with theme and type columns in some Parquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-03-19.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2025-03-19.1\n```\n\n----------------------------------------\n\nTITLE: Running Modified Buildings Tileset Generation\nDESCRIPTION: Command to generate a customized buildings tileset using the modified Java profile.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njava -cp planetiler.jar profiles/Buildings.java --data=boston\n```\n\n----------------------------------------\n\nTITLE: Analyzing Speed Limits in Transportation Data Using Athena\nDESCRIPTION: This SQL query uses Amazon Athena to extract and analyze speed limit information from transportation segments. It helps identify road segments with specific speed restrictions for traffic safety analysis.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nimport SpeedLimits from '!!raw-loader!@site/src/queries/athena/transportation_speed_limits.sql';\n```\n\n----------------------------------------\n\nTITLE: Interpreting OSM to Overture Conversion Logic\nDESCRIPTION: This snippet shows how to interpret the CASE statements that determine feature subtypes and classes. It demonstrates how the OpenStreetMap tag 'highway=bus_stop' is converted to an Overture feature with subtype='transit' and class='bus_stop'.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/playground/test-sql-inclusion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWHEN element_at(tags,'highway') = 'bus_stop' THEN ROW('transit', 'bus_stop')\n```\n\n----------------------------------------\n\nTITLE: Accessing Building Part Data from Amazon S3\nDESCRIPTION: S3 path for accessing the building part data from Overture Maps release. This query pattern allows retrieving information about building parts, which are associated with parent buildings.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/buildings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=buildings/type=building_part/*\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Microsoft Azure (Bash)\nDESCRIPTION: Command to access the original Overture Maps data release 2025-03-19.0 on Microsoft Azure. This path provides access to the datasets as GeoParquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-03-19.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2025-03-19.0\n```\n\n----------------------------------------\n\nTITLE: Running Theme-Specific Tileset Generation Script\nDESCRIPTION: Example of running a shell script to generate a places theme tileset from Overture data, showing the pattern for theme-specific processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nscripts/2024-08-20/places.sh overture places.pmtiles\n```\n\n----------------------------------------\n\nTITLE: Implementing New Connectors Property in Transportation Segment\nDESCRIPTION: This example shows the new connectors property structure for transportation segments. It defines connector IDs with linear reference values that link segments and connector features via coordinates, which supports routing use cases by indicating possible routing decision points.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-08-15-preview-august-release.mdx#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: overture:transportation:segment:123\ntype: Feature\ngeometry:\n  type: LineString\n  coordinates: [[0, 0], [0.03, 0], [0.10, 0]]\nproperties:\n  theme: transportation\n  type: segment\n  version: 1\n  subtype: road\n  class: secondary\n  connectors:\n    - connector_id: fooConnector\n      at: 0\n    - connector_id: barConnector\n      at: 0.3\n    - connector_id: bazConnector\n      at: 1\n  road_surface:\n    - value: paved\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Configuration for Overture Glue Catalog Access\nDESCRIPTION: AWS IAM policy definition that grants necessary permissions to access the Overture Glue Data Catalog. Specifies allowed actions and resources for accessing tables, databases, and partitions.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/athena-aws.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"glue:GetTable*\",\n        \"glue:GetDatabase*\",\n        \"glue:GetPartition*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:glue:us-west-2:913550007193:catalog\",\n        \"arn:aws:glue:us-west-2:913550007193:database/release\",\n        \"arn:aws:glue:us-west-2:913550007193:table/*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Path Configuration for Overture Maps Release\nDESCRIPTION: Amazon S3 storage path for accessing the 2024-09-18.0 Overture Maps release data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-09-18.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2024-09-18.0\n```\n\n----------------------------------------\n\nTITLE: Converting PyArrow Table to Pandas DataFrame\nDESCRIPTION: Transforms the PyArrow table containing building data into a pandas DataFrame, which serves as an intermediate step before creating a GeoDataFrame.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# convert to dataframe\ndf = table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Querying Transportation Route Information\nDESCRIPTION: This SQL query extracts route information from transportation segments. It focuses on retrieving segments that are part of defined routes, which would be useful for public transportation or designated travel path analysis.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nimport Routes from '!!raw-loader!@site/src/queries/duckdb/transportation_routes.sql';\n```\n\n----------------------------------------\n\nTITLE: Example of Microsoft Buildings Source Structure in JSON\nDESCRIPTION: JSON representation of the source structure for Microsoft buildings, including the update_time property moved from the top level to within the sources structure.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-07-22.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{property=, dataset=Microsoft ML Buildings, record_id=709fc8cf0b55, update_time=2023-06-23T00:00:00.000Z, confidence=null}]\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Blob Storage for Water Data in Overture Maps\nDESCRIPTION: This snippet shows how to construct a query to access water data from Overture Maps stored in Azure Blob Storage. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=base/type=water/*\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Path Configuration for GERS Changelog\nDESCRIPTION: Amazon S3 storage path for accessing the GERS changelog files for the 2024-09-18.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-09-18.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2024-09-18.0\n```\n\n----------------------------------------\n\nTITLE: Creating a GeoDataFrame from Pandas DataFrame\nDESCRIPTION: Converts the pandas DataFrame to a GeoPandas GeoDataFrame by transforming the WKB geometry column into Shapely geometries. Sets the coordinate reference system to EPSG:4326 (WGS84).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/lonboard.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# DataFrame to GeoDataFrame, set crs\ngdf = gpd.GeoDataFrame(\n    df,\n    geometry=df['geometry'].apply(wkb.loads),\n    crs=\"EPSG:4326\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container for Overture Maps\nDESCRIPTION: These commands build and run a Docker container for Overture Maps with the necessary volume mounts. It maps local directories to container paths for data processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-geodataframe-long.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t overture-maps .\ndocker run -it --rm \\\n  -v /local/path/to/data:/overture/data \\\n  -v /local/path/to/output:/overture/output \\\n  overture-maps\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Blob Storage for Bathymetry Data in Overture Maps\nDESCRIPTION: This snippet shows how to construct a query to access bathymetry data from Overture Maps stored in Azure Blob Storage. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=base/type=bathymetry/*\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Path Configuration for Overture Maps Release\nDESCRIPTION: Amazon S3 path for accessing the 2024-08-20.0 release of Overture Maps data\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-08-20.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2024-08-20.0\n```\n\n----------------------------------------\n\nTITLE: Loading Overture Places Data URL in Rapid Editor\nDESCRIPTION: URL for loading Overture Places data as a custom layer in Rapid editor. This URL points to a PMTiles file containing Places point data from Overture Maps.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/rapid-id.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemaps-tiles-us-west-2-beta.s3.amazonaws.com/__PMTILES_OVERTURE_RELEASE/places.pmtiles\n```\n\n----------------------------------------\n\nTITLE: Downloading Divisions Data for Boston Using Python Command-line Tool\nDESCRIPTION: This command uses the Overture Maps Python command-line tool to download divisions data within a bounding box around Boston, MA and save it as a GeoJSON file. It specifies the geographic coordinates for the region of interest.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\noverturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geojson --type=divisions -o boston.geojson\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data Changelog on Amazon S3 (Bash)\nDESCRIPTION: Command to access the Overture Maps data changelog for release 2025-03-19.0 on Amazon S3. The changelog captures changes in features between this release and the previous one, stored as Parquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-03-19.0.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2025-03-19.0\n```\n\n----------------------------------------\n\nTITLE: Cross-Account Glue Catalog Sharing Policy\nDESCRIPTION: AWS IAM policy template for sharing the Overture Maps catalog across different AWS accounts. Defines permissions for accessing catalog resources across accounts.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/athena-aws.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": [\n        \"glue:GetTable*\",\n        \"glue:GetDatabase*\",\n        \"glue:GetPartition*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:glue:<region>:<account id>:catalog\",\n        \"arn:aws:glue:<region>:<account id>:database/release\",\n        \"arn:aws:glue:<region>:<account id>:table/*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path Configuration for GERS Changelog\nDESCRIPTION: Azure Blob Storage path for accessing the GERS changelog data for the 2024-08-20.0 release\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-08-20.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-08-20.0\n```\n\n----------------------------------------\n\nTITLE: Installing Fused Python Library\nDESCRIPTION: Command to install the Fused Python library using pip. Version 1.10.0 or higher is required for compatibility with the Overture UDF.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/fused.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install fused>=1.10.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Amazon S3 (Bash)\nDESCRIPTION: Command to access the original Overture Maps data release 2025-03-19.0 on Amazon S3. This path provides access to the datasets as GeoParquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-03-19.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2025-03-19.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data Changelog on Microsoft Azure (Bash)\nDESCRIPTION: Command to access the Overture Maps data changelog for release 2025-03-19.0 on Microsoft Azure. The changelog captures changes in features between this release and the previous one, stored as Parquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-03-19.0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2025-03-19.0\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Path Configuration for GERS Changelog\nDESCRIPTION: Amazon S3 path for accessing the GERS changelog data for the 2024-08-20.0 release\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-08-20.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2024-08-20.0\n```\n\n----------------------------------------\n\nTITLE: Filtering High Resolution Features\nDESCRIPTION: Filters the DataFrame to include only high-resolution land cover features with min_zoom of 8.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf_h = df[df.cartography.apply(lambda x: x['min_zoom'] == 8)]\n```\n\n----------------------------------------\n\nTITLE: Looking Up OpenStreetMap Relations in DuckDB\nDESCRIPTION: This SQL query looks up OpenStreetMap relations for specific division features in the Overture Maps Divisions dataset using DuckDB.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM read_parquet('divisions/*.parquet')\nWHERE sources IS NOT NULL\n  AND sources LIKE '%openstreetmap:type=relation%'\n  AND sources LIKE '%openstreetmap:id=51477%'\nLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Amazon S3\nDESCRIPTION: Amazon S3 path for accessing the 2025-02-19.0 release of Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-02-19.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2025-02-19.0\n```\n\n----------------------------------------\n\nTITLE: Direct URL for Opening Rapid with Buildings Data Preloaded\nDESCRIPTION: URL format that automatically opens Rapid editor with Overture Buildings data loaded. This demonstrates loading polygon features in addition to point features.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/rapid-id.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://rapideditor.org/edit#data=https://overturemaps-tiles-us-west-2-beta.s3.amazonaws.com/__PMTILES_OVERTURE_RELEASE/buildings.pmtiles\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Amazon S3\nDESCRIPTION: Command to access the Overture Maps 2024-07-22.0 release data stored on Amazon S3 in the US West 2 region.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-07-22.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2024-07-22.0\n```\n\n----------------------------------------\n\nTITLE: Converting Table to Pandas DataFrame\nDESCRIPTION: Converts the Overture Maps table data into a pandas DataFrame for further processing.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = table.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Microsoft Azure\nDESCRIPTION: The Azure blob storage path for accessing the 2025-01-22.0 release of Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-01-22.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2025-01-22.0\n```\n\n----------------------------------------\n\nTITLE: Adding Jupyter Notebook Support to Docker Container\nDESCRIPTION: Command to run the Overture Maps container with Jupyter Notebook support. It maps port 8888 from the container to the host and adds volume mounts for notebooks.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-geodataframe-long.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n  -p 8888:8888 \\\n  -v /local/path/to/notebooks:/overture/notebooks \\\n  overture-maps jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root\n```\n\n----------------------------------------\n\nTITLE: Setting Bounding Box Coordinates\nDESCRIPTION: Defines the geographic bounding box coordinates for the area of interest.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbbox =  -78.6429, 39.463, -73.7806, 41.6242\n```\n\n----------------------------------------\n\nTITLE: Defining Color Map for Land Cover Subtypes in Python\nDESCRIPTION: This code defines a color map for different land cover subtypes. The colors are loosely based on a natural-color palette, assigning specific RGB values to each land cover category.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# create color map for land_cover subtypes, loosely based on natural-color palette: https://www.shadedrelief.com/shelton/c.html\ncolor_map = {\n    \"urban\": [167, 162, 186],\n    \"forest\": [134, 178, 137],\n    \"barren\": [245, 237, 213],\n    \"shrub\": [239, 218, 182],\n    \"grass\": [254, 239, 173],\n    \"crop\": [222, 223, 154],\n    \"wetland\": [158, 207, 195], \n    \"mangrove\": [83, 171, 128],\n    \"moss\": [250, 230, 160],\n    \"snow\": [255, 255, 255],  \n}\n```\n\n----------------------------------------\n\nTITLE: Querying Connected Segments with Athena\nDESCRIPTION: Athena query to find all segments that connect to a specific segment ID using the connectors column.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n{ConnectingSegments}\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Microsoft Azure\nDESCRIPTION: The path to access the 2024-12-18.0 release of Overture Maps data stored on Microsoft Azure.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-12-18.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2024-12-18.0\n```\n\n----------------------------------------\n\nTITLE: Configuring JupySQL Output Settings\nDESCRIPTION: Configures JupySQL to automatically convert query results to Pandas DataFrames and simplifies the output displayed in the notebook by reducing feedback messages and connection information.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n%config SqlMagic.autopandas = True\n%config SqlMagic.feedback = False\n%config SqlMagic.displaycon = False\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme Statistics in SQL Format\nDESCRIPTION: SQL-like table showing the data counts for different types within each theme in the Overture Maps 2023-12-14-alpha.0 release. The table breaks down the number of records by theme and type.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2023-alpha/2023-12-14-alpha.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n+--------------+----------------------+----------+\n|theme         |type                  |count     |\n+--------------+----------------------+----------+\n|admins        |administrativeBoundary|59281     |\n|admins        |locality              |3817886   |\n|admins        |localityArea          |422245    |\n|base          |land                  |62239589  |\n|base          |landUse               |43818585  |\n|base          |water                 |42556151  |\n|buildings     |building              |2339547325|\n|buildings     |part                  |2850221   |\n|places        |place                 |57619504  |\n|transportation|connector             |340035621 |\n|transportation|segment               |300834113 |\n+--------------+----------------------+----------+\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Overture Documentation (Bash)\nDESCRIPTION: This command starts the local development server for the Overture documentation project. After running this, the documentation can be previewed at http://localhost:3000.\nSOURCE: https://github.com/overturemaps/docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Amazon S3\nDESCRIPTION: The path to access the GERS (Global Entity Reference System) changelog for the 2024-12-18.0 release on Amazon S3.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-12-18.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2024-12-18.0\n```\n\n----------------------------------------\n\nTITLE: Checking Filtered DataFrame Shape in Python\nDESCRIPTION: This snippet checks and displays the shape of the filtered DataFrame containing only high-resolution land cover features.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# check shape of filtered dataframe\ndf_h.shape\n```\n\n----------------------------------------\n\nTITLE: React Tab Component Structure\nDESCRIPTION: React component structure for displaying SQL query tabs for different database engines (DuckDB and Athena).\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/kepler-gl.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs queryString=\"engine\">\n    <TabItem value=\"duckdb\" label=\"DuckDB\">\n        <QueryBuilder query={HyderabadBuildingsDuckDB}></QueryBuilder>\n    </TabItem>\n    <TabItem value=\"athena\" label=\"Athena\">\n        <QueryBuilder query={HyderabadBuildingsAthena}></QueryBuilder>\n    </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Loading JupySQL Extension for SQL in Jupyter\nDESCRIPTION: Reloads the JupySQL extension to enable SQL cell functionality in Jupyter notebooks. This allows execution of SQL queries directly in notebook cells.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# no need to import duckdb_engine, JupySQL will auto-detect driver \n# load (or reload) jupysql Jupyter extension to create SQL cells\n%reload_ext sql\n```\n\n----------------------------------------\n\nTITLE: Querying Route Data with DuckDB\nDESCRIPTION: DuckDB query to extract specific route information, specifically for US Interstate 5, using the routes column and ref properties.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n{Routes}\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS S3 Path for GERS Changelog\nDESCRIPTION: Amazon S3 path for accessing the GERS changelog files for the 2024-11-13.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-11-13.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2024-11-13.0\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Amazon S3\nDESCRIPTION: The Amazon S3 path for accessing the GERS changelog for the 2025-01-22.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-01-22.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2025-01-22.0\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statements\nDESCRIPTION: Import statements for React components and raw SQL query files used in the documentation.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/kepler-gl.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport QueryBuilder from '@site/src/components/queryBuilder';\nimport HyderabadBuildingsAthena from '!!raw-loader!@site/src/queries/athena/hyderabad_buildings.sql';\nimport HyderabadBuildingsDuckDB from '!!raw-loader!@site/src/queries/duckdb/hyderabad_buildings.sql';\n```\n\n----------------------------------------\n\nTITLE: Checking DataFrame Shape in Python\nDESCRIPTION: This snippet checks and displays the shape (number of rows and columns) of the pandas DataFrame containing the Overture Maps land cover data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# check shape of dataframe\ndf.shape\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Path Configuration for Overture Maps Release\nDESCRIPTION: Amazon S3 path for accessing the 2024-10-23.0 release of Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-10-23.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2024-10-23.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Microsoft Azure\nDESCRIPTION: Azure Blob Storage path for accessing the 2025-02-19.0 release of Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-02-19.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2025-02-19.0\n```\n\n----------------------------------------\n\nTITLE: Combined Attribution with OpenStreetMap\nDESCRIPTION: Combined attribution text when using both Overture and OpenStreetMap data\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/attribution.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n© OpenStreetMap contributors, Overture Maps Foundation\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Blob Storage for Land Data in Overture Maps\nDESCRIPTION: This snippet shows how to construct a query to access land data from Overture Maps stored in Azure Blob Storage. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=base/type=land/*\n```\n\n----------------------------------------\n\nTITLE: Querying Parking Aisle Data in Transportation\nDESCRIPTION: This SQL query extracts parking aisle information from the transportation dataset. It targets segments with a service class and parking_aisle subclass, providing data for parking infrastructure analysis.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nimport ParkingAisles from '!!raw-loader!@site/src/queries/duckdb/transportation_parking.sql';\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path Configuration for Overture Maps Release\nDESCRIPTION: Microsoft Azure blob storage path for accessing the 2024-09-18.0 Overture Maps release data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-09-18.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2024-09-18.0\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Microsoft Azure\nDESCRIPTION: Azure Blob Storage path for accessing the GERS changelog for the 2025-02-19.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-02-19.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2025-02-19.0\n```\n\n----------------------------------------\n\nTITLE: Querying Amazon S3 for Land Use Data in Overture Maps\nDESCRIPTION: This snippet demonstrates how to construct a query to access land use data from Overture Maps stored in Amazon S3. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=land_use/*\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path Configuration for GERS Changelog\nDESCRIPTION: Microsoft Azure blob storage path for accessing the GERS changelog files for the 2024-09-18.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-09-18.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-09-18.0\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path Configuration for Overture Maps Release\nDESCRIPTION: Azure Blob Storage path for accessing the 2024-10-23.0 release of Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-10-23.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2024-10-23.0\n```\n\n----------------------------------------\n\nTITLE: Field Renaming in bbox Column\nDESCRIPTION: Breaking changes showing the renaming of bbox column fields to align with GeoParquet 1.1 spec. Fields changed from minx/miny/maxx/maxy to xmin/ymin/xmax/ymax format and converted to Parquet Float (32-bit) from Double (64-bit).\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024-beta/2024-04-16-beta.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nminx → xmin\nminy → ymin\nmaxx → xmax\nmaxy → ymax\n```\n\n----------------------------------------\n\nTITLE: Fetching Land Cover Data from Overture Maps in Python\nDESCRIPTION: This snippet reads the land cover data from Overture Maps using the specified bounding box. It retrieves the data as a record batch and combines all chunks into a single table.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# read in Overture Maps land_cover data type\ntable = overturemaps.record_batch_reader(\"land_cover\", bbox).read_all()\ntable = table.combine_chunks()\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path Configuration for Overture Maps Release\nDESCRIPTION: Azure Blob Storage path for accessing the 2024-08-20.0 release of Overture Maps data\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-08-20.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2024-08-20.0\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path for GERS Changelog\nDESCRIPTION: Azure Blob Storage path for accessing the Global Entity Reference System (GERS) changelog for the 2024-10-23.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-10-23.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-10-23.0\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Path for GERS Changelog\nDESCRIPTION: Amazon S3 path for accessing the Global Entity Reference System (GERS) changelog for the 2024-10-23.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-10-23.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2024-10-23.0\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Path Template\nDESCRIPTION: Placeholder for Microsoft Azure storage path where the Overture Maps data release will be available.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/template.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd release path here\n```\n\n----------------------------------------\n\nTITLE: Counting Division Boundary Features Using DuckDB\nDESCRIPTION: This SQL query counts the number of division_boundary features in the dataset. It measures the quantity of boundary line data available.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nBoundaryCounts\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Amazon S3\nDESCRIPTION: Command to access the Global Entity Reference System (GERS) changelog for the 2024-07-22.0 release on Amazon S3 in the US West 2 region.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-07-22.0.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2024-07-22.0\n```\n\n----------------------------------------\n\nTITLE: Creating Map Visualization Layer\nDESCRIPTION: Creates a polygon layer for map visualization using the processed GeoDataFrame and color mappings.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayer = PolygonLayer.from_geopandas(\n    gdf= gdf[['id','subtype', 'cartography', 'geometry']].reset_index(drop=True),\n    get_fill_color=colors,\n    get_line_color=colors,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying by OSM ID Using DuckDB\nDESCRIPTION: This SQL query shows how to find features by their OpenStreetMap ID. It enables cross-referencing with OpenStreetMap data sources.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nOSMLookUp\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS S3 Path for Overture Maps Release\nDESCRIPTION: Amazon S3 path for accessing the 2024-11-13.0 release of Overture Maps GeoParquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-11-13.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2024-11-13.0\n```\n\n----------------------------------------\n\nTITLE: Counting Division Features Using DuckDB\nDESCRIPTION: This SQL query counts the number of division features in the dataset. It helps understand the volume of administrative division data available.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nDivCounts\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Amazon S3\nDESCRIPTION: The path to access the 2024-12-18.0 release of Overture Maps data stored on Amazon S3.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-12-18.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://overturemaps-us-west-2/release/2024-12-18.0\n```\n\n----------------------------------------\n\nTITLE: Applying Color Map to Data\nDESCRIPTION: Applies the defined color map to the land cover subtypes in the dataset.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-05-16-land-cover.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncolors = apply_categorical_cmap(df_h.subtype, color_map)\n```\n\n----------------------------------------\n\nTITLE: Defining Transportation Segment Subclasses in Overture Schema\nDESCRIPTION: This snippet demonstrates how class, subclasses, and flags are modeled in the Overture schema. It shows how to define subclass rules with linear referencing for footways, service roads, and primary roads, along with associated road flags.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-08-15-preview-august-release.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: footway\nsubclass_rules:\n  - value: sidewalk\n    between: [0, 0.6]\n  - value: crosswalk\n    between: [0.6, 1.0]\nroad_flags:\n  - values: [is_bridge]\n    between: [0.2, 0.3]\n  - values: [is_under_construction]\n    between: [0.3, 0.5]\n\nclass: service\nsubclass_rules:\n  - value: driveway\n    between: [0, 0.5]\n\nclass: primary\nsubclass: link\nsubclass_rules:\n  - value: link\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Microsoft Azure\nDESCRIPTION: The path to access the GERS (Global Entity Reference System) changelog for the 2024-12-18.0 release on Microsoft Azure.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-12-18.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-12-18.0\n```\n\n----------------------------------------\n\nTITLE: Querying Pennsylvania Admin Data (Pre-Update) in SQL\nDESCRIPTION: This SQL query demonstrates how to find Pennsylvania in the admins dataset using the previous camelCase property naming convention. It selects relevant fields and filters for locality type, subtype, and admin level.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024-alpha/2024-03-12-alpha.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nLOAD spatial;\nLOAD httpfs:\n\nSELECT\n   id,\n   isoSubCountryCode,\n   contextId,\n   names.primary,\n   ST_GeomFromWKB(geometry) as geometry\nFROM\n   read_parquet('s3://overturemaps-us-west-2/release/2024-02-15-alpha.0/theme=admins/type=*/*', filename=true, hive_partitioning=1)\nWHERE type='locality'\n   AND subType='administrativeLocality'\n   AND adminLevel=2\n   AND names.primary LIKE 'Pennsylvania';\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Amazon S3\nDESCRIPTION: Amazon S3 path for accessing the GERS changelog for the 2025-02-19.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-02-19.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/changelog/2025-02-19.0\n```\n\n----------------------------------------\n\nTITLE: Loading Divisions Data from S3 using Sedona\nDESCRIPTION: Python code to load divisions data from Overture Maps S3 bucket using Sedona's GeoParquet reader.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/getting-data/sedona.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndivisions = sedona.read.format(\"geoparquet\").load(\n    \"s3a://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_area/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Overture Documentation (Bash)\nDESCRIPTION: This command installs the required npm packages for the Overture documentation project. It should be run before starting local development.\nSOURCE: https://github.com/overturemaps/docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Converting Divisions Data to Parquet Format Using DuckDB\nDESCRIPTION: This SQL query downloads and converts divisions data to the Parquet format. It demonstrates how to retrieve the full divisions dataset, which results in approximately 6.4GB of data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/divisions.mdx#2025-04-21_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nToParquet\n```\n\n----------------------------------------\n\nTITLE: Attribution Text for Overture Maps\nDESCRIPTION: Suggested attribution text for maps and visualizations using Overture data\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/attribution.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n© Overture Maps Foundation\n```\n\n----------------------------------------\n\nTITLE: Connecting to DuckDB In-Memory Database\nDESCRIPTION: Establishes a connection to an in-memory DuckDB database using the JupySQL magic command. This creates a temporary database that exists only for the duration of the notebook session.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/pandas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# DuckDB in-memory database\n%sql duckdb://\n```\n\n----------------------------------------\n\nTITLE: Version Support Table in Markdown\nDESCRIPTION: Markdown table showing which project versions are currently supported with security updates. Versions 5.1.x and 4.0.x are supported, while 5.0.x and versions below 4.0 are not supported.\nSOURCE: https://github.com/overturemaps/docs/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 5.1.x   | :white_check_mark: |\n| 5.0.x   | :x:                |\n| 4.0.x   | :white_check_mark: |\n| < 4.0   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Plotting Gulf Coast Water Features\nDESCRIPTION: Visualizes the Gulf Coast water features using the GeoPandas plot function with custom colors for face and edge. The low line width (0.05) is used to create a detailed visualization of the water bodies.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-duckdb-pandas-example.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ngulf_water_gdf.plot(facecolor=\"#628290\", edgecolor=\"#006064\", lw=0.05)\n```\n\n----------------------------------------\n\nTITLE: Creating Local Area Extract for Customization\nDESCRIPTION: Series of commands to create a directory structure and download a specific geographic area (Boston) of Overture data for local tileset customization.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p boston/theme=buildings/type=building\nmkdir -p boston/theme=places/type=place\noverturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geoparquet --type=building -o boston/theme=buildings/type=building/0.geoparquet\noverturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geoparquet --type=place -o boston/theme=places/type=place/0.geoparquet\n```\n\n----------------------------------------\n\nTITLE: Deploying Overture Tiles AWS Infrastructure with CDK\nDESCRIPTION: Commands to bootstrap and deploy the AWS CDK stack for Overture Tiles generation infrastructure.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cdk bootstrap\nnpm run cdk deploy\n```\n\n----------------------------------------\n\nTITLE: Extracting Geographic Area from PMTiles with CLI\nDESCRIPTION: Uses the pmtiles CLI tool to extract a specific geographic area (Ghent, Belgium) from the buildings tileset, creating a smaller tileset for a specific region.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/overture-tiles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npmtiles extract https://overturemaps-tiles-us-west-2-beta.s3.amazonaws.com/2024-08-20/buildings.pmtiles ghent.pmtiles --bbox=3.660507,51.004250,3.784790,51.065996\n```\n\n----------------------------------------\n\nTITLE: Modeling Destinations for Turn-by-Turn Navigation\nDESCRIPTION: This example shows how the new destinations property is structured to support routing applications. It models highway sign information with details about heading, connector IDs, segment IDs, and human-readable labels that indicate directions to follow for navigation.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-08-15-preview-august-release.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndestinations:\n  - when:\n    heading: forward\n    from_connector_id: 08f274370d59a8840436ff3bad31c60e\n    to_connector_id: 08f274370d59a8840436ff3bad31c60e\n    to_segment_id: 08a274370d59ffff043fff3b802d7aa5\n    final_heading: forward\n    labels:\n     - value: Green Bay\n      type: unknown\n     - value: I 43 North\n      type: route_ref\n    symbols:\n     - NULL\n```\n\n----------------------------------------\n\nTITLE: Deprecated connector_ids Property in Transportation Segment\nDESCRIPTION: This snippet shows the deprecated connector_ids property that will be replaced by the new connectors property. It lacks the linear reference values needed to precisely locate connectors along a segment, which limits its usefulness for routing applications.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-08-15-preview-august-release.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: overture:transportation:segment:123\ntype: Feature\ngeometry:\n  type: LineString\n  coordinates: [[0, 0], [0.03, 0], [0.10, 0]]\nproperties:\n  theme: transportation\n  type: segment\n  version: 1\n  subtype: road\n  class: secondary\n  connector_ids: [fooConnector, barConnector, bazConnector]\n  road_surface:\n    - value: paved\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Blob Storage for Land Cover Data in Overture Maps\nDESCRIPTION: This snippet shows how to construct a query to access land cover data from Overture Maps stored in Azure Blob Storage. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=base/type=land_cover/*\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Blob Storage for Infrastructure Data in Overture Maps\nDESCRIPTION: This snippet shows how to construct a query to access infrastructure data from Overture Maps stored in Azure Blob Storage. It uses a placeholder for the release version.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/base.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=base/type=infrastructure/*\n```\n\n----------------------------------------\n\nTITLE: Rendering Map with Lonboard in Python\nDESCRIPTION: This code renders the final map using Lonboard. It sets the view state parameters such as longitude, latitude, zoom level, pitch, and bearing, and creates a Map object with the previously defined layer.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n#render map\nview_state = {\n    \"longitude\": -76.2,\n    \"latitude\": 39.6,\n    \"zoom\": 8,\n    \"pitch\": 65,\n    \"bearing\": 5,\n}\nm = Map(layer, view_state=view_state)\nm\n```\n\n----------------------------------------\n\nTITLE: Querying Countries with Complex Admin Schema\nDESCRIPTION: SQL query showing the more complex approach required to obtain country information from the admins schema, which will be deprecated in favor of the simpler divisions schema.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-04-22-beta-release.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nWITH admins AS (\n    SELECT *\n    FROM read_parquet('s3://overturemaps-us-west-2/release/2024-04-16-beta.0/theme=admins/type=*/*', filename=true, hive_partitioning=1)\n  )\n\n  SELECT *\n    FROM admins country_locality\n    JOIN admins country_area\n      ON country_area.locality_id = country_locality.id\n   WHERE country_locality.locality_type = 'country';\n```\n\n----------------------------------------\n\nTITLE: Querying Country Divisions with Simplified Schema\nDESCRIPTION: SQL query demonstrating the new simplified divisions schema for retrieving all country geometries from the April 2024 beta release data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/blog/2024-04-22-beta-release.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\n   FROM read_parquet('s3://overturemaps-us-west-2/release/2024-04-16-beta.0/theme=divisions/type=division_area/*', filename=true, hive_partitioning=1)\nWHERE subtype = 'country';\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Overture Maps Processing in Python\nDESCRIPTION: This snippet imports the necessary Python libraries for working with Overture Maps data, including pandas for data manipulation, geopandas for geospatial operations, and lonboard for map visualization.\nSOURCE: https://github.com/overturemaps/docs/blob/main/static/notebooks/overture-lonboard-lc.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport geopandas as gpd\nimport overturemaps \nfrom shapely import wkb\nfrom lonboard import Map, PolygonLayer\nfrom lonboard.colormap import apply_categorical_cmap\n```\n\n----------------------------------------\n\nTITLE: Old and New Structure for Vehicle Scoping Block in Transportation Theme\nDESCRIPTION: Comparison of the old and new JSON structure for vehicle scoping blocks in speed limit definitions, showing the simplification of the non-geometry vehicle scoping block structure.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024-beta/2024-06-13-beta.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nspeed_limits:\n  when:\n    ...\n    vehicle:\n      axle_count:\n        is_more_than:\n          value:\n          unit:\n        is_less_than:\n          ...\n        ...\n        ...\n      height:\n        ...\n      length:\n        ...\n      weight:\n        ...\n      width:\n        ...\n```\n\nLANGUAGE: json\nCODE:\n```\nspeed_limits:\n  when:\n    ...\n    vehicle:\n      - dimension: <axle_count, height, length, weight, width>\n        comparison: <greater_than, greater_than_equal, equal, less_than, less_than_equal>\n        value: str\n        unit: str\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog Data for Overture Maps 2024-06-13-beta.0\nDESCRIPTION: Path information for accessing the GERS changelog data stored as Parquet files on Azure and AWS cloud platforms. The changelog tracks feature changes between releases and is partitioned by theme, type, and change_type.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024-beta/2024-06-13-beta.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-06-13-beta.0\n\ns3://overturemaps-us-west-2/changelog/2024-06-13-beta.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps 2024-06-13-beta.1 Release Paths on Azure and AWS\nDESCRIPTION: Path information for accessing the Overture Maps 2024-06-13-beta.1 release data stored in GeoParquet format on Azure and AWS cloud platforms.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024-beta/2024-06-13-beta.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAzure path: wasbs://release@overturemapswestus2.blob.core.windows.net/2024-06-13-beta.1\n\nAWS path: s3://overturemaps-us-west-2/release/2024-06-13-beta.1\n```\n\n----------------------------------------\n\nTITLE: Downloading Transportation Data Using Python CLI\nDESCRIPTION: Command to download transportation segments within a specified bounding box using the Overture Maps Python command-line tool. Outputs data in GeoJSON format.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/transportation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\noverturemaps download --bbox=12.46,41.89,12.48,41.91 -f geojson --type=segment -o rome_segments.geojson\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Microsoft Azure\nDESCRIPTION: Command to access the Global Entity Reference System (GERS) changelog for the 2024-07-22.0 release on Microsoft Azure blob storage.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-07-22.0.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-07-22.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Microsoft Azure\nDESCRIPTION: Command to access the Overture Maps 2024-07-22.0 release data stored on Microsoft Azure blob storage.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-07-22.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2024-07-22.0\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in JSX\nDESCRIPTION: Imports and renders the DocCardList component from Docusaurus theme for displaying a list of documentation cards\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/examples/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Community Projects\nDESCRIPTION: A table listing community projects with project names, creators, and release dates\nSOURCE: https://github.com/overturemaps/docs/blob/main/community/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Project | Creator | Data Release |\n| ---------- | -------- | -------- | \n| [Enrich Your Dataset With GERS and Create a Tile Server](https://docs.fused.io/blog/overture-tiles/) | Plinio Guzman (Fused) and Jennings Anderson (Meta) | September 2024 |\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure Storage Path for GERS Changelog\nDESCRIPTION: Azure storage path for accessing the GERS changelog files for the 2024-11-13.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-11-13.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2024-11-13.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Azure Storage Path for Overture Maps Release\nDESCRIPTION: Azure storage path for accessing the 2024-11-13.0 release of Overture Maps GeoParquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024/2024-11-13.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2024-11-13.0\n```\n\n----------------------------------------\n\nTITLE: Accessing GERS Changelog on Microsoft Azure\nDESCRIPTION: The Azure blob storage path for accessing the GERS changelog for the 2025-01-22.0 release.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-01-22.0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://changelog@overturemapswestus2.blob.core.windows.net/2025-01-22.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Amazon S3\nDESCRIPTION: The Amazon S3 path for accessing the 2025-01-22.0 release of Overture Maps data.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-01-22.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ns3://overturemaps-us-west-2/release/2025-01-22.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Overture Maps Data on Microsoft Azure (Bash)\nDESCRIPTION: Command to access the Overture Maps data release 2025-03-19.1 on Microsoft Azure. This path was updated due to a patch release addressing an issue with theme and type columns in some Parquet files.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2025/2025-03-19.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasbs://release@overturemapswestus2.blob.core.windows.net/2025-03-19.1\n```\n\n----------------------------------------\n\nTITLE: Data Storage Locations\nDESCRIPTION: S3 and Azure storage locations for Overture Maps address theme data\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/addresses.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ns3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=addresses/type=address/*\n```\n\nLANGUAGE: text\nCODE:\n```\nhttps://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=addresses/type=address/*\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in JSX\nDESCRIPTION: Basic setup of a documentation page that imports and renders the DocCardList component from Docusaurus theme to display a list of data guides. The code combines Markdown frontmatter with JSX syntax.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/guides/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data Guides\n---\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Path Template\nDESCRIPTION: Placeholder for Amazon S3 storage path where the Overture Maps data release will be available.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/template.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nadd release path here\n```\n\n----------------------------------------\n\nTITLE: Citation Text for Overture Maps\nDESCRIPTION: Standard citation format for academic and research publications using Overture data\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/attribution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOverture Maps Foundation, overturemaps.org\n```\n\n----------------------------------------\n\nTITLE: Feature Type Stability Table in Markdown\nDESCRIPTION: A markdown table listing different Overture Map feature types and their ID stability status across themes like addresses, base, buildings, divisions, places, and transportation.\nSOURCE: https://github.com/overturemaps/docs/blob/main/docs/gers/stability.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Theme | Type | Stable ID |\n|-------|------|-----------|\n| addresses | address | No |\n| base | infrastructure | No |\n| base | land | No |\n| base | land_cover | No |\n| base | land_use | No |\n| base | water | No |\n| buildings | building | Yes |\n| buildings | building_part | No |\n| divisions | division | Yes |\n| divisions | division_area | No |\n| divisions | division_boundary | No |\n| places | place | Yes |\n| transportation | segment | Yes |\n| transportation | connector | Yes |\n```\n\n----------------------------------------\n\nTITLE: Querying Pennsylvania Admin Data (Post-Update) in SQL\nDESCRIPTION: This SQL query shows how to find Pennsylvania in the admins dataset using the new snake_case property naming convention. It selects the same fields as the previous query but uses updated property names to reflect the schema changes.\nSOURCE: https://github.com/overturemaps/docs/blob/main/release-blog/2024-alpha/2024-03-12-alpha.0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nLOAD spatial;\nLOAD httpfs:\n\nSELECT\n   id,\n   iso_sub_country_code,\n   context_id,\n   names.primary,\n   ST_GeomFromWKB(geometry) as geometry\nFROM\n   read_parquet('s3://overturemaps-us-west-2/release/2024-03-12-alpha.0/theme=admins/type=*/*', filename=true, hive_partitioning=1)\nWHERE type='locality'\n   AND subtype='administrative_locality'\n   AND admin_level=2\n   AND names.primary LIKE 'Pennsylvania';\n```"
  }
]