[
  {
    "owner": "dry-rb",
    "repo": "dry-operation",
    "content": "TITLE: Implementing Basic Operation Flow with dry-operation in Ruby\nDESCRIPTION: This example shows how to create a basic user creation operation by inheriting from Dry::Operation and defining a call method with multiple steps. Each step returns either Success or Failure, with the operation short-circuiting on any failure.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/index.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  def call(input)\n    attrs = step validate(input)\n    user = step persist(attrs)\n    step notify(user)\n    user\n  end\n\n  private\n\n  def validate(input)\n    # Return Success(attrs) or Failure(error)\n  end\n\n  def persist(attrs)\n    # Return Success(user) or Failure(error)\n  end\n\n  def notify(user)\n    # Return Success(true) or Failure(error)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handling in dry-operation\nDESCRIPTION: This example demonstrates how to implement a global error handler in a CreateUser operation by defining an #on_failure method that logs errors when any step fails. The operation validates input, persists data, and sends notifications while capturing any failures.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/error-handling.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  def initialize(logger:)\n    @logger = logger\n  end\n\n  def call(input)\n    attrs = step validate(input)\n    user = step persist(attrs)\n    step notify(user)\n    user\n  end\n\n  private\n\n  def on_failure(failure)\n    # Log or handle the failure globally\n    logger.error(\"Operation failed: #{failure}\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Operation Results in Ruby\nDESCRIPTION: This snippet demonstrates how to handle the result of an operation using Ruby's pattern matching. It shows different handling paths for Success and various types of Failures, allowing for explicit error handling based on failure type.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/index.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncase CreateUser.new.(input)\nin Success[user]\n  puts \"User #{user.name} created successfully\"\nin Failure[:invalid_input, errors]\n  puts \"Invalid input: #{errors}\"\nin Failure[:database_error]\n  puts \"Database error occurred\"\nin Failure[:notification_error]\n  puts \"User created but notification failed\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Monadic Behavior in Ruby with Dry::Operation#step\nDESCRIPTION: The #step method in Dry::Operation acts similarly to the bind operation in monadic composition. It takes a computation that may succeed or fail, extracts the value on success, passes it to the next step, and short-circuits on failure.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/design-pattern.html.md#2025-04-12_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nDry::Operation#step\n```\n\n----------------------------------------\n\nTITLE: Combining Steps with Regular Ruby Code in dry-operation\nDESCRIPTION: This example shows how to integrate regular Ruby code between operation steps. It demonstrates modifying the attrs hash by capitalizing a name before passing it to the next step, showing the flexibility of dry-operation's flow control.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/index.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  def call(input)\n    attrs = step validate(input)\n    attrs[:name] = attrs[:name].capitalize\n    user = step persist(attrs)\n    step notify(user)\n    user  # This is automatically wrapped in Success\n  end\n\n  # ... other methods ...\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Operation with Automatic Success Wrapping in Ruby\nDESCRIPTION: This example demonstrates how the call method automatically wraps its return value in a Success monad when all steps complete without failure. The explicit return of the user object is transformed to Success(user) when the operation completes.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/index.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  def call(input)\n    attrs = step validate(input)\n    user = step persist(attrs)\n    step notify(user)\n    user  # This is automatically wrapped in Success\n  end\n\n  # ... other methods ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Step Names in Error Handling for dry-operation\nDESCRIPTION: This snippet shows how to access the name of the failing step in the #on_failure method by accepting a second parameter. This allows for more specific error handling based on which part of the operation failed.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/error-handling.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  def initialize(logger:)\n    @logger = logger\n  end\n\n  def call(input)\n    attrs = step validate(input)\n    user = step persist(attrs)\n    step notify(user)\n    user\n  end\n\n  private\n\n  def on_failure(failure, step_name)\n    # step_name is going to be `:call` here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Default Step Handling in Ruby with dry-operation\nDESCRIPTION: Demonstrates the default behavior of dry-operation where the #call method is automatically wrapped with failure tracking and error handling, allowing direct use of #step.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  def call(input)\n    # Step handling works in #call by default\n    user = step create_user(input)\n    step notify(user)\n    user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Wrapped Methods in Ruby with dry-operation\nDESCRIPTION: Shows how to use the .operate_on class method to specify which methods should handle steps, allowing for more flexible operation structure.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyOperation < Dry::Operation\n  # Handle steps in both #call and #process methods\n  operate_on :call, :process\n\n  def call(input)\n    step validate(input)\n  end\n\n  def process(input)\n    step transform(input)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Wrapping in Ruby with dry-operation\nDESCRIPTION: Illustrates how to disable automatic method wrapping using .skip_prepending, requiring manual wrapping of steps and error handling.\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateUser < Dry::Operation\n  skip_prepending\n\n  def call(input)\n    # Now you must explicitly wrap steps\n    steps do\n      user = step create_user(input)\n      step notify(user)\n      user\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveRecord Transaction Support\nDESCRIPTION: Example of implementing ActiveRecord extension in an operation class with transaction support\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"dry/operation/extensions/active_record\"\n\nclass CreateUser < Dry::Operation\n  include Dry::Operation::Extensions::ActiveRecord\n\n  def call(input)\n    transaction do\n      user = step create_user(input)\n      step create_profile(user)\n      user\n    end\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ROM Transaction Support\nDESCRIPTION: Example of implementing ROM extension in an operation class with transaction support and dependency injection\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"dry/operation/extensions/rom\"\n\nclass CreateUser < Dry::Operation\n  include Dry::Operation::Extensions::ROM\n\n  attr_reader :rom\n\n  def initialize(rom:)\n    @rom = rom\n    super()\n  end\n\n  def call(input)\n    transaction do\n      user = step create_user(input)\n      step assign_role(user)\n      user\n    end\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequel Transaction Support\nDESCRIPTION: Example of implementing Sequel extension in an operation class with transaction support\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"dry/operation/extensions/sequel\"\n\nclass CreateUser < Dry::Operation\n  include Dry::Operation::Extensions::Sequel\n\n  attr_reader :db\n\n  def initialize(db:)\n    @db = db\n    super()\n  end\n\n  def call(input)\n    transaction do\n      user_id = step create_user(input)\n      step create_profile(user_id)\n      user_id\n    end\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying ActiveRecord Transaction Class at Runtime\nDESCRIPTION: Demonstrates runtime configuration of ActiveRecord transaction class\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ntransaction(User) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveRecord Transaction Class\nDESCRIPTION: Shows how to specify a custom ActiveRecord class for transactions\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ninclude Dry::Operation::Extensions::ActiveRecord[User]\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveRecord Transaction Options\nDESCRIPTION: Shows how to specify ActiveRecord transaction options when including the extension\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ninclude Dry::Operation::Extensions::ActiveRecord[isolation: :serializable]\n```\n\n----------------------------------------\n\nTITLE: Specifying ActiveRecord Transaction Options at Runtime\nDESCRIPTION: Demonstrates runtime configuration of ActiveRecord transaction options\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ntransaction(isolation: :serializable) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ROM Gateway\nDESCRIPTION: Shows how to specify a custom ROM gateway when including the extension\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ninclude Dry::Operation::Extensions::ROM[gateway: :my_gateway]\n```\n\n----------------------------------------\n\nTITLE: Specifying ROM Gateway at Runtime\nDESCRIPTION: Demonstrates runtime configuration of ROM gateway in transaction block\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ntransaction(gateway: :my_gateway) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequel Transaction Options\nDESCRIPTION: Shows how to specify Sequel transaction options when including the extension\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ninclude Dry::Operation::Extensions::Sequel[isolation: :serializable]\n```\n\n----------------------------------------\n\nTITLE: Specifying Sequel Transaction Options at Runtime\nDESCRIPTION: Demonstrates runtime configuration of Sequel transaction options\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ntransaction(isolation: :serializable) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Installing ROM SQL Dependency\nDESCRIPTION: Installation instruction for rom-sql gem dependency required for ROM extension\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rom-sql\"\n```\n\n----------------------------------------\n\nTITLE: Installing Sequel Dependency\nDESCRIPTION: Installation instruction for Sequel gem dependency\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"sequel\"\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveRecord Dependency\nDESCRIPTION: Installation instruction for ActiveRecord gem dependency\nSOURCE: https://github.com/dry-rb/dry-operation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"activerecord\"\n```"
  }
]