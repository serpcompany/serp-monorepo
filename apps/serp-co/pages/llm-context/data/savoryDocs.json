[
  {
    "owner": "savory",
    "repo": "docs",
    "content": "TITLE: Implementing a Complete REST Controller in Danet\nDESCRIPTION: A comprehensive example of a TodoController with CRUD operations using various HTTP method decorators (@Get, @Post, @Put, @Delete) and parameter decorators (@Body, @Param) to handle different API endpoints.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Controller,\n  Get,\n  Query,\n  Post,\n  Body,\n  Put,\n  Param,\n  Delete,\n} from 'jsr:@danet/core';\nimport { CreateTodoDto, UpdateTodoDto, ListAllEntities } from './dto';\n\n@Controller('todo')\nexport class TodoController {\n  @Post()\n  create(@Body() createTodoDto: CreateTodoDto) {\n    return 'This action adds a new todo';\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return `This action returns a #${id} todo`;\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateTodoDto: UpdateTodoDto) {\n    return `This action updates a #${id} todo`;\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return `This action removes a #${id} todo`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a POST Controller Method with Body Validation\nDESCRIPTION: Demonstrates how to use the @Body() decorator to receive and validate a request payload against the CreateTodoDto schema in a controller method.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\nasync create(@Body() createTodoDto: CreateTodoDto) {\n  return 'This action adds a new todo';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple HTTP Methods in Danet Controller\nDESCRIPTION: This snippet shows how to implement both GET and POST handlers in a controller. The POST handler creates a new todo item, while the GET handler retrieves all todo items.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Post } from 'jsr:@danet/core';\n\n@Controller('todo')\nexport class TodoController {\n  @Post()\n  create(): string {\n    return 'This action adds a new todo';\n  }\n\n  @Get()\n  findAll(): string {\n    return 'This action returns all todo';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Route Parameters in Danet Controller\nDESCRIPTION: This code demonstrates how to define routes with dynamic parameters. The @Param decorator is used to extract the route parameter value and make it available to the handler method.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nfindOne(@Param('id') id: string): string {\n  return `This action returns a #${id} todo`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Transfer Object with Validation Decorators in TypeScript\nDESCRIPTION: Defines a CreateTodoDto class with type validation decorators from @danet/validatte to validate incoming request data. The class includes string, number, and hexadecimal color validation for todo properties.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IsNumber, IsString, IsHexColor } from 'jsr:@danet/validatte';\n\nexport class CreateTodoDto {\n  @IsString()\n  name!: string;\n\n  @IsNumber()\n  priority!: number;\n\n  @IsHexColor()\n  colorLabel!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Service into a Controller in TypeScript\nDESCRIPTION: This code shows how to inject the TodoService into a TodoController using constructor injection. It includes methods for creating and retrieving todos using the injected service.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/custom-injectables.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Post, Body } from 'jsr:@danet/core';\nimport { CreateTodoDto } from './create-todo.dto';\nimport { TodoService } from './todo.service';\nimport { Todo } from './todo.interface';\n\n@Controller('todo')\nexport class TodoController {\n  constructor(private todoService: TodoService) {}\n\n  @Post()\n  async create(@Body() createTodoDto: CreateTodoDto) {\n    this.todoService.create(createTodoDto);\n  }\n\n  @Get()\n  async findAll(): Promise<Todo[]> {\n    return this.todoService.findAll();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Controller Methods in Danet\nDESCRIPTION: This example shows how to implement asynchronous handler methods in controllers using async/await. The method returns a Promise that Danet resolves automatically.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Get()\nasync findAll(): Promise<any[]> {\n  return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Controller with Route Prefix in Danet\nDESCRIPTION: This snippet demonstrates how to create a basic controller with the @Controller decorator and a route prefix 'todo'. It includes a GET request handler method that returns all todo items.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from 'jsr:@danet/core';\n\n@Controller('todo')\nexport class TodoController {\n  @Get()\n  findAll(): string {\n    return 'This action returns all todo';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Exception Filter in Danet\nDESCRIPTION: Implements an exception filter that catches all unhandled exceptions regardless of type by omitting the @Catch decorator parameter. It creates a standardized error response with timestamp and path information.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/exception-filters.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Catch,\n  ExceptionFilter,\n  HttpContext,\n} from 'jsr:@danet/core';\n\n@Injectable()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor() {}\n\n  catch(exception: unknown, ctx: HttpContext): boolean {\n    const request = ctx.req;\n    const status = exception.status;\n    const body = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    };\n\n    return ctx.newResponse(JSON.stringify(body), {\n\t\t\tstatus: status.code,\n\t\t\theaders: ctx.res.headers\n\t\t});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body with Zod in Danet Controller\nDESCRIPTION: This snippet demonstrates how to use Zod to define a schema for request body validation in a Danet controller. It uses the @Body() decorator from @danet/zod to automatically validate the request body against the defined schema.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/body-and-query-validation.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post } from '@danet/core';\nimport { Body } from '@danet/zod';\n\nconst CreateTodoSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n});\n\ntype CreateTodoSchema = z.infer<typeof CreateTodoSchema>;\n\n@Controller('todos')\nexport class TodosController {\n  constructor(private readonly todoService: TodoService) {}\n    \n  @Post()\n  async create(@Body(CreateTodoSchema) createTodoDto: CreateTodoSchema) {\n    this.todoService.create(createTodoDto);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Swagger Module in Danet Application\nDESCRIPTION: This code snippet shows how to bootstrap Swagger in a Danet application by creating a specification document and setting up the Swagger UI. It demonstrates the use of SpecBuilder to define API metadata and SwaggerModule to generate and serve the OpenAPI documentation.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DanetApplication } from 'jsr:@danet/core';\nimport { SwaggerModule, SpecBuilder } from 'jsr:@danet/swagger';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const application = new DanetApplication();\n  await application.init(AppModule);\n  const spec = new SpecBuilder()\n    .setTitle('Todo')\n    .setDescription('The todo API')\n    .setVersion('1.0')\n    .build();\n  const document = await SwaggerModule.createDocument(application, spec);\n  SwaggerModule.setup('api', application, document);\n  return application;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Danet CLI and Creating New Project\nDESCRIPTION: Commands to install the Danet CLI tool and create a new Danet project using Deno.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/first-steps.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ deno install --allow-read --allow-write --allow-run --allow-env -n danet jsr:@danet/cli\n$ danet new my-danet-project\n$ cd my-danet-project\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller with Dependency Injection in Danet\nDESCRIPTION: A TodoController that injects the TodoService through its constructor and provides HTTP endpoints for creating and retrieving todos. This demonstrates how dependency injection works in Danet controllers.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/injectables.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Post, Body } from 'jsr:@danet/core';\nimport { CreateTodoDto } from './create-todo.dto';\nimport { TodoService } from './todo.service';\nimport { Todo } from './todo.interface';\n\n@Controller('todo')\nexport class TodoController {\n  constructor(private todoService: TodoService) {}\n\n  @Post()\n  async create(@Body() createTodoDto: CreateTodoDto) {\n    this.todoService.create(createTodoDto);\n  }\n\n  @Get()\n  async findAll(): Promise<Todo[]> {\n    return this.todoService.findAll();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters with Zod in Danet Controller\nDESCRIPTION: This example shows how to use Zod to validate query parameters in a Danet controller. It uses the @Query() decorator from @danet/zod to automatically validate the query parameters against the defined schema.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/body-and-query-validation.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@danet/core';\nimport { Query } from '@danet/zod';\n\nconst GetTodoQuery = z.object({\n  id: z.string(),\n});\n\ntype GetTodoQuery = z.infer<typeof GetTodoQuery>;\n\n@Controller('todos')\nexport class TodosController {\n  constructor(private readonly todoService: TodoService) {}\n    \n  @Get(':id')\n  async getById(@Query(GetTodoQuery) query: GetTodoQuery) {\n    return this.todoService.getById(query.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Module in Danet\nDESCRIPTION: Demonstrates how to create a feature module for organizing related components like TodoController and TodoService\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/modules.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { TodoController } from './todo.controller';\nimport { TodoService } from './todo.service';\n\n@Module({\n  controllers: [TodoController],\n  injectables: [TodoService],\n})\nexport class TodoModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Injectable Service in Danet\nDESCRIPTION: A TodoService class decorated with @Injectable() that manages a collection of todos with create and findAll methods. This demonstrates how to create a basic injectable service in Danet.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/injectables.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { Todo } from './todo.interface';\n\n@Injectable()\nexport class TodoService {\n  private readonly todos: Todo[] = [];\n\n  create(todo: Todo) {\n    this.todos.push(todo);\n  }\n\n  findAll(): Todo[] {\n    return this.todos;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Exception Filter in Danet\nDESCRIPTION: Creates a custom exception filter that catches instances of CustomException and implements specialized response logic. The filter includes timestamp and request path in the response.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/exception-filters.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  ExceptionFilter,\n  Catch,\n  HttpContext,\n} from 'jsr:@danet/core';\n\n@Injectable()\n@Catch(CustomException)\nexport class CustomExceptionFilter implements ExceptionFilter {\n  catch(exception: CustomException, ctx: HttpContext) {\n    const request = ctx.req;\n    const status = exception.status;\n    const body = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    };\n\n    return ctx.newResponse(JSON.stringify(body), {\n\t\t\tstatus: status.code,\n\t\t\theaders: ctx.res.headers\n\t\t});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Bootstrap Function for Danet Application\nDESCRIPTION: Implements a bootstrap function that initializes a DanetApplication instance with the AppModule, facilitating application setup and making testing easier.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppModule } from './app.module.ts';\nimport { DanetApplication } from 'jsr:@danet/core';\n\nexport const bootstrap = async () => {\n  const application = new DanetApplication();\n  await application.init(AppModule);\n  return application;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in Danet Application\nDESCRIPTION: This snippet demonstrates how to enable CORS in a Danet application using the enableCors() method. The method can be called on the Danet application instance and accepts an optional configuration object for customization.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/cors.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DanetApplication();\napp.enableCors();\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleAuthGuard in TypeScript for Danet\nDESCRIPTION: This snippet demonstrates how to create a basic authorization guard in Danet. It implements the AuthGuard interface and uses a validateRequest function to determine if a request should be allowed.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/guards.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, AuthGuard } from 'jsr:@danet/core';\nimport { ExecutionContext } from \"./router.ts\";\n\n@Injectable()\nexport class SimpleAuthGuard implements AuthGuard {\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise<boolean> {\n        const request = context.request;\n        return validateRequest(request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Module with Dependencies in TypeScript\nDESCRIPTION: Demonstrates how to create an Auth module that imports and uses the UsersModule, showing static module binding pattern.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  injectables: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n```\n\n----------------------------------------\n\nTITLE: Starting a Danet Application Server\nDESCRIPTION: Demonstrates how to use the bootstrap function to obtain an application instance and start the server, configuring the port from environment variables or using a default value.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap } from './bootstrap.ts';\n\nconst application = await bootstrap();\nawait application.listen(Number(Deno.env.get('PORT') || 3000));\n```\n\n----------------------------------------\n\nTITLE: Registering Controllers in a Danet Module\nDESCRIPTION: Shows how to register controllers in a Danet module using the @Module decorator, making the framework aware of the controllers that need to be instantiated.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { TodoController } from './todo/todo.controller';\n\n@Module({\n  controllers: [TodoController],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-based Middleware in TypeScript\nDESCRIPTION: Demonstrates how to create a class-based middleware using the @Injectable decorator and implementing the DanetMiddleware interface. This logger middleware logs requests before passing control to the next handler.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, DanetMiddle, HttpContext, NextFunction } from 'jsr:@danet/core';\n\n@Injectable()\nexport class LoggerMiddleware implements DanetMiddleware {\n  async action(ctx: HttpContext, next: NextFunction) {\n    console.log('Request...');\n    await next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Controller in Danet\nDESCRIPTION: Defines a WebSocket controller that listens on the '/ws' endpoint. This is the basic setup needed to establish a WebSocket connection point in a Danet application.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@WebSocketController('ws')\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Asset Serving in Danet Application with TypeScript\nDESCRIPTION: This snippet shows how to configure a Danet application to serve static files from a specific folder. It initializes a Danet application, sets the static assets path to a folder named 'assets' in the current working directory, and registers this path using the useStaticAssets method.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/static-files.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  const app = new DanetApplication();\n  await app.init(MyModule);\n  const staticAssetsPath = `${Deno.cwd()}/assets`;\n  app.useStaticAssets(staticAssetsPath);\n```\n\n----------------------------------------\n\nTITLE: Defining an Injectable Service in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a TodoService class and mark it as injectable using the @Injectable() decorator. It includes methods for creating and retrieving todos.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/custom-injectables.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { Todo } from './todo.interface';\n\n@Injectable()\nexport class TodoService {\n  private readonly todos: Todo[] = [];\n\n  create(todo: Todo) {\n    this.todos.push(todo);\n  }\n\n  findAll(): Todo[] {\n    return this.todos;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE Route Handler in Typescript with Danet\nDESCRIPTION: This snippet demonstrates how to create a route handler for Server-Sent Events using the @SSE() decorator in Danet. It sets up an EventTarget that dispatches SSEMessage events at regular intervals.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/sse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@SSE('sse')\nsendUpdate(): EventTarget {\n  const eventTarget = new EventTarget();\n  let id = 0;\n  const interval = setInterval(() => {\n    if (id >= 4) {\n      clearInterval(interval);\n      const event = new SSEMessage({\n        retry: 1000,\n        id: `${id}`,\n        data: 'close',\n        event: 'close',\n      });\n      eventTarget.dispatchEvent(event);\n      return;\n    }\n    const event = new SSEMessage({\n      retry: 1000,\n      id: `${id}`,\n      data: 'world',\n      event: 'hello',\n    });\n    eventTarget.dispatchEvent(event);\n    id++;\n  }, 100);\n  return eventTarget;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Module in Danet Application\nDESCRIPTION: Basic setup for integrating MongoDB into a Danet application by importing and configuring the MongodbModule in the app.module.ts file.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/databases.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { AppController } from './app.controller.ts';\nimport { MongodbModule } from 'jsr:@danet/database/mongodb';\n\n@Module({\n  controllers: [AppController],\n  imports: [MongodbModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Registering a Global Exception Filter in Danet Application\nDESCRIPTION: Shows how to register a global exception filter that will catch exceptions across the entire application without attaching it to specific controllers or methods.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/exception-filters.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new DanetApplication();\nawait app.init(AppModule);\n\nconst simpleService = app.get(SimpleService);\napp.useGlobalExceptionFilter(new ErrorFilter(simpleService));\n```\n\n----------------------------------------\n\nTITLE: Importing Feature Module in Root Module\nDESCRIPTION: Shows how to import a feature module into the root AppModule of a Danet application\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/modules.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { TodoModule } from './todo/todo.module';\n\n@Module({\n  imports: [TodoModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in Request-Scoped Injectable for Danet\nDESCRIPTION: This snippet illustrates how to access the original request object in a request-scoped injectable in Danet. It defines a TodoService with a beforeControllerMethodIsCalled method that receives the HttpContext.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/injection-scopes.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope, Inject, HttpContext } from 'jsr:@danet/core';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class TodoService {\n  constructor() {}\n  \n  async beforeControllerMethodIsCalled(ctx: HttpContext) {\n    //do something with the context\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Decorator with Controllers\nDESCRIPTION: Demonstrates how to apply middleware to specific controllers using the @Middleware decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Middleware(LoggerMiddleware)\n@Controller('todo')\nclass TodoController {\n\t@Get('/')\n\tgetWithMiddleware() {\n    return 'OK'\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Middleware in Danet with TypeScript\nDESCRIPTION: This snippet demonstrates how to set up session middleware in a Danet application using the hono_sessions package. It configures a CookieStore for session storage and sets various options for security and expiration.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/sessions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Session,\n    sessionMiddleware,\n    CookieStore\n} from 'jsr:@jcs224/hono-sessions'\n\nconst app = new DanetApplication();\nconst store = new CookieStore()\napp.use(\n    sessionMiddleware({\n        store,\n        encryptionKey: 'password_at_least_32_characters_long', // Required for CookieStore, recommended for others\n        expireAfterSeconds: 900, // Expire session after 15 minutes of inactivity\n        cookieOptions: {\n            sameSite: 'Lax', // Recommended for basic CSRF protection in modern browsers\n            path: '/', // Required for this library to work properly\n            httpOnly: true, // Recommended to avoid XSS attacks\n        },\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating POST Endpoint with Body Parameter in TypeScript\nDESCRIPTION: Example of a POST route handler using @Body decorator to accept a CreateTodoDto parameter.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/types-and-parameters.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\nasync create(@Body() createTodoDto: CreateTodoDto) {\n  this.todoService.create(createTodoDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding AuthGuard to WebSocket Message Handler in TypeScript\nDESCRIPTION: This code demonstrates how to apply an authentication guard to a WebSocket message handler using the @UseGuards decorator. The guard is applied at the method level to protect the 'events' topic handler.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/guards.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuards(AuthGuard)\n@OnWebSocketMessage('events')\nhandleEvent(@WebSocket() socket: WebSocket) {\n  socket.send({ topic: 'events', data: 'hello' })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Handler with Body Decorator for SwaggerModule in TypeScript\nDESCRIPTION: This code snippet shows how to use the @Body() decorator from @danet/zod in a route handler. The SwaggerModule uses this information to generate the API document and model definitions.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/openapi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\nasync create(@Body(CreateTodoSchema) createTodoDto: CreateTodoSchema) {\n  this.todoService.create(createTodoDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Metadata Decorator in TypeScript\nDESCRIPTION: This snippet defines a custom decorator 'Roles' that uses SetMetadata to attach role information to a route handler or controller.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SetMetadata } from 'jsr:@danet/core/metadata';\n\nexport const Roles = (...roles: string[]) => SetMetadata('roles', roles);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Guard in TypeScript for Danet\nDESCRIPTION: This example demonstrates how to set up a global guard in Danet. It uses the AppModule to provide the guard as a global token, which will apply the guard to all routes in the application.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/guards.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, AuthGuard } from 'jsr:@danet/core';\n\n@Module({\n  providers: [\n    new TokenInjector(SimpleGuard, GLOBAL_GUARD)\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining DTO Class with Swagger Properties\nDESCRIPTION: CreateTodoDto class definition with @ApiProperty decorators to make properties visible in Swagger UI.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/types-and-parameters.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateTodoDto {\n  @ApiProperty()\n  name!: string;\n\n  @ApiProperty()\n  priority!: number;\n\n  @ApiProperty()\n  colorLabel!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Guard to Controller in TypeScript for Danet\nDESCRIPTION: This code snippet shows how to apply a guard to an entire controller using the @UseGuards decorator. This will protect all routes within the controller with the specified guard.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/guards.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('todo')\n@UseGuards(SimpleGuard)\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Repository Implementation Example\nDESCRIPTION: Example of implementing a MongoDB repository for Item entities, extending the MongodbRepository class with specific collection name.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/databases.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { Item } from './class.ts';\nimport { MongodbRepository, MongodbService } from \"jsr:@danet/database/mongodb\";\n\n@Injectable()\nexport class MongodbItemRepository extends MongodbRepository<Item> {\n constructor(protected service: MongodbService) {\n  super(service, 'items');\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Codes in Danet Controllers\nDESCRIPTION: This snippet demonstrates how to change the default HTTP status code (200) for a response by using the @HttpCode decorator at the handler level.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@HttpCode(204)\ncreate() {\n  return 'Something';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom API Security with TypeScript\nDESCRIPTION: Demonstrates how to apply a custom security mechanism to a controller using the @ApiSecurity decorator, which needs to be registered in the API specification.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiSecurity('basic')\n@Controller('todo')\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cron Job with @Cron Decorator in Danet\nDESCRIPTION: Demonstrates how to create a scheduled task that runs at specific times using the @Cron decorator with a cron pattern expression.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/task-scheduling.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cron, Injectable } from 'jsr:@danet/core';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron('45 * * * *')\n  handleCron() {\n    this.logger.debug('Called when the current minutes is 45');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Controller for HTML Rendering in Danet\nDESCRIPTION: Demonstrates how to set up a controller with a route handler that renders HTML using the @Render decorator. The method returns an object with values that are passed to the specified Handlebars template.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/renderer.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('nice-controller')\nclass MyController {\n  @Render('hello')\n  @Get('/')\n  renderANiceHTML() {\n    return { title: \"the page title\", name: \"world\" };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Messages in Danet Controller\nDESCRIPTION: Handler that subscribes to 'events' messages and echoes back the received data. This uses the @OnWebSocketMessage decorator to define which message topics the handler responds to.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWebSocketMessage('events')\nhandleEvent(@Body() data: unknown): WebSocketPayload {\n  return { topic: 'events' , data };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionContext Interface in TypeScript\nDESCRIPTION: This snippet defines the ExecutionContext interface, which provides methods to access information about the current execution context in Danet.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecutionContext = {\n  /**\n   * Returns the type of the controller class which the current handler belongs to.\n   */\n  getClass(): Constructor;\n  /**\n   * Returns a reference to the handler (method) that will be invoked next in the\n   * request pipeline.\n   */\n  getHandler(): Function;\n  /**\n   * When in a WebSocket message 'lifecycle', get access to the current socket\n   */\n  webSocket?: WebSocket;\n  /**\n   * When in a WebSocket message 'lifecycle', get access to the current socket\n   */\n  webSocketTopic?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Handler Metadata in TypeScript\nDESCRIPTION: This snippet shows how to use MetadataHelper to retrieve custom metadata from a route handler using the ExecutionContext.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = MetadataHelper.getMetadata<string[]>('roles', context.getHandler());\n```\n\n----------------------------------------\n\nTITLE: Applying Exception Filter at Controller Level\nDESCRIPTION: Demonstrates how to set up an exception filter at the controller level, affecting all route handlers within that controller.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/exception-filters.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n@UseFilter(CustomExceptionFilter)\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Complete GitHub Action Workflow for Deno Deploy\nDESCRIPTION: A full GitHub Action workflow configuration that handles checkout, Deno setup, Danet CLI installation, bundling, and deployment to Deno Deploy.\nSOURCE: https://github.com/savory/docs/blob/main/src/deno-deploy.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to Deno Deploy\n\non:\n  push:\n    branches: [main]\n\npermissions:\n  contents: read\n  id-token: write # Needed for auth with Deno Deploy\n```\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup repo\n        uses: actions/checkout@v3\n\n      - name: Setup Deno\n        # uses: denoland/setup-deno@v1\n        uses: denoland/setup-deno@004814556e37c54a2f6e31384c9e18e983317366\n        with:\n          deno-version: v1.x\n\n      - name: Install Danet CLI\n        run: deno install --allow-read --allow-write --allow-run --allow-env -n danet jsr:@danet/cli\n\n      - name: Bundle app with danet CLI\n        run: danet bundle run.js\n\n      - name: Deploy to Deno Deploy\n        uses: denoland/deployctl@v1\n        with:\n          project: YOUR-PROJECT-NAME\n          entrypoint: run.js\n          root: bundle\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Initialization with OnAppBootstrap in Danet\nDESCRIPTION: This snippet shows how to implement asynchronous initialization using the OnAppBootstrap lifecycle hook. By returning a Promise or using async/await, you can defer the application initialization process until asynchronous operations complete.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/lifecycle.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync onAppBootstrap(): Promise<void> {\n  await this.fetch();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Metadata Decorator in TypeScript\nDESCRIPTION: This example demonstrates the usage of the custom 'Roles' decorator to attach role metadata to a route handler in a Danet controller.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@Roles('admin')\nasync create(@Body() createTodoDto: CreateTodoDto) {\n    this.todoService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring ScheduleModule in Danet\nDESCRIPTION: Shows how to import and configure the ScheduleModule in the root AppModule to enable task scheduling functionality in a Danet application.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/task-scheduling.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScheduleModule, Module } from 'jsr:@danet/core';\n\n@Module({\n  imports: [ScheduleModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Metadata on Route Handler in TypeScript\nDESCRIPTION: This example shows how to use the @SetMetadata decorator to attach custom metadata to a route handler in a Danet controller.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\n@SetMetadata('roles', ['admin'])\nasync create(@Body() createTodoDto: CreateTodoDto) {\n  this.todoService.create(createCatDto);\n}\n```\n\n----------------------------------------\n\nTITLE: KV Repository Implementation with Secondary Keys\nDESCRIPTION: Detailed implementation of a KV repository for Vote entities, including secondary key management and custom query methods.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/databases.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { Vote } from './class.ts';\nimport { type VoteRepository } from './repository.ts';\nimport { KvRepository, KvService } from \"jsr:@danet/database/kv\";\n\n@Injectable()\nexport class KvVoteRepository extends KvRepository<Vote>\n  implements VoteRepository {\n    constructor(protected kv: KvService) {\n        super(kv, 'votes');\n    }\n\n    protected getSecondaryKeys(vote: Vote) {\n        const voteByItemIdKey = [this.collectionName, vote.itemId, vote._id];\n        const voteByUserIdAndItemIdKey = [\n            this.collectionName,\n            vote.userId,\n            vote.itemId,\n        ];\n        return {voteByUserIdAndItemIdKey, voteByItemIdKey};\n    }\n\n    async getByItemId(itemId: string): Promise<Vote[]> {\n        const votes = [];\n        for await (\n            const entry of this.kv.client().list<Vote>({\n            prefix: [this.collectionName, itemId],\n        })\n            ) {\n            votes.push(entry.value as Vote);\n        }\n        return votes;\n    }\n\n    async getByItemIdAndUserId(\n        itemId: string,\n        userId: string,\n    ): Promise<Vote | undefined> {\n        const entry = await this.kv.client().get<Vote>([\n            this.collectionName,\n            userId,\n            itemId,\n        ]);\n        return entry.value !== null ? entry.value : undefined;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Endpoints in Danet\nDESCRIPTION: Shows how to add descriptive documentation to API endpoints using the @Description decorator. This helps provide context and explanation for the endpoint's purpose.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/operations.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('todo')\nexport class TodoController {\n  @Description('Get a Todo by ID')\n  @Get(':id')\n  async getById(@Param('id') id: string): Todo {\n    return this.todoService.getById(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in Danet Routes with TypeScript\nDESCRIPTION: This snippet shows how to use the @Session decorator to access and modify session data within a Danet route handler. It demonstrates incrementing a 'visits' counter stored in the session.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/sessions.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Session,\n} from 'jsr:@danet/core';\n\n@Get()\nfindAll(@Session() session: Map<unknown, unknown>) {\n  const visits = session.get('visits');\n  session.set('visits', visits ? visits + 1 : 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Exception Filter to a Controller Method\nDESCRIPTION: Shows how to bind a custom exception filter to a specific route handler using the @UseFilter decorator, making it method-scoped.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/exception-filters.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n@Post()\n@UseFilter(CustomerExceptionFilter)\nasync create(@Body() createTodoDto: CreateTodoDto) {\n  throw new ForbiddenException();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Middleware\nDESCRIPTION: Shows how to create a simpler functional middleware alternative when dependencies aren't needed.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, DanetMiddle, HttpContext, NextFunction } from 'jsr:@danet/core';\n\nexport async function logger(ctx: HttpContext, next: NextFunction) {\n  console.log(`Request...`);\n  await next();\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting KvQueue in a Class Constructor\nDESCRIPTION: Shows how to inject the KvQueue service into a class using constructor injection.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private queue: KvQueue) {}\n```\n\n----------------------------------------\n\nTITLE: Emitting an Event with EventEmitter\nDESCRIPTION: Demonstrates how to emit an event using the EventEmitter, including passing an event object with data.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/events.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.eventEmitter.emit(\n  'order.created',\n  new OrderCreatedEvent({\n    orderId: 1,\n    payload: {},\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Recurring Tasks with @Interval Decorator\nDESCRIPTION: Demonstrates how to create a recurring task that runs at fixed time intervals using the @Interval decorator with a millisecond time value.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/task-scheduling.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Interval(10000)\nhandleInterval() {\n  this.logger.debug('Called every 10 seconds');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Controllers and Endpoints in Danet\nDESCRIPTION: Demonstrates how to add OpenAPI tags to both controllers and individual endpoints using the @Tag decorator. Tags help organize and categorize API endpoints in the documentation.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/operations.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Tag('cats')\n@Controller('todo')\nexport class TodoController {\n  @Tag('get')\n  @Get(':id')\n  async getById(@Param('id') id: string): Todo {\n    return this.todoService.getById(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KvQueueModule in AppModule\nDESCRIPTION: Demonstrates how to import and configure the KvQueueModule in the root AppModule of a Danet application.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, KvQueueModule } from 'jsr:@danet/core';\n\n@Module({\n  import: [KvQueueModule.configure()],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Instance in a Handler\nDESCRIPTION: Handler that uses the @WebSocket decorator to access the current WebSocket instance, allowing direct manipulation of the connection.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWebSocketMessage('events')\nhandleEvent(@WebSocket() socket: WebSocketInstance) {\n  return socket.send(JSON.string({ topic: 'hello', data: name }));;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Topic Parameters with @Param Decorator\nDESCRIPTION: WebSocket handler that extracts parameters from the topic path using the @Param decorator, similar to how route parameters work in HTTP controllers.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWebSocketMessage('user/:userId')\nhandleEvent(@Param('userId') userId: string ) {\n  return { topic: 'hello', data: userId };\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Danet Application\nDESCRIPTION: Command to start the Danet application server using Deno task runner.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/first-steps.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ deno task launch-server\n```\n\n----------------------------------------\n\nTITLE: SSEMessage Interface Definition in Typescript\nDESCRIPTION: This snippet defines the interface for SSEMessage, which is used to create SSE events. It specifies the structure of the message according to the SSE specification.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/sse.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SSEMessage {\n  data: string | object;\n  id?: string;\n  event?: string;\n  retry?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Injectables in a Danet Module\nDESCRIPTION: This snippet demonstrates how to register controllers and injectables in a Danet module using the @Module decorator. It shows the standard way of including injectables in the module configuration.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/custom-injectables.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { TodoController } from './todo/todo.controller';\nimport { TodoService } from './todo/todo.service';\n\n@Module({\n  controllers: [TodoController],\n  injectables: [TodoService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Default JSON Error Response Format in Danet\nDESCRIPTION: Shows the default JSON response format returned by Danet's built-in global exception filter when an unrecognized exception occurs.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/exception-filters.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 500,\n  \"message\": \"Internal server error!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReturnedSchema Decorator for Array Response in TypeScript\nDESCRIPTION: This snippet shows how to use the @ReturnedSchema decorator for endpoints that return an array of objects. The second argument is set to true to indicate an array return type.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/openapi.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ReturnedSchema(TodoSchema, true)\n@Get()\nasync getTodos(): Todo[] {\n  return this.todoService.getAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Middleware in Danet\nDESCRIPTION: This snippet shows how to create a middleware class for WebSocket connections and apply it to a WebSocket controller. The middleware sends a status message to the client before allowing the connection to proceed.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/middlewares.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass SimpleMiddleware implements DanetMiddleware {\n\tconstructor(private simpleInjectable: SimpleInjectable) {\n\t}\n\n\tasync action(ctx: ExecutionContext, next: NextFunction) {\n\t\tctx.websocket!.send(\n\t\t\tJSON.stringify({\n\t\t\t\ttopic: 'status',\n\t\t\t\tdata: {\n          \t\t\t\tmiddleware: 'SimpleMiddleware'\n        \t\t\t},\n\t\t\t}),\n\t\t);\n\t\tawait next();\n\t}\n}\n\n\n@Middleware(SimpleMiddleware)\n@WebSocketController('ws')\nclass ControllerWithMiddleware {\n\t@OnWebSocketMessage('trigger')\n\tgetWithoutMiddleware() {\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Users Module in TypeScript\nDESCRIPTION: Example of a basic static module definition that provides and exports a UsersService. This represents a host module pattern in Danet.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { UsersService } from './users.service';\n\n@Module({\n  injectables: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n```\n\n----------------------------------------\n\nTITLE: Using useClass for Dynamic Class Selection in Danet\nDESCRIPTION: This example demonstrates how to use the useClass syntax to dynamically determine which class a token should resolve to based on the environment. It shows how to provide different implementations of a service for development and production environments.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/custom-injectables.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst configServiceProvider = {\n  token: ConfigService,\n  useClass:\n    process.env.NODE_ENV === 'development'\n      ? DevelopmentConfigService\n      : ProductionConfigService,\n};\n\n@Module({\n  injectables: [configServiceProvider],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Extracting Properties from WebSocket Message Body\nDESCRIPTION: WebSocket message handler that extracts a specific property from the message body using the @Body decorator with a property key parameter.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWebSocketMessage('events')\nhandleEvent(@Body('name') name: string) {\n  return { topic: 'hello', data: name };\n}\n```\n\n----------------------------------------\n\nTITLE: Applying WebSocket Exception Filters with Decorators in TypeScript\nDESCRIPTION: Example demonstrating how to apply method-scoped exception filters to WebSocket message handlers using the @UseFilters decorator. This shows the application of WsExceptionFilter to an OnWebSocketMessage handler.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/exception-filters.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n@UseFilters(new WsExceptionFilter())\n@OnWebSocketMessage('events')\nonEvent(@Body() data: any ) {\n  return { 'events' , data };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic ConfigModule in Danet\nDESCRIPTION: The implementation of the ConfigModule as a dynamic module, featuring a static register() method that returns a DynamicModule object. This allows the module to be configured during import.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamicModule, Module } from 'jsr:@danet/core';\nimport { ConfigService } from './config.service';\n\n@Module({})\nexport class ConfigModule {\n  static register(): DynamicModule {\n    return {\n      module: ConfigModule,\n      injectables: [ConfigService],\n      exports: [ConfigService],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting EventEmitter in a Class Constructor\nDESCRIPTION: Shows how to inject the EventEmitter into a class using constructor injection for later use in emitting events.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/events.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private eventEmitter: EventEmitter) {}\n```\n\n----------------------------------------\n\nTITLE: Creating One-time Tasks with @Timeout Decorator\nDESCRIPTION: Shows how to create a one-time task that executes after a specified delay from application startup using the @Timeout decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/task-scheduling.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Timeout(5000)\nhandleTimeout() {\n  this.logger.debug('Called once after 5 seconds');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Service with Injected Options\nDESCRIPTION: Final implementation of ConfigService using dependency injection to receive configuration options.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { resolve }from \"jsr:@std/path\";\nimport { loadSync } from \"jsr:@std/dotenv\";\nimport { EnvConfig } from './interfaces';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor(@Inject('CONFIG_OPTIONS') private options: Record<string, any>) {\n    const filePath = `${Deno.env.get('ENVIRONMENT') || 'development'}.env`;\n    const envFile = resolve(import.meta.dirname, '../../', options.folder, filePath);\n    this.envConfig = loadSync({envPath: envFile, export: true});\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Endpoint with Return Type\nDESCRIPTION: Example of a GET route handler with explicit return type for Swagger documentation.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/types-and-parameters.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(':id')\nasync getById(@Param('id') id: string): Todo {\n  return this.todoService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Danet CLI as a Global Command\nDESCRIPTION: Command to install the Danet CLI globally as a command-line tool. This installation grants necessary permissions for file operations and environment access, and aliases the command to 'danet'.\nSOURCE: https://github.com/savory/docs/blob/main/src/cli.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ deno install --allow-read --allow-write --allow-run --allow-env --global -n danet jsr:@danet/cli\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Module in Application\nDESCRIPTION: Demonstrates how to import and configure a dynamic module in the application module\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/modules.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { DatabaseModule } from './database/database.module';\nimport { User } from './users/entities/user.entity';\n\n@Module({\n  imports: [DatabaseModule.forRoot([User])],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Config Module with Options Provider\nDESCRIPTION: Shows how to create a dynamic module that registers configuration options as an injectable provider.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamicModule, Module } from 'jsr:@danet/core';\nimport { ConfigService } from './config.service';\n\n@Module({})\nexport class ConfigModule {\n  static register(options: Record<string, any>): DynamicModule {\n    return {\n      module: ConfigModule,\n      injectables: [\n        {\n          provide: 'CONFIG_OPTIONS',\n          useValue: options,\n        },\n        ConfigService,\n      ],\n      exports: [ConfigService],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Property with Swagger\nDESCRIPTION: Example of defining an enum property using @ApiProperty decorator with explicit enum values.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/types-and-parameters.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({ enum: ['Admin', 'Moderator', 'User']})\nrole: UserRole;\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema with OpenAPI Title Attribute in TypeScript\nDESCRIPTION: This example demonstrates how to add an OpenAPI title attribute to a Zod schema. The title is used to name the model in the generated OpenAPI definition.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/openapi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst Cat = z.object({\n    name: z.string(),\n    breed: z.string(),\n    dob: z.date(),\n    isHungry: z.boolean().optional(),\n    hobbies: z.array(z.any())\n}).openapi({\n    title: 'Cat'\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error Messages for WebSocket Exceptions in TypeScript\nDESCRIPTION: Example showing how to return a custom error message in WebSockets instead of throwing an HttpException. This creates a message object with 'topic' and 'data' properties.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/exception-filters.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreturn { topic: 'error', data: { customMessage: 'not cool my friend' }};\n```\n\n----------------------------------------\n\nTITLE: Importing EventEmitter Module in TypeScript\nDESCRIPTION: Shows how to import the EventEmitterModule and EventEmitter from the Danet core package.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/events.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventEmitterModule, EventEmitter } from `jsr:@danet/core`\n```\n\n----------------------------------------\n\nTITLE: Using Custom Injectables with useValue in Danet\nDESCRIPTION: This example shows how to use a custom injectable with the useValue syntax to inject a mock TodoService for testing purposes. It demonstrates replacing a real implementation with a mock object.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/custom-injectables.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TodoService } from './todo.service';\n\nconst mockTodoService = {\n  /* mock implementation\n  ...\n  */\n};\n\n@Module({\n  imports: [todoModule],\n  injectables: [\n    {\n      token: TodoService,\n      useValue: mockTodoService,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Handling Complete Message Payload in WebSocket Controller\nDESCRIPTION: Handler that accesses the entire message payload using the @Body decorator without a property key, allowing access to all data in the message.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWebSocketMessage('events')\nhandleEvent(@Body() payload: { name: string, whateveryouwant: CoolObject }) {\n  return { topic: 'hello', data: name };\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Deploying to Deno Deploy\nDESCRIPTION: Command to manually deploy a bundled Danet application to Deno Deploy using deployctl, requiring a project name.\nSOURCE: https://github.com/savory/docs/blob/main/src/deno-deploy.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd bundle && deployctl deploy --project=YOUR_PROJECT_NAME my-app.js\n```\n\n----------------------------------------\n\nTITLE: Importing KvQueueModule and KvQueue in TypeScript\nDESCRIPTION: Shows how to import the KvQueueModule and KvQueue from the @danet/core package.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KvQueueModule, KvQueue } from `jsr:@danet/core`\n```\n\n----------------------------------------\n\nTITLE: Using String-based Tokens for Injectables in Danet\nDESCRIPTION: This snippet demonstrates how to use string-based tokens for custom injectables. It shows how to associate a string token with a pre-existing connection object and how to inject it using the @Inject decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/custom-injectables.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connection } from './connection';\n\n@Module({\n  injectables: [\n    {\n      token: 'CONNECTION',\n      useValue: connection,\n    },\n  ],\n})\nexport class AppModule {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class todoRepository {\n  constructor(@Inject('CONNECTION') connection: Connection) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Controllers\nDESCRIPTION: Shows how to apply Basic authentication to a controller using the @ApiBasicAuth decorator, which is a built-in security mechanism.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiBasicAuth()\n@Controller('todo')\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Authentication in Controllers\nDESCRIPTION: Shows how to apply Bearer token authentication to a controller using the @ApiBearerAuth decorator, which is a built-in security mechanism.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiBearerAuth()\n@Controller('todo')\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Authentication with SpecBuilder\nDESCRIPTION: Demonstrates how to register Basic authentication in the API specification using the SpecBuilder's addBasicAuth method.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new SpecBuilder().addBasicAuth();\n```\n\n----------------------------------------\n\nTITLE: Implementing Compression Middleware in Danet Application (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and apply the compress middleware from hono in a Danet application. The middleware is applied globally to compress responses.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/compression.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compress } from 'jsr:@hono/hono/compress'\n\nconst app = new DanetApplication();\napp.use(compress());\n```\n\n----------------------------------------\n\nTITLE: GET Endpoint with ReturnedType Decorator\nDESCRIPTION: Alternative way to specify return type using @ReturnedType decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/types-and-parameters.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ReturnedType(Todo)\n@Get(':id')\nasync getById(@Param('id') id: string): Todo {\n  return this.todoService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OAuth2 Authentication with SpecBuilder\nDESCRIPTION: Demonstrates how to register OAuth2 authentication in the API specification using the SpecBuilder's addOAuth2 method.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new SpecBuilder().addOAuth2();\n```\n\n----------------------------------------\n\nTITLE: Applying Functional Middleware to Controller\nDESCRIPTION: Demonstrates how to use functional middleware with a controller using the @Middleware decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Middleware(logger)\n@Controller('todo')\nclass TodoController {\n  @Get('/')\n  getWithMiddleware() {\n    return 'OK'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Listener with @OnEvent Decorator\nDESCRIPTION: Shows how to create an event listener method using the @OnEvent decorator, specifying the event name to listen for.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/events.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderListeners {\n    @OnEvent('order.created')\n    handleOrderCreatedEvent(payload: OrderCreatedEvent) {\n      // handle and process \"OrderCreatedEvent\" event\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Config Options Token\nDESCRIPTION: Shows best practice for defining an injection token as a constant in a separate file.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CONFIG_OPTIONS = 'CONFIG_OPTIONS';\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage for Danet Framework in YAML\nDESCRIPTION: This YAML configuration sets up the homepage for the Danet framework using VitePress. It includes a hero section with a title, tagline, and call-to-action buttons, as well as a features section highlighting key aspects of the framework.\nSOURCE: https://github.com/savory/docs/blob/main/src/index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: Danet\n  text: The most mature backend framework for Deno\n  tagline: Inspired by the best, inspiring you to be.\n  image:\n    src: /danet-logo.png\n    alt: Danet\n  actions:\n    - theme: brand\n      text: Get Started\n      link: introduction/welcome.html\n    - theme: alt\n      text: View on GitHub\n      link: https://github.com/Savory/Danet\nfeatures:\n  - icon: 🦕\n    title: Secure\n    details: We use the latest Deno and TypeScript features so you can develop with more confidence and security.\n  - icon: 💡\n    title: Intuitive\n    details: We've kept it simple and intuitive so you can focus on what's really important.\n  - icon: 🪜\n    title: Extensible\n    details: We allow other libraries and tools to be integrated into your project without complications.\n```\n\n----------------------------------------\n\nTITLE: Internal Message Handling in KvQueue Listener\nDESCRIPTION: Illustrates how KvQueue internally handles incoming messages and routes them to the appropriate callbacks.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.kv.listenQueue((msg: QueueEvent) => {\n\t\t\tconst type = msg.type;\n\t\t\tconst callback = this.listenersMap.get(type);\n\t\t\tif (callback) {\n\t\t\t\treturn callback(msg.data);\n\t\t\t}\n\t\t\tthrow Error('Unhandled message type');\n\t\t});\n```\n\n----------------------------------------\n\nTITLE: Defining Request-Scoped Controller in Typescript for Danet\nDESCRIPTION: This code shows how to declare a controller with request scope in Danet. It uses the @Controller decorator with options including path and scope to set the TodoController as request-scoped.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/injection-scopes.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller({\n  path: 'todo',\n  scope: Scope.REQUEST,\n})\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Security Definition with SpecBuilder\nDESCRIPTION: Shows how to register a custom security definition in the API specification using the SpecBuilder. This example configures basic HTTP authentication.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new Spec().addSecurity('basic', {\n  type: 'http',\n  scheme: 'basic',\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Native Hono Middleware\nDESCRIPTION: Demonstrates how to integrate native Hono middleware with a Danet application.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  import { timing } from 'jsr:@hono/hono/timing'\n...\n  const application = new DanetApplication();\n  application.use(timing()); //as many middleware as you want;\n  await application.init(AppModule);\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Authentication in Controllers\nDESCRIPTION: Shows how to apply Cookie-based authentication to a controller using the @ApiCookieAuth decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiCookieAuth()\n@Controller('todo')\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Using ReturnedSchema Decorator for Single Object Response in TypeScript\nDESCRIPTION: This example demonstrates how to use the @ReturnedSchema decorator to specify the schema of the response returned by an endpoint. This is used for single object responses.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/openapi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ReturnedSchema(TodoSchema)\n@Get(':id')\nasync getById(@Param('id') id: string): Todo {\n  return this.todoService.getById(id);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request-Scoped Injectable in Typescript for Danet\nDESCRIPTION: This snippet demonstrates how to specify the injection scope for a service in Danet. It uses the @Injectable decorator with a scope option to set the TodoService as request-scoped.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/injection-scopes.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Scope } from 'jsr:@danet/core';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class TodoService {}\n```\n\n----------------------------------------\n\nTITLE: GET Endpoint Returning Array with ReturnedType\nDESCRIPTION: Example showing how to specify array return type using @ReturnedType decorator.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/types-and-parameters.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ReturnedType(Todo, true)\n@Get()\nasync getTodos(): Todo[] {\n  return this.todoService.getAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Messages from a Client\nDESCRIPTION: Client-side JavaScript code that establishes a WebSocket connection and sends a message with a topic and data. This demonstrates the expected message format for Danet WebSocket controllers.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst websocket = new WebSocket(`ws://localhost:3000/ws`);\n\nwebsocket.onopen = (e) => {\n    websocket.send(\n        JSON.stringify({ topic: 'trigger', data: { obiwan: 'kenobi' } }),\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in Danet Controller\nDESCRIPTION: This example shows how to access the client request details using the @Req() decorator. The request object represents the HTTP request and has properties for query strings, parameters, HTTP headers, and body.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Req } from 'jsr:@danet/core';\n\n@Controller('todo')\nexport class TodoController {\n  @Get()\n  findAll(@Req() request: Request): string {\n    return 'This action returns all todo';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to the Queue\nDESCRIPTION: Demonstrates how to send a message to the queue using the KvQueue service.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.queue.sendMessage('order.created', new OrderCreatedMessage(\n  {\n    orderId: 1,\n    payload: {},\n  }\n))\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Error Response for Invalid Request Body\nDESCRIPTION: Shows the structure of an error response returned when the request body fails validation against the DTO schema, including detailed information about validation failures.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/controllers.md#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"status\": 400,\n\t\"name\": \"NotValidBodyException\",\n\t\"reasons\": [\n\t\t{\n\t\t\t\"property\": \"priority\",\n\t\t\t\"errorMessage\": \"Property must be a number\",\n\t\t\t\"constraints\": []\n\t\t}\n\t],\n\t\"message\": \"400 - Body bad formatted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Import Example in Danet\nDESCRIPTION: A code example demonstrating how to dynamically import the ConfigModule with configuration options, allowing customization of the module's behavior during import.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule.register({ folder: './config' })],\n  controllers: [AppController],\n  injectables: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface for Data Models in Danet\nDESCRIPTION: A Todo interface definition that specifies the structure of todo items with title and description properties. This interface is used by both the service and controller.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/injectables.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Todo {\n  title: string;\n  description: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CronExpression Enum for Common Patterns\nDESCRIPTION: Shows how to use the built-in CronExpression enum to specify common cron patterns when creating scheduled tasks instead of manually writing cron expressions.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/task-scheduling.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, Logger, Cron, CronExpression  } from 'jsr:@danet/core';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron(CronExpression.EVERY_30_MINUTES)\n  handleCron() {\n    this.logger.debug('Called every 30 minutes');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Providers in a Danet Module\nDESCRIPTION: An AppModule configuration that registers both the TodoController and TodoService in the Danet application. Controllers are registered in the controllers array, while injectable services go in the injectables array.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/injectables.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { TodoController } from './todo/todo.controller';\nimport { TodoService } from './todo/todo.service';\n\n@Module({\n  controllers: [TodoController],\n  injectables: [TodoService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring EventEmitterModule in AppModule\nDESCRIPTION: Demonstrates how to import and configure the EventEmitterModule in the root AppModule of a Danet application.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/events.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, EventEmitterModule } from 'jsr:@danet/core';\n\n@Module({\n  import: [EventEmitterModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Registering Bearer Authentication with SpecBuilder\nDESCRIPTION: Demonstrates how to register Bearer token authentication in the API specification using the SpecBuilder's addBearerAuth method.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new SpecBuilder().addBearerAuth();\n```\n\n----------------------------------------\n\nTITLE: Static Module Import Example in Danet\nDESCRIPTION: A code example showing how to statically import the ConfigModule in a Danet application, where the module behavior cannot be influenced during import.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [AppController],\n  injectables: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Authentication in Controllers\nDESCRIPTION: Shows how to apply OAuth2 authentication to a controller using the @ApiOAuth2 decorator, specifying the required scopes.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiOAuth2(['todos:write'])\n@Controller('todo')\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Repository Interface Definition for Database Operations\nDESCRIPTION: Generic repository interface definition that all database providers must implement, including basic CRUD operations.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/databases.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Repository<T extends unknown> {\n  getAll(): Promise<T[]>;\n  getById(id: string): Promise<T | undefined>;\n  // deno-lint-ignore no-explicit-any\n  create(dto: unknown): Promise<any>;\n  updateOne(id: string, dto: Partial<T>): Promise<unknown>;\n  deleteOne(id: string): Promise<unknown>;\n  deleteAll(): Promise<unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Cookie Authentication with SpecBuilder\nDESCRIPTION: Demonstrates how to register Cookie-based authentication in the API specification using the SpecBuilder's addCookieAuth method, specifying the cookie name.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/security.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = new SpecBuilder().addCookieAuth('token');\n```\n\n----------------------------------------\n\nTITLE: Accessing Handler and Class Information in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the ExecutionContext to access the name of the current handler method and the class it belongs to.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst methodKey = ctx.getHandler().name; // \"create\"\nconst className = ctx.getClass().name; // \"TodoController\"\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata at Controller Level in TypeScript\nDESCRIPTION: This example demonstrates how to apply metadata at the controller level, which affects all routes within the controller.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Roles('admin')\n@Controller('todo')\nexport class TodoController {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Middleware with Multiple Handlers\nDESCRIPTION: Shows how to apply multiple global middleware handlers that execute sequentially.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n...\n  const application = new DanetApplication();\n  await application.init(AppModule);\n  application.addGlobalMiddlewares(YourFirstMiddleware, SecondMiddleware); //as many middleware as you want;\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller-level Metadata in TypeScript\nDESCRIPTION: This snippet shows how to retrieve metadata applied at the controller level using MetadataHelper and ExecutionContext.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/execution-context.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = MetadataHelper.getMetadata<string[]>('roles', context.getClass());\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Service with Dependency Injection\nDESCRIPTION: Shows how to implement an Auth service that injects and uses the UsersService, demonstrating dependency injection in Danet.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n  /*\n    Implementation that makes use of this.usersService\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Middleware in Danet Application\nDESCRIPTION: Shows how to apply middleware globally in a Danet application using the addGlobalMiddlewares method.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/middlewares.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n...\n  const application = new DanetApplication();\n  await application.init(AppModule);\n  application.addGlobalMiddlewares(LoggerMiddleware); //as many middleware as you want;\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Constructor Injection in Danet\nDESCRIPTION: A simplified code snippet showing how dependency injection works in Danet through constructor parameters with type annotations. The framework automatically resolves dependencies based on these types.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/injectables.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(private todoService: TodoService) {}\n```\n\n----------------------------------------\n\nTITLE: Client-side EventSource Usage in JavaScript\nDESCRIPTION: This snippet shows how to use the EventSource API in a client-side JavaScript application to connect to the SSE endpoint and handle incoming messages.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/sse.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventSource = new EventSource('/sse');\neventSource.onmessage = ({ data }) => {\n  console.log('New message', JSON.parse(data));\n};\n```\n\n----------------------------------------\n\nTITLE: Registering WebSocket Controller in a Danet Module\nDESCRIPTION: Module configuration that registers the EventsController. This makes the WebSocket controller available within the Danet application.\nSOURCE: https://github.com/savory/docs/blob/main/src/websockets/controllers.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { Eventscontroller } from './events.controller';\n\n@Module({\n  controllers: [Eventscontroller]\n})\nexport class EventsModule {}\n```\n\n----------------------------------------\n\nTITLE: Message Format for Non-Danet Applications\nDESCRIPTION: Explains the format of messages that should be used when sending to the queue from non-Danet applications.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\":\"order.created\",\n  \"data\": //object your provided\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing App Module with Config Registration\nDESCRIPTION: Shows how to import and register the ConfigModule with custom options in the main application module.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from 'jsr:@danet/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule.register({ folder: './config' })],\n  controllers: [AppController],\n  injectables: [AppService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a New Danet Project\nDESCRIPTION: Series of commands to create a new Danet project, navigate to its directory, and run it in development mode with file watching or in normal mode without file watching.\nSOURCE: https://github.com/savory/docs/blob/main/src/cli.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ danet new my-danet-project\n$ cd my-danet-project\n$ danet develop //run with file watching\n$ danet start  //run without file watching\n```\n\n----------------------------------------\n\nTITLE: Implementing OnAppBootstrap Hook in TypeScript with Danet\nDESCRIPTION: This example demonstrates how to implement the OnAppBootstrap lifecycle hook in a service class. The hook method will be called once after all dependencies have been injected, allowing you to initialize resources or perform setup operations.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/lifecycle.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, AuthGuard } from 'jsr:@danet/core';\n\n@Injectable()\nexport class UsersService implements OnAppBootstrap {\n  onAppBootstrap() {\n    console.log(`The module has been initialized.`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Danet CLI Help Information\nDESCRIPTION: Command to display the help menu for Danet CLI, showing all available commands and options.\nSOURCE: https://github.com/savory/docs/blob/main/src/cli.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ danet --help\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Database Module\nDESCRIPTION: Example of implementing a dynamic module with configurable providers using the forRoot pattern\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/modules.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module, DynamicModule } from 'jsr:@danet/core';\nimport { createDatabaseProviders } from './database.providers';\nimport { Connection } from './connection.provider';\n\n@Module({\n  providers: [Connection],\n})\nexport class DatabaseModule {\n  static forRoot(entities = [], options?): DynamicModule {\n    const providers = createDatabaseProviders(options, entities);\n    return {\n      module: DatabaseModule,\n      providers: providers,\n      exports: providers,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling a Danet Application\nDESCRIPTION: Command to bundle a Danet application into a single JavaScript file for deployment.\nSOURCE: https://github.com/savory/docs/blob/main/src/deno-deploy.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndanet bundle my-app.js\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with @OnQueueMessage Decorator\nDESCRIPTION: Shows how to use the @OnQueueMessage decorator to consume messages from the queue in a handler class.\nSOURCE: https://github.com/savory/docs/blob/main/src/techniques/kvQueue.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderMessageHandler {\n    @OnQueueMessage ('order.created')\n    handleOrderCreatedEvent(payload: OrderCreatedMessage) {\n      // handle and process \"OrderCreatedMessage\" event\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Danet Deploy CLI Usage Options\nDESCRIPTION: Documentation of all available options for the 'danet deploy' command, including project naming, entrypoint specification, and bundle file options.\nSOURCE: https://github.com/savory/docs/blob/main/src/deno-deploy.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: danet deploy\n\nDescription:\n\n  Deploy your project to Deno Deploy\n\nOptions:\n\n  -h, --help                      - Show this help.                                                                                    \n  -p, --project     <project>     - Deno deploy project name. If no value is given, Deno deploy will generate a                        \n                                    random name                                                                                        \n  -e, --entrypoint  <entrypoint>  - Bundle entrypoint file                                                       (Default: \"run.ts\")   \n  -b, --bundle      <bundle>      - Bundle output file name, also used as deployctl entrypoint                   (Default: \"bundle.js\")\n\nCommands:\n\n  help  [command]  - Show this help or the help of a sub-command.\n```\n\n----------------------------------------\n\nTITLE: Extending Zod with OpenAPI Functionality in TypeScript\nDESCRIPTION: This snippet shows how to extend Zod with OpenAPI functionality using the zod-openapi library. This is a prerequisite for generating OpenAPI definitions from Zod schemas in Danet.\nSOURCE: https://github.com/savory/docs/blob/main/src/zod/openapi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extendZodWithOpenApi } from 'zod-openapi';\n\nextendZodWithOpenApi(z);\n```\n\n----------------------------------------\n\nTITLE: Running Quick Deployment with Danet CLI\nDESCRIPTION: A simple command to deploy a Danet application to Deno Deploy using the Danet CLI.\nSOURCE: https://github.com/savory/docs/blob/main/src/deno-deploy.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndanet deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Service with Hard-coded Options\nDESCRIPTION: Initial implementation of ConfigService showing environment configuration loading with hard-coded options.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from 'jsr:@danet/core';\nimport { resolve } from \"@std/path\";\nimport { loadSync } from \"jsr:@std/dotenv\";\nimport { EnvConfig } from './interfaces';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor() {\n    const options = { folder: './config' };\n\n    const filePath = `${Deno.env.get('ENVIRONMENT') || 'development'}.env`;\n    const envFile = resolve(import.meta.dirname, '../../', options.folder, filePath);\n    this.envConfig = loadSync({envPath: envFile, export: true});\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Deployment Configuration\nDESCRIPTION: YAML configuration for the GitHub Action that deploys a Danet application to Deno Deploy. Specifies the project name, entrypoint file, and root directory.\nSOURCE: https://github.com/savory/docs/blob/main/src/deno-deploy.md#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Deploy to Deno Deploy\n        uses: denoland/deployctl@v1\n        with:\n          project: YOUR PROJECT NAME HERE\n          entrypoint: run.js\n          root: bundle\n```\n\n----------------------------------------\n\nTITLE: Static Module Declaration with Decorator in Danet\nDESCRIPTION: A simple example showing the structure of a static module declaration using the @Module decorator, which will be compared to dynamic module implementation.\nSOURCE: https://github.com/savory/docs/blob/main/src/fundamentals/dynamic-modules.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [DogsModule], //Love you Nest, had to keep this example <3\n  controllers: [CatsController],\n  injectables: [CatsService],\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Danet Server with Swagger Enabled\nDESCRIPTION: Command to start the Deno HTTP server with the Danet application that has Swagger integration enabled. After running this command, the Swagger UI becomes accessible at the specified endpoint.\nSOURCE: https://github.com/savory/docs/blob/main/src/openapi/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ deno task launch-server\n```\n\n----------------------------------------\n\nTITLE: Creating a Handlebars Template for View Rendering\nDESCRIPTION: Defines a basic Handlebars template (hello.hbs) with title and name variables that will be populated from the controller. This template demonstrates basic variable substitution in Handlebars.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/renderer.md#2025-04-19_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>{{title}}</title>\n  </head>\n  <body>\n    Hello\n    {{name}}!\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Handlebars Main Layout in Danet\nDESCRIPTION: Creates a default layout file (main.hbs) with a basic structure that includes a body placeholder. This serves as the template wrapper for all rendered content.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/renderer.md#2025-04-19_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{body}}}\n```\n\n----------------------------------------\n\nTITLE: Database Environment Configuration\nDESCRIPTION: Example of environment variable configuration in .env file for database connection settings.\nSOURCE: https://github.com/savory/docs/blob/main/src/overview/first-steps.md#2025-04-19_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nDB_NAME=\nDB_HOST=\nDB_PORT\nDB_USERNAME\nDB_PASSWORD=\n```"
  }
]