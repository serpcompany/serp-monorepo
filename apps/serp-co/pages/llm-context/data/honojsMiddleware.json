[
  {
    "owner": "honojs",
    "repo": "middleware",
    "content": "TITLE: Implementing GitHub OAuth Authentication in Hono (GitHub App)\nDESCRIPTION: This snippet demonstrates how to set up GitHub OAuth authentication for a GitHub App using the Hono framework. It includes the necessary middleware configuration and a route handler for processing the authenticated user data.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { githubAuth } from '@hono/oauth-providers/github'\n\nconst app = new Hono()\n\napp.use(\n  '/github',\n  githubAuth({\n    client_id: Bun.env.GITHUB_ID,\n    client_secret: Bun.env.GITHUB_SECRET,\n  })\n)\n\napp.get('/github', (c) => {\n  const token = c.get('token')\n  const user = c.get('user-github')\n\n  return c.json({\n    token,\n    user,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth with Hono Middleware\nDESCRIPTION: Example of using the googleAuth middleware in a Hono application. It demonstrates how to set up the OAuth route and handle the authentication response.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '/google',\n  googleAuth({\n    client_id: Bun.env.GOOGLE_ID,\n    client_secret: Bun.env.GOOGLE_SECRET,\n    scope: ['openid', 'email', 'profile'],\n  })\n)\n\napp.get('/google', (c) => {\n  const token = c.get('token')\n  const grantedScopes = c.get('granted-scopes')\n  const user = c.get('user-google')\n\n  return c.json({\n    token,\n    grantedScopes,\n    user,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Cookie Settings in TypeScript\nDESCRIPTION: Example configuration for secure cookie settings in Hono applications. Implements security best practices including httpOnly flag, secure flag, strict same-site policy, and domain restrictions.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/firebase-auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst secureCookieSettings: CookieOptions = {\n  path: '/',\n  domain: <your_domain>,\n  secure: true,\n  httpOnly: true,\n  sameSite: 'Strict',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Redirect URI for OAuth Flow in Hono.js\nDESCRIPTION: Advanced usage example showing how to customize the redirect_uri parameter for the OAuth flow. This is useful when running behind a reverse proxy, starting the OAuth flow from a different route, or when encoding additional information in the redirect URI.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\nconst SITE_ORIGIN = `https://my-site.com`\nconst OAUTH_CALLBACK_PATH = `/oauth/google`\n\napp.get(\n  '/*',\n  async (c, next) => {\n    const session = readSession(c)\n    if (!session) {\n      // start oauth flow\n      const redirectUri = `${SITE_ORIGIN}${OAUTH_CALLBACK_PATH}?redirect=${encodeURIComponent(\n        c.req.path\n      )}`\n      const oauth = googleAuth({ redirect_uri: redirectUri, ...more })\n      return await oauth(c, next)\n    }\n  },\n  async (c, next) => {\n    // if we are here, the req should contain either a valid session or a valid auth code\n    const session = readSession(c)\n    const authedGoogleUser = c.get('user-google')\n    if (authedGoogleUser) {\n      await saveSession(c, authedGoogleUser)\n    } else if (!session) {\n      throw new HttpException(401)\n    }\n    return next()\n  },\n  async (c, next) => {\n    // serve protected content\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Swagger UI Middleware in Hono\nDESCRIPTION: Basic setup of Swagger UI middleware in a Hono application to serve the UI at a specific route.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\n// Use the middleware to serve Swagger UI at /ui\napp.get('/ui', swaggerUI({ url: '/doc' }))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: JavaScript Hono App with Event Emitter\nDESCRIPTION: Example of integrating event emitter middleware into a Hono application with route handlers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitter } from '@hono/event-emitter'\nimport { handlers, fooHandler } from './event-handlers'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.use(emitter(handlers))\n\napp.post('/users', (c) => {\n  c.get('emitter').emit(c, 'user:created', user)\n})\n\napp.delete('/users/:id', async (c) => {\n  await c.get('emitter').emitAsync(c, 'user:deleted', id)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Basic Zod Validation in Hono\nDESCRIPTION: Demonstrates basic usage of the Zod validator middleware with a POST endpoint. Validates incoming JSON data against a schema with name and age fields.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod'\nimport { zValidator } from '@hono/zod-validator'\n\nconst schema = z.object({\n  name: z.string(),\n  age: z.number(),\n})\n\napp.post('/author', zValidator('json', schema), (c) => {\n  const data = c.req.valid('json')\n  return c.json({\n    success: true,\n    message: `${data.name} is ${data.age}`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic TypeBox Validation in Hono Route\nDESCRIPTION: Demonstrates basic request validation using TypeBox schema in a Hono route handler without hooks. Validates JSON request body against a schema defining name and age fields.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/typebox-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tbValidator } from '@hono/typebox-validator'\nimport { Type as T } from '@sinclair/typebox'\n\nconst schema = T.Object({\n  name: T.String(),\n  age: T.Number(),\n})\n\nconst route = app.post('/user', tbValidator('json', schema), (c) => {\n  const user = c.req.valid('json')\n  return c.json({ success: true, message: `${user.name} is ${user.age}` })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry with Hono in Node.js\nDESCRIPTION: Demonstrates how to set up OpenTelemetry middleware with Hono using NodeSDK and ConsoleSpanExporter. Shows basic configuration for tracing application requests.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/otel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { otel } from '@hono/otel'\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node'\nimport { Hono } from 'hono'\n\nconst sdk = new NodeSDK({\n  traceExporter: new ConsoleSpanExporter(),\n})\n\nsdk.start()\n\nconst app = new Hono()\n\napp.use('*', otel())\napp.get('/', (c) => c.text('foo'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Cookie Authentication with Firebase\nDESCRIPTION: Comprehensive example showing session cookie-based authentication implementation including login handling, CSRF protection, and session management.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/firebase-auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { setCookie } from 'hono/cookie'\nimport { csrf } from 'hono/csrf'\nimport { html } from 'hono/html'\nimport {\n  VerifySessionCookieFirebaseAuthConfig,\n  VerifyFirebaseAuthEnv,\n  verifySessionCookieFirebaseAuth,\n  getFirebaseToken,\n} from '@hono/firebase-auth'\nimport { AdminAuthApiClient, ServiceAccountCredential } from 'firebase-auth-cloudflare-workers'\n\nconst config: VerifySessionCookieFirebaseAuthConfig = {\n  projectId: 'your-project-id',\n  redirects: {\n    signIn: '/login',\n  },\n}\n\ntype MyEnv = VerifyFirebaseAuthEnv & {\n  SERVICE_ACCOUNT_JSON: string\n}\n\nconst app = new Hono<{ Bindings: MyEnv }>()\n\napp.get('/login', csrf(), async (c) => {\n  const content = await html`...`\n  return c.html(content)\n})\n\napp.post('/login_session', csrf(), (c) => {\n  const json = await c.req.json()\n  const idToken = json.idToken\n  if (!idToken || typeof idToken !== 'string') {\n    return c.json({ message: 'invalid idToken' }, 400)\n  }\n  const expiresIn = 60 * 60 * 24 * 5 * 1000\n\n  const auth = AdminAuthApiClient.getOrInitialize(\n    c.env.PROJECT_ID,\n    new ServiceAccountCredential(c.env.SERVICE_ACCOUNT_JSON)\n  )\n  const sessionCookie = await auth.createSessionCookie(idToken, expiresIn)\n  setCookie(c, 'session', sessionCookie, {\n    maxAge: expiresIn,\n    httpOnly: true,\n    secure: true,\n  })\n  return c.json({ message: 'success' })\n})\n\napp.use('/admin/*', csrf(), verifySessionCookieFirebaseAuth(config))\napp.get('/admin/hello', (c) => {\n  const idToken = getFirebaseToken(c)\n  return c.json(idToken)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Validation with Ajv in Hono\nDESCRIPTION: Demonstrates basic usage of Ajv validator middleware for validating JSON requests. Defines a schema for user data with name and age properties and validates incoming POST requests.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/ajv-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type JSONSchemaType } from 'ajv'\nimport { ajvValidator } from '@hono/ajv-validator'\n\nconst schema: JSONSchemaType<{ name: string; age: number }> = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number' },\n  },\n  required: ['name', 'age'],\n  additionalProperties: false,\n} as const\n\nconst route = app.post('/user', ajvValidator('json', schema), (c) => {\n  const user = c.req.valid('json')\n  return c.json({ success: true, message: `${user.name} is ${user.age}` })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Typia Validation Implementation in Hono\nDESCRIPTION: Demonstrates basic request body validation using Typia with Hono. Includes interface definition with tags for type constraints and validation setup for a POST endpoint.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/typia-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport typia, { tags } from 'typia'\nimport { typiaValidator } from '@hono/typia-validator'\n\ninterface Author {\n  name: string\n  age: number & tags.Type<'uint32'> & tags.Minimum<20> & tags.ExclusiveMaximum<100>\n}\n\nconst validate = typia.createValidate<Author>()\n\nconst route = app.post('/author', typiaValidator('json', validate), (c) => {\n  const data = c.req.valid('json')\n  return c.json({\n    success: true,\n    message: `${data.name} is ${data.age}`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authorizer Function with Casbin\nDESCRIPTION: Example of using a custom authorizer function with Casbin middleware. This allows for complete customization of the authorization logic, extracting user, path, and method information from the context.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { newEnforcer } from 'casbin'\nimport { casbin } from '@hono/casbin'\n\nconst app = new Hono()\napp.use(\n  '*',\n  casbin({\n    newEnforcer: newEnforcer('path-to-your-model.conf', 'path-to-your-policy.csv'),\n    authorizer: async (c, enforcer) => {\n      const { user, path, method } = c\n      return await enforcer.enforce(user, path, method)\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAPIHono App\nDESCRIPTION: Example of setting up an OpenAPIHono app, including route handling and OpenAPI documentation generation.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAPIHono } from '@hono/zod-openapi'\n\nconst app = new OpenAPIHono()\n\napp.openapi(route, (c) => {\n  const { id } = c.req.valid('param')\n  return c.json(\n    {\n      id,\n      age: 20,\n      name: 'Ultra-man',\n    },\n    200 // You should specify the status code even if it is 200.\n  )\n})\n\n// The OpenAPI documentation will be available at /doc\napp.doc('/doc', {\n  openapi: '3.0.0',\n  info: {\n    version: '1.0.0',\n    title: 'My API',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAPI Route\nDESCRIPTION: Demonstrates how to create an OpenAPI route using the createRoute function, specifying method, path, request params, and response schema.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute } from '@hono/zod-openapi'\n\nconst route = createRoute({\n  method: 'get',\n  path: '/users/{id}',\n  request: {\n    params: ParamsSchema,\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: UserSchema,\n        },\n      },\n      description: 'Retrieve the user',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Form Data with Zod in Hono Middleware\nDESCRIPTION: This snippet demonstrates how to use the Conform validator middleware with Zod schema in a Hono application. It validates the 'name' and 'age' fields of the submitted form data.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/conform-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { z } from 'zod'\nimport { parseWithZod } from '@conform-to/zod'\nimport { conformValidator } from '@hono/conform-validator'\nimport { HTTPException } from 'hono/http-exception'\n\nconst schema = z.object({\n  name: z.string(),\n  age: z.string(),\n})\n\napp.post(\n  '/author',\n  conformValidator((formData) => parseWithZod(formData, { schema })),\n  (c) => {\n    const submission = c.req.valid('form')\n    const data = submission.value\n\n    return c.json({ success: true, message: `${data.name} is ${data.age}` })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schemas for OpenAPI\nDESCRIPTION: Example of defining Zod schemas for params and user data, including OpenAPI metadata.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from '@hono/zod-openapi'\n\nconst ParamsSchema = z.object({\n  id: z\n    .string()\n    .min(3)\n    .openapi({\n      param: {\n        name: 'id',\n        in: 'path',\n      },\n      example: '1212121',\n    }),\n})\n\nconst UserSchema = z\n  .object({\n    id: z.string().openapi({\n      example: '123',\n    }),\n    name: z.string().openapi({\n      example: 'John Doe',\n    }),\n    age: z.number().openapi({\n      example: 42,\n    }),\n  })\n  .openapi('User')\n```\n\n----------------------------------------\n\nTITLE: ArkType Validator with Custom Error Handling Hook\nDESCRIPTION: Shows how to use the ArkType validator middleware with a custom hook function for handling validation failures. The hook checks the validation result and returns a custom error response when validation fails.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/arktype-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\n  '/post',\n  arktypeValidator('json', schema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Clerk Authentication Implementation\nDESCRIPTION: Example showing how to implement basic Clerk authentication middleware and check user authentication status in a Hono application.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/clerk-auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware, getAuth } from '@hono/clerk-auth'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.use('*', clerkMiddleware())\napp.get('/', (c) => {\n  const auth = getAuth(c)\n\n  if (!auth?.userId) {\n    return c.json({\n      message: 'You are not logged in.',\n    })\n  }\n\n  return c.json({\n    message: 'You are logged in!',\n    userId: auth.userId,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Accessing OAuth Data with X (Twitter) in Hono.js\nDESCRIPTION: Example showing how to access token, refresh token, granted scopes and user data after X OAuth authentication flow completion.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/x', (c) => {\n  const token = c.get('token')\n  const refreshToken = c.get('refresh-token')\n  const grantedScopes = c.get('granted-scopes')\n  const user = c.get('user-x')\n\n  return c.json({\n    token,\n\t\trefreshToken\n    grantedScopes,\n    user,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Hono Auth.js Integration Setup\nDESCRIPTION: Basic setup for integrating Auth.js with Hono, including GitHub OAuth provider configuration and protected route implementation.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { authHandler, initAuthConfig, verifyAuth } from '@hono/auth-js'\nimport GitHub from '@auth/core/providers/github'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  initAuthConfig((c) => ({\n    secret: c.env.AUTH_SECRET,\n    providers: [\n      GitHub({\n        clientId: c.env.GITHUB_ID,\n        clientSecret: c.env.GITHUB_SECRET,\n      }),\n    ],\n  }))\n)\n\napp.use('/api/auth/*', authHandler())\n\napp.use('/api/*', verifyAuth())\n\napp.get('/api/protected', (c) => {\n  const auth = c.get('authUser')\n  return c.json(auth)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Authentication in Hono (OAuth App)\nDESCRIPTION: This example shows how to configure GitHub OAuth authentication for an OAuth App using the Hono framework. It includes setting up the middleware with specific scopes and handling the authenticated user data, including refresh tokens.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { githubAuth } from '@hono/oauth-providers/github'\n\nconst app = new Hono()\n\napp.use(\n  '/github',\n  githubAuth({\n    client_id: Bun.env.GITHUB_ID,\n    client_secret: Bun.env.GITHUB_SECRET,\n    scope: ['public_repo', 'read:user', 'user', 'user:email', 'user:follow'],\n    oauthApp: true,\n  })\n)\n\napp.get('/github', (c) => {\n  const token = c.get('token')\n  const refreshToken = c.get('refresh-token')\n  const user = c.get('user-github')\n\n  return c.json({\n    token,\n    refreshToken,\n    user,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Auth with Module Worker Syntax\nDESCRIPTION: Example showing how to set up Firebase authentication middleware using the Module Worker syntax in Hono. Demonstrates configuration, middleware setup, and token retrieval.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/firebase-auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport {\n  VerifyFirebaseAuthConfig,\n  VerifyFirebaseAuthEnv,\n  verifyFirebaseAuth,\n  getFirebaseToken,\n} from '@hono/firebase-auth'\n\nconst config: VerifyFirebaseAuthConfig = {\n  projectId: 'your-project-id',\n}\n\nconst app = new Hono<{ Bindings: VerifyFirebaseAuthEnv }>()\n\napp.use('*', verifyFirebaseAuth(config))\napp.get('/hello', (c) => {\n  const idToken = getFirebaseToken(c)\n  return c.json(idToken)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Effect Schema Validator Middleware in Hono (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Effect Schema Validator middleware in a Hono application. It defines a User schema using Effect Schema and applies the validator to a POST route. The middleware validates incoming JSON data against the schema before processing the request.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/effect-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { Schema as S } from '@effect/schema'\nimport { effectValidator } from '@hono/effect-validator'\n\nconst app = new Hono()\n\nconst User = S.Struct({\n  name: S.String,\n  age: S.Number,\n})\n\napp.post('/user', effectValidator('json', User), (c) => {\n  const user = c.req.valid('json')\n\n  return c.json({\n    success: true,\n    message: `${user.name} is ${user.age}`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Async Event Handlers with emitAsync in Hono.js Middleware\nDESCRIPTION: Implement async event handlers and emit events using the `emitAsync` method. This allows for asynchronous operations within your event handling logic.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = async (arg: Type) => {\n  // Async handler logic\n}\n\n// Emitting event\nawait emitter.emitAsync('eventName', arg)\n```\n\n----------------------------------------\n\nTITLE: Implementing Casbin with JWT Authentication in Hono\nDESCRIPTION: Example of using Casbin middleware with JWT Authentication in a Hono application. This implementation uses jwtAuthorizer to extract subject information from JWT tokens for authorization decisions.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { jwt } from 'hono/jwt'\nimport { newEnforcer } from 'casbin'\nimport { casbin } from '@hono/casbin'\nimport { jwtAuthorizer } from '@hono/casbin/helper'\n\nconst app = new Hono()\napp.use(\n  '*',\n  jwt({\n    secret: 'it-is-very-secret',\n  }),\n  casbin({\n    newEnforcer: newEnforcer('examples/model.conf', 'examples/policy.csv'),\n    authorizer: jwtAuthorizer,\n  })\n)\napp.get('/dataset1/test', (c) => c.text('dataset1 test')) // alice and bob can access /dataset1/test\napp.post('/dataset1/test', (c) => c.text('dataset1 test')) // Only alice can access /dataset1/test\n```\n\n----------------------------------------\n\nTITLE: Typia Validation Hook Implementation\nDESCRIPTION: Shows how to implement a custom validation hook with error handling in the Typia validator middleware.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/typia-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\n  '/post',\n  typiaValidator('json', validate, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: TypeBox Validation with Custom Hook in Hono\nDESCRIPTION: Shows how to use TypeBox validation with a custom hook function for handling validation failures. The hook allows custom error handling when validation fails.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/typebox-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tbValidator } from '@hono/typebox-validator'\nimport { Type as T } from '@sinclair/typebox'\n\nconst schema = T.Object({\n  name: T.String(),\n  age: T.Number(),\n})\n\napp.post(\n  '/user',\n  tbValidator('json', schema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Google OAuth Setup with Hono\nDESCRIPTION: A full example of setting up Google OAuth in a Hono application, including importing necessary modules and configuring the middleware.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { googleAuth } from '@hono/oauth-providers/google'\n\nconst app = new Hono()\n\napp.use(\n  '/google',\n  googleAuth({\n    client_id: Bun.env.GOOGLE_ID,\n    client_secret: Bun.env.GOOGLE_SECRET,\n    scope: ['openid', 'email', 'profile'],\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Auth with Service Worker Syntax\nDESCRIPTION: Example demonstrating Firebase authentication setup using Service Worker syntax, including custom key store and emulator configuration.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/firebase-auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { VerifyFirebaseAuthConfig, verifyFirebaseAuth, getFirebaseToken } from '@hono/firebase-auth'\n\nconst config: VerifyFirebaseAuthConfig = {\n  projectId: 'your-project-id',\n  keyStore: WorkersKVStoreSingle.getOrInitialize(PUBLIC_JWK_CACHE_KEY, PUBLIC_JWK_CACHE_KV),\n  firebaseEmulatorHost: FIREBASE_AUTH_EMULATOR_HOST,\n}\n\nconst app = new Hono()\n\napp.use('*', verifyFirebaseAuth(config))\napp.get('/hello', (c) => {\n  const idToken = getFirebaseToken(c)\n  return c.json(idToken)\n})\n\napp.fire()\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Integration with OIDC Authentication\nDESCRIPTION: Example demonstrating OIDC authentication integration with Cloudflare Pages, including domain-specific email validation and asset serving.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oidc-auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { oidcAuthMiddleware, getAuth } from '@hono/oidc-auth'\n\nconst app = new Hono()\n\napp.use('*', oidcAuthMiddleware())\napp.get('*', async (c) => {\n  const auth = await getAuth(c)\n  if (!auth?.email.endsWith('@example.com')) {\n    return c.text('Unauthorized', 401)\n  }\n  const response = await c.env.ASSETS.fetch(c.req.raw)\n  // clone the response to return a response with modifiable headers\n  const newResponse = new Response(response.body, response)\n  return newResponse\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: React Query Session Hook Implementation\nDESCRIPTION: Custom useSession hook implementation using React Query for session data fetching and caching.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst useSession = () => {\n  const { data, status } = useQuery({\n    queryKey: ['session'],\n    queryFn: async () => {\n      const res = await fetch('/api/auth/session')\n      return res.json()\n    },\n    staleTime: 5 * (60 * 1000),\n    gcTime: 10 * (60 * 1000),\n    refetchOnWindowFocus: true,\n  })\n  return { session: data, status }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Data in Hono.js Twitch OAuth Flow\nDESCRIPTION: Example of how to access the Twitch authentication data (token, refresh token, granted scopes, and user information) within a Hono.js route handler after completing the OAuth flow.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/twitch', (c) => {\n  const token = c.get('token')\n  const refreshToken = c.get('refresh-token')\n  const grantedScopes = c.get('granted-scopes')\n  const user = c.get('user-twitch')\n\n  return c.json({\n    token,\n    refreshToken,\n    grantedScopes,\n    user,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Prometheus middleware in a Hono application\nDESCRIPTION: Example of how to use the Prometheus middleware in a Hono application. It shows how to register metrics, set up a metrics endpoint, and define a basic route.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/prometheus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prometheus } from '@hono/prometheus'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\nconst { printMetrics, registerMetrics } = prometheus()\n\napp.use('*', registerMetrics)\napp.get('/metrics', printMetrics)\napp.get('/', (c) => c.text('foo'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook OAuth with Hono Middleware\nDESCRIPTION: Example of using the facebookAuth middleware in a Hono application. It demonstrates how to set up the OAuth route with specific scopes and fields.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { facebookAuth } from '@hono/oauth-providers/facebook'\n\nconst app = new Hono()\n\napp.use(\n  '/facebook',\n  facebookAuth({\n    client_id: Bun.env.FACEBOOK_ID,\n    client_secret: Bun.env.FACEBOOK_SECRET,\n    scope: ['email', 'public_profile'],\n    fields: [\n      'email',\n      'id',\n      'first_name',\n      'last_name',\n      'middle_name',\n      'name',\n      'picture',\n      'short_name',\n    ],\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Validation with Zod in Hono\nDESCRIPTION: Demonstrates basic usage of the validator middleware with Zod schema to validate JSON request body. The schema checks for a name string and age number, returning the validated data in the route handler.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/standard-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod'\nimport { sValidator } from '@hono/standard-validator'\n\nconst schema = z.object({\n  name: z.string(),\n  age: z.number(),\n})\n\napp.post('/author', sValidator('json', schema), (c) => {\n  const data = c.req.valid('json')\n  return c.json({\n    success: true,\n    message: `${data.name} is ${data.age}`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Refreshing Discord OAuth Token in Hono.js\nDESCRIPTION: Implementation of token refresh functionality for Discord OAuth, including handling of new tokens.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { discordAuth, refreshToken } from '@hono/oauth-providers/discord'\n\napp.post('/discord/refresh', async (c, next) => {\n  const newTokens = await refreshToken(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN)\n\n  // newTokenes = {\n  //   token_type: 'bear',\n  //   access_token: 'skbjbfhj3b4348wdvbwje239'\n  //   expires_in: 60000\n  //   refresh_token: 'sfcb0dwd0hdeh29db'\n  //   scope: \"identify email\"\n  // }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Context Creation in tRPC Server\nDESCRIPTION: Example of custom context creation with environment variables and headers\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '/trpc/*',\n  trpcServer({\n    router: appRouter,\n    createContext: (_opts, c) => ({\n      // c is the hono context\n      var1: c.env.MY_VAR1,\n      var2: c.req.header('X-VAR2'),\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Validating Form Data with Yup in Hono Middleware\nDESCRIPTION: This snippet shows how to use the Conform validator middleware with Yup schema in a Hono application. It validates the 'name' and 'age' fields of the submitted form data.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/conform-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { object, string } from 'yup'\nimport { parseWithYup } from '@conform-to/yup'\nimport { conformValidator } from '@hono/conform-validator'\nimport { HTTPException } from 'hono/http-exception'\n\nconst schema = object({\n  name: string(),\n  age: string(),\n})\n\napp.post(\n  '/author',\n  conformValidator((formData) => parseWithYup(formData, { schema })),\n  (c) => {\n    const submission = c.req.valid('form')\n    const data = submission.value\n    return c.json({ success: true, message: `${data.name} is ${data.age}` })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic OIDC Authentication Implementation in Hono\nDESCRIPTION: Example showing basic setup of OIDC authentication middleware with logout, callback handling, and protected routes. Demonstrates core functionality including session management and user authentication.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oidc-auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { oidcAuthMiddleware, getAuth, revokeSession, processOAuthCallback } from '@hono/oidc-auth'\nconst app = new Hono()\n\napp.get('/logout', async (c) => {\n  await revokeSession(c)\n  return c.text('You have been successfully logged out!')\n})\napp.get('/callback', async (c) => {\n  return processOAuthCallback(c)\n})\napp.use('*', oidcAuthMiddleware())\napp.get('/', async (c) => {\n  const auth = await getAuth(c)\n  return c.text(`Hello <${auth?.email}>!`)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing custom metrics with Prometheus middleware in Hono\nDESCRIPTION: Example of how to create and use custom metrics with the Prometheus middleware. It demonstrates creating a custom counter, configuring the middleware with a custom registry, and incrementing the counter.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/prometheus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prometheus } from '@hono/prometheus'\nimport { Hono } from 'hono'\nimport { Counter, Registry } from 'prom-client'\n\nconst registry = new Registry()\nconst customCounter = new Counter({\n  name: 'custom_counter',\n  help: 'A custom counter',\n  registers: [registry],\n})\n\nconst app = new Hono()\n\nconst { printMetrics, registerMetrics } = prometheus({\n  registry,\n})\n\napp.use('*', registerMetrics)\napp.get('/metrics', printMetrics)\napp.get('/', (c) => c.text('foo'))\n\nexport default app\n\n// Somewhere in your application you can increment the custom counter:\ncustomCounter.inc()\n```\n\n----------------------------------------\n\nTITLE: Implementing Context with Database Access\nDESCRIPTION: Example of tRPC context setup with Cloudflare D1 database integration\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initTRPC } from '@trpc/server'\nimport { z } from 'zod'\n\ntype Env = {\n  DB: D1Database\n}\ntype HonoContext = {\n  env: Env\n}\n\nconst t = initTRPC.context<HonoContext>().create()\n\nconst publicProcedure = t.procedure\nconst router = t.router\n\nexport const appRouter = router({\n  usersCount: publicProcedure.query(({ input, ctx }) => {\n    const result = await ctx.env.DB.prepare('SELECT count(*) from user;').all()\n    return result.results[0].count\n  }),\n})\n\nexport type AppRouter = typeof appRouter\n```\n\n----------------------------------------\n\nTITLE: Adding custom labels to Prometheus metrics in Hono\nDESCRIPTION: Demonstrates how to add custom labels to the requestsTotal metric using the metricOptions configuration. This example adds a content_type label based on the response content type.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/prometheus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '*',\n  prometheus({\n    metricOptions: {\n      requestsTotal: {\n        customLabels: {\n          content_type: (c) => c.res.headers.get('content-type'),\n        },\n      },\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Data with Valibot in Hono POST Request\nDESCRIPTION: This snippet demonstrates how to use the Valibot validator middleware in a Hono application. It defines a schema for validating JSON data in a POST request, including name (string) and age (number) fields.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/valibot-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { number, object, string } from 'valibot'\nimport { vValidator } from '@hono/valibot-validator'\n\nconst schema = object({\n  name: string(),\n  age: number(),\n})\n\napp.post('/author', vValidator('json', schema), (c) => {\n  const data = c.req.valid('json')\n  return c.json({\n    success: true,\n    message: `${data.name} is ${data.age}`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Server with Hono.js\nDESCRIPTION: This code snippet demonstrates how to set up a GraphQL server using Hono.js. It includes importing necessary modules, defining a GraphQL schema, creating a root resolver, and configuring the GraphQL server middleware.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { type RootResolver, graphqlServer } from '@hono/graphql-server'\nimport { buildSchema } from 'graphql'\n\nexport const app = new Hono()\n\nconst schema = buildSchema(`\ntype Query {\n  hello: String\n}\n`)\n\nconst rootResolver: RootResolver = (c) => {\n  return {\n    hello: () => 'Hello Hono!',\n  }\n}\n\napp.use(\n  '/graphql',\n  graphqlServer({\n    schema,\n    rootResolver,\n    graphiql: true, // if `true`, presents GraphiQL when the GraphQL endpoint is loaded in a browser.\n  })\n)\n\napp.fire()\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry with Hono in Cloudflare Workers\nDESCRIPTION: Shows how to integrate OpenTelemetry with Hono in a Cloudflare Workers environment using @microlabs/otel-cf-workers and Honeycomb for monitoring.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/otel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { otel } from '@hono/otel'\nimport { instrument, ResolveConfigFn } from '@microlabs/otel-cf-workers'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.use('*', otel())\napp.get('/', (c) => c.text('foo'))\n\nconst config: ResolveConfigFn = (env: Env, _trigger) => {\n  return {\n    exporter: {\n      url: 'https://api.honeycomb.io/v1/traces',\n      headers: { 'x-honeycomb-team': env.HONEYCOMB_API_KEY },\n    },\n    service: { name: 'greetings' },\n  }\n}\n\nexport default instrument(app, config)\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming Responses with Suspense\nDESCRIPTION: Demonstrates how to enable streaming responses with the React Renderer and use Suspense for asynchronous component loading.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { reactRenderer } from '@hono/react-renderer'\nimport { Suspense } from 'react'\n\napp.get(\n  '*',\n  reactRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>\n            <div>{children}</div>\n          </body>\n        </html>\n      )\n    },\n    {\n      stream: true,\n    }\n  )\n)\n\nlet done = false\n\nconst Component = () => {\n  if (done) {\n    return <p>Done!</p>\n  }\n  throw new Promise((resolve) => {\n    done = true\n    setTimeout(resolve, 1000)\n  })\n}\n\napp.get('/', (c) => {\n  return c.render(\n    <Suspense fallback='loading...'>\n      <Component />\n    </Suspense>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Auth Middleware in TypeScript\nDESCRIPTION: Shows different approaches to initialize OIDC auth middleware, including direct configuration and context-aware setup using middleware arguments pattern.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oidc-auth/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Before other oidc-auth APIs are used\napp.use(initOidcAuthMiddleware(config))\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Before other oidc-auth APIs are used\napp.use(async (c, next) => {\n  const config = {\n    // Create config using context\n  }\n  const middleware = initOidcAuthMiddleware(config)\n  return middleware(c, next)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cloudflare Access Implementation in Hono\nDESCRIPTION: Demonstrates the basic setup of Cloudflare Access middleware in a Hono application. The middleware is applied globally to validate requests behind Cloudflare Access using a specified team name.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/cloudflare-access/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cloudflareAccess } from '@hono/cloudflare-access'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.use('*', cloudflareAccess('my-access-team-name'))\napp.get('/', (c) => c.text('foo'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Accessing Sentry Instance\nDESCRIPTION: Example showing how to access and use the Sentry instance within an error handler to set context and capture exceptions.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/sentry/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.onError((e, c) => {\n  c.get('sentry').setContext('character', {\n    name: 'Mighty Fighter',\n    age: 19,\n    attack_type: 'melee',\n  })\n  c.get('sentry').captureException(e)\n  return c.text('Internal Server Error', 500)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Middleware with Hono.js\nDESCRIPTION: Demonstrates how to set up WebSocket functionality in a Hono.js application using the @hono/node-ws package. Shows the creation of WebSocket endpoints and server integration using the middleware helper functions.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/node-ws/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createNodeWebSocket } from '@hono/node-ws'\nimport { Hono } from 'hono'\nimport { serve } from '@hono/node-server'\n\nconst app = new Hono()\n\nconst { injectWebSocket, upgradeWebSocket } = createNodeWebSocket({ app })\n\napp.get(\n  '/ws',\n  upgradeWebSocket((c) => ({\n    // https://hono.dev/helpers/websocket\n  }))\n)\n\nconst server = serve(app)\ninjectWebSocket(server)\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Event Handlers in TypeScript for Hono.js Middleware\nDESCRIPTION: Use the `defineHandlers` and `defineHandler` functions to create event handlers with TypeScript type inference. This enables better type checking for your event handlers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndefineHandlers({\n  eventName: (arg1: Type1, arg2: Type2) => {\n    // Handler logic\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Avoiding Memory Leaks with Named Functions in Hono.js Middleware\nDESCRIPTION: Use named functions instead of anonymous functions or closures when adding event handlers inside middleware to prevent memory leaks and duplicate handlers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Correct usage\nfunction namedHandler(arg: Type) {\n  // Handler logic\n}\n\n// In middleware\nemitter.on('eventName', namedHandler)\n\n// Incorrect usage (avoid)\nemitter.on('eventName', (arg: Type) => {\n  // This creates a new function on every request\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing X (Twitter) OAuth Authentication in Hono\nDESCRIPTION: This code example illustrates how to set up X (Twitter) OAuth authentication using the Hono framework. It configures the middleware with specific scopes and additional fields for user data retrieval.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { xAuth } from '@hono/oauth-providers/x'\n\nconst app = new Hono()\n\napp.use(\n  '/x',\n  xAuth({\n    client_id: Bun.env.X_ID,\n    client_secret: Bun.env.X_SECRET,\n    scope: ['tweet.read', 'users.read', 'offline.access'],\n    fields: ['profile_image_url', 'url'],\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Defining Headers in OpenAPI Schema with Zod\nDESCRIPTION: Shows how to properly define header keys in an OpenAPI schema using Zod. This example emphasizes that header keys must be defined in lowercase to ensure they work correctly within the OpenAPI specification.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst HeadersSchema = z.object({\n  // Header keys must be in lowercase, `Authorization` is not allowed.\n  authorization: z.string().openapi({\n    example: 'Bearer SECRET',\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Zod Validator Wrapper with Error Throwing\nDESCRIPTION: Implements a custom wrapper around the zod validator that throws HTTP exceptions instead of returning error responses. Includes type definitions and usage example.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-validator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file: validator-wrapper.ts\nimport { ZodSchema } from 'zod'\nimport type { ValidationTargets } from 'hono'\nimport { zValidator as zv } from '@hono/zod-validator'\n\nexport const zValidator = <T extends ZodSchema, Target extends keyof ValidationTargets>(\n  target: Target,\n  schema: T\n) =>\n  zv(target, schema, (result, c) => {\n    if (!result.success) {\n      throw new HTTPException(400, { cause: result.error })\n    }\n  })\n\n// usage\nimport { zValidator } from './validator-wrapper'\napp.post(\n  '/post',\n  zValidator('json', schema)\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Emitting Asynchronous Event in TypeScript\nDESCRIPTION: Method signature for asynchronously emitting an event with a specified key and payload using the Emitter instance. It includes options for concurrent or sequential execution.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nemitAsync<Key extends keyof EventPayloadMap>(\n    c: Context,\n    key: Key,\n    payload: EventPayloadMap[Key],\n    options?: EmitAsyncOptions\n): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Tsyringe Middleware with Providers in Hono (TypeScript)\nDESCRIPTION: This snippet shows how to use tsyringe middleware with providers in a Hono application. It demonstrates registering a provider for a specific route pattern, allowing injection of route parameters into the providers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/tsyringe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use('/tenant/:name/*', async (c, next) => {\n  await tsyringe((container) => {\n    // Allowing to inject `c.var` or `c.req.param` in the providers\n    const tenantName = c.req.param('name')\n\n    container.register(Config, { useFactory: () => new Config(tenantName) })\n  })(c, next)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing LinkedIn Member Authentication in Hono\nDESCRIPTION: This code snippet illustrates how to set up LinkedIn Member Authentication using the Hono framework. It configures the middleware with specific scopes and handles the authenticated user data.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { linkedinAuth } from '@hono/oauth-providers/linkedin'\n\nconst app = new Hono()\n\napp.use(\n  '/linkedin',\n  linkedinAuth({\n    client_id: Bun.env.LINKEDIN_ID,\n    client_secret: Bun.env.LINKEDIN_SECRET,\n    scope: ['email', 'openid', 'profile'],\n  })\n)\n\napp.get('/linkedin', (c) => {\n  const token = c.get('token')\n  const user = c.get('user-linkedin')\n\n  return c.json({\n    token,\n    user,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Basic Class Validator Usage in Hono\nDESCRIPTION: Demonstrates the basic implementation of class-validator middleware in a Hono application. Uses decorators to validate request body fields and handles JSON responses.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/class-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { classValidator } from '@hono/class-validator'\nimport { IsInt, IsString } from 'class-validator'\n\nclass CreateUserDto {\n  @IsString()\n  name!: string\n\n  @IsInt()\n  age!: number\n}\n\nconst route = app.post('/user', classValidator('json', CreateUserDto), (c) => {\n  const user = c.req.valid('json')\n  return c.json({ success: true, message: `${user.name} is ${user.age}` })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Casbin with Basic Authentication in Hono\nDESCRIPTION: Example of using Casbin middleware with Basic HTTP Authentication in a Hono application. This implementation uses basicAuthorizer to enforce different permissions for alice and bob after authentication.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\nimport { newEnforcer } from 'casbin'\nimport { casbin } from '@hono/casbin'\nimport { basicAuthorizer } from '@hono/casbin/helper'\n\nconst app = new Hono()\napp.use(\n  '*',\n  basicAuth(\n    {\n      username: 'alice', // alice has full access to /dataset1/test\n      password: 'password',\n    },\n    {\n      username: 'bob', // bob cannot post to /dataset1/test\n      password: 'password',\n    }\n  ),\n  casbin({\n    newEnforcer: newEnforcer('examples/model.conf', 'examples/policy.csv'),\n    authorizer: basicAuthorizer,\n  })\n)\napp.get('/dataset1/test', (c) => c.text('dataset1 test')) // alice and bob can access /dataset1/test\napp.post('/dataset1/test', (c) => c.text('dataset1 test')) // Only alice can access /dataset1/test\n```\n\n----------------------------------------\n\nTITLE: Using RPC Mode with Hono Client\nDESCRIPTION: Demonstrates how to use RPC mode with Hono Client for type-safe API calls.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hc } from 'hono/client'\n\nconst appRoutes = app.openapi(route, (c) => {\n  const data = c.req.valid('json')\n  return c.json(\n    {\n      id: data.id,\n      message: 'Success',\n    },\n    200\n  )\n})\n\nconst client = hc<typeof appRoutes>('http://localhost:8787/')\n```\n\n----------------------------------------\n\nTITLE: Emitting Synchronous Event in TypeScript\nDESCRIPTION: Method signature for synchronously emitting an event with a specified key and payload using the Emitter instance.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nemit<Key extends keyof EventPayloadMap>(\n    c: Context,\n    key: Key,\n    payload: EventPayloadMap[Key]\n): void\n```\n\n----------------------------------------\n\nTITLE: Twitch OAuth Integration in Hono.js\nDESCRIPTION: Basic setup for Twitch OAuth authentication middleware with scope configuration.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { twitchAuth } from '@hono/oauth-providers/twitch'\n\nconst app = new Hono()\n\napp.use(\n  '/twitch',\n  twitchAuth({\n    client_id: Bun.env.TWITCH_ID,\n    client_secret: Bun.env.TWITCH_SECRET,\n    scope: ['user:read:email', 'channel:read:subscriptions', 'bits:read'],\n    redirect_uri: 'http://localhost:3000/twitch',\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Tsyringe Middleware in Hono Application (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up and use tsyringe middleware in a Hono application. It includes importing necessary dependencies, creating an injectable class, setting up the Hono app with tsyringe middleware, and defining a route that uses the injected dependency.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/tsyringe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'reflect-metadata' // tsyringe requires reflect-metadata or polyfill\nimport { container, inject, injectable } from 'tsyringe'\nimport { tsyringe } from '@hono/tsyringe'\nimport { Hono } from 'hono'\n\n@injectable()\nclass Hello {\n  constructor(@inject('name') private name: string) {}\n\n  greet() {\n    return `Hello, ${this.name}!`\n  }\n}\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  tsyringe((container) => {\n    container.register('name', { useValue: 'world' })\n  })\n)\n\napp.get('/', (c) => {\n  const hello = container.resolve(Hello)\n  return c.text(hello.greet())\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing LinkedIn Application Authentication in Hono\nDESCRIPTION: This example demonstrates how to configure LinkedIn Application Authentication using the Hono framework. It sets up the middleware for application-level authentication and handles the token response.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { linkedinAuth } from '@hono/oauth-providers/linkedin'\n\nconst app = new Hono()\n\napp.use(\n  '/linkedin',\n  linkedinAuth({\n    client_id: Bun.env.LINKEDIN_ID,\n    client_secret: Bun.env.LINKEDIN_SECRET,\n    appAuth: true,\n  })\n)\n\napp.get('/linkedin', (c) => {\n  const token = c.get('token')\n\n  return c.json(token)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Environment Variables\nDESCRIPTION: Required environment variables that must be set for Clerk authentication to work.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/clerk-auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCLERK_SECRET_KEY=<You-secret-key>\nCLERK_PUBLISHABLE_KEY=<Your-publishable-key>\n```\n\n----------------------------------------\n\nTITLE: Implementing esbuild Transpiler Middleware in Deno\nDESCRIPTION: Example of using the esbuild Transpiler Middleware in a Deno application. It shows how to initialize esbuild, set up routes for transpiling, and serve static content.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/esbuild-transpiler/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'npm:hono'\n\nimport { serveStatic } from 'npm:hono/deno'\nimport { esbuildTranspiler } from 'npm:@hono/esbuild-transpiler'\nimport * as esbuild from 'https://deno.land/x/esbuild@v0.19.5/wasm.js'\n\nconst app = new Hono()\n\nawait esbuild.initialize({\n  wasmURL: 'https://deno.land/x/esbuild@v0.19.5/esbuild.wasm',\n  worker: false,\n})\n\napp.get('/static/*', esbuildTranspiler({ esbuild }))\napp.get('/static/*', serveStatic())\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Claim Mapping for Casbin Authorization\nDESCRIPTION: Example of mapping custom JWT claims to be used for authorization decisions with Casbin. This allows using claims other than the default 'sub' claim for authorization.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst claimMapping = {\n  username: 'username',\n}\n// ...\ncasbin({\n  newEnforcer: newEnforcer('examples/model.conf', 'examples/policy.csv'),\n  authorizer: (c, e) => jwtAuthorizer(c, e, claimMapping),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for OpenAPI Routes\nDESCRIPTION: Shows how to configure middleware for specific OpenAPI routes using either the use method or the middleware property in route definition.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prettyJSON } from 'hono/pretty-json'\nimport { cache } from 'hono/cache'\n\napp.use(route.getRoutingPath(), prettyJSON(), cache({ cacheName: 'my-cache' }))\napp.openapi(route, handler)\n\n// Alternative approach using middleware property\nconst route = createRoute({\n  method: 'get',\n  path: '/users/{id}',\n  request: {\n    params: ParamsSchema,\n  },\n  middleware: [prettyJSON(), cache({ cacheName: 'my-cache' })] as const,\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: UserSchema,\n        },\n      },\n      description: 'Retrieve the user',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Class Validator with Custom Hook in Hono\nDESCRIPTION: Shows how to implement class-validator middleware with a custom validation hook for handling validation failures. Includes error handling and custom response formatting.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/class-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { classValidator } from '@hono/class-validator'\nimport { IsInt, IsString } from 'class-validator'\n\nclass CreateUserDto {\n  @IsString()\n  name!: string\n\n  @IsInt()\n  age!: number\n}\n\napp.post(\n  '/user',\n  classValidator('json', CreateUserDto, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing esbuild Transpiler Middleware in Node.js\nDESCRIPTION: Example of how to use the esbuild Transpiler Middleware in a Node.js application. It demonstrates setting up routes for transpiling TypeScript files and serving static content.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/esbuild-transpiler/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { serve } from '@hono/node-server'\nimport { serveStatic } from '@hono/node-server/serve-static'\nimport { esbuildTranspiler } from '@hono/esbuild-transpiler/node'\n\nconst app = new Hono()\n\napp.get('/static/:scriptName{.+.tsx?}', esbuildTranspiler())\napp.get('/static/*', serveStatic({ root: './' }))\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing esbuild Transpiler Middleware in Cloudflare Workers\nDESCRIPTION: Example of how to use the esbuild Transpiler Middleware in a Cloudflare Workers application. It demonstrates setting up routes for transpiling TypeScript files and serving static content.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/esbuild-transpiler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { serveStatic } from 'hono/cloudflare-workers'\nimport { esbuildTranspiler } from '@hono/esbuild-transpiler/wasm'\n// Specify the path of the esbuild wasm file.\nimport wasm from '../node_modules/esbuild-wasm/esbuild.wasm'\n\nconst app = new Hono()\n\napp.get('/static/:scriptName{.+.tsx?}', esbuildTranspiler({ wasmModule: wasm }))\napp.get('/static/*', serveStatic({ root: './' }))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Event Handler in TypeScript\nDESCRIPTION: Utility function to define a typed event handler. It ensures proper type inference for the handler function.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defineHandler<EPMap extends EventPayloadMap, Key extends keyof EPMap, E extends Env = Env>(\n  handler: EventHandler<EPMap[Key], E>\n): EventHandler<EPMap[Key], E>\n```\n\n----------------------------------------\n\nTITLE: Discord OAuth Integration in Hono.js\nDESCRIPTION: Basic setup for Discord OAuth authentication middleware with client configuration.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { discordAuth } from '@hono/oauth-providers/discord'\n\nconst app = new Hono()\n\napp.use(\n  '/discord',\n  discordAuth({\n    client_id: Bun.env.DISCORD_ID,\n    client_secret: Bun.env.DISCORD_SECRET,\n    scope: ['identify', 'email'],\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Basic Sentry Middleware Implementation\nDESCRIPTION: Example showing how to integrate Sentry middleware into a Hono application with basic route handling.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/sentry/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { sentry } from '@hono/sentry'\n\nconst app = new Hono()\n\napp.use('*', sentry())\napp.get('/', (c) => c.text('foo'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring tRPC Router\nDESCRIPTION: Setup of tRPC router with a basic hello procedure using Zod for input validation\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { initTRPC } from '@trpc/server'\nimport { z } from 'zod'\n\nconst t = initTRPC.create()\n\nconst publicProcedure = t.procedure\nconst router = t.router\n\nexport const appRouter = router({\n  hello: publicProcedure.input(z.string().nullish()).query(({ input }) => {\n    return `Hello ${input ?? 'World'}!`\n  }),\n})\n\nexport type AppRouter = typeof appRouter\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Typed Event Handlers in TypeScript\nDESCRIPTION: Utility function to define multiple typed event handlers. It ensures proper type inference for all handlers in the object.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defineHandlers<EPMap extends EventPayloadMap, E extends Env = Env>(handlers: {\n  [K in keyof EPMap]?: EventHandler<EPMap[K], E>[]\n}): { [K in keyof EPMap]?: EventHandler<EPMap[K], E>[] }\n```\n\n----------------------------------------\n\nTITLE: Configuring emitAsync Execution Mode in Hono.js Middleware\nDESCRIPTION: Set the execution mode for `emitAsync` to control how multiple handlers are processed. Use 'concurrent' for parallel execution or 'sequential' for ordered execution with early error termination.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Concurrent mode (default)\nawait emitter.emitAsync('eventName', arg, { mode: 'concurrent' })\n\n// Sequential mode\nawait emitter.emitAsync('eventName', arg, { mode: 'sequential' })\n```\n\n----------------------------------------\n\nTITLE: Refreshing Twitch OAuth Tokens in Hono.js\nDESCRIPTION: Example of how to refresh a Twitch OAuth token using the refreshToken method. This is useful when a user's token expires and you need to obtain a new token without requiring the user to re-authenticate.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { twitchAuth, refreshToken } from '@hono/oauth-providers/twitch'\n\napp.post('/twitch/refresh', async (c, next) => {\n  const newTokens = await refreshToken(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN)\n\n  // newTokens = {\n  //   token_type: 'bearer',\n  //   access_token: 'new-access-token',\n  //   expires_in: 60000,\n  //   refresh_token: 'new-refresh-token',\n  //   scope: ['user:read:email', 'channel:read:subscriptions', 'bits:read']\n  // }\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Deno Implementation Example\nDESCRIPTION: Example of implementing Sentry middleware in a Deno environment using the serve function.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/sentry/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from 'https://deno.land/std/http/server.ts'\nimport { sentry } from 'npm:@hono/sentry'\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\n\nconst app = new Hono()\n\napp.use('*', sentry({ dsn: 'https://xxxxxx@xxx.ingest.sentry.io/xxxxxx' }))\napp.get('/', (c) => c.text('foo'))\n\nserve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Removing Event Handler in TypeScript\nDESCRIPTION: Method signature for removing an event handler from the Emitter instance. It can remove a specific handler or all handlers for a given event key.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction off<Key extends keyof EventPayloadMap>(\n  key: Key,\n  handler?: EventHandler<EventPayloadMap[Key]>\n): void\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in React Components\nDESCRIPTION: Demonstrates how to use the useRequestContext hook to access the Hono context instance within a React function component.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst Component = () => {\n  const c = useRequestContext()\n  return <p>You access {c.req.url}</p>\n}\n\napp.get('/', (c) => {\n  return c.render(<Component />)\n})\n```\n\n----------------------------------------\n\nTITLE: Using DefaultHook for Error Handling\nDESCRIPTION: Shows how to set up a default hook for handling validation errors across all routes.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new OpenAPIHono({\n  defaultHook: (result, c) => {\n    if (!result.success) {\n      return c.json(\n        {\n          ok: false,\n          errors: formatZodErrors(result),\n          source: 'custom_error_handler',\n        },\n        422\n      )\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Revoking Twitch OAuth Tokens in Hono.js\nDESCRIPTION: Example of how to programmatically revoke a user's Twitch access token using the revokeToken method. Returns a boolean indicating whether the token was successfully revoked.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { twitchAuth, revokeToken } from '@hono/oauth-providers/twitch'\n\napp.post('/remove-user', async (c, next) => {\n  const revoked = await revokeToken(CLIENT_ID, USER_TOKEN)\n\n  // revoked = true | false\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handler in TypeScript\nDESCRIPTION: Method signature for adding an event handler to the Emitter instance. It specifies the event key and the handler function.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction on<Key extends keyof EventPayloadMap>(\n  key: Key,\n  handler: EventHandler<EventPayloadMap[Key]>\n): void\n```\n\n----------------------------------------\n\nTITLE: Creating Event Emitter in TypeScript\nDESCRIPTION: Function signature for creating a new instance of an event emitter with provided handlers. This is useful for standalone use of the emitter feature.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createEmitter<EPMap extends EventPayloadMap>(\n  eventHandlers?: EventHandlers<EPMap>,\n  options?: EventEmitterOptions\n): Emitter<EPMap>\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI v3.1 Specification\nDESCRIPTION: Demonstrates how to generate OpenAPI v3.1 specification using doc31 method or getOpenAPI31Document.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.doc31('/docs', { openapi: '3.1.0', info: { title: 'foo', version: '1' } }) // new endpoint\napp.getOpenAPI31Document({\n  openapi: '3.1.0',\n  info: { title: 'foo', version: '1' },\n}) // schema object\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Client Configuration\nDESCRIPTION: Setup of tRPC client with HTTP batch link configuration\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTRPCProxyClient, httpBatchLink } from '@trpc/client'\nimport type { AppRouter } from './router'\n\nconst client = createTRPCProxyClient<AppRouter>({\n  links: [\n    httpBatchLink({\n      url: 'http://localhost:8787/trpc',\n    }),\n  ],\n})\n\nconsole.log(await client.hello.query('Hono'))\n```\n\n----------------------------------------\n\nTITLE: HTTP Module Validation with Typia in Hono\nDESCRIPTION: Comprehensive example of using Typia's HTTP module for validating query parameters and headers with complex type definitions and multiple validators.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/typia-validator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport typia from 'typia'\nimport { typiaValidator } from '@hono/typia-validator/http'\n\ninterface Author {\n  name: string\n  age: number & tags.Type<'uint32'> & tags.Minimum<20> & tags.ExclusiveMaximum<100>\n}\n\ninterface IQuery {\n  limit?: number\n  enforce: boolean\n  values?: string[]\n  atomic: string | null\n  indexes: number[]\n}\ninterface IHeaders {\n  'x-category': 'x' | 'y' | 'z'\n  'x-memo'?: string\n  'x-name'?: string\n  'x-values': number[]\n  'x-flags': boolean[]\n  'x-descriptions': string[]\n}\n\nconst app = new Hono()\n\nconst validate = typia.createValidate<Author>()\nconst validateQuery = typia.http.createValidateQuery<IQuery>()\nconst validateHeaders = typia.http.createValidateHeaders<IHeaders>()\n\napp.get(\n  '/items',\n  typiaValidator('json', validate),\n  typiaValidator('query', validateQuery),\n  typiaValidator('header', validateHeaders),\n  (c) => {\n    const query = c.req.valid('query')\n    const headers = c.req.valid('header')\n    return c.json({\n      success: true,\n      query,\n      headers,\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Mounting OpenAPIHono App with Path Parameters\nDESCRIPTION: Demonstrates the correct way to mount a child OpenAPIHono app that uses path parameters. This example shows that parent routes should use Hono's :param syntax rather than OpenAPI's {param} syntax to ensure proper route matching.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nconst bookActionsApp = new OpenAPIHono()\n...\n// ❌ Incorrect: This will not match the route\napp.route('/books/{bookId}', bookActionsApp)\n\n// ✅ Using Hono parameter syntax\napp.route('/books/:bookId', bookActionsApp)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Event Handlers Implementation\nDESCRIPTION: Implementation of typed event handlers using defineHandlers utility.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineHandlers } from '@hono/event-emitter'\nimport { AvailableEvents } from './types'\n\nexport const handlers = defineHandlers<AvailableEvents>({\n  'user:created': [\n    (c, user) => {}, // c is current Context, payload will be correctly inferred as User\n  ],\n  'user:deleted': [\n    async (c, payload) => {}, // c is current Context, payload will be inferred as string\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Alternative Google OAuth Implementation with Hono\nDESCRIPTION: An alternative way to implement Google OAuth using the googleAuth middleware in a single route handler.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/google',\n  googleAuth({\n    client_id: Bun.env.GOOGLE_ID,\n    client_secret: Bun.env.GOOGLE_SECRET,\n    scope: ['openid', 'email', 'profile'],\n  }),\n  (c) => {\n    const token = c.get('token')\n    const grantedScopes = c.get('granted-scopes')\n    const user = c.get('user-google')\n\n    return c.json({\n      token,\n      grantedScopes,\n      user,\n    })\n  }\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Integrating Swagger Editor Middleware in a Hono Application\nDESCRIPTION: This code demonstrates how to use the swaggerEditor middleware to serve Swagger Editor on a specific route ('/swagger-editor') in a Hono application. It imports necessary dependencies and sets up the middleware with a custom URL option.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-editor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\n// Use the middleware to serve Swagger Editor at /swagger-editor\napp.get('/swagger-editor', swaggerEditor({ url: '/doc' }))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Validating Form Data with Valibot in Hono Middleware\nDESCRIPTION: This snippet illustrates how to use the Conform validator middleware with Valibot schema in a Hono application. It validates the 'name' and 'age' fields of the submitted form data.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/conform-validator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { object, string } from 'valibot'\nimport { parseWithValibot } from '@conform-to/valibot'\nimport { conformValidator } from '@hono/conform-validator'\nimport { HTTPException } from 'hono/http-exception'\n\nconst schema = object({\n  name: string(),\n  age: string(),\n})\n\napp.post(\n  '/author',\n  conformValidator((formData) => parseWithYup(formData, { schema })),\n  (c) => {\n    const submission = c.req.valid('form')\n    const data = submission.value\n    return c.json({ success: true, message: `${data.name} is ${data.age}` })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Casbin Policy Rules\nDESCRIPTION: Example policy file (policy.csv) that defines access control rules. It grants alice full access to all paths under /dataset1/, while bob has read-only (GET) access to the same paths.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, alice, /dataset1/*, *\np, bob, /dataset1/*, GET\n```\n\n----------------------------------------\n\nTITLE: Revoking Google OAuth Token\nDESCRIPTION: Example of how to programmatically revoke a user's access token using the revokeToken method from the Google OAuth provider.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { googleAuth, revokeToken } from '@hono/oauth-providers/google'\n\napp.post('/remove-user', async (c, next) => {\n  await revokeToken(USER_TOKEN)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello Middleware in Hono (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Hello middleware in a Hono application. It imports the necessary modules, creates a new Hono instance, applies the middleware globally, and sets up a route.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/hello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hello } from '@hono/hello'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.use('*', hello('Hello!! Hono!!'))\napp.get('/', (c) => c.text('foo'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Using Valibot Validator Hook for Custom Error Handling in Hono\nDESCRIPTION: This example shows how to use a hook with the Valibot validator middleware in a Hono application. It allows for custom error handling when validation fails, such as returning a specific error message and status code.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/valibot-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.post(\n  '/post',\n  vValidator('json', schema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OIDC Auth Middleware Dependencies\nDESCRIPTION: Command to install the required npm packages for using the OIDC authentication middleware with Hono.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oidc-auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nnpm i hono @hono/oidc-auth\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus middleware for Hono\nDESCRIPTION: Command to install the Prometheus middleware and its dependency prom-client using npm or yarn.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/prometheus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -S @hono/prometheus prom-client\n# or\nyarn add @hono/prometheus prom-client\n```\n\n----------------------------------------\n\nTITLE: Refreshing X OAuth Token in Hono.js\nDESCRIPTION: Implementation of token refresh functionality for X OAuth using the refreshToken method.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { xAuth, refreshToken } from '@hono/oauth-providers/x'\n\napp.post('/x/refresh', async (c, next) => {\n  await refreshToken(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin Model File\nDESCRIPTION: Example configuration file (model.conf) for Casbin that defines request structure, policy structure, policy effect, and matchers. This model enables path-based access control with wildcard support.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && keyMatch(r.obj, p.obj) && (r.act == p.act || p.act == \"*\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Qwik City Middleware in Hono Application\nDESCRIPTION: Demonstrates how to set up and configure Qwik City middleware in a Hono application. The middleware requires the render function and qwikCityPlan as configuration parameters. It handles all routes using the wildcard pattern.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/qwik-city/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { qwikMiddleware } from '@hono/qwik-city'\nimport qwikCityPlan from '@qwik-city-plan'\nimport render from './entry.ssr'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.all('*', qwikMiddleware({ render, qwikCityPlan }))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js Dependencies for Hono\nDESCRIPTION: Installation command for required packages including Hono, Auth.js middleware, and core authentication library.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i hono @hono/auth-js @auth/core\n```\n\n----------------------------------------\n\nTITLE: Revoking Discord OAuth Token in Hono.js\nDESCRIPTION: Example of revoking a Discord user's access token with return status indication.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { discordAuth, revokeToken } from '@hono/oauth-providers/discord'\n\napp.post('/remove-user', async (c, next) => {\n  const revoked = await revokeToken(CLIENT_ID, CLIENT_SECRET, USER_TOKEN)\n\n  // revoked = true | false\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Props with React Renderer\nDESCRIPTION: Example of using the extended Props interface to pass a title to the layout and render a component with those props.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\n  '*',\n  reactRenderer(({ children, title }) => {\n    return (\n      <html>\n        <head>\n          <title>{title}</title>\n        </head>\n        <body>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/', (c) => {\n  return c.render(<p>Welcome!</p>, {\n    title: 'Top Page',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bun Transpiler with Hono\nDESCRIPTION: Example showing how to set up and use the Bun Transpiler middleware with Hono. It demonstrates configuring routes for transpiling TypeScript/TSX files and serving static content.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/bun-transpiler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { serveStatic } from 'hono/bun'\nimport { bunTranspiler } from '@hono/bun-transpiler'\n\nconst app = new Hono()\n\napp.get('/static/:scriptName{.+.tsx?}', bunTranspiler())\napp.get('/static/*', serveStatic({ root: './' }))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Using Swagger UI Component with Custom HTML\nDESCRIPTION: Implementation of Swagger UI as a component within a custom HTML structure using hono/html.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { html } from 'hono/html'\nimport { SwaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\napp.get('/ui', (c) => {\n  return c.html(`\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Custom Swagger\" />\n        <title>Custom Swagger</title>\n        <script>\n          // custom script\n        </script>\n        <style>\n          /* custom style */\n        </style>\n      </head>\n      ${SwaggerUI({ url: '/doc' })}\n    </html>\n  `)\n})\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Header Validation with Valibot in Hono\nDESCRIPTION: Demonstrates header validation using Valibot schema. Shows how to handle lowercase header names in validation as required by Hono's internal header handling.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/standard-validator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from 'valibot'\nimport { sValidator } from '@hono/standard-validator'\n\nconst schema = object({\n  'content-type': string(),\n  'user-agent': string(),\n})\n\napp.post('/author', sValidator('header', schema), (c) => {\n  const headers = c.req.valid('header')\n  // do something with headers\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ArkType Validator Implementation in Hono\nDESCRIPTION: Demonstrates the basic usage of the ArkType validator middleware in a Hono application. It creates a schema to validate JSON data with name and age properties, then accesses the validated data in the request handler.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/arktype-validator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type } from 'arktype'\nimport { arktypeValidator } from '@hono/arktype-validator'\n\nconst schema = type({\n  name: 'string',\n  age: 'number',\n})\n\napp.post('/author', arktypeValidator('json', schema), (c) => {\n  const data = c.req.valid('json')\n  return c.json({\n    success: true,\n    message: `${data.name} is ${data.age}`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN in Development\nDESCRIPTION: Example of setting the Sentry DSN in a .dev.vars file for development environment.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/sentry/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSENTRY_DSN=<Your DSN>\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in Cloudflare Access Middleware\nDESCRIPTION: Shows how to access and use the JWT payload data from Cloudflare Access authentication. Includes type definitions for variables and demonstrates accessing the authenticated user's email from the payload.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/cloudflare-access/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cloudflareAccess, CloudflareAccessVariables } from '@hono/cloudflare-access'\nimport { Hono } from 'hono'\n\ntype myVariables = {\n  user: number\n}\n\nconst app = new Hono<{ Variables: myVariables & CloudflareAccessVariables }>()\n\napp.use('*', cloudflareAccess('my-access-team-name'))\napp.get('/', (c) => {\n  const payload = c.get('accessPayload')\n\n  return c.text(`You just authenticated with the email ${payload.email}`)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Hook in Hono\nDESCRIPTION: Shows how to implement a custom validation hook that handles validation failures. The hook allows custom error handling when validation fails.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/standard-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\n  '/post',\n  sValidator('json', schema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types Definition\nDESCRIPTION: TypeScript type definitions for event payloads and environment variables.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Emitter } from '@hono/event-emitter'\n\nexport type User = {\n  id: string\n  title: string\n  role: string\n}\n\nexport type AvailableEvents = {\n  'user:created': User\n  'user:deleted': string\n  foo: { bar: number }\n}\n\nexport type Env = {\n  Bindings: {}\n  Variables: {\n    emitter: Emitter<AvailableEvents>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Server Middleware with yarn\nDESCRIPTION: Command to install the @hono/graphql-server package using yarn.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nyarn add @hono/graphql-server\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono with Medley Router\nDESCRIPTION: Demonstrates how to setup a Hono application using the MedleyRouter middleware. Shows basic route configuration with a GET endpoint.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/medley-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { MedleyRouter } from '@hono/medley-router'\n\nconst app = new Hono({ router: new MedleyRouter() })\n\napp.get('/', (c) => c.text('Hello'))\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors\nDESCRIPTION: Demonstrates how to handle validation errors by defining an error schema and adding an error response to the route.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ErrorSchema = z.object({\n  code: z.number().openapi({\n    example: 400,\n  }),\n  message: z.string().openapi({\n    example: 'Bad Request',\n  }),\n})\n\nconst route = createRoute({\n  method: 'get',\n  path: '/users/{id}',\n  request: {\n    params: ParamsSchema,\n  },\n  responses: {\n    400: {\n      content: {\n        'application/json': {\n          schema: ErrorSchema,\n        },\n      },\n      description: 'Returns an error',\n    },\n  },\n})\n\napp.openapi(\n  route,\n  (c) => {\n    const { id } = c.req.valid('param')\n    return c.json(\n      {\n        id,\n        age: 20,\n        name: 'Ultra-man',\n      },\n      200\n    )\n  },\n  // Hook\n  (result, c) => {\n    if (!result.success) {\n      return c.json(\n        {\n          code: 400,\n          message: 'Validation Error',\n        },\n        400\n      )\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing @hono/eslint-config Package\nDESCRIPTION: This snippet shows how to install the @hono/eslint-config package using npm or yarn. This package provides the ESLint configuration for Hono projects.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/eslint-config/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hono/eslint-config\n# or\nyarn add @hono/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Installing Hono React Compatibility Layer via npm\nDESCRIPTION: This command installs @hono/react-compat as aliases for both react and react-dom packages. After installation, @hono/react-compat will be loaded whenever react is referenced in import statements or jsxImportSource settings.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-compat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@npm:@hono/react-compat react-dom@npm:@hono/react-compat\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OIDC Claims Processing in TypeScript\nDESCRIPTION: Demonstrates how to handle OIDC authentication claims and callbacks with custom processing. Includes type declarations for claims and implementation of a claims hook function that processes ID tokens and original auth data.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oidc-auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IDToken, OidcAuth, TokenEndpointResponses } from '@hono/oidc-auth';\nimport { processOAuthCallback } from '@hono/oidc-auth';\nimport type { Context, OidcAuthClaims } from 'hono';\n\ndeclare module 'hono' {\n  interface OidcAuthClaims {\n    name: string\n    sub: string\n  }\n}\n\nconst oidcClaimsHook = async (orig: OidcAuth | undefined, claims: IDToken | undefined, _response: TokenEndpointResponses): Promise<OidcAuthClaims> => {\n  /*\n  const { someOtherInfo } = await fetch(c.get('oidcAuthorizationServer').userinfo_endpoint, {\n    header: _response.access_token\n  }).then((res) => res.json())\n  */\n  return {\n    name: claims?.name as string ?? orig?.name ?? '',\n    sub: claims?.sub ?? orig?.sub ?? ''\n  };\n}),\n...\napp.get('/callback', async (c) => {\n  c.set('oidcClaimsHook', oidcClaimsHook); // also assure to set before any getAuth(), in case the token is refreshed\n  return processOAuthCallback(c);\n})\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing tRPC Server in Hono\nDESCRIPTION: Integration of tRPC server middleware with Hono application setup\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { trpcServer } from '@hono/trpc-server' // Deno 'npm:@hono/trpc-server'\nimport { appRouter } from './router'\n\nconst app = new Hono()\n\napp.use(\n  '/trpc/*',\n  trpcServer({\n    router: appRouter,\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: HTML Output with DOCTYPE\nDESCRIPTION: The resulting HTML output when using the docType option, showing the DOCTYPE declaration and the rendered HTML structure.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <body>\n    <div><p>Welcome!</p></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Hook for Conform Validator in Hono Middleware\nDESCRIPTION: This snippet demonstrates how to use a custom hook with the Conform validator middleware in a Hono application. It allows for custom error handling and response modification when validation fails.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/conform-validator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.post(\n  '/author',\n  conformValidator(\n    (formData) => parseWithYup(formData, { schema })\n    (submission, c) => {\n      if(submission.status !== 'success') {\n        return c.json({ success: false, message: 'Bad Request' }, 400)\n      }\n    }\n  ),\n  (c) => {\n    const submission = c.req.valid('form')\n    const data = submission.value\n    return c.json({ success: true, message: `${data.name} is ${data.age}` })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Event Handlers Configuration\nDESCRIPTION: Defines event handlers for user-related events in JavaScript with Hono context support.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Define event handlers\nexport const handlers = {\n  'user:created': [\n    (c, payload) => {}, // c is current Context, payload is whatever the emit method passes\n  ],\n  'user:deleted': [\n    async (c, payload) => {}, // c is current Context, payload is whatever the emit method passes\n  ],\n  foo: [\n    (c, payload) => {}, // c is current Context, payload is whatever the emit method passes\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for documenting version changes, including version numbers, PR references, commit hashes, and change descriptions\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.15\n\n### Patch Changes\n\n- [#813](https://github.com/honojs/middleware/pull/813) [`b1c812e50c9388cf7cda893e7c554cedeb24d803`](https://github.com/honojs/middleware/commit/b1c812e50c9388cf7cda893e7c554cedeb24d803) Thanks [@divyam234](https://github.com/divyam234)! - add react 19 in peer dependencies\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React Renderer with Hono\nDESCRIPTION: Simple example demonstrating how to set up a Hono application with the React Renderer middleware, creating a layout and rendering a welcome message.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from 'hono'\nimport { reactRenderer } from '@hono/react-renderer'\n\nconst app = new Hono()\n\napp.get(\n  '*',\n  reactRenderer(({ children }) => {\n    return (\n      <html>\n        <body>\n          <h1>React + Hono</h1>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/', (c) => {\n  return c.render(<p>Welcome!</p>)\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Auth.js\nDESCRIPTION: Required environment variables setup for Auth.js configuration including secret and authentication URL.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_SECRET=#required\nAUTH_URL=https://example.com/api/auth\n```\n\n----------------------------------------\n\nTITLE: Effect Validator Changelog in Markdown\nDESCRIPTION: Markdown-formatted changelog entries documenting version updates from 1.0.0 to 1.2.0, including new features, minor changes and patches.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/effect-validator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @hono/effect-validator\n\n## 1.2.0\n\n### Minor Changes\n\n- [#859](https://github.com/honojs/middleware/pull/859) [`739d4a01fc4e2f3d3c252d617ae27058c40c9b37`](https://github.com/honojs/middleware/commit/739d4a01fc4e2f3d3c252d617ae27058c40c9b37) Thanks [@baseballyama](https://github.com/baseballyama)! - feat: support `effect@3.10.0`\n\n## 1.1.0\n\n### Minor Changes\n\n- [#718](https://github.com/honojs/middleware/pull/718) [`80da4aa50a74af1d442893ddcd1ac4fc4f5d5d4c`](https://github.com/honojs/middleware/commit/80da4aa50a74af1d442893ddcd1ac4fc4f5d5d4c) Thanks [@shokiw](https://github.com/shokiw)! - format errors with array formatting for improved readability\n\n## 1.0.1\n\n### Patch Changes\n\n- [#657](https://github.com/honojs/middleware/pull/657) [`8cf5bf0055483caa08344efc8ada3d22d4833fac`](https://github.com/honojs/middleware/commit/8cf5bf0055483caa08344efc8ada3d22d4833fac) Thanks [@yusukebe](https://github.com/yusukebe)! - fix: add a build command to `package.json` at the top\n\n## 1.0.0\n\n### Major Changes\n\n- [#589](https://github.com/honojs/middleware/pull/589) [`95eb48c83e9a7c38da5070312ccdfeaffea7e70d`](https://github.com/honojs/middleware/commit/95eb48c83e9a7c38da5070312ccdfeaffea7e70d) Thanks [@gunta](https://github.com/gunta)! - Add new basic Effect Schema validator middleware\n```\n\n----------------------------------------\n\nTITLE: Accessing Clerk Backend API Client\nDESCRIPTION: Example demonstrating how to access and use the Clerk Backend API client instance to fetch user details.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/clerk-auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware, getAuth } from '@hono/clerk-auth'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.use('*', clerkMiddleware())\napp.get('/', async (c) => {\n  const clerkClient = c.get('clerk')\n\n  try {\n    const user = await clerkClient.users.getUser('user_id_....')\n\n    return c.json({\n      user,\n    })\n  } catch (e) {\n    return c.json(\n      {\n        message: 'User not found.',\n      },\n      404\n    )\n  }\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SSR External Dependencies\nDESCRIPTION: Vite configuration to handle server-side rendering with external React dependencies, using Hono's Vite plugins for Cloudflare Pages.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport build from '@hono/vite-cloudflare-pages'\nimport devServer from '@hono/vite-dev-server'\nimport adapter from '@hono/vite-dev-server/cloudflare'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  ssr: {\n    external: ['react', 'react-dom'], // <== add\n  },\n  plugins: [\n    build(),\n    devServer({\n      adapter,\n      entry: 'src/index.tsx',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.4.2 changelog in Markdown\nDESCRIPTION: Lists the patch changes for version 0.4.2, fixing the context propagation issue to resolvers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.2\n\n### Patch Changes\n\n- [#361](https://github.com/honojs/middleware/pull/361) [`2c7b25fc2a89490ac3138b6143f8e71657b49fe8`](https://github.com/honojs/middleware/commit/2c7b25fc2a89490ac3138b6143f8e71657b49fe8) Thanks [@metrue](https://github.com/metrue)! - Fix the context not propagated down to resovlers issue.\n```\n\n----------------------------------------\n\nTITLE: Integrating Swagger UI with OpenAPIHono\nDESCRIPTION: Complete example showing integration of Swagger UI with OpenAPIHono including route creation and OpenAPI documentation.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAPIHono, createRoute, z } from '@hono/zod-openapi'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new OpenAPIHono()\n\napp.openapi(\n  createRoute({\n    method: 'get',\n    path: '/hello',\n    responses: {\n      200: {\n        description: 'Respond a message',\n        content: {\n          'application/json': {\n            schema: z.object({\n              message: z.string(),\n            }),\n          },\n        },\n      },\n    },\n  }),\n  (c) => {\n    return c.json({\n      message: 'hello',\n    })\n  }\n)\n\napp.get(\n  '/ui',\n  swaggerUI({\n    url: '/doc',\n  })\n)\n\napp.doc('/doc', {\n  info: {\n    title: 'An API',\n    version: 'v1',\n  },\n  openapi: '3.1.0',\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Refreshing LinkedIn OAuth Token in Hono\nDESCRIPTION: This snippet shows how to use the refreshToken method to programmatically refresh a LinkedIn OAuth token. It demonstrates the usage of the refreshToken function with the required parameters.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { linkedinAuth, refreshToken } from '@hono/oauth-providers/linkedin'\n\napp.post('linkedin/refresh-token', async (c, next) => {\n  const token = await refreshToken(LINKEDIN_ID, LINKEDIN_SECRET, USER_REFRESH_TOKEN)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for Typia Validator in TypeScript\nDESCRIPTION: This code snippet demonstrates updating the import path for the typiaValidator function to enable handling of number, boolean, and bigint types in query parameters and headers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/typia-validator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n- import { typiaValidator } from '@hono/typia-validator';\n+ import { typiaValidator } from '@hono/typia-validator/http';\n  import { Hono } from 'hono';\n  import typia, { type tags } from 'typia';\n\n  interface Schema {\n-   pages: `${number}`[];\n+   pages: (number & tags.Type<'uint32'>)[];\n  }\n\n  const app = new Hono()\n    .get(\n      '/books',\n      typiaValidator(\n-       typia.createValidate<Schema>(),\n+       typia.http.createValidateQuery<Schema>(),\n        async (result, c) => {\n          if (!result.success)\n            return c.text('Invalid query parameters', 400);\n-         return { pages: result.data.pages.map(Number) };\n        }\n      ),\n      async c => {\n        const { pages } = c.req.valid('query'); // { pages: number[] }\n        //...\n      }\n    )\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown\nDESCRIPTION: Version history and change documentation for @hono/qwik-city middleware, including patches, pull request references, and contributor acknowledgments.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/qwik-city/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @hono/qwik-city\n\n## 0.0.5\n\n### Patch Changes\n\n- [#321](https://github.com/honojs/middleware/pull/321) [`616afbcd03928dbec40089cec638e15eea3e2030`](https://github.com/honojs/middleware/commit/616afbcd03928dbec40089cec638e15eea3e2030) Thanks [@tleperou](https://github.com/tleperou)! - expose qwik city throughout all the request methods instead of only the get\n\n## 0.0.4\n\n### Patch Changes\n\n- [#127](https://github.com/honojs/middleware/pull/127) [`bbe197a`](https://github.com/honojs/middleware/commit/bbe197acc34b0ebc47a9609710eb420ecec6aded) Thanks [@shuymn](https://github.com/shuymn)! - feat(qwik-city): adapt to qwik-city changes in v1.2.0\n\n## 0.0.3\n\n### Patch Changes\n\n- [`fe125e0`](https://github.com/honojs/middleware/commit/fe125e02b3fc5aa584487e621e6b442a710bbbfe) Thanks [@totto2727](https://github.com/totto2727)! - #94 81fe019: update Qwik\n\n## 0.0.2\n\n### Patch Changes\n\n- [#79](https://github.com/honojs/middleware/pull/79) [`bf87efc`](https://github.com/honojs/middleware/commit/bf87efc9547d06f987036ca7a40b0929e813f4d9) Thanks [@yusukebe](https://github.com/yusukebe)! - fix: fix building\n\n- [#78](https://github.com/honojs/middleware/pull/78) [`2d87f28`](https://github.com/honojs/middleware/commit/2d87f28889f78b55622f046f3493b0eadb8873a2) Thanks [@yusukebe](https://github.com/yusukebe)! - feat: bump up Qwik\n\n## 0.0.1\n\n### Patch Changes\n\n- a5e3312: initial release\n```\n\n----------------------------------------\n\nTITLE: Revoking X OAuth Token in Hono.js\nDESCRIPTION: Example of revoking a user's access token programmatically using the revokeToken method.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { xAuth, revokeToken } from '@hono/oauth-providers/x'\n\napp.post('/remove-user', async (c, next) => {\n  await revokeToken(CLIENT_ID, CLIENT_SECRET, USER_TOKEN)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Props Interface for React Renderer\nDESCRIPTION: Example showing how to extend the Props interface to add custom properties like title that can be passed to the renderer.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@hono/react-renderer' {\n  interface Props {\n    title: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 0.3.2\nDESCRIPTION: Documents update to allow compatibility with tRPC version 11\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#599](https://github.com/honojs/middleware/pull/599) [`43f34ea4dcc15925d1bd555b6d2bdb24e1eaa1a1`](https://github.com/honojs/middleware/commit/43f34ea4dcc15925d1bd555b6d2bdb24e1eaa1a1) Thanks [@BlankParticle](https://github.com/BlankParticle)! - chore: update `@hono/trpc-server` to allow using Trpc 11\n```\n\n----------------------------------------\n\nTITLE: React SessionProvider Implementation\nDESCRIPTION: Basic React component implementation using SessionProvider and useSession hook from Auth.js.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SessionProvider, useSession } from '@hono/auth-js/react'\n\nexport default function App() {\n  return (\n    <SessionProvider>\n      <Children />\n    </SessionProvider>\n  )\n}\n\nfunction Children() {\n  const { data: session, status } = useSession()\n  return <div>I am {session?.user}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DOCTYPE with React Renderer\nDESCRIPTION: Shows how to enable the docType option to add the HTML DOCTYPE declaration to the rendered output.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\n  '*',\n  reactRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>\n            <div>{children}</div>\n          </body>\n        </html>\n      )\n    },\n    {\n      docType: true,\n    }\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Ajv Validation with Custom Error Handling Hook\nDESCRIPTION: Shows how to implement Ajv validation with a custom error handling hook. The hook allows custom handling of validation failures, in this case returning a 400 status with an 'Invalid!' message.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/ajv-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type JSONSchemaType } from 'ajv'\nimport { ajvValidator } from '@hono/ajv-validator'\n\nconst schema: JSONSchemaType<{ name: string; age: number }> = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    age: { type: 'number' },\n  },\n  required: ['name', 'age'],\n  additionalProperties: false,\n}\n\napp.post(\n  '/user',\n  ajvValidator('json', schema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring WASM Module in TypeScript\nDESCRIPTION: TypeScript declaration for WASM modules, allowing import of .wasm files in the project.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/esbuild-transpiler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.wasm'\n```\n\n----------------------------------------\n\nTITLE: Accessing Discord OAuth Data in Hono.js\nDESCRIPTION: Example showing how to access token, refresh token, granted scopes and user data after Discord OAuth authentication.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/discord', (c) => {\n  const token = c.get('token')\n  const refreshToken = c.get('refresh-token')\n  const grantedScopes = c.get('granted-scopes')\n  const user = c.get('user-discord')\n\n  return c.json({\n    token,\n\t\trefreshToken\n    grantedScopes,\n    user,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Sentry Type Definition\nDESCRIPTION: Type definition for Sentry middleware options, extending ToucanOptions but omitting request and context properties.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/sentry/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Options as ToucanOptions } from 'toucan-js'\ntype Options = Omit<ToucanOptions, 'request' | 'context'>\n```\n\n----------------------------------------\n\nTITLE: Introducing Twitch OAuth Provider in Markdown\nDESCRIPTION: A minor update that adds Twitch OAuth provider support, including authentication flow, token management, and comprehensive testing.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#981](https://github.com/honojs/middleware/pull/981) [`e5f383787c2bd47657f67a99074515eab969963b`](https://github.com/honojs/middleware/commit/e5f383787c2bd47657f67a99074515eab969963b) Thanks [@Younis-Ahmed](https://github.com/Younis-Ahmed)! - These chages introduces a Twitch OAuth provider, expanding the middleware's OAuth offerings. It includes a new middleware for Twitch authentication, a dedicated `AuthFlow` class, token refreshing/revocation/validation, and comprehensive type definitions. Detailed tests ensure correct behavior and error handling.\n\n  - **Twitch OAuth Middleware `src/providers/twitch/twitchAuth.ts`:** Implements the core authentication flow, handling state management, redirects, and context variable setting (`token`, `refresh-token`, `user-twitch`, `granted-scopes`).\n\n  - **AuthFlow Class `src/providers/twitch/authFlow.ts`:** Encapsulates token exchange and user data retrieval, with robust error handling.\n\n  - **Token Operations `src/providers/twitch/refreshToken.ts`:** Provides functions for refreshing and revoking tokens.\n\n  - **Type Definitions `src/providers/twitch/types.ts:** Defines comprehensive types for Twitch API responses.\n\n  - **Extensive Testing (`test/handlers.ts`, `test/index.test.ts`):** Includes unit tests covering redirection, valid code flow, error handling, refresh/revoke token, custom and built-in state scenarios, using a mock server.\n\n  - **Validate Token `src/providers/twitch/validateToken`**: That hit `/validate` endpoint to verify that the access token is still valid for reasons other than token expiring.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Endpoints in tRPC Server\nDESCRIPTION: Setup of custom endpoint configuration for tRPC server middleware\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { trpcServer } from '@hono/trpc-server'\nimport { appRouter } from './router'\n\nconst app = new Hono()\n\n// Custom endpoint configuration\napp.use(\n  '/api/trpc/*',\n  trpcServer({\n    endpoint: '/api/trpc',\n    router: appRouter,\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Custom Auth Path Configuration\nDESCRIPTION: Example of configuring a custom authentication path instead of the default /api/auth path.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/auth-js/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SessionProvider, authConfigManager, useSession } from '@hono/auth-js/react'\n\nauthConfigManager.setConfig({\n  basePath: '/custom', // if auth route is diff from /api/auth\n})\n\nexport default function App() {\n  return (\n    <SessionProvider>\n      <Children />\n    </SessionProvider>\n  )\n}\n\nfunction Children() {\n  const { data: session, status } = useSession()\n  return <div>I am {session?.user}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Hono Projects\nDESCRIPTION: This snippet demonstrates how to set up the ESLint configuration file (eslint.config.mjs) for Hono projects. It imports the base configuration from @hono/eslint-config and exports it as the default configuration.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/eslint-config/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport baseConfig from '@hono/eslint-config'\n\nexport default [...baseConfig]\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig for React JSX\nDESCRIPTION: TypeScript configuration required for using React JSX with the middleware, setting jsx option to react-jsx and jsxImportSource to react.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing esbuild Transpiler Middleware for Cloudflare Workers\nDESCRIPTION: Command to install the necessary dependencies for using the esbuild Transpiler Middleware in a Cloudflare Workers environment.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/esbuild-transpiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm i hono @hono/esbuild-transpiler esbuild-wasm\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 0.3.4\nDESCRIPTION: Documents a patch fix for properly wrapping Request with Proxy getter receiver\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#864](https://github.com/honojs/middleware/pull/864) [`d67e279d8289d8a0e5c0a71b80f8703b4a97a0c4`](https://github.com/honojs/middleware/commit/d67e279d8289d8a0e5c0a71b80f8703b4a97a0c4) Thanks [@Gaubee](https://github.com/Gaubee)! - fix(trpc-server) wrap Request with Proxy getter receiver should Request-instance\n```\n\n----------------------------------------\n\nTITLE: Customizing DOCTYPE in React Renderer\nDESCRIPTION: Example of specifying a custom DOCTYPE declaration string instead of using the default HTML5 DOCTYPE.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\n  '*',\n  reactRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>\n            <div>{children}</div>\n          </body>\n        </html>\n      )\n    },\n    {\n      docType:\n        '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n    }\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Installing esbuild Transpiler Middleware for Node.js\nDESCRIPTION: Command to install the necessary dependencies for using the esbuild Transpiler Middleware in a Node.js environment.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/esbuild-transpiler/README.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nnpm i hono @hono/node-server @hono/esbuild-transpiler esbuild\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.5.1 changelog in Markdown\nDESCRIPTION: Documents the changes in version 0.5.1, including making the context argument required for the root resolver function.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.1\n\n### Patch Changes\n\n- [#705](https://github.com/honojs/middleware/pull/705) [`9cac146245bc410f328ce59e1b82358464307a88`](https://github.com/honojs/middleware/commit/9cac146245bc410f328ce59e1b82358464307a88) Thanks [@metrue](https://github.com/metrue)! - Make argument (context) for the root resolver function from optional to required.\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Middleware\nDESCRIPTION: Command to install Hono and Sentry middleware packages using npm.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/sentry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i hono @hono/sentry\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger UI Package for Hono\nDESCRIPTION: Commands for installing the @hono/swagger-ui package using npm or yarn package managers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hono/swagger-ui\n# or\nyarn add @hono/swagger-ui\n```\n\n----------------------------------------\n\nTITLE: Version Control Information in Markdown\nDESCRIPTION: Changelog entries documenting version changes, including migrations to Clerk Core v2, peer dependency updates, and ESM export fixes.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/clerk-auth/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @hono/clerk-auth\n\n## 2.0.0\n\n### Major Changes\n\n- [#465](https://github.com/honojs/middleware/pull/465) [`1823a2862744628143ee78bf06c0df3a99d22209`](https://github.com/honojs/middleware/commit/1823a2862744628143ee78bf06c0df3a99d22209) Thanks [@MonsterDeveloper](https://github.com/MonsterDeveloper)! - Migrate to Clerk Core v2\n\n## 1.0.3\n\n### Patch Changes\n\n- [#463](https://github.com/honojs/middleware/pull/463) [`892ea7da85fb2c799eacc4d29651e1fa45a6aec0`](https://github.com/honojs/middleware/commit/892ea7da85fb2c799eacc4d29651e1fa45a6aec0) Thanks [@yudai-nkt](https://github.com/yudai-nkt)! - Update peer dependencies so that newer validators can be installed.\n\n## 1.0.2\n\n### Patch Changes\n\n- [#460](https://github.com/honojs/middleware/pull/460) [`6497f5772f84027a07ef2c728cb10b2f8a172dda`](https://github.com/honojs/middleware/commit/6497f5772f84027a07ef2c728cb10b2f8a172dda) Thanks [@hadeeb](https://github.com/hadeeb)! - fix: export esm\n\n## 1.0.1\n\n### Patch Changes\n\n- [#380](https://github.com/honojs/middleware/pull/380) [`ea19f6bdeb14216da0880baf5dd5885395c0f008`](https://github.com/honojs/middleware/commit/ea19f6bdeb14216da0880baf5dd5885395c0f008) Thanks [@CarlosZiegler](https://github.com/CarlosZiegler)! - fix: change peer dependency to support v4.0.0\n\n## 1.0.0\n\n### Major Changes\n\n- [#151](https://github.com/honojs/middleware/pull/151) [`a18da2a`](https://github.com/honojs/middleware/commit/a18da2a5456e7d4ec407569d202a0754df3ae472) Thanks [@octoper](https://github.com/octoper)! - Added Clerk Middleware\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin Middleware for Hono\nDESCRIPTION: Command to install the required packages for using Casbin middleware with Hono. This includes the Hono framework, the Casbin middleware for Hono, and the core Casbin library.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/casbin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i hono @hono/casbin casbin\n```\n\n----------------------------------------\n\nTITLE: Installing Zod OpenAPI Hono and Dependencies\nDESCRIPTION: Command to install Zod OpenAPI Hono along with its required dependencies Hono and Zod using npm.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-openapi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i hono zod @hono/zod-openapi\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.4.1 changelog in Markdown\nDESCRIPTION: Documents the patch changes in version 0.4.1, adding type safety to RootResolvers and Options.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.1\n\n### Patch Changes\n\n- [#201](https://github.com/honojs/middleware/pull/201) [`989d968`](https://github.com/honojs/middleware/commit/989d96879566a190c58804d01888e8356dbc762c) Thanks [@koralle](https://github.com/koralle)! - add type safety to RootResolvers and Options\n```\n\n----------------------------------------\n\nTITLE: Installing React Renderer Middleware and Dependencies\nDESCRIPTION: Command to install the React Renderer Middleware along with its dependencies including React, React DOM, and Hono.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/react-renderer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nnpm i @hono/react-renderer react react-dom hono\nnpm i -D @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Authentication Dependencies\nDESCRIPTION: Command for installing the required npm packages including Hono, Clerk authentication middleware, and Clerk backend SDK.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/clerk-auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i hono @hono/clerk-auth @clerk/backend\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.4.0 changelog in Markdown\nDESCRIPTION: Lists the minor changes for version 0.4.0, updating Hono to version 3.0.0.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n### Minor Changes\n\n- [#53](https://github.com/honojs/middleware/pull/53) [`ca1a210`](https://github.com/honojs/middleware/commit/ca1a2103a7b2692d05e29c67f891a9a147240efb) Thanks [@lrazovic](https://github.com/lrazovic)! - feat: bump up Hono to version 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing tRPC Server Middleware\nDESCRIPTION: NPM installation command for the tRPC server middleware package\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hono/trpc-server\n```\n\n----------------------------------------\n\nTITLE: Installing Hono and OAuth Providers Middleware\nDESCRIPTION: Command to install the required npm packages for using Hono and the OAuth providers middleware.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i hono @hono/oauth-providers\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry documenting the initial release of the Conform validator middleware, including PR reference and commit hash.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/conform-validator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @hono/conform-validator\n\n## 1.0.0\n\n### Major Changes\n\n- [#666](https://github.com/honojs/middleware/pull/666) [`d4a69131e1a6a2cd6d32d5da53a824bee0ce8ea4`](https://github.com/honojs/middleware/commit/d4a69131e1a6a2cd6d32d5da53a824bee0ce8ea4) Thanks [@uttk](https://github.com/uttk)! - Create Conform validator middleware\n```\n\n----------------------------------------\n\nTITLE: Installing Bun Transpiler Middleware\nDESCRIPTION: Command to install the Bun Transpiler middleware package using npm.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/bun-transpiler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @hono/bun-transpiler\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Server Middleware with npm\nDESCRIPTION: Command to install the @hono/graphql-server package using npm.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @hono/graphql-server\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger Editor Middleware for Hono\nDESCRIPTION: This snippet shows how to install the @hono/swagger-editor package using npm or yarn. It's a prerequisite step for using the middleware in a Hono application.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-editor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hono/swagger-editor\n# or\nyarn add @hono/swagger-editor\n```\n\n----------------------------------------\n\nTITLE: Installing Event Emitter Package\nDESCRIPTION: Commands for installing the @hono/event-emitter package using different package managers.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/event-emitter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @hono/event-emitter\n# or\nyarn add @hono/event-emitter\n# or\npnpm add @hono/event-emitter\n# or\nbun install @hono/event-emitter\n```\n\n----------------------------------------\n\nTITLE: Updating Twitter Authorization URL in Markdown\nDESCRIPTION: A patch update that fixes the Twitter authorization URL.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/oauth-providers/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#1099](https://github.com/honojs/middleware/pull/1099) [`091b182a6ac1b7bb1129123d3cd0acca5e41b80d`](https://github.com/honojs/middleware/commit/091b182a6ac1b7bb1129123d3cd0acca5e41b80d) Thanks [@liquidleif](https://github.com/liquidleif)! - fix: Update twitter authorization url\n```\n\n----------------------------------------\n\nTITLE: Running Local Tests with Yarn\nDESCRIPTION: Command for running tests in local environment using yarn package manager with emulator.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/firebase-auth/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test-with-emulator\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.5.0 changelog in Markdown\nDESCRIPTION: Details the minor changes in version 0.5.0, specifically adding GraphiQL support to the middleware.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0\n\n### Minor Changes\n\n- [#670](https://github.com/honojs/middleware/pull/670) [`e3eafbc117103ef408f8b242784b53c9ffdb326e`](https://github.com/honojs/middleware/commit/e3eafbc117103ef408f8b242784b53c9ffdb326e) Thanks [@3w36zj6](https://github.com/3w36zj6)! - feat: add GraphiQL support\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.4.3 changelog in Markdown\nDESCRIPTION: Documents the patch changes in version 0.4.3, updating peer dependency to support v4.0.0.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.3\n\n### Patch Changes\n\n- [#390](https://github.com/honojs/middleware/pull/390) [`c789dab697687249eb3d94068ae8e27f7b5a7e5d`](https://github.com/honojs/middleware/commit/c789dab697687249eb3d94068ae8e27f7b5a7e5d) Thanks [@a-skua](https://github.com/a-skua)! - fix: change peer dependency to support v4.0.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 0.3.3\nDESCRIPTION: Documents an update to use honoReq's bodyCache for tRPC request body function\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/trpc-server/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#850](https://github.com/honojs/middleware/pull/850) [`ee83665c5e01acbcfaaddcd552f2f6d2d3e8006c`](https://github.com/honojs/middleware/commit/ee83665c5e01acbcfaaddcd552f2f6d2d3e8006c) Thanks [@Gaubee](https://github.com/Gaubee)! - Use honoReq's bodyCache to provide a body function for trpc's req\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a GitHub pull request and commit in a markdown changelog entry. It includes a link to the pull request and the full commit hash.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/swagger-ui/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#988](https://github.com/honojs/middleware/pull/988) [`708aa3510c9847194974e91de9f0f323da945773`](https://github.com/honojs/middleware/commit/708aa3510c9847194974e91de9f0f323da945773)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency in package.json for @hono/zod-validator\nDESCRIPTION: This code snippet shows how to update the dependency for @hono/zod-validator in a project's package.json file to the latest version (0.4.3).\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-validator/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@hono/zod-validator\": \"^0.4.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.4.4 changelog in Markdown\nDESCRIPTION: Lists the patch changes for version 0.4.4, which includes adding type to Middleware Handler.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.4\n\n### Patch Changes\n\n- [#667](https://github.com/honojs/middleware/pull/667) [`41ab4b029d225901b7369d88fb29b64f6c217dda`](https://github.com/honojs/middleware/commit/41ab4b029d225901b7369d88fb29b64f6c217dda) Thanks [@3w36zj6](https://github.com/3w36zj6)! - fix: add type to Middleware Handler\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for Release Management\nDESCRIPTION: Command to create a changeset that documents changes made to the middleware. Changesets are used to manage releases and update the CHANGELOG automatically.\nSOURCE: https://github.com/honojs/middleware/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nyarn changeset\n```\n\n----------------------------------------\n\nTITLE: Zod Validation with Custom Hook Handler\nDESCRIPTION: Shows how to implement a custom hook handler for validation failures. Returns a 400 status with an 'Invalid!' message when validation fails.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/zod-validator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\n  '/post',\n  zValidator('json', schema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  })\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Hono Third-Party Middleware in Deno\nDESCRIPTION: Demonstrates how to import a Hono third-party middleware in a Deno environment using the npm: prefix. This approach allows Deno users to access the same middleware packages as Node.js users.\nSOURCE: https://github.com/honojs/middleware/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { hello } from 'npm:@hono/hello'\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Hono Middleware\nDESCRIPTION: Command to run tests for Hono middleware using Yarn and Vitest. Tests should be placed in the middleware's src directory with a .test. in the filename.\nSOURCE: https://github.com/honojs/middleware/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Hono Third-Party Middleware via NPM\nDESCRIPTION: Command to install a third-party middleware package from the Hono ecosystem using NPM. The example shows how to install a hypothetical '@hono/hello' package.\nSOURCE: https://github.com/honojs/middleware/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nnpm install @hono/hello\n```\n\n----------------------------------------\n\nTITLE: Displaying version 0.2.0 changelog in Markdown\nDESCRIPTION: Documents the minor changes in version 0.2.0, renaming the package from @honojs/graphql-server to @hono/graphql-server.\nSOURCE: https://github.com/honojs/middleware/blob/main/packages/graphql-server/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- a05c98d: renamed `@honojs/graphql-server` to `@hono/graphql-server`\n```"
  }
]